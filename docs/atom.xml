<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-01-31T01:43:23Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl weekly challenge 97</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10063</id>
    <published>2021-01-30T09:42:31Z</published>
    <updated>2021-01-31T03:11:19Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <category term="pwc" label="PWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-097/james-smith/perl">Github</a></p>

<h3>Challenge 1</h3>
You are given string <tt>$S</tt> containing alphabets <tt>A</tt>..<tt>Z</tt> only and a number <tt>$N</tt>. Write a script to encrypt the given string <tt>$S</tt> using Caesar Cipher with left shift of size <tt>$N</tt>.

<h4>Solution</h4>
<pre><code>
sub caesar {
  return $_[0] =~ s{([A-Z])}{chr 65+(-65-$_[1]+ord$1)%26}regex;
}
</code></pre>

<p>This is a simple one liner - but has some neat features - other than using "regex" for the switches, although most are important...</p>

<ul>
	<li>r - return value rather than substitute in original string</li>
	<li>e - evaluate replace rather than use string</li>
	<li>g - repeat over all characters</li>
	<li>x - not needed (comments in match) - but looks good!</li>
</ul>

<p>In the <tt>eval</tt>ed replacement code - there is some clever ordering of values to reduce the need for brackets...</p>

<ul>
  <li><tt>65</tt> is at the front of the <tt>chr</tt> block as needing the bracket for the <tt>%26</tt> - it would be evaluated as the bracket wrapping the parameters for <tt>chr</tt> .. so would evaluate as:
<ul>
  <li><tt><strong>( chr(-65-$_[1]+ord$1) )</strong> %26+65</tt></li>
</ul>
</li>
<li><tt>-65</tt> is at the start of the bracket - to allow us to not use brackets for the <tt>ord</tt> - if it was at the beginning you would need ord as it would evaluate ord <tt>$1 - 65 - $_[1]</tt>  as
<ul><li><tt>ord( <strong>$1 - 65 - $_[1]</strong> )</tt></li></ul>
</li>
</ul>

<h3>Binary Substrings</h3>
<p>You are given a binary string <tt>$B</tt> and an integer <tt>$S</tt>.</p>
<p>Write a script to split the binary string <tt>$B</tt> of size <tt>$S</tt> and then find the minimum number of flips required to make it all the same.</p>

<h4>Solution</h4>

<p>As the first problem was a good one for applying "<em><strong>Golfing</strong></em>" techniques to it - I thought I would play along and try the second one....</p>

<pre><code>
sub min_flips {
  [
    local $/,
    local $\= length( $_[0] ) / $_[1],
    map { $/ = !$_->[0] || $_->[1] < $/ ? $_->[1] : $/ }
    map { [ $_->[0], ( $_[0] ^ $_->[1] ) =~ y/\1/\1/ ] }
    map { [ $_->[0], $_->[1] x $\ ]                    }
    map { [ $_,      substr$_[0], $_, $_[1] ]          }
    map { $_ * $_[1]                                   }
    0 .. $\-1
  ]->[-1]
}
</code></pre>

<p><strong>Notes</strong></p>

<p>
  This was designed to serve as an example of perl idioms that other programmers may find difficult to understand - and so I tried to put as many of them in a relatively short function.... a discussion thread on the <a href="https://www.facebook.com/groups/perlprogrammers">Perl programmers</a> facebook group.
</p>

<ul>
  <li>One statement functions are a "lovely" perl concept - even if they can get a bit difficult to read....</li>
  <li>In perl there are special variables which give you information about the current process, or allow us to alter the functionality. To avoid creating variables I use these in the function. If you change these you can change how the code works - but here we use "local" copies - so that when we return from the function (block) they revert to their normal values - so we don't introduce any side-effects of our code
<ul>
  <li><tt>$/</tt> - normally the input record separator - we will use for the minimum value</li>
  <li><tt>$\</tt> - normally the output record separator - we will use for the number of chunks</li>
</ul>
  </li>
  <li><tt>@_</tt> - the list of parameters passed to a function - in this case <tt>$_[0]</tt> is the string and <tt>$_[1]</tt> is the block size</li>
  <li>Chained maps - we can simplify the maps by chaining them together, here we break it down into 5 separate stages - remember we have to read the code backwards. So we will look at the separate blocks of code working upwards...<ul>
  <li><tt>0..$\-1</tt> - this returns a list of indices for the substrings</tt>
  <li><tt>map { $_*$_[1] }</tt> - this converts those indices into start locations (<tt>$_</tt> is the value of the element of variable that the <tt>map</tt> function is processing</li>
  <li><tt>map { [ $_, substr$_[0],$_,$_[1] ] }</tt> - this grabs the substring for the <em>n</em>th block - but keeps the start location as we will need it later... Here we see a map returning an arrayref - in subsequent requests - <tt>$_->[0]</tt> is the start offset of the block and <tt>$_->[1]</tt> is the property we are munging in this case the substring.
<br /><strong>You have to be careful here as <tt>$_[0]</tt> and <tt>$_->[0]</tt> look similar but are different</strong></li>
  <li><tt>map { [ $_->[0], $_->[1] x $\ ] }</tt> - this maps the string we just have to have the same length as our original string - by performing a perl "string multiplication" <tt>x</tt> </li>
  <li><tt>map { [ $_->[0], ( $_[0] ^ $_->[1] ) =~ y/\1/\1/ ] }</tt> - count the flips. Two perlisms here - we can use xor operator <tt>^</tt> on strings to xor the binary values of each character. <tt>y/../../</tt> - the translate operator returns the number of substitutions it makes - in this case we are substituting the ASCII character with decimal value of "1"... when the strings are same the byte value of the xor is 0 or "\0" and when they are different the value is 1 or "\1"</li>
  <li><tt>map { $/ = !$_->[0] || $_->[1] < $/ ? $_->[1] : $/  }</tt> - finally we keep the running total of the minimum value - Now this is why we kept the start of the block around - as the first time through the loop we have to define the minimum - if <tt>$_->[0]</tt> is zero then we assign <tt>$_->[1]</tt> to <tt>$/</tt> - we could have used the <tt>List::Util</tt> function <tt>min</tt> - but I try and avoid using external modules if I can...</li>
  </ul></li>
  <li>The list is the running minimums so we have to get the last element off the list - we do this with by wrapping the list in <tt>[ ]</tt> to make it an arrayref and then taking its last value <tt>[{list}]->[-1]</tt> perl indexes the last element as <tt>-1</tt>.</li>
  <li>And we return this value (implicit return)</li>
  <li>As the statement ends before the closing curly brace we don't need a semicolon {we aren't really sticking to PBP here anyway...!}</li>
</ul>]]>
        
    </content>
</entry>
  <entry>
  <title>Perl.com registry attack</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl.com-registry-attack"/>
  <id>tag:news.perlfoundation.org,2021-01-30:/post/perl.com-registry-attack</id>
  <published>2021-01-30T14:01:50</published>
  <updated>2021-01-30T14:01:50</updated>
  <summary>
  <![CDATA[
     The community-managed Perl.com domain has been subject to a registry attack. Up to date information is available on the The Perl NOC blog here and also The Perl Foundation twitter feed here. 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The community-managed Perl.com domain has been subject to a registry attack. </p>

<p>Up to date information is available on the <a href="https://log.perl.org/2021/01/perlcom-hijacked.htm">The Perl NOC  blog here</a> and also The Perl Foundation <a href="https://twitter.com/perlfoundation">twitter feed here</a>.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-9060466932145771050</id>
    <published>2021-01-27T20:01:00.003-08:00</published>
    <updated>2021-01-30T08:40:46.006-08:00</updated>
    <title type="text">perl.com hijacked </title>
    <content type="html">&lt;p&gt;&amp;nbsp;The perl.com domain was hijacked this morning, and is currently pointing to a parking site.&amp;nbsp; Work is ongoing to attempt to recover it.&lt;/p&gt;&lt;p&gt;&amp;nbsp;We encourage you NOT to visit the domain, as there are some signals that it may be related to sites that have distributed malware in the past.&lt;/p&gt;&lt;p&gt;&amp;nbsp; Some users may have it selected as their CPAN mirror.&amp;nbsp; To update your mirror in CPAN.pm use &lt;span style="font-family: courier;"&gt;o conf urllist http://www.cpan.org/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;# perl -MCPAN -eshell&lt;br /&gt;cpan shell -- CPAN exploration and modules installation (v2.20)&lt;br /&gt;Enter 'h' for help.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;cpan[1]&amp;gt; o conf urllist http://www.cpan.org/&lt;br /&gt;Please use 'o conf commit' to make the config permanent!&lt;br /&gt;cpan[2]&amp;gt; o conf commit&lt;br /&gt;commit: wrote '/root/.cpan/CPAN/MyConfig.pm'&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;Update 2021-01-28:&lt;/div&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;div style="text-align: left;"&gt;Work is underway to attempt to recover the domain.&amp;nbsp; If you're looking for the content, you can visit &lt;a href="https://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Update 2021-01-30:&lt;/div&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;div&gt;&lt;div style="text-align: left;"&gt;Network Solutions is working with Tom Christiansen, the rightful registrant, on the recovery of the Perl.com domain. There is no estimated timeline for its recovery but the process is underway. The Perl.com site is temporarily at &lt;a href="http://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;. Anyone using a perl.com host for their CPAN mirror should use &lt;a href="http://www.cpan.org"&gt;www.cpan.org&lt;/a&gt; instead. Please direct all inquiries to brian d foy (brian.d.foy@gmail.com).&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/01/perlcom-hijacked.html" title="perl.com hijacked "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5805788118497084055</id>
    <published>2021-01-30T16:11:00.000+01:00</published>
    <updated>2021-01-30T16:11:10.093+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxvi) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997002&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.997000 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.89&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 166&lt;/li&gt;  &lt;li&gt;Previous version: 0.89 was 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.009&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.008 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.300005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.300005&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 0.300004 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.47&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.46 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9717' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9717&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.9716 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.03&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 4.02 was 1 year, 11 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.06&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.05 was 6 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.13&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.10 was 3 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210123' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210123&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210120 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.72&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 443&lt;/li&gt;  &lt;li&gt;Previous version: 8.71 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-3.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.41&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 3.40 was 3 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Role-Tiny-2.002004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Role::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Roles: a nouvelle cuisine portion size slice of Moose &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002004&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 62&lt;/li&gt;  &lt;li&gt;Previous version: 2.002003 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0930' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0930&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0929 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.34 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 5.06 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5805788118497084055/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html" title="(cccxxvi) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4665405017904009112</id>
    <published>2021-01-30T16:08:00.001+01:00</published>
    <updated>2021-01-30T16:08:06.158+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 63&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/perl"&gt;perl&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/30 15:07:03 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Art::World" target="_blank"&gt;Art::World&lt;/a&gt; - Agents interactions modeling  ð¨&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coy" target="_blank"&gt;Coy&lt;/a&gt; - Like Carp only prettier&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID::NCName" target="_blank"&gt;Data::UUID::NCName&lt;/a&gt; - Make valid NCName tokens which are also UUIDs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::OnlineDDL" target="_blank"&gt;DBIx::OnlineDDL&lt;/a&gt; - Run DDL on online databases safely&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::installdeps" target="_blank"&gt;Dist::Zilla::App::Command::installdeps&lt;/a&gt; - Install author dependencies for a Dist::Zilla dist&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONLD" target="_blank"&gt;JSONLD&lt;/a&gt; - A toolkit for transforming JSON-LD data.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl::Mojo" target="_blank"&gt;RxPerl::Mojo&lt;/a&gt; - Mojo::IOLoop adapter for RxPerl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; - Google API Discovery and SDK&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::ImageMagick" target="_blank"&gt;Alien::ImageMagick&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::DBI" target="_blank"&gt;AnyEvent::DBI&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::WebDriver" target="_blank"&gt;AnyEvent::WebDriver&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Context" target="_blank"&gt;App::Context&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=166)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Browser::Start" target="_blank"&gt;Browser::Start&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::DOES" target="_blank"&gt;Class::DOES&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Load" target="_blank"&gt;Class::Load&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro::Mysql" target="_blank"&gt;Coro::Mysql&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::GUID" target="_blank"&gt;Data::GUID&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive::Encode" target="_blank"&gt;Data::Recursive::Encode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=199)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Journal" target="_blank"&gt;DBIx::Class::Journal&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::DataModel" target="_blank"&gt;DBIx::DataModel&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL" target="_blank"&gt;GraphQL&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::AllUtils" target="_blank"&gt;List::AllUtils&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Slice" target="_blank"&gt;List::Slice&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::SomeUtils" target="_blank"&gt;List::SomeUtils&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch" target="_blank"&gt;Log::Dispatch&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Meerkat" target="_blank"&gt;Meerkat&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Menlo" target="_blank"&gt;Menlo&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=443)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+3=368)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl7::Handy" target="_blank"&gt;Perl7::Handy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Session::Token" target="_blank"&gt;Session::Token&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Most" target="_blank"&gt;Test::Most&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Spec" target="_blank"&gt;Test::Spec&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unaccent::PurePerl" target="_blank"&gt;Text::Unaccent::PurePerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::LineBreak" target="_blank"&gt;Unicode::LineBreak&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Tussle" target="_blank"&gt;Unicode::Tussle&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4665405017904009112/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html" title="(cdlii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5721119042696929826</id>
    <published>2021-01-30T16:05:00.001+01:00</published>
    <updated>2021-01-30T16:05:57.226+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-01-30 15:05:16 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957561" target="_blank"&gt;Perl - evaluation order of list elements, with assignment inside the list&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65886868" target="_blank"&gt;Efficiently counting tokens column-wise in Bash/Awk/Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65949533" target="_blank"&gt;Insert linebreak in a file after a string&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65864154" target="_blank"&gt;How to save the white spaces in emptied columns while reading a file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65918624" target="_blank"&gt;Remove special character while reading file in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65931084" target="_blank"&gt;Why does the package qualification of symbols result in less memory used, even if the symbols are imported locally?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957545" target="_blank"&gt;How to do `defined` with a hash slice&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65887741" target="_blank"&gt;Converting CSV file to XML with Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65910258" target="_blank"&gt;How to join lines in between 2 conditions&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65919825" target="_blank"&gt;perl die if a variable is set to undef, correct?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5721119042696929826/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html" title="(cdlxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Release 1.50 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/jonasbn/perl-workflow">perl-workflow</a> is picking up <em>so much speed</em>  I did not have the time to write up a proper announcement of the 1.50 release.</p>

<p>This relases is continuing the cleaning and bug fixing.</p>

<p>Discussions have started on the general direction of perl-workflow and we are getting en route to flesh out a road map for a major release.</p>

<p>My hope it that the major release, is going to set a new direction for the perl-workflow framework and it might be cutting ties with some of the old ways of doings things, but we want to do this in good order and without breaking backwards compability without a proper deprecation cycle.</p>

<p>The plan is to have some of the upcoming releases, to be announcements of deprection notices, where the deprectation will be scheduled for exection down the line.</p>

<p><a href="https://github.com/jonasbn/perl-workflow">perl-workflow</a> has expended it number of project members with two. This gives us the ability to handle some of all the work more effectively and all changes can be reviewed, which is a major step up from one maintainer.</p>

<h2>
  <a href="#change-log-for-perlworkflow-release-150" class="anchor">
  </a>
  Change log for perl-workflow release 1.50
</h2>

<ul>
<li><p>Removal of unused dependency: Log::Dispatch, PR <a href="https://github.com/jonasbn/perl-workflow/pull/64">#64</a></p></li>
<li><p>Perl::Critic annotations addressed, enabled a few Perl::Critic tests, PR <a href="https://github.com/jonasbn/perl-workflow/pull/58">#58</a> and <a href="https://github.com/jonasbn/perl-workflow/pull/59">#59</a></p></li>
<li><p>Cleared out VSCode configuration file from distribution</p></li>
<li><p>Removed obsolete notes directory containing older coverage reports, now covered by Coveralls.io, PR <a href="https://github.com/jonasbn/perl-workflow/pull/63">#63</a></p></li>
<li><p>Removed obsolete prototypes directory containing minor examples for code constructs, PR <a href="https://github.com/jonasbn/perl-workflow/pull/62">#62</a></p></li>
<li><p>Addressed reports of failling tests from CPAN-testers for release 1.49, test suite now supports being run without <code>PERL_USE_UNSAFE_INC</code>, PR <a href="https://github.com/jonasbn/perl-workflow/pull/53">#53</a></p></li>
<li><p>Implementation of workaround for issue #10 with the failing observers, this is expected to be readdressed, as the observer implementation will be revisited, PR <a href="https://github.com/jonasbn/perl-workflow/pull/60">#60</a></p></li>
<li><p>Stop requiring a DSN to be configured when the DBI handle is sourced from elsewhere; instead, require a <code>driver</code> attribute to be specified, PR <a href="https://github.com/jonasbn/perl-workflow/pull/51">#51</a></p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h</id>
    <published>2021-01-30T12:23:52Z</published>
    <updated>2021-01-30T12:23:52Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
  <title>Grant Proposal Recap: January 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposals_recap_jan_2021</id>
  <published>2021-01-28T22:38:01</published>
  <updated>2021-01-28T22:38:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee has received the following grant proposal for the January 2021 round: Raku CI integration bot Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities. Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after. 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has received the following grant proposal for the January 2021 round:
* <a href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot">Raku CI integration bot</a></p>

<p>Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities.</p>

<p>Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal: Raku CI integration bot</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposal_raku_ci_integration_bot</id>
  <published>2021-01-28T22:29:18</published>
  <updated>2021-01-28T22:29:18</updated>
  <summary>
  <![CDATA[
     Synopsis Implement a software, named Raku CI Bot which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects. Author Patrick Böker Why The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems: Imposing limits on CPU or wallclock time Not supporting all needed platforms Unreliability Usability The proposed software 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Implement a software, named Raku CI Bot (RCB), which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects.</p>

<h2>Author</h2>

<p>Patrick Böker</p>

<h2>Why</h2>

<p>The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems:</p>

<ul>
<li>Imposing limits on CPU or wallclock time</li>
<li>Not supporting all needed platforms</li>
<li>Unreliability</li>
<li>Usability </li>
</ul>

<p>The proposed software is designed to solve these problems:
* By polling GitHub and the CI platforms in addition to listening to a hook, changes a guaranteed to not get lost.
* By interfacing with both AzureCI and Open Build Service, we get access to a very wide range of platforms.
* By implementing several command words usable in PR comments, a <a href="https://github.com/Raku/problem-solving/pull/219/files">PR-only workflow</a> becomes a lot easier to adhere to.
* By persisting sources, build logs and artifacts test failures are easier to diagnose.</p>

<h2>Milestones</h2>

<ul>
<li>Setup
<ul>
<li>Set up a stack with Cro and Postgres and put it in a container.</li>
<li>Get it up and running on a publicly accessible temporary test server.</li>
</ul></li>
<li>Pan out the core model and class interfaces</li>
<li>Extend <a href="https://github.com/fayland/perl6-WebService-GitHub">WebService::GitHub</a> to cover the <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/checks">Checks</a>, <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls">Pulls</a> and <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#commits">Commits</a> APIs.</li>
<li>A <code>Webservice::OBS</code> module providing access to the relevant bits of the OBS API.</li>
<li>A <code>Webservice::AzurePipelines</code> module providing access to the <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/?view=azure-devops-rest-6.0">Build</a> API.</li>
<li>Implement the core model including tests and DB serialization</li>
<li>Implement logic to listen to GitHub hooks and poll filling a persisted work queue.</li>
<li>Azure CI:
<ul>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a <a href="https://docs.microsoft.com/en-us/azure/devops/service-hooks/services/webhooks?view=azure-devops">platform hook</a></li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>Implement logic to report a test status back to GitHub.</li>
<li>OBS CI:
<ul>
<li>Set up an OBS project to build Rakudo. This can build on the previous work of niner.</li>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a platform hook (I probably have to implement the notification part on the OBS site as well, as OBS seems to provide no hooks for build completion.)</li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>A website
<ul>
<li>Basic setup</li>
<li>An index that lists build jobs</li>
<li>Build job page
<ul>
<li>Build state and result</li>
<li>Build logs</li>
<li>Source and artifact downloads</li>
<li>Link to previous tests (in case of re-runs)</li>
<li>Link to AzureCI, OBS, GitHub</li>
</ul></li>
<li>Add some styling</li>
</ul></li>
</ul>

<h2>Communication</h2>

<p>I plan to write status update posts whenever there is relevant progress. I estimate there will be 4 - 8 posts overall. The posts will be published <a href="https://dev.to/patrickbkr/">here</a>. I intend the posts to have a focus on explaining the software so the posts can double as documentation.</p>

<h2>Schedule</h2>

<p>I estimate the project to be about 80 hours of work. I can allocate <em>at least</em> 8 hours per week to work on this. This would mean I finish the project in two and a half months. These are estimates and unforseen difficulties can push the timeline.</p>

<h2>Requested amount</h2>

<p>I request $4000 USD.</p>

<p>82 h * 40 € = 3,280 € ~= $4000</p>

<h2>Biography</h2>

<p>I have been involved in Raku development since 2018 with a focus on integration and tooling. I:</p>

<ul>
<li>Designed and implemented Rakudos relocatability functionality</li>
<li>Set up automated building of precompiled relocatable packages for Windows, Linux and MacOS. First on CircleCI then on AzureCI.</li>
<li>Migrated the core projects CI infrastructure to AzureCI (shutdown of Travis, CircleCI and AppVeyor is still to be done)</li>
<li>Gave the rakudo.org website an overhaul</li>
<li>Took over the rakubrew project (then named Rakudobrew) refactored it largely and implemented many new features, among them
<ul>
<li>Windows support</li>
<li>Utilizing the precompiled archives served on rakudo.org</li>
<li>A new website</li>
<li>Installation via a self-contained executable</li>
</ul></li>
<li>Fixed many, many papercut bugs in a wide range of modules, documentation and some in the compiler stack itself</li>
<li>Have utilized Raku in my dayjob in multiple medium sized projects</li>
<li>Wrote a small program in Perl which remotely monitors a MediaWiki website for changes, runs a validator and feeds the validation results back to the site. The functionality is in several aspects similar to the proposed project.</li>
</ul>

<h2>Open questions</h2>

<p>Will we be able to persist the sources and artifacts of every build job in the long run? Depending on how many platforms we want to test on the build artifacts for a single test run could end up in the range of half a gigabyte. Some clever compression might prove to be helpful here.</p>

<h2>Implementation details</h2>

<p>RCB acts as an intermediate between changes in GitHub and the CI services. Initially supported CI services will be Azure and Open Build Service (OBS).</p>

<p>RCB will monitor GitHub for three event types:</p>

<ul>
<li>Commits to a master branch</li>
<li>A new PR or a commit in a PR</li>
<li>A comment in a PR which includes a command word</li>
</ul>

<p>A change typically triggers a CI run. The following steps happen:
- RCB retrieves the sources off of GitHub and creates a source tarball compatible with our source release files.
- RCB triggers CI services to test this source tarball.
- The CIs finish their test and report back to RCB.
- RCB retrieves and saves build logs from the CI backends. This is especially important for re-tests, because on some CI platforms doing a re-test makes the original build log inaccessible.
- RCB retrieves and saves build artifacts from the CI backends.
- RCB reports the results back to GitHub as Status notifications.</p>

<h2>Comment triggers</h2>

<p>In addition to commit and PR events RCB will scan PR comments for command words.
- <code>{merge on success}</code> will cause RCB to automatically merge the PR should the CI tests be successful. If the tests are unsuccessful RCB will add a comment stating that automatic merging did not happen.
  There will be a check for the permissions of the person writing the comment whether the person has merge permissions.
- <code>{re-test}</code> will cause RCB to run the CI for the respective PR again.</p>

<h2>Flapper detection</h2>

<p>RCB will scan failed CI build logs for known flappers. If a flapper is identified as the only failure the test is re-run automatically once.</p>

<h2>Branch matching</h2>

<p>When preparing a CI run for a PR in either the <code>rakudo/rakudo</code>, <code>Raku/nqp</code> or <code>MoarVM/MoarVM</code> repo, RCB will check if a PR with a matching name exists in any of the other repos and use that PR instead of the master branch for testing.</p>

<p>If no such PR is found, RCB will follow a commit matching logic.
- Commits in <code>rakudo/rakudo</code> will use the NQP version given in <code>tools/templates/NQP_REVISION</code> and MoarVM commit given in NQPs <code>tools/templates/MOAR_REVISION</code>.
- Commits in <code>Raku/nqp</code> will use the MoarVM commit given in <code>tools/templates/MOAR_REVISION</code> and Rakudo master.
- Commits in <code>MoarVM/MoarVM</code> will use NQP master and Rakudo master.</p>

<p>This commit matching logic is already in use in the Azure CI pipeline. (The branch matching logic isn't though.)</p>

<h2>Website</h2>

<p>RCB will serve a website that provides a list of all CI runs. Each run will provide the following information:
- Link to the GitHub page that triggered the run
- The build source archive
- Links to previous runs for the same source
- For each CI backend
    - Link to the respective CI page
    - The build log
    - The build artifacts
- A button to retrigger the CI run</p>

<h2>Third party API triggers</h2>

<p>RCB will interface with several third party APIs that provide push triggers. Namely GitHub, OBS and Azure. Push triggers have proven to not be entirely reliable in the past. As a counter measure RCB will not only listen to the push triggers, but also poll the external APIs periodically. This way RCB will be:
- Responsive (reaction time of a few seconds) by directly reacting to push triggers.
- Reliable by internally keeping a list of all events in the third party and keeping that list in sync by polling.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for December 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2020-december"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/dave-report-2020-december</id>
  <published>2021-01-28T14:37:04</published>
  <updated>2021-01-28T14:37:04</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund.  We would like to thank the TPF sponsors to make this grant possible. In December I worked on fixing some compiler warnings and smoke failures. I also made a start looking into making perl abort after the first syntax error. SUMMARY:  3:16 fix compiler warnings  1:15 fix smoke failures  
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
 We would like to thank the TPF sponsors to make this grant possible.</p>

<pre>
In December I worked on fixing some compiler warnings and smoke failures.
I also made a start looking into making perl abort after the first syntax
error.

SUMMARY:
      3:16 fix compiler warnings
      1:15 fix smoke failures
      0:45 look at Coverity issues
      1:42 make syntax errors abort immediately
      8:15 process p5p mailbox
      1:22 regex match length calculation overflow
    ------
     16:35 TOTAL (HH::MM)
         </pre>

    ]]>
  </content>
</entry>
  <entry>
    <title>User Story Mapping Teil 1</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In der agilen Software-Entwicklung wird oft die formale Korrektheit von User Storys über ihren eigentlichen Zweck gestellt: Die Beteiligten erzählen einander Geschichten aus Anwendersicht. Während der Umsetzung der Software verlieren Beteiligte zudem oft den Blick »auf’s große Ganze«. Die Methode »User Story Mapping« möchte helfen, diese Probleme zu beheben und durch die enstehende Software das Leben der Anwender verbessern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1</id>
    <published>2021-01-28T10:00:00Z</published>
    <updated>2021-01-28T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Better Perl with subroutine signatures and type validation</title>
    <link rel="alternate" href="https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck" type="text/html"/>
    <content type="html">&lt;p&gt;Did you know that you could increase the read­abil­i­ty and reli­a­bil­i­ty of your Perl code with one fea­ture? I’m talk­ing about sub­rou­tine sig­na­tures: the abil­i­ty to declare what argu­ments, and in some cas­es what types of argu­ments, your func­tions and meth­ods take.&lt;/p&gt;

&lt;p&gt;Most Perl pro­gram­mers know about the &lt;a href="https://perldoc.pl/perlvar#@_"&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt; vari­able (or &lt;code&gt;@ARG&lt;/code&gt; if you &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;use English&lt;/code&gt;&lt;/a&gt;). When a sub­rou­tine is called, &lt;code&gt;@_&lt;/code&gt; contains the para­me­ters passed. It’s an array (thus the &lt;code&gt;@&lt;/code&gt; sig­il) and can be treat­ed as such; it’s even the default argu­ment for &lt;a href="https://perldoc.pl/functions/pop"&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.pl/functions/shift"&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/a&gt;. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or for mul­ti­ple parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter1&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="si"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(What’s that &lt;code&gt;use v5.10;&lt;/code&gt; doing there? It enables all features that were intro­duced in &lt;a href="https://perldoc.pl/perl5100delta"&gt;Perl 5.10&lt;/a&gt;, such as the &lt;a href="https://perldoc.pl/perlfunc#say"&gt;&lt;code&gt;say&lt;/code&gt;&lt;/a&gt; func­tion. We’ll assume you type it in from now on to reduce clutter.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can do bet­ter&lt;/strong&gt;, though. &lt;a href="https://perldoc.pl/perl5200delta"&gt;Perl 5.20&lt;/a&gt; (released in 2014; why haven’t you upgrad­ed?) intro­duced the exper­i­men­tal &lt;a href="https://perldoc.pl/perlsub#Signatures"&gt;&lt;code&gt;signatures&lt;/code&gt;&lt;/a&gt; fea­ture, which as described above, allows parame­ters to be intro­duced right when you declare the subrou­tine. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;experimental&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;($parameter1, $parameter2 = 1, @rest) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter1&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="si"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;And these:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@rest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can even set defaults for option­al para­me­ters, as seen above with the &lt;code&gt;=&lt;/code&gt; sign, or slurp up remain­ing para­me­ters into an array, like the &lt;code&gt;@rest&lt;/code&gt; array above. For more help­ful uses of this fea­ture, con­sult the &lt;a href="https://perldoc.pl/perlsub#Signatures"&gt;perl­sub&lt;/a&gt; man­u­al page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can do bet­ter still&lt;/strong&gt;. The &lt;a href="https://www.cpan.org/"&gt;Com­pre­hen­sive Perl Archive Network (CPAN)&lt;/a&gt; con­tains sev­er­al mod­ules that both enable signa­tures, as well as val­i­date parame­ters are of a cer­tain type or for­mat. (Yes, Perl can have types!) Let’s take a tour of some of them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paramsvalidate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Params::Validate"&gt;Params::Validate&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This mod­ule adds two new func­tions, &lt;code&gt;validate()&lt;/code&gt; and &lt;code&gt;validate_pos()&lt;/code&gt;. &lt;code&gt;validate()&lt;/code&gt; intro­duces &lt;em&gt;named parameters&lt;/em&gt;, which make your code more read­able by describing what parameters are being called at the time you call them. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;  &lt;span class="s"&gt;parameter2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# mandatory&lt;/span&gt;
        &lt;span class="s"&gt;parameter2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# optional&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If all you want to do is val­i­date un-named (posi­tion­al) para­me­ters, use &lt;code&gt;validate_pos()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validate_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;@p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Params::Validate also has fair­ly deep sup­port for &lt;em&gt;type valida­tion&lt;/em&gt;, enabling you to val­i­date para­me­ters against &lt;a href="https://metacpan.org/pod/Params::Validate#Type-Validation"&gt;simple types&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Params::Validate#Interface-Validation"&gt;method inter­faces&lt;/a&gt; (also known as “duck typing”), &lt;a href="https://metacpan.org/pod/Params::Validate#Class-Validation"&gt;mem­ber­ship in a class&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Params::Validate#Regex-Validation"&gt;reg­u­lar expres­sion match­es&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Params::Validate#Callback-Validation"&gt;arbi­trary code call­backs&lt;/a&gt;. As always, con­sult the &lt;a href="https://metacpan.org/pod/Params::Validate"&gt;doc­u­men­ta­tion&lt;/a&gt; for the nit­ty-grit­ty details.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#moosexparamsvalidate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate"&gt;MooseX::Params::Validate&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;MooseX::Params::Validate adds type val­i­da­tion via the &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; object-ori­ent­ed frame­work’s type sys­tem, mean­ing that anything that can be defined as a &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Types.pod"&gt;Moose type&lt;/a&gt; can be used to val­i­date the para­me­ters passed to your func­tions or meth­ods. It adds the &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#validated_hash(-@_,-%parameter_spec-)"&gt;&lt;code&gt;validated_hash()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#validated_list(-@_,-%parameter_spec-)"&gt;&lt;code&gt;validated_list()&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#pos_validated_list(-@_,-%24spec,-%24spec,-...-)"&gt;&lt;code&gt;pos_validated_list()&lt;/code&gt;&lt;/a&gt; func­tions, and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MooseX::Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mice&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Men&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validated_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validated_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;pos_validated_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that the first para­me­ter passed to each func­tion is a ref­er­ence to the &lt;code&gt;@_&lt;/code&gt; array, denot­ed by a backslash.&lt;/p&gt;

&lt;p&gt;MooseX::Params::Validate has sev­er­al more things you can spec­i­fy when list­ing para­me­ters, includ­ing &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Roles.pod"&gt;roles&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Types.pod#COERCION"&gt;coer­cions&lt;/a&gt;, and depen­den­cies. The &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate"&gt;doc­u­men­ta­tion for the mod­ule&lt;/a&gt; has all the details. &lt;strong&gt;We use this mod­ule at work a lot&lt;/strong&gt;, and even use it with­out Moose when val­i­dat­ing para­me­ters passed to test functions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functionparameters" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;For a dif­fer­ent take on sub­rou­tine sig­na­tures, you can use the &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt; mod­ule. Rather than pro­vid­ing helper func­tions, it defines two new Perl key­words, &lt;code&gt;fun&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt;. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Function::&lt;/span&gt;&lt;span class="nv"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The colons in the &lt;code&gt;bar()&lt;/code&gt; func­tion above indi­cate that the para­me­ters are named, and need to be spec­i­fied by name when the func­tion is called, using the &lt;code&gt;=&amp;gt;&lt;/code&gt; oper­a­tor as if you were spec­i­fy­ing a hash.&lt;/p&gt;

&lt;p&gt;In addi­tion to &lt;a href="https://metacpan.org/pod/Function::Parameters#Default-arguments"&gt;defaults&lt;/a&gt; and the &lt;a href="https://metacpan.org/pod/Function::Parameters#Simple-parameter-lists"&gt;posi­tion­al&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Function::Parameters#Named-parameters"&gt;named&lt;/a&gt; para­me­ters demon­strat­ed above, Function::Parameters sup­ports &lt;a href="https://metacpan.org/pod/Function::Parameters#Type-constraints"&gt;type con­straints&lt;/a&gt; (via &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;) and Moo or Moose &lt;a href="https://metacpan.org/pod/Function::Parameters#Method-modifiers"&gt;method modifiers&lt;/a&gt;. (If you don’t know what those are, the &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/MethodModifiers.pod"&gt;Moose&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;Class::Method::Modifiers&lt;/a&gt; doc­u­men­ta­tion are helpful.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’m not a fan&lt;/strong&gt; of mod­ules that add new syn­tax for com­mon tasks like sub­rou­tines and meth­ods, if only because there’s an extra effort in updat­ing tool­ings like syn­tax high­lighters and &lt;a href="http://perlcritic.com/"&gt;Perl::Critic&lt;/a&gt; code analy­sis. Still, this may appeal to you, espe­cial­ly if you’re com­ing from oth­er lan­guages that have sim­i­lar syntax.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typeparams" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Speak­ing of &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;, it includes its own para­me­ter validation library called &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt;. &lt;strong&gt;I think I would favor this for new work&lt;/strong&gt;, as it’s com­pat­i­ble with both Moo and Moose but does­n’t require them.&lt;/p&gt;

&lt;p&gt;Type::Params has a num­ber of func­tions, none of which are pro­vid­ed by default, so you’ll have to import them explic­it­ly when &lt;code&gt;use&lt;/code&gt;ing the mod­ule. It also intro­duces a sep­a­rate step for com­pil­ing your val­i­da­tion spec­i­fi­ca­tion to speed up perfor­mance. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(Str Int)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="sx"&gt;qw(compile compile_named)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The fea­tures of Type::Tiny and its bun­dled mod­ules are pret­ty vast, so I sug­gest once again that you &lt;a href="https://metacpan.org/pod/Type::Tiny::Manual"&gt;con­sult the doc­u­men­ta­tion&lt;/a&gt; on how to use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paramsvalidationcompiler" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;Params::ValidationCompiler&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;At the &lt;a href="https://metacpan.org/pod/Params::Validate#DESCRIPTION"&gt;top of the doc­u­men­ta­tion to Params::Validate&lt;/a&gt;, you’ll notice that the author rec­om­mends instead his &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;Params::ValidationCompiler&lt;/a&gt; mod­ule for faster per­for­mance, using a com­pi­la­tion step much like Type::Params. It pro­vides two func­tions for you to import, &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler#validation_for(...)"&gt;&lt;code&gt;validation_for()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler#source_for(...)"&gt;&lt;code&gt;source_for()&lt;/code&gt;&lt;/a&gt;. We’ll con­cen­trate on the for­mer since the lat­ter is main­ly use­ful for debugging.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(Int Str)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;ValidationCompiler&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;validation_for&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validation_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;type&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Perl is cool&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, it sup­ports type con­straints, defaults, and option­al val­ues. It can also put extra argu­ments in a list (it calls this fea­ture “slur­py”), and can even return generat­ed objects to make it eas­i­er to catch typos (since a typoed hash key just gen­er­ates that key rather than return­ing an error). There’s a bit more to this mod­ule, so please &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;read the doc­u­men­ta­tion&lt;/a&gt; to exam­ine all its features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#con%C2%ADclu%C2%ADsion" class="anchor"&gt;
  &lt;/a&gt;
  Con­clu­sion
&lt;/h1&gt;

&lt;p&gt;One of Per­l’s mot­tos is &lt;strong&gt;“there’s more than one way to do it”&lt;/strong&gt;, and you’re wel­come to choose what­ev­er method you need to enable sig­na­tures and type val­i­da­tion. Just remem­ber to be con­sis­tent and have good rea­sons for your choic­es, since the over­all goal is to improve your code’s reli­a­bil­i­ty and readabil­i­ty. And be sure to share your favorite tech­niques with oth­ers, so they too can devel­op bet­ter software.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck</id>
    <published>2021-01-27T22:30:47Z</published>
    <updated>2021-01-27T22:30:47Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="signatures"/>
    <category term="types"/>
  </entry>
  <entry>
    <title>Dancer2 0.300005 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/01/dancer2-0300005-released.html"/>
    <id>tag:blogs.perl.org,2021:/users/jason_a_crome//712.10061</id>
    <published>2021-01-27T02:11:45Z</published>
    <updated>2021-01-27T02:27:02Z</updated>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>Well, it&#8217;s been a hot minute since the last release, hasn&#8217;t it? Dancer2 0.300005 has landed on CPAN and features a number of bug fixes, enhancements, and doc patches:</p>

<pre><code>0.300005  2021-01-26 15:57:41-05:00 America/New_York

[ BUG FIXES ]
* GH #1546: Add MIME type for all files served from public (Russell 
  @veryrusty Jenkins)
* GH #1555: Remove all leftovers of warnings config setting (Sergiy 
  Borodych)
* GH #1557: Remove HTTP::XSCookies workaround (Alexander Pankoff)
* GH #1564: Add script_name to redirects beginning with / (Nigel Gregoire)
* GH #1567: Fix CSS so errors do not display ourside of &lt;pre&gt; HTML
  element (Elliot Holden)
* GH #1568: Serializer::Mutable doesn't auto-load other serializers
  (Russell @veryrusty Jenkins)
* GH #1579: Fix missing push_header method in Response::Delayed 
  (Paul Clements)

[ ENHANCEMENTS ]
* GH #1552: Update jQuery (Sergiy Borodych)
* GH #1558: Test to make sure uploads aren't discarded after the
  forward keyword is used (Alexander Pankoff)
* GH #1571: Add GitHub Actions support (Gabor Szabo)
* GH #1572: Install Dancer2::Session::Cookie in order to run the test 
  t/issues/gh-811.t (racke)

[ DOCUMENTATION ]
* GH #1490: Document Dancer2::Core::App-&gt;template() (Steve Dondley)
* GH #1551: Fix pod for cookie same site attribute (Sergiy Borodych)
* GH #1562: Fix links, missing code in Tutorial (cloveistaken)
</code></pre>

<p>I have already lined up a number of issues for inclusion into the next release, which should be landing in early February (as of now).</p>

<p>Thanks for your patience with the long break between the releases, we (hopefully) won&#8217;t do that to you again.</p>

<p>Happy Dancing! See you in February!</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>How to replace a column in a CSV file using Perl</title>
  <summary type="html"><![CDATA[<p>
Given a CSV file, how can we replace the values in one of the columns?
<p>
For example given this file:
<p>
<b>examples/test_cases.csv</b><br><pre class="prettyprint linenums ">
170,test,best,one,0.1314
171,test,best,two,0.1695
172,test,best,two,0.1784
173,test,best,three,0.3748
</pre>
<p>
how can we replace the 4th column to contain the value 'CIF' in every line?
<p>
]]></summary>
  <updated>2021-01-26T11:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/replace-a-column-in-a-csv-file"/>  <id>https://perlmaven.com/replace-a-column-in-a-csv-file</id>
  <content type="html"><![CDATA[<p>
Given a CSV file, how can we replace the values in one of the columns?
<p>
For example given this file:
<p>
<b>examples/test_cases.csv</b><br><pre class="prettyprint linenums ">
170,test,best,one,0.1314
171,test,best,two,0.1695
172,test,best,two,0.1784
173,test,best,three,0.3748
</pre>
<p>
how can we replace the 4th column to contain the value 'CIF' in every line?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl - mockgen helper perl script</title>
    <link rel="alternate" href="https://dev.to/takakd/mockgen-helper-perl-script-1g5l" type="text/html"/>
    <content type="html">&lt;p&gt;Created the helper script of &lt;code&gt;mockgen&lt;/code&gt; because typing &lt;code&gt;mockgen&lt;/code&gt; command takes time and effort.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Ref.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/golang/mock"&gt;golang/mock&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Takahiro Kudo</name>
    </author>
    <id>https://dev.to/takakd/mockgen-helper-perl-script-1g5l</id>
    <published>2021-01-25T12:59:26Z</published>
    <updated>2021-01-25T12:59:26Z</updated>
    <category term="go"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Free Lunch? Yes, Please. Perl job in Vienna.</title>
    <link rel="alternate" href="https://job.perl.careers/74d" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of the largest product and price comparison platforms in German-speaking countries is on the hunt for a Perl programmer who wants to use their skills to eradicate inflated prices. The successful candidate will relish the chance to join a team that attributes nearly two decades of success to an uncompromising commitment to transparency, objectivity, and quality content.</div>
    </content>
    <id>https://job.perl.careers/74d</id>
    <published>2021-01-25T10:00:49Z</published>
    <updated>2021-01-25T10:00:49Z</updated>
  </entry>
  <entry>
    <title>We aren’t Mal-teasing—this is the Perl job you’ve been waiting for! Perl in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/kgm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">We have an international client looking to hire for their Malta office. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools. Sun, smiles, scuba … if you haven’t emailed already to jump on this opportunity, then what are you waiting for?</div>
    </content>
    <id>https://job.perl.careers/kgm</id>
    <published>2021-01-25T10:00:48Z</published>
    <updated>2021-01-25T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/b1n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/b1n</id>
    <published>2021-01-25T10:00:47Z</published>
    <updated>2021-01-25T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Guten Tag, Senior Perl Developers! Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/xkq" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">While work for this client is currently 100% remote, their main office is in St. Ingbert, Germany with a satellite office in Munich. With a friendly, sociable crew, a rooftop deck, and all the table soccer and air hockey you can handle. The ideal candidate should be confident using Modern Perl, in particular happy with DBIx::Class and Moose/Moo.</div>
    </content>
    <id>https://job.perl.careers/xkq</id>
    <published>2021-01-25T10:00:46Z</published>
    <updated>2021-01-25T10:00:46Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/o8c" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/o8c</id>
    <published>2021-01-25T10:00:45Z</published>
    <updated>2021-01-25T10:00:45Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. The private ticket will be cheaper (EUR 30). People who register in time and transfer the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-01-25T10:00:44Z</published>
    <updated>2021-01-25T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-01-25T10:00:43Z</published>
    <updated>2021-01-25T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Regular Expression: Master Manipulator of Text</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 4, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-01-25T10:00:42Z</published>
    <updated>2021-01-25T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 28, 2021;  7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-01-25T10:00:41Z</published>
    <updated>2021-01-25T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-01-25T10:00:40Z</published>
    <updated>2021-01-25T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Using the ActiveState Platform</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275282889" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275282889</id>
    <published>2021-01-25T10:00:39Z</published>
    <updated>2021-01-25T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Testing in Perl course</title>
    <link rel="alternate" href="https://courses.code-maven.com/p/testing-in-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">During the last week I made some nice progress recording the Testing in Perl course. So if you are a Perl developer who wants to make sure their code works well, this course can help you learn all the tools you need.</div>
    </content>
    <id>https://courses.code-maven.com/p/testing-in-perl</id>
    <published>2021-01-25T10:00:38Z</published>
    <updated>2021-01-25T10:00:38Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Josephus problem</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/24/aoc2016-19-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Never heard of it before, thanks to Flavio, I learnt something new today.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/24/aoc2016-19-josephus/</id>
    <published>2021-01-25T10:00:37Z</published>
    <updated>2021-01-25T10:00:37Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/15 - Chinese Reminder Theorem - again!</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/23/aoc2016-15-crt-again/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thank you Flavio for the refresher, it is always fun to revisit.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/23/aoc2016-15-crt-again/</id>
    <published>2021-01-25T10:00:36Z</published>
    <updated>2021-01-25T10:00:36Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/11 - Optimization</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/22/aoc2016-11-optimization/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/22/aoc2016-11-optimization/</id>
    <published>2021-01-25T10:00:35Z</published>
    <updated>2021-01-25T10:00:35Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/11 - Part 2 solution</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/19/aoc2016-11-part2-solution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Setup search using AstarX.pm</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/19/aoc2016-11-part2-solution/</id>
    <published>2021-01-25T10:00:34Z</published>
    <updated>2021-01-25T10:00:34Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-01-25T10:00:33Z</published>
    <updated>2021-01-25T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2021.03 Course Topped</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/01/18/2021-03-course-topped/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/01/18/2021-03-course-topped/</id>
    <published>2021-01-25T10:00:32Z</published>
    <updated>2021-01-25T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Loop controls: next, last, continue, break</title>
    <link rel="alternate" href="https://perlmaven.com/loop-controls-next-last" type="text/html"/>
    <id>https://perlmaven.com/loop-controls-next-last</id>
    <published>2021-01-25T10:00:31Z</published>
    <updated>2021-01-25T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/01/18/PWC096/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis seems to follow the philosophy "Don't re-invent the wheel". I highly recommend the use of CPAN as much as possible.</div>
    </content>
    <id>https://wlmb.github.io/2021/01/18/PWC096/</id>
    <published>2021-01-25T10:00:30Z</published>
    <updated>2021-01-25T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Distance</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_96__Reverse_Distance.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog post is one place where we get to explore more than just Perl solutions. Must Read.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_96__Reverse_Distance.html</id>
    <published>2021-01-25T10:00:29Z</published>
    <updated>2021-01-25T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 096 - Raku</title>
    <link rel="alternate" href="http://blogs.perl.org/users/joan_mimosinnet/2021/01/perl-weekly-challenge-096---raku.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Joan showing an OO solution to the "Edit Distance" task. Highly Recommended.</div>
    </content>
    <id>http://blogs.perl.org/users/joan_mimosinnet/2021/01/perl-weekly-challenge-096---raku.html</id>
    <published>2021-01-25T10:00:28Z</published>
    <updated>2021-01-25T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Levenshtein distance</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/01/18/PerlWeeklyChallenge96.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca sharing the power of Raku. It reminded me of my days of struggling with Raku.</div>
    </content>
    <id>https://fluca1978.github.io/2021/01/18/PerlWeeklyChallenge96.html</id>
    <published>2021-01-25T10:00:27Z</published>
    <updated>2021-01-25T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words and Edit Distance (and Decorators in Perl)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is teaching us the decorator pattern in Perl this week. You don't want to miss this.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html</id>
    <published>2021-01-25T10:00:26Z</published>
    <updated>2021-01-25T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/01/22/perl-weekly-challenge/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome back Lance with a new shiny website. Cool solutions promoting TDD.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/01/22/perl-weekly-challenge/</id>
    <published>2021-01-25T10:00:25Z</published>
    <updated>2021-01-25T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC096 - Edit Distance</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/21/pwc096-edit-distance/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Straight implementation of pseudocode from Wikipedia. No fancy stuff. A pure Perl solution.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/21/pwc096-edit-distance/</id>
    <published>2021-01-25T10:00:24Z</published>
    <updated>2021-01-25T10:00:24Z</updated>
  </entry>
  <entry>
    <title>PWC096 - Reverse Words</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/20/pwc096-reverse-words/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio using the power of regex to solve the "Reverse Words" task. Nice and easy to follow.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/20/pwc096-reverse-words/</id>
    <published>2021-01-25T10:00:23Z</published>
    <updated>2021-01-25T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 096 -- Reverse Words and Edit distance.</title>
    <link rel="alternate" href="https://gugod.org/2021/01/pwc-096-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min exploring Dynamic Programing to deal with the Levenshtein distance. Must Read.</div>
    </content>
    <id>https://gugod.org/2021/01/pwc-096-en/</id>
    <published>2021-01-25T10:00:22Z</published>
    <updated>2021-01-25T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Going The Distance: Perl Weekly Challenge #96</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/01/19/going-the-distance-perl-weekly-challenge-96.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave presenting Levenshtein Distance solution in a unique way. Highly Recommended.</div>
    </content>
    <id>https://jacoby.github.io/2021/01/19/going-the-distance-perl-weekly-challenge-96.html</id>
    <published>2021-01-25T10:00:21Z</published>
    <updated>2021-01-25T10:00:21Z</updated>
  </entry>
  <entry>
    <title>The Wagner–Fischer-Price, Backwards</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/25/the-wagner-fischer-price-backwards/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin introducing the Wagner-Fisher algorithm, which is new to me. Need to revisit.</div>
    </content>
    <id>https://colincrain.com/2021/01/25/the-wagner-fischer-price-backwards/</id>
    <published>2021-01-25T10:00:20Z</published>
    <updated>2021-01-25T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Reversed Distance with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/reversed-distance.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I love it when Arne does both Perl and Raku together. You get to see the similarities. Must Read.</div>
    </content>
    <id>https://raku-musings.com/reversed-distance.html</id>
    <published>2021-01-25T10:00:19Z</published>
    <updated>2021-01-25T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 096</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/24" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam showing Perl a adaptation of a Haskell implementation deaing with the "Edit Distance" task. An interesting approach.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/24</id>
    <published>2021-01-25T10:00:18Z</published>
    <updated>2021-01-25T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Edit Distance</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/23/perl-weekly-challenge-96-edit-distance/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail presenting the mathematical side of the task "Edit Distance". Must Read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/23/perl-weekly-challenge-96-edit-distance/</id>
    <published>2021-01-25T10:00:17Z</published>
    <updated>2021-01-25T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/22/perl-weekly-challenge-96-reverse-words/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail showing off the power of one-liners. Incredible.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/22/perl-weekly-challenge-96-reverse-words/</id>
    <published>2021-01-25T10:00:16Z</published>
    <updated>2021-01-25T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-096/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron promoting Raku and encouraging following the official documentation. A short and sweet solutions.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-096/</id>
    <published>2021-01-25T10:00:15Z</published>
    <updated>2021-01-25T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 094</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-094" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-094</id>
    <published>2021-01-25T10:00:14Z</published>
    <updated>2021-01-25T10:00:14Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 096</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-096" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Reverse Words" and "Edit Distance" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-096</id>
    <published>2021-01-25T10:00:13Z</published>
    <updated>2021-01-25T10:00:13Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 097</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks - "Caesar Cipher" and "Binary Substrings". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-097</id>
    <published>2021-01-25T10:00:12Z</published>
    <updated>2021-01-25T10:00:12Z</updated>
  </entry>
  <entry>
    <title>UV Grant Report for 2020-12</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant-report-uv-2020-12" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant-report-uv-2020-12</id>
    <published>2021-01-25T10:00:11Z</published>
    <updated>2021-01-25T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Regarding the closure of rt.cpan</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Martin picked up a hot topic to discuss. Very useful if you have published module to CPAN.</div>
    </content>
    <id>http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html</id>
    <published>2021-01-25T10:00:10Z</published>
    <updated>2021-01-25T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Perl Steering Council, meeting #003</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting discussion among the top brass. You don't want to miss it.</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html</id>
    <published>2021-01-25T10:00:09Z</published>
    <updated>2021-01-25T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Pull Request Club 2020 Report</title>
    <link rel="alternate" href="https://kyzn.org/posts/prc-2020-report/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please checkout Kivanc's annual report for the year 2020. Great work Kivanc, keep it up.</div>
    </content>
    <id>https://kyzn.org/posts/prc-2020-report/</id>
    <published>2021-01-25T10:00:08Z</published>
    <updated>2021-01-25T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Roles, h'uh, what are they good for?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jesse_shy/2021/01/roles-huh-what-are-they-good-for.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jesse brought up a good old topic and shares his views with us.</div>
    </content>
    <id>http://blogs.perl.org/users/jesse_shy/2021/01/roles-huh-what-are-they-good-for.html</id>
    <published>2021-01-25T10:00:07Z</published>
    <updated>2021-01-25T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Toby sharing his Perl skill to automate mood lighting. Worth reading for fun.</div>
    </content>
    <id>http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html</id>
    <published>2021-01-25T10:00:06Z</published>
    <updated>2021-01-25T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Debugging a web application in Perl</title>
    <link rel="alternate" href="https://phoenixtrap.com/index.php/2021/01/23/debugging-a-web-application-in-perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark talking about the most difficult subject. Debugging web app is the most difficult task of any dev.</div>
    </content>
    <id>https://phoenixtrap.com/index.php/2021/01/23/debugging-a-web-application-in-perl/</id>
    <published>2021-01-25T10:00:05Z</published>
    <updated>2021-01-25T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Perl 5.34.0 *will be released* in May</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258879.html" type="text/html"/>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258879.html</id>
    <published>2021-01-25T10:00:04Z</published>
    <updated>2021-01-25T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 6; DevTo: 7; Perl.com: 0; PerlAcademy: 1; PerlHacks: 0; PerlMaven: 1; Reddit: 18; TPF: 3;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2021-01-25T10:00:03Z</published>
    <updated>2021-01-25T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://perlweekly.com/metacpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 218 uploads to CPAN of 164 distinct distributions by 95 different authors. Number of distributions with link to VCS: 135. Number of distros with CI: 73. Number of distros with bugtracker: 117.</div>
    </content>
    <id>https://perlweekly.com/metacpan.html</id>
    <published>2021-01-25T10:00:02Z</published>
    <updated>2021-01-25T10:00:02Z</updated>
  </entry>
  <entry>
    <title>A Replacement for PPM - ActiveState's New Perl Ecosystem</title>
    <link rel="alternate" href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">While PPM is gone, the need to install dependencies without requiring a local build environment remains. ActivePerl allowed developers to get up and running quickly by delivering hundreds of popular modules with a single installation. Both use cases are now addressed in &lt;a href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition"&gt;ActiveState’s new ecosystem&lt;/a&gt;.</content>
    <id>https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition</id>
    <published>2021-01-25T10:00:01Z</published>
    <updated>2021-01-25T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#496 - Statocles vs Hugo</title>
    <link rel="alternate" href="http://perlweekly.com/archive/496.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I think it is unfair to compare the two, but I couldn't stop myself. Let me make this crystal clear, I am talking about two static site builder. Statocles written in Perl and Hugo written in Go.</p>
<p>Why am I even talking about Hugo in the Perl weekly newsletter?</p>
<p>Well, to me it doesn't matter whether it is Perl or any other language. What matters is which one gets the job done quickly. I hear it is matter of personal choice as well. I was first introduced to <a href="https://github.com/gohugoio/hugo">Hugo</a> when I wrote my <a href="https://www.perl.com/article/how-to-become-cpan-contributor/">first article</a> for <a href="https://www.perl.com/">Perl.com</a> in 2018. If I am not mistaken, they still use Hugo. I was so impressed with Hugo that I used it to build <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a> website. During the peak of my CPAN contributions, I came to know about <a href="https://metacpan.org/pod/Statocles">Statocles</a>. I loved it but never got the opportunity to use it. However I did become one of the contributors to the project. My contribution wasn't ground-breaking, but I feel proud to see my name in the list of contributors. All credit goes to Doug Bell for the coolest tool. For those who don't know him, he leads the team running and managing the <a href="https://cpantesters.org/">CPAN Testers</a> since Barbie took a break.</p>
<p>Last week, I saw a new website <a href="https://perl.kiwi/">perl.kiwi</a> become the talk of the town. It is built using Statocles as the idea behind the website is to promote Perl. I am going to keep an eye out for fun stuff related to Perl. I loved the domain name. Congratulations Lance Wicks.</p>
<p>Talking about promoting Perl, Sawyer shared the details of the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html">3rd Perl Steering Council meeting</a>. There was another big annoucement by Sawyer with regard to the release date of <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html">Perl v5.34</a>. We should all be thankful to the PSC members for their time and efforts.</p>
<p>Last time I forgot to mention about the <a href="https://kyzn.org/posts/prc-2020-report/">Pull Request Club 2020 Report</a> by Kivanc Yazan. Kudos to Kivanc for running the club for 2 years now. Keep it up. You are doing a great service to the Perl community.</p>
<p>Last but not the least, please don't forget to watch the weekly show, "Perl Town Hall" by Will Braswell on <a href="https://www.facebook.com/groups/perlprogrammers">Facebook</a>. It doesn't suit my timezone but I do watch it the recordings later.</p>
<p>Enjoy the rest of the newsletter</p></div>
    </content>
    <id>http://perlweekly.com/archive/496.html</id>
    <published>2021-01-25T10:00:00Z</published>
    <updated>2021-01-25T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>&lt;p&gt;Perl Weekly Challenge 096&lt;/p&gt;</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/24#pwc096" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a string $S. Write a script to reverse the order of words in the given string.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub reverse_words{
    my($words) = @_; 
    if(@{$words}){
        my $word = $words-&gt;[0];
        my $a = reverse_words([@{$words}[1 .. (@{$words} - 1)]]);
        $a-&gt;[@{$a}] = $word;
        return $a;
    }
    return [];
}

MAIN:{
    my($S, $reversed);
    $S = "The Weekly Challenge";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
    
    $S = "    Perl and   Raku are  part of the same family  ";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Challenge Weekly The
family same the of part are Raku and Perl 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My solution is done using recursion with the self-imposed restrictions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do not use the &lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;only access array elements in an ordinary way, without using any functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than being a bit over engineered it works as required!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given two strings $S1 and $S2. Write a script to find out the minimum operations required to convert $S1 into $S2. The operations can be insert, remove or replace a character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Memoize;
memoize("edit_distance");

sub edit_distance{
    my($s, $t) = @_;
    if(length($s) == 0){
        return length($t);
    }
    if(length($t) == 0){
        return length($s);
    }
    my($s0, $t0) = (substr($s, 0, 1), substr($t, 0, 1));
    if($s0 eq $t0){
        return edit_distance(substr($s, 1), substr($t, 1));
    }
    my @sorted_distances = sort {$a &lt;=&gt; $b} (
        edit_distance($s, substr($t, 1)),
        edit_distance(substr($s, 1), $t),
        edit_distance(substr($s, 1), substr($t, 1)),
    );
    return 1 + $sorted_distances[0];
}

MAIN:{
    my $distance;
    
    $distance = edit_distance("kitten", "sitting");
    print "$distance\n";

    $distance = edit_distance("sunday", "monday");
    print "$distance\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code is a pretty faithful Perl translation of the algorithm presented in Haskell in the &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance#Computing_Levenshtein_distance"&gt;Wikipedia article&lt;/a&gt; for &lt;em&gt;Levenshtein_distance&lt;/em&gt;. Like the code for Part 1 of this weeks Challenge this is a recursive procedure.&lt;/p&gt;
&lt;p&gt;As noted in that article this algorithm is inefficient in that substrings are checked repeatedly. This code can be made more efficient by the use of &lt;em&gt;Memoization&lt;/em&gt; so that the results for each substring are saved and re-used. In the interest of improving performance &lt;code&gt;Memoize&lt;/code&gt; is used with the &lt;code&gt;edit_distance&lt;/code&gt; function. While the code is now more efficient it really doesn’t have much effect on execution time for these short test strings. However, the code is now ready to handle much more significant sized strings.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/Memoize"&gt;Memoization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc096</id>
    <published>2021-01-24T01:26:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5068327869800457164</id>
    <published>2021-01-23T23:28:00.002+01:00</published>
    <updated>2021-01-23T23:28:59.409+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxv) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/autodie-2.34" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;autodie&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Replace functions with ones that succeed or die with lexical scope &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.34&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.32 was 1 year, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/NICS/Catmandu-1.2015" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Catmandu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a data toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.2015&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.2014 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/XAOC/Gtk3-0.038" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Gtk3&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the 3.x series of the gtk+ toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.038&lt;/strong&gt; on 2021-01-20&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.037 was 10 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.16" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.16&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.00 was 7 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/IO-Async-0.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 8 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SULLR/IO-Socket-SSL-2.069" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.069&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 2.068 was 9 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BRTASTIC/Kelp-1.05" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Kelp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A web framework light, yet rich in nutrients. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20210120" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210120&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SRI/Mojolicious-8.71" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.71&lt;/strong&gt; on 2021-01-17&lt;/li&gt;  &lt;li&gt;Votes: 441&lt;/li&gt;  &lt;li&gt;Previous version: 8.70 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SALVA/Net-SFTP-Foreign-1.93" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SFTP::Foreign&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Secure File Transfer Protocol client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.93&lt;/strong&gt; on 2021-01-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.91 was 6 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/CHRISN/Net-SSLeay-1.90" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SSLeay&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for using OpenSSL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.90&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.88 was 1 year, 8 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.116" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.116&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 157&lt;/li&gt;  &lt;li&gt;Previous version: 0.114 was 8 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHAY/perl-5.32.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;perl-5.32.1&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- The Perl 5 language interpreter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.032001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 365&lt;/li&gt;  &lt;li&gt;Previous version: 5.32.0 was 7 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JCRISTY/PerlMagick-7.0.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::Magick&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - objected-oriented Perl interface to ImageMagick. Use it to read, manipulate, or write an image or image sequence from within a Perl script. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.0.10&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 6.9.11 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSTROUT/SQL-Abstract-2.000001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SQL::Abstract&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate SQL from Perl data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 69&lt;/li&gt;  &lt;li&gt;Previous version: 1.87 was 7 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.21&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.20 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MIYAGAWA/Twiggy-0.1026" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Twiggy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - AnyEvent HTTP server for PSGI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1026&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.1025 was 6 years, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5068327869800457164/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html" title="(cccxxv) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5393193259115390142</id>
    <published>2021-01-23T23:25:00.006+01:00</published>
    <updated>2021-01-23T23:25:56.321+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdli) metacpan weekly report - LWP</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/pod/LWP"&gt;LWP&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/23 22:23:25 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Calendar::Japanese::Holiday" target="_blank"&gt;Calendar::Japanese::Holiday&lt;/a&gt; - Japanese holidays in calender&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Earthquake_EEW_Decoder" target="_blank"&gt;Earthquake_EEW_Decoder&lt;/a&gt; - Perl extension for JMA Earthquake Early Warning data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::Signal" target="_blank"&gt;Mojo::IOLoop::Signal&lt;/a&gt; - Non-blocking signal handler&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::QuoteLike" target="_blank"&gt;PPIx::QuoteLike&lt;/a&gt; - Parse Perl string literals and string-literal-like things.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Minify::XS" target="_blank"&gt;Text::Minify::XS&lt;/a&gt; - Simple text minification&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PAUSE::cleanup" target="_blank"&gt;App::PAUSE::cleanup&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PPI::Dumper" target="_blank"&gt;App::PPI::Dumper&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Audio::Scan" target="_blank"&gt;Audio::Scan&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cairo" target="_blank"&gt;Cairo&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Std" target="_blank"&gt;Config::Std&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace::More" target="_blank"&gt;Devel::Trace::More&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME::Kit" target="_blank"&gt;Email::MIME::Kit&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/LWP" target="_blank"&gt;LWP&lt;/a&gt;&amp;nbsp;(+3=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=83)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=441)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Web::Auth" target="_blank"&gt;Mojolicious::Plugin::Web::Auth&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::CA" target="_blank"&gt;Mozilla::CA&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsgPack::Raw" target="_blank"&gt;MsgPack::Raw&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+2=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sidef" target="_blank"&gt;Sidef&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::RunAlone" target="_blank"&gt;Sys::RunAlone&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockTime" target="_blank"&gt;Test::MockTime&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unix::Statgrab" target="_blank"&gt;Unix::Statgrab&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Scraper" target="_blank"&gt;Web::Scraper&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Tutorial" target="_blank"&gt;XS::Tutorial&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5393193259115390142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html" title="(cdli) metacpan weekly report - LWP"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Debugging a web application in Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/debugging-a-web-application-in-perl-34pm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I spent this week debugging an issue with an internal web tool that our company’s support team relies upon to pull up information about our customers, making changes on their behalf to their subscriptions of the various packages and services that we offer. Trying to view one particular customer — one! — would always crash the application, leaving an unhelpful message that said, “Internal Server Error: Please contact the server administrator. More information about this error may be available in the server error log.” Unfortunately, there was only a single line in the log, “Error 500,” which only indicated that yes, an error had happened on the server. No details from the application.</p>

<p>Luckily, this application was written in Perl, an expressive programming language with a rich ecosystem of open-source libraries. It also has a built-in debugger mode that can run your program step by step, line by line. Any program that can be run from the text command line can be paused, have its variables and objects examined, new code interactively entered, and then continue its execution as if nothing had happened.</p>

<p>However, this was a web application that assumed it was running in a web server environment, and the customer’s information was in our production database, safe from prying eyes (including curious developers like me) due to financial compliance rules. I could not simply run this program on my desktop and reproduce the problem with this one customer — I had to somehow tease out more information from a running system and report it back using the only tool available: the server error log mentioned above.</p>

<p>But still, the Perl debugger approach was appealing. Could I somehow get the application to log each line of code as it was executed? Could I then see what was running the moment before it crashed, the offending line printed in the log like a smoking gun that had just murdered its victim? And assuming that the problem was in our code and not in the millions of lines of third-party code it depended upon, could I filter out all the noise?</p>

<p>The answer, thankfully, was yes; since the debugger itself is written in Perl and designed to be extended or replaced, I could add code at the beginning of our application that intercepted each line as it was run, throw out anything that came from a file outside of our application’s directory folder, and then report the rest (along with helpful line numbers) to the error log. Then turn on the “debug” switch on the web server running the application, and voilà, the log would dutifully fill up with (slower, more memory-consuming) code reported by the debugger.</p>

<p>We set up our staging server to use the branch of code with debugging enabled, and then instructed the application to display the problematic customer's records. As expected, the error log immediately began filling up with line after line of our application’s code and then bang, crashed right after issuing a particular database query for services tied to the account. I had my smoking gun! After extracting the query and running it on a redacted copy of our database, I found that it was returning some 1.9 million rows of data as it retrieved provisioning, billing, and renewal history for every service owned by the customer. This was far too many than necessary — the application only cares about current status, and it was running out of memory as it created service objects for each row.</p>

<p>The database expert on my team was able to adjust the query to return only current information, and after a quick test on the redacted database, the change is now waiting for quality assurance testing before launching to our production servers. The debugging code branch will be saved until it’s needed again, and our team was once again grateful that we were working in such a powerful programming language as Perl.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/debugging-a-web-application-in-perl-34pm</id>
    <published>2021-01-23T16:14:24Z</published>
    <updated>2021-01-23T16:14:24Z</updated>
    <category term="perl"/>
    <category term="debugging"/>
    <category term="webdev"/>
    <category term="programming"/>
  </entry>
  <entry>
  <title>Grant Report: RakuAST 2020-12 by Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-rakuast-2020-12"/>
  <id>tag:news.perlfoundation.org,2021-01-23:/post/grant-rakuast-2020-12</id>
  <published>2021-01-23T05:34:28</published>
  <updated>2021-01-23T05:34:28</updated>
  <summary>
  <![CDATA[
     Jonathan Worthington has gotten back to working on the RakuAST grant, and has provided us with the update below. Note that publishing of this report has been delayed due to technical difficulties, with no fault to Jonathan. Anyway, here is the report: After a couple of months break to take care of myself, I took some gentle steps back into working on my RakuAST grant during December. It's not much, 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthington has gotten back to working on the RakuAST grant, and has provided us with the update below.</p>

<p>Note that publishing of this report has been delayed due to technical difficulties, with no fault to Jonathan.</p>

<p>Anyway, here is the report:</p>

<hr />

<p>After a couple of months break to take care of myself, I took some gentle steps back into working on my RakuAST grant during December. It's not much, but it's all work that needs doing at some point.</p>

<p>After a rebase of the <code>rakuast</code> branch onto Rakudo <code>master</code> - mostly straightforward - I reviewed some RakuAST commits made by other Rakudo contributors while I was away. One of them mostly added support for state variables; I fixed a small shortcoming to allow it to pass a failing test case.</p>

<p>Further to that, I implemented RakuAST nodes and wired them up to the new compiler frontend for the following features:</p>

<ul>
<li>Contextualizers</li>
<li>Quoted method calls</li>
<li>Meta-method calls</li>
<li>The <code>if</code>/<code>unless</code> and <code>while</code>/<code>until</code> statement modifiers</li>
</ul>

<p>Those together unblocked 12 further specification test files. I'm hopeful of having rather more to report by the end of January.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words and Edit Distance (and Decorators in Perl)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10059</id>
    <published>2021-01-22T23:34:51Z</published>
    <updated>2021-01-22T23:40:43Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 96 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-096/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (January 24, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Reverse Words</h2>

<p><em>You are given a string <code>$S</code>.</em></p>

<p><em>Write a script to reverse the order of words in the given string. The string may contain leading/trailing spaces. The string may have more than one space between words in the string. Print the result without leading/trailing spaces and there should be only one space between words.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $S = "The Weekly Challenge"
Output: "Challenge Weekly The"
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $S = "    Perl and   Raku are  part of the same family  "
Output: "family same the of part are Raku and Perl"
</code></pre>

<h3>Reverse Words in Raku</h3>

<p>we simply chain the <a href="https://docs.raku.org/routine/words">words</a>, <a href="https://docs.raku.org/routine/reverse">reverse</a> and <a href="https://docs.raku.org/routine/join">join</a> method invocations:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // "    Perl and   Raku are  part of the same family  ";
say $input.words.reverse.join(" ");
</code></pre>

<p>Example output:</p>

<pre><code>$ raku reverse-words.raku
family same the of part are Raku and Perl
~
$ raku reverse-words.raku "Don't ask what your country can do for you, ask what you can do for   your country  "
country your for do can you what ask you, for do can country your what ask Don't
</code></pre>

<p>Of course, this short script can easily be transformed into a Raku one-liner:</p>

<pre><code>$ raku -e '@*ARGS[0].words.reverse.join(" ").say;' "    Perl and   Raku are  part of the same family  "
family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Perl</h3>

<p>In Perl, we use the same idea, just chaining function calls instead of method invocations:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $input = shift // "    Perl and   Raku are  part of the same family  ";
say join " ", reverse split /\s+/, $input;
</code></pre>

<p>Output:</p>

<pre><code>$ perl reverse-words.pl
family same the of part are Raku and Perl
</code></pre>

<p>Of course, we could also make it as a Perl one-liner:</p>

<pre><code>$ perl -E 'say join " ", reverse split /\s+/, shift' "    Perl and   Raku are  part of the same family  "
family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Scala</h3>

<p>Using the same idea as in Raku, i.e. chaining the <code>split</code>, <code>reverse</code>, and <code>mkString</code> method invocations:</p>

<pre><code>object reverseWords extends App {
  val in = "    Perl and   Raku are  part of the same family  "
  println(in.split("\\s+").reverse.mkString(" "))
}
</code></pre>

<p>Output:</p>

<pre><code>family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Python</h3>

<p>Whether using a function-call syntax (in Perl), or a method-invocation syntax (in Raku and Scala), our three programs above all use a functional programming approach chaining pure functions and using immutable data, more precisely a data flow or pipeline pattern. In this programming model, each piece of data is channeled through a series of successive transformations in which  the returned data elements produced by one of the operations are fed to the next operation, and so on. This is possible because each operation of the pipeline is a &#8220;pure function&#8221; that takes an input and produces an output to be processed by the next operation.</p>

<p>This is not easily transposable in Python, because some operators acts are pure function as in the three other languages, and some others (such as <code>reverse</code> in our case) are not pure functions and modify the data in-place instead of sending back the modified data as a return value. It would certainly be possible to work around the limitation in Python (using for example <em>maps</em>), but this is much less natural than in the three other languages, and it probably doesn&#8217;t make much sense to try to force the data flow model into Python. Therefore, our Python implementation will use intermediate temporary variables, as in traditional procedural programming.</p>

<pre><code>def reverse_words(in_str):
    words = in_str.split()
    words.reverse()
    return " ".join(words)

input = "    Perl and   Raku are  part of the same family  "
print(reverse_words(input))
</code></pre>

<p>Output:</p>

<pre><code>$ python3 reverse-words.py
Perl and Raku are part of the same family
</code></pre>

<h2>Task 2: Edit Distance</h2>

<p><em>You are given two strings <code>$S1</code> and <code>$S2</code>.</em></p>

<p><em>Write a script to find out the minimum operations required to convert <code>$S1</code> into <code>$S2</code>. The operations can be insert, remove or replace a character. Please check out <a href="https://en.wikipedia.org/wiki/Edit_distance">Wikipedia page</a> for more information.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $S1 = "kitten"; $S2 = "sitting"
Output: 3

Operation 1: replace 'k' with 's'
Operation 2: replace 'e' with 'i'
Operation 3: insert 'g' at the end
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $S1 = "sunday"; $S2 = "monday"
Output: 2

Operation 1: replace 's' with 'm'
Operation 2: replace 'u' with 'o'
</code></pre>

<p>In computer science, <em>edit distance</em> is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations (usually single character edits) required to transform one string into the other. When the operations permettied are insertion, deletion, or substitution of a character, edit distance is usually called <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>, named after the Soviet mathematician Vladimir Levenshtein.</p>

<p>The Levenshtein distance between two strings <em>a</em>, <em>b</em> (of length |<em>a</em>| and |<em>b</em>| respectively) is given by <code>lev ⁡ (*a*, *b*)</code> where</p>

<p><img alt="levenstein_dist.jpg" src="http://blogs.perl.org/users/laurent_r/levenstein_dist.jpg" width="568" height="261" class="mt-image-none" style="" /></p>

<p>where the tail of some string <em>x</em> is a string of all but the first character of <em>x</em> and <code>*x*[*n*]</code> is the <em>n</em>th character of the string <em>x</em>, starting with character 0.</p>

<p>Note that, in the above formula, the first element in the minimum corresponds to deletion, the second to insertion and the third to replacement.</p>

<p>This definition can lead directly to a naïve recursive implementation. The problem, though, is that such naïve implementation would have an exponential time complexity and would unusable even for moderately large strings (especially if the strings are markedly different). As an example, the naïve (not optimized) version of the Raku recursive subroutine implementation presented below for the pseudo random strings &#8220;LMIjkHFSAE&#8221; and &#8220;dmqkdjfERZG&#8221; takes more than one minute:</p>

<pre><code>$ time raku edit-distance.raku
11 LMIjkHFSAE - dmqkdjfERZG
-
real    1m15,592s
user    0m0,015s
sys     0m0,046s
</code></pre>

<p>The reason for that is that the recursive subroutine is called many times with the same input in the process. If we can <em>cache</em> (or <em>memoize</em>) the results to avoid having to recompute again and again the same result, then the time to compute the Levenshtein distance falls dramatically and becomes roughly proportional to the product of the two string lengths. This still makes the process quite inefficient for very long strings (such as DNA strands), but it&#8217;s usually OK for strings representing words in common human languages.</p>

<p>The recursive approach is a form of top-down dynamic programming, i.e. it breaks a large problem into smaller and smaller subproblems, until the subproblems can be solved. Other solutions use bottom-up dynamic programming, i.e. start from small elementary problems and expand them to larger problems; they often use a matrix or table and iterate over the matrix to expand it. The bottom-up approach also as a time complexity roughly proportional to the product of the two string lengths. So, while the two approaches may not be equivalent (the bottom-up approach is likely to be faster), they have the same time complexity, which means that they essentially scale up essentially the same way when the size of the strings increase. Here, we will use the recursive (top-down) approach.</p>

<p>Note that our implementations will work the other way around, from right to left. The only reason for this is that I had written about four years ago an <code>edit-distance</code> program in Perl, and I found it easier to start from that implementation.</p>

<h3>Edit Discance in Raku</h3>

<p>We present two implementations of a cached implementation of the recursive solution.</p>

<h4>Memoized Version (Raku)</h4>

<p>First, we implement a &#8220;naïve&#8221; <code>edit-distance</code> recursive function and use the Raku <a href="https://modules.raku.org/dist/Memoize:cpan:ELIZABETH">Memoize</a> module (written by my friend Elizabeth Mattijsen as a port of Mark-Jason Dominus&#8217;s equivalent Perl module) to automatically perform the caching of already computed distances:</p>

<pre><code>use v6;
use Memoize;

sub edit-distance (Str $left, Str $right) {
    # If one of the substrings is empty, return the length of the other
    return $right.chars unless $left;
    return $left.chars unless $right;
    my $shortened-left  = substr $left,  0, *-1;
    my $shortened-right = substr $right, 0, *-1;

    # If the last chars are the same, we ignore them
    # and call edit-distance on shortened strings    
    return edit-distance $shortened-left, $shortened-right 
        if substr($left, *-1) eq substr($right, *-1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit-distance($left,       $shortened-right), #insert
        edit-distance($shortened-left,  $right),      #remove
        edit-distance($shortened-left,  $shortened-right)  #replace
    );
}    

memoize("edit-distance");

my @test-pairs = (
    [ &lt; kitten sitting &gt;],
    [ &lt; Monday Friday &gt; ],
    [ &lt; Sunday Saturday &gt; ],
    [ &lt; January February &gt; ],
    [ &lt; November December &gt; ],
    [ &lt; constitutionally anticonstitutional &gt; ],
    [ &lt; LMIjkHFSAE dmqkdjfERZG &gt;],
);
for @test-pairs -&gt; @test {
    my ($str1, $str2) = @test;
    print edit-distance($str1, $str2), " $str1 - $str2\n";
}
</code></pre>

<p>This program produces the following output:</p>

<pre><code>$ time raku edit-distance.raku
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG
-
real    0m1,452s
user    0m0,015s
sys     0m0,046s
</code></pre>

<p>Note how much faster this program is (1.45 seconds for 8 tests), compared to the non-optimized version with only the last test discussed above (about 1 min 15 sec for only one string pair).</p>

<h4>Implementing A Cache Manually in Raku</h4>

<p>I have often said that I eschew using off-the-shelf modules in the context of a programming challenge because I feel that it is sort of cheating. In the case of the above solution, I used the <code>Memoize</code> module because it wasn&#8217;t really part of the Levenshtein distance algorithm, but only a performance optimization. In that case in point, however, that performance optimization is crucial (making the difference between a usable and a not usable implementation), so that I feel it is necessary to show a solution that implements the cache manually. This might be more useful for a beginner or a student wishing to understand how caching or memoizing works:</p>

<pre><code>use v6;

my %cache;

sub edit-distance (Str $left, Str $right) {
    sub cache-distance (Str $l, Str $r) {
        %cache{"$l;$r"} = edit-distance($l, $r) unless %cache{"$l;$r"}:exists;
        return %cache{"$l;$r"};
    }

    # If one of the substrings is empty, return the length of the other
    return $right.chars unless $left;
    return $left.chars unless $right;
    my $shortened-left  = substr $left,  0, *-1;
    my $shortened-right = substr $right, 0, *-1;
    # say " $shortened-left  $shortened-right";

    # If the last chars are the same, we ignore them
    # and call edit-distance on shortened strings
    if substr($left, *-1) eq substr($right, *-1) { 
        return cache-distance $shortened-left, $shortened-right;
    }

    # Else find the minimum between the three operations
    return 1 + min(
        cache-distance($left,       $shortened-right), #insert
        cache-distance($shortened-left,  $right),      #remove
        cache-distance($shortened-left, $shortened-right)  #replace
    );
}    

my @test-pairs = (
    [ &lt; kitten sitting &gt;],
    [ &lt; Monday Friday &gt; ],
    [ &lt; Sunday Saturday &gt; ],
    [ &lt; January February &gt; ],
    [ &lt; November December &gt; ],
    [ &lt; constitutionally anticonstitutional &gt; ],
    [ &lt; LMIjkHFSAE dmqkdjfERZG &gt;],
);
for @test-pairs -&gt; @test {
    my ($str1, $str2) = @test;
    print edit-distance($str1, $str2), " $str1 - $str2\n";
}
</code></pre>

<p>Note that I have implemented the cache management as a separate lexically-scoped subroutine, <code>cache-distance</code>, because there were four recursive calls to <code>edit-distance</code> in the body of the <code>edit-distance</code> and I did not want to implement the cache management code four times.</p>

<p>This script displays the following output:</p>

<pre><code>$ time raku edit-distance_cache.raku
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,398s
user    0m0,015s
sys     0m0,031s
</code></pre>

<p>We see another significant performance improvement, probably because it is more efficient to tailor a cache for a specific problem, compared to a general solution such as using the <code>Memoize</code> module (and perhaps also because it takes some time to compile the module, not quite sure).</p>

<h3>Edit Distance in Perl</h3>

<h4>Memoized Version (Perl)</h4>

<p>First, we implement a &#8220;naïve&#8221; <code>edit-distance</code> recursive function and use the core Perl <code>Memoize</code> module (written by Mark-Jason Dominus) to automatically perform the caching of already computed distances:</p>

<pre><code>use strict;
use warnings;
use feature 'say';
use Memoize;

sub min {
    my $rv = shift;
    for my $tmp (@_) {
        $rv = $tmp if $tmp &lt; $rv;
    }
    return $rv;
}

sub edit_distance {
    my ($left, $right) = @_;

    # If one of the substrings is empty, return the length of the other
    return length $right unless $left;
    return length $left  unless $right;

    my $shortened_left  = substr $left,  0, -1;
    my $shortened_right = substr $right, 0, -1;
    # In the last chars are the same, we ignore them
    # and call edit_distance on shortened strings
    return edit_distance ($shortened_left, $shortened_right) if substr($left, -1) eq substr($right, -1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit_distance($left, $shortened_right), #insert
        edit_distance($shortened_left, $right), #remove
        edit_distance($shortened_left, $shortened_right) #replace
    );
}

memoize("edit_distance");

my @test_pairs = (
    [ qw&lt;kitten sitting&gt;],
    [ qw&lt;Monday Friday&gt; ],
    [ qw&lt;Sunday Saturday&gt; ],
    [ qw&lt;January February&gt; ],
    [ qw&lt;November December &gt; ],
    [ qw&lt;constitutionally anticonstitutional &gt; ],
    # [ qw&lt;LMIjkHFSAE dmqkdjfERZG&gt;],
);
for my $ar (@test_pairs) {
    my ($str1, $str2) = @$ar;
    say edit_distance($str1,$str2), " $str1 - $str2 ";
}
</code></pre>

<p>This program displays the following output and time measures:</p>

<pre><code>$ time perl edit-distance.pl
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,103s
user    0m0,015s
sys     0m0,046s
</code></pre>

<h4>Creating a Decorator in Perl</h4>

<p>As I said before, I don&#8217;t like to use ready-made modules in programming challenges (which the reason why I also implemented myself the <code>min</code> subroutine). We could manually implement some form of wrapper around the naïve <code>edit_distance</code> subroutine, as we more or less did in Raku, to manage the cache. However, I thought it would be more fun to implement a <em>decorator</em> in order to modify the behavior of the <code>edit_distance</code> subroutine.</p>

<p>Originally, a <em>decorator</em> was a OO-programming <em>design pattern</em> making it possible to assign new properties or responsibilities to an object, without modifying that object&#8217;s class. The idea has later been expanded to other programming models. For example, PEP 318 in Python introduced decorators as functions that are designed to change the behavior of other functions without modifying the code of these other functions. This may be useful, for example, to modify the behavior of a legacy or complex function that you don&#8217;t want to change, or to modify in some specific case the behavior of a module that you otherwise don&#8217;t want to change because other programs may be using that module. It is this extended meaning of decorators that we mean here. So, let&#8217;s assume we don&#8217;t want to modify the code of our edit_distance subroutine (perhaps it&#8217;s complicated and I spent so much time debugging it that I want to leave it alone). Rather than changing the code of that subroutine, we will <em>decorate</em> it to add to it the caching functionality.</p>

<p>Contrary to Python, Perl doesn&#8217;t have a specific syntax for decorators, but, as we will see, it is relatively easy to use higher-order functions and typeglobs to implement our own decorators.</p>

<p>First, we define a <code>decorate</code> subroutine which takes as input parameter a reference to the subroutine to be cached and returns an anonymous subroutine that checks the cache and returns the value in the cache if it exists, and else calls the subref it has received as a parameter:</p>

<pre><code>sub decorate {
    my $coderef = shift;  # the argument is a ref to edit_distance
    my %cache;
    return sub {
        my ($l, $r) = @_;
        $cache{"$l;$r"} = $coderef-&gt;(@_) unless exists $cache{"$l;$r"};
        return $cache{"$l;$r"};
    }
}
</code></pre>

<p>Note that we define the <code>%cache</code> in the <code>decorate</code> subroutine. The anonymous subroutine thus acts as a closure and keeps its access to the cache.</p>

<p>Then, we replace the original <code>edit_distance</code> subroutine with the anonymous subroutine returned by <code>decorate</code> in the main symbol table:</p>

<pre><code>{
    # local scope for the deactivation of the redefine warning
    no warnings 'redefine';
    # we replace the edit-distance subroutine by its 
    # decorated version in the main symbol table
    *main::edit_distance = decorate(\&amp;edit_distance);
}
</code></pre>

<p>Here, <code>*main::edit_distance</code> is a typeglob representing the entry of the original <code>edit_distance</code> subroutine in the symbol table. Before that, we deactivate the <code>redefine</code> warning (to avoid a warning upon the subroutine definition, and we do that in a code block to limit the scope of the deactivation to this code line.</p>

<p>Now, whenever the code will call the <code>edit_distance</code> subroutine, it is the anonymous subroutine produced by the <code>decorate</code> subroutine that will be called instead. Thus, the <code>edit_distance</code> subroutine seen by the rest of the program is now memoized (the edit distances are cached), although we did not change anything to the code defining it. That subroutine is called recursively four times in its own code, but we don&#8217;t need to charge all these subroutine calls.</p>

<p>The overall program now looks like this:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub min {
    my $rv = shift;
    for my $tmp (@_) {
        $rv = $tmp if $tmp &lt; $rv;
    }
    return $rv;
}

sub edit_distance {
    my ($left, $right) = @_;

    # If one of the substrings is empty, return the length of the other
    return length $right unless $left;
    return length $left  unless $right;

    my $shortened_left  = substr $left,  0, -1;
    my $shortened_right = substr $right, 0, -1;
    # In the last chars are the same, we ignore them
    # and call edit_distance on shortened strings
    return edit_distance ($shortened_left, $shortened_right) if substr($left, -1) eq substr($right, -1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit_distance($left, $shortened_right), #insert
        edit_distance($shortened_left, $right), #remove
        edit_distance($shortened_left, $shortened_right) #replace
    );
}

# The decorator returns the edit_distance subroutine wrapped in 
# code lines performing the caching of values
sub decorate {
    my $coderef = shift;
    my %cache;
    return sub {
        my ($l, $r) = @_;
        $cache{"$l;$r"} = $coderef-&gt;(@_) unless exists $cache{"$l;$r"};
        return $cache{"$l;$r"};
    }
}

{
    # local scope for the deactivation of the redefine warning
    no warnings 'redefine';
    # we replace the edit-distance subrouytine by its 
    # decorated version in the main symbol table
    *main::edit_distance = decorate(\&amp;edit_distance);
}

my @test_pairs = (
    [ qw&lt;kitten sitting&gt; ],
    [ qw&lt;Monday Friday&gt; ],
    [ qw&lt;Sunday Saturday&gt; ],
    [ qw&lt;January February&gt; ],
    [ qw&lt;November December &gt; ],
    [ qw&lt;constitutionally anticonstitutional &gt; ],
    [ qw&lt;LMIjkHFSAE dmqkdjfERZG&gt;],
);
for my $ar (@test_pairs) {
    my ($str1, $str2) = @$ar;
    say edit_distance($str1,$str2), " $str1 - $str2 ";
}
</code></pre>

<p>This script produces the following output and execution times:</p>

<pre><code>$ time perl  edit-distance_decorator.pl
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,064s
user    0m0,000s
sys     0m0,046s
</code></pre>

<p>Note that our manually decorated subroutine is slightly faster that the original memoized version.</p>

<h3>Edit Distance in Python</h3>

<p>I do not know whether there is something equivalent to the <code>Memoize</code> module in Python, so I will manage the cache manually (in the <code>cached_distance</code> subroutine):</p>

<pre><code>cache = dict()

def cached_distance(left, right):
    key = left + ';' + right
    if key not in cache:
        cache[key] = edit_distance(left, right)  
    return cache[key]

def edit_distance(left, right):
    lr = len(right)
    ll = len(left)
    if not left: return lr
    if not right: return ll
    shortened_l = left[0:ll-1]
    shortened_r = right[0:lr-1]
    if left[ll-1] == right[lr-1]:
        return cached_distance(shortened_l, shortened_r)

    return 1 + min( cached_distance(left, shortened_r),     # Insert 
                    cached_distance(shortened_l, right),    # Remove 
                    cached_distance(shortened_l, shortened_r)  # Replace 
                  )     

tests = ( [ "kitten", "sitting" ], [ "Monday", "Friday" ], 
          [ "Sunday", "Saturday" ], [ "January", "February" ],
          [ "November", "December" ],
          [ "constitutionally", "anticonstitutional" ],
        )

for test in tests:
    print (test[0], test[1], edit_distance(test[0], test[1]  ))
</code></pre>

<p>This produces the following output:</p>

<pre><code>$ time python3 edit-distance.py
kitten sitting 3
Monday Friday 3
Sunday Saturday 3
January February 4
November December 3
constitutionally anticonstitutional 6

real    0m0,114s
user    0m0,000s
sys     0m0,062s
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, January 31, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl weekly challenge 96</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-96.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10058</id>
    <published>2021-01-22T03:23:39Z</published>
    <updated>2021-01-22T14:49:53Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>This week we had contrasting challenges.</p>

<h3>Challenge 1 - Reverse Words</h3>

<p>Take a string of words {with arbitrary white space around the words} and reverse the order of the words in the string and removing any redundant white space.</p>

<p>This is a classic example of a 1-liner....</p>

<pre><code>
   join q( ), reverse grep {$_} split m{\s+}, $_[0];
</code></pre>

<h3>Challenge 2 - Edit Distance</h3>

<p>I will provide 2 solutions here... one a less optimal solution which at the same time gives us a nice way of rendering the alignment - and then an more efficient "boiling down" of the first algorithm to just return the distance...</p>

<p>I'm just going to add <em>"Another day job challenge!"</em></p>

<p>To be able to make "nicer" output - rather than just keeping track of the edit distance of substrings - we will actually keep the alignment of the two words as a string of "operations" whether they be Indels or SNPs.</p>

<p>One of my background is working with genomic data and this can be thought of as a simple alignment algorithm - and so I think of the three operations as Indels {inserts/deletes - remembering an insert into one sequence is just the same as a delete from the other} and SNPs - or single nucleotide polymorphisms.</p>

<p>The simple alignment string representation we will use consists of:<br />
<pre><br />
  '|' - the letters are the same;<br />
  'v' - insert<br />
  '^' - delete<br />
  ' ' - SNP/modify<br />
</pre></p>

<p>We can convert this to an edit distance by counting all the non-"|"s In perl we do this with tr/^v /^v / which returns the number of matches in scalar form. See {<tt>_edit_dist</tt> - function}</p>

<p>Finally we include a nice way to render the alignment {edits} By showing the two words with appropriate inserts in each word and indicate where the letters match in each word via a the alignment string in the middle. See {<tt>render_alighnment</tt> function}</p>

<pre>
  kitten-    sunday    boat rid-ing
   ||| |v      ||||    |^||||||v|||
  sitting    monday    b-at ridding
</pre>

<p>Additional note - we "memoise" the alignment function - as it will be called with the same subseq of letters following different paths through the two sequences. This increases performance...</p>

<p>From a "genomic" point of view this is known as the basis of the Smith-Waterman local alignment algorithm. Although Smith-Waterman has other features - including variable "penalties" for each type of edit {inserts, deletes, modifications}. Even having different penalties for certain changes {this is also similar to how typing correction software works - with assuming adjacent key typos are more likely.</p>

<p>See:<br />
 * https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm</p>

<h4>Solution</h4>

<p>We solve the recursively (stripping letters from one or both words each time). We have a number of options.</p>

<p> * Either of the words has no-letters - so the alignment is either a set of inserts/deletes from the other string.<br />
 * If the first character of each word is the same - we continue to the next letters {and an alignment is marked between the two words}<br />
 * If they are not the same - we look to see which of the options insert, delete or snp makes has the lowest score...</p>

<p>The other two helper functions render this string (given the two sequences) showing the gaps and alignments; and work out the edit distance from the alignment.</p>

<pre><code>
sub alignment_string {
  my( $s, $t ) = @_;
  $calls++;
  my $key = "$s\t$t";
  return $cache{$key} if exists $cache{$key};
  $misses++;
  ## Both strings are empty so reached end!
  return $cache{$key}||=''              if $t eq q() && $s eq q();
  ## Exhausted t so all edits are now deletes...
  return $cache{$key}||='^' x length $s if $t eq q();
  ## Exhausted s so all edits are now inserts...
  return $cache{$key}||='v' x length $t if $s eq q();
  ## First letters are the same so we just prepend the
  ## match symbol (|) and continue...
  return $cache{$key}||='|'.alignment_string(substr($s,1),substr($t,1))
                                        if ord $s == ord $t;

<p>  ## We now have three choices - "insert", "delete" or "SNP"<br />
  my($d,$i,$m) = (<br />
    '^'.alignment_string( substr($s,1), $t           ),<br />
    'v'.alignment_string( $s,           substr($t,1) ),<br />
    ' '.alignment_string( substr($s,1), substr($t,1) ),<br />
  );<br />
  return  $cache{$key}||=<br />
        _edit_dist( $d ) < _edit_dist( $i )<br />
    ? ( _edit_dist( $d ) < _edit_dist( $m ) ? $d : $m )<br />
    : ( _edit_dist( $i ) < _edit_dist( $m ) ? $i : $m );<br />
}</p>

<p>sub edit_distance {<br />
  return _edit_dist( alignment_string( @_ ) );<br />
}</p>

<p>sub _edit_dist { ## Count inserts(v), deletes(^) & mis-matches( )<br />
  return $_[0] =~ tr/^v /^v /;<br />
}</p>

<p>sub render_alignment {<br />
  my( $s, $t ) = @_;<br />
  my $a = alignment_string( $s, $t );<br />
  my( $top, $bot ) = ( '','' );<br />
  foreach ( split m{}, $a ) {<br />
    $top .= $_ eq 'v' ? '-' : substr $s, 0, 1, '';<br />
    $bot .= $_ eq '^' ? '-' : substr $t, 0, 1, '';<br />
  }<br />
  return sprintf "%s\n%s (%d)\n%s\n",<br />
    $top, $a, _edit_dist($a), $bot;<br />
}<br />
</code></pre></p>

<p>If we are not interested in the "alignment" diagram we can simplify the code:</p>

<pre><code>
sub edit_distance_simple {
  my( $s, $t ) = @_;
  return $cache_x{"$s\t$t"}||=
     $t eq q()          ? length $s
   : $s eq q()          ? length $t
   : (ord $s == ord $t) ? edit_distance(substr($s,1),substr($t,1))
   :                      1+(sort { $a <=> $b }
                            edit_distance(substr($s,1),$t),
                            edit_distance($s,substr$t,1),
                            edit_distance(substr($s,1),substr $t,1)
                          )[0]
   ;
}
</code></pre>

<p>Note re-caches - these memoize the function - from trials the approximate hit is 50% - this matches up with the non recursive solution.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html"/>
    <id>tag:blogs.perl.org,2021:/users/toby_inkster//1019.10057</id>
    <published>2021-01-22T13:55:25Z</published>
    <updated>2021-01-22T14:35:29Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>The lighting in my bedroom uses <a href="https://en.wikipedia.org/wiki/Philips_Hue">Philips Hue bulbs</a> — specifically, the coloured ones. Last night, I decided it would be nice to set the three lights in my bedroom to cycle slowly through a set of warm colours using a script.</p>

<p>I didn't want harsh transitions from one colour to the next, but for the lighting to fade from one colour to the next in a smooth gradient. Also, I didn't want the three bulbs to all be the exact same colour, but wanted each bulb to be at different stage in the cycle, like they're "chasing" each other through the colours.</p>

<p>So I whipped up a quick script. It requires the command-line tool <a href="https://github.com/bahamas10/hueadm">hueadm</a> to be installed and set up before we start. You can run <kbd>hueadm lights</kbd> to get a list of available lights, and in particular, their ID numbers.</p>]]>
        <![CDATA[<p>First step, we need to be able blend two colours together. This is necessary to be able to create smooth transitions between colours. I stole a little code from <a href="https://metacpan.org/release/Color-Fade/source/lib/Color/Fade.pm">Color::Fade</a> on CPAN to do this.</p>

<script src="https://gist.github.com/tobyink/e9686777d150937f0b929de115fae695.js"></script>

<p>Pretty simple averaging of two RGB values. You could arguably get a better effect by converting to HSL, averaging those values and then converting back to RGB, but in practice, using RGB seems fine.</p>

<p>Now we can build the gradients. We want to take an array of colours and make it into a cycle by copying the first colour to the end, then create a new array, copying the colours into the new array, but inserting a blend of each pair between them, so our initial array of N colours grows to an array of 2N colours. Then repeat that process a few times.</p>

<script src="https://gist.github.com/tobyink/e7f910b8d3947f3536483ed9a4fe23c3.js"></script>

<p>Nice. Now we know what colours our lights should be.</p>

<p>Here's a quick Moo class to control a lightbulb, given its ID. Nothing interesting to see here.</p>

<script src="https://gist.github.com/tobyink/593316c89929cde61ce52a199633c2f8.js"></script>

<p>Finally we can work on the logic. We have an array of colours; we need to pick an index in that array for each bulb. My array of colours (after being expanded into a gradient), ended up being 160 colours, so it seemed that a good starting point was to set my three bulbs initially to colours 0, 16, and 32 in the array. Something along these lines:</p>

<script src="https://gist.github.com/tobyink/30a15fce9f03e493420ca72ded4955b1.js"></script>

<p>Then pause for a second or two, then add one to each index (looping any that go over 160 back to 0) and repeat. Here's the full code for that:</p>

<script src="https://gist.github.com/tobyink/e9462093b4830a8fd0216a8ff1cba0ca.js"></script>

<p>Now let's test it out...</p>

<script src="https://gist.github.com/tobyink/a7a01c4a362f40b685b54abd6afc706d.js"></script>

<p>It works!</p>

<p>The <a href="https://gist.github.com/tobyink/62a6d7a994573f3f7dc83acc5754d4d7">full script is on GitHub Gist</a>.</p>]]>
    </content>
</entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="https://dev.to/tobyink/mood-lighting-40lg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl 5 script to cycle through a gradient of colours on a set of Philips Hue lightbulbs.</p>

<p><a href="https://gist.github.com/tobyink/62a6d7a994573f3f7dc83acc5754d4d7">Full script on Gist</a></p>

<p><a href="https://toby.ink/blog/2021/01/22/mood-lighting/">Explanation on my blog</a></p>

</div>
    </content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/mood-lighting-40lg</id>
    <published>2021-01-22T09:43:43Z</published>
    <updated>2021-01-22T09:43:43Z</updated>
    <category term="perl"/>
    <category term="moo"/>
    <category term="perl5"/>
    <category term="homeautomation"/>
  </entry>
  <entry>
  <title>Loop controls: next, last, continue, break</title>
  <summary type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></summary>
  <updated>2021-01-20T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/loop-controls-next-last"/>  <id>https://perlmaven.com/loop-controls-next-last</id>
  <content type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Geodaten in Bildern und Videos können viel über Nutzer verraten</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Am vorvergangenen Wochenende (9./10. Januar 2021) gab es relativ viel Wirbel um die Plattform Parler, die offensichtlich als Twitterersatz für hauptsächlich amerikanische "Konservative" diente. Amazon Web Services (AWS) kündigte Parler alle Services, da dort jede Menge Hass verbreitet wurde. Bevor alles abgeschaltet war, wurden wohl alle öffentlich verfügbaren Daten über ein API heruntergeladen. Ein paar der Fehler, die bei dem API gemacht wurden, werde ich kurz in der Schulung im März erläutern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif</id>
    <published>2021-01-19T10:00:00Z</published>
    <updated>2021-01-19T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 095</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/17#pwc095" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a number $N. Write a script to figure out if the given number is a Palindrome. Print 1 if true, otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub is_palindrome{
    my($n) = @_;
    return false if $n &lt; 0;
    my @digits = split(//, $n);
    if(@digits % 2 == 0){
        do{
            my $a = shift @digits;
            my $b = pop @digits;
            return false if $a != $b;
        }while(@digits);
        return true;
    }
    while(@digits != 1){
        my $a = shift @digits;
        my $b = pop @digits;
        return false if $a != $b;
    };
    return true;
}

MAIN:{
    print is_palindrome(1221);
    print "\n";
    print is_palindrome(-101);
    print "\n";
    print is_palindrome(90);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;One assumption is made and that is that the input is a valid integer.&lt;/p&gt;
&lt;p&gt;My approach here is straightforward iteration and matches what one might do manually: work inwards from both ends and if at any point there is not a match of the two elements being compared then return false. If we make it all the way to the middle then return true. Here the middle is either an empty array, in the case of an even number of elements or, in the case of an odd number of elements, an array of length 1.&lt;/p&gt;
&lt;p&gt;The case of a single digit has no special handling, if the number has an odd number of digits but that odd number happens to be 1 then the loop is not entered and we just return true.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to demonstrate Stack operations.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Stack;

my $stack = new Stack();
$stack-&gt;push(2);
$stack-&gt;push(-1);
$stack-&gt;push(0);
$stack-&gt;pop;       
print $stack-&gt;top . "\n"; 
$stack-&gt;push(0);
print $stack-&gt;min . "\n"; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Stack module used is of my own making. The next listing is that code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Stack{
    use boolean;
    use Class::Struct;

    struct(
        data =&gt; q/@/
    );

    sub push{
        my($self, $n) = @_;
        push @{$self-&gt;data()}, $n;
    }

    sub pop{
        my($self, $n) = @_;
        pop @{$self-&gt;data()};
    }

    sub top{
        my($self, $n) = @_;
        @{$self-&gt;data()}[@{$self-&gt;data()} - 1];
    }
    
    sub min{
        my($self, $n) = @_;
        my @sorted = sort {$a &lt;=&gt; $b} @{$self-&gt;data()};
        return $sorted[0];
    }
    true;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -Iperl perl/ch-2.pl
-1
-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Like &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10"&gt;last week’s LinkedList module&lt;/a&gt; I use &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt; to create the Stack module.&lt;/p&gt;
&lt;p&gt;Class::Struct creates accessors for all the class variables automatically. In this way, by calling &lt;code&gt;$self-&amp;gt;data()&lt;/code&gt;, we get a reference to the internal array &lt;code&gt;data&lt;/code&gt; and perform the required Stack operations.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc095</id>
    <published>2021-01-17T14:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Refactoring code snippet</title>
  <summary type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></summary>
  <updated>2021-01-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/refactoring-code-snippet"/>  <id>https://perlmaven.com/refactoring-code-snippet</id>
  <content type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Git-Hooks mit Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Git ist eine weit verbreitete Software zur Versionsverwaltung. Wir nutzen Git seit vielen Jahren, um unseren Perl-Code zu verwalten. Soll im Git-Workflow etwas erzwungen werden, kommen sogenannte Git-Hooks zum Einsatz.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl</id>
    <published>2021-01-06T10:00:00Z</published>
    <updated>2021-01-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 093</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/03#pwc093" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given set of co-ordinates &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to count maximum points on a straight line when given co-ordinates plotted on 2-d plane.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given set of co-ordinates @N.
# Write a script to count maximum points 
# on a straight line when given co-ordinates 
# plotted on 2-d plane.
##
sub triangle_area{
    my($i, $j, $k) = @_;
    return ($i-&gt;[0] * ($j-&gt;[1] - $k-&gt;[1])) 
         + ($j-&gt;[0] * ($k-&gt;[1] - $i-&gt;[1]))
         + ($k-&gt;[0] * ($i-&gt;[1] - $j-&gt;[1]));
}

sub collinear_points{
    my(@points) = @_;
    my @collinear;
    for my $i (@points){
        for my $j (@points){
            for my $k (@points){
                if(triangle_area($i, $j, $k) == 0){
                    my $i_string = join(",", @{$i});
                    my $j_string = join(",", @{$j});
                    my $k_string = join(",", @{$k});
                    if(($i_string ne $j_string) &amp;&amp; ($i_string ne $k_string) &amp;&amp; ($j_string ne $k_string)){
                        my $has_i = grep { $i_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $i if !$has_i;
                        my $has_j = grep { $j_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $j if !$has_j;
                        my $has_k = grep { $k_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $k if !$has_k;
                    }
                }
            }
        }
    }
    return @collinear;
}

MAIN:{
    my @N;
    @N = ([5,3], [1,1], [2,2], [3,1], [1,3]);
    my @collinear = collinear_points(@N);
    print "There are a maximum of " . @collinear . " collinear points.\n"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
There are a maximum of 3 collinear points.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Keep in mind that any two points determine a line. Therefore to consider all possible non-trivial lines we need to review all triples of points. This method will work in the most general case when the starting data may contain multiple lines with a larger number of points.&lt;/p&gt;
&lt;p&gt;In determining collinearity I calculate the area of a triangle using the triple of points. If the area is zero we know that all the points lay on the same line.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree containing only the numbers 0-9. Write a script to sum all possible paths from root to leaf.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a binary tree containing 
# only the numbers 0-9.
# Write a script to sum all possible paths 
# from root to leaf.
##
use Graph;

sub travserse_sum{
    my($tree) = @_;
    my @paths = build_paths($tree);
    my $path_sum = 0;
    for my $path (@paths){
        $path_sum +=  unpack("%32C*", pack("C*", @{$path})); 
    }
    return $path_sum;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         push @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(2, 3);
    $Tree-&gt;add_edge(2, 4);
    print travserse_sum($Tree) . "\n";
    
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(3, 5);
    $Tree-&gt;add_edge(3, 6);
    print travserse_sum($Tree) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
13
26
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is straightforward enough, at a high level anyway: (1) Get all paths and then (2) sum all the nodes on the paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am always happy to have a chance to use the &lt;a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod"&gt;Graph module&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The Graph module has a bunch of nice algorithms implemented but what we want here is not a &lt;em&gt;shortest path&lt;/em&gt; but &lt;em&gt;all paths&lt;/em&gt;. The Graph module doesn’t have anything for us to use for that. Implementing a recursive &lt;em&gt;Depth First Search&lt;/em&gt; and collecting all the paths is not such a hard thing to do, but in the &lt;strong&gt;Holiday Spirit&lt;/strong&gt; (i.e. laziness) I just re-used &lt;a href="https://www.perlmonks.org/?node_id=381608"&gt;Ikegami&lt;/a&gt;’s code. See the References section.&lt;/li&gt;
&lt;li&gt;I first used the pack/unpack trick for summing array back in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/09"&gt;Challenge 007&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Collinear.html"&gt;Collinear Points&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/41646812/4705722"&gt;All Paths&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc093</id>
    <published>2021-01-03T16:37:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Bulk downloading all episodes of a podcast</title>
    <link href="http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html"/>
    <id>http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html</id>
    <updated>2021-01-03T14:51:24+00:00</updated>
    <category term="perl"/>
    <summary type="html">In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want MP3s on my hard disk (and/or vinyl on my record player). I want ...</summary>
    <content type="html">&lt;p&gt;In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want &lt;span class="caps"&gt;MP3&lt;/span&gt;s on my hard disk (and/or vinyl on my record player). I want access to my music when I'm offline (and I'm offline a lot) and without using a so-called smart phone (I prefer vintage &lt;span class="caps"&gt;USB&lt;/span&gt;-stick &lt;span class="caps"&gt;MP3 &lt;/span&gt;players). My partner thinks the same (I guess 25+ years of my propaganda had some influence..).&lt;/p&gt;

&lt;p&gt;But "modern" sites make it rather hard to actually download content (even if it's free). They offer links to a myriad of apps, but often no download button. At least a lot of podcasts still provide an &lt;span class="caps"&gt;RSS &lt;/span&gt;feed. So when my partner cannot download a newly discovered podcast, she asked me if I can do it for her. Which I'm of course happy to do, and which is often done with a few lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use strict;
use warnings;
use 5.030;

use XML::Feed;
use URI;
use String::Ident;

my $feed = XML::Feed-&amp;gt;parse( URI-&amp;gt;new( $ARGV[0] ) );

for my $entry ( $feed-&amp;gt;entries ) {
    my $date = $entry-&amp;gt;issued;
    $date =~ s/T.*$//;
    my $filename = join( '-', $date, String::Ident-&amp;gt;cleanup( $entry-&amp;gt;title ) ) . '.mp3';
    next if -f $filename;
    say &amp;quot;wget -O $filename &amp;quot; . $entry-&amp;gt;enclosure-&amp;gt;url;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href="https://metacpan.org/pod/XML::Feed"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;::Feed&lt;/a&gt; to fetch and parse the &lt;span class="caps"&gt;RSS &lt;/span&gt;feed, passing in the &lt;span class="caps"&gt;URL &lt;/span&gt;as the first command line argument. I create a nice filename based on the date the podcast was &lt;code&gt;issued&lt;/code&gt; (removing the time-part) and a &lt;code&gt;cleanup()ed&lt;/code&gt; version of the title. (&lt;a href="https://metacpan.org/pod/String::Ident"&gt;String::Ident&lt;/a&gt; is a nice little helper module Jozef created for a project we were working on some time ago).&lt;/p&gt;

&lt;p&gt;If the filename already exists in the current directory, we skip, because we don't need to download it again.&lt;/p&gt;

&lt;p&gt;Then I output a &lt;a href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; command to download the &lt;span class="caps"&gt;URL &lt;/span&gt;(provided by &lt;code&gt;$entry-&amp;gt;enclosure-&amp;gt;url&lt;/code&gt;) and save it under the nice filename.&lt;/p&gt;

&lt;p&gt;Why do I not download the file directly in the script?&lt;/p&gt;

&lt;p&gt;I just find it easier to use an external tool, especially as I like to pipe the output of this script into a file, so I can munge the file a bit. Eg, for this podcast, I did not download all 131 episodes, but only the 5 oldest and the 5 newest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/media/podcasts$ fetch_podcast.pl https://example.com/podcast.rss &amp;gt; all
~/media/podcasts$ head -n 5 all &amp;gt; test_it
~/media/podcasts$ tail -n 5 all &amp;gt;&amp;gt; test_it
~/media/podcasts$ bash test_it
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy!&lt;/p&gt;</content>
    <category term="automatization"/>
    <category term="~/bin"/>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 1</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" type="text/html"/>
    <content type="html">&lt;p&gt;Back in mid-November 2020, I noticed that &lt;a href="https://hackage.haskell.org/"&gt;Hackage&lt;/a&gt; (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. &lt;/p&gt;
&lt;p&gt;Since the &lt;a href="https://hackage.haskell.org/api"&gt;Hackage API&lt;/a&gt; does not provide a way to list releases (uploads), I had to &lt;a href="https://metacpan.org/pod/http-tiny-plugin-every"&gt;download&lt;/a&gt; the &lt;a href="http://hackage.haskell.org/packages/recent"&gt;recent additions&lt;/a&gt; page periodically, &lt;a href="https://github.com/sharyanto/scripts/blob/master/parse-hackage-page"&gt;parse&lt;/a&gt; each page, and &lt;a href="https://metacpan.org/pod/combine-overlap"&gt;merge&lt;/a&gt; the results into a single large list. Because I have just collected the recent additions page since mid-November, I&amp;#039;m looking at December 2020 period. &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% http-tiny-plugin-every --every 3h http://hackage.haskell.org/packages/recent --dir . --trace
% for f in 2*.log; do parse-hackage-page &amp;quot;$f&amp;quot; --format ltsv &amp;gt; &amp;quot;$$.ltsv&amp;quot;; done
% combine-overlap 2*.ltsv &amp;gt; hackage_release_202012.ltsv
&lt;/pre&gt;
&lt;p&gt; For CPAN, the MetaCPAN API lets us query various things in many ways so the simple task of listing recent releases is not a problem at all. I&amp;#039;m using a &lt;a href="https://metacpan.org/pod/list-metacpan-releases"&gt;CLI&lt;/a&gt; to do this: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% list-metacpan-releases --from-date 2020-12-01 --to-date 2020-12-31 --json &amp;gt; cpan_release_202012.json
&lt;/pre&gt;
&lt;p&gt; With this two pieces of data, I just need to perform some SQL (again, using &lt;a href="https://metacpan.org/pod/fsql"&gt;CLI&lt;/a&gt; for this) to get what I want. &lt;/p&gt;
&lt;p&gt;So for December 2020, there are 957 releases: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
957
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 629: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
629
&lt;/pre&gt;
&lt;p&gt; As for number of authors who did releases in this period, the two are more similar: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
207
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 191: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
191
&lt;/pre&gt;
&lt;p&gt; So this does confirm my guess that the upload activity for both repositories are currently in the same order of magnitude, but does not confirm the suspicion that Hackage is more active than CPAN, at least in December 2020. I plan to do a follow up next year in January after I collected all 2021 data.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Back in mid-November 2020, I noticed that Hackage (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. Since the Hackage API does not provide a way to list releases (uploads), I had to download the recent additions page periodically, parse each page, and merge the results into … <a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 1</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1933</id>
    <published>2021-01-03T04:40:59Z</published>
    <updated>2021-01-03T04:40:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Frohes Neues Jahr 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das in vielerlei Hinsicht ungewöhnliche Jahr 2020 ist vorbei. Wir wünschen allen treuen und neuen Leser\*innen unseres Blogs ein frohes neues Jahr. Wir hoffen, dass Sie gut durch das vergangene Jahr gekommen sind und dass 2021 besser wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr</id>
    <published>2021-01-01T10:00:00Z</published>
    <updated>2021-01-01T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/AWS-ARN-0.001">AWS-ARN</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>0.001</td>
<td>Dumb module to parse and generate ARNs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-0.09-TRIAL">AnyPAN</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.09</td>
<td>CPAN Mirror and DarkPAN merging toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-Storage-S3-0.05-TRIAL">AnyPAN-Storage-S3</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.05</td>
<td>AnyPAN storage plugin for Amazon S3</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-ImageMagickUtils-0.001">App-ImageMagickUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to ImageMagick</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-MetaCPANUtils-0.001">App-MetaCPANUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-OverlapUtils-0.001">App-OverlapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Command-line utilities related to overlapping lines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/App-Toolforge-MixNMatch-0.01">App-Toolforge-MixNMatch</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool app.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-jupiter-1">App-jupiter</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>an app that serves a river of news as a static page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Array-OverlapFinder-0.001">Array-OverlapFinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Find/remove overlapping items between two ordered sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OKLAS/Async-Template-0.12">Async-Template</a></td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>0.12</td>
<td>Async Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/EXODIST/Atomic-Pipe-0.001">Atomic-Pipe</a></td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>0.001</td>
<td>Send atomic messages from multiple writers across a POSIX pipe.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-DBI-0.000_01">AtteanX-Store-DBI</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>Database quad-store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Badge-Depot-Plugin-Githubactions-0.0100">Badge-Depot-Plugin-Githubactions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Github Actions plugin for Badge::Depot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-Meta-diff-0.001">CLI-Meta-diff</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Metadata for diff CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-MetaUtil-Getopt-Long-0.001">CLI-MetaUtil-Getopt-Long</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Routine related to Getopt::Long</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/CPANfile-Parse-PPI-0.01">CPANfile-Parse-PPI</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Parse cpanfiles with PPI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Data-CompactReadonly-0.0.1">Data-CompactReadonly</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>a description of CompactReadonly data format, version 0.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMC/Devel-WatchVars-v1.0.0">Devel-WatchVars</a></td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>v1.0.0</td>
<td>trace access to scalar variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-BME280-0.01">Device-Chip-BME280</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for BME280</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Dist-Mgr-1.00">Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Distribution development cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-Author-CSSON-GithubActions-0.0100">Dist-Zilla-Plugin-Author-CSSON-GithubActions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Ease creation of common Github Actions workflows</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-CheckForUnwantedFiles-0.0100">Dist-Zilla-Plugin-CheckForUnwantedFiles</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Check for unwanted files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-PluginBundle-Author-GTERMARS-0.01">Dist-Zilla-PluginBundle-Author-GTERMARS</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Plugin Bundle for distributions built by GTERMARS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/Finance-Crypto-Exchange-Kraken-0.001">Finance-Crypto-Exchange-Kraken</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Perl implementation of the Kraken REST API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKWIN/Finance-IG-0.01">Finance-IG</a></td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>0.01</td>
<td>– Module for doing useful stuff with IG Markets REST API.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Geo-Compass-Direction-0.01">Geo-Compass-Direction</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Convert a compass heading degree into human readable direction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-0.06">HEAT-Crypto</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.06</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-X25519-0.04">HEAT-Crypto-X25519</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.04</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenChart-0.001">Health-BladderDiary-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/JavaScript-Const-Exporter-v0.1.0">JavaScript-Const-Exporter</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Convert exported Perl constants to JavaScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/LocalConf-Parser-0.01">LocalConf-Parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Locale-Places-0.01">Locale-Places</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Translate places using <a href="http://download.geonames.org/" rel="nofollow">http://download.geonames.org/</a></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log-Log4perl-Appender-Redis-0.01">Log-Log4perl-Appender-Redis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseBaheForDump-0.001">Log-ger-UseBaheForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Bahe to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseJSONForDump-0.003">Log-ger-UseJSONForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Use JSON::MaybeXS to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseYAMLForDump-0.001">Log-ger-UseYAMLForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use YAML::PP to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log4perlAppenderRedis-0.01">Log4perlAppenderRedis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/LogicMonitor-REST-Signature-0.0.1">LogicMonitor-REST-Signature</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Builds LMv1 token header info for Logicmonitor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TURNERJW/LyricFinder-1.00">LyricFinder</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>Fetch song lyrics from several internet lyric sites.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TRIZEN/Math-Sidef-0.01">Math-Sidef</a></td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>0.01</td>
<td>Perl interface to Sidef's mathematical library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Mo-utils-0.01">Mo-utils</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Mo utilities.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Module-Installed-1.00">Module-Installed</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Check whether a module, or a file's list of includes are installed.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Mojolicious-Plugin-Parametry-1.001001">Mojolicious-Plugin-Parametry</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Mojolicious plugin providing param helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAMI/MsOffice-Word-Template-1.0">MsOffice-Word-Template</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1.0</td>
<td>treat a Word document as Template Toolkit document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-Chord-Progression-0.0001">Music-Chord-Progression</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0001</td>
<td>Create network transition chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Inversion-0.0100">Music-MelodicDevice-Inversion</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply melodic inversion to a series of notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Ornamentation-0.0100">Music-MelodicDevice-Ornamentation</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Chromatic and diatonic musical ornamentation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Transposition-0.0100">Music-MelodicDevice-Transposition</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply chromatic and diatonic transposition to notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Nano-0.01">Nano</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Minimalist Object Persistence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Net-Cloudflare-DNS-0.01">Net-Cloudflare-DNS</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>DNS API for Cloudflare API v4</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-TokenExchange-0.001">Net-OAuth2Server-TokenExchange</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A Token Exchange extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OETIKER/PDF-QRCode-0.1.0">PDF-QRCode</a></td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>v0.1.0</td>
<td>Add QRCode method to PDF::API2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LEONT/PerlIO-bom-0.001">PerlIO-bom</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>Automatic BOM handling in Unicode IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAVECROSS/Plack-App-DirectoryIndex-0.0.1">Plack-App-DirectoryIndex</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>Serve static files from document root with an index file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Plack-Middleware-Text-Minify-v0.1.0">Plack-Middleware-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>minify text responses on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueCurses-0.0.1">RogueCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.0.1</td>
<td>game system for RPG/Adventure games using Curses.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueQuest-0.1.1">RogueQuest</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>game system for RPG/Adventure games using SDL for graphics.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/SMS-Send-Adapter-Node-Red-0.04">SMS-Send-Adapter-Node-Red</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.04</td>
<td>SMS::Send Adapter to Node-RED JSON HTTP request</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/SQL-PatchDAG-0.100">SQL-PatchDAG</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.100</td>
<td>A minimal DB schema patch manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/STEVEB-Dist-Mgr-0.01">STEVEB-Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>My distribution release cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-AudioTag-0.0102">Statocles-Plugin-AudioTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0102</td>
<td>Change mp3 anchors to audio elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Syntax-Check-1.00">Syntax-Check</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Wraps 'perl -c' so it works even if modules are unavailable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMCOP/Sys-Linux-KernelVersion-0.100">Sys-Linux-KernelVersion</a></td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>0.100</td>
<td>Gives tools for checking the current running linux kernel version</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Test-Mojo-Role-DOMinizer-1.001001">Test-Mojo-Role-DOMinizer</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Test::Mojo role to examine DOM mid test chain</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Text-Minify-XS-v0.1.0">Text-Minify-XS</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Simple text minification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Diff-0.01">Toolforge-MixNMatch-Diff</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool diff.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Object-0.01">Toolforge-MixNMatch-Object</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool objects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Print-0.01">Toolforge-MixNMatch-Print</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool object print routines.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Struct-0.01">Toolforge-MixNMatch-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool structures.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GETTY/WWW-Picnic-0.001">WWW-Picnic</a></td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>0.001</td>
<td>Library to access Picnic Supermarket API
</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-0.01">Wikibase-Datatype</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-Struct-0.01">Wikibase-Datatype-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types struct conversions.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Word-Rhymes-0.01">Word-Rhymes</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Takes a word and fetches rhyming matches from RhymeZone.com</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ColorName-Any-0.002">WordList-ColorName-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Wordlist from any Graphics::ColorNames::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Json-0.01">Zing-Encoder-Json</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JSON Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Jwt-0.01">Zing-Encoder-Jwt</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JWT Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Mysql-0.01">Zing-Store-Mysql</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Mysql Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Pg-0.01">Zing-Store-Pg</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Postgres Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Redis-0.01">Zing-Store-Redis</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Redis Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Sqlite-0.01">Zing-Store-Sqlite</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Sqlite Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Zang-0.01">Zing-Zang</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Callback-based Zing Processes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/config-parser-0.01">config-parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/crazy-fast-media-scan-0.001-TRIAL">crazy-fast-media-scan</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>methods to identify files using random sampling</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>11</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>8</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>6</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract AWS-ARN JWRIGHT 0.001 Dumb module to parse and generate ARNs AnyPAN KARUPA 0.09 CPAN Mirror and DarkPAN merging toolkit AnyPAN-Storage-S3 KARUPA 0.05 AnyPAN storage plugin for Amazon S3 App-ImageMagickUtils PERLANCAR 0.001 Utilities related to ImageMagick App-MetaCPANUtils PERLANCAR 0.001 CLI utilities related to MetaCPAN App-OverlapUtils PERLANCAR 0.001 Command-line utilities related to overlapping … <a href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1931</id>
    <published>2021-01-01T00:32:41Z</published>
    <updated>2021-01-01T00:32:41Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
