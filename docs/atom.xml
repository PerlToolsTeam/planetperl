<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-04-17T16:48:52Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Four is Equilibrium</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/04/17#pwc160" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive number, $n &lt; 10. Write a script to generate english text 
sequence starting with the English cardinal representation of the given number, the word 
"is" and then the English cardinal representation of the count of characters that made up 
the first word, followed by a comma. Continue until you reach four.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;

my %cardinals = (
    1 =&gt; "one",
    2 =&gt; "two",
    3 =&gt; "three",
    4 =&gt; "four",
    5 =&gt; "five",
    6 =&gt; "six",
    7 =&gt; "seven",
    8 =&gt; "eight",
    9 =&gt; "nine"
);

sub four_is_magic{
    my($n, $s) = @_;
    $s = "" if !$s;
    return $s .= "four is magic" if $n == 4;
    $s .= $cardinals{$n} . " is " . $cardinals{length($cardinals{$n})} . ", ";
    four_is_magic(length($cardinals{$n}), $s);
}

MAIN:{
    print four_is_magic(5) . "\n";
    print four_is_magic(7) . "\n";
    print four_is_magic(6) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
five is four, four is magic
seven is five, five is four, four is magic
six is three, three is five, five is four, four is magic
</code></pre>

<h3>Notes</h3>

<p>I was thinking of a clever way I might do this problem. I got nothing! Too much Easter 
candy perhaps? Anyway, I am not sure there is much tow rite about here as it's an 
otherwise straightforward use of hashes. </p>

<h2>Part 2</h2>

<p><em>You are give an array of integers, @n. Write a script to find out the Equilibrium Index 
of the given array, if found.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;

sub equilibrium_index{
    for my $i (0 .. @_ - 1){
        return $i if unpack("%32I*", pack("I*",  @_[0 .. $i])) == unpack("%32I*", pack("I*",  @_[$i .. @_ - 1]));
    }
    return -1;
}

MAIN:{
    print equilibrium_index(1, 3, 5, 7, 9) . "\n";
    print equilibrium_index(1, 2, 3, 4, 5) . "\n";
    print equilibrium_index(2, 4, 2) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
3
-1
1
</code></pre>

<h3>Notes</h3>

<p>Like Part 1 above this problem allows for a pretty cut and dry solution. Also, similarly,
I can't see a more efficient and/or creative way to solve this one. Maybe I should have
just gone for obfuscated then?!?!? In any event, if nothing else, I always like using 
pack/unpack. I always considered it one of Perl's super powers!</p>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-160/">Challenge 160</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc160</id>
    <published>2022-04-17T09:59:00-04:00</published>
    <updated>2022-04-17T09:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 160</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-160-3206" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-160/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-160/sgreen">My solutions</a></p>

<p>Two straight forward tasks, so lets get stuck into it.</p>

<h2>
  
  
  TASK #1 › Four Is Magic
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive number, <code>$n &lt; 10</code>.</p>

<p>Write a script to generate English text sequence starting with the English cardinal representation of the given number, the word ‘is’ and then the English cardinal representation of the count of characters that made up the first word, followed by a comma. Continue until you reach four.</p>

<h3>
  
  
  Solutions
</h3>

<p>So both Python and Perl have modules that can convert integers to numbers in English (and other languages), but since we are only dealing with 10 numbers (zero to nine), I just hard code the strings.</p>

<p>I have a loop where I calculate <code>l</code> being the length of the word representing the number <code>n</code>, and add the phrase <code>word[n] is word[l]</code> to the <code>phrases</code> list (array in Perl), and then set <code>n</code> to the value <code>l</code>. The loop exits when <code>n == 4</code>.</p>

<p>Then it's a matter of capitalizing the first letter, and adding the final phrase and printing the string.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 5
Five is four, four is magic.

$ ./ch-1.py 7
Seven is five, five is four, four is magic.

$ ./ch-1.py 6
Six is three, three is five, five is four, four is magic.
</code></pre>

</div>



<h2>
  
  
  TASK #2 › Equilibrium Index
</h2>

<h3>
  
  
  Task
</h3>

<p>You are give an array of integers, <code>@n</code>.</p>

<p>Write a script to find out the Equilibrium Index of the given array, if found.</p>

<p>For an array A consisting n elements, index i is an equilibrium index if the sum of elements of subarray <code>A[0…i-1]</code> is equal to the sum of elements of subarray <code>A[i+1…n-1]</code>.</p>

<h2>
  
  
  Solution
</h2>

<p>As we don't know the order of the string, I just brute force the solution (if one exists). Starting at 1 (the 2nd element) and ending at <code>n-1</code> (the second last element), I see if the sum of digits to the left is equal to the sum of digits to the right. If it does, I set the value <code>idx</code>, and exit the loop.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 1 3 5 7 9
3

$ ./ch-2.py 1 2 3 4 5
-1

$ ./ch-2.py 2 4 2
1
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-160-3206</id>
    <published>2022-04-17T11:32:36Z</published>
    <updated>2022-04-17T11:32:36Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5597851169753194856</id>
    <published>2022-04-16T17:16:00.000+02:00</published>
    <updated>2022-04-16T17:16:12.884+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxxviii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052003&lt;/strong&gt; on 2022-04-13&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.052002 was 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Code-TidyAll-0.82' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.82&lt;/strong&gt; on 2022-04-15&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.81 was 1 month, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TLINDEN/Config-General-2.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::General&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generic Config Module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.65&lt;/strong&gt; on 2022-04-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 2.63 was 5 years, 8 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.106' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.106&lt;/strong&gt; on 2022-04-12&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.105 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GNUSTAVO/JIRA-REST-0.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JIRA::REST&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Thin wrapper around Jira's REST API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.023&lt;/strong&gt; on 2022-04-10&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.022 was 3 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.08&lt;/strong&gt; on 2022-04-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.07 was 3 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.078&lt;/strong&gt; on 2022-04-10&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 2.077 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RTKH/Raisin-0.94' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Raisin&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A REST API microframework for Perl. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.94&lt;/strong&gt; on 2022-04-12&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 0.93 was 11 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NEILB/Text-ParseWords-3.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ParseWords&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - parse text into an array of tokens or array of arrays &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.31&lt;/strong&gt; on 2022-04-12&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.30 was 7 years, 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5597851169753194856/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/04/ccclxxxviii-9-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5597851169753194856"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5597851169753194856"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/04/ccclxxxviii-9-great-cpan-modules.html" title="(ccclxxxviii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2843157161956171817</id>
    <published>2022-04-16T17:01:00.002+02:00</published>
    <updated>2022-04-16T17:01:47.808+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/04/16 15:01:28 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SNMP::Util" target="_blank"&gt;Net::SNMP::Util&lt;/a&gt; - Check system information of hosts&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; - Facilitates the creation and modification of PDF files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prometheus::Tiny::Shared" target="_blank"&gt;Prometheus::Tiny::Shared&lt;/a&gt; - A tiny Prometheus client with a shared database behind it&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Forecast" target="_blank"&gt;Statistics::Forecast&lt;/a&gt; - calculates a future value&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Regression" target="_blank"&gt;Statistics::Regression&lt;/a&gt; - weighted linear regression package (line+plane fitting)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::YACurl" target="_blank"&gt;AnyEvent::YACurl&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PodPreview" target="_blank"&gt;App::PodPreview&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Crontab" target="_blank"&gt;Config::Crontab&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Localize" target="_blank"&gt;Data::Localize&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Oracle" target="_blank"&gt;DBD::Oracle&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::podpreview" target="_blank"&gt;Dist::Zilla::App::Command::podpreview&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::DynamicPrereqs" target="_blank"&gt;Dist::Zilla::Plugin::DynamicPrereqs&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Parameters" target="_blank"&gt;Function::Parameters&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::GDAL::FFI" target="_blank"&gt;Geo::GDAL::FFI&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/gettext" target="_blank"&gt;gettext&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::Module" target="_blank"&gt;Inline::Module&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::IP" target="_blank"&gt;IO::Socket::IP&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern" target="_blank"&gt;JSON::Schema::Modern&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=155)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::GSL" target="_blank"&gt;Math::GSL&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Method::Signatures" target="_blank"&gt;Method::Signatures&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Drive::Simple" target="_blank"&gt;Net::Google::Drive::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Daemon" target="_blank"&gt;Proc::Daemon&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prometheus::Tiny" target="_blank"&gt;Prometheus::Tiny&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex::Inline" target="_blank"&gt;Rex::Inline&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Socket" target="_blank"&gt;Socket&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Socket6" target="_blank"&gt;Socket6&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Basic" target="_blank"&gt;Statistics::Basic&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Descriptive" target="_blank"&gt;Statistics::Descriptive&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Lite" target="_blank"&gt;Statistics::Lite&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::RankCorrelation" target="_blank"&gt;Statistics::RankCorrelation&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Form::UrlEncoded::XS" target="_blank"&gt;WWW::Form::UrlEncoded::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2843157161956171817/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/04/dii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2843157161956171817"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2843157161956171817"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/04/dii-metacpan-weekly-report.html" title="(dii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-723852916307982125</id>
    <published>2022-04-16T17:00:00.001+02:00</published>
    <updated>2022-04-16T17:00:53.657+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-04-16 15:00:31 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71874725" target="_blank"&gt;How to grep multi line string with new line characters or tab characters or spaces&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/7]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71815889" target="_blank"&gt;How to look for a node by id in the Perl Graph.pm module?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71822585" target="_blank"&gt;In Perl Windows, how do you replace everything after a word?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71824109" target="_blank"&gt;Invoke and control GDB from perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71848318" target="_blank"&gt;Replace all occurances of a character unless surrounded by two different patterns&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/723852916307982125/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/04/dxxx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/723852916307982125"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/723852916307982125"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/04/dxxx-stackoverflow-perl-report.html" title="(dxxx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Net::SAML2 version 0.55 Released</title>
    <link rel="alternate" href="https://dev.to/timlegge/netsaml2-version-055-released-55ld" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://metacpan.org/pod/Net::SAML2">Net::SAML2</a> is a Perl module that implements the SAML2 protocol for Perl Applications.</p>

<p>This release adds support for EncryptedAssertions via the <a href="https://metacpan.org/pod/XML::Enc">XML::Enc</a> module.</p>

<p>Support for EncryptedAssertions is automatic if an EncryptedAssertion is received but the call to Net::SAML2::Protocol::Assertion must provide a key_file and a cacert to decrypt the EncryptedAssertion and verify the Signature on the decrypted Assertion (if it is signed).</p>

<p>No changes are required for existing applications that do not use EncryptedAssertions.</p>

<p>If you have never implemented SAML2 in a Perl web application, there is an extensive <a href="https://github.com/perl-net-saml2/perl-Net-SAML2/blob/master/TUTORIAL.md">tutorial</a> that discusses how to implement Net::SAML2 using Foswiki's <a href="https://foswiki.org/Extensions/SamlLoginContrib">SamlLoginContrib</a> as an example.</p>

<p>In addition, the git repo includes a testapp that makes it easy to test against multiple IdPs by simply adding a directory, named for the IdP, containing valid metadata.xml and cacert.pem files.</p>

</div>
    </content>
    <author>
      <name>Timothy Legge</name>
    </author>
    <id>https://dev.to/timlegge/netsaml2-version-055-released-55ld</id>
    <published>2022-04-16T01:11:58Z</published>
    <updated>2022-04-16T01:11:58Z</updated>
    <category term="perl"/>
    <category term="sso"/>
    <category term="saml"/>
  </entry>
  <entry>
    <title>XML::Sig 0.57 Released</title>
    <link rel="alternate" href="https://dev.to/timlegge/xmlsig-057-released-2i1e" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>XML::Sig is a perl module to sign and verify XML Digital Signatures</p>

<p>This is a fairly minor release that addresses some test failures caused by the OpenSSL project <a href="https://mta.openssl.org/pipermail/openssl-project/2020-January/001720.html">choosing to "not load” the Legacy provider by default in version 3</a>.</p>

<p>This effectively drops support for a <a href="https://www.openssl.org/docs/manmaster/man7/OSSL_PROVIDER-legacy.html">number of very old and broken algorithms</a> (at least by default) and that is a very good thing despite the negative impact on their users.</p>

<p>It does however make one wonder if it is not time for the <a href="https://www.w3.org/2008/xmlsec/">XML Security Working Group</a> to spin up and update the specifications for the changes from  the last ten years.</p>

</div>
    </content>
    <author>
      <name>Timothy Legge</name>
    </author>
    <id>https://dev.to/timlegge/xmlsig-057-released-2i1e</id>
    <published>2022-04-15T23:50:24Z</published>
    <updated>2022-04-15T23:50:24Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Installing Perl with perlbrew</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ali/2022/04/installing-perl-with-perlbrew.html"/>
    <id>tag:blogs.perl.org,2022:/users/ali//3846.10762</id>
    <published>2022-04-15T16:54:31Z</published>
    <updated>2022-04-15T19:13:58Z</updated>
    <author>
        <name>Deadmarshal</name>
        <uri>https://scienco.ir</uri>
    </author>
    <category term="perlbrew" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="gcc" label="gcc" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="installingperl" label="installing perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="make" label="make" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perlbrew" label="perlbrew" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ali/">
        <![CDATA[<p>I'm going to start this blog by writing a very simple guide on installing Perl using perlbrew.</p>

<p>To install Perl using perlbrew, first visit <a href="https://perlbrew.pl/">the website</a> and grab its <pre><code>curl -L https://install.perlbrew.pl | bash</code></pre> and paste it in your terminal, and wait for it to do its job. </p>

<p>Now you will have to run <pre><code>perlbrew init</code></pre> to initialize perlbrew.</p>

<p>After that you will probably have to add it to your $PATH environment variable as the installation says after it is done downloading. This can be done with a command like <pre><code>echo source ~/perl5/perlbrew/etc/bash >> ~/.bashrc</code></pre> or <pre><code>echo source ~/perl5/perlbrew/etc/bash >> ~/.zshrc</code></pre> depending on your shell.</p>

<p>Once installed, you can see a list of different installable Perl versions by issuing the <pre><code>perlbrew available</code></pre> command.</p>

<p>Before trying to install Perl, you should ensure that you have <strong>make</strong> and a C compiler, which you probably already have if you are on Unix. I personally recommend the <strong>gcc (GNU Compiler Collection)</strong> which includes a C compiler. You can run <pre><code>make -v</code></pre> and <pre><code>gcc -v</code></pre> and then checking the return value with <pre><code>echo $?</code></pre> to see if it's 0 to be sure that you have them installed on your machine.</p>

<p>If the result of issuing <pre><code>echo $?</code></pre> is non-zero after doing either of the above commands, then there is an issue, and you should install <code>make</code> and/or <code>gcc</code> before continuing. Installing these tools on Debian based systems is easy. Just run <pre><code>sudo apt install gcc make -y</code></pre> to install them. And if you are on other Operating Systems you can use your corresponding commands to install them.</p>

<p>As of this writing Perl version 5.34.1 is the latest stable version, so to install it, simply issue this command <pre><code>perlbrew install perl-5.34.1</code></pre> and wait for it to compile and install Perl. This may take several minutes.</p>

<p>Now to use the freshly installed Perl and leaving the Operating System's Perl alone (which is located in <code>/usr/bin/perl</code>), you have to run the <pre><code>perlbrew switch perl-5.34.1</code></pre> command. This switches your default Perl to the new version that you have just installed, so that whenever you use Perl, you just use that instead of the system's Perl (which is not to be messed with!).</p>

<p>I hope you have found this small guide useful. </p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 160: Four is Magic and Equilibrium Index</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/04/perl-weekly-challenge-160-four-is-magic-and-equilibrium-index.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10760</id>
    <published>2022-04-15T03:32:23Z</published>
    <updated>2022-04-15T03:35:48Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 160 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-159/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days from now (on April 17, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Four is Magic</h2>

<p><em>You are given a positive number, <code>$n &lt; 10</code>.</em></p>

<p><em>Write a script to generate English text sequence starting with the English cardinal representation of the given number, the word ‘is’ and then the English cardinal representation of the count of characters that made up the first word, followed by a comma. Continue until you reach four.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 5
Output: Five is four, four is magic.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 7
Output: Seven is five, five is four, four is magic.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 6
Output: Six is three, three is five, five is four, four is magic.
</code></pre>

<p>Four is four letter-long, so we might enter into an endless loop if the specific case for four did not exist: &#8220;four is four, four is four, four is four, etc.&#8221; This is the only case where the English name for a digit has a number of letters equal to the digit. Note that we are also lucky that, with English names of integers, we don’t get into an endless loop involving two (or more) numbers. If 5 was written &#8220;fiv&#8221; in English, we would get into this endless loop between 5 and 3: &#8220;fiv is three, three is fiv, fiv is three, etc.&#8221; So we are rather lucky that this doesn&#8217;t happen in English, but there are certainly other languages where this wouldn&#8217;t work.</p>

<h3>Four is Magic in Raku</h3>

<p>That&#8217;s fairly straight forward. We define an array <code>@numbers</code> of integers between 0 and 9 spelled in English. We then iterate through the numbers until we reach 4, at which point we break out of the loop with a <code>return</code> statement.</p>

<pre><code>sub is-magic (Int $n is copy) {
    my @numbers = &lt;zero one two three four five six seven eight nine&gt;;
    my $output = "";
    loop {
        my $letter-count = @numbers[$n].chars;
        if $n == 4 {
            return $output ~ "four is magic.";
        } else {
            $output ~= "@numbers[$n] is @numbers[$letter-count], ";
            $n = $letter-count;
        }
    }
}
for 1..9 -&gt; $n {
  say "$n: ", is-magic($n).tc;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./magic4.raku
1: One is three, three is five, five is four, four is magic.
2: Two is three, three is five, five is four, four is magic.
3: Three is five, five is four, four is magic.
4: Four is magic.
5: Five is four, four is magic.
6: Six is three, three is five, five is four, four is magic.
7: Seven is five, five is four, four is magic.
8: Eight is five, five is four, four is magic.
9: Nine is four, four is magic.
</code></pre>

<h3>Four is Magic in Perl</h3>

<p>This is essentially the same in Perl. We define an array <code>@numbers</code> of integers between 0 and 9 spelled in English. We then iterate through the numbers until we reach 4, at which point we break out of the loop with a <code>return</code> statement.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_magic {
    my $n = shift;
    my @numbers = qw&lt;zero one two three four five six seven eight nine&gt;;
    my $output = "";
    while (1) {
        my $letter_count = length $numbers[$n];
        if ($n == 4) {
            return $output . "four is magic.";
        } else {
            $output .= "$numbers[$n] is $numbers[$letter_count], ";
            $n = $letter_count;
        }
    }
}
for my $m (1..9) {
  say "$m: ", ucfirst(is_magic($m));
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl magic4.pl
1: One is three, three is five, five is four, four is magic.
2: Two is three, three is five, five is four, four is magic.
3: Three is five, five is four, four is magic.
4: Four is magic.
5: Five is four, four is magic.
6: Six is three, three is five, five is four, four is magic.
7: Seven is five, five is four, four is magic.
8: Eight is five, five is four, four is magic.
9: Nine is four, four is magic.
</code></pre>

<h2>Task 2: Equilibrium Index</h2>

<p><em>You are give an array of integers, <code>@n</code>.</em></p>

<p><em>Write a script to find out the Equilibrium Index of the given array, if found.</em></p>

<blockquote>
  <p>For an array A consisting n elements, index <code>i</code> is an equilibrium index if the sum of elements of subarray <code>A[0…i-1]</code> is equal to the sum of elements of subarray <code>A[i+1…n-1]</code>.</p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: @n = (1, 3, 5, 7, 9)
Output: 3
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @n = (1, 2, 3, 4, 5)
Output: -1 as no Equilibrium Index found.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @n = (2, 4, 2)
Output: 1
</code></pre>

<p>With the small arrays of the examples, we will use a brute force approach: simply testing all possible indices within the range. If the arrays were significantly larger, we might try to predict faster the proper index. The best solution that I can think of may be a binary search approach over the possible indices within the range. For example, with the <code>(1, 2, 3, 4, 5)</code> array, we test the middle item (3), and find that <code>1 + 2 &lt; 4 + 5</code>. So we try the <code>(1, 2, 3)</code> sub-array and test the middle item (2), and find that <code>1 &lt; 3</code>. At this point, we can figure that there will be no solution.</p>

<h3>Equilibrium Index in Raku</h3>

<p>The brute force approach described above is pretty straight forward: we test all possible indices and <code>return</code> the proper index if the sum of the items before it equals the sum of the items after it. If we reach the end of the loop, then there is no solution and we return -1.</p>

<pre><code>sub equilibrium (@ary) {
    for 1..@ary.end-1 -&gt; $i {
        return $i if @ary[0..$i-1].sum == @ary[$i+1..@ary.end].sum;
    }
    return -1;
}
for &lt;1 3 5 7 9&gt;, &lt;1 2 3 4 5&gt;, &lt;2 4 2&gt; -&gt; @a {
    say "@a[]".fmt("%-12s"), " -&gt; ", equilibrium(@a);
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./equilibrium.raku
1 3 5 7 9    -&gt; 3
1 2 3 4 5    -&gt; -1
2 4 2        -&gt; 1
</code></pre>

<h3>Equilibrium Index in Perl</h3>

<p>Again the same brute force approach: we test all possible indices and <code>return</code> the proper index if the sum of the items before it equals the sum of the items after it. If we reach the end of the loop, then there is no solution and we return -1. Note that, in Perl, we had to implement our own <code>sum</code> subroutine since it does not exist as a built-in function. Obviously, I could have used the <code>sum</code> subroutine of various core modules, but, as I have stated many times, I echew using off-the-shelf modules or packages in a coding challenge.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}
sub equilibrium {
    my @ary = @_;
    for my $i (1..$#ary-1) {
        return $i if sum (@ary[0..$i-1]) == sum (@ary[$i+1..$#ary]);
    }
    return -1;
}
for my $a ([1, 3, 5, 7, 9], [1, 2, 3, 4, 5], [2, 4, 2]) {
    my $formated = sprintf "%-12s", "@$a";
    say "$formated -&gt; ", equilibrium(@$a);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./equilibrium.pl
1 3 5 7 9    -&gt; 3
1 2 3 4 5    -&gt; -1
2 4 2        -&gt; 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 24, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>plenv - Installation of Perl on user directories 2022</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/plenv-installation-of-perl-on-user-directories-2022-3l5e" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/tokuhirom/plenv">plenv</a> is a command line tool to intall Perl on user directries. You can install any version of Perl on your user directries and use it.</p>

<p>This article is originally <a href="https://en.perlzemi.com/blog/20180816153437.html">plenv - Installation of Perl on user directories | Perl ABC</a></p>

<h3>
  
  
  Installation of plenv
</h3>

<p>Execute the following command to install plenv.</p>

<pre>
git clone https://github.com/tokuhirom/plenv.git ~/.plenv
git clone https://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/
</pre>

<p>Next, let's pass the path of plenv. Add the configuration file for bash provided by plenv to ".bash_profile" (for bash).</p>

<p>Execute the following command.</p>

<pre>
echo 'export PATH="$HOME/.plenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
echo 'eval "$(plenv init -)"' &gt;&gt; ~/.bash_profile
exec $SHELL -l
</pre>

<h3>
  
  
  Installtion of Perl using plenv
</h3>

<p>You can check the available Perls using <strong>install</strong> command and <strong>-l</strong> option.</p>

<pre>
plenv install -l
</pre>

<p>If plenv is installed successfully, you will see a list of Perls you can install.</p>

<pre>
Available versions: Available versions:
 5.35.10
 5.35.9
 5.35.8
 5.35.7
 5.35.6
 5.35.5
 5.35.4
 5.35.3
 5.35.2
 5.35.1
 5.35.0
 5.34.1
  ...
</pre>

<p>Install Perl in your environment. Let's install Perl of 5.34.1. It will take some time, so wait(about 40 minutes).</p>

<pre>
plenv install 5.34.1
</pre>

<p>If the installation of Perl fails, check the following commands are installled. These commands are needed to install Perl.</p>

<ul>
<li> make </li>
<li><a href="https://en.linux.perlzemi.com/blog/20201216103956.html">gcc</a></li>
<li> patch </li>
</ul>

<p>Show the list of installed Perls using <strong>versions</strong> command.</p>

<pre>
# Show the list of installed Perls
plenv versions
</pre>

<p>When Perl is available</p>

<p>The installed Perls are displayed.</p>

<pre>
* system(set by /home/kimoto/.plenv/version)
  5.34.1
</pre>

<p>And switch to the installed Perl using the <strong>global</strong> command.</p>

<pre>
plenv global 5.34.1
</pre>

<p>And show the installed Perls again. </p>

<pre>
# Show the list of installed Perls
plenv versions
</pre>

<p>"*" is added to the head of the current Perl.</p>

<pre>
  system(set by /home/kimoto/.plenv/version)
* 5.34.1
</pre>

<p>And see the Perl version.</p>

<pre>
perl -v
</pre>

<p>The version of current Perl is displayed.</p>

<pre>
This is perl 5, version 34, subversion 1 (v5.34.1)  built for x86_64-linux
</pre>

<h3>
  
  
  Installation of cpanm
</h3>

<p><a href="https://en.perlzemi.com/blog/20101027127859.html">cpanm</a> can be installed using <strong>install-cpanm</strong> command.</p>

<pre>
plenv install-cpanm
</pre>

<p>And install a module.</p>

<pre>
cpanm JSON
</pre>

<h3>
  
  
  Returning back to System Perl
</h3>

<p>If you want to returning back to system Perl, switch to <strong>system</strong>.</p>

<pre>
plenv global system
</pre>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/plenv-installation-of-perl-on-user-directories-2022-3l5e</id>
    <published>2022-04-14T08:29:17Z</published>
    <updated>2022-04-14T08:29:17Z</updated>
    <category term="perl"/>
    <category term="plenv"/>
    <category term="beginners"/>
    <category term="cpanm"/>
  </entry>
  <entry>
    <title>Checking Syntax of Perl</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/checking-syntax-of-of-perl-1nce" type="text/html"/>
    <content type="html">&lt;p&gt;Perl can check the syntax using "-c" option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -c script.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Are you surprised to hear that Perl has syntax checking?&lt;/p&gt;

&lt;p&gt;This means Perl is not interpreter language line by line. &lt;/p&gt;

&lt;p&gt;Young people maybe don't know this because there is not the correct knowledge of Perl and appropriate interest to Perl.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/checking-syntax-of-of-perl-1nce</id>
    <published>2022-04-14T07:40:50Z</published>
    <updated>2022-04-14T07:40:50Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>#559 - Endangered and dying languages</title>
    <link rel="alternate" href="https://perlweekly.com/archive/559.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi!</p>
<p>While the population of the world is growing the language-diversity is shrinking. There are many languages that are used less and less. (Wikipedia has <a href="https://en.wikipedia.org/wiki/Lists_of_endangered_languages">a list by location</a>. I am sure as programmers there are plenty of thing we can also do to help. That's why I have been investing time in <a href="https://librelingo.app/">LibreLingo</a> project and specifically in <a href="https://en.wikipedia.org/wiki/Judaeo-Spanish">Judaeo-Spanish (aka. Ladino, or Judezmo)</a>. Now I can also show you the <a href="https://diksionaryo.szabgab.com/">dictionary</a> I have been working on. You can type in words in any of the languages listed there and it will try to find the Ladino word for it. The dictionary is still small. It contains only 3,500 words, but I hope I'll be able to enlarge it to help people who would like to learn Ladino.</p>
<p>It was a very slow week and I hardly found any articles to include (besides the Weekly Challenge that Mohammad collects), but there were also new authors. Let me congratulate to <a href="http://blogs.perl.org/users/simbabque/">Julien Fiegehenn</a> and <a href="https://dev.to/scotticles">Scotticles</a> for their first posts.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/559.html</id>
    <published>2022-04-11T10:00:00Z</published>
    <updated>2022-04-11T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Show current time</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-04-11T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-current-time"/>  <id>https://perlmaven.com/dancer2-current-time</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Farey and Farey Again, but in a Mobius Way</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/04/10#pwc159" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to compute the Farey Sequence of the 
order $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use POSIX;

sub farey{
    my($order) = @_;
    my @farey;
    my($s, $t, $u, $v, $x, $y) = (0, 1, 1, $order, 0, 0);
    push @farey, "$s/$t", "$u/$v";
    while($y != 1 &amp;&amp; $order &gt; 1){
        $x = POSIX::floor(($t + $order) / $v) * $u - $s;
        $y = POSIX::floor(($t + $order) / $v) * $v - $t;
        push @farey, "$x/$y";
        ($s, $t, $u, $v) = ($u, $v, $x, $y);
    }
    return @farey;
}

MAIN:{
    print join(", ", farey(7)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0/1, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 2/5, 3/7, 1/2, 4/7, 3/5, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 1/1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Here is an iterative implementation of what seems to be a fairly standard recursive 
definition of the Farey Sequence. Well, "standard" may be over stating it as this sequence
is seemingly fairly obscure. Fare-ly obscure? Ha! Anyway, this all seems fairly 
straightforward and the main thing to note here is that the sequence elements are stored 
as strings. This seems the most convenient way to keep them for display although in the 
next part of the challenge we'll use the sequence elements in a numerical way.  &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number $n. Write a script to generate the Moebius Number for the
given number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use POSIX;
use Math::Complex;

sub farey{
    my($order) = @_;
    my @farey;
    my($s, $t, $u, $v, $x, $y) = (0, 1, 1, $order, 0, 0);
    push @farey, "$s/$t", "$u/$v";
    while($y != 1 &amp;&amp; $order &gt; 1){
        $x = POSIX::floor(($t + $order) / $v) * $u - $s;
        $y = POSIX::floor(($t + $order) / $v) * $v - $t;
        push @farey, "$x/$y";
        ($s, $t, $u, $v) = ($u, $v, $x, $y);
    }
    return @farey;
}

sub mertens{
    my($n) = @_;
    my @farey = farey($n);
    my $mertens = 0;
    map {$mertens += exp(2 * M_PI * i * eval($_))} @farey;
    $mertens += -1;
    return Re($mertens);
}

sub moebius{
    my($n) = @_;
    return 1 if $n == 1;
    return sprintf("%.f", (mertens($n) - mertens($n - 1)));
}

MAIN:{
    map {print moebius($_) . "\n"} (5, 10, 20);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
-1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;We can consider this second task of the challenge to be a continuation of the first. Here 
the Farey Sequence code is used again. But why? Well, in order to compute the Moebius 
Number we use an interesting property. The &lt;em&gt;Mertens Function&lt;/em&gt; of &lt;code&gt;$n&lt;/code&gt; is defined as the 
sum of the first &lt;code&gt;$n&lt;/code&gt; Moebius Numbers. There is an alternative and equivalent definition
of the Mertens Function, however, that use the Farey Sequence. In the alternative 
definition The Mertens Function is equivalent to what is shown in &lt;code&gt;sub mertens&lt;/code&gt;: 
the sum of the natural logarithm base raised to the power of two times pi times &lt;em&gt;i&lt;/em&gt; times
the k-th element of the Farey Sequence. 
In Perl: &lt;code&gt;map {$mertens += exp(2 * M_PI * i * eval($_))} @farey;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thus to compute the n-th Moebius Number we compute the n-th and n-th - 1 Mertens Function
and subtract as shown.&lt;/p&gt;

&lt;p&gt;Be aware that this computation requires the use of &lt;code&gt;Math::Complex&lt;/code&gt;, a core module which 
defines constants and operations on complex numbers. It's how we are able to use &lt;em&gt;i&lt;/em&gt; in
&lt;code&gt;sub mertens&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-159/"&gt;Challenge 159&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FareySequence.html"&gt;Farey Sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/MertensFunction.html"&gt;Mertens Function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/MoebiusFunction.html"&gt;Moebius Function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Math::Complex"&gt;Math::Complex&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc159</id>
    <published>2022-04-10T11:45:00-04:00</published>
    <updated>2022-04-10T11:45:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Advent Calendar articles about Moose</title>
    <link rel="alternate" href="http://blogs.perl.org/users/simbabque/2022/04/perl-advent-calendar-articles-about-moose.html"/>
    <id>tag:blogs.perl.org,2022:/users/simbabque//3022.10757</id>
    <published>2022-04-09T23:00:49Z</published>
    <updated>2022-04-09T23:55:04Z</updated>
    <author>
        <name>simbabque</name>
        <uri>https://github.com/simbabque</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/simbabque/">
        <![CDATA[<p>At $work, one of my colleagues who is not in a developer role has started to get into writing code more and more, and I am mentoring him. He's about to work on a productive ticket with Moose for the first time, so I gave him a little reading list, mostly involving selected parts <a href="https://metacpan.org/pod/Moose">of the documentation</a> as well as <a href="https://www.youtube.com/watch?v=LKXvG6VKew4">Ricardo Signes' excellent talk <em>Moose is Perl</em></a>. </p>

<p>But then I thought I must have read lots of great blog posts about Moose on the <a href="https://perladvent.org/">Perl Advent Calendar</a> over the years. I tried to find a few, but had some trouble identifying them easily. So I wrote a quick scraper. Here are all articles that mention <em>Moose</em> since 2010 (where the format of the website changed). Most of them are about Moose or one of the numerous MooseX modules.</p>

<ul>
<li>2011-12-02: <a href="https://perladvent.org/2011/2011-12-02.html">Keeping up with the Joneses</a> by Ricardo Signes</li>
<li>2011-12-03: <a href="https://perladvent.org/2011/2011-12-03.html">Keep it Clean</a> by Ricardo Signes</li>
<li>2011-12-04: <a href="https://perladvent.org/2011/2011-12-04.html">Warn Different</a> by Ricardo Signes</li>
<li>2011-12-07: <a href="https://perladvent.org/2011/2011-12-07.html">Unwrapping the Package(::Stash)</a> by Jesse Luehrs</li>
<li>2011-12-09: <a href="https://perladvent.org/2011/2011-12-09.html">Taming Search with Data::SearchEngine</a> by Cory G Watson</li>
<li>2011-12-15: <a href="https://perladvent.org/2011/2011-12-15.html">Install Even Less</a> by Ricardo Signes</li>
<li>2011-12-20: <a href="https://perladvent.org/2011/2011-12-20.html">Revisiting Test::Routine</a> by Piers Cawley</li>
<li>2012-12-01: <a href="https://perladvent.org/2012/2012-12-01.html">Sweet Path::Class is Coming to Town</a> by Yanick Champoux</li>
<li>2012-12-12: <a href="https://perladvent.org/2012/2012-12-12.html">Testing networking client code using Test::LWP::UserAgent</a> by Karen Etheridge</li>
<li>2012-12-15: <a href="https://perladvent.org/2012/2012-12-15.html">Gift Wrapping, part II: Locking the Room</a> by Yanick Champoux</li>
<li>2012-12-16: <a href="https://perladvent.org/2012/2012-12-16.html">Creating Your Own Perl</a> by Toby Inkster</li>
<li>2012-12-20: <a href="https://perladvent.org/2012/2012-12-20.html">Better Testing</a> by Jesse Luehrs</li>
<li>2012-12-24: <a href="https://perladvent.org/2012/2012-12-24.html">Have REST-ful Holidays</a> by Chris Prather</li>
<li>2013-12-03: <a href="https://perladvent.org/2013/2013-12-03.html">Swarm your webserver</a> by Arthur Axel "fREW" Schmidt</li>
<li>2013-12-11: <a href="https://perladvent.org/2013/2013-12-11.html">Toystore Story</a> by Yanick Champoux</li>
<li>2013-12-16: <a href="https://perladvent.org/2013/2013-12-16.html">Advent-based Programming</a> by Yanick Champoux</li>
<li>2013-12-19: <a href="https://perladvent.org/2013/2013-12-19.html">More Moose, More Discipline</a> by Ricardo Signes</li>
<li>2014-12-11: <a href="https://perladvent.org/2014/2014-12-11.html">A Tiny But Powerful Type System</a> by Mark Fowler</li>
<li>2014-12-17: <a href="https://perladvent.org/2014/2014-12-17.html">Optional tests for optional requirements</a> by Neil Bowers</li>
<li>2014-12-22: <a href="https://perladvent.org/2014/2014-12-22.html">A Holiday PAPR-ation</a> by John SJ Anderson</li>
<li>2015-12-03: <a href="https://perladvent.org/2015/2015-12-03.html">Winter Platypus</a> by Graham Ollis</li>
<li>2015-12-10: <a href="https://perladvent.org/2015/2015-12-10.html">Just What Are You Installing Now?</a> by Mark Fowler</li>
<li>2015-12-12: <a href="https://perladvent.org/2015/2015-12-12.html">Configuration Station</a> by Arthur Axel "fREW" Schmidt</li>
<li>2015-12-16: <a href="https://perladvent.org/2015/2015-12-16.html">Building Santa's Naughty and Nice List with Stepford</a> by Dave Rolsky</li>
<li>2016-12-01: <a href="https://perladvent.org/2016/2016-12-01.html">Graphing Moose Classes Automatically</a> by Mark Fowler</li>
<li>2016-12-06: <a href="https://perladvent.org/2016/2016-12-06.html">Help Santa Klaus Reward Only Nice Children</a> by Jerome Eteve</li>
<li>2016-12-11: <a href="https://perladvent.org/2016/2016-12-11.html">REST-oring Christmas Tranquility</a> by Chris Prather</li>
<li>2016-12-14: <a href="https://perladvent.org/2016/2016-12-14.html">Using PPI for static analysis</a> by Nicolas R.</li>
<li>2016-12-17: <a href="https://perladvent.org/2016/2016-12-17.html">Writing command line tools made easy</a> by Tina Müller</li>
<li>2017-12-03: <a href="https://perladvent.org/2017/2017-12-03.html">Context Matters</a> by Mark Fowler</li>
<li>2017-12-14: <a href="https://perladvent.org/2017/2017-12-14.html">Prereqing around the Christmas Tree</a> by Mark Fowler</li>
<li>2017-12-16: <a href="https://perladvent.org/2017/2017-12-16.html">For Elves, Shorter is Better</a> by Mark Fowler</li>
<li>2017-12-17: <a href="https://perladvent.org/2017/2017-12-17.html">Making a constructor argument list, checking it twice.</a> by Mark Fowler</li>
<li>2017-12-18: <a href="https://perladvent.org/2017/2017-12-18.html">Project Multipli-sleigh-ion</a> by Mark Fowler</li>
<li>2017-12-19: <a href="https://perladvent.org/2017/2017-12-19.html">Maybe not</a> by Mark Fowler</li>
<li>2017-12-20: <a href="https://perladvent.org/2017/2017-12-20.html">Reindeer</a> by Mark Fowler</li>
<li>2017-12-23: <a href="https://perladvent.org/2017/2017-12-23.html">Speedy Validation</a> by Mark Fowler</li>
<li>2017-12-25: <a href="https://perladvent.org/2017/2017-12-25.html">Merry Christmas!</a> by Mark Fowler</li>
<li>2018-12-11: <a href="https://perladvent.org/2018/2018-12-11.html">Mu</a> by Mark Fowler</li>
<li>2018-12-12: <a href="https://perladvent.org/2018/2018-12-12.html">Growing Christmas Trees</a> by Dave Cross</li>
<li>2019-12-07: <a href="https://perladvent.org/2019/2019-12-07.html">Show Me Mo'</a> by Mark Fowler</li>
<li>2019-12-21: <a href="https://perladvent.org/2019/2019-12-21.html">Test2: Test Harder (but easier)</a> by Mark Fowler</li>
<li>2019-12-23: <a href="https://perladvent.org/2019/2019-12-23.html">Testing our Impatience</a> by Mark Fowler</li>
<li>2020-12-04: <a href="https://perladvent.org/2020/2020-12-04.html">Building Santa's Naughty and Nice List with Stepford</a> by Dave Rolsky</li>
<li>2020-12-09: <a href="https://perladvent.org/2020/2020-12-09.html">Speedy Validation</a> by Mark Fowler</li>
<li>2020-12-13: <a href="https://perladvent.org/2020/2020-12-13.html">Growing Christmas Trees</a> by Dave Cross</li>
</ul>

<p>And if you'd like to find your own list of articles for another module, here's the code I used.</p>

<pre><code>use strict;
use warnings;
use open qw/ :std :utf8 /;
use Mojo::UserAgent;

my $ua = Mojo::UserAgent-&gt;new;

foreach my $year (2011 .. 2020) {
  foreach my $day (1 .. 25) {

    my $url = sprintf 'https://perladvent.org/%s/%s-12-%02d.html',
      $year, $year, $day;
    my $res = $ua-&gt;get($url)-&gt;result;
    next unless $res-&gt;is_success;

    my $dom = $res-&gt;dom;
    next unless $dom-&gt;all_text =~ m/Moose/;

    my $title = $dom-&gt;at('h1.title')-&gt;text;
    (my $author) = $dom-&gt;at('div#author')
      -&gt;text =~ m/:\s+(.+)\s+[(&lt;]/;

    printf "- %d-12-%02d: [%s](%s) by %s\n", 
      $year, $day, $title, $url, $author;
  }
}
</code></pre>

<p>I would also like to take this opportunity to thank Mark Fowler for running the Perl Advent Calendar since the year 2000. He has managed to convince people to blog for this project almost every year, and it is an invaluable resource. I had the pleasure of meeting Mark at the Perl Conference in Glasgow a few years back, where he gave <a href="https://www.youtube.com/watch?v=vSAzNMJM9-o">a talk about the project</a>, and also encouraged people to contribute articles. Last year there sadly was no advent calendar. I think as a community we should come together and help Mark to make this happen again this year. I will offer to write an article, and I encourage all of you (well, at least 24 others) to do this as well!</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7297912949797467729</id>
    <published>2022-04-09T14:34:00.000+02:00</published>
    <updated>2022-04-09T14:34:27.534+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxxvii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2022-04-02&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.17&lt;/strong&gt; on 2022-04-07&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 3.16 was 5 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.103' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.103&lt;/strong&gt; on 2022-04-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.102 was 1 year, 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.62&lt;/strong&gt; on 2022-04-05&lt;/li&gt;  &lt;li&gt;Votes: 154&lt;/li&gt;  &lt;li&gt;Previous version: 6.61 was 2 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.64' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.64&lt;/strong&gt; on 2022-04-02&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.63 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.64' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.64&lt;/strong&gt; on 2022-04-09&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.63 was 6 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9510' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9510&lt;/strong&gt; on 2022-04-05&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.9509 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.38&lt;/strong&gt; on 2022-04-03&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.37 was 1 year, 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000124' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000124&lt;/strong&gt; on 2022-04-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.000114 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7297912949797467729/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/04/ccclxxxvii-9-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7297912949797467729"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7297912949797467729"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/04/ccclxxxvii-9-great-cpan-modules.html" title="(ccclxxxvii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6614391140337537624</id>
    <published>2022-04-09T14:31:00.002+02:00</published>
    <updated>2022-04-09T14:31:54.759+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(di) metacpan weekly report - Object::Pad</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 56&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/04/09 12:31:31 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Inabajun::Utils" target="_blank"&gt;Acme::Inabajun::Utils&lt;/a&gt; - The great new Acme::Inabajun::Utils!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Test::Dummy::Perl5::Make::CompilationFails" target="_blank"&gt;CPAN::Test::Dummy::Perl5::Make::CompilationFails&lt;/a&gt; - Expose broken cpantester configurations&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT::Tool::Object::Pad" target="_blank"&gt;Devel::MAT::Tool::Object::Pad&lt;/a&gt; - extend Devel::MAT to analyse Object::Pad-based programs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::PL2Bat" target="_blank"&gt;ExtUtils::PL2Bat&lt;/a&gt; - Batch file creation to run perl scripts on Windows&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CSPHeader" target="_blank"&gt;HTTP::CSPHeader&lt;/a&gt; - manage dynamic content security policy headers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JavaScript::QuickJS" target="_blank"&gt;JavaScript::QuickJS&lt;/a&gt; - Run JavaScript via QuickJS in Perl&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Combinatorics" target="_blank"&gt;Algorithm::Combinatorics&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Convert::ASN1" target="_blank"&gt;Convert::ASN1&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/cPanel::PublicAPI" target="_blank"&gt;cPanel::PublicAPI&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Debugger" target="_blank"&gt;Dancer2::Debugger&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::EDI::X12" target="_blank"&gt;Data::EDI::X12&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Schema::ResultSetNames" target="_blank"&gt;DBIx::Class::Schema::ResultSetNames&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Milla" target="_blank"&gt;Dist::Milla&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Valid" target="_blank"&gt;Email::Valid&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Share" target="_blank"&gt;File::Share&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FormValidator::Lite" target="_blank"&gt;FormValidator::Lite&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gzip::Faster" target="_blank"&gt;Gzip::Faster&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::CPP" target="_blank"&gt;Inline::CPP&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=154)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::IMAPClient" target="_blank"&gt;Mail::IMAPClient&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Random::ISAAC" target="_blank"&gt;Math::Random::ISAAC&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Random::ISAAC::XS" target="_blank"&gt;Math::Random::ISAAC::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=285)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::clean" target="_blank"&gt;namespace::clean&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Drive::Simple" target="_blank"&gt;Net::Google::Drive::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SNMP" target="_blank"&gt;Net::SNMP&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+2=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Prefork" target="_blank"&gt;Parallel::Prefork&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::Validate" target="_blank"&gt;Params::Validate&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::LinearAlgebra" target="_blank"&gt;PDL::LinearAlgebra&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=117)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Checker" target="_blank"&gt;Pod::Checker&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Parser" target="_blank"&gt;Pod::Parser&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=79)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::Scalar" target="_blank"&gt;Set::Scalar&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Util" target="_blank"&gt;String::Util&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Harness" target="_blank"&gt;Test2::Harness&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mojo::Role::TestDeep" target="_blank"&gt;Test::Mojo::Role::TestDeep&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=128)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6614391140337537624/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/04/di-metacpan-weekly-report-objectpad.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6614391140337537624"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6614391140337537624"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/04/di-metacpan-weekly-report-objectpad.html" title="(di) metacpan weekly report - Object::Pad"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/04/08/list-of-new-cpan-distributions-mar-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-MailboxOrg">API-MailboxOrg</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.0.0</td>
<td>1.0.2</td>
<td>Perl library to work with the API for the Mailbox.org API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-SQLite">Acme-CPANModules-SQLite</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-7zip">Alien-7zip</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Find or build 7-Zip</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SWIG4">Alien-SWIG4</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.04</td>
<td>0.04</td>
<td>Find or build SWIG v4 C/C++ interface generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-patchelf">Alien-patchelf</a></td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Alien package for the patchelf utility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-vcardtidy">App-vcardtidy</a></td>
<td><a href="https://metacpan.org/author/MLAWREN">MLAWREN</a></td>
<td>v1.0.0_1</td>
<td>v1.0.0_3</td>
<td>tidy up VCARD files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Lingua-Word-EN-Enable">ArrayData-Lingua-Word-EN-Enable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.003</td>
<td>The Enable word list (English)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Lingua-Word-EN-Wordle">ArrayData-Lingua-Word-EN-Wordle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220306.0.0</td>
<td>20220306.0.1</td>
<td>Wordle words (English)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Lingua-Word-ID-Wordle">ArrayData-Lingua-Word-ID-Wordle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220306.0.0</td>
<td>20220306.0.1</td>
<td>Alias for ArrayData::Lingua::Word::ID::Katla</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Class-Generic">Class-Generic</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Class Generic</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Class">Class</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v1.1.2</td>
<td>v1.1.4</td>
<td>A Generic Object Class to Inherit From</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-CPace">Crypt-CPace</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.012</td>
<td>CPace protocol</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-OpenSSL-EVP-MD">Crypt-OpenSSL-EVP-MD</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>OpenSSL EVP_MD</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-OpenSSL-Hash2Curve">Crypt-OpenSSL-Hash2Curve</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.03</td>
<td>OpenSSL hash to curve</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-FormValidator">Dancer2-Plugin-FormValidator</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>0.01</td>
<td>0.50</td>
<td>Dancer2 validation framework.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Dumper-Interp">Data-Dumper-Interp</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>2.20</td>
<td>2.27</td>
<td>Data::Dumper optimized for humans, with interpolation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Password-Top10000">Data-Password-Top10000</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Check if a given string is in the Top 10000 list of common passwords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dipki">Dipki</a></td>
<td><a href="https://metacpan.org/author/DAVIDI">DAVIDI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl extension for CryptoSys PKI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-AJNN">Dist-Zilla-PluginBundle-Author-AJNN</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Dist::Zilla configuration the way AJNN does it</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Process">File-Process</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>0.01</td>
<td>0.05</td>
<td>File processing utiltiy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-LatLon2Place">Geo-LatLon2Place</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>0.01</td>
<td>1.0</td>
<td>convert latitude and longitude to nearest place</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Gibbs">Gibbs</a></td>
<td><a href="https://metacpan.org/author/MHSEABOLT">MHSEABOLT</a></td>
<td>v1.0.0</td>
<td>v1.1.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GitHub-RSS">GitHub-RSS</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.02</td>
<td>0.03</td>
<td>collect data from Github.com for feeding into RSS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hash-Typed">Hash-Typed</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Ordered typed tied hashes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-DecodeQR-WeChat">Image-DecodeQR-WeChat</a></td>
<td><a href="https://metacpan.org/author/BLIAKO">BLIAKO</a></td>
<td>0.01</td>
<td>0.9</td>
<td>Decode QR code(s) from images using the OpenCV/WeChat library via XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JavaScript-QuickJS">JavaScript-QuickJS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.05</td>
<td>Run JavaScript via QuickJS in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Logic-Expr">Logic-Expr</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.02</td>
<td>logical expression parsing and related routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mac-Finder-Tags">Mac-Finder-Tags</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Access macOS file tags (aka Finder labels)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Server-DaemonControl">Mojo-Server-DaemonControl</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>0.03</td>
<td>A Mojolicious daemon manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-WebService-lxd">Net-Async-WebService-lxd</a></td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>REST client (asynchronous) for lxd Linux containers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Twitch-API">Net-Twitch-API</a></td>
<td><a href="https://metacpan.org/author/CLIPLAND">CLIPLAND</a></td>
<td>0.10</td>
<td>0.11</td>
<td>Helper methods for Twitch's "new" helix API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Server">Perl-Server</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A simple Perl server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-ChangeManagement">RT-Extension-ChangeManagement</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>RT-Extension-ChangeManagement Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Keyword-Inplace">Syntax-Keyword-Inplace</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>syntax for making inplace changes to variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tesla-API">Tesla-API</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>0.09</td>
<td>Interface to Tesla's API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tesla-Vehicle">Tesla-Vehicle</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>0.07</td>
<td>Access information and command Tesla automobiles via the API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-File-Cmp">Test-File-Cmp</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Test routine for file comparison independent of CRLF or LF line endings.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test2-Tools-DOM">Test2-Tools-DOM</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Tools to test HTML/XML-based DOM representations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-CSV_XS-Backslash">Text-CSV_XS-Backslash</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Set Text::CSV_XS default options to use backslash as escape character</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-NSR">Text-NSR</a></td>
<td><a href="https://metacpan.org/author/CLIPLAND">CLIPLAND</a></td>
<td>0.10</td>
<td>0.10</td>
<td>Read "newline separated records" (NSR) structured text files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Unicode-ICU">Unicode-ICU</a></td>
<td><a href="https://metacpan.org/author/CPANEL">CPANEL</a></td>
<td>0.03_01</td>
<td>0.06</td>
<td>ICU in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-Twitch">WWW-Twitch</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>automate parts of Twitch without the need for an API key</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-SmartRow">WebService-SmartRow</a></td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>0.001</td>
<td>0.006</td>
<td>Connect and get data from SmartRow API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-EN-Wordle">WordList-EN-Wordle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>English word list for Wordle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-ID-Wordle">WordList-ID-Wordle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alias for WordList::ID::Katla</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordListRole-Source-ArrayData">WordListRole-Source-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Role to use an ArrayData::* module as wordlist source</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-Enc">XML-Enc</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>A toolkit to help encrypt and decrypt XML Digital Signatures.</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>47</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>31</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>8</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/CLIPLAND">CLIPLAND</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/MLAWREN">MLAWREN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CPANEL">CPANEL</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/BLIAKO">BLIAKO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DAVIDI">DAVIDI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/MHSEABOLT">MHSEABOLT</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-MailboxOrg PERLSRVDE 1.0.0 1.0.2 Perl library to work with the API for the Mailbox.org API Acme-CPANModules-SQLite PERLANCAR 0.001 0.001 List of modules related to SQLite Alien-7zip ZMUGHAL 0.01 0.01 Find or build 7-Zip Alien-SWIG4 ZMUGHAL 0.04 0.04 Find or build SWIG v4 C/C++ interface generator Alien-patchelf SLAFFAN 0.01 0.04 Alien … <a href="https://perlancar.wordpress.com/2022/04/08/list-of-new-cpan-distributions-mar-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1986</id>
    <published>2022-04-08T05:31:57Z</published>
    <updated>2022-04-08T05:31:57Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/04/08/list-of-new-cpan-distributions-feb-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Eulerian">API-Eulerian</a></td>
<td><a href="https://metacpan.org/author/MJONDET">MJONDET</a></td>
<td>v0.1</td>
<td>v0.1</td>
<td>Sample EDW script for querying through REST and get a CSV file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Foozilla">Acme-CPANModules-Foozilla</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Ideas for module/script/project name using 'zilla'</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Parse-HumanDate">Acme-CPANModules-Parse-HumanDate</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that parse human date/time expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-frame">App-Greple-frame</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Greple frame output module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-wordle">App-Greple-wordle</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.10</td>
<td>wordle module for greple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ISBN-Format">App-ISBN-Format</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for ISBN formatting.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-easyDifferentialGeneCoexpressionWrapper">App-easyDifferentialGeneCoexpressionWrapper</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
<td>1</td>
<td>easyDifferentialGeneCoexpressionWrapper is a wrapper program for the easyDifferentialGeneCoexpression.r R script (developed by Davide Chicco).</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-numseq">App-numseq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Generate some number sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-perlvars">App-perlvars</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>0.000004</td>
<td>CLI tool to detect unused variables in Perl modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-timestamp">App-timestamp</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.001</td>
<td>0.002</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Word-EN-Enable">ArrayData-Word-EN-Enable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Indonesian words from Kamus Besar Bahasa Indonesia</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Authen-WebAuthn">Authen-WebAuthn</a></td>
<td><a href="https://metacpan.org/author/MBESSON">MBESSON</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A library to add Web Authentication support to server applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Begin-Eval-Env">Begin-Eval-Env</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Take code from environment variable(s), then eval them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Begin-Eval-FirstArg">Begin-Eval-FirstArg</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Take code from first command-line argument, then eval it</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-ArrayData">Bencher-Scenarios-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios related to ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Carp-Patch-Verbose">Carp-Patch-Verbose</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Set some Carp variables so stack trace is more verbose</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-DPath-Flatten">Data-DPath-Flatten</a></td>
<td><a href="https://metacpan.org/author/RBWOHLFAR">RBWOHLFAR</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Convert complex data structure into key/value pairs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-PatchPerl-Plugin-Darwin-getcwd">Devel-PatchPerl-Plugin-Darwin-getcwd</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>0.003</td>
<td>a workaround for getcwd in macOS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Etcd-Lock">Etcd-Lock</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Lock based on etcd</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-Fast">File-Find-Fast</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.2.1</td>
<td>v0.2.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Genealogy-AncestorChart">Genealogy-AncestorChart</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>create a table of genealogical ancestors.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-debug">Getopt-EX-debug</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>1.01</td>
<td>Getopt::EX debug module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Git-Lint">Git-Lint</a></td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>0.008</td>
<td>0.014</td>
<td>lint git commits and messages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Groonga-HTTP">Groonga-HTTP</a></td>
<td><a href="https://metacpan.org/author/HORIMOTO">HORIMOTO</a></td>
<td>0.07</td>
<td>0.07</td>
<td>Perl module for sending HTTP requests to Groonga.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTTP-UserAgentClientHints">HTTP-UserAgentClientHints</a></td>
<td><a href="https://metacpan.org/author/BAYASHI">BAYASHI</a></td>
<td>0.01</td>
<td>0.04</td>
<td>To Handle User Agent Client Hints</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Formatter-Align">JSON-Formatter-Align</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Formatting for JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL-Syntax">Lang-HL-Syntax</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.08</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-FD-Mem">Linux-FD-Mem</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>memory file descriptors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-ger-Level-FromVar">Log-ger-Level-FromVar</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Set log level from some variable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Sequence-DeBruijn">Math-Sequence-DeBruijn</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2022021301</td>
<td>2022021301</td>
<td>Abstract</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-OpenAPI-Modern">Mojolicious-Plugin-OpenAPI-Modern</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Mojolicious plugin providing access to an OpenAPI document and parser</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Narrator">Narrator</a></td>
<td><a href="https://metacpan.org/author/ESALEBU">ESALEBU</a></td>
<td>v0.0.1.2</td>
<td>v0.0.1.4</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Narrator_0-0-1">Narrator_0-0-1</a></td>
<td><a href="https://metacpan.org/author/ESALEBU">ESALEBU</a></td>
<td>5</td>
<td>5</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODS">ODS</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Object Data Store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-FieldAttr-Final">Object-Pad-FieldAttr-Final</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.05</td>
<td>0.05</td>
<td>declare Object::Pad fields readonly after construction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-FieldAttr-Isa">Object-Pad-FieldAttr-Isa</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.03</td>
<td>0.03</td>
<td>apply class type constraints to Object::Pad fields</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-FieldAttr-LazyInit">Object-Pad-FieldAttr-LazyInit</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.05</td>
<td>0.05</td>
<td>lazily initialise Object::Pad fields at first read</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-FieldAttr-Trigger">Object-Pad-FieldAttr-Trigger</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.06</td>
<td>0.06</td>
<td>invoke an instance method after a :writer accessor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAPI-Modern">OpenAPI-Modern</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.022</td>
<td>0.025</td>
<td>Validate HTTP requests and responses against an OpenAPI document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PINE64-PCF8574">PINE64-PCF8574</a></td>
<td><a href="https://metacpan.org/author/CREDO">CREDO</a></td>
<td>0.1</td>
<td>0.101</td>
<td>The great new PINE64::PCF8574!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/POD-Generate">POD-Generate</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>programmatically generate plain old documentation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parser-FIT">Parser-FIT</a></td>
<td><a href="https://metacpan.org/author/GHANDI">GHANDI</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A parser for garmin FIT (Flexible and Interoperable Data Transfer) files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Phone-Valid-International-Loose">Phone-Valid-International-Loose</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.03</td>
<td>loosely validate international phone numbers via a regex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Component-Tags-HTML">Plack-Component-Tags-HTML</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Plack component for Tags with HTML output.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-ImportCustomFieldValues">RT-Extension-ImportCustomFieldValues</a></td>
<td><a href="https://metacpan.org/author/ELACOUR">ELACOUR</a></td>
<td>0.05</td>
<td>0.05</td>
<td>Allow to import customfield values from CSV file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Sudoku">Regexp-Sudoku</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2022022401</td>
<td>2022030401</td>
<td>Solve Sudokus with regular expressions.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Repo-RPM">Repo-RPM</a></td>
<td><a href="https://metacpan.org/author/KXRCL">KXRCL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>perl module to create RPMs requires tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-JSON">SPVM-JSON</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>JSON serializing/deserializing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-Abstract-Plugin-TableAlias">SQL-Abstract-Plugin-TableAlias</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.03</td>
<td>automagical table aliasing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Slovo-Plugin-Prodan">Slovo-Plugin-Prodan</a></td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Make and manage sales in your Slovo-based site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Remove">Sub-Remove</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Remove a subroutine from the symbol table and its associated CODE glob</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Perl-CPAN-Release-Static-2022">TableData-Perl-CPAN-Release-Static-2022</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220218.0</td>
<td>20220218.0</td>
<td>CPAN releases for the year 2022</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Telebot">Telebot</a></td>
<td><a href="https://metacpan.org/author/LIOL">LIOL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The Telebot command system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Template-Plex">Template-Plex</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Templates in (P)erl using (Lex)ical Aliasing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UniEvent-WebSocket">UniEvent-WebSocket</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>Extremely efficient asynchronous WebSocket Client and Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-UK-Parliament">WebService-UK-Parliament</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Query the UK Parliament API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAML-As-Parsed">YAML-As-Parsed</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Read/Write YAML predictably</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAOO">YAOO</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.09</td>
<td>Yet Another Object Orientation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mro-EVERY">mro-EVERY</a></td>
<td><a href="https://metacpan.org/author/LEMBARK">LEMBARK</a></td>
<td>v0.1.0</td>
<td>v0.1.4</td>
<td>EVERY &amp; EVERY::LAST pseudo-packages using mro.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/name">name</a></td>
<td><a href="https://metacpan.org/author/GRAF">GRAF</a></td>
<td>v0.0.0</td>
<td>v0.0.1</td>
<td/>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>60</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>35</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ESALEBU">ESALEBU</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/LIOL">LIOL</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LEMBARK">LEMBARK</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/MBESSON">MBESSON</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/ELACOUR">ELACOUR</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/RBWOHLFAR">RBWOHLFAR</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GRAF">GRAF</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MJONDET">MJONDET</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/KXRCL">KXRCL</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/CREDO">CREDO</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HORIMOTO">HORIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/BAYASHI">BAYASHI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/GHANDI">GHANDI</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Eulerian MJONDET v0.1 v0.1 Sample EDW script for querying through REST and get a CSV file Acme-CPANModules-Foozilla PERLANCAR 0.001 0.001 Ideas for module/script/project name using 'zilla' Acme-CPANModules-Parse-HumanDate PERLANCAR 0.001 0.001 Modules that parse human date/time expression App-Greple-frame UTASHIRO 0.01 0.02 Greple frame output module App-Greple-wordle UTASHIRO 0.01 0.10 wordle module … <a href="https://perlancar.wordpress.com/2022/04/08/list-of-new-cpan-distributions-feb-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1984</id>
    <published>2022-04-08T05:25:11Z</published>
    <updated>2022-04-08T05:25:11Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 159: Farey Sequence and Möbius Number</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/04/perl-weekly-challenge-159-farey-sequence-and-mobius-number.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10754</id>
    <published>2022-04-07T14:49:07Z</published>
    <updated>2022-04-07T14:54:22Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 159 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-159/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 10, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Farey Sequence</h2>

<p><em>Write a script to compute Farey Sequence of the order <code>$n</code>.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 5
Output: 0/1, 1/5, 1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 1/1.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 7
Output: 0/1, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 2/5, 3/7, 1/2, 4/7, 3/5, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 1/1.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 4
Output: 0/1, 1/4, 1/3, 1/2, 2/3, 3/4, 1/1.
</code></pre>

<p>The Farey sequence of order <em>n</em> is the sequence of completely reduced fractions, either between 0 and 1, or without this restriction, which when in lowest terms have denominators less than or equal to n, arranged in order of increasing size. See this <a href="https://en.wikipedia.org/wiki/Farey_sequence">Wikipredia page</a> for additional information.</p>

<p>With the restricted definition, each Farey sequence starts with the value 0, denoted by the fraction 0/1, and ends with the value 1, denoted by the fraction 1/1.</p>

<h3>Farey Sequence in Raku</h3>

<p>In Raku, the <a href="https://docs.raku.org/type/Rat">Rat</a> rational data type stores a rational number as a pair of a numerator and denominator. This makes things quite simple, since the same object can be used both for numeric comparison and for displaying it as a completely reduced fraction (using the <code>numerator</code> and <code>denominator</code> methods). We use two nested <code>for</code> loops to generate all possible fractions, store them in a <code>Set</code> to remove duplicates and sort them.</p>

<pre><code>sub farey (Int $n) {
    my @out;
    for 1..$n -&gt; $den {
        for 0..$den -&gt; $num {
            push @out, $num/$den;
        }
    }
    return @out.Set;
}
for 3..7 -&gt; $test {
    say "$test -&gt; ", map { .numerator ~ "/" ~ .denominator },  sort farey($test).keys;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./farey.raku
3 -&gt; (0/1 1/3 1/2 2/3 1/1)
4 -&gt; (0/1 1/4 1/3 1/2 2/3 3/4 1/1)
5 -&gt; (0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1)
6 -&gt; (0/1 1/6 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 5/6 1/1)
7 -&gt; (0/1 1/7 1/6 1/5 1/4 2/7 1/3 2/5 3/7 1/2 4/7 3/5 2/3 5/7 3/4 4/5 5/6 6/7 1/1)
</code></pre>

<h3>Farey Sequence in Perl</h3>

<p>In Perl, we simulate Raku&#8217;s <code>Rat</code> data type by using anonymous arrays containing a numerator and a denominator. For sorting or storing in a hash (in order to remove duplicates), we use the numerical value of the fraction, whereas we use a string for output.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub farey {
    my $n = shift;
    my (@out, %seen);
    for my $den (1..$n) {
        for my $num (0..$den) {
            next if exists $seen{$num/$den};
            push @out, [$num, $den];
            $seen{$num/$den} = 1;
        }
    }
    return @out;
}
for my $test (3..7) {
    my @result = sort { $a-&gt;[0]/$a-&gt;[1] &lt;=&gt; $b-&gt;[0]/$b-&gt;[1] } farey($test);
    print "$test: ";
    print "$_-&gt;[0]/$_-&gt;[1] " for @result;
    say "";

}
</code></pre>

<p>This program displays the following output.</p>

<pre><code>$ perl ./farey.pl
3: 0/1 1/3 1/2 2/3 1/1
4: 0/1 1/4 1/3 1/2 2/3 3/4 1/1
5: 0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1
6: 0/1 1/6 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 5/6 1/1
7: 0/1 1/7 1/6 1/5 1/4 2/7 1/3 2/5 3/7 1/2 4/7 3/5 2/3 5/7 3/4 4/5 5/6 6/7 1/1
</code></pre>

<h2>Task 2: Möbius Number</h2>

<p><em>You are given a positive number <code>$n</code>.</em></p>

<p><em>Write a script to generate the Moebius Number for the given number. Please refer to Wikipedia <a href="https://en.wikipedia.org/wiki/M%C3%B6bius_function">page</a> for more informations.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 5
Output: -1
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 10
Output: 1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 20
Output: 0
</code></pre>

<p>For any positive integer <em>n</em>, the Möbius Function <em>μ</em> has values in {−1, 0, 1} depending on the factorization of <em>n</em> into prime factors:</p>

<ul>
<li><p><em>μ(n)</em> = +1 if <em>n</em> is a square-free positive integer with an even number of prime factors.</p></li>
<li><p><em>μ(n)</em> = −1 if <em>n</em> is a square-free positive integer with an odd number of prime factors.</p></li>
<li><p><em>μ(n)</em> = 0 if <em>n</em> has a squared prime factor.</p></li>
</ul>

<h3>Moebius Number in Raku</h3>

<p>The <code>Möbius</code> subroutine performs the factorization of its input integer. If any of the exponents is larger than 1, then the input number is not square-free and the subroutine returns 0. Otherwise, the subroutine returns 1 if the number of prime factors is even and -1 if it is odd.</p>

<pre><code>sub möbius ($n is copy) {
    my %factors;
    for 2..$n -&gt; $i {
        while  $n %% $i {
            %factors{$i}++;
            $n /= $i;
        }
    }
    return 0 if %factors.values.any &gt; 1;
    return 1 if (%factors.keys.elems %% 2);
    return -1;
}
say "$_: ", möbius $_ for 1..20;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./moebius.raku
1: 1
2: -1
3: -1
4: 0
5: -1
6: 1
7: -1
8: 0
9: 0
10: 1
11: -1
12: 0
13: -1
14: 1
15: 1
16: 0
17: -1
18: 0
19: -1
20: 0
</code></pre>

<h3>Moebius Number in Perl</h3>

<p>This is a port to Perl of the Raku program above: the <code>Moebius</code> subroutine performs the factorization of its input integer. If any of the exponents is larger than 1, then the input number is not square-free and the subroutine returns 0. Otherwise, the subroutine returns 1 if the number of prime factors is even and -1 if it is odd.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub moebius {
    my $n = shift;
    my %factors;
    for my $i (2..$n) {
        while  ($n % $i == 0) {
            $factors{$i}++;
            $n /= $i;
        }
    }
    return 0 if grep $_ &gt; 1, values %factors;
    return 1 unless (scalar keys %factors) % 2;
    return -1;
}
say "$_: ", moebius $_ for 1..20;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./moebius.pl
1: 1
2: -1
3: -1
4: 0
5: -1
6: 1
7: -1
8: 0
9: 0
10: 1
11: -1
12: 0
13: -1
14: 1
15: 1
16: 0
17: -1
18: 0
19: -1
20: 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 17, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The ordering operators</title>
    <link rel="alternate" href="http://blogs.perl.org/users/aristotle/2022/04/ordering-ops.html"/>
    <id>tag:blogs.perl.org,2022:/users/aristotle//15.10753</id>
    <published>2022-04-06T17:46:49Z</published>
    <updated>2022-04-06T17:45:08Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Crib Sheet" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/aristotle/">
        <![CDATA[<p>Perl has two operators, <code>cmp</code> and <code>&lt;=&gt;</code>, which are basically never seen outside of <code>sort</code> blocks.</p>

<p>That doesn’t mean you can’t use them elsewhere, though. Certainly <code>sort</code> and these operators were designed to work seamlessly together but there isn’t anything <code>sort</code>-specific about the operators per se, and in some contexts they can be the most appropriate solution.</p>

<p>An example would be some code that used to go (almost exactly) like this:</p>

<pre><code>my ( $maj, $min, $rel ) = split /[.]/, $version;
my $version_ok = $maj &gt; 3 || (
    $maj == 3 &amp;&amp; ($min &gt; 6 || (
        $min == 6 &amp;&amp; $rel &gt;= 8
    ))
);
</code></pre>

<p>Basically, this is a check that the version number of something with a three-component dotted version is at least 3.6.8. As expressed in the code, for both the major and minor version there are two cases where they might be accepted: if the component is above a given threshold then the whole version is acceptable with no further questions, but if equal to that threshold, the version might still be acceptable depending on the value(s) of the lesser component(s). At the same time, if the value is below that threshold, the version is unacceptable, no further questions necessary. So there are three cases, two of which can succeed, and two of which require no further checks.</p>

<p>This is exactly what the <code>&lt;=&gt;</code> operator offers: if you ask <code>$maj &lt;=&gt; 3</code> you will get 1 if the major version is above 3 (immediate success), -1 if it is below 3 (immediate failure), and 0 if it is equal to 3 (success to be determined from the lesser components). Because 0 is false, you can chain such comparisons with logical-or, until one of them gives an immediate success/fail – as of course we are used to doing in <code>sort</code> blocks.</p>

<p>And so this is what the code looks like now:</p>

<pre><code>my ( $maj, $min, $rel ) = split /[.]/, $version;
my $version_ok = ( $maj &lt;=&gt; 3 || $min &lt;=&gt; 6 || $rel &lt;=&gt; 8 ) != -1;
</code></pre>

<p>The expression in parentheses has each component of the actual version on the left and the respective component of version 3.6.8 on the right, and will stop at the first comparison that gives a definite answer. The final <code>!= -1</code> then checks that the answer was not “the right side is greater” at the final comparison – i.e. “the given version is not below version 3.6.8”.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Bericht Deutscher Perl/Raku-Workshop 2022</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-04-06-bericht-deutscher-perlraku-workshop-2022" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ende März fand in der 24. Deutsche Perl/Raku-Workshop statt. Nachdem im letzten Jahr die Veranstaltung auf Grund der Corona-Pandemie nur online stattfand, war in diesem Jahr ein Teil der Teilnehmer in Leipzig anwesend. Weitere Teilnehmer lauschten den Vorträgen im Live-Stream. Corona bzw. die Covid-19-Zertifikate waren Thema bei "domm", der gezeigt hat, wie er mit einer Perl-Anwendung die QR-Codes der Zertifikate validiert und geprüft hat.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-04-06-bericht-deutscher-perlraku-workshop-2022</id>
    <published>2022-04-06T10:00:00Z</published>
    <updated>2022-04-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>#558 - Perl Magic</title>
    <link rel="alternate" href="https://perlweekly.com/archive/558.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>I wish you all a very <strong>Happy Ramadan</strong>. May <strong>ALLAH s.w.t.</strong> bless us all in the holy month.</p>
<p>Have you seen any Perl code that surprised you recently?</p>
<p>I have, only recently, found out that braces become optional when calling a subroutine, depending on when you call the subroutine. If a subroutine is defined before you call it in a script, braces are optional. If you call the subroutine in a script <strong>before</strong> it is defined (which is perfectly acceptable too), then braces are a must.</p>
<p>How about this calling sub add() passing two scalar parameters? <strong>add my ($x, $y) = (2, 3);</strong></p>
<p>I also came across this <a href="https://www.olafalders.com/2022/03/30/making-dynamically-required-package-names-more-discoverable-in-perl">blog post</a> by <strong>Olaf Alders</strong> where he shares a very interesting use of <strong>'::'</strong> in package names.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/558.html</id>
    <published>2022-04-04T10:00:00Z</published>
    <updated>2022-04-04T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Pod2Slides Update: single page talk slides</title>
    <link href="http://domm.plix.at/perl/2022_03_pod2slides_update.html"/>
    <id>http://domm.plix.at/perl/2022_03_pod2slides_update.html</id>
    <updated>2022-03-31T22:40:04+00:00</updated>
    <category term="perl"/>
    <summary type="html">A common critique about slides to my talks is that they are rather annoying to read, because one has to page through the "presentation mode" by clicking next or hitting Enter a lot0.

Yesterday I ...</summary>
    <content type="html">&lt;p&gt;A common critique about &lt;a href="/talks.html"&gt;slides to my talks&lt;/a&gt; is that they are rather annoying to read, because one has to page through the "presentation mode" by clicking next or hitting &lt;code&gt;Enter&lt;/code&gt; &lt;strong&gt;a lot&lt;/strong&gt;&lt;sup class="footnote"&gt;&lt;a href="#fn0"&gt;0&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday I started to change this, and tonight I added some finishing touches like responsive &lt;span class="caps"&gt;HTML&lt;/span&gt;/CSS and an external &lt;span class="caps"&gt;CSS &lt;/span&gt;file. My &lt;a href="https://domm.plix.at/talks/docker_compose_for_complex_app.html"&gt;last&lt;/a&gt; &lt;a href="https://domm.plix.at/talks/koha.html"&gt;three&lt;/a&gt; &lt;a href="https://domm.plix.at/talks/qrona.html"&gt;talks&lt;/a&gt; are now converted to the new layout, the older ones will follow soon.&lt;/p&gt;

&lt;p&gt;You can get to the "single page" view by following the "All in one &lt;span class="caps"&gt;HTML&lt;/span&gt;"-Link. This page should also work ok-ish on small screen sizes (images are shrunk, and preformatted text (i.e. code samples) will auto-wrap on word boundaries). I've also fixed some weird &lt;span class="caps"&gt;HTML &lt;/span&gt;issues in the slideshow view, and generally updated the &lt;span class="caps"&gt;HTML &lt;/span&gt;and &lt;span class="caps"&gt;CSS &lt;/span&gt;to current (best?) practices.&lt;/p&gt;

&lt;h4&gt;Pod2Slides&lt;/h4&gt;

&lt;p&gt;For my &lt;a href="https://domm.plix.at/talks/dark_art_obfuscation.html"&gt;first talk&lt;/a&gt;, which I did 20 year ago&lt;sup class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;, I wrote a small script to convert &lt;a href="https://perldoc.perl.org/perlpod"&gt;&lt;span class="caps"&gt;POD&lt;/span&gt;&lt;/a&gt; to some &lt;span class="caps"&gt;HTML &lt;/span&gt;slides fitting my needs. This script later became &lt;a href="https://github.com/domm/Pod2Slides"&gt;Pod2Slides&lt;/a&gt;, which I have been using and tweaking ever since.&lt;/p&gt;

&lt;p&gt;One big benefit of using your own tool (as opposed to Powerpoint or similar) is that I can now just "recompile" my slides to an update format! I've added some nice&lt;sup class="footnote"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; and stupid&lt;sup class="footnote"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; features over the years and can very much recommend to (sometimes) reinvent the wheel!&lt;/p&gt;

&lt;h4&gt;Footnotes&lt;/h4&gt;

&lt;p class="footnote" id="fn0"&gt;&lt;sup&gt;0&lt;/sup&gt; Because I prefer to reveal each fact/sentence/piece of code as a go along. I don't like slides showing a lot of text and not changing for minutes. We're not using actual &lt;strong&gt;slides&lt;/strong&gt; anymore!&lt;/p&gt;

&lt;p class="footnote" id="fn1"&gt;&lt;sup&gt;1&lt;/sup&gt; Uff&lt;/p&gt;

&lt;p class="footnote" id="fn2"&gt;&lt;sup&gt;2&lt;/sup&gt; eg &lt;code&gt;include_and_run_code&lt;/code&gt;, which will include a code snippet into the slides, run the code, and include the output in the next slide.&lt;/p&gt;

&lt;p class="footnote" id="fn3"&gt;&lt;sup&gt;3&lt;/sup&gt; Post each new subslide (i.e. each sentence) to an &lt;span class="caps"&gt;IRC &lt;/span&gt;bot, so people can "watch" via &lt;span class="caps"&gt;IRC.&lt;/span&gt; Today I removed that "feature"...&lt;/p&gt;</content>
    <category term="~/bin"/>
  </entry>
  <entry>
    <title>#557 - Human languages</title>
    <link rel="alternate" href="https://perlweekly.com/archive/557.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>First of all, let me congratulate <b>Mohammad S. Anwar</b> for editing 100 issues of <a href="https://perlweekly.com/">Perl Weekly</a>. If you visit the main page of the website you will see a list of all editors, past and present, in the order they joined and with the number of issues they edited. Let me thank all of you!</p>
<p>Learning programming languages is not easy, but if you compare that to learning human languages you'll notice that it has a lot more difficulties. Human languages have much bigger vocabulary and much bigger grammar with lots of exceptions. This already makes it much harder to learn on, but in addition it is hard to get fast and cheap feedback. Something you are given by the compiler/interpreter of your language. You can even add more by writing your own tests and setting up a CI system. That's part of the value <a href="https://www.duolingo.com/">DuoLingo</a> provides. Fast and cheap feedback. However it is proprietary.  <a href="https://librelingo.app/">LibreLingo</a> is an open source alternative to which I started to contribute. The most fun part for me is actually trying to write a course: building a dictionary and writing sample sentences.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/557.html</id>
    <published>2022-03-28T10:00:00Z</published>
    <updated>2022-03-28T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Plackup reload  on Windows and Linux</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-03-28T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-plackup-reload"/>  <id>https://perlmaven.com/dancer2-plackup-reload</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#556 - Cucumber &amp; Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/556.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there.&lt;/p&gt;
&lt;p&gt;How do you test a &lt;strong&gt;Web API&lt;/strong&gt; using Perl?&lt;/p&gt;
&lt;p&gt;I am sure you have most likely used TDD to test your Web API. How about trying something new for a change?&lt;/p&gt;
&lt;p&gt;Something like BDD, Behaviour Driven Development. I came across BDD many years ago when my manager introduced the term to the team and gave us a short tutorial using Java. I was completely blown away by the idea itself. I never actually got the opportunity to use BDD in any of the Perl projects I worked in afterwards, unfortunately. Then few years later in 2018, I got the opportunity to attend the talk &lt;a href="https://act.yapc.eu/lpw2018/talk/7547"&gt;Behaviour Driven Development and Cucumber&lt;/a&gt; by &lt;strong&gt;Martin Berends&lt;/strong&gt; at the London Perl Workshop. After a quick search, I found a &lt;a href="https://www.youtube.com/watch?v=B6IsKr50wAE"&gt;video&lt;/a&gt; of the same talk. If you missed the talk then it is your chance now to watch the talk. If the video is not enough and you are looking for more. I would highly recommend the book &lt;a href="https://www.amazon.co.uk/dp/B084Z6GTKK"&gt;Cucumber &amp; Perl&lt;/a&gt; by &lt;strong&gt;John Davies&lt;/strong&gt;. It was published by &lt;a href="https://perlschool.com"&gt;Perl School&lt;/a&gt; publishing house run by &lt;strong&gt;Dave Cross&lt;/strong&gt;. If you are interested in complete tutorial then you should check out this &lt;a href="https://www.cognizantsoftvision.com/blog/how-to-test-web-apis-with-perl-and-cucumber"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Speaking of BDD, I came across the term "&lt;strong&gt;Extreme Programming (XP)&lt;/strong&gt;". TDD has been part of my day job most of the time without realising it being part of XP. I found this &lt;a href="https://www.extremeperl.org/bk/home"&gt;website&lt;/a&gt; showing &lt;strong&gt;Extreme Programming using Perl&lt;/strong&gt;. You can download the entire book in &lt;a href="https://www.extremeperl.org/f/extremeperl.pdf"&gt;pdf format&lt;/a&gt; for FREE. If you are new to &lt;strong&gt;Extreme Programming&lt;/strong&gt; then take a look at the &lt;a href="http://www.extremeprogramming.org"&gt;gentle introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;THe last couple of years have been very tough for most of us in the IT sector. Although we all have been adjusted to the new normal of work-from-home culture, it has still left some scars behind. Mental health is one such issue being discussed more frequently during this period. I have found a way to keep my mind busy when needed; reading books (mostly non-technical). Recently I found the quote &lt;strong&gt;"Lately my peace has been more important than proving my point."&lt;/strong&gt; on web that express my current mental state. How do you deal with your WFH blues?&lt;/p&gt;
&lt;p&gt;Last but not least, I have finally reached the 3 digits figure i.e. my &lt;strong&gt;100th edition&lt;/strong&gt; of the weekly newsletter. It took me nearly &lt;strong&gt;3 years&lt;/strong&gt; to get this far. I would like to take this opportunity to thank each and every readers of the weekly newsletter for the kind words and appreciations. I would also like to thank, &lt;strong&gt;Gabor Szabo&lt;/strong&gt; for being my guide and mentor, all these years.&lt;/p&gt;
&lt;p&gt;Enjoy the rest of the newsletter, stay safe and pray for world peace.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/556.html</id>
    <published>2022-03-21T10:00:00Z</published>
    <updated>2022-03-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Persnickety Pernicious and Weird</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/03/20#pwc156" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 10 Pernicious Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Math::Primality qw/is_prime/;

sub count_bits{
    my($n) = @_;
    my $total_count_set_bit = 0;
    while($n){
        my $b = $n &amp; 1;
        $total_count_set_bit++ if $b;
        $n = $n &gt;&gt; 1;
    }
    return $total_count_set_bit;
}

sub first_n_pernicious{
    my($n) = @_;
    my @pernicious;
    my $x = 1;
    do{
        my $set_bits = count_bits($x);
        push @pernicious, $x if is_prime($set_bits);
        $x++;
    }while(@pernicious &lt; $n);
    return @pernicious;
}

MAIN:{
    print join(", ", first_n_pernicious(10)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
3, 5, 6, 7, 9, 10, 11, 12, 13, 14
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Number Theory was one of my favorite classes as an undergraduate. This sort of challenge
is fun, especially if you dive into the background of these sequences and try to learn
more about them. Computing them is fairly straightforward, especially here where the two
functions are largely drawn from past TWCs.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given number, $n &gt; 0. Write a script to find out if the given number is a Weird 
Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;
use Data::PowerSet q/powerset/;

sub factor{
    my($n) = @_;
    my @factors = (1);
    foreach  my $j (2 .. sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }
    return @factors;  
}

sub is_weird{
    my($x) = @_;
    my @factors = factor($x); 
    my $sum = unpack("%32I*", pack("I*",  @factors));
    for my $subset (@{powerset(@factors)}){
        return false if unpack("%32I*", pack("I*",  @{$subset})) == $x;
    }  
    return boolean($sum &gt; $x);
}

MAIN:{
    print is_weird(12) . "\n";
    print is_weird(70) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This task kind of bothered me, not because of the complexity of the task itself; the code
was overall not extremely demanding. Rather anytime when I want to make use of 
&lt;em&gt;Data::PowerSet&lt;/em&gt; I get a bit anxious that there may be a far more elegant way of 
proceeding! After coming up blank on alternatives I just went with this, but I'll probably
still have this in the back of my mind for a few more days.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-156/"&gt;Challenge 156&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pernicious_number"&gt;Pernicious Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/WeirdNumber.html"&gt;Weird Number&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc156</id>
    <published>2022-03-20T18:29:00-04:00</published>
    <updated>2022-03-20T18:29:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
