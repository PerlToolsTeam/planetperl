<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-20T00:56:42Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/PerlRaku</name>
      <uri>https://www.reddit.com/user/PerlRaku</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12scttm/tprc_early_bird_ends_soon/"&gt; &lt;img src="https://preview.redd.it/zrx04btn4xua1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=b3d30d53d41f28b240aeba9acf5970f14893c84f" alt="TPRC Early Bird Ends Soon!" title="TPRC Early Bird Ends Soon!" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/PerlRaku"&gt; /u/PerlRaku &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://i.redd.it/zrx04btn4xua1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12scttm/tprc_early_bird_ends_soon/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12scttm</id>
    <media:thumbnail url="https://preview.redd.it/zrx04btn4xua1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=b3d30d53d41f28b240aeba9acf5970f14893c84f"/>
    <link href="https://www.reddit.com/r/perl/comments/12scttm/tprc_early_bird_ends_soon/"/>
    <updated>2023-04-19T22:35:44+00:00</updated>
    <published>2023-04-19T22:35:44+00:00</published>
    <title>TPRC Early Bird Ends Soon!</title>
  </entry>
  <entry>
    <title>Open Source Development Course for Perl developers - 2023.01</title>
    <link rel="alternate" href="https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>What happens in life is that we learn until the end. For me, it's time to learn how to use tools supporting Open Source projects. For years, I mostly worked alone. And mostly in closed projects. I've been developing an Open Source project for some time now. In order to properly cooperate with other programmers, I started an interesting course "Open Source Development Course for Perl developers - 2023.01" implemented as part of the code-maven.com project. </p>

</div>
    </content>
    <author>
      <name>Jaros≈Çaw Danielski</name>
    </author>
    <id>https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9</id>
    <published>2023-04-19T19:46:56Z</published>
    <updated>2023-04-19T19:46:56Z</updated>
    <category term="perl"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/2e25d914d700bde5be0d7f5ac4edafdc98532942</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/2e25d914d700bde5be0d7f5ac4edafdc98532942"/>
    <title>
        perldelta - Update modules
    </title>
    <updated>2023-04-19T19:40:18Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;perldelta - Update modules&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/11225b5ebdb89beb67bde84ce987cdef63759819</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/11225b5ebdb89beb67bde84ce987cdef63759819"/>
    <title>
        perldelta - Remove boilerplate
    </title>
    <updated>2023-04-19T19:34:44Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;perldelta - Remove boilerplate&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/70d1c248700fa6762ba1084bc0c6e09f7322a831</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/70d1c248700fa6762ba1084bc0c6e09f7322a831"/>
    <title>
        Update perldelta
    </title>
    <updated>2023-04-19T19:31:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Update perldelta&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/f4aba3e94259ff47e3ef6daf95b0dec0fe885923</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/f4aba3e94259ff47e3ef6daf95b0dec0fe885923"/>
    <title>
        Porting/Maintainers.pl - Tidy up CUSTOMIZED files
    </title>
    <updated>2023-04-19T19:31:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Porting/Maintainers.pl - Tidy up CUSTOMIZED files&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75974097</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Merge two regexes with variable number of capture groups</title>
            <category scheme="https://stackoverflow.com/tags" term="regex"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="regex-group"/>
        <author>
            <name>Erik Bennett</name>
            <uri>https://stackoverflow.com/users/4114394</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75974097/merge-two-regexes-with-variable-number-of-capture-groups"/>
        <published>2023-04-10T03:27:14Z</published>
        <updated>2023-04-19T19:03:19Z</updated>
        <summary type="html">
            &lt;p&gt;I'm trying to match either&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(\S+)(=)([fisuo])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(\S+)(!)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then have the results placed in a list (capture groups).  All of my attempts result in extra, unwanted captures.&lt;/p&gt;
&lt;p&gt;Here's some code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
#-*- cperl -*-
# $Id: test7,v 1.1 2023/04/10 02:57:12 bennett Exp bennett $
#

use strict;
use warnings;
use Data::Dumper;

foreach my $k ('debugFlags=s', 'verbose!') {
    my @v;

    # Below is the offensive looking code.  I was hoping for a regex
    # which would behave like this:

    if(@v = $k =~ m/^(\S+)(=)([fisuo])$/) {
      printf STDERR (&amp;quot;clownMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    } elsif(@v = $k =~ m/^(\S+)(!)$/) {
      printf STDERR (&amp;quot;clownMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    }

    @v = ();

    # This is one of my failed, aspirational matches.  I think I know
    # WHY it fails, but I don't know how to fix it.
    
    if(@v = $k =~ m/^(?:(\S+)(=)([fisuo]))|(?:(\S+)(!))$/) {
      printf STDERR (&amp;quot;hopefulMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    }
    printf STDERR &amp;quot;===\n&amp;quot;;
}

exit(0);
__END__
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clownMatch = 'debugFlags=s' =&amp;gt; $VAR1 = [
          'debugFlags',
          '=',
          's'
        ];


hopefulMatch = 'debugFlags=s' =&amp;gt; $VAR1 = [
          'debugFlags',
          '=',
          's',
          undef,
          undef
        ];


===
clownMatch = 'verbose!' =&amp;gt; $VAR1 = [
          'verbose',
          '!'
        ];


hopefulMatch = 'verbose!' =&amp;gt; $VAR1 = [
          undef,
          undef,
          undef,
          'verbose',
          '!'
        ];


===
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are more details in the code comments.  The output is at the bottom of the code section.  And the '!' character is just that.  I'm not confusing it with some other not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update Mon Apr 10 23:15:40 PDT 2023:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the wise input of several readers, it seems that this question decomposes into a few smaller questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can a regex return a variable number of capture groups?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I haven't heard one way or the other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should one use a regex in this way, if it could?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not without a compelling reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For my purposes, should I use a regex to create what is really a lexical-analyzer/parser?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No.  I was using a regex for syntax checking and got carried away.&lt;/p&gt;
&lt;p&gt;I learned a good deal, though.  I hope moderators see fit to keep this post as a cautionary tale.&lt;/p&gt;
&lt;p&gt;Everyone deserves points on this one, and can claim that they were robbed, citing this paragraph.  @Schwern gets the points for being first.  Thanks.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75976252</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Run system command in same context of the script itself</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>IGOR LEVKOVSKY</name>
            <uri>https://stackoverflow.com/users/8980158</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75976252/run-system-command-in-same-context-of-the-script-itself"/>
        <published>2023-04-10T10:23:17Z</published>
        <updated>2023-04-19T18:29:21Z</updated>
        <summary type="html">
            &lt;p&gt;I have a script that runs a set of commands and it needs some env variable to be set before running one of the commands. The problem is that system command launches as a separate process, and any env variables that i set there, are not visible for the context that the script runs in. How can I overcome this?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;system(&amp;quot;set WALLET=NO&amp;quot;);
do some perl commands; #this command needs env variable WALLET=NO to be set
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/4855731ade5c0ba97fa916c054c6c71bf7b05950</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/4855731ade5c0ba97fa916c054c6c71bf7b05950"/>
    <title>
        regen/embed.pl: don't hide mathoms
    </title>
    <updated>2023-04-19T18:28:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/352038?s=30&amp;v=4"/>
    <author>
      <name>xenu</name>
      <uri>https://github.com/xenu</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;regen/embed.pl: don&amp;#39;t hide mathoms

makedef.pl exports them unconditionally and embed.pl should use the same
logic.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76006223</id>
        <re:rank scheme="https://stackoverflow.com">4</re:rank>
        <title type="text">Is there a significant performance penalty for calling a subroutine vs inline code?</title>
            <category scheme="https://stackoverflow.com/tags" term="performance"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Bill</name>
            <uri>https://stackoverflow.com/users/19528629</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76006223/is-there-a-significant-performance-penalty-for-calling-a-subroutine-vs-inline-co"/>
        <published>2023-04-13T13:47:45Z</published>
        <updated>2023-04-19T18:23:48Z</updated>
        <summary type="html">
            &lt;p&gt;Old school question - I don't know how efficient the running of Perl is.&lt;/p&gt;
&lt;p&gt;I have a group of if/elsif/else statements that process lines of data for different data types that come in the report.
I find it easier to read and look at the code if I use subroutine calls instead of variable sized chunks of inline code.&lt;/p&gt;
&lt;p&gt;Some older languages had significant penalties in handling the calls so that is was faster to include short routines inline rather than call them.
I do not need to pass variables with the call.  The line being read has all the data and the significant items are put in variables to be processed later.&lt;/p&gt;
&lt;p&gt;Probably not a critical bit of knowledge to have but I try to make my programs efficient and be readable.
I already have the chain of ifs so that the most common ones are checked first.&lt;/p&gt;
&lt;p&gt;I have written the code inline.  I have no way to actually measure how fast it runs.  Since it processes things every 15 minutes, I don't want to tie up the files anymore than necessary.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76052075</id>
        <re:rank scheme="https://stackoverflow.com">2</re:rank>
        <title type="text">Difference between calling named anonymous function and regular subroutine</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Dima</name>
            <uri>https://stackoverflow.com/users/12896988</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76052075/difference-between-calling-named-anonymous-function-and-regular-subroutine"/>
        <published>2023-04-19T08:04:26Z</published>
        <updated>2023-04-19T18:19:13Z</updated>
        <summary type="html">
            &lt;p&gt;I'm experimenting with anonymous functions in Perl, and I began to wonder what the difference between calling these two is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $read_file = sub {
    my ($filename) = @_;
    my @lines;
    
    open my $fh, '&amp;lt;:raw', $filename or die &amp;quot;Can't open file $filename: $!&amp;quot;;
    while (my $line = &amp;lt;$fh&amp;gt;) {
        chomp $line;
        push @lines, $line;
    }
    close $fh;
    return @lines;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sub read_file {
    my ($filename) = @_;
    my @lines;
    
    open my $fh, '&amp;lt;:raw', $filename or die &amp;quot;Can't open file $filename: $!&amp;quot;;
    while (my $line = &amp;lt;$fh&amp;gt;) {
        chomp $line;
        push @lines, $line;
    }
    close $fh;
    return @lines;
}
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76030424</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">How do I quote the special character + and a one-letter-plus-two-digit string?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Zilore Mumba</name>
            <uri>https://stackoverflow.com/users/2856552</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76030424/how-do-i-quote-the-special-character-and-a-one-letter-plus-two-digit-string"/>
        <published>2023-04-16T21:29:06Z</published>
        <updated>2023-04-19T17:48:32Z</updated>
        <summary type="html">
            &lt;p&gt;I have the following text to modify in Perl:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;tti_d01_DA_&amp;quot; + it + &amp;quot;H&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my replacement text, I want to replace &lt;code&gt;d01&lt;/code&gt; with a variable &lt;code&gt;${Dom}&lt;/code&gt; and &lt;code&gt;DA&lt;/code&gt; with &lt;code&gt;${simul}&lt;/code&gt;, so that I have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;tti_${Dom}_${simul}_&amp;quot; + it + &amp;quot;H&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have tried the following searches for the original string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s/&amp;quot;tti_.\d{2}_\w+_&amp;quot; \+ \w+ \+ &amp;quot;H&amp;quot;/&amp;quot;tti_${Dom}_${simul}_&amp;quot; + it + &amp;quot;H&amp;quot;/;
s/&amp;quot;tti_(?=.*[a-z])(?=.*[0-9]) (?=.*[_]) \w+ (?=.*[_]) (?=.*[&amp;quot;])\s(?=.*[+])\s\w+\s(?=.*[+])\s&amp;quot;H&amp;quot;/&amp;quot;tti_${Dom}_${simul}_&amp;quot; + it + &amp;quot;H&amp;quot;/;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought this should be a very simple issue, but somehow I am not able to get it. Both the above do not find what I am looking for.&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <author>
      <name>/u/nobono</name>
      <uri>https://www.reddit.com/user/nobono</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Interested to know what the Perl people uses for their daily frontend chores.&lt;/p&gt; &lt;p&gt;Personally, I prefer Angular. I have tried React, Vue and Svelte extensively, but never felt comfortable with them.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/nobono"&gt; /u/nobono &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12ri7bj/what_do_you_use_for_frontend_development_and_why/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12ri7bj/what_do_you_use_for_frontend_development_and_why/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12ri7bj</id>
    <link href="https://www.reddit.com/r/perl/comments/12ri7bj/what_do_you_use_for_frontend_development_and_why/"/>
    <updated>2023-04-19T05:30:21+00:00</updated>
    <published>2023-04-19T05:30:21+00:00</published>
    <title>What do you use for frontend development, and why?</title>
  </entry>
  <entry>
    <author>
      <name>/u/kodridrocl</name>
      <uri>https://www.reddit.com/user/kodridrocl</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Been going through documentation but could not find anything as such; I guess I am looking for something that would look like $a =. $b.&lt;/p&gt; &lt;p&gt;TIA!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/kodridrocl"&gt; /u/kodridrocl &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12rhza7/there_is_no_short_handle_for_a_b_a_or_is_there/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12rhza7/there_is_no_short_handle_for_a_b_a_or_is_there/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12rhza7</id>
    <link href="https://www.reddit.com/r/perl/comments/12rhza7/there_is_no_short_handle_for_a_b_a_or_is_there/"/>
    <updated>2023-04-19T05:20:14+00:00</updated>
    <published>2023-04-19T05:20:14+00:00</published>
    <title>There is no short handle for $a = $b . $a or is there?</title>
  </entry>
  <entry>
    <title>Self-signed wildcard certificates</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/19/self-signed-wildcard-crt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>A <a href="https://gist.github.com/dmadisetti/16006751fd6e1526fa9c2f2e1660e8e3">useful gist</a> for generating a self-signed certificate with wildcards.</p>
</blockquote>

<p>Using self-signed certificates <em>can</em> be a viable solution, especially in
development environments. Sometimes‚Ä¶ it can also be useful to have these
certificates supporting wildcards.</p>

<p>This <a href="https://gist.github.com/dmadisetti/16006751fd6e1526fa9c2f2e1660e8e3">useful gist</a> is very interesting for doing this.</p>

<p>It sort-of overlaps with <a href="/ETOOBUSY/2022/11/20/ekeca-standalone-certificate/">ekeca standalone certificate for a server</a>, only
producing one less artifact (i.e. the one-foff Root CA certificate), forcing
to install the generated certificate inside the pool of available ones in
the client machine. This might or might not be useful, so let‚Äôs just keep it
in the bag.</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/19/self-signed-wildcard-crt/</id>
    <published>2023-04-19T06:00:00+02:00</published>
    <updated>2023-04-19T06:00:00+02:00</updated>
    <category term="openssl"/>
    <category term="security"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/ivan_linux</name>
      <uri>https://www.reddit.com/user/ivan_linux</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12rbd9g/i_built_a_foss_syslog_dashboard_rest_api_with/"&gt; &lt;img src="https://external-preview.redd.it/Ci7L2pD2d0668hfsBJIkzhGnlYR7c7Y3bRQiRJ-rEaM.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=83101fdde433f17f96a68afca996fd2caace2d83" alt="I built a FOSS syslog dashboard &amp;amp; REST API with modern Perl (Mojolicious, Bread::Board, DBIx::Class, etc), and Vue" title="I built a FOSS syslog dashboard &amp;amp; REST API with modern Perl (Mojolicious, Bread::Board, DBIx::Class, etc), and Vue" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/ivan_linux"&gt; /u/ivan_linux &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://github.com/mollusc-labs/clark"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12rbd9g/i_built_a_foss_syslog_dashboard_rest_api_with/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12rbd9g</id>
    <media:thumbnail url="https://external-preview.redd.it/Ci7L2pD2d0668hfsBJIkzhGnlYR7c7Y3bRQiRJ-rEaM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=83101fdde433f17f96a68afca996fd2caace2d83"/>
    <link href="https://www.reddit.com/r/perl/comments/12rbd9g/i_built_a_foss_syslog_dashboard_rest_api_with/"/>
    <updated>2023-04-19T01:07:11+00:00</updated>
    <published>2023-04-19T01:07:11+00:00</published>
    <title>I built a FOSS syslog dashboard &amp; REST API with modern Perl (Mojolicious, Bread::Board, DBIx::Class, etc), and Vue</title>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/davorg</name>
      <uri>https://www.reddit.com/user/davorg</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12qmn5n/the_perl_and_raku_conference_2023_in_toronto/"&gt; &lt;img src="https://external-preview.redd.it/jFU-uCZ6pkV6qcaPky82wssy_t3gsz4pjnaR3HgaSsc.jpg?width=108&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=04179d3e9a9ca7f9821ef9071f2bd04ca6e7dbc4" alt="The Perl and Raku Conference 2023 in Toronto: Schedule" title="The Perl and Raku Conference 2023 in Toronto: Schedule" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/davorg"&gt; /u/davorg &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://tprc2023.sched.com/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12qmn5n/the_perl_and_raku_conference_2023_in_toronto/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12qmn5n</id>
    <media:thumbnail url="https://external-preview.redd.it/jFU-uCZ6pkV6qcaPky82wssy_t3gsz4pjnaR3HgaSsc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=04179d3e9a9ca7f9821ef9071f2bd04ca6e7dbc4"/>
    <link href="https://www.reddit.com/r/perl/comments/12qmn5n/the_perl_and_raku_conference_2023_in_toronto/"/>
    <updated>2023-04-18T13:12:00+00:00</updated>
    <published>2023-04-18T13:12:00+00:00</published>
    <title>The Perl and Raku Conference 2023 in Toronto: Schedule</title>
  </entry>
  <entry>
    <title>MS SQL Server from Perl in Linux</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/18/mssql-from-perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Let‚Äôs jot down some notes on accessing MS SQL Server from <a href="https://www.perl.org/">Perl</a> in
Linux.</p>
</blockquote>

<p>As I <em>often</em> find when I have to deal with Microsoft stuff, there‚Äôs a lot
around but it always leaves me with doubts and gray areas. This time it was
connecting to SQL Server from <a href="https://www.perl.org/">Perl</a> in Linux.</p>

<p>The way to go is to use ODBC. In the distribution that I use, it means
<a href="https://www.unixodbc.org/">unixODBC</a>, which is available as a package.</p>

<p>The real way from our code to the server, though, is a bit longer; I hope
I‚Äôm getting the terminology right:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      [Our Perl code]
           [DBI]
        [DBD::ODBC]
        [unixODBC]
       [ODBC Driver]
       [SQL Server]
</code></pre></div></div>

<p>Well, I‚Äôm <em>not that sure</em> about the <code class="language-plaintext highlighter-rouge">[unixODBC]</code> layer but whatever.</p>

<p>The most popular ODBC Driver for connecting to SQL Server seems to be the
stuff from easysoft. As much as I can appreciate their wide range of
documentation, I‚Äôm not really thrilled about paying to play with the driver
beyond the 14 days trial period. In 2023, this also somehow smells <em>old</em>.</p>

<blockquote>
  <p>I‚Äôm pretty happy to pay for support of stuff that goes in production, I
just think that development &amp; test environments should come for free as in
beer.</p>
</blockquote>

<p>On the other hand, Microsoft themselves have a driver that can be installed
free of charge, <a href="https://learn.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server">available here</a>. I tried the instructions for Alpine
Linux and the installation worked fine (in a Docker container running
version 3.16); it also ended up installing <a href="https://www.unixodbc.org/">unixODBC</a> along the way.</p>

<p>After the installation, I run the following command to see what was <em>seen</em>
as available:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ odbcinst -q -d
[ODBC Driver 18 for SQL Server]
</code></pre></div></div>

<p>The string with brackets can then be used as the <code class="language-plaintext highlighter-rouge">Driver</code> when <code class="language-plaintext highlighter-rouge">connect</code>ing
with <a href="https://metacpan.org/pod/DBI">DBI</a> (with <a href="https://metacpan.org/pod/DBD::ODBC">DBD::ODBC</a>), we just have to change the brackets into
curly braces.</p>

<blockquote>
  <p>CAVEAT: the <a href="https://www.perl.org/">Perl</a> code below is untested because I don‚Äôt have a SQL
Server instance at hand right now. I hope I remembered well, though.</p>
</blockquote>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">use</span> <span class="nv">DBI</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">%connect_config</span> <span class="o">=</span> <span class="p">(</span>
   <span class="s">Driver</span>                 <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">{ODBC Driver 18 for SQL Server}</span><span class="p">',</span>
   <span class="s">Database</span>               <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">DATABASE</span><span class="p">},</span>
   <span class="s">UID</span>                    <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">USERNAME</span><span class="p">},</span>
   <span class="s">PWD</span>                    <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">PASSWORD</span><span class="p">},</span>
   <span class="s">Server</span>                 <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">HOST</span><span class="p">},</span>
   <span class="s">Encrypt</span>                <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">ENCRYPT</span><span class="p">},</span>                       <span class="c1"># Yes/No</span>
   <span class="s">TrustServerCertificate</span> <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">TRUST_CRT</span><span class="p">},</span>                     <span class="c1"># Yes/No</span>
<span class="p">);</span>
<span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="nv">DBI</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="nv">dbi_string</span><span class="p">(</span><span class="s">ODBC</span> <span class="o">=&gt;</span> <span class="nv">%connect_config</span><span class="p">),</span> <span class="p">'',</span> <span class="p">'',</span>
   <span class="p">{</span> <span class="s">AutoCommit</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">RaiseError</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s">PrintError</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">});</span>

<span class="k">for</span> <span class="k">my</span> <span class="nv">$tov</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">$quoted</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="nv">quote_identifier</span><span class="p">(</span><span class="nv">$tov</span><span class="p">);</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$count</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="nv">selectrow_array</span><span class="p">("</span><span class="s2">SELECT COUNT(*) FROM </span><span class="si">$quoted</span><span class="p">");</span>
   <span class="nv">say</span> <span class="p">"</span><span class="si">$tov</span><span class="s2">: </span><span class="si">$count</span><span class="p">";</span>
<span class="p">}</span>

<span class="nv">$dbh</span><span class="o">-&gt;</span><span class="nv">disconnect</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">dbi_string</span> <span class="p">($dbd, @pairs) {</span>
   <span class="k">my</span> <span class="nv">@joined_pairs</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="nv">@pairs</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="o">=</span> <span class="nb">splice</span> <span class="nv">@pairs</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">;</span>
      <span class="nb">push</span> <span class="nv">@joined_pairs</span><span class="p">,</span> <span class="p">"</span><span class="si">$key</span><span class="s2">=</span><span class="si">$value</span><span class="p">"</span> <span class="k">if</span> <span class="nb">defined</span> <span class="nv">$value</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nb">join</span> <span class="p">'</span><span class="s1">:</span><span class="p">',</span> <span class="s">dbi</span> <span class="o">=&gt;</span> <span class="nv">$dbd</span><span class="p">,</span> <span class="nb">join</span> <span class="p">'</span><span class="s1">;</span><span class="p">',</span> <span class="nv">@joined_pairs</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So there you go, until it‚Äôs actually tested this is <em>at least</em> a good
and complete starting point.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/18/mssql-from-perl/</id>
    <published>2023-04-18T06:00:00+02:00</published>
    <updated>2023-04-18T06:00:00+02:00</updated>
    <category term="linux"/>
    <category term="perl"/>
    <category term="database"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 213: Fun Sort</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-213-fun-sort.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11078</id>
    <published>2023-04-18T00:02:02Z</published>
    <updated>2023-04-18T00:06:19Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 213 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-213/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 23, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don‚Äôt read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fun Sort</h2>

<p><em>You are given a list of positive integers.</em></p>

<p><em>Write a script to sort the all even integers first then all odds in ascending order.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1,2)
Output: (2,1)
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1)
Output: (1)
</code></pre>

<h3>Fun Sort in Raku</h3>

<p>In theory, this task should ideally use a special comparison subroutine to be used with <code>sort</code> that leads to the desired sorting order. </p>

<p>It is, however, simpler to separate even and odd numbers into two lists (for example using <code>grep</code>), sort the lists and then reassemble the lists in the proper order.</p>

<pre><code>sub fun-sort (@in) {
    return (@in.grep({$_ %% 2}).sort, 
            @in.grep({$_ % 2}).sort).flat;
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say fun-sort @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<p>For the fun of it, or perhaps for the sake of trying to be pedantic <code>;-)</code> , let&#8217;s see how we can do the same using a special comparison subroutine. Note that <code>Less</code> and <code>More</code> (and also <code>Same</code>) are special values provided by the <a href="https://docs.raku.org/type/Order.html">Order</a> <code>enum</code> and are respectively equal to -1 and 1 (and 0). When the <code>fun-cmp</code> subroutine returns <code>Less</code> (i.e. -1), then the <code>sort</code> routine knows that the first parameter (<code>$a</code> in this case) should be ordered before the second one (<code>$b</code>). Conversely, the first parameter should be ordered after the second one if the comparison subroutine returns <code>More</code>. When both parameters are even, or both are odd, we just use the <code>&lt;=&gt;</code> numeric comparison operator (which also returns <code>Less</code>, <code>More</code>, or <code>Same</code> to the <code>sort</code> function).</p>

<pre><code>sub fun-cmp ($a, $b) { 
    if $a %% 2 {
        return $a &lt;=&gt; $b if $b %% 2;
        return Less;
    } else {
        return $a &lt;=&gt; $b unless $b %% 2;
        return More;
  }
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say sort &amp;fun-cmp, @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort2.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<h3>Fun Sort in Perl</h3>

<p>This is a port to Perl of the first Raku program above, splitting the input into two lists (even and odd numbers), sorting them separately and reassembling the sorted sub-lists at the end.</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    return (sort { $a &lt;=&gt; $b } grep { $_ % 2 == 0 } @_),
           (sort { $a &lt;=&gt; $b } grep { $_ % 2 != 0 } @_);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fun-sort.pl
2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Note that we could also first sort the input and then split the result into even and odd numbers and finally rearrange them:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    my @sorted = sort { $a &lt;=&gt; $b } @_;
    return (grep { $_ % 2 == 0 } @sorted), 
           (grep { $_ % 2 != 0 } @sorted);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the same output as before:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Finally, just as in Raku, we can also be pedantic in Perl and write a special comparison subroutine:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_cmp { 
    if ($a % 2 == 0) {
        return $a &lt;=&gt; $b unless $b % 2;
        return -1;
    } else {
        return $a &lt;=&gt; $b if $b % 2;
        return 1;
  }
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", sort { fun_cmp } @$test;
}
</code></pre>

<p>This program displays again the same output:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<h2>Task 2: Shortest Route</h2>

<p>This second task will be handled later, if I find the time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 30, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly #612 - Coming Soon!</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-612-coming-soon-14jp" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/612.html"&gt;Perl Weekly 612&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what's coming soon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well it's the subject of the talk to be presented by &lt;strong&gt;Curtis Poe&lt;/strong&gt; at &lt;a href="https://tprc2023.sched.com/event/1Lhr0/coming-soon"&gt;The Perl and Raku Conference 2023, TORONTO, Canada.&lt;/a&gt; I have been waiting for the event to come to &lt;strong&gt;Canada&lt;/strong&gt; as going to &lt;strong&gt;America&lt;/strong&gt; was never on card. Post &lt;strong&gt;9/11&lt;/strong&gt;, travelling to &lt;strong&gt;America&lt;/strong&gt; having &lt;strong&gt;Mohammad&lt;/strong&gt; as first name isn't good idea. Having seen the list of &lt;a href="https://tprc2023.sched.com/directory/speakers"&gt;speakers&lt;/a&gt;, I am sure it's going to be lots of fun. I really wanted to attend the event and meet the top guns. So what's stopping me? I haven't been keeping well in the recent months. I know my current employer, &lt;a href="https://www.oleeo.com"&gt;Oleeo&lt;/a&gt; has been regular sponsor of &lt;strong&gt;London Perl Workshop&lt;/strong&gt; and have sponsored selected few to attend various events in the past. Having said, I have to be mentally prepared before I take the plunge but I really don't want to miss the opportunity. I still remember the first time, I attended the talk by &lt;strong&gt;Curtis&lt;/strong&gt; was at &lt;strong&gt;German Perl Workshop 2018&lt;/strong&gt; and it was about &lt;a href="https://www.youtube.com/watch?v=4c8ixLgpxwo"&gt;Rescuing Legacy Code&lt;/a&gt;. After that I met him again at &lt;strong&gt;The Perl Conference 2019, Riga&lt;/strong&gt;. I think that was the last time I ever attended any conference in person. I am not sure if I still have time to reserve a place or even submit a short talk proposal at &lt;strong&gt;The Perl and Raku Conference 2023&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Talking about conference, I would also like to mention another big event in Europe, &lt;a href="https://perlkohacon.fi"&gt;The Perl and Koha Conference in Helsinki&lt;/a&gt;. They have extended time to accept talks. So if you are planning to attend then please do submit your proposal now. I am planning to visit India in the month of August otherwise I would have given a push.&lt;/p&gt;

&lt;p&gt;I am a big fan of writing skills of &lt;strong&gt;brian d foy&lt;/strong&gt;, &lt;strong&gt;Curtis Poe&lt;/strong&gt;, &lt;strong&gt;Damian Conway&lt;/strong&gt;, &lt;strong&gt;Dave Cross&lt;/strong&gt; and many more. It's not just about blog post but also about their books. &lt;strong&gt;Dave Cross&lt;/strong&gt; recently published &lt;a href="https://actions.davecross.co.uk/"&gt;GitHub Actions Essentials&lt;/a&gt;. I haven't read it yet but I am confident it is going to be worth spending time and money.&lt;/p&gt;

&lt;p&gt;Enjoy the rest of the newsletter and please do take extra care of your health.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Sponsors
&lt;/h2&gt;




&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perlkohacon.fi/News-for-Conference-YAPC-Europe-KohaCon-Helsinki-August-2023.html"&gt;The CfP has just been extenden:&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The Perl and Koha Conference 2023 is now accepting talks. Please do submit.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/04/datatable---weekly-travelling-in-cpan.html"&gt;Data::Table - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CPAN travellers having fun every week, thanks to Cheok-Yin Fung.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/10/rearviewmirror-on-kasai/"&gt;Rearviewmirror on Kasai!&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/11/some-hats-icons/"&gt;Some hats icons&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/12/data-collection-api/"&gt;Thinking on a data collection API&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/15/data-collection-update/"&gt;Data collection update&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/16/cloudflare-caching/"&gt;Cloudflare caching&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213"&gt;The Weekly Challenge - 213&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Fun Sort" and "Shortest Route". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-212"&gt;RECAP - The Weekly Challenge - 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Jumping Letters" and "Rearrange Groups" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/letters-groups.html"&gt;Letters and Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice use of multi keyword of Raku. Nice detailed discussion as always. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-212-spinning-letters-and-chopping-numbers-2kdc"&gt;Perl Weekly Challenge #212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice and easy solution with plenty of explanation. Good job, well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/13/pwc212-jumping-letters/"&gt;PWC212 - Jumping Letters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice explanation of each and every tiny details. Nothing is left for the readers. Spoon feeding.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/14/pwc212-rearrange-groups/"&gt;PWC212 - Rearrange Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Perl got preference this week. Nice one. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/04/perl_weekly_challenge_week_212.html"&gt;Perl Weekly Challenge: Week 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lots of Raku magic and interesting story about the second task. Keep us entertained every week.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-212/james-smith#readme"&gt;The Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Great show of Perl power. I just loved it. Thank you for sharing knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html"&gt;Perl Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I loved the way Raku magic is implemented in Perl. Very impressive. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/04/11/PerlWeeklyChallenge212.html"&gt;Jumping words and batching arrays&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Raku magic made the task so easy. Still getting it together is an art. Thank you for the contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/04/10/PWC212/"&gt;Perl Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another week another cool Perl one-liner. Keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/212"&gt;Lead to Gold and 1 2 3&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice and easy to understand solution without any gimmicks. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/04/robbie-hatleys-perl-solutions-to-weekly_11.html"&gt;The Weekly Challenge #212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nicely re-worded description made it so easy to follow. Thanks for sharing the knowledge.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/04/The_Weekly_Challenge_212__Rearrange_by_Jumps.html"&gt;Rearrange by Jumps&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lucky week, we got Perl and Rust solutions getting discussed in the blog post. Nice one, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/jumping-groups-2ld2"&gt;Jumping Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Little more detailed analysis than regular. Still very concise, good job.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/04/10/2023-15-testing-patterns/"&gt;2023.15 Testing Patterns&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/wo1"&gt;Adventure Awaits! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you‚Äôre lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game, and they're looking for Perl folks with passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/anv"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you‚Äôre a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You‚Äôll be deploying apps your work to AWS, so experience would be handy, and the company‚Äôs big on testing, so they‚Äôd like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/2wr"&gt;C, C++, and Perl Software Engineers, Let‚Äôs Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You‚Äôll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-612-coming-soon-14jp</id>
    <published>2023-04-17T06:09:40Z</published>
    <updated>2023-04-17T06:09:40Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>No back button after logout</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/17/no-back-button/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Prevent the back button after logging out.</p>
</blockquote>

<p>While playing with pages in a <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a> application, which has some
parts only visible after logging in and other freely accessible, I realized
that I should have done something to block the usage of the <em>Back</em> button in
the browser after logging out.</p>

<p>I‚Äôm not the first one to think about it, of course, so <a href="https://stackoverflow.com/questions/49547/how-do-we-control-web-page-caching-across-all-browsers/2068407#2068407">I found this</a> and
added this to the code:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$app</span><span class="o">-&gt;</span><span class="nv">hook</span><span class="p">(</span>
   <span class="s">after_dispatch</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($c) {</span>
      <span class="nv">$c</span><span class="o">-&gt;</span><span class="nv">res</span><span class="o">-&gt;</span><span class="nv">headers</span><span class="o">-&gt;</span><span class="nv">cache_control</span><span class="p">('</span><span class="s1">no-store, must-revalidate</span><span class="p">')</span>
         <span class="k">if</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="nv">is_user_authenticated</span><span class="p">;</span>
   <span class="p">},</span>
<span class="p">);</span>
</code></pre></div></div>

<p>I‚Äôm not going to fuss over all the different browsers, but in case the link
above has plenty of discussions.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/17/no-back-button/</id>
    <published>2023-04-17T06:00:00+02:00</published>
    <updated>2023-04-17T06:00:00+02:00</updated>
    <category term="web"/>
    <category term="security"/>
  </entry>
  <entry>
    <title>A Simple Guide to Extract GPS Information from GoPro Photos and Videos</title>
    <link rel="alternate" href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1727/1*zNI5ysYb953nYHc4HfHWaA.png" width="1727"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Many people have a consumer grade camera like GoPro, these cameras are nice and resistant to create action videos and shots in the water&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;Continue reading on Medium ¬ª&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>John R. Ballesteros</name>
    </author>
    <id>https://medium.com/p/cf6edf6dc601</id>
    <published>2023-04-16T22:20:32Z</published>
    <updated>2023-04-16T22:24:38.457000Z</updated>
    <category term="gps"/>
    <category term="gis"/>
    <category term="gopro"/>
    <category term="geotag"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Jumping Groups</title>
    <link rel="alternate" href="https://dev.to/simongreennet/jumping-groups-2ld2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 212
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-212/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-212/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Jumping Letters
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a word having alphabetic characters only, and a list of positive integers of the same length</p>

<p>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</p>

<h3>
  
  
  My solution
</h3>

<p>This seems relatively straight forward. I have a list called <code>lower_alphabet</code> that contains the twenty six letters of the English alphabet, and <code>upper_alphabet</code> for the capital letters.</p>

<p>I then loop through each letter in the original word, choose the right alphabet to use, take the position of that letter (a = 0, z = 25), and the appropriate number from the input, and take the modulus of 26 from it to chose the new letter. For each step, I add to the <code>new_word</code> array.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py Perl 2 22 19 9
Raku

<span class="nv">$ </span>./ch-1.py Raku 24 4 7 17
Perl
</code></pre>

</div>



<h2>
  
  
  Task 2: Rearrange Groups
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of integers and group size greater than zero.</p>

<p>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can‚Äôt be done then print <code>-1</code>.</p>

<h3>
  
  
  My solution
</h3>

<p>Mea culpa from me. I misunderstood the task, and asked Mohammad for help for something that I really should have figured out myself. Sorry about that.</p>

<p>My solution needs a little of explanation. So here goes. Firstly I take the last number from the array and call it <code>n</code>. This is number of elements I need in each set. I then sort the remainder of the <code>array</code> list (array in Perl) numerically. While there are items in the list I do the following:</p>

<ol>
<li>Set the <code>expected</code> variable. This is from the first (lowest) value in the array, incrementing by 1 continuing for <code>n</code> times.</li>
<li>Set the <code>not_matched</code> set (hash in Perl) with the values from the <code>expected</code> array.</li>
<li>Loop through the values in <code>array</code>. The first occurrence of an <code>expected</code> integer will remove the value from the <code>not_matched</code> set. Anything else will add to a new list called <code>new_array</code>
</li>
<li>If there are any values in the <code>not_matched</code> set means that I haven't found a solution, so I print <code>-1</code> and exit.</li>
<li>Otherwise I add a nicely formatted output of the <code>expected</code> list, set <code>array</code> to be the values of <code>new_array</code>, and continue on.</li>
</ol>

<p>If I have exhausted the <code>array</code> list, then I know we have a solution, and print it to the user.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 2 3 5 1 2 7 6 3 3
<span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>5,6,7<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 2 3 2
<span class="nt">-1</span>

<span class="nv">$ </span>./ch-2.py 1 2 4 3 5 3 3
<span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>3,4,5<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 5 2 6 4 7 3
<span class="nt">-1</span>
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/jumping-groups-2ld2</id>
    <published>2023-04-16T13:01:54Z</published>
    <updated>2023-04-16T13:01:54Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Cloudflare caching</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/16/cloudflare-caching/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Beware of caching by <a href="https://www.cloudflare.com">Cloudflare</a>.</p>
</blockquote>

<p>I activated <a href="https://www.cloudflare.com">Cloudflare</a> as a frontend for a few toy web applications,
mostly because it‚Äôs free (although I‚Äôm not 100% convinced about it as of
every concentration of power. Anyway‚Ä¶).</p>

<p>While happily updating my application, I tried to change a few things in a
stylesheet, mostly to figure out if I was getting my changes in the right
place. Anyway, I could change the stylesheet like crazy, but I still got the
same in the browser, even with the <code class="language-plaintext highlighter-rouge">Shift+Ctrl-R</code> which should be me begging
for all caches to stay out of the way.</p>

<p>It turns out that <a href="https://www.cloudflare.com">Cloudflare</a> does indeed cache <em>aggressively</em>, so the
solution I found around is to let it think that the URL is a dynamic one,
like adding a query part that always changes. So I have something like this
in my <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a> layout template:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet" href="/style.css?foo=&lt;%= time() . rand() %&gt;"&gt;
</code></pre></div></div>

<p>I feel lucky to have thought about it to be honest: I was reminded about
putting these services behind <a href="https://www.cloudflare.com">Cloudflare</a> only a few days ago, so it
somehow stuck to my mind for the right amount of time.</p>

<p>If you have a similar problem‚Ä¶ it might be something in the middle that
you might not be aware of!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/16/cloudflare-caching/</id>
    <published>2023-04-16T06:00:00+02:00</published>
    <updated>2023-04-16T06:00:00+02:00</updated>
    <category term="cloudflare"/>
    <category term="web"/>
    <category term="Mojolicious"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7604825972187342661</id>
    <published>2023-04-15T23:51:00.000+02:00</published>
    <updated>2023-04-15T23:51:07.712+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxl) 5 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-3.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.02&lt;/strong&gt; on 2023-04-12, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.00 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-10, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.001008&lt;/strong&gt; on 2023-04-11, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.001007 was 1 month, 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DCONWAY'&gt;DCONWAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9705' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9705&lt;/strong&gt; on 2023-04-13, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9703 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.031' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.031&lt;/strong&gt; on 2023-04-12, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.030 was 3 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RJBS'&gt;RJBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7604825972187342661/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html" title="(cdxl) 5 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-329016586609546432</id>
    <published>2023-04-15T23:49:00.001+02:00</published>
    <updated>2023-04-15T23:49:18.704+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlii) metacpan weekly report - Web::PerlDistSite</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 86&lt;/p&gt;
&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/15 21:48:06 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dochazka::REST" target="_blank"&gt;App::Dochazka::REST&lt;/a&gt; - Dochazka REST server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CVS" target="_blank"&gt;Crypt::CVS&lt;/a&gt; - Substitution cipher for CVS passwords&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Role::CryptedPassword" target="_blank"&gt;MooX::Role::CryptedPassword&lt;/a&gt; - Password attribute from a encrypted file.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::WSDL" target="_blank"&gt;SOAP::WSDL&lt;/a&gt; - SOAP with WSDL support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mock::Net::Server::Mail" target="_blank"&gt;Test::Mock::Net::Server::Mail&lt;/a&gt; - mock SMTP server for use in tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Handle::FileWriteRotate" target="_blank"&gt;Tie::Handle::FileWriteRotate&lt;/a&gt; - Filehandle tie to write to autorotated file with File::Write::Rotate&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tuple::Munge" target="_blank"&gt;Tuple::Munge&lt;/a&gt; - manipulate Perl's tuple object representations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::REST::Apid" target="_blank"&gt;WWW::REST::Apid&lt;/a&gt; - Generic REST API Daemon&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::TensorFlow::Libtensorflow" target="_blank"&gt;AI::TensorFlow::Libtensorflow&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Antsy" target="_blank"&gt;Antsy&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Adenosine" target="_blank"&gt;App::Adenosine&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=46)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Netdisco" target="_blank"&gt;App::Netdisco&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Rad" target="_blank"&gt;App::Rad&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=155)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI::Driver::Redis" target="_blank"&gt;CHI::Driver::Redis&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=77)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CBC" target="_blank"&gt;Crypt::CBC&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::FileHandle" target="_blank"&gt;Crypt::FileHandle&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=49)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Generic" target="_blank"&gt;Daemon::Generic&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=133)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::MessagePack" target="_blank"&gt;Data::MessagePack&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dezi" target="_blank"&gt;Dezi&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::xxHash" target="_blank"&gt;Digest::xxHash&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ETL::Pipeline::3.10" target="_blank"&gt;ETL::Pipeline::3.10&lt;/a&gt; (+1=0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=45)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=61)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Write::Rotate" target="_blank"&gt;File::Write::Rotate&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Furl" target="_blank"&gt;Furl&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Parser::XS" target="_blank"&gt;HTTP::Parser::XS&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=107)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Compress" target="_blank"&gt;IO::Compress&lt;/a&gt; (+1=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::Socks" target="_blank"&gt;IO::Socket::Socks&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Ion" target="_blank"&gt;Ion&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Jifty" target="_blank"&gt;Jifty&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Util::MaybeXS" target="_blank"&gt;List::Util::MaybeXS&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::Protocol::AnyEvent::http" target="_blank"&gt;LWP::Protocol::AnyEvent::http&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=95)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MLPerl" target="_blank"&gt;MLPerl&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=482)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::CHI" target="_blank"&gt;Mojolicious::Plugin::CHI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=296)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=19)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=408)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=37)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=230)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=66)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=62)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Encoder" target="_blank"&gt;Sereal::Encoder&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::Lite" target="_blank"&gt;SOAP::Lite&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::ByExample" target="_blank"&gt;Sort::ByExample&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=113)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable" target="_blank"&gt;Storable&lt;/a&gt; (+1=52)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ShellUI" target="_blank"&gt;Term::ShellUI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twiggy" target="_blank"&gt;Twiggy&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite&lt;/a&gt; (+2=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Wurm" target="_blank"&gt;Wurm&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::Tiny" target="_blank"&gt;YAML::Tiny&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/329016586609546432/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html" title="(dlii) metacpan weekly report - Web::PerlDistSite"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Data collection update</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/15/data-collection-update/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I did a bit of scouting but decided to roll my own.</p>
</blockquote>

<p>After <a href="/ETOOBUSY/2023/04/12/data-collection-api/">Thinking on a data collection API</a> a bit, I ventured into the
internet to find out ready-made things.</p>

<p>In recent years, <a href="https://en.wikipedia.org/wiki/Time_series_database">Time-series databases</a> have become a hot topic, and yet
I feel they‚Äôre not really the right thing for my low-spec requirements:
collect some data every now and then, for a handful of people.</p>

<p>Many of them, for example, are optimized for collecting data like crazy and
support different levels of aggregation. This makes sense when there‚Äôs a lot
of data coming, of course. On the other hand, I anticipate very sparse data,
so I‚Äôm more worried about pre-allocating all the space over 50 years or so
than about data possibly exploding in time.</p>

<p>Hence, for the time being I‚Äôll be collecting and tracking individual data
points in a traditional RDBMS with a simple API; in case scale will ever by
an issue, I‚Äôll figure out how to ingest all the collected data in a new
system.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/15/data-collection-update/</id>
    <published>2023-04-15T06:00:00+02:00</published>
    <updated>2023-04-15T06:00:00+02:00</updated>
    <category term="web"/>
    <category term="perl"/>
    <category term="tracking"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 212: Jumping Letters</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11073</id>
    <published>2023-04-11T02:36:04Z</published>
    <updated>2023-04-14T00:12:52Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don‚Äôt read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic, i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<h3>Jumping Letters in Raku</h3>

<p>The <a href="https://docs.raku.org/routine/ord.html">ord</a> routine translates a letter into its ASCII code (well, really, it&#8217;s a Unicode code point, but it is equivalent for our purpose here with values less than 128). The <a href="https://docs.raku.org/routine/chr.html">chr</a> performs the inverse operation. So we can simply convert each letter of the input, add the relevant jump value and convert the result back to a letter. One little complication is that we need to subtract 26 from the code point if it gets beyond the upper case and lower case letter ranges after having added the jump value. </p>

<pre><code>sub jump-letter ($letter, $val) {
    my $new_ascii = $letter.ord + $val;
    return ($new_ascii - 26).chr if $new_ascii &gt; 'z'.ord;
    return ($new_ascii - 26).chr if $letter le 'Z'
        and $new_ascii &gt; 'Z'.ord;
    return $new_ascii.chr;
}
my @test = "Perl", &lt;2 22 19 9&gt;;
for ("Perl", &lt;2 22 19 9&gt;), ("Raku", &lt;24 4 7 17&gt;) -&gt; @test {
    printf "%-10s =&gt; ", "@test[0]";
    for @test[0].comb Z @test[1].Array -&gt; $a {
        print jump-letter $a[0], $a[1];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./jumping-letters.raku
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h3>Jumping Letters in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the previous section if you need some explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub jump_letter  {
    my ($letter, $val) = @_;
    my $new_ascii = ord($letter) + $val;
    return chr($new_ascii - 26) if $new_ascii &gt; ord 'z';
    return chr($new_ascii - 26) if $letter le 'Z'
        and $new_ascii &gt; ord 'Z';
    return chr $new_ascii;
}

for my $test (["Perl", [&lt;2 22 19 9&gt;]], ["Raku", [&lt;24 4 7 17&gt;]]) {
    printf "%-10s =&gt; ", "$test-&gt;[0]";
    my @letters = split //, $test-&gt;[0];
    for my $i (0..$#letters) {
        print jump_letter $letters[$i], $test-&gt;[1][$i];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./jumping-letters.pl
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can‚Äôt be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 2
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, I think that example 3 above is wrong. I believe that <code>size</code> should probably be 3 for the example to make sense.</p>

<p><em>Update:</em> this error in the task specifications has now been fixed.</p>

<p>Second, even though I started working on this second task (and think I probably have a working solution in Raku), I have no time today to complete this task, and probably won&#8217;t have time for several days. I still wanted to make my solutions to task 1 available today. I&#8217;ll hopefully write a new blog post or update this one later on.</p>

<p><em>Update:</em> I have now written a <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html">second blog post</a> dated April 13, 2023, providing solutions to this task 2 of the challenge.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 212: Rearrange Groups</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11076</id>
    <published>2023-04-14T00:02:28Z</published>
    <updated>2023-04-14T00:07:23Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don‚Äôt read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<p>This task was the subject of <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html">this post</a> published on April 10, 2023.</p>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can‚Äôt be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 3
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, there was initially an error in Example 3 above of the task specification (<code>$size</code> was 2 instead of 3, and that did not fit with the suggested output), but this has been fixed now.</p>

<p>Next, I first thought of sorting the input list of integers and, assuming for example a group size of 3, to try sequences of 3 successive integers in the list. But then I thought that it would be easier to store the input in a Raku <a href="https://docs.raku.org/type/Bag.html">Bag</a> and to remove items used to construct groups as we go. As this turned out to be quite simple, I decided, as you will see, to use the same method in Perl, simulating bags with hashes.</p>

<h3>Rearrange Groups in Raku</h3>

<p>First, note that <code>bags</code> are immutable in Raku. This means that you cannot change the inner items of the bag (or add or remove items), but this does not preclude you from <em>re-assigning</em> bags, as we do in the last statement of the <code>while</code> loop in the code below.</p>

<p>Using bags means that we can use operators with set theory semantics, such as the infix <code>(&lt;=)</code> or infix <code>‚äÜ</code> <a href="https://docs.raku.org/language/operators.html#infix_(&lt;=">is a subset of or equal to</a>,<em>infix</em>‚äÜ), or the infix <code>(-)</code>, infix <code>‚àñ</code> <a href="https://docs.raku.org/language/operators.html#infix_(-">set difference</a>,<em>infix</em>%E2%88%96), operators.</p>

<p>In the <code>rearrange</code> subroutine, the <code>while</code> loop runs as long as there are some items left in the bag. The loop looks for the smallest item in the bag, construct a sequence (<code>$list</code>) of <code>$size</code> successive items. If <code>$list</code> is a subset of (or equal to) the bag, we store the <code>$list</code> into the <code>@result</code> and remove the items of the <code>$list</code> from the bag. If <code>$list</code> is not part of the bag, then we failed and return -1. If we get normally out of the loop (because the bag is now empty), then we succeeded to build equal groups of items and can return the <code>@result</code>.</p>

<pre><code>sub rearrange (@in, $size) {
    my @result;
    return -1 unless @in.elems %% $size; 
    my $bag  = @in.Bag;
    while ($bag) {
        my $min = $bag.min.key;
        my @list = $min..^($min + $size);
        return -1 unless @list ‚äÜ $bag;
        push @result, @list;
        $bag = $bag (-) @list;  # set difference
    }
    return @result;
}

for ((1,2,3,5,1,2,7,6,3), 3), ((1,2,3), 2), ((1,2,3), 3),
    ((1,2,4,3,5,3), 3), ((1,5,2,6,4,7), 3),
    ((1,5,2,6,4,7), 2) -&gt; @test {
    say @test;
    say rearrange(|@test), "\n"; 
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./rearrange-groups.raku
((1 2 3 5 1 2 7 6 3) 3)
[[1 2 3] [1 2 3] [5 6 7]]

((1 2 3) 2)
-1

((1 2 3) 3)
[[1 2 3]]

((1 2 4 3 5 3) 3)
[[1 2 3] [3 4 5]]

((1 5 2 6 4 7) 3)
-1

((1 5 2 6 4 7) 2)
[[1 2] [4 5] [6 7]]
</code></pre>

<h3>Rearrange Groups in Perl</h3>

<p>I initially thought of using a different technique for solving the task in Perl, since there is no built-in <code>bag</code> data structure in Perl, but then I found that it was quite easy to simulate a <code>bag</code> with a hash containing an histogram of the input values. So this program essentially works the same as the Raku implementation (read the previous section if you need explanations). The <code>for</code> loop checks that all the values of <code>$list</code> exist in the bag and remove these items from the bag.</p>

<pre><code>use warnings;
use feature "say";

sub rearrange {
    my @in = @{$_[0]};
    my $size = $_[1];
    my @result;
    return "-1" if @in % $size; 
    my %bag;
    $bag{$_}++ for @in;
    while (%bag) {
        my $min = (sort { $a &lt;=&gt; $b } keys %bag)[0];
        my @list = $min..($min + $size -1);
        for my $item (@list) {
            return "-1" unless exists $bag{$item};
            $bag{$item}--;
            delete $bag{$item} if $bag{$item} == 0;
        }
        push @result, \@list;
    }
    return @result;
}

for my $test( [[1,2,3,5,1,2,7,6,3], 3],
              [[1,2,3], 2], [[1,2,3], 3],
              [[1,2,4,3,5,3], 3],
              [[1,5,2,6,4,7], 3],
              [[1,5,2,6,4,7], 2] )
              {
    say "(@{$test-&gt;[0]})", " ", "($test-&gt;[1])";
    my @result = rearrange(@$test);
    if ($result[0] == "-1") {
        say -1;
    } else {
        say map { "[@$_] " } @result;
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./rearrange-groups.pl
(1 2 3 5 1 2 7 6 3) (3)
[1 2 3] [1 2 3] [5 6 7]

(1 2 3) (2)
-1

(1 2 3) (3)
[1 2 3]

(1 2 4 3 5 3) (3)
[1 2 3] [3 4 5]

(1 5 2 6 4 7) (3)
-1

(1 5 2 6 4 7) (2)
[1 2] [4 5] [6 7]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge #212 - Spinning Letters and Chopping Numbers</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-212---spinning-letters-and-chopping-numbers.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11075</id>
    <published>2023-04-12T18:45:18Z</published>
    <updated>2023-04-12T19:06:15Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlweeklychallengechallengepractice" label="#perlweeklychallenge #challenge #practice" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Back already with this week's solutions to the PWC #212. Spoiler alert, because the challenge doesn't close for another few days if you want to have a try.</p>

<h4>Challenge #1 - Spinning Letters</h4>

<p>This week we've got a simple letter rotation. Take each letter of the word provided and rotate it by each number in the list. At first I thought this would be a lot longer code. i even put it in a sub. That actually doubles the size though for absolutely no benefit, so I just simplified. We split the word, then loop through the letters and apply the rotation. If it wraps we start from the start of the alphabet. Upper-case is handled with a simple test to insert the right case of each character. Then we don't even bother putting the word back together again because we can just say it as-is.</p>

<pre><code>#!/bin/perl

use strict;
use v5.28;

my @letters = split(//, shift);
my @jumps = @ARGV;
my @new_word;

foreach (my $i = 0; $i &lt;= $#letters; $i++) {
    push @new_word, ord($letters[$i]) + $jumps[$i] &lt; (uc($letters[$i]) eq $letters[$i] ? 91 : 123) ? chr(ord($letters[$i]) + $jumps[$i]) : chr(ord($letters[$i]) + $jumps[$i] - 26);
}
say @new_word;
</code></pre>

<h4>Challenge #2 - Chopping Numbers</h4>

<p>This one's slightly more difficult. There may be a more efficient way of doing this, I think using hashes, but in this case it's not so slow as it seems with two for loops. The inner loop only cycles through the list once per number of resulting list. So for instance, in a list of 9 values with a size of 3, the inner list iterates over up to 9 numbers only 3 times. That's very satisfactory performance to me, so it's not worth optimization.</p>

<p>First we sort the list in ascending order, then check if the math works out for the original list size and the size of the intended chopped lists. If not, immediately exit. After that, we pretty much just have the outer loop to keep passing over the list once per needed pass, then the inner loop takes the first item in the list and looks for consecutive numbers up to the requested list size. If it finds all of them it removes them from the list and adds them to their own results array. If it doesn't, it exits. This one took me about an hour or so, but came together eventually and I'm still getting faster!</p>

<pre><code>#!/bin/perl

use strict;
use v5.28;

my $size = shift;
my @list = sort @ARGV;

say '-1' and exit if scalar @list % $size != 0;
my $passes = (scalar @list / $size) - 1;

my @results;

for (my $i = 0; $i &lt;= $passes; $i++) {
    my $curr_digit = 0;
    push @{$results[$i]}, $list[0];
    for (my $j = 1; $j &lt;= $#list; $j++) {
        if ($list[$j] == $list[0] + $curr_digit + 1) {
            push @{$results[$i]}, $list[$j];
            splice (@list, $j, 1);
            if (scalar @{$results[$i]} == $size) {
                last;
            } else {
                $curr_digit++;
                $j--;
            }
        }
        if ($j == $#list and scalar @{$results[$i]} != $size) {say '-1' and exit}
    }
    splice (@list, 0, 1);
}

for (my $k = 0; $k &lt;= $#results; $k++) {
    say @{$results[$k]};
}
</code></pre>

<p>That's it for this week. Drop me a comment if you like!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge #212 - Spinning Letters and Chopping Numbers</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-212-spinning-letters-and-chopping-numbers-2kdc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Back already with this week's solutions to the PWC #212. Spoiler alert, because the challenge doesn't close for another few days if you want to have a try.</p>

<h4>
  
  
  Challenge #1 - Spinning Letters
</h4>

<p>This week we've got a simple letter rotation. Take each letter of the word provided and rotate it by each number in the list. At first I thought this would be a lot longer code. i even put it in a sub. That actually doubles the size though for absolutely no benefit, so I just simplified. We split the word, then loop through the letters and apply the rotation. If it wraps we start from the start of the alphabet. Upper-case is handled with a simple test to insert the right case of each character. Then we don't even bother putting the word back together again because we can just say it as-is.</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/bin/perl

use strict;
use v5.28;

my @letters = split(//, shift);
my @jumps = @ARGV;
my @new_word;

foreach (my $i = 0; $i &lt;= $#letters; $i++) {
    push @new_word, ord($letters[$i]) + $jumps[$i] &lt; (uc($letters[$i]) eq $letters[$i] ? 91 : 123) ? chr(ord($letters[$i]) + $jumps[$i]) : chr(ord($letters[$i]) + $jumps[$i] - 26);
}
say @new_word;
</code></pre>

</div>
<h4>
  
  
  Challenge #2 - Chopping Numbers
</h4>

<p>This one's slightly more difficult. There may be a more efficient way of doing this, I think using hashes, but in this case it's not so slow as it seems with two for loops. The inner loop only cycles through the list once per number of resulting list. So for instance, in a list of 9 values with a size of 3, the inner list iterates over up to 9 numbers only 3 times. That's very satisfactory performance to me, so it's not worth optimization.</p>

<p>First we sort the list in ascending order, then check if the math works out for the original list size and the size of the intended chopped lists. If not, immediately exit. After that, we pretty much just have the outer loop to keep passing over the list once per needed pass, then the inner loop takes the first item in the list and looks for consecutive numbers up to the requested list size. If it finds all of them it removes them from the list and adds them to their own results array. If it doesn't, it exits. This one took me about an hour or so, but came together eventually and I'm still getting faster!</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/bin/perl

use strict;
use v5.28;

my $size = shift;
my @list = sort @ARGV;

say '-1' and exit if scalar @list % $size != 0;
my $passes = (scalar @list / $size) - 1;

my @results;

for (my $i = 0; $i &lt;= $passes; $i++) {
    my $curr_digit = 0;
    push @{$results[$i]}, $list[0];
    for (my $j = 1; $j &lt;= $#list; $j++) {
        if ($list[$j] == $list[0] + $curr_digit + 1) {
            push @{$results[$i]}, $list[$j];
            splice (@list, $j, 1);
            if (scalar @{$results[$i]} == $size) {
                last;
            } else {
                $curr_digit++;
                $j--;
            }
        }
        if ($j == $#list and scalar @{$results[$i]} != $size) {say '-1' and exit}
    }
    splice (@list, 0, 1);
}

for (my $k = 0; $k &lt;= $#results; $k++) {
    say @{$results[$k]};
}
</code></pre>

</div>

<p>That's it for this week. Drop me a comment if you like!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-212-spinning-letters-and-chopping-numbers-2kdc</id>
    <published>2023-04-12T14:07:23Z</published>
    <updated>2023-04-12T14:07:23Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium ¬ª</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <title>Data::Table - Weekly Travelling in CPAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/c_y_fung/2023/04/datatable---weekly-travelling-in-cpan.html"/>
    <id>tag:blogs.perl.org,2023:/users/c_y_fung//3481.11074</id>
    <published>2023-04-11T15:30:50Z</published>
    <updated>2023-04-11T15:42:59Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<div style="text-align: center;">Destination: <a href="https://metacpan.org/pod/Data::Table">Data::Table</a></div>
<strong>Date of Latest Release: Feb 12, 2020<br>
Distribution: Data-Table<br>
Module version: 0.38<br>
Main Contributors: Yingyao Zhou (EZDB), Guangzhou Zou<br>
License: [perl]
</strong>

<p><br />
Near the Christmas in 2022, I played a data engineering challenge called "Hanukkah of Data 5783". You can find it on <a href="https://hanukkah.bluebird.sh/5783">https://hanukkah.bluebird.sh/5783</a> . Players can download data of either .CSV, .JSON or .SQLITE format.</p>

<p>The first* task is like this:</p>

<blockquote>... And their phone number was their last name spelled out. I didn‚Äôt know what that meant, but apparently before there were smartphones, people had to remember phone numbers or write them down. If you wanted a phone number that was easy-to-remember, you could get a number that spelled something using the letters printed on the phone buttons: like 2 has ‚ÄúABC‚Äù, and 3 ‚ÄúDEF‚Äù, etc."</blockquote>

<p><small>* There is a "zeroth" task on the calendar year.</small></p>

<p><br />
I didn't mind perish my skill on SQL, but these kinds of things immediately I thought of Perl, maybe there would be a subroutine like this: </p>

<pre>sub phonebutton {
    return 2 if $_[0] =~ /[abc]/;
    return 3 if $_[0] =~ /[def]/;
    return 4 if $_[0] =~ /[ghi]/;
    return 5 if $_[0] =~ /[jkl]/;
    return 6 if $_[0] =~ /[mno]/;
    return 7 if $_[0] =~ /[pqrs]/;
    return 8 if $_[0] =~ /[tuv]/;
    return 9 if $_[0] =~ /[wxyz]/;
}</pre>

<p>But what tools in Perl ecosystem could help me?</p>

<p>I found the CPAN module Data::Table. It is a tool for .xls and .csv file.</p>

<p>I use Data::Table to solve all those challenges. Data::Table has a very nice cookbook by its main author and can be found on <a href="https://sites.google.com/site/easydatabase/">https://sites.google.com/site/easydatabase/</a> .</p>

<p>Spoiler Alert: The following is how I solved one of the "Hanukkah of Data 5783" challenge. Here I suggest you reading the Data::Table cookbook (it is really nicely formatted and organized!) and try the Hanukkah of Data(it is really fun!) on yourself.<br />
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>

<p></p>

<p></p>

<p>Puzzle statement on Day 5: <a href="https://hanukkah.bluebird.sh/5783/5/">https://hanukkah.bluebird.sh/5783/5/</a></p>

<p>The point is to find a lady living in <i>Queens Village</i> and having a habit of buying a lot of pet food. There is a category of product started with "<i>PET</i>". So my strategy was looking for the top few people spending the greatest amount of money or buying largest amount of pet food over the course of time.</p>

<p>I had to combine three tables: the table of customer details (including name, phone number, birthday, living area, customer ID), the table of orders and the table of items on each item. To <i>combine</i> tables, there is usually a JOIN operation. Relational database users know there are <tt>LEFT_JOIN</tt>, <tt>RIGHT_JOIN</tt>, <tt>INNER_JOIN</tt> and <tt>FULL_JOIN</tt>(<tt>OUTER_JOIN</tt>). Data::Table supports these JOINs.</p>

<p>Use of <tt>subTable()</tt> makes the operations less consuming.</p>

<p><tt>sort([header], Data::Table::NUMBER, Data::Table::DESC)</tt> helped me to look for those pet lovers.</p>

<p>Here is my code:</p>

<pre>
# Day 5 of "Hanukkah of Data 5783"
use v5.30.0;
use warnings;

<p>use Data::Table;<br />
use List::Util qw/sum/;</p>

<p>my $t = Data::Table::fromCSV("noahs-customers.csv");<br />
my $u = Data::Table::fromCSV("noahs-orders.csv");<br />
my $v = Data::Table::fromCSV("noahs-orders_items.csv");</p>

<p>my $t_p = $t->match_pattern_hash(<br />
    '$_{citystatezip} =~ /Queens Village/'<br />
);</p>

<p>say $t_p->nofRow;</p>

<p>my $v_p = $v->match_pattern_hash(<br />
    '$_{sku} =~ /^PET/'<br />
);</p>

<p>my $u_p = $u->subTable([0..$u->nofRow-1], ["orderid", "customerid"]);</p>

<p>my $r = $t_p->join($u_p, Data::Table::INNER_JOIN, ['customerid'], ['customerid'])<br />
            ->join($v_p, Data::Table::LEFT_JOIN, ['orderid'], ['orderid'])<br />
            ->group(['customerid'], ['qty'], [ sum ], ['numofpetfood']);</p>

<p>$r->sort('numofpetfood', Data::Table::NUMBER, Data::Table::DESC);</p>

<p>say  $r->elm(0, "name"), " ", $r->elm(0, "phone"), " ", $r->elm(0, "numofpetfood");<br />
say  $r->elm(1, "name"), " ", $r->elm(1, "phone"), " ", $r->elm(1, "numofpetfood");<br />
</pre></p>

<p><br />
The difference of amount of purchases between the first pet food frequent buyer and the second pet food frequent buyer is huge. So there is no doubt who the person the puzzle is looking for.</p>

<p>I have put my solution of each day as <a href="https://gist.github.com/E7-87-83/c33a7e1575ec233b8b3e8a2a24a0ec1a">gists</a> on GitHub.</p>

<div style="text-align: center;">THE HIGHLIGHTED PERL MODULES OF WEEK 15 OF 2023:<br>Data::Table</div>]]>
        
    </content>
</entry>
  <entry>
    <title>4 More Unrelated Perl Tidbits</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/4-more-unrelated-perl-tidbits-ijm" type="text/html"/>
    <content type="html">&lt;p&gt;Last year I wrote an article titled &lt;a href="https://dev.to/nicholasbhubbard/4-unrelated-perl-tidbits-2766"&gt;4 Unrelated Perl Tidbits&lt;/a&gt;, where I talked about some random Perl facts I learned about from reading &lt;a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/"&gt;Programming Perl&lt;/a&gt;. In this article I will talk about 4 more random and interesting Perl features I have learned about since.&lt;/p&gt;

&lt;h3&gt;
  
  
  Built-Ins Can Be Overridden with Lexical Subroutines
&lt;/h3&gt;

&lt;p&gt;Perl version 5.18 introduced &lt;a href="https://perldoc.perl.org/perlsub#Lexical-Subroutines"&gt;lexical subroutines&lt;/a&gt;, which are often sometimes referred to as "my subs". An interesting characteristic of lexical subs is that unlike regular subroutines, they can override built-ins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;printing is banned&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
printing is banned
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If anybody has seen a use of this feature then please comment below.&lt;/p&gt;

&lt;h3&gt;
  
  
  Recursive Anonymous Subroutines With __SUB__
&lt;/h3&gt;

&lt;p&gt;Perl version 5.16 introduced the &lt;a href="https://perldoc.perl.org/functions/__SUB__"&gt;__SUB__&lt;/a&gt; special token that holds a reference to the current subroutine. You can use &lt;code&gt;__SUB__&lt;/code&gt; to make a recursive call in an anonymous subroutine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;higher_order_subroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;__SUB__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Goto Searches For Labels In The Dynamic Scope
&lt;/h3&gt;

&lt;p&gt;The following example shows that &lt;a href="https://perldoc.perl.org/functions/goto"&gt;goto&lt;/a&gt; searches for its label argument from within the current &lt;a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scope"&gt;dynamic scope&lt;/a&gt;. Note that this program just goes on forever printing &lt;code&gt;hello from after LABEL&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;goto&lt;/span&gt; &lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;LABEL:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello from after LABEL&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
hello from after LABEL
hello from after LABEL
hello from after LABEL
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is another feature that you should leave a comment about if you have seen a usage of it.&lt;/p&gt;

&lt;h3&gt;
  
  
  Regex Modifier For Only Portions Of The Regex
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;(?M:)&lt;/code&gt; pattern in a regex to turn on the modifier specified by &lt;code&gt;M&lt;/code&gt;, only inside the parentheses. For example, the following two regexs are the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;
&lt;span class="sr"&gt;/(?i:foo)/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also turn a modifier off with &lt;code&gt;(?-M:)&lt;/code&gt;, which is shown in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(?-i:foo)/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;does not match&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
does not match
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This feature is useful if you want to turn a modifier on/off for only a portion of the regex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;fooBAR&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(?-i:foo)bar/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;does not match&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
matches
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/4-more-unrelated-perl-tidbits-ijm</id>
    <published>2023-04-11T14:39:40Z</published>
    <updated>2023-04-11T14:39:40Z</updated>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6565167916220036160</id>
    <published>2023-04-08T21:36:00.000+02:00</published>
    <updated>2023-04-08T21:36:15.881+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxix) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RSAVAGE/Config-Tiny-2.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write .ini style files with as little code as possible
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.29&lt;/strong&gt; on 2023-04-05, with 33 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.28 was 1 year, 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RSAVAGE'&gt;RSAVAGE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.015&lt;/strong&gt; on 2023-04-04, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.013 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.3' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.16.3&lt;/strong&gt; on 2023-04-04, with 92 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.16.1 was 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TURNSTEP'&gt;TURNSTEP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.70&lt;/strong&gt; on 2023-04-02, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.68 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002002&lt;/strong&gt; on 2023-04-01, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002001 was  before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;12.60&lt;/strong&gt; on 2023-04-05, with 38 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 12.50 was 4 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXIFTOOL'&gt;EXIFTOOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/Log-Dispatch-2.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Dispatch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Dispatches messages to one or more outputs
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.71&lt;/strong&gt; on 2023-04-06, with 45 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.70 was 2 years, 8 months, 17 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.49&lt;/strong&gt; on 2023-04-06, with 47 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.48 was 3 months, 4 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TEODESIAN'&gt;TEODESIAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9703' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9703&lt;/strong&gt; on 2023-04-07, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9699 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.760' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.760&lt;/strong&gt; on 2023-04-06, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.759 was 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.004000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.004000&lt;/strong&gt; on 2023-04-05, with 134 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002001 was 2 months, 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6565167916220036160/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxix-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6565167916220036160"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6565167916220036160"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxix-11-great-cpan-modules-released.html" title="(cdxxxix) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7432531001375038847</id>
    <published>2023-04-08T21:33:00.001+02:00</published>
    <updated>2023-04-08T21:33:04.657+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dli) metacpan weekly report - Expect</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 62&lt;/p&gt;
&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Expect"&gt;Expect&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/08 19:31:58 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ApClient" target="_blank"&gt;App::ApClient&lt;/a&gt; - &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CveClient" target="_blank"&gt;App::CveClient&lt;/a&gt; - CLI-based client / toolbox for CVE.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/BitTorrent" target="_blank"&gt;BitTorrent&lt;/a&gt; - Perl extension for extracting, publishing and maintaining BitTorrent related things&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mac::Finder::DSStore" target="_blank"&gt;Mac::Finder::DSStore&lt;/a&gt; - Manipulates the Macintosh Finder's .DS_Store files.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MobileDetect" target="_blank"&gt;MobileDetect&lt;/a&gt; - The great new MobileDetect Library for Perl is finally available!	Perl Module for the PHP Toolchain Mobile Detect from https://github.com/serbanghita/Mobile-Detect .	More Information and development Tools can be found here https://www.buzzerstar.com/development/ and https://devop.tools/&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Passphrase" target="_blank"&gt;Mojolicious::Plugin::Passphrase&lt;/a&gt; - Securely hash and validate your passwords.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::OpenCV" target="_blank"&gt;PDL::OpenCV&lt;/a&gt; - PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&amp;gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&amp;lt;&lt;eof around="" bug="" c="" class2func2suffix="" classes="" doc="" doxy2pdlpod="" doxyparse="" else="" eof="" for="" fullclass="PDL::OpenCV::$c" genpp="" if="" li="" maybe_suffix="" module="${main::PDLMOD}" my="" n="cut\n\n" nnone.="" package="${main::PDLOBJ}" pod="" pp="" pp_addpm="" pp_addxs="" pp_bless="" topfuncs="" work=""&gt;
&lt;/eof&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Expand" target="_blank"&gt;String::Expand&lt;/a&gt; - string utility functions for expanding variables in
self-referential sets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::SenseClusters::LabelEvaluation" target="_blank"&gt;Text::SenseClusters::LabelEvaluation&lt;/a&gt; - Module for evaluation of labels of the clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone" target="_blank"&gt;Clone&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/constant::our" target="_blank"&gt;constant::our&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=282)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Template::XLSX" target="_blank"&gt;Excel::Template::XLSX&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+3=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Almighty" target="_blank"&gt;Exporter::Almighty&lt;/a&gt; (+2=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Tiny" target="_blank"&gt;Exporter::Tiny&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Interface" target="_blank"&gt;Function::Interface&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Parameters" target="_blank"&gt;Function::Parameters&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Repository" target="_blank"&gt;Git::Repository&lt;/a&gt; (+1=25)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL::Plugin::Convert::DBIC" target="_blank"&gt;GraphQL::Plugin::Convert::DBIC&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tee" target="_blank"&gt;IO::Tee&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=100)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema" target="_blank"&gt;JSON::Schema&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=116)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::xi" target="_blank"&gt;lib::xi&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=161)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=90)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=100)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IRC" target="_blank"&gt;Mojo::IRC&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=481)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DirectoryServer" target="_blank"&gt;Mojolicious::Plugin::DirectoryServer&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=295)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+2=176)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=406)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=36)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pinto" target="_blank"&gt;Pinto&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble" target="_blank"&gt;Regexp::Assemble&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Schedule::Cron" target="_blank"&gt;Schedule::Cron&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SDL" target="_blank"&gt;SDL&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable" target="_blank"&gt;Storable&lt;/a&gt; (+1=51)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Exporter" target="_blank"&gt;Sub::Exporter&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LWP::UserAgent" target="_blank"&gt;Test::LWP::UserAgent&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Output" target="_blank"&gt;Test::Output&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Gitignore" target="_blank"&gt;Text::Gitignore&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/UI::Dialog" target="_blank"&gt;UI::Dialog&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Variable::Declaration" target="_blank"&gt;Variable::Declaration&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=47)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7432531001375038847/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dli-metacpan-weekly-report-expect.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7432531001375038847"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7432531001375038847"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dli-metacpan-weekly-report-expect.html" title="(dli) metacpan weekly report - Expect"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7170877230212265320</id>
    <published>2023-04-08T21:31:00.000+02:00</published>
    <updated>2023-04-08T21:31:16.077+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;
Build date: 2023-04-08 19:30:39 GMT&lt;/p&gt;
&lt;hr/&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75953264" target="_blank"&gt;Perl Mojolicious: handling proxy timeouts&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75950313" target="_blank"&gt;How to convert hash to array without the use of intermediate variable?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75962399" target="_blank"&gt;Is it possible to turn on the -d flag to perl within a perl application and have it apply to itself?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75916916" target="_blank"&gt;Perl Mojolicious: chaining Promises&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75921069" target="_blank"&gt;Is the comma in Perl associative in all contexts?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7170877230212265320/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7170877230212265320"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7170877230212265320"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxviii-stackoverflow-perl-report.html" title="(dlxxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium ¬ª&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams ‚Äì The Hitchhiker‚Äôs Guide to the Galaxy</em></p>
</blockquote>
<p>I don‚Äôt still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site‚Äôs content.</p>
<p>Then, at some point, that changed. It wasn‚Äôt that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can‚Äôt guarantee they‚Äôll exist for every site you‚Äôre interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user‚Äôs posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API‚Äôs JSON into an Atom feed ‚Äì I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites‚Äô owners don‚Äôt realise they‚Äôre there or don‚Äôt know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they‚Äôre all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I‚Äôve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets ‚Äì so in the rest of this post I‚Äôll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you‚Äôll need is a GitHub account and a repo to store the code for your planet. I‚Äôm going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet ‚Äì a config file and a template for the web site.</p>
<p>Here‚Äôs part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I‚Äôve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let‚Äôs look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They‚Äôre also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for ‚ÄúOutline Processor Markup File‚Äù. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won‚Äôt be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we‚Äôll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed‚Äôs original web page</li>
</ul>
<p>And that‚Äôs all you need for the config file. Create that, put it in a file called ‚Äúperlanetrc‚Äù and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called ‚Äúindex.tt‚Äù. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler ‚Äì and should work well with the config file above. I suggest going with that initially and editing it once you‚Äôve got everything else working.</p>
<p>I said those are the only two files you need. And that‚Äôs true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you‚Äôll probably want to add your own CSS to tweak the way it looks ‚Äì along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we‚Äôll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies ‚Äì using ‚Äúcpan Perlanet‚Äù or there‚Äôs <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running ‚Äúperlanet‚Äù. That will trundle along for a while and, when it has finished, you‚Äôll find new files called ‚Äúindex.html‚Äù and ‚Äúatom.xml‚Äù in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run ‚Äúhttp_this docs‚Äù from the repo‚Äôs main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that‚Äôs connected to the internet and set up a cronjob to regenerate the file every few hours. And that‚Äôs how I used to run all of my planets. But, recently, I‚Äôve moved to running them on GitHub Pages instead. And that‚Äôs what we‚Äôll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let‚Äôs take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the ‚ÄúPages‚Äù section in your repo‚Äôs settings. Choose ‚ÄúGitHub Actions‚Äù as the deployment source and tick the box marked ‚ÄúEnforce HTTPS‚Äù. Later on, you can look at setting up a custom domain for your site but, for now, let‚Äôs stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You‚Äôll obviously have to create that directory first. Here‚Äôs the workflow definition for Planet Perl (it‚Äôs in a file called ‚Äúbuildsite.yml‚Äù, but that name isn‚Äôt important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The ‚Äúworkflow_dispatch‚Äù trigger adds a button to the repo‚Äôs ‚ÄúActions‚Äù page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs ‚Äì one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you‚Äôll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run ‚Äúperlanet‚Äù to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you‚Äôve created this file and added it to your repo, you‚Äôll see details of this workflow on the ‚ÄúActions‚Äù tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you‚Äôll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic ‚Äúperlanet‚Äù, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital‚Ä¶ <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions ‚Äì Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8„ÅÆÊñáÂ≠óÂàó„Çí1Ë°å„Åö„Å§Ë™≠„ÅøÂèñ„Çä„ÄÅÂêÑÊñáÂ≠ó„ÇíU+(16ÈÄ≤Êï∞)„ÅÆÂΩ¢Âºè„Å™„Å©„Å´Â§âÊèõ„Åó„Å¶„ÄÅ1Ë°å„Åö„Å§Âá∫Âäõ„Åô„Çã„ÄÇ</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>„Ç≥„Éû„É≥„Éâ„ÅÆÂá∫ÂäõÁµêÊûú„Çí„ÄÅGit„ÅÆ„É¨„Éù„Ç∏„Éà„É™„ÅÆ‰∏≠„ÅÆ„Éï„Ç°„Ç§„É´„Å´‰øùÁÆ°„Åô„Çã„ÄÇ</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>„Äå‰ΩïÈöéÂ±§ÊΩú„Å£„ÅüÊâÄ„Åã„ÇâÊúÄÂ§ß‰ΩïÈöéÂ±§‰∏ã„Åæ„Åß„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåÅ„Å§„Éá„Ç£„É¨„ÇØ„Éà„É™„Åå‰ΩïÂÄãÂ≠òÂú®„Åô„Çã„Åã„Äç„ÇíË°åÂàóÁä∂„Å´Á§∫„Åô„ÄÇ</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>ÊåáÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éï„Ç°„Ç§„É´ÂÖ®„Å¶(Áõ¥‰∏ã„ÅÆ„Åø„Åß„Å™„ÅÑ)„Å´ÂØæ„Åó„Å¶„ÄÅÊúÄÂæå„Å´Â§âÊõ¥„Åï„Çå„ÅüÈ†Ü„ÅßÁ∂≤ÁæÖÁöÑ„Å´Ë°®Á§∫„Åô„Çã„ÄÇ</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>‚Äì new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for ‚Ä¶ <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions ‚Äì Mar¬†2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Regex in python vs in perl</title>
    <link rel="alternate" href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/2600/0*vZMKz-sHEUjwbgNS" width="3024"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Regular expressions (regex) are a powerful tool for manipulating and searching text data. A regular expression is a sequence of characters&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;Continue reading on Medium ¬ª&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Maxwell Langford</name>
    </author>
    <id>https://medium.com/p/693f5a98ba90</id>
    <published>2023-03-29T17:06:53Z</published>
    <updated>2023-03-29T17:06:53.762000Z</updated>
    <category term="perl"/>
    <category term="regex-in-python"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Hack The Box Nunchucks Writeup</title>
    <link rel="alternate" href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1942/0*PEFYPGl9fZPn2zZb.png" width="1942"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Nunchucks is an easy Linux box created by TheCyberGeek on Hack The Box and I intend to hack it. Hello world, welcome to Haxez in this post&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;Continue reading on Medium ¬ª&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Haxez - Hacking Made Easy</name>
    </author>
    <id>https://medium.com/p/f6eef36a8363</id>
    <published>2023-03-26T13:01:25Z</published>
    <updated>2023-03-26T15:49:30.057000Z</updated>
    <category term="nunchuck"/>
    <category term="perl"/>
    <category term="ssti"/>
    <category term="hacking"/>
    <category term="hack-the-box-writeup"/>
  </entry>
  <entry>
  <title>Now Accepting: TPRC Proposals for 2024</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcproposals2024"/>
  <id>tag:news.perlfoundation.org,2023-03-22:/post/tprcproposals2024</id>
  <published>2023-03-22T15:23:23</published>
  <updated>2023-03-22T15:23:23</updated>
  <summary>
  <![CDATA[
      It‚Äôs time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. Please view the information, along with a sample RFP you can send to possible vendors here. When ready to submit your proposal, please use the same form. If you have any questions, please contact us at hello@perlfoundation.org 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/combo logo.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>It‚Äôs time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. <p>Please view the information, along with a sample RFP you can send to possible vendors <a href="https://forms.gle/tYHSK5XDw2p55qgx5">here</a>. When ready to submit your proposal, please <a href="https://forms.gle/tYHSK5XDw2p55qgx5">use the same form.</a><p> If you have any questions, please contact us at hello@perlfoundation.org .</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Report on Volunteerism in the Perl Community</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/reportonperlvolunteerism"/>
  <id>tag:news.perlfoundation.org,2023-03-21:/post/reportonperlvolunteerism</id>
  <published>2023-03-21T13:14:44</published>
  <updated>2023-03-21T13:14:44</updated>
  <summary>
  <![CDATA[
     This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering scenario within these communities and create techniques that will help in better management of volunteers. The Perl community is ideal for this research project as there is no single large corporate entity behind the communities. Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/11d7bbec952d46a9332b896177e91328c59d9a35/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. <p>
The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering
scenario within these communities and create techniques that will help in better management of volunteers. The Perl
community is ideal for this research project as there is no single large corporate entity behind the communities. <p><p> 
Please <a href="https://drive.google.com/file/d/1xlSSbqJnfpBMBZaxnjgC9JwbQwTMJ60c/view?usp=share_link">click here</a> to view the report in it's entirety. <p>
We will be discussing the report at the next Community and Reps meeting, which will be held on April 21st at 17:30 UTC. <p> 
To join the meeting virtually, please follow <a href="https://us02web.zoom.us/j/89049224605?pwd=cU5sTVdDR0x4bnRFQU4zR2dRQ0o2dz09">this Zoom link. </a> <p>
Meeting ID: 890 4922 4605<p>
Passcode: 8675309<p>
We hope to see you at the meeting and look forward to your input. <p> </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Input Requested - Future of TPRF website(s)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/websiteproposalcall"/>
  <id>tag:news.perlfoundation.org,2023-03-20:/post/websiteproposalcall</id>
  <published>2023-03-20T19:06:24</published>
  <updated>2023-03-20T19:06:24</updated>
  <summary>
  <![CDATA[
     TPRF is looking for community input on the future of the TPRF website We are asking for community members to submit proposals for the Perl/Raku website The proposals would ideally address the following: Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPRF is looking for community input on the future of the TPRF website(s). <p>
We are asking for community members to submit proposals for the Perl/Raku website(s). The proposals would ideally address the following: <p><p>
* Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language specific donations?<p>
* An approach to the professional graphic designing of the website (Please provide links to any examples/existing websites that show what a website along these lines would look like)<p>
* Cost to deploy<p>
* Ongoing costs for technical aspects and maintenance<p></p>

<p>Suggestions should also be:<p>
1. Template-based, for custom branding<p>
2. easy to add, update, move and delete content<p>
3. customizable menus<p>
4. mobile friendly<p>
5. multi-domain support<p>
6. access to logs etc for analysis and SEO purposes<p><p><p>
You can submit your ideas using our form template at https://forms.gle/s9uKWorzQ3GSHe8JA OR you can submit a free form proposal to board@perlfoundation.org</p>

    ]]>
  </content>
</entry>
</feed>
