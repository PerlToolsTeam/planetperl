<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-02-20T16:47:40Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Some tricks for prettier xs</title>
    <link rel="alternate" href="http://blogs.perl.org/users/leon_timmermans/2022/02/some-tricks-for-prettier-xs.html"/>
    <id>tag:blogs.perl.org,2022:/users/leon_timmermans//150.10705</id>
    <published>2022-02-20T11:52:01Z</published>
    <updated>2022-02-20T14:35:56Z</updated>
    <author>
        <name>Leon Timmermans</name>
        <uri>http://codespeaks.blogspot.com/</uri>
    </author>
    <category term="xs" label="xs" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/leon_timmermans/">
        <![CDATA[<p>XS has a reputation of being ugly and cumbersome, but in my experience, it doesn't have to be. Let's take for example this snippet from my <code>Thread::Csp::Promise</code> class:</p>

<pre>
MODULE = Thread::Csp PACKAGE = Thread::Csp::Promise PREFIX = promise_

<p>SV* promise_get(Promise* promise)</p>

<p>bool promise_is_finished(Promise* promise)</p>

<p>SV* promise_get_notifier(Promise* promise)<br />
</pre></p>]]>
        <![CDATA[<p>How did I write XS with so little code/boilerplate? By using XS the way it was originally intended: to glue Perl and C together, not to implement any behavior.</p>

<h2>No CODE</h2>
A lot of people seem to think you need a <code>CODE</code> block in your XS functions, but often you don't. For example 
<pre>
SV* promise_get(Promise* promise)
</pre>
is actually equivalent to 
<pre class=code>
SV* promise_get(Promise* promise)
CODE:
    RETVAL = promise_get(promise);
OUTPUT:
    RETVAL
</pre>
By giving the `promise_get` function the right shape and name, I don't need to write any of that.

<p>This doesn't only mean less code (which is always good), it also means that it's much easier to split a large amount of code into multiple files, as doing this in C is much easier than doing it in XS (e.g. DBI.xs is 5700 lines). This aids in making your project more maintainable.</p>

<h2>No K&R</h2>
The second thing you may notice is that I'm declaring the types of the arguments in ANSI style (within the parentheses), not the common K&R style like:
<pre>
SV*
promise_get(promise)
    Promise* promise;
</pre>
The author of perlxs and perlxstut was clearly fond of K&R style, and everyone seems to have copied it from the documentation, but ANSI style is far more familiar to most people, and less repetitive. While the K&R style can do a few things ANSI style can't (e.g. with regards to custom conversions), it's very uncommon to need any of that.

<h2>Typemaps</h2>
To convert from arguments from Perl values to C values, and vice-versa for the return values, I used type maps. 

<pre>
TYPEMAP
Promise* T_PROMISE

<p>INPUT<br />
T_PROMISE<br />
        $var = sv_to_promise($arg)</p>

<p>OUTPUT<br />
T_PROMISE<br />
        $arg = promise_to_sv($var);<br />
</pre></p>

<p>Using these templates, you don't need the XS or the individual functions to worry about type conversions for the most common argument types.</p>

<h2>Prefix</h2>
All the XS packages in my module are defined with a prefix:
<pre>
MODULE = Thread::Csp PACKAGE = Thread::Csp::Promise PREFIX = promise_
</pre>
That way I can namespace my C functions to all start with `promise_`, but on the Perl side <code>promise_get</code> will be a sub called <code>get</code> (in the package <code>Thread::Csp::Promise</code>).

<h2>C_ARGS</h2>
I still had one function where the default glue code didn't quite cut it, because that had a slurpy argument so I couldn't map arguments 1-on-1. Instead of using a `CODE` block here, I used the <code>C_ARGS</code> to override only how the arguments are passed from Perl to C, without overriding any of the rest of the code generation. And then I defined a helper that turns the arguments on the stack into an array that is passed to the function.
<pre class=code>
Promise* thread_spawn(SV* class, SV* module, SV* function, ...)
        C_ARGS:
                slurp_arguments(1)
</pre>]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5146971702396319142</id>
    <published>2022-02-19T15:07:00.000+01:00</published>
    <updated>2022-02-19T15:07:22.215+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxx) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/App-Staticperl-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Staticperl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - perl, libc, 100 modules, all in one standalone 500kb file &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 years, 3 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carmel-v0.1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carmel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN Artifact Repository Manager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.1.39&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v0.1.38 was 3 years, 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Code-TidyAll-0.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.81&lt;/strong&gt; on 2022-02-17&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.80 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.15.1' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15.1&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.0 was 8 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Dist-Milla-v1.0.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Milla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution builder, Opinionated but Unobtrusive &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.0.21&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: v1.0.20 was 3 years, 9 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Getopt-Long-Complete-0.316' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Complete&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A drop-in replacement for Getopt::Long, with shell tab completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.316&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.315 was 1 year, 7 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 9 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.075&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.074 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20220217' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220217&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 123&lt;/li&gt;  &lt;li&gt;Previous version: 20211029 was 3 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 158&lt;/li&gt;  &lt;li&gt;Previous version: 1.60 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9505' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9505&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9503 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.608' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.608&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.607 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5146971702396319142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html" title="(ccclxxx) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5789931256339380794</id>
    <published>2022-02-19T15:03:00.003+01:00</published>
    <updated>2022-02-19T15:03:39.700+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-02-19 14:03:11 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71115578" target="_blank"&gt;Match a float and multiply by 100&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71131916" target="_blank"&gt;Perl Regex Query - filter the contents inside the file which are older than 18 months&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71167693" target="_blank"&gt;How can I overwrite file after replace the word?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71147634" target="_blank"&gt;I have a problem trying to put single quotes around a text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71113863" target="_blank"&gt;perl compilation: 'Too many levels of symbolic links'&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5789931256339380794/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html" title="(dxxii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Triangles and rectangles</title>
    <link rel="alternate" href="https://dev.to/simongreennet/triangles-and-rectangles-45p8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  <a href="#weekly-challenge-152">
  </a>
  Weekly Challenge 152
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-152/">The challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-152/sgreen">My solution</a></p>

<h2>
  <a href="#task-1-triangle-sum-path">
  </a>
  TASK #1 › Triangle Sum Path
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a triangle array.</p>

<p>Write a script to find the minimum sum path from top to bottom.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This one appear to be quick and easy. Take the input and using the <a href="https://docs.python.org/3.8/library/json.html">json</a> module (<a href="https://metacpan.org/pod/JSON">JSON</a> in Perl) turn it into an array of arrays. Then sum up the lowest number in each row, and display the result.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py "[ [1], [5,3], [2,3,4], [7,1,0,2], [6,4,5,2,8] ]"
8

$ ./ch-1.py "[ [5], [2,3], [4,1,5], [0,1,2,3], [7,2,4,1,9] ]"
9
</code></pre>

</div>



<h2>
  <a href="#task-2-rectangle-area">
  </a>
  TASK #2 › Rectangle Area
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given coordinates bottom-left and top-right corner of two rectangles in a 2D plane.</p>

<p>Write a script to find the total area covered by the two rectangles.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Originally I thought this challenge was impossible, as two intersecting rectangles could have any shape intersecting it. But then realized from the examples that we were only talking about rectangles that aren't tilted.</p>

<p>For this task, I create a class (package in Perl) to represent a rectangle. It makes sure that <code>x1</code> and <code>y1</code> represents the bottom left and <code>x2</code> and <code>y2</code> represents the top right. It also has an <code>area</code> method that returns the area of the rectangle.</p>

<p>With that part done, the rest of the code works like this:</p>

<ol>
<li>Take the first eight things that look like an integer from the command line.</li>
<li>Create <code>rect1</code> with the first four numbers.</li>
<li>Create <code>rect2</code> with the next four numbers.</li>
<li>Set <code>area</code> to be the area of the two rectangles, ignoring any overlap.</li>
<li>Calculate the overlap. The bottom left will be the maximum of <code>x1</code> and <code>y1</code> of the two rectangles. The top right will be the minimum of <code>x2</code> and <code>y2</code>.</li>
<li>If there is an overlap (<code>x1 &lt; x2</code> and <code>y1 &lt; y2</code>), create another rectangle object and subtract its area from step 4.</li>
<li>Print the number.</li>
</ol>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py "(-1,0), (2,2) (0,-1), (4,4)"
22

$ ./ch-2.py "(-3,-1), (1,3) (-1,-3), (2,2)"
25
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/triangles-and-rectangles-45p8</id>
    <published>2022-02-19T10:59:57Z</published>
    <updated>2022-02-19T10:59:57Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Please help test big pull request for DBD::Oracle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/02/please-help-test-big-pull-request-for-dbdoracle.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10695</id>
    <published>2022-02-17T08:18:32Z</published>
    <updated>2022-02-17T08:20:35Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>This large pull request hopes to solve segfault at cleanup and problems with multiple charsets in multiple connections to Oracle.</p>

<p>If you use DBD::Oracle please grab the PR and give it a try, then send your feedback.</p>

<p><a href="https://github.com/perl5-dbi/DBD-Oracle/pull/147">https://github.com/perl5-dbi/DBD-Oracle/pull/147</a></p>]]>
        
    </content>
</entry>
  <entry>
  <title>RakuAST Grant 2022-01 update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2022-02-raku-ast-grant"/>
  <id>tag:news.perlfoundation.org,2022-02-16:/post/2022-02-raku-ast-grant</id>
  <published>2022-02-16T12:32:39</published>
  <updated>2022-02-16T12:32:39</updated>
  <summary>
  <![CDATA[
     After a bit of a pause, Jonathan Worthington has continued his work on the RakuAST grant. Find his progress report below. In addion, you might want to check out this really cool post about embedding BASIC in Raku based on the RakuAST branch. Things have moved slowly on the RakuAST work of late, between me needing more of a breather that I imagined after the new dispatch mechanism work, along 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>After a bit of a pause, Jonathan Worthington has continued his work on the RakuAST grant. Find his progress report below.</p>

<p>In addion, you might want to check out this <a href="https://www.reddit.com/r/rakulang/comments/siypcz/raku_is_going_basic/">really cool post about embedding BASIC in Raku based on the RakuAST branch</a>.</p>

<hr />

<p>Things have moved slowly on the RakuAST work of late, between me needing more of a breather that I imagined after the new dispatch mechanism work, along with a demanding work assignment. In January, I managed to get a few small bits of progress, however:</p>

<ul>
<li>Compile literal radix numbers; these do not get a node type, but just become a <code>RakuAST::IntLiteral</code> or <code>RakuAST::RatLiteral</code>, since they are just another syntax for writing those</li>
<li>Add RakuAST nodes for the non-literal forms of radix numbers</li>
<li>More lazily check for undeclared variables in the RakuAST-based compiler, such that we don't give bogus errors in string interpolations</li>
<li>Align the compile-time and runtime semantics of quotewords (the current compiler uses different code-paths for them, and using a single one showed up a discrepancy)</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>5 cool Perl/Raku or Programming links</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h4>
  <a href="#1-nice-testimonial-about-perl">
  </a>
  1. <a href="https://youtu.be/FQXjLG0DjPo">Nice testimonial about Perl</a>
</h4>

<h4>
  <a href="#2-go-perf-from-version-12-to-118">
  </a>
  2. <a href="https://benhoyt.com/writings/go-version-performance/">Go perf from version 1.2 to 1.18</a>
</h4>

<h4>
  <a href="#3-an-ode-to-ruby">
  </a>
  3. <a href="https://blog.yboulkaid.com/2022/01/10/ode-to-ruby.html">An ode to ruby</a>
</h4>

<h4>
  <a href="#4-rdbms-genealogy">
  </a>
  4. <a href="https://hpi.de/fileadmin/user_upload/fachgebiete/naumann/projekte/RDBMSGenealogy/RDBMS_Genealogy_V6.pdf">RDBMS genealogy</a>
</h4>

<h4>
  <a href="#5-pragmatic-perl-interviews">
  </a>
  5. <a href="http://pragmaticperl.com/interviews-book/pragmaticperl-interviews-a4.pdf">Pragmatic Perl interviews</a>
</h4>

<p>I wish you a pleasant reading! 😁</p>

</div>
    </content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh</id>
    <published>2022-02-16T10:43:37Z</published>
    <updated>2022-02-16T10:43:37Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="mysql"/>
    <category term="go"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 151: Binary tree Depth</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/02/perl-weekly-challenge-151-binary-tree-depth.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10680</id>
    <published>2022-02-14T03:44:10Z</published>
    <updated>2022-02-15T19:30:55Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 151 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-151/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Binary Tree Depth</h2>

<p><em>You are given binary tree.</em></p>

<p><em>Write a script to find the minimum depth.</em></p>

<blockquote>
  <p><em>The minimum depth is the number of nodes from the root to the nearest leaf node (node without any children).</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: '1 | 2 3 | 4 5'

                1
               / \
              2   3
             / \
            4   5

Output: 2
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: '1 | 2 3 | 4 *  * 5 | * 6'

                1
               / \
              2   3
             /     \
            4       5
             \
              6
Output: 3
</code></pre>

<p>The first obvious way to solve this task is to build the tree from the input string and then to walk through it to find the minimum depth. I&#8217;ve decided to try another approach: scan the input string to try to find directly the minimum depth. I <em>think</em> this approach works fine, but I may have missed some edge case. I wish I could explain the idea with more details, but I&#8217;m running out of time.</p>

<h3>Binary Tree Depth in Raku</h3>

<pre><code>use v6;

sub min-depth (Str $tree) {
    my @ranks = split /'|'/, $tree;
    return "depth: 1" if @ranks == 1;
    for 1..@ranks.end -&gt; $i {
        my @nodes = @ranks[$i] ~~ m:g/'*' | \d+/;
        return "depth: {$i}" if @nodes.elems + 1 &lt; 2 ** $i and $i == @ranks.end;
        return "depth: {$i+1}" if @nodes.elems + 1 &lt;= 2 ** $i ;
        for (@ranks[$i]).comb(/\S+/) -&gt; $a, $b {
            return "depth: $i" if $a eq $b eq '*';
        }
    return "depth: {$i+1}" if $i == @ranks.end;
    }
}

for '1 ',   '1 |',   '1 | 2 3', 
    '1 | 2 3 | 4 5', 
    '1 | 2 3 | 4 *  * 5 | * 6',
    '1 | 2 3 | * *  4 5 | * * 6',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 14 ',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 ',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 '
    -&gt; $test {
    printf "%-45s -&gt; %s\n", "'$test'", min-depth $test
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./min_depth.raku
'1 '                                          -&gt; depth: 1
'1 |'                                         -&gt; depth: 1
'1 | 2 3'                                     -&gt; depth: 2
'1 | 2 3 | 4 5'                               -&gt; depth: 2
'1 | 2 3 | 4 *  * 5 | * 6'                    -&gt; depth: 3
'1 | 2 3 | * *  4 5 | * * 6'                  -&gt; depth: 2
'1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 14 '   -&gt; depth: 4
'1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 '      -&gt; depth: 4
'1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 '         -&gt; depth: 3
</code></pre>

<h3>Binary Tree Depth in Perl</h3>

<pre><code>use strict;
use warnings;
use feature "say";

sub min_depth {
    my $tree = shift;
    my @ranks = split /\|/, $tree;
    return "depth: 1" if @ranks == 1;
    for my $i (1..$#ranks) {
        # say $ranks[$i];
        my @nodes = ($ranks[$i] =~ /\*|\d+/g);
        # say "@nodes";
        return "depth: $i" if @nodes + 1 &lt; 2 ** $i and $i == $#ranks;
        return "depth: " . ($i+1) if @nodes + 1 &lt;= 2 ** $i ;
        my $j = 0;
        while ($j &lt;= $#nodes) {
            return "depth: $i" if $nodes[$j] eq '*' and $nodes[$j+1] eq '*';
            $j += 2;
        }
        return "depth: ". ($i + 1) if $i + 1 == @ranks;
    }
}

for my $test ( '1 ',   '1 |',   '1 | 2 3', 
    '1 | 2 3 | 4 5', 
    '1 | 2 3 | 4 *  * 5 | * 6',
    '1 | 2 3 | * *  4 5 | * * 6',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 14 ',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 ',
    '1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 ' ) {
        printf "%-42s -&gt; %s\n", "$test", min_depth($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./min-depth.pl
1                                          -&gt; depth: 1
1 |                                        -&gt; depth: 1
1 | 2 3                                    -&gt; depth: 2
1 | 2 3 | 4 5                              -&gt; depth: 2
1 | 2 3 | 4 *  * 5 | * 6                   -&gt; depth: 3
1 | 2 3 | * *  4 5 | * * 6                 -&gt; depth: 2
1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13 14   -&gt; depth: 4
1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12 13      -&gt; depth: 4
1 | 2 3 | 4 4 5 6 | 7 8 9 10 11 12         -&gt; depth: 3
</code></pre>

<h2>Task 2: Rob the House</h2>

<p><em>You are planning to rob a row of houses, always starting with the first and moving in the same direction. However, you can’t rob two adjacent houses.</em></p>

<p><em>Write a script to find the highest possible gain that can be achieved.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @valuables = (2, 4, 5);
Output: 7

If we rob house (index=0) we get 2 and then the only house we can rob is house (index=2) where we have 5.
So the total valuables in this case is (2 + 5) = 7.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @valuables = (4, 2, 3, 6, 5, 3);
Output: 13

The best choice would be to first rob house (index=0) then rob house (index=3) then finally house (index=5).
This would give us 4 + 6 + 3 =13.
</code></pre>

<h3>Rob the House in Raku</h3>

<p>We use a <code>get_best</code> recursive subroutine to explore all combinations of values, except that we don&#8217;t need to look ahead more than 2 values.</p>

<pre><code>use v6;

sub get_best(@in, $sum-so-far is copy) {
    if @in.elems &lt;= 2  {
        $sum-so-far += @in.max;
        $*best-so-far = $sum-so-far if $sum-so-far &gt; $*best-so-far;
        return;
    }      
    for 0, 1 -&gt; $i {
        get_best @in[$i + 2 .. @in.end], $sum-so-far + @in[$i];
    }
}
my @valuables = (2, 4, 5), (4, 2, 3, 6, 5, 3), (4, 2, 5, 10);
for @valuables -&gt; $test {
    my $*best-so-far = 0;  # dynamic scope variable
    get_best $test, 0;
    say $test, " -&gt; ", $*best-so-far;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./robber.raku
(2 4 5) -&gt; 7
(4 2 3 6 5 3) -&gt; 13
(4 2 5 10) -&gt; 14
</code></pre>

<h3>Rob the House in Perl</h3>

<p>We also use a <code>get_best</code> recursive subroutine to explore all combinations of values.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $best_so_far;

sub get_best {
    my $sum_so_far = $_[0];
    my @in = @{$_[1]};

    if (@in &lt;= 2)  {
        $sum_so_far += $in[0] if @in == 1;
        $sum_so_far += $in[1] if @in == 2;    
        $best_so_far = $sum_so_far if $sum_so_far &gt; $best_so_far;
        return;
    }
    for my $i (0, 1) {
        get_best($sum_so_far + $in[$i], [@in[$i + 2 .. $#in]]);
    }
}

my @valuables = ([2, 4, 5], [4, 2, 3, 6, 5, 3], [4, 2, 5, 10]);
for my $test (@valuables) {
    $best_so_far = 0; 
    get_best 0, $test;
    say "@$test -&gt; ", $best_so_far;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./robber.pl
2 4 5 -&gt; 7
4 2 3 6 5 3 -&gt; 13
4 2 5 10 -&gt; 14
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on February 20, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#551 - Nothing to do with Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/551.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago I wrote about Wordle and that it has 'Nothing to do with Perl'. Within a few hours Saif Ahmed proved me wrong and <a href="https://www.reddit.com/r/perl/comments/siuqy9/nothing_to_do_with_perl/">posted</a> an implementation of Wordle in Perl. That's the spirit!</p>
<p>On a totally different topic, but still nothing to do with Perl: I just saw someone I know from the Perl community posting yet another disgusting accusation against Israel. As people more clever than me said: 'In the Middle Ages, Jews were accused of killing Christ. In the nineteenth and early twentieth century they were accused of ruining the nations where they lived. Today they are accused of apartheid, genocide, and having concentration camps'. Some people always find ways to blame the Jews for the crimes that are considered the worst by the contemporary civilization. Why am I writing about this, you ask? Because it hurts me a lot. You can't do much about it, but I hope that whenever you hear or see something horrific thing that Israel is accused of, you will double and triple-check it before you accept it as truth, 'like' it, or 'share' it. I hope you'll remember that an awful lot of misinformation is spread by people. Both by people who have an agenda against Jews and people who fall for true-looking lies.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/551.html</id>
    <published>2022-02-14T10:00:00Z</published>
    <updated>2022-02-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Outreachy participation - looking for mentors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy-2022"/>
  <id>tag:news.perlfoundation.org,2022-02-13:/post/outreachy-2022</id>
  <published>2022-02-13T13:24:02</published>
  <updated>2022-02-13T13:24:02</updated>
  <summary>
  <![CDATA[
     Last year The Perl Foundation participated in Outreachy May to August internships and it was successfully completed. We are looking to participate again this year. At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the Mentor description and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Last year The Perl Foundation participated in <a href="https://www.outreachy.org/">Outreachy</a> May to August internships and <a href="https://news.perlfoundation.org/post/outreachy2021-complete">it was successfully completed</a>. We are looking to participate again this year.</p>

<p>At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the <a href="https://www.outreachy.org/mentor/#mentor">Mentor description</a> and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per week during the program period.</p>

<p>We also have a Perl/Raku Outreachy discussion forum at <a href="https://groups.google.com/forum/#!forum/perl-foundation-outreach">Google Groups</a>.</p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>Outreachy explicitly invites applicants from around the world who are women (cis and trans), trans men, and genderqueer people. Additionally, they explicitly invite residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latino, American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces systemic bias or discrimination in the technology industry of their country is invited to apply.  </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Dancer2: Testing Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-13T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world-testing"/>  <id>https://perlmaven.com/dancer2-hello-world-testing</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-199753803360436326</id>
    <published>2022-02-12T22:24:00.000+01:00</published>
    <updated>2022-02-12T22:24:32.675+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxix) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.027&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.025 was 6 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Daemon-6.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Daemon&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple http server class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.13&lt;/strong&gt; on 2022-02-09&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.12 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-2.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OAuth2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Auth against OAuth2 APIs including OpenID Connect &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 3 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.074&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.072 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9503' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9503&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9501 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/199753803360436326/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html" title="(ccclxxix) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-693526630317332364</id>
    <published>2022-02-12T22:20:00.002+01:00</published>
    <updated>2022-02-12T22:20:21.162+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcviii) metacpan weekly report - Net::Prometheus</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 25&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Net::Prometheus" target="_blank"&gt;Net::Prometheus (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/02/12 21:20:00 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::OpenSSH::Authkey" target="_blank"&gt;Config::OpenSSH::Authkey&lt;/a&gt; - interface to OpenSSH authorized_keys data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Intertangle::API::Gtk3" target="_blank"&gt;Intertangle::API::Gtk3&lt;/a&gt; - Provides helpers for dealing with Gtk3 code&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdown::Parser" target="_blank"&gt;Markdown::Parser&lt;/a&gt; - Markdown Parser Only&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPi::Pin" target="_blank"&gt;RPi::Pin&lt;/a&gt; - Access and manipulate Raspberry Pi GPIO pins&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UniEvent::WebSocket" target="_blank"&gt;UniEvent::WebSocket&lt;/a&gt; - Extremely efficient asynchronous WebSocket Client and Server&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Easer" target="_blank"&gt;App::Easer&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ask" target="_blank"&gt;Ask&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::X509" target="_blank"&gt;Crypt::OpenSSL::X509&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::X509" target="_blank"&gt;Crypt::X509&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FCGI" target="_blank"&gt;FCGI&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FCGI::Daemon" target="_blank"&gt;FCGI::Daemon&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Github::Backup" target="_blank"&gt;Github::Backup&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::ImageView" target="_blank"&gt;Gtk3::ImageView&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::SourceView" target="_blank"&gt;Gtk3::SourceView&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Prometheus" target="_blank"&gt;Mojolicious::Plugin::Prometheus&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neovim::RPC" target="_blank"&gt;Neovim::RPC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Amazon::DynamoDB" target="_blank"&gt;Net::Amazon::DynamoDB&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl" target="_blank"&gt;Net::Curl&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Prometheus" target="_blank"&gt;Net::Prometheus&lt;/a&gt; (+2=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Validate::Tiny" target="_blank"&gt;Validate::Tiny&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/693526630317332364/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/cdxcviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/693526630317332364"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/693526630317332364"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/cdxcviii-metacpan-weekly-report.html" title="(cdxcviii) metacpan weekly report - Net::Prometheus"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2209167476163637570</id>
    <published>2022-02-12T22:19:00.001+01:00</published>
    <updated>2022-02-12T22:19:28.705+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-02-12 21:18:59 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71066691" target="_blank"&gt;DBD::SQLite Placeholder for integer value in HAVING clause&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71069644" target="_blank"&gt;Why are these values sometimes undefined?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71033653" target="_blank"&gt;Perl backticks using bash&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71088564" target="_blank"&gt;How do I put a conditional and a loop in the same line?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71002784" target="_blank"&gt;Perl: Removing leftover anchor tags from a string&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2209167476163637570/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2209167476163637570"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2209167476163637570"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxi-stackoverflow-perl-report.html" title="(dxxi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 87: Sidef</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d" type="text/html"/>
    <content type="html">&lt;p&gt;Sidef is a prototype programming language, describing itself as inspired by Ruby, Raku, and Julia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-on-osx"&gt;
  &lt;/a&gt;
  Installation on OSX
&lt;/h3&gt;

&lt;p&gt;It's not that easy to run Sidef. It runs on Perl 5 platform and you can install it through CPAN, but you'll run into serious problems.&lt;/p&gt;

&lt;p&gt;Perl version bundled with OSX is not really recommended, so I used brew version. Unfortunately if we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install perl
$ cpan Sidef
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will install &lt;code&gt;sidef&lt;/code&gt; in &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt;, but it's hardcoded to use system Perl.&lt;/p&gt;

&lt;p&gt;So I needed two additional steps. Symlink &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt; to some place in &lt;code&gt;$PATH&lt;/code&gt; like &lt;code&gt;ln -s ~/.cpan/build/Sidef-3.99-0/bin/sidef ~/bin/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And edit &lt;code&gt;sidef&lt;/code&gt; program to change its first line from &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to &lt;code&gt;#!/usr/bin/env perl&lt;/code&gt; so it will use the proper version, not the outdated one from OSX.&lt;/p&gt;

&lt;p&gt;After all these steps, we're ready to go.&lt;/p&gt;

&lt;p&gt;This is definitely something Sidef should just handle better. Oh and there's no VSCode syntax highlighting for Sidef. Often even very rarely used language have some.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Hello, World is completely unsurprising. No ugly semicolons here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say "Hello, World!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.sf
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Sidef indeed looks like something between Ruby, Raku, and Julia.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

(1..100).each { |n|
  if (n % 15 == 0) {
    say "FizzBuzz"
  } elsif (n % 5 == 0) {
    say "Buzz"
  } elsif (n % 3 == 0) {
    say "Fizz"
  } else {
    say n
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;range &lt;code&gt;1..100&lt;/code&gt; goes from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;there are no &lt;code&gt;...&lt;/code&gt; ranges&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{|args| ...}&lt;/code&gt; blocks look like Ruby, but they're not used quite in the same way&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt;  &lt;code&gt;elsif&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; requires &lt;code&gt;()&lt;/code&gt;s and &lt;code&gt;{}&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#blocks"&gt;
  &lt;/a&gt;
  Blocks
&lt;/h3&gt;

&lt;p&gt;Ruby blocks have special place in the language, and block argument is a separate thing from normal arguments. Not so in Sidef.&lt;/p&gt;

&lt;p&gt;Sidef has very high level of syntax flexibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func twice(f) {
  say "Running it twice:"
  f()
  f()
}

var hi = { say "Hi!" }
twice(hi)
twice({ say "Hello!" })
twice { say "This does not work!" }

say ""
say "Iteration:"
{ |i| say "Block got: #{i}" }.each(10..12)
{ |i| say "Block got: #{i}" } &amp;lt;&amp;lt; 13..14
for 15..16 { |i| say "Block got: #{i}" }
(17..18).each { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i+19}" } * 2
2.times { |i| say "Block got: #{i+21}" }

say ""
say "Single argument:"
60 |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; :inc |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {|i| i + 2} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {_+3} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; (:add, 4) |&amp;gt; { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i}" }(69)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./blocks.sf
Running it twice:
Hi!
Hi!
Running it twice:
Hello!
Hello!

Iteration:
Block got: 10
Block got: 11
Block got: 12
Block got: 13
Block got: 14
Block got: 15
Block got: 16
Block got: 17
Block got: 18
Block got: 19
Block got: 20
Block got: 21
Block got: 22

Single argument:
Block got: 60
Block got: 61
Block got: 62
Block got: 63
Block got: 64
Block got: 69
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything here works except for Ruby-style &lt;code&gt;twice { say "This does not work!" }&lt;/code&gt; which does literally nothing, and I'm not sure why.&lt;/p&gt;

&lt;p&gt;There are some debugging tools like &lt;code&gt;-c compile the code into a Perl program&lt;/code&gt; and &lt;code&gt;-D dump the syntax tree of a program&lt;/code&gt;, but the result is not really human readable.&lt;/p&gt;

&lt;p&gt;I thought &lt;code&gt;-k keep track of potential unsafe parser interpretations&lt;/code&gt; might say something about it, but that also doesn't say anything.&lt;/p&gt;

&lt;p&gt;Having high degree of syntax flexibility is not that important for normal programming, but it's great for DSLs as it makes it easier for DSLs to pick something that works for them.&lt;/p&gt;

&lt;p&gt;Especially the &lt;code&gt;|&amp;gt;&lt;/code&gt; code is very cute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Sidef supports &lt;code&gt;is cached&lt;/code&gt; for memoization for free, which is a common enough use case that I don't know why more languages don't do this. There are also ways to clear the cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func fib(n) is cached {
  return 1 if (n &amp;lt;= 2)
  fib(n - 1) + fib(n - 2)
}

(1..100).each {|n|
  say "fib(#{n}) = #{fib(n)}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.sf
fib(1) = 1
fib(2) = 1
fib(3) = 2
...
fib(98) = 135301852344706746049
fib(99) = 218922995834555169026
fib(100) = 354224848179261915075
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#operator-precedence"&gt;
  &lt;/a&gt;
  Operator Precedence
&lt;/h3&gt;

&lt;p&gt;Sidef tries to be too cute with precedence rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say(2+3*4+5)
say(2 + 3 * 4 + 5)
say(2 + 3*4 + 5)
say(2+3 * 4+5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prints 4 different results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./math.sf
29
25
19
45
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sidef just doesn't have operator precedence, and instead tries to use spacing to determine what happens, in some completely insane way.&lt;/p&gt;

&lt;p&gt;Not following standard operator precedence is the worst idea. Smalltalk tried that, and it killed the language. Every Smalltalk successor had to do all the painful things to unwind this stupid idea. And Smalltalk at least had simple consistent rules - operators always applies left to right. Sidef does something insane:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;without spaces, operators apply right to left (&lt;code&gt;2+3*4+5&lt;/code&gt; is &lt;code&gt;2+(3*(4+5))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with spaces, operators apply left to right (&lt;code&gt;2 + 3 * 4 + 5&lt;/code&gt; is &lt;code&gt;((2+3)*4)+5&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with some spaces, operators apply left to right when there are spaces, and have extra parentheses in un-spaced group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This disqualifies the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wordle"&gt;
  &lt;/a&gt;
  Wordle
&lt;/h3&gt;

&lt;p&gt;Here's a Wordle game in Sidef:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

var words = File.new("wordle-answers-alphabetical.txt").read.split
var word = words.rand
var guess = ""

while (guess != word) {
  print "Guess: "
  guess = STDIN.readline
  if (guess.size != 5) {
    say "Only 5 letter words allowed"
    next
  }
  {|i|
    if (word[i] == guess[i]) {
      print "🟩"
    } elsif (word.include(guess[i])) {
      print "🟨"
    } else {
      print "🟥"
    }
  } * 5
  print "\n"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It didn't go too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./wordle.sf
Guess: trial
🟥🟥🟥🟨🟥
Guess: maybe
🟥🟨🟥🟥🟩
Guess: snake
🟨🟥🟩🟥🟩
Guess: chase
🟥🟩🟩🟩🟩
Guess: phase
🟩🟩🟩🟩🟩
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-sidef"&gt;
  &lt;/a&gt;
  Should you use Sidef?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;I support fun experiments, but Sidef has the absolute worst way of doing something as simple as adding numbers, making it pretty much unusable for anything.&lt;/p&gt;

&lt;p&gt;An even bigger problem is what when you write some code, Sidef decides what it means, and half the time it will decide that you meant something else than you did. There's no error messages, no documentation, no syntax debugging tools, the code will just do whatever it feels like. Sometimes code does something else. Very often the code just doesn't do anything, and that's a lot more baffling.&lt;/p&gt;

&lt;p&gt;I think to make Sidef usable for even casual play it would need at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix operator precedence&lt;/li&gt;
&lt;li&gt;have way better error messages&lt;/li&gt;
&lt;li&gt;have some kind of "print how it parsed" option, that adds a lot of &lt;code&gt;()&lt;/code&gt;s and such to tell you what the hell Sidef thinks you just did&lt;/li&gt;
&lt;li&gt;working OSX package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these issues fixed, maybe Sidef could become something I could recommend playing with for a weekend or two. In its current state, just no.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-87-sidef"&gt;Code for the Sidef episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d</id>
    <published>2022-02-12T14:14:55Z</published>
    <updated>2022-02-12T14:14:55Z</updated>
    <category term="sidef"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>My Favorite Warnings: regexp</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-warnings-regexp.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10677</id>
    <published>2022-02-11T20:04:54Z</published>
    <updated>2022-02-11T20:06:39Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>'A fair jaw-cracker dwarf-language must be.' -- Samwise Gamgee, <u>The Lord of the Rings</u>, II/iii: "The Ring Goes South"</cite>, as quoted in <code>regcomp.c</code>, the Perl regular expression compiler.</p>

<p>As you would expect, this category gets you warnings about possibly-problematic regular expression constructions. A couple specific examples are:

<dl>

<p>    <dt><code>Assuming NOT a POSIX class</code> ...</dt><br />
    <dd>This warning is about things that look kind of like POSIX character classes, but do not parse that way. The full diagnostic gives examples like <code>[[:alnum]]</code> (missing colon) and <code>[[:digit:xyz]</code> (missing right square bracket). These parse like simple character classes (<code>[:[almnu]\]</code> and <code>[:[dgitxyz]</code> respectively), so without the warning you get a hard-to-diagnose bug.</dd></p>

<p>    <dt><code>Unescaped left brace in regex is passed through</code> ...</dt><br />
    <dd>Efforts to eliminate unescaped left braces so that they are available for new syntax have been underway since 5.17.0, released May 2012. As I recall, this effort turned to be much harder than originally anticipated because at least one toolchain external to Perl (<code>autoconf</code> if memory serves) relied on this behavior.</dd></p>

<p>    <dt><code>Using /u for </code> ...</dt><br />
    <dd>The <code>/a</code> and <code>/aa</code> regular expression modifiers cause built-in character classes such as <code>\d</code> to match ASCII only. But some regular expression constructions such as <code>\b{...}</code> are explicitly Unicode. Perl interprets these as written, but warns you. Note that <code>\b{...}</code> is an example of the new functionality added by re-purposing curly brackets.</dd></p>

</dl>

<p>The above list is far from exhaustive. There are diagnostics for superfluous quantifiers (on zero-width assertions) and greediness specifications (on fixed-width items), since regular expressions are already "A fair jaw-cracker" without the unnecessary cruft. In addition, there are diagnostics for invalid or meaningless uses of the <code>/c</code>, <code>/g</code>, and <code>/p</code> modifiers.</p>

<p>Within the scope of a <a href="https://perldoc.perl.org/re.html"><code>use re 'strict';</code></a> pragma, additional diagnostics are possible. This pragma was the subject of last week's blog, <a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html">My Favorite Modules: <code>re</code></a>, which was written as background for this blog entry.</p>

<p><strong>Note</strong> that <code>use re 'strict';</code> is documented as experimental, with the warning that even the interface to the functionality may change. Too bad, because I would kind of like to enable some of the additional diagnostics:</p>

<dl>

<p>    <dt><code>Empty (?) without any modifiers in regex</code> ...</dt><br />
    <dd>This is of note because one of the diagnostics enabled by <code>use warnings 'ambiguous';</code> recommends the use of this construction as a way of removing the ambiguity. See <a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-ambiguous.html">My Favorite Warnings: <code>ambiguous</code></a> for details.</dd></p>

<p>    <dt><code>"%s" is more clearly written simply as "%s"</code> ...</dt><br />
    <dd>This is about representations of single characters. I imagined from the text of the diagnostic that it was about something like writing <code>\x07</code> versus <code>\a</code> or <code>\N{ALERT}</code>, but I was unable to get this diagnostic after a grueling 2-3 minutes of playing with it.</dd></p>

<p>    <dt>Unescaped literal right square brackets and braces</dt><br />
    <dd>Makes sense to me. I did not quote the diagnostic because in this context the <code>'%c'</code> that represents the character is too opaque to be helpful.</dd></p>

</dl>

<p><br />
<p>Previous entries in this series:</p><br />
<ol><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html">Ex-Warnings</a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-deprecated.html"><code>deprecated</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-experimental.html"><code>experimental</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-shadow.html"><code>shadow</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-syntax.html"><code>syntax</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-ambiguous.html"><code>ambiguous</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-closure.html"><code>closure</code></a></li><br />
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-qw.html"><code>qw</code></a></li><br />
    <li><a href="http://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-precedence.html"><code>precedence</code></a></li><br />
</ol></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Strato unterstützt den Deutschen Perl/Raku Workshop 2022</title>
    <link rel="alternate" href="http://blogs.perl.org/users/max_maischein/2022/02/strato-unterstutzt-den-deutschen-perlraku-workshop-2022.html"/>
    <id>tag:blogs.perl.org,2022:/users/max_maischein//227.10676</id>
    <published>2022-02-11T14:01:56Z</published>
    <updated>2022-02-11T14:03:22Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <category term="workshopsponsor" label="workshop sponsor" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p><b>Wer sind wir?</b></p>
<p>1997 gegründet, gehört STRATO mit über 4 Millionen Domains und mehr als 2 Millionen Kunden heute zu den größten Webhosting-Anbietern weltweit. STRATO beschäftigt rund 500 Mitarbeiter und betreibt zwei TÜV-zertifizierte Rechenzentren mit über 70.000 Servern in Berlin und Karlsruhe. Die STRATO AG ist ein Unternehmen der United Internet-Gruppe.</p>

<p><b>Wo brauchen wir Deine Perl-Kenntnisse?</b><br />
</p>]]>
        <![CDATA[<p><b>Im Team Provisioning</b>: Wir pflegen und entwickeln die Software und Prozesslandschaft für die technische Steuerung der gesamten STRATO Plattform (Webhosting, Server, Storage, Netz-Infrastruktur etc.).</p>
<p><b>Im Team Webdevelopment</b>: In unseren agilen Teams entwickeln und betreiben wir die Software, die unseren Kundenlogin - www.strato.de/login und andere - steuert. Hier können unsere Kunden die von ihnen gebuchten Services konfigurieren und weitere Services buchen.</p>
<p><b>Im Team Solutions 24/7</b>: Du bist Teil eines mehr als 20-köpfigen Teams, das sich primär um den Betrieb der virtuellen und dedizierten Server bei STRATO, sowie SaaS - Lösungen als Lieferant für den gesamten Konzern United Internet kümmert. Um möglichst nah am Geschehen zu sein, arbeiten wir direkt in unserem Berliner Rechenzentrum. Damit können wir uns möglichst gut und schnell um unsere drei Kernthemen Performance, Hochverfügbarkeit und Sicherheit kümmern.</p>
<p><b>Im Team Abuse</b>: Das Abuse-Team bei Strato ist verantwortlich für die Entdeckung und Beseitigung von missbräuchlich verwendeten Strato-Produkten. Unsere vier Mitarbeiter*innen pflegen und erweitern unseren Spam-Filter, bearbeiten Beschwerden zu Phishing oder Malwareverteilung, analysieren Probleme beim Mailversand und unterstützen Kunden bei der Bereinigung ihres Webspaces von Malware. Als Querschnittsabteilung arbeiten wir mit vielen Abteilungen zusammen und sind sowohl für intern, als auch für externe Ansprechpartner*innen. Dazu gehört auch das Pflegen von Kontakten zu anderen Providern und der Besuch von Konferenzen. Wir versuchen ständig dazu zu lernen und zu verbessern. Projekte, die dies zum Ziel haben, definieren wir selbst und setzen sie mit agilen Arbeitsmethoden um.</p>
<p><b>Bei der Cronon GmbH</b>: Als Tochterunternehmen der STRATO AG, unterstützt Cronon seit 20 Jahren Unternehmen bei der Digitalisierung und Weiterentwicklung ihrer Geschäftsprozesse. Wir planen passende IT-Infrastrukturen für digitale Geschäftsmodelle und Business Applikationen und sorgen für einen zuverlässigen und sicheren Betrieb. Unsere Leistungen sind so vielseitig wie unsere Kundenprojekte und reichen von Cloud- und Hosting-Services über Netzwerk- und IT-Security-Lösungen bis zu moderner Enterprise Software für ERP, Dokumentenmanagement und Business Intelligence.</p>

<p>

<p>Unsere <b>offenen Stellenangebote</b>:</p>

<ul>
<li>
<a href="https://recruiting.strato.de/r/z12f9qr4q0qbto3/Perl-Entwickler+mwd/10249/Berlin">Perl-Developer (m/w/d)
</a></li><li>
<a href="https://recruiting.strato.de/r/z10yxco9ri1fbcd/Web+Developer+mwd+Backend/10587/Berlin">Web Developer (m/w/d) Backend
</a></li><li>
<a href="https://recruiting.strato.de/r/z010upcb28j0sr7/IT-Systemadministrator+mwd+mit+Schwerpunkt+Backup-L%C3%B6sung/10249/Berlin">IT-Systemadministrator (m/w/d) mit Schwerpunkt Backup-L=C3=B6sung
</a></li><li>
<a href="https://recruiting.strato.de/r/z119njydrawahyi/Systemadministrator+mwd+-++Linux+und+Netzwerk/10249/Berlin">Systemadministrator (m/w/d) - Linux und Netzwerk
</a></li><li>
<a href="https://recruiting.strato.de/r/z02d8en67xh4tig/Systemadministrator+mwd+Abuse/10249/Berlin">Systemadministrator (m/w/d) Abuse
</a></li><li>
<a href="https://recruiting.strato.de/r/z11ys7tbs4c7agq/Systemadministrator+-+Linux+mwd+im+ERP+Umfeld/10249/Berlin">Systemadministrator - Linux (m/w/d) im ERP Umfeld (Cronon)
</a></li><li>
<a href="https://recruiting.strato.de/r/z023mw1sqbd3kwo/Systemadministrator+mwd+ERP+Anwendungen/10249/Berlin">Systemadministrator (m/w/d) ERP Anwendungen (Cronon)
</a></li><li>
<a href="https://recruiting.strato.de/r/z10h0udcx6tygfm/System+Engineer+mwd+Linux/10249/Berlin">System Engineer (m/w/d) Linux (Cronon)
</a></li><li>
<a href="https://recruiting.strato.de/r/z02dfs3okkpa7x2/Junior+System+Engineer+mwd+Linux/10249/Berlin">Junior System Engineer (m/w/d) Linux (Cronon)</a>
</a></li>
</ul>]]>
    </content>
</entry>
  <entry>
    <title>100 Languages Speedrun: Episode 84: Lingua Romana Perligata</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-84-lingua-romana-perligata-276l" type="text/html"/>
    <content type="html">&lt;p&gt;Lingua Romana Perligata is basically Perl in Latin.&lt;/p&gt;

&lt;p&gt;You think Perl has too much punctuation? It's all gone. Instead you'll need to deal with word endings.&lt;/p&gt;

&lt;p&gt;To enjoy Lingua Romana Perligata you need to install it with &lt;code&gt;cpan Lingua::Romana::Perligata&lt;/code&gt; and put appropriate annotation at start of the program. It will run as normal Perl from that point on.&lt;/p&gt;

&lt;p&gt;Just a forewarning if you want to try - a lot of examples from documentation just plain don't work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Lingua::Romana::&lt;/span&gt;&lt;span class="nv"&gt;Perligata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;adnota&lt;/span&gt; &lt;span class="nv"&gt;Salve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Mundus&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Lingua&lt;/span&gt; &lt;span class="nv"&gt;Romana&lt;/span&gt; &lt;span class="nv"&gt;Perligana&lt;/span&gt;

&lt;span class="nv"&gt;dictum&lt;/span&gt; &lt;span class="nv"&gt;sic&lt;/span&gt; &lt;span class="nv"&gt;Salve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Mundus&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;cis&lt;/span&gt; &lt;span class="nv"&gt;tum&lt;/span&gt; &lt;span class="nv"&gt;novumversum&lt;/span&gt; &lt;span class="nv"&gt;egresso&lt;/span&gt; &lt;span class="nv"&gt;scribe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.latin
Salve, Mundus!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm using &lt;code&gt;brew&lt;/code&gt; version of Perl instead of the one bundled with OSX, so &lt;code&gt;#!/usr/bin/env perl&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;use Lingua::Romana::Perligata;&lt;/code&gt; starts the Lingua Romana Perligata mode - we can pass some flags here to enable grammar debugging, and we'll definitely need that at some point&lt;/li&gt;
&lt;li&gt;there's no punctuation except &lt;code&gt;.&lt;/code&gt; at end of sentences&lt;/li&gt;
&lt;li&gt;comments start with &lt;code&gt;adnota&lt;/code&gt; and go until end of the line&lt;/li&gt;
&lt;li&gt;there's no quotes, there are a few other ways to create strings instead; documentation suggests &lt;code&gt;X inquementum&lt;/code&gt; but that seems to work very unreliably depending on what's &lt;code&gt;X&lt;/code&gt; exactly, which is one of many bugs in the language&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dictum sic ... cis&lt;/code&gt; seems to work a lot better for creating quoted strings&lt;/li&gt;
&lt;li&gt;there's no string interpolation, we'll need to concatenate&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;egresso scribe&lt;/code&gt; means "write to standard output"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tum&lt;/code&gt; means "and then"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novumversum&lt;/code&gt; means "newline"&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;dictum sic Salve, Mundus! cis tum novumversum egresso scribe&lt;/code&gt; means "write to standard output the string &lt;code&gt;Salve, Mundus!&lt;/code&gt; and then a newline"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's print numbers &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;. Sorry, I meant &lt;code&gt;I&lt;/code&gt; to &lt;code&gt;X&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meis listis unum tum decem conscribementa da.

per quisque in listis fac
  sic
    hoc comementum tum novumversum egresso scribe
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./loop.latin
I
II
III
IV
V
VI
VII
VIII
IX
X
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meis listis&lt;/code&gt; is &lt;code&gt;my @list&lt;/code&gt; and declares a local plural variable - we'd say &lt;code&gt;meo varo&lt;/code&gt; for &lt;code&gt;my $var&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;da&lt;/code&gt; means "is"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unum tum decem conscribementa&lt;/code&gt; means &lt;code&gt;1..10&lt;/code&gt; - you can also use &lt;code&gt;I tum X conscribementa&lt;/code&gt; with Roman numerals&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;per quisque in listis fac&lt;/code&gt; means &lt;code&gt;for each(@list)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sic ... cis&lt;/code&gt; is a block of code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;egresso scribe&lt;/code&gt; means "write to standard output"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hoc&lt;/code&gt; is &lt;code&gt;$_&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;comementum&lt;/code&gt; (beautify) converts the number to Roman numeral form&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tum novumversum&lt;/code&gt; means "and then newline"&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;hoc comementum tum novumversum egresso scribe&lt;/code&gt; means "write to standard output &lt;code&gt;$_&lt;/code&gt; converted to Roman numeral and then a newline"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#greetings"&gt;
  &lt;/a&gt;
  Greetings
&lt;/h3&gt;

&lt;p&gt;Let's greet a specific person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meo nomo vestibulo perlegementum da.

nomo morde.

dictum sic Salve, cis tum lacunam tum nomum tum novumversum egresso scribe.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./greetings.latin
Marcus
Salve, Marcus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meo nomo ... da&lt;/code&gt; means &lt;code&gt;my $name = ...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vestibulo&lt;/code&gt; (entrance) means &lt;code&gt;STDIN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vestibulo perlegementum&lt;/code&gt; means "read line from STDIN"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meis listis I tum C conscribementa da.

per quisque in listis fac
  sic
    fizzo hoc tum III recidementum da.
    buzzo hoc tum V recidementum da.

    si non fizzum fac sic Fizz egresso scribe cis.

    si non buzzum fac sic Buzz egresso scribe cis.

    si fizzum atque buzzum fac sic hoc comementum egresso scribe cis.

    novumversum egresso scribe.
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does the FizzBuzz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./fizzbuzz.latin
I
II
Fizz
IV
Buzz
Fizz
VII
VIII
Fizz
Buzz
XI
Fizz
XIII
XIV
FizzBuzz
XVI
XVII
Fizz
XIX
Buzz
...
Fizz
XCVII
XCVIII
Fizz
Buzz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meis listis I tum C conscribementa da&lt;/code&gt; - &lt;code&gt;my @list = (1..100)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;per quisque in listis fac sic ... cis&lt;/code&gt; - &lt;code&gt;for each (@list) { ... }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;recidementum&lt;/code&gt; means "modulo"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fizzo hoc tum III recidementum da&lt;/code&gt; - &lt;code&gt;$fizz = $_ % 3&lt;/code&gt; (these are maybe not the best names, as Fizz should be printed if &lt;code&gt;$fizz&lt;/code&gt; is zero, that is false; and same for &lt;code&gt;$buzz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;buzzo hoc tum V recidementum da&lt;/code&gt; - &lt;code&gt;$buzz = $_ % 5&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si non fizzum fac sic Fizz egresso scribe cis&lt;/code&gt; - &lt;code&gt;if (not $fizz) { print "Fizz" }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si non buzzum fac sic Buzz egresso scribe cis&lt;/code&gt; - &lt;code&gt;if (not $buzz) { print "Buzz" }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;atque&lt;/code&gt; means &lt;code&gt;and&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si fizzum atque buzzum fac sic hoc comementum egresso scribe cis&lt;/code&gt; - &lt;code&gt;if ($fizz and $buzz) { print Roman($_) }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if you remove &lt;code&gt;comementum&lt;/code&gt; it will print ASCII numbers instead of Roman numerals, so you'll get exact match for the traditional FizzBuzz&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novumversum egresso scribe.&lt;/code&gt; - print a newline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibbonacci"&gt;
  &lt;/a&gt;
  Fibbonacci
&lt;/h3&gt;

&lt;p&gt;All right, one more thing, let's define Fibbonacci function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fibonere
sic
  meis numero haec da.

  si numerum tum tres praestantiam fac sic redde unum cis.

  meo xo numerum tum I demementum fibonementum da.
  meo yo numerum tum II demementum fibonementum da.

  redde xum tum yum addementum.
cis.

meis listis unum tum XX conscribementa da.

per quisque in listis fac
  sic
    meo fibo hoc fibonementum da.
    fibum egresso scribe.
    novumversum egresso scribe.
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.latin
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we define the function with &lt;code&gt;fibonere sic ... cis&lt;/code&gt; - it knows that's function definition by the ending&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meis numero haec da&lt;/code&gt; means &lt;code&gt;my ($number) = @_&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the far more grammatical &lt;code&gt;meo numero haec da&lt;/code&gt; would translate to &lt;code&gt;my $number = @_&lt;/code&gt; and that means "number of arguments" not "first argument", not like anything here is proper Latin anyway&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redde&lt;/code&gt; means &lt;code&gt;return&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;praestantiam&lt;/code&gt; means less than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si numerum tum tres praestantiam fac sic redde unum cis&lt;/code&gt; means "if $number is less than 3, return 1"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meo xo numerum tum I demementum fibonementum da&lt;/code&gt; means &lt;code&gt;$x = fib($number - 1)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meo yo numerum tum II demementum fibonementum da&lt;/code&gt; means &lt;code&gt;$y = fib($number - 2)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redde xum tum yum addementum&lt;/code&gt; means &lt;code&gt;return $x + $y&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-lingua-romana-perligata"&gt;
  &lt;/a&gt;
  Should you use Lingua Romana Perligata?
&lt;/h3&gt;

&lt;p&gt;It's a joke language obviously, but it's not a very well executed joke. Rules are unclear (even if you know some Latin), there are too few examples, many of the examples in documentation don't even work, or break if you do a trivial change. If you use the wrong ending (or one that's correct in real Latin), you get terrible error message, or the program just happily doing something else like treating it as uninitialized variable. I don't find it particularly fun.&lt;/p&gt;

&lt;p&gt;I wanted to try it out due to its notoriety in the Perl world, but I wouldn't really recommend it. I had a lot more fun with languages like Asciidots or Whenever.&lt;/p&gt;

&lt;p&gt;Another thing - this might look like Latin to someone who doesn't know any Latin, but it's mostly gibberish not following either proper lexicon or proper grammar. It's impressive that it got that far to Latin-like, but it's still not all that close.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-84-lingua-romana-perligata"&gt;Code for the Lingua Romana Perligata episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-84-lingua-romana-perligata-276l</id>
    <published>2022-02-10T19:45:23Z</published>
    <updated>2022-02-10T19:45:23Z</updated>
    <category term="perl"/>
    <category term="latin"/>
  </entry>
  <entry>
  <title>Grants: January 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_january_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-02-10:/post/grants_january_2022_votes</id>
  <published>2022-02-10T17:09:16</published>
  <updated>2022-02-10T17:09:16</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the January 2022 round. One grant request was submitted: Grant Proposal: Optree Optimsiations for Performance Gains VOTING RESULTS: Approved. 7 YES votes 0 NO votes, 0 ABSTAIN We accept proposals throughout the year; our next round of review will begin in March. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the January 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans">Grant Proposal: Optree Optimsiations for Performance Gains</a> (USD 3,980)</h4>

<p>VOTING RESULTS: Approved. 7 YES votes (32 points), 0 NO votes, 0 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in March. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl list processing is for hashes, too</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-list-processing-is-for-hashes-too-2ol8" type="text/html"/>
    <content type="html">&lt;p&gt;This month I started a new job at &lt;a href="https://www.alertlogic.com/"&gt;Alert Logic&lt;/a&gt;, a cybersecurity provider with Perl (among many other things) at its beating heart. I’ve been learning a lot, and part of the process has been understanding the APIs in the code base. To that end, I’ve been writing small test scripts to tease apart data structures, using Perl &lt;a href="https://perldoc.perl.org/perlfunc#Functions-for-real-@ARRAYs"&gt;array-processing&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/perlfunc#Functions-for-list-data"&gt;list-processing&lt;/a&gt;, and &lt;a href="https://perldoc.perl.org/perlfunc#Functions-for-real-%25HASHes"&gt;hash- (i.e., associative array)-processing functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve covered &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and friends a &lt;a href="https://phoenixtrap.com/2021/03/16/perl_map_grep/"&gt;couple&lt;/a&gt; &lt;a href="https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/"&gt;times&lt;/a&gt; before. &lt;a href="https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/"&gt;Most recently&lt;/a&gt;, I described using &lt;a href="https://perldoc.perl.org/List::Util#any"&gt;List::Util’s &lt;code&gt;any&lt;/code&gt; function&lt;/a&gt; to check if a condition is true for any item in a list. In the simplest case, you can use it to check to see if a given value is in the list at all:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;any&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="sx"&gt;qw(red orange yellow green blue indigo violet)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="sr"&gt;/^red$/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@colors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you’re going to be doing this a lot with arbitrary strings, &lt;a href="https://perldoc.perl.org/perlfaq4#How-can-I-tell-whether-a-certain-element-is-contained-in-a-list-or-array?"&gt;Perl FAQ section 4 advises&lt;/a&gt; turning the array into the keys of a hash and then checking for membership there. For example, here’s a simple script to check if the colors input (either from the keyboard or from files passed as arguments) are in the rainbow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# introduced &amp;lt;&amp;lt;&amp;gt;&amp;gt; for safe opening of arguments&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%in_colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sx"&gt;qw(red orange yellow green blue indigo violet)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt; is in the rainbow&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$in_colors&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List::Util has a &lt;a href="https://perldoc.perl.org/List::Util#KEY/VALUE-PAIR-LIST-FUNCTIONS"&gt;bunch of functions for processing lists of pairs&lt;/a&gt; that I’ve found useful when pawing through hashes. &lt;code&gt;pairgrep&lt;/code&gt;, for example, acts just like &lt;code&gt;grep&lt;/code&gt; but instead assigns &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; to each key and value passed in and returns the resulting pairs that match. I’ve used it as a quick way to search for hash entries matching certain value conditions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pairgrep&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%odds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;pairgrep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;%numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure, you could do this by invoking a mix of plain &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, and a &lt;a href="https://perldoc.perl.org/perldata#Key/Value-Hash-Slices"&gt;hash slice&lt;/a&gt;, but it’s noisier and more repetitive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for key/value hash slice &lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%odds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%numbers&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$numbers&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%numbers&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pairgrep&lt;/code&gt;’s compiled C‑based &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS&lt;/a&gt; code can also be faster, as evidenced by this &lt;a href="https://perldoc.perl.org/Benchmark"&gt;Benchmark&lt;/a&gt; script that works through a hash made of the &lt;a href="https://en.wikipedia.org/wiki/Words_(Unix)"&gt;Unix &lt;code&gt;words&lt;/code&gt; file&lt;/a&gt; (479,828 entries on my machine):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pairgrep&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Benchmark&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cmpthese&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/usr/share/dict/words&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
  &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;can't open words: $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$words&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;cmpthese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%odds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%words&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$words&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%words&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;pairgrep&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%odds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;pairgrep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;%words&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Benchmark output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           Rate     grep pairgrep
grep     1.47/s       --     -20%
pairgrep 1.84/s      25%       --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In general, I urge you to work through the &lt;a href="https://phoenixtrap.com/2021/10/12/read-the-fantastic-manual-how-to-get-the-most-out-of-perl-documentation/"&gt;Perl documentation&lt;/a&gt;’s tutorials on &lt;a href="https://perldoc.perl.org/perlreftut"&gt;references&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/perllol"&gt;lists of lists&lt;/a&gt;, the &lt;a href="https://perldoc.perl.org/perldsc"&gt;data structures cookbook&lt;/a&gt;, and the FAQs on &lt;a href="https://perldoc.perl.org/perlfaq4#Data:-Arrays"&gt;array&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perlfaq4#Data:-Hashes-(Associative-Arrays)"&gt;hash manipulation&lt;/a&gt;. Then dip into the various &lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;list-processing modules&lt;/a&gt; (especially the included &lt;a href="https://perldoc.perl.org/List::Util"&gt;List::Util&lt;/a&gt; and CPAN’s &lt;a href="https://metacpan.org/pod/List::SomeUtils"&gt;List::SomeUtils&lt;/a&gt;) for ready-made functions for common operations. You’ll find a wealth of techniques for creating, managing, and processing the data structures that your programs need.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-list-processing-is-for-hashes-too-2ol8</id>
    <published>2022-02-10T15:00:00Z</published>
    <updated>2022-02-10T15:00:00Z</updated>
    <category term="perl"/>
    <category term="lists"/>
    <category term="hashes"/>
    <category term="map"/>
  </entry>
  <entry>
    <title>#550 - Perl &amp; Unicode</title>
    <link rel="alternate" href="https://perlweekly.com/archive/550.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Are you a Unicode fan?</p>
<p>Personally, I am not. The reason is that I still struggle to get my head around it. During my early days of learning, I never got the opportunity to work with Unicode. So far, I have never had to deal extensively with Unicode characters. There is so much information available on the internet. I remember, a long time ago, I was dealing with the well-known warning <strong>Wide character in print</strong>. After a quick search, I came across this <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">explanation</a> by <strong>Dave Cross</strong>. I have kept it bookmark for future reference. I know am repeating myself here as I remember talking about in an <a href="https://perlweekly.com/archive/498.html">earlier weekly newsletter</a>. It is worth sharing with readers again and again.</p>
<p>However, there is another reason why I am talking about it today. Let me share gem of an <a href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7">article</a> by <strong>David Cantrell</strong>. The article gives us very deeps knowledge about Unicode, specially for a Perl developer. It has cleared most of my doubts, so a big thanks to <strong>David</strong> for such a great article. It also introduced me to a new word, <strong>Mojibake</strong>. A friend of mine on Facebook, suggested a CPAN module, <a href="https://metacpan.org/pod/Test::Mojibake">Test::Mojibake</a> which is very handy. I wish there was dedicated book on Perl and Unicode. Having said that, I found this <a href="https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8">Wikibook</a> on the subject, you may want to explore it.</p>
<p>I came across a <a href="https://www.youtube.com/watch?v=MijmeoH9LT4">YouTube video</a> that explains Unicode in terms that any lay-person can easily understand. I loved it the way it is explained in a casual way. The guy in the video makes it so simple.</p>
<p>Let's talk about regexes in Perl.</p>
<p>I am sure you have used regexes in Perl at some point in your career. A few days ago, I found out a clever use of regexes shared by Abigail. The use of //g in list context. It completely blew me away. Later someone pointed me to the official Perl <a href="https://perldoc.perl.org/perlre#Repeated-Patterns-Matching-a-Zero-length-Substring">documentation</a> talking about it. If you are curious to know more about it then I would suggest you take a look at his <a href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-150-1.html">blog post</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/550.html</id>
    <published>2022-02-07T10:00:00Z</published>
    <updated>2022-02-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-07T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world"/>  <id>https://perlmaven.com/dancer2-hello-world</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Fibonacci Words That Yearn to Be Squarefree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/06#pwc150" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two strings having the same number of digits, $a and $b. Write a script to 
generate Fibonacci Words by concatenation of the previous two strings. Print the 51st &lt;br /&gt;
of the first term having at least 51 digits.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub _fibonacci_words_51{
    my($accumulated) = @_;
    my $i = @{$accumulated} - 1;
    my $next = $accumulated-&gt;[$i - 1] . $accumulated-&gt;[$i];
    return substr($next, 51 - 1, 1) if length($next) &gt;= 51;
    push @{$accumulated}, $next;
    _fibonacci_words_51($accumulated);
}

sub fibonacci_words{
    my($u, $v) = @_;
    return _fibonacci_words_51([$u, $v]);
}

MAIN:{
    print fibonacci_words(q[1234], q[5678]) . "\n";    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Fibonacci sequences are often an introductory example of recursion. This solution keeps 
with that recursive tradition. &lt;code&gt;sub _fibonacci_words_51&lt;/code&gt; takes a single argument, an array 
reference which stores the sequence terms. At each recursive step the next term is 
computed and checked for the terminating condition.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all square-free integers &amp;lt;= 500.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant LIMIT =&gt; 500;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub square_free{
    my @square_free;
    for my $x (1 .. LIMIT){
        my @factors = prime_factor($x);
        my @a;
        map {$a[$_]++} @factors;
        @a = grep {$_ &amp;&amp; $_ &gt; 1} @a;
        push @square_free, $x if !@a;
    }
    return @square_free;
}

main:{
    print join(", ", square_free()) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 46, 47, 51, 53, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 122, 123, 127, 129, 130, 131, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 154, 155, 157, 158, 159, 161, 163, 165, 166, 167, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 267, 269, 271, 273, 274, 277, 278, 281, 282, 283, 285, 286, 287, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 337, 339, 341, 345, 346, 347, 349, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 370, 371, 373, 374, 377, 379, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 478, 479, 481, 482, 483, 485, 487, 489, 491, 493, 494, 497, 498, 499
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution makes use of &lt;code&gt;sub prime_factor&lt;/code&gt; which frequently comes in handy in these
challenges. Beyond getting the prime factors the only other requirement is to determine
that none are repeated. This is done by a counting array, created with a &lt;code&gt;map&lt;/code&gt; and then
checked with &lt;code&gt;grep&lt;/code&gt; for any entries greater than 1. If such an entry exists then we know
that there was a duplicate prime factor and that number is not square free.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/"&gt;Challenge 150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Squarefree.html"&gt;Squarefree Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc150</id>
    <published>2022-02-06T17:00:00-05:00</published>
    <updated>2022-02-06T17:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Interop-Ruby">Acme-CPANModules-Interop-Ruby</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules/applications that help interoperate with the Ruby world</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-KitchenSinks">Acme-CPANModules-KitchenSinks</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Kitchen sink libraries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Signature-Arity">Acme-Signature-Arity</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.003</td>
<td>find out how a piece of code expects to be called</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-TransitiveClosure-Tiny">Algorithm-Graphs-TransitiveClosure-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.00</td>
<td>Calculate the transitive closure.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Amazon-SecretsManager">Amazon-SecretsManager</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>AWS Secrets Manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DesktopOpenUtils">App-DesktopOpenUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to Desktop::Open</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-jq">App-Greple-jq</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.02</td>
<td>0.05</td>
<td>greple module for jq frontend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PerlReleaseUtils">App-PerlReleaseUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of utilities related to Perl distribution releases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sizecheck">App-sizecheck</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-wsgetmail">App-wsgetmail</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>0.05</td>
<td>0.05</td>
<td>Fetch mail from the cloud using webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Fast">Archive-BagIt-Fast</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.090</td>
<td>0.090</td>
<td>A module to use IO::AIO to get better performance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Plugin-SHA256">Archive-BagIt-Plugin-SHA256</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>0.003</td>
<td>The role to load the sha256 plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Audit-Log">Audit-Log</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>0.003</td>
<td>auditd log parser with no external dependencies, using no perl features past 5.12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CBI-Wrapper">CBI-Wrapper</a></td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Handle the Italian CBI fixed length file format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDS">CDS</a></td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>0.22</td>
<td>0.24</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CL">CWB-CL</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.33</td>
<td>v3.4.33</td>
<td>Perl interface to the low-level C API of the IMS Open Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CQI">CWB-CQI</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.0.0</td>
<td>v3.0.0</td>
<td>launch private CQPserver on local machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-Web">CWB-Web</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.1</td>
<td>A simple shared cache for CQP query results</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB">CWB</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.0</td>
<td>Perl toolbox for the IMS Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Callable">Callable</a></td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>0.01</td>
<td>0.02</td>
<td>make different things callable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Console-ProgressBar">Console-ProgressBar</a></td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1.01</td>
<td>1.01</td>
<td>A simple progress bar for Perl console applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Cipher-Vigenere">Crypt-Cipher-Vigenere</a></td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>0.01</td>
<td>0.03</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Digest-Scrypt">Crypt-Digest-Scrypt</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Scrypt key derivation function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-PK-ECC-Schnorr">Crypt-PK-ECC-Schnorr</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Public key cryptography based on EC with Schnorr signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-CryptPassphrase">Dancer2-Plugin-CryptPassphrase</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Crupt::Passphrase plugin for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Gimei">Data-Gimei</a></td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>v0.0.4</td>
<td>v0.0.4</td>
<td>a Perl port of Ruby's gimei.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PERLSRVDE">Dist-Zilla-PERLSRVDE</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>The plugin bundle we use at Perl-Services.de</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Data-Sah">Dist-Zilla-Plugin-Data-Sah</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.005</td>
<td>0.005</td>
<td>Plugin for building Data-Sah and Data-Sah-* distributions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Upload-OrePAN2">Dist-Zilla-Plugin-Upload-OrePAN2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>0.0001</td>
<td>Dist::Zilla release plugin to inject into a local OrePAN2 repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-GEEKRUTH">Dist-Zilla-PluginBundle-Author-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0100</td>
<td>1.0200</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GEEKRUTH">Dist-Zilla-PluginBundle-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GitLab">Dist-Zilla-PluginBundle-GitLab</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0</td>
<td>1.0002</td>
<td>Access GitLab functionality to maintain distros from Dist::Zilla</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Excel-ValueWriter-XLSX">Excel-ValueWriter-XLSX</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>0.1</td>
<td>0.2</td>
<td>generating data-only Excel workbooks in XLSX format, fast</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Form-Tiny-Plugin-Diva">Form-Tiny-Plugin-Diva</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Form::Diva integration for Form::Tiny</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Git-Critic">Git-Critic</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.4</td>
<td>Only run Perl::Critic on lines changed in the current branch</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Object">HTML-Object</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>HTML Parser, Modifier and Query Interface</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Koha-Contrib-ValueBuilder-RepeatableAutocomplete">Koha-Contrib-ValueBuilder-RepeatableAutocomplete</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1.000</td>
<td>1.003</td>
<td>Repeatable autcomplete value-builder for Koha</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX">Lang-HEX</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX-Export">Lang-HEX-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL">Lang-HL</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.03</td>
<td>5.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL-Export">Lang-HL-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.16</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Attachments">Mail-Exim-ACL-Attachments</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Reject email attachments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Geolocation">Mail-Exim-ACL-Geolocation</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Netdata">Mojo-Netdata</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>0.03</td>
<td><a href="https://netdata.cloud" rel="nofollow">https://netdata.cloud</a> plugin for Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Command-coverage">Mojolicious-Command-coverage</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Start you mojo app in coverage mode</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Geolocation-MMDB">Mojolicious-Plugin-Geolocation-MMDB</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Look up location information by IP address</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Connector">Net-Connector</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-DNS-Resolver-Unbound">Net-DNS-Resolver-Unbound</a></td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1.01</td>
<td>1.05</td>
<td>Unbound resolver base for Net::DNS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Fortinet-FortiManager">Net-Fortinet-FortiManager</a></td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>0.001000</td>
<td>0.002000</td>
<td>Fortinet FortiManager REST API client library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-SMPP-SSL">Net-SMPP-SSL</a></td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>SSL support for Net::SMTP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-mbedTLS">Net-mbedTLS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>mbedTLS in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-Util">Path-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000001</td>
<td>0.000002</td>
<td>Path functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-PreferredModules">Perl-Critic-Policy-PreferredModules</a></td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Custom package recommendations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl5-Dist-Backcompat">Perl5-Dist-Backcompat</a></td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Will changes to dist/ build on older perls?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Auth-SSO-OIDC">Plack-Auth-SSO-OIDC</a></td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>implementation of OpenID Connect for Plack::Auth::SSO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Podman">Podman</a></td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>20220129.0</td>
<td>20220203.0</td>
<td>Library of bindings to use the RESTful API of Podman.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regex-Object">Regex-Object</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1.00</td>
<td>1.24</td>
<td>Solves problems with global Regex variables side effects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Set-IntSpan-Util">Set-IntSpan-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to integer spans</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sodium-FFI">Sodium-FFI</a></td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>0.001</td>
<td>0.001</td>
<td>FFI implementation of libsodium</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Speech-Recognition-Vosk">Speech-Recognition-Vosk</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>offline voice recognition using the Vosk toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Eertree">String-Eertree</a></td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Build the palindromic tree aka Eertree for a string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-GEEKRUTH">Task-BeLike-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>1.0000</td>
<td>TIMTOWTDI, but this works for GeekRuthie</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Hyphen-PT">Text-Hyphen-PT</a></td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1.02</td>
<td>1.03</td>
<td>determine hyphenation positions in portuguese words</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Venus">Venus</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.03</td>
<td>OO Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/uSAC-MIME">uSAC-MIME</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1</td>
<td>v0.2</td>
<td>MIME Type database with concise lookups</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>65</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>45</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Interop-Ruby PERLANCAR 0.001 0.001 Modules/applications that help interoperate with the Ruby world Acme-CPANModules-KitchenSinks PERLANCAR 0.001 0.001 Kitchen sink libraries Acme-Signature-Arity TEAM 0.001 0.003 find out how a piece of code expects to be called Algorithm-Graphs-TransitiveClosure-Tiny AAHAZRED 0.01 1.00 Calculate the transitive closure. Amazon-SecretsManager BIGFOOT v1.0.0 v1.0.0 AWS Secrets Manager App-DesktopOpenUtils … <a href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1982</id>
    <published>2022-02-03T23:49:26Z</published>
    <updated>2022-02-03T23:49:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#549 - Wordle</title>
    <link rel="alternate" href="https://perlweekly.com/archive/549.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Probably many of you have seen people posting their Wordle results. It is a nice little game that originally was written fo English speakers. Then several open source versions popped up that were then forked to create versions in many languages.</p>
<p>I have a <a href="https://wordle.szabgab.com/">partial list of Wordle clones</a>. I was hoping the author of one of these open source versions would make it easy to add other languages and then people would not need to host their own translated versions. So far I have not seen that happen.</p>
<p>Anyway, this has nothing to do with Perl.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/549.html</id>
    <published>2022-01-31T10:00:00Z</published>
    <updated>2022-01-31T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Calling a Python Function From Perl</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/29#expect_perl_python" type="text/html"/>
    <content type="html">
&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Recently the question came up of how to call a Python function from Perl. Here is one
way to do it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The method here is to use Expect.pm to create a subprocess containing the Python repl.
Python code is then loaded and called interactively. In my experience this is good for
calling, say, a BERT model on some text from Perl. This approach is minimalistic as 
compared to other solutions such as standing up a Fast API instance to serve the model.
Furthermore, this same pattern can be used for any arbitrary Python code you may need to 
call from Perl.&lt;/p&gt;

&lt;p&gt;While this works well it does introduce additional complexity to an application. If at all
possible it is preferable to re-write the Python functionality in Perl. An ideal use case
would be where it would be too laborious to re-implement the Python code in Perl. Imagine,
say, we want to use KeyBERT to extract keywords from a given body of text. In this case we
may be doing substantial data and text processing in Perl and merely need to call out to 
Python for this single function. If at some point KeyBERT were to become available 
natively to Perl, perhaps through the Apache MXNet bindings, then that interface should
be preferred. If nothing else, the performance improvement would be dramatic.&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# A simple example of calling a Python function
# from a Perl script using a Python repl started
# as a subprocess.
##
use Expect;
use boolean;
use constant TIMEOUT =&gt; 0.25; 
use constant PYTHON =&gt; q[/usr/bin/python];

sub create_python{
    my($io) = @_;
    my $python = do{
        local $/;
        &lt;DATA&gt;;
    };
    $$io = new Expect();
    $$io-&gt;log_stdout(false);
    $$io-&gt;raw_pty(true);
    $$io-&gt;spawn(PYTHON);
    $$io-&gt;send("$python\n\n");
    $$io-&gt;expect(TIMEOUT, q[-re] , q|m/[0-9]*/|);
    $$io-&gt;clear_accum();
}

sub call_python_sample{
    my($io, $arg) = @_;
    print $$io-&gt;send("sample(" . $arg . ")\n");
    $$io-&gt;expect(TIMEOUT, q[-re], qr[\d+]);
    my $r = $$io-&gt;exp_match();
    $$io-&gt;clear_accum();
    return $r;
}

MAIN:{
    my($io);
    create_python(\$io);
    print call_python_sample(\$io, 1) . "\n";
    print call_python_sample(\$io, 9) . "\n";
}

__DATA__
import os
os.system("stty -echo")
def sample(a):
    print(str(a + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The results&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl call_python_.pl
2
10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is a minimum working example. Well, fairly minimal in that I could have 
avoided breaking things up into multiple subroutines. In terms of cleanliness and 
explainability these divisions make sense, with only the added need to pass a reference to
an Expect object back and forth as a parameter.&lt;/p&gt;

&lt;p&gt;For a self-contained example the Python code we are going to run is contained in the DATA
section. For more complex use cases it would make sense to have the Python code in 
separate files which could be read in and loaded. They could also be specified directly as
arguments to the Python interpreter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub create_python&lt;/code&gt; instantiates a new Expect object, sets some parameters for the 
object, and spawns the Python repl. We also clear the Expect buffers so that upon the next
invocation we need not worry about the Python header messages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub call_python_sample&lt;/code&gt; calls the function of interest. Here it is just &lt;code&gt;sample()&lt;/code&gt; 
which takes a single argument, adds 1 to the argument, and prints out the result.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Effectively what we are doing is interprocess communication using text passed between the
two processes. Perl knows nothing of the state of the Python code, and vice versa. If you
call a Python function which does not print a value to STDOUT then you will need to add
your own print() call. This is not actually so bad a situation since Expect works by 
pattern matching on the expected (pun intended!) output. To ensure you are collecting the 
right values some massaging of what the Python code is doing is to be anticipated 
(pun avoided!). For example, suppose we want to call the KeyBERT function to extract key 
words from some given text. We might consider writing a wrapper function which takes
the output from &lt;code&gt;KeyBERT.extract_keywords&lt;/code&gt; (a list of tuples, each tuple a pair: key 
phrase and a distance) and concatenates and prints each of the pairs to STDOUT on a single
line. In this way our Perl regex can most easily pick up the phrase/distance pairs.&lt;/p&gt;

&lt;p&gt;Expect is a very mature tool, with a generous set of options and abilities. This sort of 
use is really just the tip of the iceberg. In terms of Perl being a "Glue Language" 
consider Expect to be a key ingredient that causes the glue to stick. Peruse the 
documentation for further inspiration.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Expect"&gt;Expect.pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maartengr.github.io/KeyBERT/index.html"&gt;KeyBERT&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/expect_perl_python</id>
    <published>2022-01-29T16:30:00-05:00</published>
    <updated>2022-01-29T16:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Grant Report 2021-12/2022-01 Raku CI Bot by Patrick Böker</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-raku-ci-bot-2022-01"/>
  <id>tag:news.perlfoundation.org,2022-01-29:/post/grant-report-raku-ci-bot-2022-01</id>
  <published>2022-01-29T10:45:20</published>
  <updated>2022-01-29T10:45:20</updated>
  <summary>
  <![CDATA[
     Regarding the progress on his Raku CI Bot grant, Patrick Böker writes: In December and January I worked in different areas of RCB: I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below. I started work on the website which currently allows viewing test status and results of a given test 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding the progress on his Raku CI Bot grant, Patrick Böker writes:</p>

<hr />

<p>In December and January I worked in different areas of RCB:</p>

<ul>
<li>I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below.</li>
<li>I started work on the website which currently allows viewing test status and results of a given test set and downloading of the source archive the build was based on.</li>
<li>I fixed MoarVM#1614 which turned out to be a long standing bug in the Raku OpenSSL library. I had a lot of help with debugging MoarVM from niner++.</li>
</ul>

<p>Red#537 is making me nervous. It's a bug in Red, which causes Red to mix up different queries in a concurrent setting. The cause is that dynamic variables don't survive through supply / react / whenever blocks and Red relies on several dynamic variables to communicate its state through the stack. Currently the Red author is out of ideas of how to solve this.</p>

<h2>Bug rooster</h2>

<p>Solved:</p>

<ul>
<li>MoarVM#1614: NativeCall error <a href="https://github.com/MoarVM/MoarVM/issues/1614">#1614</a> (Severity: Medium)</li>
</ul>

<p>New:</p>

<ul>
<li>Cro::WebApp#62: <code>&lt;:use&gt;</code> doesn't see route level template locations https://github.com/croservices/cro-webapp/issues/62) (Severity: Low, workaround available)</li>
</ul>

<p>Unchanged:</p>

<ul>
<li>Red#537: Unknown columns in query in concurrent setting <a href="https://github.com/FCO/Red/issues/537">#537</a> (Severity: High)</li>
<li>Red#527: Enum on Pg: invalid input syntax for type integer: \"a\" [#527] (https://github.com/FCO/Red/issues/527) (Severity: High)</li>
<li>Cro::HTTP#161: Implement remote window handling <a href="https://github.com/croservices/cro-http/pull/161">#161</a> (Severity: High, PR: me)</li>
<li>Red#495: SELECTing enums generates broken WHERE in most cases <a href="https://github.com/FCO/Red/issues/495">#495</a> (Severity: Low, workaround available)</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>#548 - Perl Books Collection</title>
    <link rel="alternate" href="https://perlweekly.com/archive/548.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Do you have a Perl books collection?</p>
<p>I am sure most of us own the <strong>Camel</strong> book. As you know, there have been hardly any new <strong>Perl</strong> books published in recent years. I recently bought two very popular <strong>Perl</strong> books <strong>"Extending and Embedding Perl"</strong> and <strong>"Network Programming with Perl"</strong>. I have realised there are two distinct views about good old <strong>Perl</strong> books. One view is that the recommendations in these books are no longer in use, since we have better choices available on <strong>CPAN</strong> now. I fully agree with this view but I also agree to the other view that it is still relevant in terms of base knowledge of the subject. Above all, there is a sentimental values attached to each <strong>Perl</strong> book that I own.</p>
<p>How about you?</p>
<p>Last week, <strong>Gabor</strong>, spoke about learning languages in his editorial. Being an <strong>Indian</strong> by birth, I know more than just the national language of India, <strong>Hindi</strong>. I can understand, to be precise, <strong>six human languages</strong>. Nowadays, I am learning <strong>Spanish</strong> from my daughter as she is learning as part of her school curriculum. But here I would like to know how many programming languages one can fluently code in. Recently in <a href="https://theweeklychallenge.org">The Weekly Challenge</a> contest, we have received loads of solutions in different languages. In <strong>week 147</strong>, we received <strong>100+</strong> solutions. One member who stands out front the crowd is <strong>Abigail</strong>, who has contributed in <strong>30 different programming languages</strong>. To me it seems impossible, but he did it.</p>
<p>How many programming languages do I know? Well thanks to the weekly challenge, I have had the opportunity to code in <strong>Raku</strong>, <strong>Python</strong>, <strong>Java</strong> and <strong>Swift</strong> as well as <strong>Perl</strong>, of course. Do you want to try some new languages? Please give it a try.</p>
<p>Enjoy the week and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/548.html</id>
    <published>2022-01-24T10:00:00Z</published>
    <updated>2022-01-24T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 2</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" type="text/html"/>
    <content type="html">&lt;p&gt;Continuing from the &lt;a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/"&gt;first part&lt;/a&gt;, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. &lt;/p&gt;
&lt;table border&gt;
&lt;tr&gt;
&lt;td&gt;Period&lt;/td&gt;
&lt;td&gt;CPAN releases&lt;/td&gt;
&lt;td&gt;CPAN authors&lt;/td&gt;
&lt;td&gt;Hackage releases&lt;/td&gt;
&lt;td&gt;Hackage authors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jan 2021&lt;/td&gt;
&lt;td&gt;1184&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;574&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Feb 2021&lt;/td&gt;
&lt;td&gt;1016&lt;/td&gt;
&lt;td&gt;223&lt;/td&gt;
&lt;td&gt;737&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mar 2021&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;783&lt;/td&gt;
&lt;td&gt;258&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2021&lt;/td&gt;
&lt;td&gt;979&lt;/td&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;540&lt;/td&gt;
&lt;td&gt;193&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jun 2021&lt;/td&gt;
&lt;td&gt;982&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;491&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jul 2021&lt;/td&gt;
&lt;td&gt;951&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;562&lt;/td&gt;
&lt;td&gt;195&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt; Draw the conclusion yourself. I end my curiosity here, but might compare again in the future.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Continuing from the first part, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. Period CPAN releases CPAN authors Hackage releases Hackage authors … <a href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 2</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1979</id>
    <published>2022-01-21T04:45:23Z</published>
    <updated>2022-01-21T04:45:23Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
  <title>Grant Proposal: Optree Optimsiations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/grant_proposal_optree_optimisation_paul_evans</id>
  <published>2022-01-20T19:20:01</published>
  <updated>2022-01-20T19:20:01</updated>
  <summary>
  <![CDATA[
     Synopsis Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates. Project Details Inside a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates.</p>

<h2>Project Details</h2>

<p>Inside a running <code>perl</code> interpreter, source code is compiled into a more direct representation of its behaviour, called an optree. This is comprised of individual elements called ops. Each is executed in sequence, and performs a small specific part of work involved in executing the program as a whole.</p>

<p>Due to the small nature of the specific ops, there are several optimisations that are performed by the interpreter before it starts executing a program; mostly on a theme of combining the effects of several small ops into fewer, larger ones. This allows them to overall work more efficiently as they can either share intermediate results, or can avoid the various data-passing overheads between them.</p>

<p>This project aims to look at three new ideas on this theme of skipping certain elements of the optree by combining their effects together. A full description of each is given in the appendix section below. Each of the three ideas were first mentioned on the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262094.html">Perl5-Porters mailing list</a>.</p>

<h2>Timeline</h2>

<p>Each of the three optimisations would process through the following stages: </p>

<p><em>*1. Create an "ideal-case" benchmark test *</em></p>

<p>Begin by creating a benchmark containing some simple code that is entirely composed of one particular kind of operation, which is the target of the 
optimisation. Measure this benchmark case in order to obtain a baseline performance measurement.  </p>

<p><em>*2. Implement the optimisation *</em></p>

<p>Apply code to the Perl interpreter by defining new opcode flags, adjusting the peephole optimiser, or whatever other techniques may be required to achieve it. </p>

<p>Take a second measurement of performance with the optimisation applied. This should give an indication of the maximal possible gain that could be achieved.</p>

<p><strong>3. Analyse large programs to estimate extent of application</strong></p>

<p>While the figure gained in the above step gives a best-case value, it is unlikely that real-world programs would be able to gain as much benefit. It would be useful to analyse the generated optree of real-world programs to get an estimate of how likely these optimisations are to be hit, and a guess at what proportion of the potential benefit could actually be achieve in a real case.</p>

<p>Actually this step could be performed first, for each of the three optimisations, to get a suggestion on which of them are likely to be the most useful, and thus how to assign the remaining project time to each of them.</p>

<h2>Author Information</h2>

<p>I am Paul Evans, PEVANS on <a href="https://metacpan.org/author/PEVANS">CPAN</a> and current member of the Perl Steering Committee.</p>

<p>I have been a CPAN maintainer for over 12 years, and currently have over 200 distributions under my name. Recently I have been working on a variety of perl core features; adding the <code>isa</code> operator to Perl 5.32, <code>try/catch</code> syntax to 5.34, and the <code>builtin::</code> namespace of additional core functions expected to be part of the upcoming 5.36 release.</p>

<p>I have successfully completed two TPF projects before, to improve the implementation of the <code>Future::AsyncAwait</code> module; and to create bindings for the <code>libuv</code> event system. </p>

<h2>Amount Requested</h2>

<p>$3,980 USD</p>

<h2>Appendix</h2>

<p>The three optimisations described in more detail:</p>

<h3><code>OA_TARGLEX</code> on <code>OP_CONST</code></h3>

<p>Give the <code>OP_CONST</code> opcode the <code>OA_TARGLE</code> flag, meaning that code such as
<code>
    $var = 123;
</code>
gains a performance optimisation, discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> which is normally used to implement scalar lexical variable assignment from a constant, leaving just a single <code>OP_CONST</code> in its place.</p>

<h3><code>OA_TARGLEX</code> with <code>OPpLVAL_INTRO</code></h3>

<p>Create a new <code>OA_...</code> constant, or adjust the semantics of the existing <code>OA_TARGLEX</code>, such that it can also apply in <code>OPpLVAL_INTRO</code> situations. This would allow the (currently fairly-rare) <code>OA_TARGLEX</code> optimisation to
also apply on variables introduced in <code>my</code> expressions, such as
<code>
    my $zero = 0;
</code>
by once again discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> ops.</p>

<h3>Fold away <code>OP_PADSV</code> arguments to <code>UNOP</code>s</h3>

<p>Create a similar optimisation to the <code>-&amp;gt;targ</code> opcode field, applicable to <code>UNOP</code>s to contain the pad offset of a lexical variable argument for arguments being passed into <code>UNOP</code>s. Thus for example a statement like
<code>
    sleep $time;
</code>
could discard the <code>OP_PADSV</code> of its incoming argument, and similarly avoid using the stack for the lexical variable.</p>

    ]]>
  </content>
</entry>
</feed>
