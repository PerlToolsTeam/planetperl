<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-03-05T16:48:03Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 154: Missing Permutations and Padovan Primes</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/03/perl-weekly-challenge-154-missing-permutations-and-padovan-primes.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10727</id>
    <published>2022-03-05T01:27:58Z</published>
    <updated>2022-03-05T01:30:22Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 154 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-154/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on March 6, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Missing Permutations</h2>

<p><em>You are given possible permutations of the string &#8216;PERL&#8217;.</em></p>

<pre><code>PELR, PREL, PERL, PRLE, PLER, PLRE, EPRL, EPLR, ERPL,
ERLP, ELPR, ELRP, RPEL, RPLE, REPL, RELP, RLPE, RLEP,
LPER, LPRE, LEPR, LRPE, LREP
</code></pre>

<p><em>Write a script to find any permutations missing from the list.</em></p>

<p>We&#8217;ll assume that the permutations provided are correct, but that at least one is missing. In fact, if one of the permutation is wrong, this would not alter the result. For this task, we&#8217;ll generate all permutations and compare the result with the given list of permutations.</p>

<h3>Missing Permutations in Raku</h3>

<p>First, we store the given permutations in a <a href="https://docs.raku.org/type/Set">set</a> for fast lookup. Then, we use the <a href="https://docs.raku.org/routine/permutations">permutations</a> built-in routine to generate all permutations and loop through them to find those that are missing from the given list.</p>

<pre><code>my $given_perm = set(qw/
    PELR PREL PERL PRLE PLER PLRE EPRL EPLR ERPL
    ERLP ELPR ELRP RPEL RPLE REPL RELP RLPE RLEP
    LPER LPRE LEPR LRPE LREP /);
for "PERL".comb.permutations&gt;&gt;.join("") -&gt; $perm {
    say "$perm is missing" if $perm ∉ $given_perm;
}
</code></pre>

<p>This script produces the following output:</p>

<pre><code>$ raku ./missing_permutations.raku
LERP is missing
</code></pre>

<p>Here, we have hard-coded the &#8220;PERL&#8221; word used to generate all permutations, but, assuming the given list has only correct permutations, we can just  pick any permutation from the list as the starting point. We&#8217;ll do that in the implementation below, using the <code>$given_perm.keys[0]</code> syntax. Another possible variation is that, since we&#8217;re using <em>sets</em>, we could store the full list of permutations in another set and use the built-in <a href="https://docs.raku.org/language/setbagmix#infix_(-">set difference</a>,<em>infix</em>%E2%88%96) operator (<code>(-)</code> or <code>∖</code>) to find the missing combinations. Here, I won&#8217;t use the <code>∖</code> operator because I find it a bit confusing (it looks too much like the <code>\</code> backslash operator).</p>

<pre><code>my $given_perm = set(qw/
    PELR PREL PERL EPRL EPLR ERPL
    ERLP ELPR ELRP RPEL RLPE RLEP
    LPER LPRE LEPR LRPE LREP /);
my $perms = set($given_perm.keys[0].comb.permutations&gt;&gt;.join(""));
say "Missing: ", ~($perms (-) $given_perm);
</code></pre>

<p>Notice that I have also removed some permutations from the given list, in order to show what happens when there is more than one permutation missing.</p>

<p>This script produces the following output:</p>

<pre><code>$ raku ./missing_permutations2.raku
Missing: PRLE REPL RPLE RELP PLER PLRE LERP
</code></pre>

<h3>Missing Permutations in Perl</h3>

<p>Perl doesn&#8217;t have <em>sets</em>, but we can achieve the same result (fast lookup) with hashes. Since there is also no built-in <em>permutation</em> function, we implement our own recursive <code>permute</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @permutations;
my %given_perm = map { $_ =&gt; 1 } qw/
    PELR PREL PERL PRLE PLER PLRE EPRL EPLR ERPL
    ERLP ELPR ELRP RPEL RPLE REPL RELP RLPE RLEP
    LPER LPRE LEPR LRPE LREP /;

sub permute { 
    my ($str, @vals) = @_;
    if (scalar @vals == 0) {
        push @permutations, $str;
        return;
    }
    permute("$str" . $vals[$_], @vals[0..$_-1], 
        @vals[$_+1..$#vals]) for 0..$#vals;
}
permute "", split //, (keys %given_perm)[0];
for my $perm (@permutations) {
    say "$perm is missing" unless exists $given_perm{$perm};
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./missing_permutations.pl
LERP is missing
</code></pre>

<h2>Task 2: Padovan Primes</h2>

<p><em>A Padovan Prime is a Padovan Number that’s also prime.</em></p>

<p><em>In number theory, the Padovan sequence is the sequence of integers P(n) defined by the initial values.</em></p>

<pre><code>P(0) = P(1) = P(2) = 1
</code></pre>

<p><em>and then followed by</em></p>

<pre><code>P(n) = P(n-2) + P(n-3)
</code></pre>

<p><em>First few Padovan Numbers are as below:</em></p>

<pre><code>1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, ...
</code></pre>

<p><em>Write a script to compute first 10 distinct Padovan Primes.</em></p>

<p><em>Expected Output:</em></p>

<pre><code>2, 3, 5, 7, 37, 151, 3329, 23833, 13091204281, 3093215881333057
</code></pre>

<p>So, the Padovan sequence is built in a way very similar to the Fibonacci sequence, except that instead of using Fibonacci&#8217;s <code>P(n-1) + P(n-2)</code>, the Padovan sequence uses the following recurrence relation: <code>P(n-2) + P(n-3)</code>. The terms quickly come close to a geometric progression with a common ratio of approximately 1.3247 (known as the plastic number). So it is growing very rapidly (but less rapidly than the Fibonacci sequence, whose common ratio is the golden mean, 1,618).</p>

<p>To give an idea of the growth, these are the first 140 Padovan numbers:</p>

<pre><code>1 1 1 2 2 3 4 5 7 9 12 16 21 28 37 49 65 86 114 151 200 265 351 465 616 816 1081 1432 1897 2513 3329 4410 5842 7739 10252 13581 17991 23833 31572 41824 55405 73396 97229 128801 170625 226030 299426 396655 525456 696081 922111 1221537 1618192 2143648 2839729 3761840 4983377 6601569 8745217 11584946 15346786 20330163 26931732 35676949 47261895 62608681 82938844 109870576 145547525 192809420 255418101 338356945 448227521 593775046 786584466 1042002567 1380359512 1828587033 2422362079 3208946545 4250949112 5631308624 7459895657 9882257736 13091204281 17342153393 22973462017 30433357674 40315615410 53406819691 70748973084 93722435101 124155792775 164471408185 217878227876 288627200960 382349636061 506505428836 670976837021 888855064897 1177482265857 1559831901918 2066337330754 2737314167775 3626169232672 4803651498529 6363483400447 8429820731201 11167134898976 14793304131648 19596955630177 25960439030624 34390259761825 45557394660801 60350698792449 79947654422626 105908093453250 140298353215075 185855747875876 246206446668325 326154101090951 432062194544201 572360547759276 758216295635152 1004422742303477 1330576843394428 1762639037938629 2334999585697905 3093215881333057 4097638623636534 5428215467030962 7190854504969591 9525854090667496 12619069972000553 16716708595637087 22144924062668049 29335778567637640 38861632658305136 51480702630305689 68197411225942776
</code></pre>

<h3>Padovan Primes in Raku</h3>

<p>We first build an infinite (lazy) list of Padovan numbers using the infix <code>...</code> <a href="https://docs.raku.org/language/operators#index-entry-sequence_operator">sequence operator</a>. We then loop over these numbers and, for each of hem, check whether it is prime using the <a href="https://docs.raku.org/routine/is-prime">is-prime</a> built-in routine.</p>

<pre><code>my @padovans = 1, 1, 1, -&gt; $a, $b, $c { $a + $b } ... *;
# say @padovans[0..10];  # (1 1 1 2 2 3 4 5 7 9 12)
my $max = 10;
my $prev_pad = 1;
for @padovans -&gt; $pad {
    next if $prev_pad == $pad;
    if $pad.is-prime {
        print "$pad ";
        $max--;
    }
    $prev_pad = $pad;
    last if $max &lt;= 0;
}
say "";
say now - INIT now;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./padovan_prime.raku
2 3 5 7 37 151 3329 23833 13091204281 3093215881333057 
0.2039814
</code></pre>

<p>Note that I timed the execution and found the duration (0.2 sec.) to be much less than I feared for computations on such large numbers. I suppose that the Miller-Rabin primality test used by the <code>is-prime</code> built-in routine is so fast that you can use it more than 100 times in a split second (the tenth Padovan prime, 3,093,215,881,333,057, is the 129th Padovan number).</p>

<h3>Padovan Primes in Perl</h3>

<p>Here again, I was afraid about numerous primality tests on very large integers, and decided to first build a list of prime numbers so that I would have to test each Padovan numbers against only prime numbers (up to a certain limit), rather than, say, all odd numbers, in order to speed up the process. It turns out that it wasn&#8217;t really necessary as the process runs in about only 6 seconds without this optimization. Worse yet, the performance optimization improves the execution duration only by a very marginal factor (perhaps by at most 20%). Clearly, it wasn&#8217;t worth the effort. I know very well Donald Knuth&#8217;s famous quote about &#8220;premature optimization (being) the source of all evil.&#8221; I thought I knew better in this specific case, but that was a mistake.  </p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 10000; # MAX must be an even number

my @primes = prime_list(MAX);
# say "@primes"; # 2 3 5 7 11 13 17 19 23 29 31 37 41 ...

my @padovans = (1, 1, 1);
for my $i (3..140) {
    $padovans[$i] = $padovans[$i-2] + $padovans[$i-3]
} 
# say "@padovans"; # 1 1 1 2 2 3 4 5 7 9 12 16 21 28 37 ...

my $count = 0;
my $last_pad = 0;
for my $pad (@padovans) {
    next if $pad == $last_pad;
    $last_pad = $pad;
    next unless is_prime($pad);
    say $pad;
    $count++;
    last if $count &gt; 9;
}

sub prime_list {
    my $max = shift;
    my @prime_list = (2, 3, 5);
    PRIMES: for my $c (7..$max) {
            for my $i (2..$c/2) {
                next PRIMES unless $c % $i;
            }
            push @prime_list, $c;
    }
    return @prime_list;
}
sub is_prime {
    my $num = shift;
    for my $prime (@primes) {
        return 1 if $num == $prime;
        return 0 if $prime &gt; $num;
        return 0 unless $num % $prime;
    }
    my $test = MAX+1;
    while ($test &lt; int(sqrt($num))) {
        return 0 unless $num % $test;
        $test += 2;
    }
    return 1;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./padovan_prime.pl
2
3
5
7
37
151
3329
23833
13091204281
3093215881333057
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on March 13, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>I start to write the book "Perl for Beginners to Mastering Perl in a week"</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/03/i-start-to-write-the-book-perl-for-beginners-to-mastering-perl-in-a-week.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10726</id>
    <published>2022-03-01T13:17:27Z</published>
    <updated>2022-03-01T13:25:17Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I start to write the book "Perl for Beginners to Mastering Perl in a week".</p>

<p>I wrote two Japanese books from a years ago.</p>

<p><a href="https://www.amazon.com/Perl-tekisuto-shorino-essensu-Japanese-ebook/dp/B097T6CBR6/ref=sr_1_1?crid=3KZ0GWMVKSMIC&keywords=Perl%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%83%B3%E3%82%B9&qid=1646122816&sprefix=perl%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%83%B3%E3%82%B9%2Caps%2C187&sr=8-1">Perlテキスト処理のエッセンス</a></p>

<p><a href="https://www.amazon.com/perldeportablenalinuxkanrinyuumon-Japanese-Perl-Club-ebook/dp/B09Q8QV5G5/ref=sr_1_2?crid=1ZKV9VC1ZTVDU&keywords=Linux+%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB+Perl&qid=1646122862&sprefix=linux+%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB+perl%2Caps%2C210&sr=8-2">PerlでポータブルなLinuxファイル管理入門</a></p>

<p>Finally, I decided to write English books.</p>

<p>Recently it becomes easy to publish both e-books and paperbacks.</p>

<p>The title of my first English Perl book is "Perl for Beginners to Mastering Perl in a week".</p>

<p>This book is for Perl beginners to learn Perl quickly.</p>

<p></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title> Release 1.9.13 of Perl distribution Crypt::OpenSSL::X509</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1913-of-perl-distribution-cryptopensslx509-2neo" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A new release of the Perl distribution <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a> have seen the light of day.</p>

<p>The release does as such not offer anything new, but it contains some very important changes from a maintenance perspective.</p>

<p>If you ready up on the list of releases, you can see that several releases have been followed by additional release shortly after due to <em>bad releases</em>.</p>

<p>I can mention:</p>

<ul>
<li>1.9.12 fixing 1.9.11 - upload repair</li>
<li>1.9.10 fixing 1.9.9 - repair to broken <code>MANIFEST</code>
</li>
<li>1.9.7 - repair to broken <code>META.yml</code>
</li>
<li>1.9.5 - totally breaking Linux builds in 1.9.4</li>
<li>1.9.1 fixing 1.9 - version number issue</li>
<li>1.8.11 re-release of 1.8.10 with corrected meta-data</li>
</ul>

<p>This is over a period of 3+ years, but it is not particularly impressive.</p>

<p>There are many reasons, if not to say excuses related to this and I might dig into these in a separate blog post, lets just say I am welcoming the improvements and I hope the will stabilize the release process, so we can focus on the actual distribution, since we have much work to do.</p>

<p>The importanten changes are a migration of the distribution toolchain from Module::Install to Dist::Zilla. I am not the original author of <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a>, so I was always reluctant to a change to Dist::Zilla even though it is recommended since Module::Install is deprecated and it does improve the overall tooling.</p>

<p>I did however mention my challenges in my <a href="https://dev.to/jonasbn/release-1911-of-perl-distribution-of-cryptopensslx509-followed-by-1912-5ei1">blog post</a> for releae 1.9.11/1.9.12. And one of the regular contributors Shoichi Kaji provided a PR prosing the migration to Dist::Zilla, he even adopted Dist::Zilla configurations parts from some of my other relases, so I would feel more at home - such magnificent service, thanks <a href="https://github.com/skaji">@skaji</a>.</p>

<p>Another regular contributor Timothy Legge was quick to jump in and review the PR. Additionally he provided some improvements to the macOS CI jobs and we were good to go - thanks <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a>.</p>

<p>Since the migration was quite significant I improved the release process by adopting the oppotunity of making a <em>trial</em> release. A trial release, or development release, is not indexed on CPAN and therefor you do not break down stream distributions relying on your distribution, but it does get picked up by CPAN-testers. The release most certainly did and it actually <a href="http://matrix.cpantesters.org/?dist=Crypt-OpenSSL-X509%201.913-TRIAL">looked good</a>, so 6 days after the trial release was made I made the official release and it is now available on CPAN.</p>

<p>Next steps are improving the build on the *BDSs and support for OpenSSL 3 and I hope the road there will be less painfull for me and others, with more stable releases.</p>

<h2>
  
  
  Change log
</h2>

<h3>
  
  
  1.9.13 Sat Feb 26 00:36:28 CET 2022
</h3>

<ul>
<li><p>The distribution has changed distribution toolchain from Module::Install to Dist::Zilla, thanks to @skaji for PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/96">#96</a> and thanks to <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a> for the review of the proposed changes</p></li>
<li><p>The macOS CI jobs have been improved with PRs <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/98">#98</a> and <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/99">#99</a> from <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a></p></li>
</ul>

<h3>
  
  
  1.9.13-TRIAL Sun Feb 20 21:31:44 CET 2022
</h3>

<ul>
<li><p>Release leading up to 1.9.13, see that release for details</p></li>
<li><p>This is a TRIAL release, in order to get some feedback from CPAN-testers prior to making a proper public release, since the changes to the build system has been quite significant. Additional trial releases might follow, based on findings and feedback</p></li>
</ul>

</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/jonasbn/release-1913-of-perl-distribution-cryptopensslx509-2neo</id>
    <published>2022-02-28T20:49:39Z</published>
    <updated>2022-02-28T20:49:39Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#553 - Looking for a copy-editor for the Perl Weekly</title>
    <link rel="alternate" href="https://perlweekly.com/archive/553.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago some people asked me not to include politics in the Perl weekly so I won't add my opinion on the murderous Russian dictator, but I would like to wish the best to all the people and their families I met while I was at the Perl conference in Kyiv, Ukraine 10 years ago.</p>
<p>Since Dave Cross got fed up with our broken English and started to copy-edit the Perl Weekly we became a bit spoiled by having him. Unfortunately (to us) he got himself busy with some real work and won't be able to allocate the time for copy-editing the Perl Weekly. So now we are looking for a volunteer to do it. Basically every Monday, sometimes during the European morning hours (we don't have a fixed timing), we push out a version to our <a href="https://github.com/szabgab/perlweekly">GitHub repo</a> and to the <a href="https://perlweekly.com/">web-site</a>. Then I'd send an email to the copy-editor who checks the most recent version and sends a Pull-Request on GitHub with the fixes. Once I get the PR, I merge it, regenerate the HTML and send out the newsletter. If you would be interested to volunteer, please get in touch with me so I know whom to notify.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/553.html</id>
    <published>2022-02-28T10:00:00Z</published>
    <updated>2022-02-28T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Finding the Factorials and Factorions That Are Left</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/27#pwc153" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to determine the first ten members of the Left Factorials sequence.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use POSIX;
use constant UPPER_BOUND =&gt; INT_MAX/1000;

sub left_factorials_sieve{
    my($n) = @_;
    my @sieve = (0 .. UPPER_BOUND);
    my $x = 2;
    {
        my @sieve_indices = grep { $_ &lt;= $x || $_ % $x == 0 } 0 .. @sieve - 1; 
        @sieve = map{ $sieve[$_] } @sieve_indices;
        $x++;
        redo if $x &lt;= $n;
    }
    return @sieve[1 .. @sieve - 1];
}

MAIN:{
    print join(", ", left_factorials_sieve(10)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The problem statement for this refers to a On-Line Encyclopedia of Integer Sequences 
entry. That OEIS entry mentions some interesting facts about the sequence, including the
sieve technique used here. Officially the sequence seems to start with &lt;code&gt;0&lt;/code&gt; but since the
example shows it starting with &lt;code&gt;1&lt;/code&gt; here the initial &lt;code&gt;0&lt;/code&gt; element is removed.&lt;/p&gt;

&lt;p&gt;There is nothing special about the choice of &lt;code&gt;UPPER_BOUND&lt;/code&gt; it is just an arbitrarily large
number which fits the purpose. I chose the number via trial and error, but it seems there 
is a straightforward provable upper bound &lt;code&gt;U&lt;/code&gt; required to get a sequence of required 
sequence length &lt;code&gt;N&lt;/code&gt;. If this were a math text then I as the author would be compelled to
leave a frustrating note that finding the upper bound is &lt;em&gt;left as an exercise for the 
reader&lt;/em&gt;. Ha!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to figure out if the given integer is a factorion.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub factorial{
    my($n) = @_;
    return 1 if $n == 1;
    $n * factorial($n - 1);
}

sub is_factorion{
    my($n) = @_;
    return boolean($n == unpack("%32I*", pack("I*", map {factorial($_)} split(//, $n))));
}

MAIN:{
    print is_factorion(145) . "\n";
    print is_factorion(123) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In this solution I tried to optimize for the least amount of code. Not quite a &lt;em&gt;golfed&lt;/em&gt; 
solution, but compact, to be sure. The digits are obtained via &lt;code&gt;split&lt;/code&gt;, passed to our
totally boring recursive &lt;code&gt;factorial()&lt;/code&gt; function, the sum of the resulting factorials taken
using &lt;code&gt;pack&lt;/code&gt;, and then that sum compared to &lt;code&gt;$n&lt;/code&gt;. For convenience in stringifying the 
output &lt;code&gt;boolean()&lt;/code&gt; is used.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-153/"&gt;Challenge 153&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://oeis.org/A003422"&gt;Left Factorial Sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/LeftFactorial.html"&gt;Left Factorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Factorion.html"&gt;Factorion&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc153</id>
    <published>2022-02-27T19:55:00-05:00</published>
    <updated>2022-02-27T19:55:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 153: Left Factorials and Factorions</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/02/perl-weekly-challenge-153-left-factorials-and-factorions.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10709</id>
    <published>2022-02-23T03:55:59Z</published>
    <updated>2022-02-27T23:42:47Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 153 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-153/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on February 27, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Left Factorials</h2>

<p><em>Write a script to compute Left Factorials of 1 to 10. Please refer <a href="http://oeis.org/A003422">OEIS A003422</a> for more information.</em></p>

<p><em>Expected Output:</em></p>

<pre><code>1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114
</code></pre>

<p>The task specification unfortunately lacks a precise definition of left factorials. Looking at <a href="http://oeis.org/A003422">OEIS A003422</a>, I found we could use the following recursive definition:</p>

<pre><code>a(0) = 0
a(1) = 1
a(n) = n*a(n - 1) - (n - 1)*a(n - 2)
</code></pre>

<p>After I did some of the implementations below, I found another definition making more sense of left factorials (a.k.a. factorial sums). Left factorial of the integer n is the sum of the factorials of the integers from 0 to n - 1. Left factorial is commonly denoted by a prefixed exclamation mark. So we have:</p>

<p><img alt="left_factorial.jpg" src="http://blogs.perl.org/users/laurent_r/left_factorial.jpg" width="132" height="80" class="mt-image-none" style="" /></p>

<p>with ! 0 = 0.</p>

<h3>Left Factorials in Raku</h3>

<p>The implementation can easily be derived from the recursive definition above, except that I prefer an iterative implementation (well, it could probably be argued it is sort of a <em>cached</em> recursive approach, even though there is no recursive subroutine call):</p>

<pre><code>my @a = 0, 1, 2;
for 3..10 -&gt; $n {
    @a[$n] = $n * @a[$n -1] - ($n - 1) * @a[$n - 2];
}
say @a[1..10];
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./left_fact.raku
(1 2 4 10 34 154 874 5914 46234 409114)
</code></pre>

<p>In Raku, we can also use <a href="https://docs.raku.org/language/variables#index-entry-_(sigilless_variables">sigilless variables</a>) to make the code look more like a math formula:</p>

<pre><code>my @a = 0, 1;
for 2..10 -&gt; \n {
    @a[n] = n * @a[n -1] - (n - 1) * @a[n - 2];
}
say @a[1..10];
</code></pre>

<p>This new version displays the same output.</p>

<p>As mentioned before, the above implementations were done before I found about the second (summation of factorials) formula. Raku has <a href="https://docs.raku.org/language/operators#index-entry-[+]_(reduction_metaoperators">reduction metaoperators</a>) making it easy to implement factorials and summations. This can lead to this concise Raku one-liner using two triangular reduction operators:</p>

<pre><code>$ raku -e 'say (|[\+] 1, (|[\*] 1..*))[0..9]'
(1 2 4 10 34 154 874 5914 46234 409114)
</code></pre>

<p>In addition, we could also define a prefix <code>!</code> operator, but this has the drawback of redefining the standard negation prefix operator <code>!</code>. This does work, but it&#8217;s probably not very wise to do so.</p>

<h3>Left Factorials in Perl</h3>

<p>Again, the implementation can easily be derived from the recursive definition provided above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @a = (0, 1);
for my $n (2..10) {
    $a[$n] = $n * $a[$n -1] - ($n - 1) * $a[$n - 2];
}
say "@a[1..10]";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./left_fact.pl
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h3>Left Factorials in Other Languages</h3>

<h4>In Julia</h4>

<p>Using the recursive definition of left factorials:</p>

<pre><code>a = [1, 2] # Julia arrays start with index 1

for n in 3:10
    push!(a, n * a[n - 1] - (n - 1) * a[n - 2])
end
println(a)
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./left_fact.jl
[1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114]
</code></pre>

<h4>In Ring</h4>

<p>Here, we use the summation of factorials definition. For each iteration in the <code>for</code> loop, we multiply <code>fact</code> by the loop variable to obtain the new factorial, and we add the new factorial to the <code>sum</code> variable. For some strange reason, <code>see left_fact + " "'</code> doesn&#8217;t output a space after the variable value, where as <code>see " " + left_fact</code> does what we want. To me, it looks like a small bug in the language, but I may be missing something.</p>

<pre><code>left_fact = 1
fact = 1
for i = 1 to 10
    see " " + left_fact 
    fact *= i
    left_fact += fact  
next
see " " + nl
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./left_fact.ring
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Python</h4>

<p>Again using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1

for n in range (1, 11):
    print(left_fact)
    fact = fact * n
    left_fact = left_fact + fact
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./left_fact.py
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<p>Note that I didn&#8217;t remember how to how to output data without a new line in Python, and I was too lazy to spend time to find out. This is proverbially left as an exercise to the reader, as this output fits the specification bill. </p>

<h4>In Awk</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>BEGIN {
    left_fact = 1
    fact = 1
    for (i = 1; i &lt;= 10; i++) {
        printf "%d ", left_fact
        fact *= i
        left_fact += fact  
    }
    printf "\n"
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f left_fact.awk
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In C</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>#include &lt;stdio.h&gt;

int main () {
    int sum = 1;
    int fact = 1;
    for (int i = 1; i &lt;= 10; i++) {
        printf("%d ", sum);
        fact *= i;
        sum += fact;
    }
    printf ("\n");
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./test-left
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Bc</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>sum = 1
fact = 1

for (n = 1; n &lt;= 10; n ++) {
    print sum, " "
    fact = fact * n
    sum = sum + fact
}
</code></pre>

<p>Output:</p>

<pre><code>$ bc left_fact.bc
bc 1.06.95
Copyright (...)
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Tcl</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>set left_fact 1
set fact 1
puts -nonewline $left_fact

for {set i 1} {$i &lt;= 10} {incr i} {
    puts -nonewline "${left_fact} "
    set fact [expr $fact * $i]
    set left_fact [expr $left_fact + $fact]

}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./left_fact.tcl
11 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In R</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>left_fact &lt;- 1
fact &lt;- 1

for (i in 1:10) {
    cat(left_fact, '')
    fact &lt;- fact * i
    left_fact &lt;- left_fact + fact
}
cat("\n")
</code></pre>

<p>Output:</p>

<pre><code>$ Rscript left_fact.r
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Pascal</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>Program leftfact;

var
    fact, left_fact: longint;
    i: integer;

begin
    left_fact := 1;
    fact := 1;
    for i := 1 to 10 do begin
        write(left_fact, ' ');
        fact := fact * i;
        left_fact := left_fact + fact;
    end;
    writeln('');
end.
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Rust</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fn main() {
    let mut fact = 1;
    let mut left_fact = 1;
    for n in 1..11 {
        println!("{}", left_fact);
        fact = fact * n;
        left_fact = left_fact + fact;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<h4>In Go</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>package main

import "fmt"

func main() {
    left_fact := 1
    fact := 1
    for i := 1; i &lt;= 10; i++ {
        fmt.Printf("%d ", left_fact)
        fact *= i
        left_fact += fact
    }
    fmt.Printf("\n")
}
</code></pre>

<p>Output:</p>

<pre><code>1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Scala</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>object fact_left extends App {
  var fact = 1
  var left_fact = 1
  for (n &lt;- 1 to 10) {
    println(left_fact)
      fact *= n
    left_fact += fact
  }
}
</code></pre>

<p>Output:
    1
    2
    4
    10
    34
    154
    874
    5914
    46234
    409114</p>

<h4>In Ruby</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1
for n in 1..10 
    printf "%d ", left_fact
    fact *= n
    left_fact += fact
end
printf "\n"
</code></pre>

<p>Output:</p>

<pre><code>ruby left_fact.rb
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Lua</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1
for n = 1, 10 do
    print(left_fact)
    fact = fact * n
    left_fact = left_fact + fact
end
</code></pre>

<p>Output:</p>

<pre><code>$ lua left_fact.lua
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<h4>In Kotlin</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fun main() {
    var fact = 1
    var left_fact = 1
    for (i in 1..9) {
        fact *= i
        left_fact += fact
        print("$left_fact ")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact.kexe
2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h2>Task 2: Factorions</h2>

<p><em>You are given an integer, <code>$n</code>.</em></p>

<p><em>Write a script to figure out if the given integer is factorion.</em></p>

<blockquote>
  <p><em>A factorion is a natural number that equals the sum of the factorials of its digits.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 145
Output: 1

    Since 1! + 4! + 5! =&gt; 1 + 24 + 120 = 145
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 123
Output: 0

    Since 1! + 2! + 3! =&gt; 1 + 2 + 6 &lt;&gt; 123
</code></pre>

<p>We will slightly deviate from the task specification and write a subroutine that checks whether an integer is a factorion, and write a program to find all factorions in a given range. </p>

<h3>Factorions in Raku</h3>

<p>Here again, we use twice the <a href="https://docs.raku.org/language/operators#index-entry-[+]_(reduction_metaoperators">reduction metaoperators</a>), one (<code>[*] 1..$_</code>) to compute the factorial of a digit, and one (<code>[+]</code>) to sum up the digit factorials. </p>

<pre><code>sub is_factorion (Int $in) {
    my $sum = [+] map { [*] 1..$_ }, $in.comb;
    return $sum == $in;
}
say $_ if is_factorion $_ for 1..50000;
</code></pre>

<p>We chose here an upper limit of 50,000 because it is known and proven that there are only 4 factorions in the decimal system, all smaller than 50,000. This solution is concise and elegant and the <code>is_factorion</code> subroutine could easily be boiled down to a single code line:</p>

<pre><code>sub is_factorion (Int $in) {
    return $in == [+] map { [*] 1..$_ }, $in.comb;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./factorion.raku
1
2
145
40585

real    0m13,079s
user    0m0,015s
sys     0m0,030s
</code></pre>

<p>Note that I timed the execution because I felt it was a bit slow. The reason for that slowness is that we&#8217;re computing the factorial of each digit a very large number of times. It is significantly more efficient to cache the factorials of each digit, for example by storing in an array (<code>@fact</code>) the precomputed factorials of digits 0 to 9.</p>

<pre><code>my @fact = map { [*] 1..$_ }, 0..9;
sub is_factorion (Int $in) {
    my $sum = [+] map { @fact[$_] }, $in.comb;
    return $sum == $in;
}
say $_ if is_factorion $_ for 1..50000;
</code></pre>

<p>This modified program displays the following output and timings:</p>

<pre><code>$ time raku ./factorion.raku
1
2
145
40585

real    0m1,553s
user    0m0,000s
sys     0m0,015s
</code></pre>

<p>So caching the digit factorials made the program about 8.5 times faster.</p>

<h3>Factorions in Perl</h3>

<p>In Perl, we implemented directly the cached version with a <code>@digit_fact</code> array:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub fact {
    my $i = shift;
    my $prod = 1;
    $prod *= $_ for 2..$i;
    return $prod;
}

my @digit_fact = map {fact $_} 0..9;

sub is_factorion {
    my $in = shift;
    my $sum = 0;
    $sum += $_ for map { $digit_fact[$_] } split //, $in;
    return $sum == $in;
    #say $sum;
}
for (1..50000) {
    say $_ if is_factorion($_)
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl ./factorion.pl
1
2
145
40585

real    0m0,182s
user    0m0,140s
sys     0m0,015s
</code></pre>

<h3>Factorions in Other Languages</h3>

<h4>In Julia</h4>

<pre><code>fact = map(x -&gt; factorial(x), Vector(0:9))

function is_factorion(num)
    sum = 0
    start_num = num
    for n in 1:length(string(num))
        sum += fact[num % 10 + 1] # Julia arrays start at 1
        num = num ÷ 10
    end
    return sum == start_num
end

for i in 1:50000
    if is_factorion(i)
        println(i)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./factorion.jl
1
2
145
40585
</code></pre>

<h4>In Ring</h4>

<p>In Ring, list index starts at 1. That makes index management a bit complicated in this case, because we need to store the factorial of 0. So factorial 0 is stored at index 1, and all the others are shifted by 1. It’s not a problem, but it makes the code look a bit unnatural.</p>

<pre><code>fact = [1, 1]
for k = 2 to 9
    add (fact, k * fact[k]) # list indices start at 1
next
# see fact + nl
for n = 1 to 50000
    if is_factorion(fact, n)
        see n + nl
    ok
next

func is_factorion fact, input
    sum = 0
    n = "" + input
    for i = 1 to len(n)
        digit = n[i]
        sum += fact[1 + digit]
    next
    return input = sum
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./factorion.ring
1
2
145
40585
</code></pre>

<h4>In Python</h4>

<pre><code>fact = [1] * 10
for n in range (1, 10):
    fact[n] = n * fact[n - 1]

def is_factorion (input):
    sum = 0
    n = str(input)
    for i in range (0, len(n)):
        sum = sum + fact[int(n[i])]

    return input == sum

for n in range(1, 50000):
    if is_factorion(n):
        print(n)
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./factorion.py
1
2
145
40585
</code></pre>

<h4>In C</h4>

<pre><code>#include &lt;stdio.h&gt;

char is_factorion(int fact[], int num) {
    int sum = 0;
    int n = num;
    while (n &gt; 0) {
        sum += fact[n % 10];
        n /= 10;
    }
    return num == sum;
}

int main() {
    int fact[10];
    fact[0] = 1;
    for (int i = 1; i &lt;= 9; i++) {
        fact[i] = i * fact[i - 1];
    }

    for (int n = 1; n &lt; 50000; n++) {
        if (is_factorion(fact, n)) {
            printf("%d ", n);
        }
    }
    printf("\n");
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./factorion 1 2 145 40585
</code></pre>

<h4>In Awk</h4>

<pre><code>function populate_fact() {
    fact[0] = 1
    for (n = 1; n &lt;= 9; n++) {
        fact[n] = n * fact[n - 1]
    }
}
function is_factorion(num) {
    sum = 0
    start_num = num
    for (n = 0; n &lt; length(start_num); n++) {
        sum += fact[num % 10]
        num = int(num / 10)
    }
    return sum == start_num
 }
BEGIN {
    populate_fact()
    for (i = 1; i &lt;= 50000; i++) {
        if (is_factorion(i)) {
            print i
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f factorion.awk
1
2
145
40585
</code></pre>

<h4>In Bc</h4>

<pre><code>fact[0] = 1
for (n = 1; n &lt;= 9; n++) {
    fact[n] = n * fact[n - 1]
}
for (n = 1; n &lt;= 50000; n++) {
    sum = 0
    i = n
    while (i &gt; 0) {
        sum += fact[i % 10]
        i /= 10
    }
    if (sum == n) {
        print n, " "
    }
}
halt
</code></pre>

<p>Output:</p>

<pre><code>$ bc  factorion.bc
bc 1.06.95
Copyright (...)
1 2 145 40585
</code></pre>

<h4>In Scala</h4>

<pre><code>object factorion extends App {
  def is_factorion(fact: Array[Int], num: Int): Boolean = {
    var sum = 0
    var i = num
    while (i &gt; 0) {
      sum += fact(i % 10)
      i /= 10
    }
    return num == sum
  }

  val fact = new Array[Int](12)
  fact(0) = 1
  for (n &lt;- 1 to 9) {
    fact(n) = n * fact(n - 1)
  }

  for (j &lt;- 1 to 50000) {
    if (is_factorion(fact, j)) {
      println(j)
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1
2
145
40585
</code></pre>

<h4>In Lua</h4>

<pre><code>function is_factorion(fact, num)
    sum = 0
    i = num
    while i &gt; 0 do
        sum = sum + fact[ 1 + i % 10]
        i = math.floor(i / 10)
    end
    return num == sum
end

fact = {1}
for n = 1, 10 do
    table.insert(fact, n * fact[n])
end
for j = 1, 50000 do
    if is_factorion(fact, j) then
        print(j)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ lua factorion.lua
1
2
145
40585
</code></pre>

<h4>In Kotlin</h4>

<pre><code>fun main() {
    var fact = mutableListOf&lt;Int&gt;()
    fact.add(1)
    for (n in 1..9) {
        fact.add(n * fact[n-1])
    }
    for (num in 1..50000) {
        var i = num
        var sum = 0
        while (i &gt; 0) {
            sum += fact[i % 10]
            i /= 10
        }
        if (num == sum) print ("$num ")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./factorion.kexe
1 2 145 40585
</code></pre>

<h4>In Ruby</h4>

<pre><code>def is_factorion(fact, num)
    sum = 0
    i = num
    while i &gt; 0
        i, d = i.divmod(10)
        sum += fact[d]
    end
    return num == sum
end

fact = [1]
for n in 1..10
    fact.push(n * fact[n - 1])
end
for j in 1..50000
    if is_factorion(fact, j)
        printf "%d ", j
    end
end
printf("\n")
</code></pre>

<p>Output:</p>

<pre><code>$ ruby factorion.rb
1 2 145 40585
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on March 6, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5956476339167670765</id>
    <published>2022-02-26T15:35:00.000+01:00</published>
    <updated>2022-02-26T15:35:21.198+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxxi) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.45&lt;/strong&gt; on 2022-02-26&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 10 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.878' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.878&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 89&lt;/li&gt;  &lt;li&gt;Previous version: 1.876 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.876' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.876&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.875 was 2 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220220' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220220&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220120 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-Redis-3.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Redis&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Redis driver based on Mojo::IOLoop &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.29&lt;/strong&gt; on 2022-02-23&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 3.27 was 3 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Package-Stash-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Package::Stash&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Routines for manipulating stashes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2022-02-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 year, 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.076&lt;/strong&gt; on 2022-02-25&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.075 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9507' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9507&lt;/strong&gt; on 2022-02-24&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9505 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 0.26 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302189' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302189&lt;/strong&gt; on 2022-02-25&lt;/li&gt;  &lt;li&gt;Votes: 173&lt;/li&gt;  &lt;li&gt;Previous version: 1.302188 was 4 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5956476339167670765/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxxi-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5956476339167670765"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5956476339167670765"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxxi-13-great-cpan-modules-released.html" title="(ccclxxxi) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8972096758362802475</id>
    <published>2022-02-26T15:32:00.000+01:00</published>
    <updated>2022-02-26T15:32:26.352+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-02-26 14:31:25 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71212667" target="_blank"&gt;Unit-testing a .pl Perl file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71189620" target="_blank"&gt;How can I read user input using Term::ReadLine without having the newline character printed out?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71189457" target="_blank"&gt;How to use in and out bind variables with executemany in cx_Oracle in Python&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71208147" target="_blank"&gt;How to execute the command in another bash prompt in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71270102" target="_blank"&gt;Perl Simple heads or tails game&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8972096758362802475/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8972096758362802475"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8972096758362802475"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxiii-stackoverflow-perl-report.html" title="(dxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Common causes and fixes for HTTP 500 Error in Perl CGI scripts</title>
  <summary type="html"><![CDATA[<p>
One of the nasty things that can happen in a Perl CGI environment is to get a 500 HTTP error. It is nasty as it is hard to know what is the problem and how to solve it.
<p>
The first step is to look at the error log of your web server, if you can. If you can't well, best would be to change hosting to one that will give you access to the error
log.
<p>
On this page you'll find some of the most common cases and their solutions.
<p>
]]></summary>
  <updated>2022-02-25T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/http-500-error"/>  <id>https://perlmaven.com/http-500-error</id>
  <content type="html"><![CDATA[<p>
One of the nasty things that can happen in a Perl CGI environment is to get a 500 HTTP error. It is nasty as it is hard to know what is the problem and how to solve it.
<p>
The first step is to look at the error log of your web server, if you can. If you can't well, best would be to change hosting to one that will give you access to the error
log.
<p>
On this page you'll find some of the most common cases and their solutions.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>My Favorite Modules: Devel::NYTProf</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-develnytprof.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10719</id>
    <published>2022-02-25T03:37:22Z</published>
    <updated>2022-02-25T03:40:52Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>'It is a capital mistake to theorize before one has data.' -- Sherlock Holmes, "A Scandal in Bohemia"</cite></p>

<p>The mental excursion that led to this blog post started with a report from Olaf Alders that my <a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter">Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter</a> was generating a false positive on variables used only as defaults in subroutine signatures. After the first cut at fixing this I thought a regression test was in order. I did this by running both unpatched and patched versions of the policy against my <a href="https://metacpan.org/dist/CPAN-Mini">Mini CPAN</a>, and then <code>diff</code> on the outputs.</p>

<p>This has always taken the better part of a day to run, and given that it had to expand all the distributions first and then run a fairly brute-force policy against anything it found, I accepted this as the price of conscientiousness.</p>

<p>But then I noticed, quite by chance, that running the patched policy against the <a href="https://metacpan.org/dist/Number-Phone-FR">Number-Phone-FR</a> distribution appeared to hang. Investigation failed to turn up any reason for the modifications to do this, and when I ran the unpatched code against that distribution it also appeared to hang. I knew it eventually completed, though, since the full Mini CPAN scan using unpatched code eventually completed.</p>

<p>I fairly quickly isolated the slowness to the analysis of one file: <code>lib/Number/Phone/FR/Full.pm</code>. This was only 46 lines long, but contained 182615 characters, most of them in one monster regular expression.</p>

<p>This immediately made me suspect <a href="https://metacpan.org/pod/PPIx::Regexp">PPIx::Regexp</a>, since I have great faith in my own ability to write bugs. This finds siblings the same way PPI does, which involves traversing an array rather than holding weak links. So I started looking into an optimization that tracked the number of each kind of token in the parse, since the monster regular expression contained no interpolations. I was about to start implementing when I thought, "Maybe I should actually profile this code."</p>

<p>It was a good thing I did, because <a href="https://metacpan.org/pod/Devel::NYTProf">Devel::NYTProf</a> told a very different story. According to it, the majority of the time was spent on one statement in <a href="https://metacpan.org/pod/Text::Tabs">Text::Tabs</a>' <code>expand()</code> method, which <code>PPIx::Regexp</code>'s tokenizer was using in its computation of logical column positions.</p>

<p>For the curious, that statement was <code>$offs = () = /\PM/g;</code>. Now, I do not have huge amounts of Unicode-Fu, but I understand this to be counting all the characters in the topic variable which are not explicitly zero-width. The profiler said that statement consumed 2825 seconds for 161163 executions.</p>

<p>Since <a href="https://metacpan.org/dist/PPI">PPI</a>, which underpins any Perl Critic policy, did not appear to have this problem, I looked at how it calculated column positions, and found a simple analysis of tab characters and their positions. This is technically less correct than <code>Text::Tabs</code>, but for the sake of expediency I chose consistency over strict correctness. Using the patched <code>PPIx::Regexp</code>, the patched Perl Critic policy analyzed the problem module in 500 seconds, as compared to 4000 seconds for the unpatched <code>PPIx::Regexp</code>.</p>

<p>The moral: Because I took a couple seconds to actually think, and a couple minutes to install <a href="https://metacpan.org/pod/Devel::NYTProf">Devel::NYTProf</a>, I saved several hours developing an optimization that did not address the actual problem. I do not count the hour or so running the profiler (it was not significantly longer than the time to run the un-profiled code) because that did not require my actual attention.</p>

<p><cite>The actual timings were done on a 2.3 GHz Dual-Core Intel i5 running macOS 12.2.1 Monterey. No effort was made to control other loads on the system, and the timings were not replicated enough to be statistically valid. But, hey, cutting execution time by 7/8 looks like a win to me.</cite></p>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"><code>re</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl tooling - less well known but powerful</title>
    <link rel="alternate" href="https://dev.to/lancew/perl-tooling-less-well-known-but-powerful-di3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl is a mature language, businesses have been relying on it for decades, a common refrain is that Perl is battle tested. One of the strengths of a mature language is that the community builds tooling around the language. Perl has some well known tools and some less well known ones. In this tale I want to talk about some of the tooling I like and perhaps are less well known.</p>

<p>Having a good set of tools helps developers build software better and more easily.</p>

<h2>
  
  
  Well known tools
</h2>

<p>Here are some of the netter known tools that many Perl developers use everyday.</p>

<h3>
  
  
  Perl::Tidy
</h3>

<p>Consistent formatting is surprisingly important and time consuming. Especially in a team environment running Perl::Tidy is helpful for visually formatting the code so that no matter who writes the changes they are formatted consistently. Be that tabs vs. spaces or aligning the "=" signs in variable assignments.</p>

<p>Perltidy is similar to gofmt (GoLang), prettifier (Node, etc) or elm-format (Elm).</p>

<h3>
  
  
  Perl::Critic
</h3>

<p>perlcritic is a static analysis tool, it is a very flexible and configurable tool that allows you to define and detect rules on things you don't want in your code base.</p>

<p>For example, a common rule is that all sub routines need an explicit return; perlctitic can enforce this across your code base. There are over 100 "policies" on CPAN for perlcritic. Another one <code>Perl::Critic::Policy::logicLAB::RequireParamsValidate</code> insists that the Params::Validate module is used to validate all parameters to your subroutines.</p>

<p><code>Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter</code> prevents you defining a variable that is never used. This is a pretty common thing to find in a large code base, either because the variable is no longer used or there is a typo somewhere.</p>

<h3>
  
  
  prove
</h3>

<p>Perl has a strong and well developed testing culture and tooling. <code>prove</code> is the test runner most developers are used to using.</p>

<p>There are a wide selection of Test:: modules that you can use for mocking, unit testing, BDD, even enforcing Perl::Critic policies.</p>

<h3>
  
  
  perlbrew
</h3>

<p>Perlbrew is relatively well known, though perhaps less often used than it might deserve to be.</p>

<p>Perlbrew allows an easy way to install various versions of Perl and switch between them. It is often used on your development machine especially if you need to work on specific versions of Perl so you can support legacy applications. Increasingly we are seeing it used in the building of Docker container.</p>

<h2>
  
  
  Less well known tools
</h2>

<h3>
  
  
  carton
</h3>

<p>If you have written any node you will understand carton. With carton you describe your module dependencies in a file called <code>cpanfile</code> and then install them with <code>carton install</code> This installs all the modules in a <code>./local</code> directory and you can then run the perl application with <code>carton exec</code> and it runs the code with all the dependencies in the correct path.</p>

<p>This is particularly helpful for when you have multiple projects and they use differing versions of the same dependencies.</p>

<p>Because I use carton with almost all my projects now, I have the following two aliases setup:</p>

<p><code>perl='carton exec perl'</code></p>

<p><code>prove='carton exec prove'</code></p>

<p>These mean that if I forget to type <code>carton exec perl some_script.pl</code> and type <code>perl some_script.pl</code> it works as expected using the local dependencies. The <code>prove</code> alias is handy as I almost never remember to type <code>carti exec prove</code>.</p>

<h3>
  
  
  update-cpanfile
</h3>

<p>This command-line tool is really helpful for maintenance of your dependencies. When you run it with <code>update-cpanfile pin</code> it will pin your dependencies in the cpanfile. <code>carton install</code> will then install the specific versions in the file. This keeps you dependencies consistent; but you could do that by hand in the cpanfile.</p>

<p>Where cpanfile-update is really helpful is when you run it with <code>update-cpanfile update</code>, this will make the tool check cpan.org for the latest version of modules and will update the cpanfile for you with the new version.</p>

<p>If you maintain a variety of projects or have lots of dependencies update-cpanfile is a real time saver.</p>

<h3>
  
  
  yath
</h3>

<p>The simplest way to describe yath is to say that <code>yath</code> is the new <code>prove</code>... but better.</p>

<p>The venerable prove has been used for a long time, yath is relatively new (2016) and can be used pretty much to do all the things prove does.</p>

<p>However, it's able to do some really interesting things such as running in a daemon mode saving startup times... give it a try.</p>

<h3>
  
  
  perlvars and perlimports
</h3>

<p>These two tools are super handy for analyzing your code base to ensure that some undesirable code smells.</p>

<p><code>perlvars</code> identifies unused variables in your code.</p>

<p><code>perlimports</code> identifies unused modules you may have included in your code but are not using.</p>

<p>Removing unused variables and modules helps keep your code "tidy" and improve memory consumption and protect against such things as methods from an unused module causing issues when another module has a method with same name for example.</p>

<h2>
  
  
  What am I missing?
</h2>

<p>This is just a short list of tools I wanted to mention, in part to invite people to let me know what they use.</p>

<p>So if you have some tools you use all the time, drop me an email or a tweet.</p>

<p>Tags: <a href="http://perl.kiwi/tales/tag/perl/">perl</a><a href="http://perl.kiwi/tales/tag/tools/">tools</a></p>

</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/lancew/perl-tooling-less-well-known-but-powerful-di3</id>
    <published>2022-02-24T00:00:00Z</published>
    <updated>2022-02-24T00:00:00Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Finding unused variables in your Perl code</title>
    <link rel="alternate" href="http://blogs.perl.org/users/olaf_alders/2022/02/finding-unused-variables-in-your-perl-code.html"/>
    <id>tag:blogs.perl.org,2022:/users/olaf_alders//280.10712</id>
    <published>2022-02-23T21:14:14Z</published>
    <updated>2022-02-23T21:15:02Z</updated>
    <author>
        <name>Olaf Alders</name>
        <uri>http://www.wundercounter.com</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/olaf_alders/">
        <![CDATA[<p>I've put together a brief overview of some of the ways to automate finding unused variables in your Perl code:</p>

<p><a href="https://www.olafalders.com/2022/02/22/finding-unused-perl-variables/">https://www.olafalders.com/2022/02/22/finding-unused-perl-variables/</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>and or AND and ElasticSearch, or: Case matters</title>
    <link href="http://domm.plix.at/perl/2022_02_and_or_and.html"/>
    <id>http://domm.plix.at/perl/2022_02_and_or_and.html</id>
    <updated>2022-02-22T18:58:47+00:00</updated>
    <category term="perl"/>
    <summary type="html">Today I spend a few hours hunting a weird bug. I got a report that people entering data for the Steiermärkische Landesbibliothek where not able to find duplicate entries when adding new books. In ...</summary>
    <content type="html">&lt;p&gt;Today I spend a few hours hunting a weird bug. I got a report that people entering data for the &lt;a href="https://katalog.landesbibliothek.steiermark.at/"&gt;Steiermärkische Landesbibliothek&lt;/a&gt; where not able to find duplicate entries when adding new books. In theory, &lt;a href="https://koha-community.org/"&gt;Koha&lt;/a&gt; should search through all the already existing data and present the user with a dialog if they maybe want to reuse the existing entry, if one is found:&lt;/p&gt;

&lt;p&gt;&lt;a href="../perl/2022_02_and_or_and_images/and_or_and_001.jpg"&gt;&lt;img src="../perl/2022_02_and_or_and_images/and_or_and_001.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works when an &lt;span class="caps"&gt;ISBN &lt;/span&gt;was entered, but not when "only" title, author and some other data was available. To make things a bit more complicated, we're using the not-default ElasticSearch backend, as opposed to the old-school Zebra&lt;sup class="footnote"&gt;&lt;a href="#fn0"&gt;0&lt;/a&gt;&lt;/sup&gt; index for searching.&lt;/p&gt;

&lt;p&gt;So I dug through the source code, adds some strategic &lt;code&gt;Data::Dumper&lt;/code&gt; statements to get the actual query sent to ElasticSearch, and then played a bit with that query, sending it directly to ElasticSearch via &lt;code&gt;curl&lt;/code&gt;. The best way to do this (IMO) is to store the query into a file, and use &lt;code&gt;-d filename&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:9200/biblios/_search?pretty -X GET -H 'Content-Type: application/json' -d query.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's the &lt;code&gt;query.json&lt;/code&gt; (that was not returning any results)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;query&amp;quot;: {
    &amp;quot;query_string&amp;quot;: {
      &amp;quot;query&amp;quot;: &amp;quot;(author:'Schwartz, Randal J' and title:'Einführung in Perl')&amp;quot;,
      &amp;quot;default_operator&amp;quot;:&amp;quot;AND&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;cross_fields&amp;quot;,
      &amp;quot;analyze_wildcard&amp;quot;: true, &amp;quot;fuzziness&amp;quot;: &amp;quot;auto&amp;quot;, &amp;quot;lenient&amp;quot;: true
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this search is using the simple &lt;code&gt;query_string&lt;/code&gt; search, where you pass a semi-complex query as a string instead of composing a very deeply nested data structure&lt;sup class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(author:'Schwartz, Randal J' and title:'Einführung in Perl')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some fiddling and testing I found that removing &lt;code&gt;&amp;quot;default_operator&amp;quot;:&amp;quot;AND&amp;quot;&lt;/code&gt; yields results (but not very good results..)&lt;/p&gt;

&lt;p&gt;So I took my problem to the Koha &lt;span class="caps"&gt;IRC &lt;/span&gt;channel, where kidclamp provided the needed clue after some back and forth:&lt;/p&gt;

&lt;h4&gt;Case matters&lt;/h4&gt;

&lt;p&gt;When using the &lt;code&gt;simple_query&lt;/code&gt;, ElasticSearch interprets the string &lt;code&gt;&amp;quot;AND&amp;quot;&lt;/code&gt; as a boolean operator linking the literal values in the query. But it interprets the string &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; as a literal value!&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;foo AND bar&amp;quot;&lt;/code&gt; finds documents that contain &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;foo and bar&amp;quot;&lt;/code&gt; finds documents that contain &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;In the latter case, ElasticSearch checks &lt;code&gt;default_operator&lt;/code&gt;, which in our case was set to &lt;code&gt;AND&lt;/code&gt;, thus only finding documents that contained the string &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; in addition to what we're actually searching for&lt;/li&gt;
&lt;li&gt;Removing &lt;code&gt;default_operator&lt;/code&gt; let ElasticSearch fall back to the default, &lt;code&gt;OR&lt;/code&gt;, so we now found stuff, but very crappy stuff (anything with &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; in &lt;strong&gt;any&lt;/strong&gt; field, not only in title or author)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these results were really usable!&lt;/p&gt;

&lt;p&gt;So the real fix was to patch Koha to use an uppercase &lt;code&gt;AND&lt;/code&gt; to construct this query. See &lt;a href="https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=30153"&gt;Koha Bug #30153&lt;/a&gt; for the gory details&lt;sup class="footnote"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Thanks to kidclamp for helping my locate the problem and to the Koha devs for quickly applying and testing my patch!&lt;/p&gt;

&lt;h4&gt;Footnotes&lt;/h4&gt;

&lt;p class="footnote" id="fn0"&gt;&lt;sup&gt;0&lt;/sup&gt; Don't ask!&lt;/p&gt;

&lt;p class="footnote" id="fn1"&gt;&lt;sup&gt;1&lt;/sup&gt; I used to joke that ElasticSearch devs get paid by the tab indentation needed to express a search query&lt;/p&gt;

&lt;p class="footnote" id="fn2"&gt;&lt;sup&gt;2&lt;/sup&gt; Or not so gory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-        my $op = 'and';
+        my $op = 'AND';&lt;/code&gt;&lt;/pre&gt;</content>
    <category term="Koha"/>
    <category term="ElasticSearch"/>
  </entry>
  <entry>
    <title>#552 - Outreachy and TPF</title>
    <link rel="alternate" href="https://perlweekly.com/archive/552.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;Welcome to my personal 98th and overall 552nd edition of the Perl Weekly newsletter. I can't wait for the day when I reach the 3-digits number.&lt;/p&gt;
&lt;p&gt;Today, I would like to talk about the Outreachy program and its association with TPF. Few days ago, I came across a Facebook post by a friend of mine sharing the news TPF (The Perl Foundation) is looking mentor and project for the year 2022. Please check out the official &lt;a href="https://news.perlfoundation.org/post/outreachy-2022"&gt;announcement&lt;/a&gt;. I have been following the work done as part of the Outreachy program. In the past, it has supported &lt;a href="https://world.openfoodfacts.org/"&gt;Open Food Facts&lt;/a&gt;, a very popular Perl based project. To be honest, I find the application process to submit project idea is not smooth. It would be a big help if &lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge (Perl &amp; Raku)&lt;/a&gt; get the support too. As some of you associated with the project knows it is currently built using Hugo and hosted on &lt;a href="https://github.com/manwar/theweeklychallenge"&gt;Github&lt;/a&gt;. I have been planning to get it over to pure Perl template web based solution e.g. Dancer2 and hosted by real hosting service e.g Digital Ocean. As we grow bigger with times, I find it hard to manage the contributions on GitHub. It takes longer now to process comparatively. If it ever get approved, I can offer to be a mentor to the selected candidate.&lt;/p&gt;
&lt;p&gt;There was a good news shared last week about Perl warning i.e. "signatures are experimental" is going to disappear for ever with the next major release. I always wanted to have this feature in my Perl. I can't wait for the next release to use it. Do you want to know more about it? Please &lt;a href="https://github.com/Perl/perl5/pull/19424"&gt;checkout here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Do you need help with Perl related queries?&lt;/p&gt;
&lt;p&gt;I highly recommend, the two Facebook groups (members only), &lt;a href="https://www.facebook.com/groups/perlcommunity"&gt;The Perl Community&lt;/a&gt; (run and managed by Curtis Poe) and &lt;a href="https://www.facebook.com/groups/perlprogrammers"&gt;Perl Programmers&lt;/a&gt; (run and managed by Will Braswell).&lt;/p&gt;
&lt;p&gt;For parents of school going kids in England, welcome to the daily routine after a week long break. I know it is tough, specially if you have to cover two different schools in the morning rush. Enjoy the rest of the newsletter&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/552.html</id>
    <published>2022-02-21T10:00:00Z</published>
    <updated>2022-02-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5146971702396319142</id>
    <published>2022-02-19T15:07:00.000+01:00</published>
    <updated>2022-02-19T15:07:22.215+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxx) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/App-Staticperl-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Staticperl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - perl, libc, 100 modules, all in one standalone 500kb file &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 years, 3 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carmel-v0.1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carmel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN Artifact Repository Manager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.1.39&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v0.1.38 was 3 years, 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Code-TidyAll-0.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.81&lt;/strong&gt; on 2022-02-17&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.80 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.15.1' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15.1&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.0 was 8 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Dist-Milla-v1.0.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Milla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution builder, Opinionated but Unobtrusive &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.0.21&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: v1.0.20 was 3 years, 9 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Getopt-Long-Complete-0.316' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Complete&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A drop-in replacement for Getopt::Long, with shell tab completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.316&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.315 was 1 year, 7 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 9 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.075&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.074 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20220217' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220217&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 123&lt;/li&gt;  &lt;li&gt;Previous version: 20211029 was 3 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 158&lt;/li&gt;  &lt;li&gt;Previous version: 1.60 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9505' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9505&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9503 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.608' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.608&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.607 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5146971702396319142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html" title="(ccclxxx) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5789931256339380794</id>
    <published>2022-02-19T15:03:00.003+01:00</published>
    <updated>2022-02-19T15:03:39.700+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-02-19 14:03:11 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71115578" target="_blank"&gt;Match a float and multiply by 100&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71131916" target="_blank"&gt;Perl Regex Query - filter the contents inside the file which are older than 18 months&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71167693" target="_blank"&gt;How can I overwrite file after replace the word?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71147634" target="_blank"&gt;I have a problem trying to put single quotes around a text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71113863" target="_blank"&gt;perl compilation: 'Too many levels of symbolic links'&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5789931256339380794/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html" title="(dxxii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Triangles and rectangles</title>
    <link rel="alternate" href="https://dev.to/simongreennet/triangles-and-rectangles-45p8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 152
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-152/">The challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-152/sgreen">My solution</a></p>

<h2>
  
  
  TASK #1 › Triangle Sum Path
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a triangle array.</p>

<p>Write a script to find the minimum sum path from top to bottom.</p>

<h3>
  
  
  My solution
</h3>

<p>This one appear to be quick and easy. Take the input and using the <a href="https://docs.python.org/3.8/library/json.html">json</a> module (<a href="https://metacpan.org/pod/JSON">JSON</a> in Perl) turn it into an array of arrays. Then sum up the lowest number in each row, and display the result.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py "[ [1], [5,3], [2,3,4], [7,1,0,2], [6,4,5,2,8] ]"
8

$ ./ch-1.py "[ [5], [2,3], [4,1,5], [0,1,2,3], [7,2,4,1,9] ]"
9
</code></pre>

</div>



<h2>
  
  
  TASK #2 › Rectangle Area
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given coordinates bottom-left and top-right corner of two rectangles in a 2D plane.</p>

<p>Write a script to find the total area covered by the two rectangles.</p>

<h3>
  
  
  My solution
</h3>

<p>Originally I thought this challenge was impossible, as two intersecting rectangles could have any shape intersecting it. But then realized from the examples that we were only talking about rectangles that aren't tilted.</p>

<p>For this task, I create a class (package in Perl) to represent a rectangle. It makes sure that <code>x1</code> and <code>y1</code> represents the bottom left and <code>x2</code> and <code>y2</code> represents the top right. It also has an <code>area</code> method that returns the area of the rectangle.</p>

<p>With that part done, the rest of the code works like this:</p>

<ol>
<li>Take the first eight things that look like an integer from the command line.</li>
<li>Create <code>rect1</code> with the first four numbers.</li>
<li>Create <code>rect2</code> with the next four numbers.</li>
<li>Set <code>area</code> to be the area of the two rectangles, ignoring any overlap.</li>
<li>Calculate the overlap. The bottom left will be the maximum of <code>x1</code> and <code>y1</code> of the two rectangles. The top right will be the minimum of <code>x2</code> and <code>y2</code>.</li>
<li>If there is an overlap (<code>x1 &lt; x2</code> and <code>y1 &lt; y2</code>), create another rectangle object and subtract its area from step 4.</li>
<li>Print the number.</li>
</ol>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py "(-1,0), (2,2) (0,-1), (4,4)"
22

$ ./ch-2.py "(-3,-1), (1,3) (-1,-3), (2,2)"
25
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/simongreennet/triangles-and-rectangles-45p8</id>
    <published>2022-02-19T10:59:57Z</published>
    <updated>2022-02-19T10:59:57Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>5 cool Perl/Raku or Programming links</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h4>
  
  
  1. <a href="https://youtu.be/FQXjLG0DjPo">Nice testimonial about Perl</a>
</h4>

<h4>
  
  
  2. <a href="https://benhoyt.com/writings/go-version-performance/">Go perf from version 1.2 to 1.18</a>
</h4>

<h4>
  
  
  3. <a href="https://blog.yboulkaid.com/2022/01/10/ode-to-ruby.html">An ode to ruby</a>
</h4>

<h4>
  
  
  4. <a href="https://hpi.de/fileadmin/user_upload/fachgebiete/naumann/projekte/RDBMSGenealogy/RDBMS_Genealogy_V6.pdf">RDBMS genealogy</a>
</h4>

<h4>
  
  
  5. <a href="http://pragmaticperl.com/interviews-book/pragmaticperl-interviews-a4.pdf">Pragmatic Perl interviews</a>
</h4>

<p>I wish you a pleasant reading! 😁</p>

</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh</id>
    <published>2022-02-16T10:43:37Z</published>
    <updated>2022-02-16T10:43:37Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="mysql"/>
    <category term="go"/>
  </entry>
  <entry>
    <title>#551 - Nothing to do with Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/551.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago I wrote about Wordle and that it has 'Nothing to do with Perl'. Within a few hours Saif Ahmed proved me wrong and <a href="https://www.reddit.com/r/perl/comments/siuqy9/nothing_to_do_with_perl/">posted</a> an implementation of Wordle in Perl. That's the spirit!</p>
<p>On a totally different topic, but still nothing to do with Perl: I just saw someone I know from the Perl community posting yet another disgusting accusation against Israel. As people more clever than me said: 'In the Middle Ages, Jews were accused of killing Christ. In the nineteenth and early twentieth century they were accused of ruining the nations where they lived. Today they are accused of apartheid, genocide, and having concentration camps'. Some people always find ways to blame the Jews for the crimes that are considered the worst by the contemporary civilization. Why am I writing about this, you ask? Because it hurts me a lot. You can't do much about it, but I hope that whenever you hear or see something horrific thing that Israel is accused of, you will double and triple-check it before you accept it as truth, 'like' it, or 'share' it. I hope you'll remember that an awful lot of misinformation is spread by people. Both by people who have an agenda against Jews and people who fall for true-looking lies.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/551.html</id>
    <published>2022-02-14T10:00:00Z</published>
    <updated>2022-02-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Testing Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-13T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world-testing"/>  <id>https://perlmaven.com/dancer2-hello-world-testing</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-199753803360436326</id>
    <published>2022-02-12T22:24:00.000+01:00</published>
    <updated>2022-02-12T22:24:32.675+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxix) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.027&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.025 was 6 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Daemon-6.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Daemon&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple http server class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.13&lt;/strong&gt; on 2022-02-09&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.12 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-2.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OAuth2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Auth against OAuth2 APIs including OpenID Connect &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 3 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.074&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.072 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9503' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9503&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9501 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/199753803360436326/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html" title="(ccclxxix) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 87: Sidef</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d" type="text/html"/>
    <content type="html">&lt;p&gt;Sidef is a prototype programming language, describing itself as inspired by Ruby, Raku, and Julia.&lt;/p&gt;

&lt;h3&gt;
  
  
  Installation on OSX
&lt;/h3&gt;

&lt;p&gt;It's not that easy to run Sidef. It runs on Perl 5 platform and you can install it through CPAN, but you'll run into serious problems.&lt;/p&gt;

&lt;p&gt;Perl version bundled with OSX is not really recommended, so I used brew version. Unfortunately if we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install perl
$ cpan Sidef
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will install &lt;code&gt;sidef&lt;/code&gt; in &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt;, but it's hardcoded to use system Perl.&lt;/p&gt;

&lt;p&gt;So I needed two additional steps. Symlink &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt; to some place in &lt;code&gt;$PATH&lt;/code&gt; like &lt;code&gt;ln -s ~/.cpan/build/Sidef-3.99-0/bin/sidef ~/bin/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And edit &lt;code&gt;sidef&lt;/code&gt; program to change its first line from &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to &lt;code&gt;#!/usr/bin/env perl&lt;/code&gt; so it will use the proper version, not the outdated one from OSX.&lt;/p&gt;

&lt;p&gt;After all these steps, we're ready to go.&lt;/p&gt;

&lt;p&gt;This is definitely something Sidef should just handle better. Oh and there's no VSCode syntax highlighting for Sidef. Often even very rarely used language have some.&lt;/p&gt;

&lt;h3&gt;
  
  
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Hello, World is completely unsurprising. No ugly semicolons here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say "Hello, World!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.sf
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Sidef indeed looks like something between Ruby, Raku, and Julia.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

(1..100).each { |n|
  if (n % 15 == 0) {
    say "FizzBuzz"
  } elsif (n % 5 == 0) {
    say "Buzz"
  } elsif (n % 3 == 0) {
    say "Fizz"
  } else {
    say n
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;range &lt;code&gt;1..100&lt;/code&gt; goes from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;there are no &lt;code&gt;...&lt;/code&gt; ranges&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{|args| ...}&lt;/code&gt; blocks look like Ruby, but they're not used quite in the same way&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt;  &lt;code&gt;elsif&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; requires &lt;code&gt;()&lt;/code&gt;s and &lt;code&gt;{}&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Blocks
&lt;/h3&gt;

&lt;p&gt;Ruby blocks have special place in the language, and block argument is a separate thing from normal arguments. Not so in Sidef.&lt;/p&gt;

&lt;p&gt;Sidef has very high level of syntax flexibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func twice(f) {
  say "Running it twice:"
  f()
  f()
}

var hi = { say "Hi!" }
twice(hi)
twice({ say "Hello!" })
twice { say "This does not work!" }

say ""
say "Iteration:"
{ |i| say "Block got: #{i}" }.each(10..12)
{ |i| say "Block got: #{i}" } &amp;lt;&amp;lt; 13..14
for 15..16 { |i| say "Block got: #{i}" }
(17..18).each { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i+19}" } * 2
2.times { |i| say "Block got: #{i+21}" }

say ""
say "Single argument:"
60 |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; :inc |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {|i| i + 2} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {_+3} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; (:add, 4) |&amp;gt; { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i}" }(69)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./blocks.sf
Running it twice:
Hi!
Hi!
Running it twice:
Hello!
Hello!

Iteration:
Block got: 10
Block got: 11
Block got: 12
Block got: 13
Block got: 14
Block got: 15
Block got: 16
Block got: 17
Block got: 18
Block got: 19
Block got: 20
Block got: 21
Block got: 22

Single argument:
Block got: 60
Block got: 61
Block got: 62
Block got: 63
Block got: 64
Block got: 69
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything here works except for Ruby-style &lt;code&gt;twice { say "This does not work!" }&lt;/code&gt; which does literally nothing, and I'm not sure why.&lt;/p&gt;

&lt;p&gt;There are some debugging tools like &lt;code&gt;-c compile the code into a Perl program&lt;/code&gt; and &lt;code&gt;-D dump the syntax tree of a program&lt;/code&gt;, but the result is not really human readable.&lt;/p&gt;

&lt;p&gt;I thought &lt;code&gt;-k keep track of potential unsafe parser interpretations&lt;/code&gt; might say something about it, but that also doesn't say anything.&lt;/p&gt;

&lt;p&gt;Having high degree of syntax flexibility is not that important for normal programming, but it's great for DSLs as it makes it easier for DSLs to pick something that works for them.&lt;/p&gt;

&lt;p&gt;Especially the &lt;code&gt;|&amp;gt;&lt;/code&gt; code is very cute.&lt;/p&gt;

&lt;h3&gt;
  
  
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Sidef supports &lt;code&gt;is cached&lt;/code&gt; for memoization for free, which is a common enough use case that I don't know why more languages don't do this. There are also ways to clear the cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func fib(n) is cached {
  return 1 if (n &amp;lt;= 2)
  fib(n - 1) + fib(n - 2)
}

(1..100).each {|n|
  say "fib(#{n}) = #{fib(n)}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.sf
fib(1) = 1
fib(2) = 1
fib(3) = 2
...
fib(98) = 135301852344706746049
fib(99) = 218922995834555169026
fib(100) = 354224848179261915075
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Operator Precedence
&lt;/h3&gt;

&lt;p&gt;Sidef tries to be too cute with precedence rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say(2+3*4+5)
say(2 + 3 * 4 + 5)
say(2 + 3*4 + 5)
say(2+3 * 4+5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prints 4 different results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./math.sf
29
25
19
45
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sidef just doesn't have operator precedence, and instead tries to use spacing to determine what happens, in some completely insane way.&lt;/p&gt;

&lt;p&gt;Not following standard operator precedence is the worst idea. Smalltalk tried that, and it killed the language. Every Smalltalk successor had to do all the painful things to unwind this stupid idea. And Smalltalk at least had simple consistent rules - operators always applies left to right. Sidef does something insane:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;without spaces, operators apply right to left (&lt;code&gt;2+3*4+5&lt;/code&gt; is &lt;code&gt;2+(3*(4+5))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with spaces, operators apply left to right (&lt;code&gt;2 + 3 * 4 + 5&lt;/code&gt; is &lt;code&gt;((2+3)*4)+5&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with some spaces, operators apply left to right when there are spaces, and have extra parentheses in un-spaced group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This disqualifies the language.&lt;/p&gt;

&lt;h3&gt;
  
  
  Wordle
&lt;/h3&gt;

&lt;p&gt;Here's a Wordle game in Sidef:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

var words = File.new("wordle-answers-alphabetical.txt").read.split
var word = words.rand
var guess = ""

while (guess != word) {
  print "Guess: "
  guess = STDIN.readline
  if (guess.size != 5) {
    say "Only 5 letter words allowed"
    next
  }
  {|i|
    if (word[i] == guess[i]) {
      print "🟩"
    } elsif (word.include(guess[i])) {
      print "🟨"
    } else {
      print "🟥"
    }
  } * 5
  print "\n"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It didn't go too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./wordle.sf
Guess: trial
🟥🟥🟥🟨🟥
Guess: maybe
🟥🟨🟥🟥🟩
Guess: snake
🟨🟥🟩🟥🟩
Guess: chase
🟥🟩🟩🟩🟩
Guess: phase
🟩🟩🟩🟩🟩
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Should you use Sidef?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;I support fun experiments, but Sidef has the absolute worst way of doing something as simple as adding numbers, making it pretty much unusable for anything.&lt;/p&gt;

&lt;p&gt;An even bigger problem is what when you write some code, Sidef decides what it means, and half the time it will decide that you meant something else than you did. There's no error messages, no documentation, no syntax debugging tools, the code will just do whatever it feels like. Sometimes code does something else. Very often the code just doesn't do anything, and that's a lot more baffling.&lt;/p&gt;

&lt;p&gt;I think to make Sidef usable for even casual play it would need at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix operator precedence&lt;/li&gt;
&lt;li&gt;have way better error messages&lt;/li&gt;
&lt;li&gt;have some kind of "print how it parsed" option, that adds a lot of &lt;code&gt;()&lt;/code&gt;s and such to tell you what the hell Sidef thinks you just did&lt;/li&gt;
&lt;li&gt;working OSX package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these issues fixed, maybe Sidef could become something I could recommend playing with for a weekend or two. In its current state, just no.&lt;/p&gt;

&lt;h3&gt;
  
  
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-87-sidef"&gt;Code for the Sidef episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d</id>
    <published>2022-02-12T14:14:55Z</published>
    <updated>2022-02-12T14:14:55Z</updated>
    <category term="sidef"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#550 - Perl &amp; Unicode</title>
    <link rel="alternate" href="https://perlweekly.com/archive/550.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Are you a Unicode fan?</p>
<p>Personally, I am not. The reason is that I still struggle to get my head around it. During my early days of learning, I never got the opportunity to work with Unicode. So far, I have never had to deal extensively with Unicode characters. There is so much information available on the internet. I remember, a long time ago, I was dealing with the well-known warning <strong>Wide character in print</strong>. After a quick search, I came across this <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">explanation</a> by <strong>Dave Cross</strong>. I have kept it bookmark for future reference. I know am repeating myself here as I remember talking about in an <a href="https://perlweekly.com/archive/498.html">earlier weekly newsletter</a>. It is worth sharing with readers again and again.</p>
<p>However, there is another reason why I am talking about it today. Let me share gem of an <a href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7">article</a> by <strong>David Cantrell</strong>. The article gives us very deeps knowledge about Unicode, specially for a Perl developer. It has cleared most of my doubts, so a big thanks to <strong>David</strong> for such a great article. It also introduced me to a new word, <strong>Mojibake</strong>. A friend of mine on Facebook, suggested a CPAN module, <a href="https://metacpan.org/pod/Test::Mojibake">Test::Mojibake</a> which is very handy. I wish there was dedicated book on Perl and Unicode. Having said that, I found this <a href="https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8">Wikibook</a> on the subject, you may want to explore it.</p>
<p>I came across a <a href="https://www.youtube.com/watch?v=MijmeoH9LT4">YouTube video</a> that explains Unicode in terms that any lay-person can easily understand. I loved it the way it is explained in a casual way. The guy in the video makes it so simple.</p>
<p>Let's talk about regexes in Perl.</p>
<p>I am sure you have used regexes in Perl at some point in your career. A few days ago, I found out a clever use of regexes shared by Abigail. The use of //g in list context. It completely blew me away. Later someone pointed me to the official Perl <a href="https://perldoc.perl.org/perlre#Repeated-Patterns-Matching-a-Zero-length-Substring">documentation</a> talking about it. If you are curious to know more about it then I would suggest you take a look at his <a href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-150-1.html">blog post</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/550.html</id>
    <published>2022-02-07T10:00:00Z</published>
    <updated>2022-02-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-07T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world"/>  <id>https://perlmaven.com/dancer2-hello-world</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Fibonacci Words That Yearn to Be Squarefree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/06#pwc150" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two strings having the same number of digits, $a and $b. Write a script to 
generate Fibonacci Words by concatenation of the previous two strings. Print the 51st &lt;br /&gt;
of the first term having at least 51 digits.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub _fibonacci_words_51{
    my($accumulated) = @_;
    my $i = @{$accumulated} - 1;
    my $next = $accumulated-&gt;[$i - 1] . $accumulated-&gt;[$i];
    return substr($next, 51 - 1, 1) if length($next) &gt;= 51;
    push @{$accumulated}, $next;
    _fibonacci_words_51($accumulated);
}

sub fibonacci_words{
    my($u, $v) = @_;
    return _fibonacci_words_51([$u, $v]);
}

MAIN:{
    print fibonacci_words(q[1234], q[5678]) . "\n";    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Fibonacci sequences are often an introductory example of recursion. This solution keeps 
with that recursive tradition. &lt;code&gt;sub _fibonacci_words_51&lt;/code&gt; takes a single argument, an array 
reference which stores the sequence terms. At each recursive step the next term is 
computed and checked for the terminating condition.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all square-free integers &amp;lt;= 500.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant LIMIT =&gt; 500;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub square_free{
    my @square_free;
    for my $x (1 .. LIMIT){
        my @factors = prime_factor($x);
        my @a;
        map {$a[$_]++} @factors;
        @a = grep {$_ &amp;&amp; $_ &gt; 1} @a;
        push @square_free, $x if !@a;
    }
    return @square_free;
}

main:{
    print join(", ", square_free()) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 46, 47, 51, 53, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 122, 123, 127, 129, 130, 131, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 154, 155, 157, 158, 159, 161, 163, 165, 166, 167, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 267, 269, 271, 273, 274, 277, 278, 281, 282, 283, 285, 286, 287, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 337, 339, 341, 345, 346, 347, 349, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 370, 371, 373, 374, 377, 379, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 478, 479, 481, 482, 483, 485, 487, 489, 491, 493, 494, 497, 498, 499
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution makes use of &lt;code&gt;sub prime_factor&lt;/code&gt; which frequently comes in handy in these
challenges. Beyond getting the prime factors the only other requirement is to determine
that none are repeated. This is done by a counting array, created with a &lt;code&gt;map&lt;/code&gt; and then
checked with &lt;code&gt;grep&lt;/code&gt; for any entries greater than 1. If such an entry exists then we know
that there was a duplicate prime factor and that number is not square free.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/"&gt;Challenge 150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Squarefree.html"&gt;Squarefree Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc150</id>
    <published>2022-02-06T17:00:00-05:00</published>
    <updated>2022-02-06T17:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
