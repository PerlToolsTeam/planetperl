<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-01-29T00:57:09Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6812133711770662391</id>
    <published>2023-01-28T21:54:00.000+01:00</published>
    <updated>2023-01-28T21:54:57.491+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxix) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/App-cpanminus-reporter-0.18' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpanminus::reporter&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - send cpanm output to CPAN Testers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.18&lt;/strong&gt; on 2023-01-23&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 0.17 was 6 years, 8 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/autodie-2.35' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;autodie&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Replace functions with ones that succeed or die with lexical scope &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.35&lt;/strong&gt; on 2023-01-27&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 2.34 was 2 years, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/Exporter-5.77' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Implements default import method for modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.77&lt;/strong&gt; on 2023-01-23&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 5.74 was 3 years, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DDICK/Firefox-Marionette-1.35' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Firefox::Marionette&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Automate the Firefox browser with the Marionette protocol &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.35&lt;/strong&gt; on 2023-01-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 3 years, 6 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.001005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures") &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.001005&lt;/strong&gt; on 2023-01-27&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.001004 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.51&lt;/strong&gt; on 2023-01-23&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 1.50 was 8 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.081' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.081&lt;/strong&gt; on 2023-01-25&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 2.080 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-AssetPack-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::AssetPack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Compress and convert CSS, Less, Sass, JavaScript and CoffeeScript files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2023-01-27&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 1 year, 10 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2203' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2203&lt;/strong&gt; on 2023-01-22&lt;/li&gt;  &lt;li&gt;Votes: 325&lt;/li&gt;  &lt;li&gt;Previous version: 2.2202 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SALVA/Net-OpenSSH-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::OpenSSH&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl SSH client package implemented on top of OpenSSH &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2023-01-22&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 10 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MREISNER/PLS-0.905' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PLS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Language Server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.905&lt;/strong&gt; on 2023-01-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.902 was 4 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9686' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9686&lt;/strong&gt; on 2023-01-27&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9683 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000142' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000142&lt;/strong&gt; on 2023-01-25&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000141 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/Tie-File-1.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tie::File&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Access the lines of a disk file via a Perl array &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.06&lt;/strong&gt; on 2023-01-23&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.05 was 2 years, 11 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/INGY/YAML-LibYAML-0.86' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::LibYAML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl YAML Serialization using XS and libyaml &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.86&lt;/strong&gt; on 2023-01-26&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 0.85 was 4 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6812133711770662391/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxix-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6812133711770662391"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6812133711770662391"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxix-15-great-cpan-modules-released.html" title="(cdxxix) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1767466851472459370</id>
    <published>2023-01-28T21:51:00.002+01:00</published>
    <updated>2023-01-28T21:51:20.233+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 46&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/28 20:50:55 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::Role::Dino" target="_blank"&gt;Alien::Role::Dino&lt;/a&gt; - Experimental support for dynamic share Alien install&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::RipeRedis::Cluster" target="_blank"&gt;AnyEvent::RipeRedis::Cluster&lt;/a&gt; - Non-blocking Redis Cluster client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Stomper" target="_blank"&gt;AnyEvent::Stomper&lt;/a&gt; - Flexible non-blocking STOMP client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chemistry::Harmonia" target="_blank"&gt;Chemistry::Harmonia&lt;/a&gt; - Decision of simple and difficult chemical puzzles.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Numeral" target="_blank"&gt;Lingua::RU::Numeral&lt;/a&gt; - Perl extension for generate Russian wording of numerals from the natural numbers and 0 (zero).&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Assistant" target="_blank"&gt;Math::Assistant&lt;/a&gt; - functions for various exact algebraic calculations&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::BeLike::RJBS" target="_blank"&gt;Task::BeLike::RJBS&lt;/a&gt; - be more like RJBS -- use the modules he likes!&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ack" target="_blank"&gt;ack&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::RipeRedis" target="_blank"&gt;AnyEvent::RipeRedis&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=271)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Archive::Tar::Wrapper" target="_blank"&gt;Archive::Tar::Wrapper&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ask" target="_blank"&gt;Ask&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie" target="_blank"&gt;autodie&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autovivification" target="_blank"&gt;autovivification&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::BIP39" target="_blank"&gt;Bitcoin::BIP39&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN" target="_blank"&gt;CPAN&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT::Tool::Object::Pad" target="_blank"&gt;Devel::MAT::Tool::Object::Pad&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Domain::PublicSuffix" target="_blank"&gt;Domain::PublicSuffix&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Easy" target="_blank"&gt;Exporter::Easy&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Class" target="_blank"&gt;Feature::Compat::Class&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libintl::perl" target="_blank"&gt;libintl::perl&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Stats" target="_blank"&gt;Memory::Stats&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mo" target="_blank"&gt;Mo&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=478)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP" target="_blank"&gt;MOP&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neo4j::Bolt" target="_blank"&gt;Neo4j::Bolt&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neo4j::Driver" target="_blank"&gt;Neo4j::Driver&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Domain::ExpireDate" target="_blank"&gt;Net::Domain::ExpireDate&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SFTP::Foreign" target="_blank"&gt;Net::SFTP::Foreign&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SFTP::Foreign::Backend::Net_SSH2" target="_blank"&gt;Net::SFTP::Foreign::Backend::Net_SSH2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PadWalker" target="_blank"&gt;PadWalker&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Simple" target="_blank"&gt;Proc::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Redis::ClusterRider" target="_blank"&gt;Redis::ClusterRider&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV" target="_blank"&gt;Text::CSV&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=134)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WordPress::XMLRPC" target="_blank"&gt;WordPress::XMLRPC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1767466851472459370/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxlii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1767466851472459370"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1767466851472459370"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxlii-metacpan-weekly-report.html" title="(dxlii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2875150512206011408</id>
    <published>2023-01-28T21:49:00.002+01:00</published>
    <updated>2023-01-28T21:49:58.739+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2023-01-28 20:49:22 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75214855" target="_blank"&gt;Open a scalar as a file in Perl&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75255550" target="_blank"&gt;Perl JSON arrays within a parent key&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75261926" target="_blank"&gt;Get the first item of the list returned by function&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75214132" target="_blank"&gt;How to use File-Rename aka Perl's rename in Windows?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75263680" target="_blank"&gt;Cast array into list&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2875150512206011408/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2875150512206011408"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2875150512206011408"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxx-stackoverflow-perl-report.html" title="(dlxx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>This Week in PSC (095)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-095.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11009</id>
    <published>2023-01-27T22:24:10Z</published>
    <updated>2023-01-27T22:26:30Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>A busy meeting today, we talked about quite a few things:</p>

<ul>
<li>Smartmatch deprecation continues. Some upstream PRs have been raised, awaiting CPAN releases
<li>Refaliasing might be able to be deëxperimentalized if we add a warning on the currently-failing closure capture cases
<li>RFC0013 highlights a deficiency in the <tt>overload.pm</tt> API shape. Perhaps an opt-in new calling convention is required to make it more flexible. Paul will write another post to the mailing list with more detail
<li>Mithaldu's objection to the suggestion to deprecate <tt>map EXPR, LIST</tt> suggests that maybe a more powerful debugger "run until next statement" command would be good
<li>The interaction of <tt>List::Keywords</tt> + <tt>autovivification</tt> highlights the overall problem with highly-pluggable extensible systems - sometimes extensions conflict. We just have to keep this in mind and not have too high expectations that "everything will be fine if we load 20 different plugins"
<li>That said, maybe there are some CPAN extensions that ought to be part of the core language - <tt>autovivification</tt> for example
<li>We've run out of devel release volunteers now. We need some people to volunteer for 5.37.9, .10, .11, (maybe .12?). Also maybe 5.38.0
</ul>]]>
        
    </content>
</entry>
  <entry>
    <title>SPVM::File::Basename is released. This is the first module of SPVM using regular expressions.</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmfilebasename-is-released-this-is-the-first-module-of-spvm-using-regular-expressions-fhe" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM::File::Basename"&gt;SPVM::File::Basename&lt;/a&gt; has been released. SPVM::File::Basename is a porting of Perl's &lt;a href="https://metacpan.org/pod/File::Basename"&gt;File::Basename&lt;/a&gt; to SPVM.&lt;/p&gt;

&lt;p&gt;It supports the fileparse, basename, and dirname methods.&lt;/p&gt;

&lt;h2&gt;
  
  
  Regular Expressions
&lt;/h2&gt;

&lt;p&gt;SPVM::File::Basename is the first module of SPVM that uses regular expressions.&lt;/p&gt;

&lt;p&gt;Many Perl modules rely on regular expressions. In particular, it is safe to say that modules that deal with file paths always use regular expressions.&lt;/p&gt;

&lt;p&gt;My concern was about a reliable Perl-compatible regular expression for creating modules in SPVM. At first, I created my own, but they were not very reliable. There are limitations to creating them alone.&lt;/p&gt;

&lt;p&gt;I searched for I found that there is a Perl compatible regular expression called &lt;a href="https://github.com/google/re2"&gt;Google RE2&lt;/a&gt;. It is written in C++, and with Google RE2, I can use Perl-compatible regular expressions as a library.&lt;/p&gt;

&lt;p&gt;I created a module called &lt;a href="https://metacpan.org/pod/SPVM::Resource::Re2::V2022_06_01"&gt;SPVM::Resource::Re2&lt;/a&gt; to make it available from SPVM.&lt;/p&gt;

&lt;p&gt;Then, I created a module called &lt;a href="https://metacpan.org/pod/SPVM::Regex"&gt;SPVM::Regex&lt;/a&gt; to implement the regular expression methods of Perl's search and replace.&lt;/p&gt;

&lt;p&gt;And the first module that uses SPVM::Regex in practice is SPVM::File::Basename, which handles file paths.&lt;/p&gt;

&lt;p&gt;Please take a look at the code that handles regular expressions in SPVM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Regex;

  method fileparse : string[] ($path : string) {
    unless ($path) {
      die "The \$path must be defined";
    }

    my $dirpath = (string)undef;
    my $basename = (string)undef;

    my $re = Regex-&amp;gt;new("(?s)^(.*/)?(.*)");
    if ($re-&amp;gt;match($path)) {
      $dirpath = $re-&amp;gt;cap1;
      $basename = $re-&amp;gt;cap2;
    }

    unless (length $dirpath) {
      $dirpath = "./";
    }

    return [$basename, $dirpath, ""];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM-File-Basename/blob/master/lib/SPVM/File/Basename/Unix.spvm"&gt;File::Basename::Unix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Translated with &lt;a href="http://www.DeepL.com/Translator"&gt;www.DeepL.com/Translator&lt;/a&gt; (free version)&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmfilebasename-is-released-this-is-the-first-module-of-spvm-using-regular-expressions-fhe</id>
    <published>2023-01-27T20:22:30Z</published>
    <updated>2023-01-27T20:22:30Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <title>Open Source Development Course for Perl developers.</title>
    <link rel="alternate" href="https://dev.to/yewtc/open-source-development-course-for-perl-developers-4g94" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I've just started the course on open source development given by <a class="mentioned-user" href="https://dev.to/szabgab">@szabgab</a>. I'm really hoping to get a much better understanding a lot of the tools covered. A know a little about most of the material but as I'm self taught, I just tend to learn the bits I need to get my job done and no more.</p>

</div>
    </content>
    <author>
      <name>Steve Rogerson</name>
    </author>
    <id>https://dev.to/yewtc/open-source-development-course-for-perl-developers-4g94</id>
    <published>2023-01-27T12:55:46Z</published>
    <updated>2023-01-27T12:55:46Z</updated>
    <category term="osdc"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Missing pennies</title>
    <link rel="alternate" href="https://dev.to/simongreennet/missing-pennies-3791" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Weekly Challenge 201
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-201/sgreen"&gt;My solution&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1: Missing Numbers
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given an array of unique numbers.&lt;/p&gt;

&lt;p&gt;Write a script to find out all missing numbers in the range &lt;code&gt;0..$n&lt;/code&gt; where &lt;code&gt;$n&lt;/code&gt; is the array size.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;This is a one liner in Python, giving the list &lt;code&gt;n&lt;/code&gt;, the solution I provided is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breaking it down into parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;range(len(n)+1)&lt;/code&gt; is the range from 0 to the length of the array (inclusive).&lt;/li&gt;
&lt;li&gt;this is called in a &lt;code&gt;for&lt;/code&gt; loop, with each iteration given the value &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;if i not in n&lt;/code&gt; part of the clause will only return numbers NOT in the original array &lt;code&gt;n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;i&lt;/code&gt; after the opening bracket will return that value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the Perl code, I took a different approach given that it does not support &lt;code&gt;for ... if&lt;/code&gt; or the &lt;code&gt;in&lt;/code&gt; keyword. The first thing I do is convert &lt;code&gt;@n&lt;/code&gt; an array, to &lt;code&gt;%n&lt;/code&gt; a hash with the map function. Then I run this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like with the Python code &lt;code&gt;( 0 .. $#n + 1 )&lt;/code&gt; is the range from 0 to to the length of the array (inclusive). The grep function iterates through the list, setting &lt;code&gt;$_&lt;/code&gt; as the current value. The &lt;code&gt;exists&lt;/code&gt; function checks to see if that value exists in a hash.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 0 1 3
2

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 0 1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Task 2: Penny Piles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given an integer, &lt;code&gt;$n &amp;gt; 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to determine the number of ways of putting $n pennies in a row of piles of ascending heights from left to right.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/New_Zealand_pound#Coins"&gt;Pennies&lt;/a&gt; were removed from circulation in New Zealand (my birth country) in 1967, well before I was born. Even &lt;a href="https://en.wikipedia.org/wiki/New_Zealand_one-cent_coin"&gt;1¢&lt;/a&gt; coins were removed when I was a kid.&lt;/p&gt;

&lt;p&gt;Let me start off by acknowledging that the answer for the most efficient solution is probably already in &lt;a href="https://oeis.org/"&gt;OEIS&lt;/a&gt;. In previous tasks I've occasionally looked at producing the most efficient solution. Not today.&lt;/p&gt;

&lt;p&gt;This time I'm solving the solution as it is described, and with yet another recursive function. The good thing is we don't care about what the combinations are, just how many there are.&lt;/p&gt;

&lt;p&gt;For this solution my recursive function is called &lt;code&gt;pile&lt;/code&gt;, and takes two inputs, the &lt;code&gt;remain&lt;/code&gt;ing pennies, and the &lt;code&gt;minimum&lt;/code&gt; number I can take. The first call to the function in the input number, and a minimum of 1 penny.&lt;/p&gt;

&lt;p&gt;For each call, I loop from the minimum value to the remaining pennies. If the two values are the same, we have found a solution. If there are coins left over, I call the &lt;code&gt;pile&lt;/code&gt; function again, with the remaining coins and the coins I took (i.e. the new minimum). The return of each call is the number of solutions found.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 5
7

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 50
204226
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/missing-pennies-3791</id>
    <published>2023-01-26T03:00:24Z</published>
    <updated>2023-01-26T03:00:24Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>My Favorite Modules: PerlIO::via</title>
    <link rel="alternate" href="https://blogs.perl.org/users/tom_wyant/2023/01/my-favorite-modules-perliovia.html"/>
    <id>tag:blogs.perl.org,2023:/users/tom_wyant//506.11008</id>
    <published>2023-01-25T19:55:34Z</published>
    <updated>2023-01-25T20:02:11Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>OK, I confess: <a href="https://metacpan.org/pod/PerlIO::via">PerlIO::via</a> is not a module that I use every day. It allows you, easily, and with minimal code, to modify an I/O stream <strong>before</strong> it gets to the reader of the stream. or <strong>after</strong> the writer has written it. All you do is write (say) <code>My::Module</code> conforming to the parts of the <code>PerlIO::via</code> interface you need, and provide it to the second argument of <code>open()</code> or <code>binmode()</code> as <code>':via(My::Module)'</code>. How cool is that? And how cool is a language that lets you do that with a minimum of fuss, bother, and code?</p>

<p>I encountered this when trying to modify (OK, hack) the behavior of a large and complex hunk of Perl not under my control. Rummaging around in this turned up the fact that all file input went through a single module/object, which had an <code>open()</code> method. I realized if I could insert my own <a href="https://perldoc.perl.org/PerlIO.html">PerlIO</a> layer into the input stream, I would have control over what the <s>victim</s> host code saw.</p>

<p>In the true spirit of the Conan the Barbarian school of programming ("Bash it until it submits!") I wrote a <code>PerlIO::via</code> module whose <code>import()</code> method monkey-patched the <code>open()</code> to insert my layer into the stack. All I had to do was launch the host code with <code>-MMy::Module</code> and the dirty deed was done.</p>

<p>If you read the <a href="https://metacpan.org/pod/PerlIO::via">PerlIO::via</a> documentation you see a whole host of methods you can provide. All I wanted to do was modify the input stream, and that can be done by implementing just two or three:</p>

<p>You will have to provide <code>PUSHED()</code>, which is called when your layer is pushed onto the I/O stack. That is, when someone specifies it in the second argument of <code>open()</code> or <code>binmode()</code>. This is called as a static method, and given a <a href="https://linux.die.net/man/3/fopen"><code>fopen()</code></a>-style mode string (i.e. <code>'r'</code>, <code>'w'</code>, or what have you) and the already-opened handle, which represents the layer below. This method needs to instantiate and return an object of the given class. Depending on your needs, this can be as simple as</p>

<pre>
sub PUSHED {
    my ( $class ) = @_;
    return bless {}, $class;
}
</pre>

<p>You have a couple options for how to get the input, but I opted for <code>FILL()</code>. This is called as a method, and passed a file handle which is open to the next layer down in the PerlIO stack. This would look something like:</p>

<pre>
sub FILL {
    my ( $self, $fh ) = @_;
    defined( my $data = &lt;$fh&gt; )
        or return;

<p>    # Do your worst to the $data</p>

<p>    return $data;<br />
}<br />
</pre></p>

<p>A few paragraphs back I said "two or three" methods. For a while I was content with the above two. But then I realized that the caller was getting back bytes even if the file was opened with <code>:encoding(...)</code> specified in a lower layer, and the <code>FILL()</code> method preserved the character-nature of the data. Wrestling with this finally drove me back to the documentation, where I found the <code>UTF8()</code> method.</p>

<p>The <code>UTF8()</code> method is optional, and is called (if it exists) right after <code>PUSHED()</code>. It receives one argument, which is interpreted as a Boolean, and is true if the next-lower layer provides characters rather than bytes. The returned value tells <code>PerlIO</code> whether your layer provides characters (if true) or bytes (if false). A minimal-but-sufficient implementation is</p>

<pre>
sub UTF8 {
    my ( undef, $below_flag ) = @_;
    return $below_flag;
}
</pre>

<p><strong>Caveat:</strong> If you apply the encoding and your layer in the same operation (e.g. <code>binmode $fh, ':encoding(utf-8):via(My::Module)';</code>, the <code>UTF8()</code> method will <strong>not</strong> see a true value of <code>$below_flag</code>. There are two ways of dealing with this:</p>

<ul>
    <li>Apply your <code>PerlIO::via</code> layer in a separate call to <code>binmode()</code>, or</li>
    <li>Specify an explicit <code>:utf8</code> after your layer (that is, <code>binmode $fh, ':encoding(utf-8):via(My::Module):utf8';</code>).</li>
</ul>

<p>This is already a longer note than I like, but I have to say something about <code>:utf8</code>. The current documentation calls it a pseudo-layer. What it really is is a bit on the layer below, telling <code>PerlIO</code> that the layer it applies to provides characters rather than bytes on input, or accepts characters on output. Around Perl 5.8 or 5.10 there was a fair amount of misunderstanding about what <code>:utf8</code> did, and there was actually core Perl documentation that said (or seemed to say) that you did UTF-8 I/O by specifying this layer. Most such instances of <code>:utf8</code> in the core documentation have been replaced by <code>:encoding(utf-8)</code> but there may still be some <code>:utf8</code> in outlying regions of the documentation.</p>

<p>By using <code>:utf8</code> in the second example above, what I am telling Perl is that <code>:via(My::Module)</code> produces decoded output. It does, because the layer below it (<code>:encode(utf-8)</code>) does, and <code>:via(My::Module)</code> preserves this property. Without the <code>:encode(utf-8)</code> below it it would be an error to tell PerlIO that <code>:via(My::Module)</code> produced characters unless <code>My::Module</code> did the decoding itself.</p>

<p>If you want to see what layers are in effect on file handle <code>$fh</code>, you can call <code>PerlIO::get_layers( $fh )</code>. This returns a list, which will include <code>:utf8</code> as a separate entry, maybe more than once if more than one layer has that bit set.</p>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"><code>re</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-develnytprof.html"><code>Devel::NYTProf</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/05/my-favorite-modules-errno.html"><code>Errno</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/05/my-favorite-modules-timepiece.html"><code>Time::Piece</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/06/core-modules-filetest.html"><code>filetest</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/06/my-favorite-modules-filestat.html"><code>File::stat</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Just started the OSDC course</title>
    <link rel="alternate" href="https://dev.to/dcharwood26/just-started-the-osdc-course-78i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>So, yesterday a few of us started the <strong>13 week</strong> course with <a class="mentioned-user" href="https://dev.to/szabgab">@szabgab</a> </p>

<p>i think we've all <em>used</em> GitHub before for work - perhaps in much smaller dev groups or even solo. Personally, I'm hoping to pickup a few tips on how to use it in Open Source and make sure i play nicely with others.</p>

</div>
    </content>
    <author>
      <name>Darren Harwood</name>
    </author>
    <id>https://dev.to/dcharwood26/just-started-the-osdc-course-78i</id>
    <published>2023-01-25T17:15:37Z</published>
    <updated>2023-01-25T17:15:37Z</updated>
    <category term="perl"/>
    <category term="osdc"/>
  </entry>
  <entry>
    <title>Weekly Challenge 201</title>
    <link rel="alternate" href="https://dev.to/zapwai/weekly-challenge-201-1ibc" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201/"&gt;Challenge 201&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task One
&lt;/h2&gt;

&lt;p&gt;You are given an array of unique numbers. Write a script to find out all missing numbers in the range 0..$n where $n is the array size.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task Two
&lt;/h2&gt;

&lt;p&gt;Write a script to determine the number of ways of putting $n pennies in a row of piles of ascending heights from left to right. i.e. &lt;em&gt;List all distinct partitions of n.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-201/zapwai"&gt;My solutions on github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  
  
  Solution to Task One
&lt;/h2&gt;

&lt;p&gt;At first I thought there was a typo because there are always going to be &lt;em&gt;some&lt;/em&gt; missing numbers. Taking advantage of smart match:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
no warnings "experimental";
my @array = (0,1,3);
my @list;
say "Input: (" . join(",",@array).")";
print "Output: ";
for (0..scalar @array) {
    push @list, $_ unless ($_ ~~ @array);
}
say join(",", @list);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I figured this was ripe for a one-liner:&lt;br&gt;
&lt;code&gt;print for grep {!($_ ~~ @ARGV)} (0 .. @ARGV)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  
  
  Solution to Task Two
&lt;/h2&gt;

&lt;p&gt;This took a lot of debugging. More smart match action. I chose to start with the largest partition of n (1 + 1 + ... + 1 = n) and started adding each pair of terms, including it in our  collection if it was an ascending sequence. This was my third attempt: I initially started from the bottom (starting with n and subtracting to create (1, n-1) and (2, n-2) etc.); then I considered generating all possible partitions and filtering the ascending ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
no warnings "experimental";
my $n = $ARGV[0] || 5;
say "Input: \$n = $n";
print "Output: " ;
my @set = (join(" ",(1) x $n));
my $i=-1;
do {
    $i++;
    rout($set[$i]);
    @set = grep { defined($_) } @set;    
} until (length $set[$i] &amp;lt;= 3);
my $length = @set;
do {
    rout($set[$i]);
    $i++;
} while ($i &amp;lt; $length);
push @set, $n;
say scalar @set;
say foreach @set;
sub rout {
    my $s = shift;
    my @a = split(" ", $s);
    return "no" if (@a &amp;lt;= 2);
    if ($a[$#a] != 1) {
    for (1 .. @a - 2) {
        my $str = chonk($_, @a);
        push @set, $str unless ($str ~~ @set);
    }
    }
    my $str = chonk(0, @a);
    push @set, $str unless ($str ~~ @set);
}
sub chonk {         #add two elems, given offset.
    my ($offset, @a) = @_;
    my $num = $a[$#a - $offset] + $a[$#a - $offset - 1];
    splice @a, $#a - $offset - 1, 2, $num;
    my $bad_cnt;
    for (1.. $#a) {
    $bad_cnt++ if ($a[$_ - 1] &amp;gt; $a[$_]);
    }
    return if ($bad_cnt);
    return join(" ",@a);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Zapwai</name>
    </author>
    <id>https://dev.to/zapwai/weekly-challenge-201-1ibc</id>
    <published>2023-01-25T01:19:58Z</published>
    <updated>2023-01-25T01:19:58Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Testing in 2023</title>
    <link rel="alternate" href="https://blogs.perl.org/users/toby_inkster/2023/01/perl-testing-in-2023.html"/>
    <id>tag:blogs.perl.org,2023:/users/toby_inkster//1019.11007</id>
    <published>2023-01-24T22:38:36Z</published>
    <updated>2023-01-24T22:55:43Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>https://toby.ink/</uri>
    </author>
    <category term="TDD" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="test2suite" label="Test2-Suite" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>With my open source work, I've historically taken an approach which relies more on integration testing than unit testing, but with some of my newer projects, I've tried adopting principles from $paidwork and applying them to my free software.</p>
<p>This is a quick run-down of how I'm structuring my test suite in newer projects. It's likely that many of my existing projects will never adopt this structure, but some may.</p>
]]>
        <![CDATA[		<h2><span id="Out_with_the_old,_in_with_the_new">Out with the old, in with the new</span></h2>
		<p>First step is ditching <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AMore">Test::More</a>, <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AFatal">Test::Fatal</a>, <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AWarnings">Test::Warnings</a>, and other pre-Test2 testing libraries.</p>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a> provides a good base to work with, so we add that to our project's requirements list straight away.</p>
		<p>We'll round that out with:</p>
		<ul>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AAuthorTesting">Test2::Require::AuthorTesting</a> to skip certain tests when run on the end user's machine, and require the <code>AUTHOR_TESTING</code> environment variable to run. This is useful for tests which are very slow or require a highly specific environment to run in.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AModule">Test2::Require::Module</a> to skip certain tests when optional modules are unavailable.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec">Test2::Tools::Spec</a> to better structure our unit tests.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail">Test2::Plugin::BailOnFail</a> for when your tests simply cannot carry on. Use sparingly.</li>
		</ul>
		<p>There are other Test2 modules that can be nice to have, but that's a good starter set. The ones I list above are distributed alongside <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a>, so you get them "for free". It is worth explicitly listing them in your project's dependencies though, in case they are split into separate distributions in the future.</p>
		<h2><span id="Test_directory_structure">Test directory structure</span></h2>
		<p>Perl distributions typically keep their tests in a directory called <em>t</em> found inside the project root. We won't change that. We will however create two subdirectories within it, <em>t/unit</em> and <em>t/integration</em>.</p>
		<p>You may have other categories of tests which need their own subdirectories too, but these two will be sufficient for most projects.</p>
		<p>If support modules are needed for testing, they can live in <em>t/lib</em>. If any data files are needed, put them in <em>t/share</em>.</p>
		<p>Any especially important tests can included in the <em>t</em> directory itself for maximum visibility. I recommend giving them numerically-prefixed filenames for better control over the order they run in.</p>
		<p>I will typically include two such tests:</p>
		<ul>
			<li><em>t/00start.t</em> which performs no real testing, but prints relevant information about the system it's being run on, such as the version numbers of dependencies, the values of important environment variables, etc.</li>
			<li><em>t/01basic.t</em> which loads all of your modules, or at least the important ones, then passes without any real testing being done. The purpose of this is to quickly check for syntax errors so extreme that they prevent your code from even compiling. This is a good place for <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail">Test2::Plugin::BailOnFail</a>.</li>
		</ul>
		<h2><span id="Unit_tests">Unit tests</span></h2>
		<p>For each module <em>lib/Foo/Bar.pm</em> there should be a corresponding unit test script <em>t/unit/Foo/Bar.t</em>.</p>
		<p>The prelude of this file will look something like this:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span> <span class="word">-target</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Foo::Bar'</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::Tools::Spec</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Data::Dumper</span><span class="structure">;</span></pre>
		<p>The footer will look exactly like this:</p>
		<pre class="highlighting-perl">  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>And in between will be tests for each unit of code. A "unit" would typically be a function, a method, or an important package variable. Tests for a unit should avoid exercising much code outside their unit, and should <i>especially</i> avoid exercising code outside the target module.</p>
		<p>A fairly extensive unit test for a method:</p>
		<pre class="highlighting-perl">  <span class="word">describe</span> <span class="double" style="color:#909">"method `foo_bar`"</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
    
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="structure">);</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but foo is empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">' world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but bar is empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello '</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but both are empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">' '</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'foo is undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'bar is undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both are undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it works'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span> <span class="structure">);</span>
      
      <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">dies</span> <span class="structure">{</span>
        <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">warns</span> <span class="structure">{</span>
          <span class="symbol" style="color:#333;background-color:#fcc">$object</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">foo</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">bar</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="structure">);</span>
          <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">foo_bar</span><span class="structure">;</span>
        <span class="structure">};</span>
      <span class="structure">};</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'no exception thrown'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">0</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'no warnings generated'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'expected string returned'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span>
        <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span>
        <span class="word">object</span> <span class="structure">{</span>
          <span class="word">call</span> <span class="word">foo</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="structure">;</span>
          <span class="word">call</span> <span class="word">bar</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span><span class="structure">;</span>
        <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
        <span class="double" style="color:#909">"method call didn't alter the values of the attributes"</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="structure">)</span> <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">diag</span> <span class="word">Dumper</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span> <span class="structure">);</span>
    <span class="structure">};</span>
  <span class="structure">};</span></pre>
		<p>The module itself as a whole can also be considered a "unit" so that very basic module-wide concerns can be tested there.</p>
		<p>A fairly simple module-wide unit test:</p>
		<pre class="highlighting-perl">  <span class="word">describe</span> <span class="double" style="color:#909">"class `$CLASS`"</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it inherits from Moo::Object'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">isa_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'Moo::Object'</span> <span class="structure">);</span>
    <span class="structure">};</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it can be instantiated'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">can_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'new'</span> <span class="structure">);</span>
    <span class="structure">};</span>
  <span class="structure">};</span></pre>
		<h2><span id="Integration_tests">Integration tests</span></h2>
		<p>Integration tests can take a far more freeform approach. These tests should ensure that the system as a whole, or subsystems within it (which may involve multiple modules), work when used together.</p>
		<p>A good place to start is to look at the <i>SYNOPSIS</i> sections of your documentation and test that they work as advertised.</p>
		<p>Integration tests should use <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a> but will often be small enough not to benefit much from <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec">Test2::Tools::Spec</a>.</p>
		<h2><span id="Running_tests_locally">Running tests locally</span></h2>
		<p>The Test2 tool for running your test suite is <a class="podlinkpod" href="https://metacpan.org/pod/App%3A%3AYath">yath</a>, but old stalwart <a class="podlinkpod" href="https://metacpan.org/pod/App%3A%3AProve">prove</a> also works well. In your project roor directory, you should be able to run <code>yath test</code> at the command-line to run your entire test suite. <code>prove -lr</code> should also work.</p>
		<p>If you need more verbose output to see exactly which tests are passing, then append <code>-v</code> to each command.</p>
		<h2><span id="Continuous_integration_with_GitHub_Actions">Continuous integration with GitHub Actions</span></h2>
		<p>I will normally use GitHub Actions to automatically run my test suite on each push, on every major version of Perl I support. One of the test runs will load <a class="podlinkpod" href="https://metacpan.org/pod/Devel%3A%3ACover">Devel::Cover</a> and use it to upload test coverage data to <a class="podlinkurl" href="https://codecov.io">Codecov</a> and <a class="podlinkurl" href="https://coveralls.io">Coveralls</a>.</p>
		<p>This gives me (almost) instant feedback on whether recent commits have broken things or reduced test coverage.</p>
		<p>100% coverage on Coveralls is totally achieveable. 100% coverage on Codecov often takes a lot more work as it measures branch coverage instead of statement coverage. It's certainly a good goal though.</p>
		<p>Exactly how to set up continuous integration will depend a lot on your built tools, so I won't go into specifics here.</p>
		<h2><span id="Summary">Summary</span></h2>
		<p>I feel this setup provides a pretty good basis for test-driven Perl development in 2023.</p>]]>
    </content>
</entry>
  <entry>
    <title>#600 - 600th edition and still going ...</title>
    <link rel="alternate" href="https://perlweekly.com/archive/600.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Last week, <strong>Team PWC</strong> celebrated the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200">200th week</a> and today we are presenting <strong>600th edition</strong>. Kudos to all the editors, current and past for the care and affections. It feels nice to be associated with such a popular events.</p>
<p>I would also like to thank all the die hard fans of the <strong>Perl Weekly Newsletter</strong> for their support and constructive suggestions from time to time. It really helps me to focus on things important to the readers. I know it is not easy to do this every week but the love and affection we get works like a magic.</p>
<p>I remember there was time when blogging was the only source of information but now a days we have plenty of platforms where you get usefull informations. You know what I mean and where you can catch us. I love having 2-ways dicussion on any topics related to Perl. It is something I always encourage if you have spare time. I have seen how young blood getting involved in so many exciting things about Perl, for example on <strong>Telegram</strong>. Although I don't get time to take part in the discussion but I do watch how the discussion follow through. I have senior member of <strong>Perl Community</strong> helping young blood with their experiences. It would be unfair to name few here. You know who I am talking about. I salute to all those who keep <strong>Perl</strong> alive.</p>
<p>If you have any ideas/suggestions then please do share with us. I would to hear your point of views. Enjoy the rest of the newsletter till then.</p></div>
    </content>
    <id>https://perlweekly.com/archive/600.html</id>
    <published>2023-01-23T10:00:00Z</published>
    <updated>2023-01-23T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 200</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-200/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-200/</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 201</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Missing Number 10. TASK #2: Penny Piles HEADLINES  Welcome to the Week #201 of The Weekly Challenge.
Last week, Mariano Spadaccini, joined the Team PWC. Thank you for your first contributions in Perl.
Apology for the late acceptance of your contributions last week. I wasn&amp;rsquo;t mentally there, so avoided the screen as much as I can.</content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-201/</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Using Perl to prepare sequencing files to submit to NCBI's GEO</title>
    <link rel="alternate" href="https://blogs.perl.org/users/chrisarg/2023/01/using-perl-to-prepare-sequencing-files-to-submit-to-ncbis-geo.html"/>
    <id>tag:blogs.perl.org,2023:/users/chrisarg//4237.11006</id>
    <published>2023-01-22T06:12:39Z</published>
    <updated>2023-01-22T06:42:25Z</updated>
    <author>
        <name>chrisarg</name>
        
    </author>
    <category term="bioinformatics" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="bioinformatics" label="Bioinformatics" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="geo" label="GEO" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="ncbi" label="NCBI" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="sequencing" label="sequencing" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/chrisarg/">
        <![CDATA[<p>In the middle of a manuscript submission that requires sequencing data to be uploaded to <a href="https://www.ncbi.nlm.nih.gov/">NCBI's </a> Gene Expression Omnibus.<br />
This is a fairly standardized and (painful!) process that requires one to assemble their sequencing data (a collection of hundreds or thousands of files in the <a href="https://en.wikipedia.org/wiki/FASTQ_format">FASTQ</a> format), put them in a single (very large) folder, compress them, generate md5 hashes and then upload them to <a href="https://www.ncbi.nlm.nih.gov/geo/">GEO's </a>FTP site. <br />
There are a couple of tutorials available e.g. <a href="http://yeolab.github.io/onboarding/geo.html">here</a> and <a href="https://divingintogeneticsandgenomics.rbind.io/post/how-to-upload-files-to-geo/">there</a> that mostly cover the use case of one having assembled the files into a single fastq. <br />
Our <a href="https://www.biorxiv.org/content/10.1101/2022.12.16.520507v1">project</a> used Oxford's Nanopore platform which store's its data as a series of fastq files, each holding a user defined number of sequences (in our case 2,000). Some of the experiments had generated an excess of 10M reads, so we are talking about a serious number of files to process: <br />
</p><ol><br />
	<li>uncompress (if compressed)</li><br />
	<li>concatanate</li><br />
	<li>compress</li><br />
	<li>hash using md5sum</li><br />
</ol><p></p>

<p>I am extremely lazy to do repetitive shell typing, so I figure to use PERL to package the steps together. One needs first to create a list of directories that have the sequencing files (by default nanopore stores them in a directory that contains two subdirectories, called "fastq_pass" and "fastq_fail", with the pass and fail referring to files with different sequencing qualities. <br />
I hardwired the name of that CSV in the script (but you could easily modify to use the commandline to get an arbitrary file), as well as the name of the output directory (which must be created beforehand). <br />
The repetitive steps are now taken care by this PERL script (which is boring, but useful). <br /></p><p><br /></p><p><br />#!/home/chrisarg/perl5/perlbrew/perls/current/bin/perl<br />## compress files for NCBI<br />use v5.36;<br />use experimental qw(signatures);<br />use strict;<br />use Text::CSV qw( csv );<br />use File::Spec ;<br />use File::Basename;<br />use File::Copy;<br /><br />use FindBin qw($Bin);<br /><br />my $out_directory = File::Spec-&gt;catdir(dirname($Bin),'chrisarg_NCBI_submission');<br />my $analyses_files = <br />&nbsp;&nbsp;&nbsp; csv(in =&gt; File::Spec-&gt;catfile($Bin,"package_PALS_NS_2.csv"), <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sep_char =&gt;',',headers =&gt; "auto") <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die Text::CSV-&gt;error_diag; <br />my @fastq_directories = map {<br />&nbsp;&nbsp;&nbsp; File::Spec-&gt;catdir(dirname($Bin),values %{ $_})<br />&nbsp;&nbsp;&nbsp; } @$analyses_files;<br />my @fastq_output_names = map { <br />&nbsp;&nbsp;&nbsp; basename(values %{ $_}).".fastq";<br />&nbsp;&nbsp;&nbsp; } @$analyses_files;<br /><br />## directories go here<br />my (@files, @gz, @fastq,@dir_of_files,@dest_files, $output_fh);<br />while (my($index,$current_experiment_dir) = each @fastq_directories){<br />&nbsp;&nbsp;&nbsp; @dir_of_files = (File::Spec-&gt;catdir($current_experiment_dir,'fastq_pass'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catdir($current_experiment_dir,'fastq_fail'),<br />&nbsp;&nbsp;&nbsp; );<br />&nbsp;&nbsp;&nbsp; for my $current_dir (@dir_of_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; say "Processing $current_dir";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chdir $current_dir or die "can't cd into $current_dir";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @gz = glob('*.gz');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @fastq = glob('*.fastq');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (scalar @gz &gt; 1){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @dest_files = map {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catfile($out_directory,$_)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } @gz;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (0..$#dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy($gz[$_],$dest_files[$_])<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "Can't copy $gz[$_] because of&nbsp; $!"; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system 'gunzip', $dest_files[$_];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## may have to deal with mix of gzpd and not files<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (scalar @fastq &gt; 1){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @dest_files = map {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catfile($out_directory,$_)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } @fastq;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (0..$#dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy($fastq[$_],$dest_files[$_])<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "Can't copy $gz[$_] because of&nbsp; $!"; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; chdir $out_directory;<br />&nbsp;&nbsp;&nbsp; @dest_files = glob('*.fastq');<br />&nbsp;&nbsp;&nbsp; open&nbsp; $output_fh,&nbsp; '&gt;',$fastq_output_names[$index] <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "failed at $fastq_output_names[$index] due to $!";<br />&nbsp;&nbsp;&nbsp; foreach my $input_file (@dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; open my $input_fh , '&lt;', $input_file<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "can't open $input_file for reading";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print $output_fh $_ while &lt;$input_fh&gt;;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; close $output_fh;<br />&nbsp;&nbsp;&nbsp; unlink @dest_files;<br />&nbsp;&nbsp; !system 'gzip', '-9', $fastq_output_names[$index] <br />&nbsp;&nbsp;&nbsp; or die 'something went wrong';<br />}<br /><br />chdir $out_directory;<br />system "md5sum * &gt; md5sum.txt";<br /><br /><br /><br /><br /><br />
</p><blockquote></blockquote><p></p>]]>
        
    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-01-22T00:00:00Z</published>
    <updated>2023-01-22T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2656893155318965955</id>
    <published>2023-01-21T21:31:00.000+01:00</published>
    <updated>2023-01-21T21:31:47.119+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxviii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.77' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.77&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.76 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Class-Method-Modifiers-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Class::Method::Modifiers&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provides Moose-like method modifiers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2023-01-16&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 3 years, 5 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.030&lt;/strong&gt; on 2023-01-19&lt;/li&gt;  &lt;li&gt;Votes: 179&lt;/li&gt;  &lt;li&gt;Previous version: 6.029 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.001004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures") &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.001004&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.001003 was 5 years, 2 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.080' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.080&lt;/strong&gt; on 2023-01-18&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 2.078 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20230120&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.20221220 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9683' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9683&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9681 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.0.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v9.0.0&lt;/strong&gt; on 2023-01-16&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: v8.10.0 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.002001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002001&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 133&lt;/li&gt;  &lt;li&gt;Previous version: 2.002000 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2656893155318965955/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxviii-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2656893155318965955"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2656893155318965955"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxviii-9-great-cpan-modules-released.html" title="(cdxxviii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9174607039420115309</id>
    <published>2023-01-21T21:29:00.001+01:00</published>
    <updated>2023-01-21T21:29:09.882+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxli) metacpan weekly report - IO::Socket::SSL</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 53&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/21 20:28:45 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPU::Z80::Disassembler" target="_blank"&gt;CPU::Z80::Disassembler&lt;/a&gt; - Disassemble the flow of a Z80 program&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Logger::Log4perl" target="_blank"&gt;Dancer2::Logger::Log4perl&lt;/a&gt; - Dancer2 logger interface for Log4perl. &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fl" target="_blank"&gt;Fl&lt;/a&gt; - Bindings for the Stable 1.3.x Branch of the Fast Light Toolkit&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Antimat" target="_blank"&gt;Lingua::RU::Antimat&lt;/a&gt; - Perl Module for removal Russian slang from chat, guestbooks, etc.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Preposition" target="_blank"&gt;Lingua::RU::Preposition&lt;/a&gt; - Lingua::RU::Preposition - Russian preposition choosing&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Pod::LinkCheck::Lite" target="_blank"&gt;Test::Pod::LinkCheck::Lite&lt;/a&gt; - Test POD links&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=270)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AppConfig" target="_blank"&gt;AppConfig&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Application::Plugin::ValidateRM" target="_blank"&gt;CGI::Application::Plugin::ValidateRM&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::INI" target="_blank"&gt;Config::INI&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Rijndael" target="_blank"&gt;Crypt::Rijndael&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Page" target="_blank"&gt;Data::Page&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CopyFilesFromBuild" target="_blank"&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::MetaProvides::Package" target="_blank"&gt;Dist::Zilla::Plugin::MetaProvides::Package&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::PodWeaver" target="_blank"&gt;Dist::Zilla::Plugin::PodWeaver&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Test::Kwalitee" target="_blank"&gt;Dist::Zilla::Plugin::Test::Kwalitee&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME::Kit" target="_blank"&gt;Email::MIME::Kit&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FASTX::Reader" target="_blank"&gt;FASTX::Reader&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::MimeInfo" target="_blank"&gt;File::MimeInfo&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML5::DOM" target="_blank"&gt;HTML5::DOM&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+2=46)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tty" target="_blank"&gt;IO::Tty&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IUP" target="_blank"&gt;IUP&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Identify" target="_blank"&gt;Lingua::Identify&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Inflect" target="_blank"&gt;Lingua::RU::Inflect&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::FD" target="_blank"&gt;Linux::FD&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Message" target="_blank"&gt;Mail::Message&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MailTools" target="_blank"&gt;MailTools&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mo" target="_blank"&gt;Mo&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DNS" target="_blank"&gt;Net::DNS&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=173)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=401)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Build" target="_blank"&gt;Perl::Build&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Pulp" target="_blank"&gt;Perl::Critic::Pulp&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::PrereqScanner" target="_blank"&gt;Perl::PrereqScanner&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Simple" target="_blank"&gt;Proc::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=115)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ASCIITable" target="_blank"&gt;Text::ASCIITable&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::DBD" target="_blank"&gt;Tie::Hash::DBD&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Query" target="_blank"&gt;Web::Query&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9174607039420115309/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxli-metacpan-weekly-report-iosocketssl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9174607039420115309"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9174607039420115309"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxli-metacpan-weekly-report-iosocketssl.html" title="(dxli) metacpan weekly report - IO::Socket::SSL"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>This Week in PSC (094)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-094.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11005</id>
    <published>2023-01-20T22:28:36Z</published>
    <updated>2023-01-20T22:30:24Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>PSC met today, all three of us attended.</p>

<p>We discussed:</p>

<ul>
<li>HAARG's <tt>map my $x</tt> RFC. Overall thoughts are good, with one or two minor questions we'll add as comments.
<li>Whether the additions to <tt>join()</tt> as part of RFC0013 should be gated by some sort of opt-in flag, so as to avoid surprises. Either a feature flag for the caller of <tt>join()</tt>, or a <tt>use overload</tt> import option.
<li>Maybe renaming the RFC process itself (because of the ambiguity with IETF's RFC) and improving the numbering system. More discussion needed.
</ul>]]>
        
    </content>
</entry>
  <entry>
  <title>Call for Grant Proposals: January 2023 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/saiftynet"/>
  <id>tag:news.perlfoundation.org,2023-01-20:/post/saiftynet</id>
  <published>2023-01-20T14:57:00</published>
  <updated>2023-01-20T14:57:00</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 29th, 2023, UTC. We will publish the received applications, get community feedback through February 4th, and we 
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 29th, 2023, UTC. We will publish the received applications, get community feedback through February 4th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
 * The applicant must be a contributor to the Perl core.
 *  The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
 * The applicant must be a contributor to the Raku language specification or one of its implementations.
 * The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than January 30th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Retirement Announcement - Dave Rolsky</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/retirementdave"/>
  <id>tag:news.perlfoundation.org,2023-01-20:/post/retirementdave</id>
  <published>2023-01-20T13:03:53</published>
  <updated>2023-01-20T13:03:53</updated>
  <summary>
  <![CDATA[
     After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/cc70f58576aabcc208602bd2e0339e3660864805/clock.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>one-liner: read first elements of a huge directory</title>
  <summary type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></summary>
  <updated>2023-01-17T10:55:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/oneliner-read-huge-directory"/>  <id>https://perlmaven.com/oneliner-read-huge-directory</id>
  <content type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#599 - Open Source Development Course for Perl developers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/599.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Recently I started to offer a course called <a href="https://osdc.code-maven.com/">Open Source Development Course</a>. The idea is to let participants learn and practice(!) git/github/pull-request/testing/code-coverage/linters/ci/etc. That way they improve their development practices and can also contribute to Open Source projects.</p>
<p>It is a course designed to run for 12-13 weeks with about 5 hours per week workload. It can be either part of a university program or people can take it while they have a full-time job. Every week there is a 1-2 hours long presentation and the rest is hands-on work with my async help.</p>
<p>I'd like to offer a version of this course especially for people who are interested in contributing to Perl-based Open Source projects. The participants will learn Perl-specific tools and processes. All proceedings will go to sponsor the <a href="https://blogs.perl.org/users/book/2023/01/the-perl-toolchain-summit-is-back-in-2023.html">The Perl Toolchain Summit</a>.</p>
<p>Check out <a href="https://osdc.code-maven.com/osdc-public-2023-01-perl">this page</a> for further details and let me know ASAP if you are interested.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/599.html</id>
    <published>2023-01-16T10:00:00Z</published>
    <updated>2023-01-16T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 199</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-199/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-199/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 200</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Arithmetic Slices 10. TASK #2: Seven Segment 200 HEADLINES  Welcome to the Week #200 of The Weekly Challenge.
Ryan Thompson, our in-house Perl and Raku reviewer came up with fun task to celebrate the 200th week of the weekly challenge. I am sure you will find it fun to work on it.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-200/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Multiple Goods</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/15#pwc199" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total count of Good 
airs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub good_pairs{
    my(@numbers) = @_;
    my @pairs;  
    do{ 
        my $i = $_;
        do{
            my $j = $_;
            push @pairs, [$i, $j] if $numbers[$i] == $numbers[$j] &amp;&amp; $i &lt; $j;  
        } for 0 .. @numbers - 1;
    } for 0 .. @numbers - 1;
    return 0 + @pairs;  
}

MAIN:{
    say good_pairs 1, 2, 3, 1, 1, 3;
    say good_pairs 1, 2, 3;
    say good_pairs 1, 1, 1, 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
4
0
6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, a pair &lt;code&gt;(i, j)&lt;/code&gt; is called &lt;em&gt;good&lt;/em&gt; if &lt;code&gt;list[i] == list[j]&lt;/code&gt; and &lt;code&gt;i &amp;lt; j&lt;/code&gt;. Secondly,
I have never written a nested loop with this mix of &lt;code&gt;do&lt;/code&gt; blocks and postfix &lt;code&gt;for&lt;/code&gt;, and
I am greatly entertained by it! Perl fans will know that it really isn't all that 
different from the more standard looking do/while construct. A &lt;code&gt;do&lt;/code&gt; block is not really a 
loop, although it can be repeated, and so you cannot use &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, or &lt;code&gt;next&lt;/code&gt; within
the block. But this is exactly the same case as within a &lt;code&gt;map&lt;/code&gt;, which is what we are 
trying to replicate here, a &lt;code&gt;map&lt;/code&gt; in &lt;em&gt;void context&lt;/em&gt; without actually using &lt;code&gt;map&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Imagine a nested &lt;code&gt;map&lt;/code&gt;, that is basically the same thing as this, but with the more clear
focus on &lt;em&gt;side effects&lt;/em&gt; versus a return value. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers, @array and three integers $x,$y,$z. Write a script to 
find out total Good Triplets in the given array.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Combinatorics;
sub good_triplets{
    my($numbers, $x, $y, $z) = @_;
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; 3, data =&gt; [0 .. @{$numbers} - 1]);
    my @combination = $combinations-&gt;next_combination;  
    my @good_triplets;
    {
        my($s, $t, $u) = @combination;
        unless($s &gt;= $t || $t &gt;= $u || $s &gt;= $u){
            push @good_triplets, [@{$numbers}[$s, $t, $u]] if(abs($numbers-&gt;[$s] - $numbers-&gt;[$t]) &lt;= $x &amp;&amp; 
                                                              abs($numbers-&gt;[$t] - $numbers-&gt;[$u]) &lt;= $y &amp;&amp;  
                                                              abs($numbers-&gt;[$s] - $numbers-&gt;[$u]) &lt;= $z);  

    }
        @combination = $combinations-&gt;next_combination;  
        redo if @combination;
    }
    return 0 + @good_triplets;
}

MAIN:{
    say good_triplets([3, 0, 1, 1, 9, 7], 7, 2, 3);
    say good_triplets([1, 1, 2, 2, 3], 0, 0, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is the same that I used for the &lt;em&gt;Magical Triples&lt;/em&gt; problem from 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2022/10/23"&gt;TWC 187&lt;/a&gt;. The module
Math::Combinatorics is used to generate all possible triples of indices. These are then
filtered according to the criteria for good triplets.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-199/"&gt;Challenge 199&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc199</id>
    <published>2023-01-15T11:22:00-05:00</published>
    <updated>2023-01-15T11:22:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Fosdem mini grants</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem2023"/>
  <id>tag:news.perlfoundation.org,2023-01-11:/post/fosdem2023</id>
  <published>2023-01-11T12:23:33</published>
  <updated>2023-01-11T12:23:33</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/648b3a74e8794037135843200c91d2c94ee9cce5/money.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects.</p>

<p>In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences.</p>

<p>In addition, TPRF will have a 2 day stand at FOSDEM and are in need of volunteers to staff it. Stand  volunteers are also eligible to apply for a mini grant of up to $300 to assist with the cost of attending. </p>

<p>To apply for a FOSDEM mini grant, please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to fosdem2023-grants@perlfoundation.org.</p>

<p>If you have questions, please join our fosdem slack channel, leave a comment below, or send a message to hello@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#598 - TIOBE and Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/598.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p><strong>Happy New Year everyone !!!</strong></p>
<p><strong>Year 2022</strong> saw the biggest release of <strong>Perl v5.36</strong>. It was released with big bang. There were lots of positive vibes around it. I had never seen such noise before. If you missed the fun then you can checkout my <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a>.</p>
<p>I am not a big fan of <strong>TIOBE</strong> but came across <a href="https://www.tiobe.com/tiobe-index">TIOBE Index for January 2023</a> talking about <strong>Perl</strong> going up slightly in the index recently. It is refreshing to see the progress. Who knows one day, it would reach the <strong>TOP 5</strong> brackets.</p>
<p>Looking back the participation in <a href="https://theweeklychallenge.org">The Weekly Challenge</a>, it looks promising. Nearly <strong>10K</strong> contributions in <strong>Perl</strong> by the members of <strong>Team PWC</strong> in the last <strong>4 years</strong>.</p>
<p><strong>What is new happening in Perl?</strong></p>
<p>For me, personally, I am looking forward to the modern OO <strong>Corinna</strong> in core <strong>Perl</strong>.</p>
<p><strong>Curtis</strong> wrote an interesting <a href="https://ovid.github.io/articles/converting-object-oriented-code-to-corinna.html">blog post</a> recently where he shared his real life experience with <strong>Corinna</strong>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/598.html</id>
    <published>2023-01-09T10:00:00Z</published>
    <updated>2023-01-09T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Prime the Gaps!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/08#pwc198" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total pairs in the 
sorted list where 2 consecutive elements has the max gap. If the list contains less 
then 2 elements then return 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub largest_gap{
    my(@numbers) = @_;
    my $gap = -1;
    map{ $gap = $numbers[$_] - $numbers[$_ - 1] if $numbers[$_] - $numbers[$_ - 1] &gt; $gap } 1 .. @numbers - 1;  
    return $gap;
}

sub gap_pairs{
    my(@numbers) = @_;
    return 0 if @numbers &lt; 2; 
    my $gap = largest_gap(@numbers);
    my $gap_count;
    map { $gap_count++ if $numbers[$_] - $numbers[$_ - 1] == $gap } 1 .. @numbers - 1;  
    return $gap_count;

}

MAIN:{
    say gap_pairs(3);    
    say gap_pairs(2, 5, 8, 1);    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
0
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Probably these two subroutines could be combined into one without too much trouble, but it 
still seems cleaner to me this way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do an initial pass over the list to determine the largest gap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perform a second pass over the list and count up all pairs which have the maximum gap.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An interesting issue came up. I've been trying to avoid the use of a map in a void 
context. This is just due to the general principal to use map as a function and use its 
return value rather than rely on side effects.&lt;/p&gt;

&lt;p&gt;As part of this reformative effort I have been doing more with for in a postfix position. 
I discovered this when working this problem:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt; will not work. Perl gets confused by the 
postfix &lt;code&gt;if&lt;/code&gt; within the block, apparently.&lt;/p&gt;

&lt;p&gt;But there is a work around! Add &lt;code&gt;do&lt;/code&gt; and all is well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do {say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course the equivalent &lt;code&gt;map&lt;/code&gt; works just fine as you'd 
expect &lt;code&gt;map {say $_ if $_ % 2 == 0} 0 .. 9)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.perlmonks.org/?node_id=832495"&gt;E. Choroba&lt;/a&gt; pointed out this is due to postfix
&lt;code&gt;for&lt;/code&gt; being a statement modifier which doesn't know what to do with blocks. But why does 
&lt;code&gt;do&lt;/code&gt; fix this? I am still unclear on why that is. Even with the &lt;code&gt;do&lt;/code&gt; it's still a block!
Apparently perl will view it as a statement, for the purposes of the postfix &lt;code&gt;for&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out that the &lt;code&gt;do {}&lt;/code&gt; construct qualifies as a &lt;em&gt;Simple Statement&lt;/em&gt;. From the
&lt;a href="https://perldoc.perl.org/perlsyn#Simple-Statements"&gt;perldoc&lt;/a&gt;: &lt;em&gt;Note that there are 
operators like eval {}, sub {}, and do {} that look like compound statements, but 
aren't--they're just TERMs in an expression--and thus need an explicit termination when 
used as the last item in a statement.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt; 0. Write a script to print the count of primes less 
than $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Primality q/is_prime/;

sub prime_count{
    return 0 + grep { is_prime $_ } 2 .. $_[0] - 1;  
}

MAIN:{
    say prime_count(10);  
    say prime_count(15);  
    say prime_count(1);  
    say prime_count(25);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
6
0
9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The Math::Primality module makes this quite easy! In fact, I am not sure there is that 
much to elaborate on. Check primality using is_prime() and we're done!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-198/"&gt;Challenge 198&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc198</id>
    <published>2023-01-08T19:30:00-05:00</published>
    <updated>2023-01-08T19:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): December 2022 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_dec_2022"/>
  <id>tag:news.perlfoundation.org,2023-01-04:/post/maintaining_perl_dave_mitchell_dec_2022</id>
  <published>2023-01-04T10:07:57</published>
  <updated>2023-01-04T10:07:57</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during December covered by my TPF perl core maintenance grant. This month I continued work on making the stack reference counted. A couple of weeks ago I reached a major milestone: the point where I actually enabled reference-counting of SVs on the stack for the first time. Since then I have reached the point where the perl build actually completes 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during December covered by my TPF
perl core maintenance grant.</p>

<p>This month I continued work on making the stack reference counted.</p>

<p>A couple of weeks ago I reached a major milestone: the point where I
actually enabled reference-counting of SVs on the stack for the first
time. Since then I have reached the point where the perl build actually
completes (including the make runs in each dist/ and cpan/ subdir) and
'make minitest' only has a couple of failures. A full 'make test' seems to
have a lot of passing test files but currently hangs in some of the
threads tests - so I haven't been able to run 'make test' to completion
yet.</p>

<p>These preliminary results give me encouragement that my approach is sound,
and that it is just a case of fixing up all individual issues as they are
revealed by the test suite.</p>

<p>As a trivial example, this code was failing: ($ref + 1), because the
addition (like other numeric ops) uses the address of a plain reference as
the value to add, and pp_add() does this by replacing the ref SV on the
stack with an SV containing the int value of the ref. This simple
replacement, without adjusting reference counts, leaked the ref SV and
caused the temporary integer SV to be prematurely freed. Because this was
hidden away in a separate function dedicated to handling possible
overloading, I didn't spot it before enabling reference counting.</p>

<p>I have no idea how much further effort it will require to get the main
test suite to pass. After that, it is then a case of removing the wrapping
of performance-critical functions, then I'll be able to measure how much
slowdown there is. At that point it may become a candidate to be merged
into bleed (but enabled by default), then I can continue (at a more
leisurely pace) to unwrap further ops, add in optimisations, and work out
how new XS code be written to take direct advantage of a ref-counted
stack.</p>

<p>SUMMARY:
* 1:01 #6543 $1 dynamic scoping breaks with recursion
* 78:03 make stack reference counted
* 7:22 process p5p mailbox</p>

<p>TOTAL:
 * 86:26 (HH::MM)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#597 - Happy New Year!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/597.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I hope you had a successful 2022 and you are ready for the next year. I certainly have lots of plans. As always. They are also changing a lot all the time. One of them is a new course I am working on called <a href="https://osdc.code-maven.com/">OSDC - Open Source Development Course</a>. It is a hands-on course that covers git/GitHub/GitLab/Testing/CI using real-world open source projects. It is also not only a plan, I am starting the first session next Sunday. It will be given in Hebrew.</p>
<p>For the course I started to collect <a href="https://github.com/szabgab/open-source-by-corporations">Open Source projects developed by corporations</a>. There are a few where the product is open source such as <a href="https://redis.io/">Redis</a> and <a href="https://www.elastic.co/">Elastic</a>. There are others where the company shares some of its code as open source such as Netflix, Facebook, or Booking.com.</p>
<p>I'd like to ask for your help. Look around at your company and maybe other companies and let me know which one shares projects using an Open Source license. It would help me and the participants of this courses a lot. For the purpose of the course and for my collection the programming languages don't matter.</p>
<p>However, if you can also point out Perl-based projects, that would be even better. Then I could feature these projects in the newsletter. Let's start now with one I already found:</p>
<p><a href="https://github.com/bookingcom/pakket">pakket</a> by <a href="https://www.booking.com/">Booking.com</a> is an Unopinionated Meta-Packaging System that allows you to manage dependencies. It works by trying to avoid work.</p>
<p>Enjoy your year!</p></div>
    </content>
    <id>https://perlweekly.com/archive/597.html</id>
    <published>2023-01-02T10:00:00Z</published>
    <updated>2023-01-02T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Cavaspazi">Acme-Cavaspazi</a></td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>0.1.0</td>
<td>1.0.0</td>
<td>a simple function to remove spaces from strings or lists of strings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-FSM">Acme-FSM</a></td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>v2.3.5</td>
<td>v2.3.5</td>
<td>Pseudo Finite State Machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Affix">Affix</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.04</td>
<td>0.09_05</td>
<td>A Foreign Function Interface eXtension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-Headers">Alien-Boost-Headers</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.9</td>
<td>Find or build Boost Headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-ProgramOptions">Alien-Boost-ProgramOptions</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.7</td>
<td>Find or build libboost</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-NutritionFacts">App-BPOMUtils-NutritionFacts</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015</td>
<td>0.015</td>
<td>Utilities related to BPOM nutrition facts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CSV2LaTeXTable">App-CSV2LaTeXTable</a></td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1.0.0</td>
<td>1.1.0</td>
<td>Generate LaTeX table from CSV file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Client">App-OpenMbox-Client</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.11</td>
<td>0.13</td>
<td>A perl client to send simple email via OpenMbox's smtp server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Test">App-OpenMbox-Test</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.10</td>
<td>0.13</td>
<td>Auto delivery test for OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/C600">C600</a></td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Wrap of C600</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Changes">Changes</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>Changes file management</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2">DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0107</td>
<td>Crypt::Passphrase::Argon2 backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt">DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0110</td>
<td>Crypt::Passphrase::Bcrypt backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-HTML-TreeDumper">Data-HTML-TreeDumper</a></td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>v0.0.1</td>
<td>v0.0.4</td>
<td>dumps perl data as HTML5 open/close tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Localize-YAML">Data-Localize-YAML</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acquire Lexicons From .yml Files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Regexp">Data-Sah-FilterBundle-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to regular expressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-ULID-XS">Data-ULID-XS</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.005</td>
<td>XS backend for ULID generation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Cover-Report-Cobertura">Devel-Cover-Report-Cobertura</a></td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1.0</td>
<td>1.0</td>
<td>Backend for Cobertura reporting of coverage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Filesys-Restrict">Filesys-Restrict</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Restrict filesystem access</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Dogecoin-Utils">Finance-Dogecoin-Utils</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20221211.2353</td>
<td>1.20221211.2353</td>
<td>Libraries and Utilities to work with Dogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-SEC-EdgarData">Finance-SEC-EdgarData</a></td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>0.01</td>
<td>0.010021</td>
<td>scraping edgar for fun and profit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KCP">KCP</a></td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Perl extension for skywind3000/kcp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LibUI">LibUI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Simple, Portable, Native GUI Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-NFTables">Linux-NFTables</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl interface to libnftables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-SNAFU">Math-SNAFU</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>decimal to SNAFU converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Redis-XS">Net-Async-Redis-XS</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.008</td>
<td>faster version of Net::Async::Redis</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Newtype">Newtype</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Perl implementation of an approximation for Haskell's newtype</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-Keyword-Accessor">Object-Pad-Keyword-Accessor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare lvalue accessors on Object::Pad classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAI-API">OpenAI-API</a></td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A Perl module for accessing the OpenAI API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perlsac-rwsac">Perlsac-rwsac</a></td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>a module to read and write SAC file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Favicon_Simple">Plack-Middleware-Favicon_Simple</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl Plack Middleware to provide favicon</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Method_Allow">Plack-Middleware-Method_Allow</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>perl Plack Middleware to filter HTTP Methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-SocketUtil">SPVM-Resource-SocketUtil</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>The Resource for Socket Utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Phone">Sah-Schemas-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Schemas related to phones &amp; phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0">Search-Elasticsearch-Client-8_0</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0-Async">Search-Elasticsearch-Client-8_0-Async</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin async client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Tagged-Markdown">String-Tagged-Markdown</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>parse and emit text with Markdown inline formatting</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Operator-ExistsOr">Syntax-Operator-ExistsOr</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>an infix operator sensitive to hash element existence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-KBLI">TableDataBundle-Business-ID-KBLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220912.0.0</td>
<td>20220912.0.0</td>
<td>Collection of TableData:: modules related to KBLI (Kode Baku Lapangan Usaha, a.k.a. Standard Code of Business Field)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Software-License">TableDataBundle-Software-License</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of TableData:: modules related to software license</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse">Terse</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.121</td>
<td>lightweight JSON APIs.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Config">Terse-Config</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse configs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Headers">Terse-Headers</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Static">Terse-Static</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Serve static resources</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Named">Test-Named</a></td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>v001</td>
<td>v0.03</td>
<td>Perl extension for named tests. Inspired on this:</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test2-Tools-Command">Test2-Tools-Command</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.11</td>
<td>run unix commands</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TimeZone-Solar">TimeZone-Solar</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.2.1</td>
<td>local solar timezone lookup and utilities including DateTime compatibility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-FileTree">Tk-FileTree</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Tk::DirTree like widget for displaying &amp; manipulating directories  (and files).</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wasm-Wasmer">Wasm-Wasmer</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>WebAssembly in Perl via Wasmer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-SendBird">WebService-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oo_sub">oo_sub</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>v1.0.0</td>
<td>v1.0.9</td>
<td>Enable OOP in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oop">oop</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1.00</td>
<td>v1.0.0</td>
<td>Use object-oriented versions of built-in Perl functions</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>52</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-Cavaspazi PROCH 0.1.0 1.0.0 a simple function to remove spaces from strings or lists of strings Acme-FSM WHYNOT v2.3.5 v2.3.5 Pseudo Finite State Machine Affix SANKO 0.04 0.09_05 A Foreign Function Interface eXtension Alien-Boost-Headers CONTRA 1.7 1.9 Find or build Boost Headers Alien-Boost-ProgramOptions CONTRA 1.7 1.7 Find or build libboost … <a href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2004</id>
    <published>2023-01-02T02:06:15Z</published>
    <updated>2023-01-02T02:06:15Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
