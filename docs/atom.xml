<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-04-15T05:47:37Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>A year of strife in Perl</title>
    <link rel="alternate" href="https://dev.to/leontimmermans/a-year-of-strife-16o9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>Disclaimer: this is based on my own personal experience and perception. It's not The Truth, but it is my truth.</em></p>

<p>Last year, in early May, I got an email that got me worried. Really really worried. Not because of disagreement (though I did disagree with it), but because I knew this would be the most controversial thing I've seen in my more than decade on perl5-porters (the mailing list where core contributors discuss the development of perl). If I was wrong it was only because controversial turned out not to be quite strong enough a word for what would happen.</p>

<p>In it, a radical change was proposed. Radical in technology, but I'm not going to focus on that today. Radical in <a href="http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html">values</a>, which really means it's radical for the community as well. It immediately divided both core contributors and much of the community into many factions with two main contingents.</p>

<p>What may seem like a simple technical disagreement was everything but. It was a fight for the soul of the language and the community that we love. While there were a lot of (mostly silent) people in the middle, in the discourse there were two sides and both (or at least enough people on both sides) were entirely convinced that the language and community that we all love only has a future if their side wins, and that the other will drive it to ruin.</p>

<p>If that doesn't sound like the prologue of a Greek tragedy, then I don't know what does.</p>

<p>It led to vigorous discussion; initially behind the scenes, and after the Conference-in-the-Cloud also on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257565.html">perl5-porters</a> and elsewhere. And quite frankly, this only stopped when people mostly stopped talking to each other after 2 weeks because there was little point to it.</p>

<p><em>The alarm bells really should have gone off here.</em></p>

<p>Soon enough the conflict moved to github. The unfortunate thing is that there were two groups of people: one with the will to make this happen but not quite the knowledge, and they started writing code. And one group that didn't want this to happen that did have the knowledge, who started reviewing said code. As you can probably guess, this soon became a mutually aggravating situation. After a few weeks of stepping on each other's toes, it became an open conflict.</p>

<p>The stakes were astronomical. I've heard several people say (in private) that they felt they would be needing to look for a different career and community over this. Combine this with a pandemic that has all of us stressed out, this led to a situation which I can only summarize as <em>both sides kept pushing until the other side would give up</em>. Given the sheer stubbornness of the average perl contributor this could only end when a sufficient number of people have burned out that neither side is capable of doing pretty much anything. It was a dynamic that was quite frankly burning me out too, to the point where several of my loved ones told me I should give up on this for sake of my own mental health (and I've heard similar stories from others).</p>

<p><strong>It's easy to assume that the things that happened were a few abusive assholes, but in my experience it was mostly a vicious cycle of previously reasonable and kind people lashing out at the people that were burning them out</strong>.</p>

<p>And that's where the alarm bells became cold-war style air sirens, the kind you can hear from miles away (sorry gen-z, you probably have no idea what I'm talking about).</p>

<p>This was the moment when we (or actually a bunch of community elders) started up a process to set up a new governance, because any decision making process that can generate this amount of strife is in need of repairs. Many people saw it as a diversion, but I don't agree. I think it was the only way to restart this conversation, and to get to a point (currently still in the future) where we can heal again.</p>

<p>But when hell broke loose, another thing was finally spoken out, though it was easily missed in between all the unpleasantness, is a simple truth that there is a third option that had been unthinkable a year ago: forking. This changes everything about the equation, literally everything.</p>

<p>Ultimately I believe that is what ended the discussion. It ended with the simple knowledge that the opposition was able and willing to fork if that's what it takes to prevent their worst-case scenario. In a way it was a Solomon's judgement for the steering committee. It ended the discussion not just because almost no one wants to fork the community, but because perl7 as announced last summer wouldn't be viable given a competitor that actually supports all of CPAN today and will continue to do so for the foreseeable future (just look at how long it took the python3 transition to take over, and that's without people wanting to keep supporting python2).</p>

<p>It is a pyrrhic victory. Pyrrhic not just because "we" haven't really won anything. Everyone lost because friendships were damaged (and perhaps lost) over this. We lost because a bunch of the people who matter for moving perl forward are currently effectively burned out (a few loudly so, but many in painful silence). We lost because people stopped contributing over this (most prominently but not limited to former project lead Sawyer).</p>

<h3>
  <a href="#so-what-can-we-learn-from-this-and-how-can-we-move-forward">
  </a>
  So what can we learn from this, and how can we move forward?
</h3>

<ul>
<li><p>We needed different governance, for a multitude of reasons. The old pumpking model had a tendency to burn people out, that was not sustainable (to be honest, Sawyer seemed burned out to me even before any of this happened, I can only imagine where he is now). Having more people in our executive, and having them there for bound terms (it's easier to stop when it takes effort to continue) will hopefully prevent that in the future. But also because it will lead to more diverse points of view. I suspect we'll be tweaking our governance for a while we gain more experience with it, but at least we have a foundation to do that with now.</p></li>
<li><p>Going through this during a pandemic really didn't help. I honestly believe this situation would not have gotten so badly out of hand if we could meet up face to face and talk to each other with a beverage in our hands; if we weren't all so tense because we haven't seen many of our loved ones in ages. We should remember that. Some discussions should be done in real life; sometimes the right response to a conflict is "Ooh, I get the impression this may be a Chartreuse-level discussion. Are you up for that?"</p></li>
<li><p>We should have more attention for our contributors' mental health; we need to remember the human on the other side of the conversation. It's perhaps cliche to say we should act with more empathy for each other, but frankly we collectively also acted with too little empathy for ourselves.</p></li>
<li><p>It seems that the proponents initially mistook a lot of the grievances as mere bike-shedding, when they actually were meaningful concerns that wouldn't go away by themselves. They didn't seem to realize that they were <a href="https://www.dictionary.com/browse/cross--the--rubicon">crossing the Rubicon</a> by actually moving forward with their plans without a consensus. We should not set ourselves up for failure like that, there is no way that could have ended well.</p></li>
<li><p>One thing we started doing much too late was mediation (Neil in particular has done great work there lately). We need people who can see all perspectives and bring them all back together. This is where we truly miss Larry more than anything, because bringing different needs together was his true talent. I don't think (or hope) we will be needing this often, but it's probably good to be prepared for such an eventuality.</p></li>
<li><p>We talk a lot about speaking with kindness, but we don't talk nearly enough about listening with kindness. Unlike speaking, listening kindly can't really be enforced, but the speaking without listening can easily become dysfunctional. Achieving this requires a cultural change. I don't know how to get us there, but I do know that it will require leadership.</p></li>
<li><p>The other thing that requires leadership is bringing us back together again. Perl is unique in the <a href="https://twitter.com/leon_timmermans/status/1376299679818874880">breadth</a> of its user base and that is both Perl's greatest strength as its greatest weakness. These conflicting interests were at the root of this conflict, and finding a path that serves all those interests (including the less loud ones) will be the main challenge for the steering committee.</p></li>
</ul>

</div>
    </content>
    <author>
      <name>Leon Timmermans</name>
    </author>
    <id>https://dev.to/leontimmermans/a-year-of-strife-16o9</id>
    <published>2021-04-14T19:59:48Z</published>
    <updated>2021-04-14T19:59:48Z</updated>
    <category term="perl"/>
    <category term="community"/>
  </entry>
  <entry>
    <title>Use latexindent on macOS Big Sur</title>
    <link rel="alternate" href="https://dev.to/mrchoke/use-latexindent-on-macos-big-sur-45gm" type="text/html"/>
    <content type="html">&lt;p&gt;ตัวช่วยจัด indent source ของ LaTeX คือ latexindent แต่บน macOS จะต้องติดตั้ง cpan modules เพิ่มเติมนิดหน่อย&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't locate File/HomeDir.pm in [@INC](http://twitter.com/INC) (you may need to install the File::HomeDir module) ([@INC](http://twitter.com/INC) contains: /usr/local/texlive/2021/texmf-dist/scripts/latexindent /Library/Perl/5.30/darwin-thread-multi-2level /Library/Perl/5.30 /Network/Library/Perl/5.30/darwin-thread-multi-2level /Network/Library/Perl/5.30 /Library/Perl/Updates/5.30.2 /System/Library/Perl/5.30/darwin-thread-multi-2level /System/Library/Perl/5.30 /System/Library/Perl/Extras/5.30/darwin-thread-multi-2level /System/Library/Perl/Extras/5.30) at /usr/local/texlive/2021/texmf-dist/scripts/latexindent/LatexIndent/GetYamlSettings.pm line 22.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ถ้าเจอ error นี้ให้ติดตั้ง modules ต่างๆ ดังนี้&lt;/p&gt;

&lt;p&gt;เริ่มแรกให้กำหนด CPATH ให้ชี้ให้ถูกต้อง&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Perl/5.30/darwin-thread-multi-2level/CORE:$CPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;หลังจากนั้นก็ให้ติดตั้ง CPAN Modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cpan install File:HomeDir
cpan install Unicode::GCString
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ปล. ผมเลือก sudo ตอนที่ CPAN ถามนะครับ&lt;/p&gt;

</content>
    <author>
      <name>MrChoke</name>
    </author>
    <id>https://dev.to/mrchoke/use-latexindent-on-macos-big-sur-45gm</id>
    <published>2021-04-14T19:23:56Z</published>
    <updated>2021-04-14T19:23:56Z</updated>
    <category term="latexindent"/>
    <category term="perl"/>
    <category term="macos"/>
    <category term="latex"/>
  </entry>
  <entry>
    <title>#AdoptAPerlModule</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/adoptaperlmodule-2oh2" type="text/html"/>
    <content type="html">&lt;h3&gt;
  &lt;a href="#do-you-have-some-time-for-open-source-and-perl"&gt;
  &lt;/a&gt;
  Do you have some time for open source (and Perl)?
&lt;/h3&gt;

&lt;p&gt;Then &lt;a href="http://neilb.org/2013/07/24/adopt-a-module.html"&gt;#AdoptAPerlModule&lt;/a&gt;! 😀&lt;/p&gt;

&lt;p&gt;Maintaining module is a rewarding position where you can learn more about toolchains concepts and play a role in the Perl ecosystem.&lt;/p&gt;

&lt;p&gt;Of course depending how much people depends on your module, it will require more work, reactivity and consistency. But a lot of "orphan" modules fall not in this category.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#friendly-cpan-module-is-looking-for-love-and-care"&gt;
  &lt;/a&gt;
  Friendly CPAN module is looking for love and care
&lt;/h3&gt;

&lt;p&gt;I listed below some links where you can find modules that &lt;strong&gt;need help&lt;/strong&gt; or are &lt;strong&gt;looking for a new maintainer&lt;/strong&gt; ("Adoptable").&lt;/p&gt;

&lt;p&gt;As a starting point, see first the &lt;a href="https://neilb.org/adoption/"&gt;adoption's list&lt;/a&gt; from &lt;strong&gt;Neil Bowers&lt;/strong&gt; who integrates metrics like number of issues to extract "possible candidates".&lt;/p&gt;

&lt;p&gt;Then there is the &lt;a href="https://metacpan.org/author/ADOPTME"&gt;ADOPTME&lt;/a&gt; author on MetaCPAN.&lt;br&gt;
Unfortunately the &lt;a href="https://metacpan.org/author/HANDOFF"&gt;HANDOFF&lt;/a&gt; and &lt;a href="https://metacpan.org/author/NEEDHELP"&gt;NEEDHELP&lt;/a&gt; search from MetaCPAN are not working well (and actually even the ADOPTME I mentioned you just above is incomplete). Maybe I have to propose a code change to &lt;a href="https://github.com/metacpan/metacpan-web"&gt;MetaCPAN&lt;/a&gt; 😀&lt;/p&gt;

&lt;p&gt;For better lists you can go on &lt;a href="https://rt.cpan.org/Public/"&gt;RT&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rt.cpan.org/Public/Dist/ByMaintainer.html?Name=ADOPTME"&gt;ADOPTME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rt.cpan.org/Public/Dist/ByMaintainer.html?Name=HANDOFF"&gt;HANDOFF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rt.cpan.org/Public/Dist/ByMaintainer.html?Name=NEEDHELP"&gt;NEEDHELP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or on &lt;a href="https://cpanmeta.grinnz.com/"&gt;CPANMeta&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cpanmeta.grinnz.com/perms?author=ADOPTME&amp;amp;module=&amp;amp;match_mode=exact"&gt;ADOPTME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cpanmeta.grinnz.com/perms?author=HANDOFF&amp;amp;module=&amp;amp;match_mode=exact"&gt;HANDOFF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cpanmeta.grinnz.com/perms?author=NEEDHELP&amp;amp;module=&amp;amp;match_mode=exact"&gt;NEEDHELP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, there is also a GitHub organization that &lt;a href="https://github.com/CPAN-Adoptable-Modules"&gt;gathers orphan modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(If you know more links, please share in comments)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#river-position"&gt;
  &lt;/a&gt;
  River position
&lt;/h3&gt;

&lt;p&gt;Take care of the "river" position, don't adopt modules with several dependent packages.  &lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/adoptaperlmodule-2oh2</id>
    <published>2021-04-14T11:48:52Z</published>
    <updated>2021-04-14T11:48:52Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>What is X in Perl?</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/what-is-x-in-perl-3n77" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h3>
  <a href="#what-is-pip-or-gem">
  </a>
  What is pip or gem?
</h3>

<p><a href="https://metacpan.org/pod/distribution/App-cpanminus/bin/cpanm">cpanm</a> or <a href="https://metacpan.org/pod/distribution/App-cpm/script/cpm">cpm</a></p>

<h3>
  <a href="#where-is-my-repl">
  </a>
  Where is my REPL?
</h3>

<p>Use <a href="https://perldoc.perl.org/perldebug">perl debugger</a> <code>perl -de2</code> or one of the REPL (e.g. <a href="https://metacpan.org/pod/Devel::REPL">Devel::REPL</a>)</p>

<h3>
  <a href="#is-there-any-gemfile-or-requirementstxt">
  </a>
  Is there any gemfile or requirements.txt?
</h3>

<p><a href="https://metacpan.org/pod/distribution/Module-CPANfile/lib/cpanfile.pod">cpanfile</a> or <a href="https://github.com/skaji/cpm/blob/master/cpm.yml">cpmfile</a> (NEW!)</p>

<p>(and more... e.g. with <code>dzil</code>)</p>

<h3>
  <a href="#what-is-packagejson">
  </a>
  What is package.json?
</h3>

<p><a href="https://metacpan.org/source/INGY/Acme-1.11111111111/META.json">META.json</a> and <a href="https://metacpan.org/source/INGY/Acme-1.11111111111/META.yml">META.yml</a> see <a href="https://metacpan.org/pod/CPAN::Meta::Spec">doc</a></p>

<h3>
  <a href="#and-gemfilelock-or-packagelockjson">
  </a>
  And gemfile.lock or package-lock.json?
</h3>

<p><a href="https://metacpan.org/pod/cpanfile">cpanfile.snapshot</a> or <a href="https://metacpan.org/pod/Carton">carton.lock</a></p>

<h3>
  <a href="#and-what-about-virtualenv">
  </a>
  And what about Virtualenv?
</h3>

<p>Virtual envs are not <em>as much vital</em> in Perl, but there is <a href="https://github.com/tokuhirom/plenv">plenv</a> or <a href="https://perlbrew.pl/">perlbrew</a></p>

<h3>
  <a href="#bundler">
  </a>
  Bundler?
</h3>

<p><a href="https://metacpan.org/release/carton">carton</a></p>

<h3>
  <a href="#other-tips-for-perl-beginners">
  </a>
  Other tips for Perl beginners
</h3>

<ul>
<li>Usually no variable methods (<code>variable.method</code>) but methods on variables (<code>method(variable)</code>) e.g. <code>split</code>
</li>
<li>
<code>;</code> is mandatory (with few exceptions but please forget)</li>
<li>Indentation not meaningful</li>
</ul>

</div>
    </content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/what-is-x-in-perl-3n77</id>
    <published>2021-04-14T09:24:54Z</published>
    <updated>2021-04-14T09:24:54Z</updated>
    <category term="perl"/>
    <category term="toolchain"/>
    <category term="tooling"/>
    <category term="packages"/>
  </entry>
  <entry>
    <title>Reimagining perl5-porters email list for 2021 and beyond</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/04/reimagining-perl5-porters-email-list-for-2021-and-beyond.html"/>
    <id>tag:blogs.perl.org,2021:/users/dean//558.10180</id>
    <published>2021-04-14T05:10:55Z</published>
    <updated>2021-04-14T07:12:47Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Let's examine if in 2021 an email redistribution list, i.e. perl5-porters@ (p5p) is still the best model for collaborating on the perl language. This is a discussion so comment below!</p>

<p><strong>Advantages of an email list:</strong></p>

<ul>
	<li>Familiar interface, people can use their client of choice</li>
	<li>Low resources to run and maintain</li>
	<li>Easy to derive automation from as email is all well known protocols</li>
	<li>Everything is email</li>
</ul>

<p><strong>Disadvantages of an email list:</strong></p>

<ul>
	<li>Email addresses disclosed to all participants (can be changed)</li>
	<li>UI experience for participants inconsistent, may require client side configuration to "get right"</li>
	<li>Email "reply" text can lower the signal to noise ratio</li>
	<li>No topic categorization of posts, its all dumped in to your inbox</li>
	<li>Tricky to respond to missed emails</li>
	<li>Moderation is crude, every email is reviewed and approved, or everything is approved</li>
	<li>Once an email is relayed it can't be moderated further</li>
	<li>Encourages side channel correspondence</li>
	<li>Everything is email</li>
</ul>

<p>Given the long list of disadvantages we can guess why email lists (and newsgroups) have largely fallen by the wayside.</p>

<p>Self-hosted web forums largely replaced them, which themselves are now largely replaced by "social media" - be that Facebook pages/groups, reddit topics, stackoverflow etc.  Although we can learn much from how web forums are still used by android developers etc</p>

<p>My own personal experience is that my current employer has all but eliminated email, seriously. I receive 2-3 emails each day which are always automated notifications and often from external sources (health insurance notifications, stockholder notices etc)<br />
For so many of us, our professional lives are built on top of email - so imagining work without email is like imagining a new colour.</p>

<p>Because imagining new things is hard, let's start a discussion around requirements first and see where that leads us. </p>

<p>In terms of prior art- there is no shortage of "collaboration software" in 2021. From issue trackers that have bolted on kanban boards, to chat software on steroids - there are different approaches we can learn from. Perhaps we should use one of those instead? There are good arguments to be made around this.</p>

<p>For convenience, I will split my proposed requirements in to functional and non-functional, as well as aspirations which can help guide design choices.</p>

<p><strong>Functional requirements:</strong></p>

<ul>
	<li>People and automation can post content</li>
	<li>People and automation can post content that has various relationships with other content</li>
<ul><li>Reply being the most obvious relationship</li></ul>
        <li>Content can have relationships with external things (CVE notices, GH bugs, RT issues, etc)</li>
<li>Content can be tagged with arbitrary tags, allowing it to be classified</li>
<li>Content has various metadata</li>
<li>A system for voting</li>
<li>UI makes responding quick and easy</li>
<li>Personal contact details controlled by each participant</li>
<li>Moderation features</li>
<ul><li>Moderators able remove posts from view, still visible to moderators</li>
  <li>Features to correspond with moderation actions privately</li>
  <li>Content is never deleted, only hidden</li>
</ul>
<li>API for integration with other systems, github, irc bots, etc</li>
<li>Generalized notification system with user controls</li>
<ul><li>Send's emails</li>
 <li>Calls other API's as mentioned</li></ul>
<li>Uses CPAN users</li>
<ul><li>2fa</li></ul>
<li>Rate limiting & throttling</li>
<li>Anti-spam</li>
<li>Web based and cli tools, perhaps email driven interaction</li>
<li>Well Indexed and searchable</li>
</ul>
<strong>Non-Functional requirement:</strong>
<ul>
	<li>FOSS code</li>
	<li>Self hosted? </li>
	<li>Written in Perl</li>
	<li>Encrypted backups</li>
	<li>Modular, so to make contributing and administering simple</li>
</ul>

<p><strong>Aspirations:</strong></p>

<ul>
	<li>Help prioritize urgent matters like CVE's</li>
	<li>Reduce busy work for people</li>
<ul>
	<li>Automate and integrate with RT, GH etc.</li>
	<li>Reduce unnecessary reading</li>
	<li>High signal to noise ratio</li>
</ul>
	<li>Respect peoples privacy</li>
	<li>Promote respectful collaboration</li>
	<li>Promote data driven decision making</li>
	<li>Modern looking interface</li>
</ul>

<p>In my minds-eye I have something of a hybrid of Hacker News/Reddit and Asana/Monday dot com. It's hard to resist the temptation to make our own. I suspect that in just on hack-o-thon a minimum product that is already more effective than an email list could be built using on Mojolicious and GraphQL. </p>

<p><strong>How would we get this thing?</strong></p>

<p>I mentioned a hack-o-thon, this type of thing worked nicely enough for MetaCPAN.</p>

<p>TPF might reasonably call for some well known Perl consultancies for priced proposals then do fundraising activities to cover the costs. Such proposals could be milestone based or components assigned to different firms working in parallel.</p>

<p><strong>Now what?</strong></p>

<p>What are your thoughts? What could we add or clarify? Hopefully you have a radically different concept you can describe?</p>

<p><br />
<strong>Footnotes</strong></p>

<p>According to Neil Bowers, the purpose of p5p is "the development and maintenance of Perl"  (<a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259782.html">https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259782.html</a>) which is also covered in the "perlpolicy" document (<a href="https://perldoc.perl.org/perlpolicy">https://perldoc.perl.org/perlpolicy</a>)</p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 108: Locate Memory and Bell Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-108-locate-memory-and-bell-numbers.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10179</id>
    <published>2021-04-13T22:41:58Z</published>
    <updated>2021-04-13T22:44:41Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 108 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (April 18, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Locate Memory</h2>

<p><em>Write a script to declare a variable or constant and print it’s location in the memory.</em></p>

<h3>Locate Memory in Raku</h3>

<p>In languages such as Perl and C, it is a fairly common task to take a reference or a pointer to a variable, and a reference or a pointer are essentially the memory addresses of such a variable (for some definition of memory address). In Raku, using the memory address of a variable is almost never necessary (except possibly for low-level debugging purpose). Actually, I originally wasn&#8217;t even completely sure I was going to find a way of doing that in Raku. However, the <a href="https://docs.raku.org/language/mop">Metaobject Protocol (MOP)</a> offers some <a href="https://docs.raku.org/language/mop#Metamethods">metamethods</a>, which are introspective macros that provide information about objects (including variables). One such metamethod is <a href="https://docs.raku.org/routine/WHERE">WHERE</a>, which returns an <code>Int</code> representing the memory address of the object. Once we know that, the task is very easy:</p>

<pre><code>my $i = 42;
say $i.WHERE;
</code></pre>

<p>This small script displays the following output:</p>

<pre><code>$ raku memory.raku
41688736
</code></pre>

<h3>Locate Memory in Perl</h3>

<p>As mentioned before, taking a reference to a variable is very common in Perl. And a reference is in effect a memory address. So the task is very easy in Perl:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $i = 42;
say \$i;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl memory.pl
SCALAR(0x600079020)
</code></pre>

<p>If we want to get rid of irrelevant information and print out only the memory address, we can just extract the address, for example with a regular expression:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $i = 42;
my $ref = \$i;
my $addr = $1 if $ref =~ /\((0x\w+)/;
say $addr;
</code></pre>

<p>which prints only the memory address:</p>

<pre><code>$ perl memory.pl
0x600079020
</code></pre>

<h3>Locate Memory in Other Languages</h3>

<h4>Memory Address in the C Programming Language</h4>

<p>In C, <code>&amp;</code> is the &#8220;address-of&#8221; operator:</p>

<pre><code>#include &lt;stdio.h&gt;

int main () {
    int val = 42;
    printf("Memory location of val is: %p", &amp;val);
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
Memory location of val is: 0xffffcc1c
</code></pre>

<h4>Memory Address in C++</h4>

<p>Rather than copying almost verbatim the C program above, we&#8217;ll use the fact that C and C++ array names are actually pointers:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main() {
  int array[4] = {42, 43, 44, 45};
  cout &lt;&lt; "Memory address of the array is: " &lt;&lt; array;
  return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>Memory address of the array is: 0x7ffc3775ad50
</code></pre>

<h4>Memory Address in the D Programming Language</h4>

<p>D pointers are similar to C&#8217;s. So we can do basically the same as in C:</p>

<pre><code>import std.stdio;

void main () { 
   int val = 42; 
   writeln("Address of val is: ", &amp;val);
}
</code></pre>

<p>Output:</p>

<pre><code>Address of val is: 7FFD967574F8
</code></pre>

<h4>Memory Address in Python</h4>

<p>Python doesn&#8217;t really have pointers, but we can still retrieve the integer representation of the address of a Python object with the <code>id</code> built-in:</p>

<pre><code>i = 42
print("Address of variable i is: ", id(i))
</code></pre>

<p>Output:</p>

<pre><code>Address of variable i is:  9786208
</code></pre>

<h4>Memory Address in Go</h4>

<p>In Go, <code>&amp;</code> is the &#8220;address-of&#8221; operator:</p>

<pre><code>package main

import "fmt"

func main() {
    i := 42
    fmt.Println("Address of vaiable i is: ", &amp;i)
}
</code></pre>

<p>Output:</p>

<pre><code>Address of vaiable i is:  0xc000018050
</code></pre>

<h4>Memory Address in Julia</h4>

<p>In Julia, we’ll use an array. The <code>pointer</code> built-in function returns a pointer to the array:</p>

<pre><code>arr = [1, 2, 3, 7]
p_arr = pointer(arr)
println("Memory address of arr is: ", p_arr)
</code></pre>

<p>Output:</p>

<pre><code>Memory address of arr is: Ptr{Int64} @0x00007f70a29334d0
</code></pre>

<h4>Memory Address in Rust</h4>

<p>In Rust, <code>&amp;</code> is the &#8220;address-of&#8221; operator as in C:</p>

<pre><code>fn main() {
    let val: i32 = 42;
    println!("Memory locacion of variable val is: {:p}", &amp;val);
}
</code></pre>

<p>Output:</p>

<pre><code>Memory location of variable val is: 0x7fff4b32e2fc
</code></pre>

<h2>Task 2: Bell Numbers</h2>

<p><em>Write a script to display top 10 Bell Numbers. Please refer to <a href="https://en.wikipedia.org/wiki/Bell_number">Wikipedia page</a> for more informations.</em></p>

<p><em>Example:</em></p>

<p><em>B<sub>0</sub>: 1 as you can only have one partition of zero element set</em>
<em>B<sub>1</sub>: 1 as you can only have one partition of one element set {a}.</em>
<em>B<sub>2</sub>: 2</em></p>

<p>{a}{b}
   {a,b}</p>

<p><em>B<sub>3</sub>: 5</em></p>

<p>{a}{b}{c}
   {a,b}{c}
   {a}{b,c}
   {a,c}{b}
   {a,b,c}</p>

<p><em>B<sub>4</sub>: 15</em></p>

<p>{a}{b}{c}{d}
   {a,b,c,d}
   {a,b}{c,d}
   {a,c}{b,d}
   {a,d}{b,c}
   {a,b}{c}{d}
   {a,c}{b}{d}
   {a,d}{b}{c}
   {b,c}{a}{d}
   {b,d}{a}{c}
   {c,d}{a}{b}
   {a}{b,c,d}
   {b}{a,c,d}
   {c}{a,b,d}
   {d}{a,b,c}</p>

<p>The Bell numbers count the possible partitions of a set. There are various ways to compute the Bell numbers, but one of the mostly common ones is to construct the Bell triangle, which may be displayed as follows:</p>

<pre><code>                    1
                 1     2
              2     3     5
           5     7    10    15
       15    20    27    37    52
    52    67    87   114   151   203
203   255   322   409   523   674   877
</code></pre>

<p>The Bell triangle may be constructed by placing the number 1 in its first position. After that placement, the leftmost value in each row of the triangle is filled by copying the rightmost value in the previous row. The remaining positions in each row are filled by a rule very similar to that for Pascal&#8217;s triangle: they are the sum of the two values to the left and upper left of the position.</p>

<p>Thus, after the initial placement of the number 1 in the top row, it is the last position in its row and is copied to the leftmost position in the next row. The third value in the triangle, 2, is the sum of the two previous values above-left and left of it. As the last value in its row, the 2 is copied into the third row, and the process continues in the same way.</p>

<p>The first (and last) item on each row provides the individual Bell numbers:</p>

<pre><code>1 1 2 5 15 52 203 877 ...
</code></pre>

<p>There may be faster ways to compute Bell numbers, but since we are requested to compute only the first 10 Bell numbers, this will be amply sufficient.</p>

<h3>Bell Numbers in Raku</h3>

<p>We just build the Bell triangle and extract the Bell numbers from it:</p>

<pre><code>constant \MAX = 9;
my @tr;
@tr[0][0] = 1;
for 1..MAX -&gt; $row {
    @tr[$row][0] = @tr[$row - 1][*-1];
    for 1..$row -&gt; $i {
        @tr[$row][$i] = @tr[$row][$i-1] + @tr[$row - 1][$i-1];
    }
}
say join " ", map { @tr[$_][0] }, 0..@tr.end;
</code></pre>

<p>This script displays the first 10 Bell numbers:</p>

<pre><code>$ raku bell.raku
1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h3>Bell Numbers in Perl</h3>

<p>As in Raku, we build the Bell triangle and extract the Bell numbers:</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 9;

my @tr;
$tr[0][0] = 1;
for my $row (1..MAX) {
    $tr[$row][0] = $tr[$row - 1][-1];
    for my $i (1..$row) {
        $tr[$row][$i] = $tr[$row][$i-1] + $tr[$row - 1][$i-1];
    }
}
say join " ", map { $tr[$_][0] } 0..$#tr;
</code></pre>

<p>And we obtain the same output as in Raku:</p>

<pre><code>$ perl bell.pl
1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 25, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-04-13T17:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Avoid CPAN conflicts in your personal Perl modules</title>
    <link rel="alternate" href="https://dev.to/mjgardner/avoid-cpan-conflicts-in-your-personal-perl-modules-1m09" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>If you’re writing Perl that’s <strong>never going to the Comprehensive Perl Archive Network (<a href="https://www.cpan.org/">CPAN</a>)</strong>, <a href="https://pause.perl.org/pause/query?ACTION=pause_namingmodules#Local">heed this little-known note</a> on the Perl Authors Upload Server (<a href="https://pause.perl.org/">PAUSE</a>):</p>

<blockquote>
<p>By convention, the top-level <code>Local</code> namespace should never conflict with anything on CPAN. This allows you to be confident that the name you choose under <code>Local</code> isn’t going to conflict with anything from the outside world.</p>

<p><cite><a href="https://pause.perl.org/pause/query?ACTION=pause_namingmodules">PAUSE: On The Naming of Modules</a></cite></p>
</blockquote>

<p>So, <code>Local::MyModule</code>, <code>Local::App::MyApp</code>, whatever. This is also <strong>good advice for bespoke applications and libraries</strong> (the so-called <a href="http://www.modernperlbooks.com/mt/2009/02/the-darkpan-dependency-management-and-support-problem.html">DarkPAN</a>) you’re developing in-house. The last thing you need is to accidentally bring in (perhaps via dependencies) a module that gets loaded instead of yours.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/avoid-cpan-conflicts-in-your-personal-perl-modules-1m09</id>
    <published>2021-04-13T14:00:00Z</published>
    <updated>2021-04-13T14:00:00Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="darkpan"/>
    <category term="pause"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 2</title>
  <summary type="html"><![CDATA[<p>
The second part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-13T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-2"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-2</id>
  <content type="html"><![CDATA[<p>
The second part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Creating a Perl binding to a C library using FFI with Sawyer X</title>
  <summary type="html"><![CDATA[<p>
Unfortunately this session is now cancelled. I'll announce if an when we schedule it again.
<!--
In this live session <a href="https://github.com/xsawyerx">Sawyer X</a> and myself will be creating a Perl binding to a C library using FFI.
-->
<p>
]]></summary>
  <updated>2021-04-12T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-binding-to-c-library-using-ffi"/>  <id>https://perlmaven.com/perl-binding-to-c-library-using-ffi</id>
  <content type="html"><![CDATA[<p>
Unfortunately this session is now cancelled. I'll announce if an when we schedule it again.
<!--
In this live session <a href="https://github.com/xsawyerx">Sawyer X</a> and myself will be creating a Perl binding to a C library using FFI.
-->
<p>
]]></content>
</entry>
  <entry>
    <title>Big Dividends, Bigger Opportunity! Perl role with multiple location options</title>
    <link rel="alternate" href="https://job.perl.careers/ipi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an online financial services company, still rapidly expanding after 20 years of impressive growth. With a truly international presence, they’re well known globally in their niche. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/ipi</id>
    <published>2021-04-12T10:00:55Z</published>
    <updated>2021-04-12T10:00:55Z</updated>
  </entry>
  <entry>
    <title>Not All Heroes Wear Capes. Perl in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/2rv" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client takes the legwork out of the hunt for the best bargain, offering one of the largest product and price comparison platforms in German-speaking countries. Client is willing to consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/2rv</id>
    <published>2021-04-12T10:00:54Z</published>
    <updated>2021-04-12T10:00:54Z</updated>
  </entry>
  <entry>
    <title>Cooking Up Something Good. Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/s7p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With a knack for tailoring content to a variety of site aesthetics, our client sets a banquet of advertising delights for over 349 million consumers around the world. If your mouth is watering at the thought of joining this dynamic team and you’re a senior Perl programmer with a solid understanding of Go programming languages, they just might set a place for you at the table.</div>
    </content>
    <id>https://job.perl.careers/s7p</id>
    <published>2021-04-12T10:00:53Z</published>
    <updated>2021-04-12T10:00:53Z</updated>
  </entry>
  <entry>
    <title>A New Adventure is only a Click Away. Perl Developer role in London</title>
    <link rel="alternate" href="https://job.perl.careers/l3h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/l3h</id>
    <published>2021-04-12T10:00:52Z</published>
    <updated>2021-04-12T10:00:52Z</updated>
  </entry>
  <entry>
    <title>US Based, Modern Perl Developer Role - 100% remote!</title>
    <link rel="alternate" href="https://job.perl.careers/ovy" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is looking for a Perl programmer who wants to tame the job jungle for employers and employees through their candidate sourcing and data management products. The role is 100% remote within the United States.</div>
    </content>
    <id>https://job.perl.careers/ovy</id>
    <published>2021-04-12T10:00:51Z</published>
    <updated>2021-04-12T10:00:51Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-04-12T10:00:50Z</published>
    <updated>2021-04-12T10:00:50Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 6, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-04-12T10:00:49Z</published>
    <updated>2021-04-12T10:00:49Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-04-12T10:00:48Z</published>
    <updated>2021-04-12T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-04-12T10:00:47Z</published>
    <updated>2021-04-12T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 14, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-04-12T10:00:46Z</published>
    <updated>2021-04-12T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Boston Perl Mongers Online Meeting: Mojolicious 9 point Oh! (Joel Berger)</title>
    <link rel="alternate" href="https://boston.pm.org/bpm/Calendar" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Tuesday April 13th, 2021 07:00 PM Eastern Time (US and Canada)</div>
    </content>
    <id>https://boston.pm.org/bpm/Calendar</id>
    <published>2021-04-12T10:00:45Z</published>
    <updated>2021-04-12T10:00:45Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/04/cccxxxvi-6-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxxxv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-04-12T10:00:44Z</published>
    <updated>2021-04-12T10:00:44Z</updated>
  </entry>
  <entry>
    <title>You Need Measurable Goals</title>
    <link rel="alternate" href="https://dev.to/ovid/you-need-measurable-goals-47g9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not really Perl specific, but still true.</div>
    </content>
    <id>https://dev.to/ovid/you-need-measurable-goals-47g9</id>
    <published>2021-04-12T10:00:43Z</published>
    <updated>2021-04-12T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 107</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-107-hm2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon's List Methods task solution is very cool. Please check it out yourself.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-107-hm2</id>
    <published>2021-04-12T10:00:42Z</published>
    <updated>2021-04-12T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: Self-Descriptive Methods</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_107__Self_Descriptive_Methods.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger made the Self-Descriptive numbers task so easy to follow and understand. Thanks for sharing.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_107__Self_Descriptive_Methods.html</id>
    <published>2021-04-12T10:00:41Z</published>
    <updated>2021-04-12T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: copying myself</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/04/08/PerlWeeklyChallenge107.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca used Raku's Meta Object Class to solve the List Methods task.</div>
    </content>
    <id>https://fluca1978.github.io/2021/04/08/PerlWeeklyChallenge107.html</id>
    <published>2021-04-12T10:00:40Z</published>
    <updated>2021-04-12T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/04/05/PWC107/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis presented us with two versions of the Self-Descriptive numbers task solutions. Cool interpretation.</div>
    </content>
    <id>https://wlmb.github.io/2021/04/05/PWC107/</id>
    <published>2021-04-12T10:00:39Z</published>
    <updated>2021-04-12T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: Self-Descripting Numbers and List Methods</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-107-self-descripting-numbers-and-list-methods.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent presented a complete solution for the Self-descriptive numbers task, you don't want to miss out.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-107-self-descripting-numbers-and-list-methods.html</id>
    <published>2021-04-12T10:00:38Z</published>
    <updated>2021-04-12T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107</title>
    <link rel="alternate" href="https://github.com/drbaggy/perlweeklychallenge-club/blob/master/challenge-107/james-smith/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James is becoming the master of one-liners now. I really enjoyed his List Methods solution.</div>
    </content>
    <id>https://github.com/drbaggy/perlweeklychallenge-club/blob/master/challenge-107/james-smith/README.md</id>
    <published>2021-04-12T10:00:37Z</published>
    <updated>2021-04-12T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 107</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_107.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jaldhar shared an efficient Raku solution to the Self-Descriptive numbers task.</div>
    </content>
    <id>https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_107.html</id>
    <published>2021-04-12T10:00:36Z</published>
    <updated>2021-04-12T10:00:36Z</updated>
  </entry>
  <entry>
    <title>PWC107 - List Methods</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/08/pwc107-list-methods/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's fun story around the task is very creative. You don't want to miss it either.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/08/pwc107-list-methods/</id>
    <published>2021-04-12T10:00:35Z</published>
    <updated>2021-04-12T10:00:35Z</updated>
  </entry>
  <entry>
    <title>PWC107 - Self-descriptive Numbers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/07/pwc107-self-descriptive-numbers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio was curious to know the reason behind the weekly challenge. Well, the motto is to have fun and share knowledge. Thanks for your participation.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/07/pwc107-self-descriptive-numbers/</id>
    <published>2021-04-12T10:00:34Z</published>
    <updated>2021-04-12T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Self Description Redux: Perl Weekly Challenge 107</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/05/self-description-redux-perl-weekly-challenge-107.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You don't want to miss this improvised version of the Self-descriptive numbers task.</div>
    </content>
    <id>https://jacoby.github.io/2021/04/05/self-description-redux-perl-weekly-challenge-107.html</id>
    <published>2021-04-12T10:00:33Z</published>
    <updated>2021-04-12T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Self-Deceptive Methods with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/self-deceptive-methods.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne shared something new about Self-Descriptive Numbers. Thanks for sharing.</div>
    </content>
    <id>https://raku-musings.com/self-deceptive-methods.html</id>
    <published>2021-04-12T10:00:32Z</published>
    <updated>2021-04-12T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Static Analysis and Self Describing Numbers (now with Threads!): The Weekly Challenge 107</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/11" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam used threads to solve the Self-descriptive numbers task. Very Cool.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/11</id>
    <published>2021-04-12T10:00:31Z</published>
    <updated>2021-04-12T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: List Methods</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-107-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved Abigail's explanation about BEGIN. There is always something new to learn from Abigail's blog.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-107-2.html</id>
    <published>2021-04-12T10:00:30Z</published>
    <updated>2021-04-12T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: Self-descriptive Numbers</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-107-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail took pains to explain the maths behind the Self-descriptive numbers task. This is not for kids.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-107-1.html</id>
    <published>2021-04-12T10:00:29Z</published>
    <updated>2021-04-12T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-107/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron made the tasks look simple with the power of Raku. Incredible.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-107/</id>
    <published>2021-04-12T10:00:28Z</published>
    <updated>2021-04-12T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 105</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-105</id>
    <published>2021-04-12T10:00:27Z</published>
    <updated>2021-04-12T10:00:27Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 107</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-107" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by the Team PWC dealing with the "Self-descriptive Numbers" and "List Methods" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-107</id>
    <published>2021-04-12T10:00:26Z</published>
    <updated>2021-04-12T10:00:26Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 108</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Locate Memory" and "Bell Numbers". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-108</id>
    <published>2021-04-12T10:00:25Z</published>
    <updated>2021-04-12T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Community Leaders Meeting March 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/community-leaders-march-2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/community-leaders-march-2021</id>
    <published>2021-04-12T10:00:24Z</published>
    <updated>2021-04-12T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Grant Proposals: March 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposals_march_2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">There were no grant proposals submitted for March, but TPF accepts grant proposals all year round.</div>
    </content>
    <id>https://news.perlfoundation.org/post/grant_proposals_march_2021</id>
    <published>2021-04-12T10:00:23Z</published>
    <updated>2021-04-12T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 5</title>
    <link rel="alternate" href="https://perlmaven.com/exploring-bdd-in-perl-5" type="text/html"/>
    <id>https://perlmaven.com/exploring-bdd-in-perl-5</id>
    <published>2021-04-12T10:00:22Z</published>
    <updated>2021-04-12T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Automation with Rex - part 3</title>
    <link rel="alternate" href="https://code-maven.com/rex-automation-3" type="text/html"/>
    <id>https://code-maven.com/rex-automation-3</id>
    <published>2021-04-12T10:00:21Z</published>
    <updated>2021-04-12T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - par 2</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-2" type="text/html"/>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-2</id>
    <published>2021-04-12T10:00:20Z</published>
    <updated>2021-04-12T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Calendar of live events</title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <id>https://code-maven.com/live</id>
    <published>2021-04-12T10:00:19Z</published>
    <updated>2021-04-12T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Creating a Perl binding to a C library using FFI with Sawyer X</title>
    <link rel="alternate" href="https://perlmaven.com/perl-binding-to-c-library-using-ffi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Next week</div>
    </content>
    <id>https://perlmaven.com/perl-binding-to-c-library-using-ffi</id>
    <published>2021-04-12T10:00:18Z</published>
    <updated>2021-04-12T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Moving from CGI to PSGI and Starman</title>
    <link rel="alternate" href="https://perlmaven.com/from-cgi-to-psgi-and-starman" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A full example of a simple CGI script rewritten to be a PSGI script that can be deployed both as CGI - for backward compatibility, and using Starman. The article contains the Rexfile to deploy the whole thing including Apache on an Ubuntu based server.</div>
    </content>
    <id>https://perlmaven.com/from-cgi-to-psgi-and-starman</id>
    <published>2021-04-12T10:00:17Z</published>
    <updated>2021-04-12T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Data visualization: Using amCharts with Perl and Mojo</title>
    <link rel="alternate" href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff" type="text/html"/>
    <id>https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff</id>
    <published>2021-04-12T10:00:16Z</published>
    <updated>2021-04-12T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Proxying web feeds with Dancer2 </title>
    <link rel="alternate" href="https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave has been working on a new version of his personal web site that forced him to explore various web technologies.</div>
    </content>
    <id>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</id>
    <published>2021-04-12T10:00:15Z</published>
    <updated>2021-04-12T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Counter with Dancer using in-memory SQLite database</title>
    <link rel="alternate" href="https://perlmaven.com/counter-with-dancer-using-in-memory-sqlite-database" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An example trying to show how to use an in-memory SQLite database with Dancer. I wrote this in response to a query by someone, but I am not sure there is any good reason to do anything like this in a real application.</div>
    </content>
    <id>https://perlmaven.com/counter-with-dancer-using-in-memory-sqlite-database</id>
    <published>2021-04-12T10:00:14Z</published>
    <updated>2021-04-12T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl One-liner: countdown on the command line</title>
    <link rel="alternate" href="https://perlmaven.com/oneliner-countdown-on-the-command-line" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I think is the first time I have created an animated gif recording my terminal. Nice.</div>
    </content>
    <id>https://perlmaven.com/oneliner-countdown-on-the-command-line</id>
    <published>2021-04-12T10:00:13Z</published>
    <updated>2021-04-12T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Test code which is using fork</title>
    <link rel="alternate" href="https://perlmaven.com/test-code-which-is-forking" type="text/html"/>
    <id>https://perlmaven.com/test-code-which-is-forking</id>
    <published>2021-04-12T10:00:12Z</published>
    <updated>2021-04-12T10:00:12Z</updated>
  </entry>
  <entry>
    <title>The attraction of Test::Fatal in Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/the-attraction-of-test-fatal-in-perl-16mi" type="text/html"/>
    <id>https://dev.to/mjgardner/the-attraction-of-test-fatal-in-perl-16mi</id>
    <published>2021-04-12T10:00:11Z</published>
    <updated>2021-04-12T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Regression Testing Table Data with Spreadsheet::Compare </title>
    <link rel="alternate" href="https://dev.to/tomk3003/regression-testing-table-data-with-spreadsheet-compare-34g6" type="text/html"/>
    <id>https://dev.to/tomk3003/regression-testing-table-data-with-spreadsheet-compare-34g6</id>
    <published>2021-04-12T10:00:10Z</published>
    <updated>2021-04-12T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Release 1.53 of perl-workflow, a minor feature release</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-53-of-perl-workflow-a-minor-feature-release-2eok" type="text/html"/>
    <id>https://dev.to/jonasbn/release-1-53-of-perl-workflow-a-minor-feature-release-2eok</id>
    <published>2021-04-12T10:00:09Z</published>
    <updated>2021-04-12T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Releases of Perl Distributions Crypt::OpenSSL::PKCS12 and Crypt::OpenSSL::X509</title>
    <link rel="alternate" href="https://dev.to/jonasbn/releases-of-perl-distributions-crypt-openssl-pkcs12-and-crypt-openssl-x509-3947" type="text/html"/>
    <id>https://dev.to/jonasbn/releases-of-perl-distributions-crypt-openssl-pkcs12-and-crypt-openssl-x509-3947</id>
    <published>2021-04-12T10:00:08Z</published>
    <updated>2021-04-12T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Attribute::Handlers to wrap a function</title>
    <link rel="alternate" href="https://perlmaven.com/attribute-handlers" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark Gardner pointed to the around modifiers of <a href="https://metacpan.org/pod/Moo#around">Moo</a> and <a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/MethodModifiers.pod#Around-modifiers">Moose</a> as simpler alternatives.</div>
    </content>
    <id>https://perlmaven.com/attribute-handlers</id>
    <published>2021-04-12T10:00:07Z</published>
    <updated>2021-04-12T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Readonly::Tiny</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/09/readonly-tiny/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Readonly::Tiny is better than constant.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/09/readonly-tiny/</id>
    <published>2021-04-12T10:00:06Z</published>
    <updated>2021-04-12T10:00:06Z</updated>
  </entry>
  <entry>
    <title>.env - the dot env application configuration file</title>
    <link rel="alternate" href="https://perlmaven.com/dot-env" type="text/html"/>
    <id>https://perlmaven.com/dot-env</id>
    <published>2021-04-12T10:00:05Z</published>
    <updated>2021-04-12T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Fatpacking fatpack</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/06/fatpacking-fatpack/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Fatpack makes it easy to create a single-file distribution from your perl-only application. So how can you distribute Fatpack itself as a Fatpack?</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/06/fatpacking-fatpack/</id>
    <published>2021-04-12T10:00:04Z</published>
    <updated>2021-04-12T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Tenjin templating system</title>
    <link rel="alternate" href="https://perlmaven.com/tenjin" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of my clients is using this module, so I thought I would try it to see how it is being used.</div>
    </content>
    <id>https://perlmaven.com/tenjin</id>
    <published>2021-04-12T10:00:03Z</published>
    <updated>2021-04-12T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Rediscovering IPC::Exe</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/05/rediscovering-ipc-exe/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/05/rediscovering-ipc-exe/</id>
    <published>2021-04-12T10:00:02Z</published>
    <updated>2021-04-12T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Sawyer is stepping down from PSC and Core</title>
    <link rel="alternate" href="https://perl.topicbox.com/groups/perl-core/T7a4f1bf9e069641f-Mebbcc218eb006f0da34c7a41" type="text/html"/>
    <id>https://perl.topicbox.com/groups/perl-core/T7a4f1bf9e069641f-Mebbcc218eb006f0da34c7a41</id>
    <published>2021-04-12T10:00:01Z</published>
    <updated>2021-04-12T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#507 - Live events</title>
    <link rel="alternate" href="http://perlweekly.com/archive/507.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Sorry for sending out this edition later than usual, I have been super busy with various video recordings. Primarily the <a href="https://code-maven.com/live">live events</a> I have been doing lately. I think they work quite well.</p>
<p>I am also glad that there are a number of <a href="https://perlweekly.com/events.html">Perl Monger meetings</a> you can attend on-line. It is just a matter of allocating the time.</p>
<p>Because I am late with the newsletter the email from Sawyer X in which he writes about his resignation from PSC and Core found its way to my inbox and into the newsletter as well. Surprising.</p>
<p>Well, Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/507.html</id>
    <published>2021-04-12T10:00:00Z</published>
    <updated>2021-04-12T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 1</title>
  <summary type="html"><![CDATA[<p>
This is the first part of the <a href="/course-management-app-in-mojolicious">Course Management Application in Mojolicious</a> project with  <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-12T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-1"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-1</id>
  <content type="html"><![CDATA[<p>
This is the first part of the <a href="/course-management-app-in-mojolicious">Course Management Application in Mojolicious</a> project with  <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Community Leaders Meeting March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/community-leaders-march-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-12:/post/community-leaders-march-2021</id>
  <published>2021-04-12T04:53:42</published>
  <updated>2021-04-12T04:53:42</updated>
  <summary>
  <![CDATA[
     The Community Leaders meeting in March was another busy one with wide and varied discussion points. Detailed meeting notes are shared here. The next meeting will be April 19. Attendees Board: Stuart Mackintosh, Makoto Nozaki, Dave Rolsky, Rik Signes Leaders: Daniel Sockwell, Nige Hamilton, Andrew Solomon, Todd Rinaldo, Sawyer X, Alex Beamish Admin: Nic Evans Main session Sponsorship Alex Beamish Can do watermarks for sponsors at the conference Will share 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Community Leaders meeting in March was another busy one with wide and varied discussion points. Detailed meeting notes are shared here. The next meeting will be April 19.</p>

<h2>Attendees</h2>

<ul>
<li>Board: Stuart Mackintosh, Makoto Nozaki, Dave Rolsky, Rik Signes</li>
<li>Leaders: Daniel Sockwell, Nige Hamilton, Andrew Solomon, Todd Rinaldo, Sawyer X, Alex Beamish</li>
<li>Admin: Nic Evans</li>
</ul>

<h2>Main session</h2>

<h3>Sponsorship - Alex Beamish</h3>

<ul>
<li>Can do watermarks for sponsors at the conference</li>
<li>Will share the letter shortly - want to update it so it has a link to donate right now - hyperlink</li>
<li>Suggestion was made to add a 'donate now' button was made</li>
<li>Apparently going to be virtual Raku conference in Europe in May - what consequences would this have on our sponsorship planning</li>
<li>There is an idea for feature earmarks for specific improvements to language </li>
<li>Also challenges of dealing with many European countries - easier when you are in the country both culturally and from language persective</li>
</ul>

<h3>TPRCiC21 - Todd Rinaldo</h3>

<ul>
<li>Slight movement of event days
<ul>
<li>Converted to Tue-Thu (June 8-10) instead of Wed-Fri</li>
<li>BOF events will be encouraged Monday and Friday around the event</li>
</ul></li>
<li>CFP coming this weekend</li>
<li>Panel: we will discuss the format</li>
<li>BOF - Panels broke barriers - could label alternatively but format worked last time - will plan again. Need time to talk about what people want to talk about</li>
<li>Need a plan for communication during the conference - Slack? Discourse? Decision to be made - add to agenda a few months from now.</li>
<li>Next planning meeting March 30 18:00 UTC</li>
</ul>

<h3>Newcomers survey - Andrew Solomon</h3>

<ul>
<li>Over 500 responses - some clear ideas on what they want. </li>
<li>Nic to support final article production and publish on TPF site</li>
<li>Dave - we need to get more people to apply for grants on particular issues - we need to be more aggressive in promoting grant - blogging</li>
<li>Sawyer X - I am on grants committee - feel a little more pessimistic - important need to delineate from general end user/use case to work that needs to be done in entire stream to get that done. We need to try to define a very clear project brief - what will be achieved with the grant</li>
<li>ACTION: Grants committee conversation around micro-grants for analysis to make it easier to attract grantees</li>
</ul>

<h3>Infrastructure - Rik</h3>

<p>Had a call last week 
 - shut down indexing of cpan mirrors
 - been looking at what we should / shouldn't take on
 - Looking at hosting
 - Big conversation around dromedary
 - building a win32 testing machine
 - looking at getting something to replace TPF website and blog - hand over to Jason Crome - what to shut down Weebly
 - Nige - Raku website - can we share tech with Rik?
 - Daniel - still in early stages - not many choices - need DBA established - should coordinate with Perl</p>

<h3>Perl - Sawyer X</h3>

<ul>
<li>Steering committee meeting regularly - weekly - analysing state of Perl, language and perception </li>
<li>We've mapped enough of what we care about to manage</li>
<li>We definitely want to modernise the language - from inside out - want to flesh it out without people having to dig into it.</li>
<li>Goal we have - to share a doc - allows us to use 7 as a stepping stone to bring people into what will happen in 8 - 7 will not break anything</li>
<li>Goal is to have limited effect on 8 </li>
<li>Sharing doc with core to have discussion - if they sign off we will send to P5P</li>
</ul>

<h3>Raku - Daniel Sockwell</h3>

<ul>
<li>Speed improvements of the language</li>
<li>Significant progress on new dispatch mechanism and Raku AST - biggest change to Raku compiler</li>
<li>In broader community a lot of discussion in upgrading documentation website and framework we use for documenting use manuals.</li>
<li>We have seen a use release a flightcheck module for editors supporting in Emacs for Raku</li>
<li>Github has added syntax for a file extension</li>
<li>Raku has a dev room at a Spanish event in June (similar to FOSDEM)</li>
<li>Governance - we're becoming increasingly well organised and circulating our minutes. In process of trying to do comms work using Raku brand rather than Perl 6</li>
<li>Now have an official community wide approval for DBA - The Raku Foundation (http://raku.foundation)</li>
<li>Want to coordinate with infrastructure team https://github.com/tpf/iwg-public</li>
<li>Formal request made ref DBA</li>
<li>Raku conference plan http://conf.raku.org. I haven't been involved yet. Am planning to attend the next meeting for conference in cloud and hope to be involved to work things out to ensure both conferences are a success</li>
<li>Nige: Is it correct there is a community code of conduct
<ul>
<li>Daniel: yes plus an incident response guide. Still have some work to do to empower our CAT team. Inspired by TPF code of conduct amongst others. Would like to see code of conduct moved up agenda in terms of importance
<ul>
<li>SJM: Needs ownership - would be a good time to review it now. Asked if Nige willing to lead?</li>
<li>Nige - yes, can work with the CAT team - would like to work with Samantha McVey and Daniel Sockwell</li>
</ul></li>
</ul></li>
</ul>

<h3>Legal - Nige</h3>

<ul>
<li>In US Raku trademark approved - going into opposition period - closes 6 April 2021. Not expecting opposition</li>
<li>In EU - declined application - say it describes pottery (vs software) 
<ul>
<li>We need to prove we have a distinctive mark with Raku in relation to software - Nige may need to work with Daniel over coming weeks - need to respond by April 15th or application will fail.</li>
<li>Need to share evidence that Raku software is 'a thing.</li>
<li>Cost now involved - 570euros to put reply in 370euros to get evidence together</li>
</ul></li>
</ul>

<h3>Europe - relationship with TPF: sponsorship / conferences - Stuart Mackintosh</h3>

<ul>
<li>Not clear in Europe the role of TPF, visibility across geographical areas, conferences, sponsorship.</li>
<li>Challenge of how sponsorship money is spent to do a specific conference - need to think about how we can get offerings right. </li>
<li>Interested in ideas for something that is sustainable for us and our community.</li>
</ul>

<h3>Marketing - Nic</h3>

<ul>
<li>A lot of deficit we have is ref brand and marketing - need marketing to progress</li>
<li>Nic and Jason to update website</li>
<li>Jason reviewing web management/ build solutions</li>
<li>Daniel - we need some more recent videos up on the website</li>
<li>Nige - a little deflated ref the branding discussions - but very keen to see Perl and Raku flourish - should get an email list together to market to people directly interested in perl.</li>
<li>SJM - Nige's principles really good - we need to get the marketing and brand conversation going. </li>
<li>Nige - we may need a consultancy to help</li>
<li>SJM- yes - we have them there and waiting - just need a brief from the marketing committee</li>
</ul>

<h3>Perl application - Stuart</h3>

<ul>
<li>Need people to think about what other areas Perl and Raku are built into</li>
<li>What have people put Perl to do.</li>
</ul>

<h3>Grants - Jason</h3>

<ul>
<li>March Call for Grants opens next week (probably Sunday)</li>
<li>No other new or old business to discuss</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Calculating EV battery charge pricing with Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/itcharlie/2021/04/calculating-ev-battery-charge-with-perl.html"/>
    <id>tag:blogs.perl.org,2021:/users/itcharlie//1220.10177</id>
    <published>2021-04-12T01:09:48Z</published>
    <updated>2021-04-12T03:28:03Z</updated>
    <author>
        <name>Charlie Gonzalez</name>
        
    </author>
    <category term="ev" label="EV" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/itcharlie/">
        <![CDATA[<p>Presently I have great interest in &#8220;EVs&#8221; Electric Vehicles but I haven&#8217;t seen any data on how much it would cost to charge an electric vehicle from 0 % to 100 % battery charge at home in NYC ( So I wrote a Perl script to do just that ) but before we dig in into it I explain a few things about Electric Vehicles.</p>

<p>Electric Vehicles will have a battery capacity that is represented by  kilowatt-hour units or kWh for short. </p>

<p>An EV&#8217;s driving range is represented in miles units ( In the US ) and the average mileage is determined by the EPA battery range rating ( the bigger the battery capacity usually means the more driving range you will have in a car ) after conducting a few tests ( so in reality your mileage will vary ).</p>

<p>Electric vehicles have an onboard charger which determines its charging rate in Kilowatt per Hour and it varies by car makers. Most EV car owners will install a Level 2 charger that is usually capable of charging cars up to 7.2 kWH rate using 220 volt electric circuit with 32 amps of power ( but there are chargers that can go at a higher rate ). </p>

<p>Ok now that I explained a few things lets dig into the data used to make my script.</p>

<p>I checked my electric bill and found that my electricity rate in NYC is $0.13 cents per kWh.</p>

<p>For comparison I phoned a friend in Florida to get electricity rates where he lives which is $ 0.07 cents per kWh. ( Almost half of NY rate ) </p>

<p>I took as an example this car a <a href="https://electrek.co/2020/11/10/tesla-model-3-82-kwh-battery-pack-new-cells/">2021 Tesla Model 3 Long Range </a>with a battery capacity of 82kWh. It has an EPA mileage of 353 miles.</p>

<pre><code>
#### Tesla Model 3 
#
say "Tesla Model 3 2021 Long Range: 82kwh battery pack";
say "All Electric range: 353 miles";
my $tesla_total_price = 82 * .13 ;
my $tesla_total_price_fl = 82 * .07 ;
my $tesla_charge_time = 82 / 7.2;  # 7.2 is the onboard charger rate ( it can also be 3.3 kwh  rate )  
my $tesla_miles_per_kWh = 353 / 82;

say "NYC Full charge price: \$ " .  sprintf("%.2f" , $tesla_total_price);
say "FL Full charge price: \$ " .  sprintf("%.2f" , $tesla_total_price_fl);
say "Time to charge: " . sprintf("%.2f" , $tesla_charge_time) . " hours";
say "Miles per kWh : " . sprintf("%.2f" , $tesla_miles_per_kWh) . " miles";

print "\n";
</code></pre>

which will output the following:
<pre>
Tesla Model 3 2021 Long Range: 82kwh battery pack
All Electric range: 353 miles
NYC Full charge price: $ 10.66
FL Full charge price: $ 5.74
Time to charge: 11.39 hours
Miles per kWh : 4.30 miles
</pre>

<p>$10.66 dollars for a 353 miles in New York City driving is pretty sweet deal!</p>

<p>I looked into a few other cars and started to copy and paste code which resulted in this script:
<a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/ev_charge_price_calculator.pl">https://github.com/itcharlie/ev-calc-pricing/blob/main/ev<em>charge</em>price_calculator.pl
</a></p>

<p>and of course there is more than one way to do it so I rewrote the script with a Hash of EV cars:
<a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/rewrite_ev_charge_price_calculator.pl">https://github.com/itcharlie/ev-calc-pricing/blob/main/rewrite<em>ev</em>charge<em>price</em>calculator.pl
</a></p>

<pre><code>

#!/usr/bin/perl
use strict;
use warnings;

use Data::Dumper;
use feature 'say';


my %cars;

$cars{'EV'}->{'KIA'}->{'NIRO'} = { 'year' => 2020 , 'battery_size' => 64, 'onboard_charger_rate' => 7.2 , 'aer' => 239 };
$cars{'EV'}->{'TESLA'}->{'MODEL 3'} = { 'year' => 2021 , 'battery_size' => 82, 'onboard_charger_rate' => 7.2 , 'aer' => 353 };
$cars{'EV'}->{'CHEVY'}->{'BOLT'} = { 'year' => 2021 , 'battery_size' => 60, 'onboard_charger_rate' => 7.2 , 'aer' => 259 };

my %electric_rate;

$electric_rate{'NY'} = '0.13';
$electric_rate{'FL'} = '0.07';

foreach my $ev_brand ( keys %{$cars{'EV'}} ) {

    print "-" x 50;

    foreach my $model ( keys %{$cars{'EV'}->{$ev_brand}} )  {
        print "\n";
        say "$ev_brand  $model $cars{'EV'}->{$ev_brand}->{$model}->{'year'}";
        say "All electric range: $cars{'EV'}->{$ev_brand}->{$model}->{'aer'} miles";
        my $charge_time = $cars{'EV'}->{$ev_brand}->{$model}->{'battery_size'}  / $cars{'EV'}->{$ev_brand}->{$model}->{'onboard_charger_rate'} ; 
        my $miles_per_kWh =  $cars{'EV'}->{$ev_brand}->{$model}->{'aer'}   /  $cars{'EV'}->{$ev_brand}->{$model}->{'battery_size'}  ;
        say "Time to charge: " . sprintf("%.2f" , $charge_time ) . " hours";
        say "Miles per kWh : " . sprintf("%.2f" , $miles_per_kWh) . " miles";
        print "\n";

        foreach my $state ( keys %electric_rate )  {
           my $total_price = $cars{'EV'}->{$ev_brand}->{$model}->{'battery_size'}  * $electric_rate{$state} ;
           say "$state state 0-100% battery charge price: \$ " .  sprintf("%.2f" , $total_price);
        }
    }
}
</code> </pre>

<p>Thank you for your time and hope you enjoyed this post!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>In defence of OOP</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2021/03/in-defence-of-oop.html"/>
    <id>tag:blogs.perl.org,2021:/users/lichtkind//275.10158</id>
    <published>2021-03-28T01:40:08Z</published>
    <updated>2021-04-11T23:11:10Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="OOP" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>During the last years it became fashionable to rag on object oriented programming and a decade ago I would join the choir. Hack, when I started with Perl I despised the bloat and inefficiency of many corporate smelling *coughjava* systems and preached the light weight and foreward thinking way that real hackers travel. In this miniseries I want to write why I changed my tune [part one], the best way (IMO) to use OOP [part two] and why inheritance (incl. roles and templates) and delegation or not helpful features (in contrast to polymorphism) [part three]. Maybe there will be more  about rating Perl OO features and modules.</p>]]>
        <![CDATA[<p>Objects are a tool to create abstraction layer - to do anything. It's easy to get overwhelmed by possibilities or run with preconceived ideas. And the larger the system, the harder it is to make wise choices. I think this is one reason why a lot of OO code sucks. The second is bad coding styles. It's not getting taught enough how to find the right abstractions and how to ease the use by proper naming. The third reason is the introduction and teaching of contra-productive features like inheritance and even worse, multiple inheritance.</p>

<p>So why even bother? To make my point lets unwind history a little. Because back in the days a similar discussion ensued about subroutines, which are also a tool to hide complexity behind a meaningful names. </p>

<p>register_customer( $paul ) is much nicer to our intuitive mind than GOTO 230. It frees up mental resources and makes programming easier. And yes there are 0.2% of algorithms that can be written clearer with goto's (inside a subroutine). Were talking here about API design.</p>

<p>The main point is that we are sealing a sub as one unit to be called or not. Rather than jumping with GOTO into the middle of a sub you insert an additional IF statement inside the sub, to have the option to skip a few lines. Old school programmers may yell at you for wasting 5 or 20 bytes. But you gained the peace knowing the sub always starts at line one so when you approach line 20 you know the data is checked and sanitized so only errors might happen you did not thought about yet. If you jump to line 20 of the sub  with bad data it might be go well for a while and when things go down its hard to find out why. Having a regulated control flow means also have well defined data, which is the next big win using a sub. </p>

<p>And coincidental but not identical with sub : scopes. Create local variables inside a sub to prevent name collisions with other vars with same name and therefore  spooky actions at distance. Its a whole class of problems you instantly can stop to worry and it has no down sides, since you don't want to use the local variables anywhere else anyway. (I only miss the feature that functions can't access anything but their args).</p>

<p>To summarize: scopes - good, routine syntax - helpful and already it is as much about the (regulated state of) data than flow control.<br />
 <br />
Once you get a lot of subs, you prevent name collisions with name spaces (packages), that also give you order so that each sub is in the right place in the hierarchy. But when the namespaces get nested and names becoming longer you start to whish for classes, so you can call the method directly on the object - but were not there yet. Also, attribute data is sanitized once, when coming via a setter into the object and can be used over and over without any second check. So you can pass the object into a sub and data can be used without check, which makes for more efficient code (huh, efficient and oop in same sentence?). This advantage would vanish if you could reach into object internals, when not having no real encapsulation like in vanilla p5 - but still this is not my main two points.</p>

<p>With the ability to capsule data you can guarantee to oblige to contracts, since no-one else touched the data than the little code you have inside your small class.  Most importantly - strict abstraction layer walls will let you know if your abstraction layers are appropriate (if there is no need to violate them or if your classes or methods get to big). These are clear signs that code has to be refactored. And if you have too many classes - it is a sign you don't have enough high order classes. OOP can be used in a very functional manner which is often less painful (in larger projects) than being strictly functional and fighting with the harsh rules of monads all the time. But how exactly do that will be content of the next part ....</p>]]>
    </content>
</entry>
  <entry>
    <title>Static Analysis and Self Describing Numbers (now with Threads!): The Weekly Challenge 107</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/11#pwc107" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to generate self-descriptive numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread; 
use boolean;
use constant SDN_COUNT =&gt; 3;
use constant THREAD_COUNT =&gt; 4;
use constant RANGE_SIZE =&gt; 10_000;

sub self_describing{
    my($i) = @_;
    my @digits = split(//, $i);
    for my $x (0 .. @digits - 1){
        my $count = 0;
        for my $j (0 .. @digits - 1){
            $count++ if($digits[$j] == $x);
            return false if($count &gt; $digits[$x]);
        }
        return false if($count != $digits[$x]);
    }
    return true;
}

sub self_describing_number{
    my($start, $end) = @_;  
    my @r = (); 
    for(my $i = $start; $i &lt; $end; $i++){
        push @r, [length($i), $i] if(self_describing($i));  
    }   
    return \@r;  
}

MAIN:{
    my @threads; 
    my $count = 0; 
    my $lower = 1; 
    my $upper = RANGE_SIZE; 
    do{
        for(0..(THREAD_COUNT - 1)){  
            my $t = Thread-&gt;new(\&amp;self_describing_number, ($lower, $upper));
            push @threads, $t;  
            $lower = $upper + 1;  
            $upper = $lower +  RANGE_SIZE;  
        }  
        foreach my $t (@threads){  
            my $sdns = $t-&gt;join();                 
            foreach my $sdn (@{$sdns}){ 
                print "Base " . $sdn-&gt;[0] . ":" .  $sdn-&gt;[1] . "\n" if $count &lt; SDN_COUNT; 
                $count++;  
            }  
        }   
        @threads = ();   
    } while($count &lt; SDN_COUNT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Base 4:1210
Base 4:2020 
Base 5:21200
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 1 this week is repeated from Challenge 043. In order to provide something fresh for the same problem I modified the previous code to be multi-threaded.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to list methods of a package/class.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub analyze{
    my($file) = @_;
    my @subs;
    my @uses; 
    my @subroutines;
    my $subs = `perlanalyst $file --analysis Sub`;
    $subs =~ s/$file://;
    @subs = split(/\n/, $subs);   
    my $uses = `perlanalyst $file --analysis Use`;
    $uses =~ s/$file://;
    @uses = split(/\n/, $uses);   
    for my $s (@subs){
        $s =~ s/\s+//;
        my @fields = split(/:/, $s); 
        push @subroutines, $fields[1] if(length($s) &gt; 0); 
    }
    push @subroutines, "BEGIN" if(@uses); 
    return @subroutines; 
}

MAIN:{
    my $FILE = $ARGV[0];
    my @subroutines = analyze($FILE);
    print join("\n", sort {$a cmp $b} @subroutines) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl perl/Calc.pm 
BEGIN
DESTROY
add
div
mul
new
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Getting a list of methods can &lt;em&gt;mostly&lt;/em&gt; be done via just some plain analysis of the code. Rather than re-invent the wheel I am using a module, Perl::Analysis::Static, to do that for me. This is a pretty neat tool but has been left in an alpha state. The most stable way to use it is via the command line instead of its incomplete API. In this code I call the &lt;code&gt;perlanalyst&lt;/code&gt; command and then parse the output.&lt;/p&gt;
&lt;p&gt;If given a &lt;code&gt;BEGIN&lt;/code&gt; block or if &lt;code&gt;use&lt;/code&gt;-ing a module Perl will execute a &lt;code&gt;BEGIN&lt;/code&gt; at compile time. &lt;em&gt;I would argue that this is out of scope for this challenge.&lt;/em&gt; However, as given in the problem statement we are expected to catch this it seems. I do this by inspecting the &lt;code&gt;perlanalyst&lt;/code&gt; output for &lt;code&gt;use&lt;/code&gt; lines. I could have done a few other things as well but decided not to do more with this since it seems like a funny requirement anyway!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/"&gt;Challenge 107&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;Challenge 043&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/release/GGOLDBACH/Perl-Analysis-Static-0.003-TRIAL/lib/Perl/Analysis/Static.pm"&gt;Perl::Analysis::Static&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc107</id>
    <published>2021-04-11T17:51:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9050496775605220184</id>
    <published>2021-04-10T21:04:00.001+02:00</published>
    <updated>2021-04-10T21:04:50.134+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxvi) 6 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ZMUGHAL/Devel-IPerl-0.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::IPerl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl language kernel for Jupyter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.010&lt;/strong&gt; on 2021-04-05&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.009 was 3 years, 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.07&lt;/strong&gt; on 2021-04-06&lt;/li&gt;  &lt;li&gt;Votes: 167&lt;/li&gt;  &lt;li&gt;Previous version: 6.06 was 2 years, 10 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2021-04-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 1 month, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.16&lt;/strong&gt; on 2021-04-09&lt;/li&gt;  &lt;li&gt;Votes: 450&lt;/li&gt;  &lt;li&gt;Previous version: 9.14 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0937' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0937&lt;/strong&gt; on 2021-04-06&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0936 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARKOV/XML-Compile-SOAP-3.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::Compile::SOAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SOAP version 1.1 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.27&lt;/strong&gt; on 2021-04-07&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 3.26 was 1 year, 4 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9050496775605220184/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvi-6-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9050496775605220184"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9050496775605220184"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvi-6-cpan-great-modules-released.html" title="(cccxxxvi) 6 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2596567439737174563</id>
    <published>2021-04-10T21:02:00.000+02:00</published>
    <updated>2021-04-10T21:02:00.273+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/10 19:01:29 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::ProgressBar" target="_blank"&gt;CGI::ProgressBar&lt;/a&gt; - CGI.pm sub-class with a progress bar object&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crayon" target="_blank"&gt;Crayon&lt;/a&gt; - dedupe, minify and extend CSS&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::BlackBox" target="_blank"&gt;DBIx::BlackBox&lt;/a&gt; - Access database with stored procedures only&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::LsColor" target="_blank"&gt;File::LsColor&lt;/a&gt; - Colorize input filenames like ls(1)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph::D3" target="_blank"&gt;Graph::D3&lt;/a&gt; - Create ref/json to show node-edge graph with D3.js &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::CairoSVG" target="_blank"&gt;Image::CairoSVG&lt;/a&gt; - render SVG into a Cairo surface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BaseArith" target="_blank"&gt;Math::BaseArith&lt;/a&gt; - mixed-base number arithmetic (like APL encode/decode)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DBIC" target="_blank"&gt;Mojolicious::Plugin::DBIC&lt;/a&gt; - Mojolicious â¥ DBIx::Class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenMP::Environment" target="_blank"&gt;OpenMP::Environment&lt;/a&gt; - Perl extension managing OpenMP variables in %ENV within a script.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Hooks::EndOfScope" target="_blank"&gt;B::Hooks::EndOfScope&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BerkeleyDB" target="_blank"&gt;BerkeleyDB&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone" target="_blank"&gt;Clone&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Plugin::Sysdeps" target="_blank"&gt;CPAN::Plugin::Sysdeps&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=123)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=250)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graphics::ColorNames::WWW" target="_blank"&gt;Graphics::ColorNames::WWW&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::DOM58" target="_blank"&gt;Mojo::DOM58&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=66)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=450)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=282)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=316)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::CIDR::Lite" target="_blank"&gt;Net::CIDR::Lite&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Graylog::Client" target="_blank"&gt;Net::Graylog::Client&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN" target="_blank"&gt;OrePAN&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Graphics::Gnuplot" target="_blank"&gt;PDL::Graphics::Gnuplot&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::Regexp" target="_blank"&gt;PPIx::Regexp&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Exporter::ForMethods::0.100053" target="_blank"&gt;Sub::Exporter::ForMethods::0.100053&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Meta" target="_blank"&gt;Sub::Meta&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Dancer2" target="_blank"&gt;Task::Dancer2&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Moment" target="_blank"&gt;Time::Moment&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UUID::Tiny" target="_blank"&gt;UUID::Tiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2596567439737174563/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2596567439737174563"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2596567439737174563"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxii-metacpan-weekly-report.html" title="(cdlxii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3469499256658703378</id>
    <published>2021-04-10T20:56:00.001+02:00</published>
    <updated>2021-04-10T20:56:12.932+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-04-10 18:54:30 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66972234" target="_blank"&gt;Single quotes in a variable name in Perl?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67017687" target="_blank"&gt;How to make multiple variables readonly in Perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67027668" target="_blank"&gt;Matching a string with Regexp Grammars&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66938318" target="_blank"&gt;Prepend a String to a Regex Match Using Bash&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66987432" target="_blank"&gt;How merge multiple files using Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67003619" target="_blank"&gt;Mac M1 Homebrew Perl Carton Net::SSLeay is loading libcrypto in an unsafe way&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67025234" target="_blank"&gt;Makefile.PL meta.json prereqs for OS so module won&amp;amp;'t be installed on Windows&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67023179" target="_blank"&gt;perl sort function efficiency&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67023848" target="_blank"&gt;Sum of Primes always returns 0&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67024033" target="_blank"&gt;My Perl can't find local::lib after upgrading from Perl 5.14 to 5.28&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3469499256658703378/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3469499256658703378"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3469499256658703378"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxv-stackoverflow-perl-report.html" title="(cdlxxxv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Buffering or autoflush?</title>
  <summary type="html"><![CDATA[<p>
By default every filehandle opened for writing is buffered. We can turn of buffering (or in other words turn on autoflush)
by calling the <b>autoflush</b> method of the filehandle.
<p>
Alternatively we can use <b>select</b> and set <a href="/outout-autoflush">$|, $OUTPUT_AUTOFLUSH to 1</a> to enable autoflush.
<p>
The recommended solution is the one in this article as it makes the code more readable.
<p>
]]></summary>
  <updated>2021-04-10T11:35:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/autoflush"/>  <id>https://perlmaven.com/autoflush</id>
  <content type="html"><![CDATA[<p>
By default every filehandle opened for writing is buffered. We can turn of buffering (or in other words turn on autoflush)
by calling the <b>autoflush</b> method of the filehandle.
<p>
Alternatively we can use <b>select</b> and set <a href="/outout-autoflush">$|, $OUTPUT_AUTOFLUSH to 1</a> to enable autoflush.
<p>
The recommended solution is the one in this article as it makes the code more readable.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 107: Self-Descripting Numbers and List Methods</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-107-self-descripting-numbers-and-list-methods.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10170</id>
    <published>2021-04-06T02:59:07Z</published>
    <updated>2021-04-06T03:04:57Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 107 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (April 11, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Self-Descriptive Numbers</h2>

<p><em>Write a script to display the first three self-descriptive numbers. As per <a href="https://en.wikipedia.org/wiki/Self-descriptive_number">Wikipedia</a>, the definition of Self-descriptive Number is:</em></p>

<blockquote>
  <p><em>In mathematics, a self-descriptive number is an integer m that in a given base b is b digits long in which each digit d at position n (the most significant digit being at position 0 and the least significant at position b−1) counts how many instances of digit n are in m.</em></p>
</blockquote>

<p><em>For example, 1210 is a four-digit self-descriptive number:</em></p>

<pre><code>position 0 has value 1 i.e. there is only one 0 in the number
position 1 has value 2 i.e. there are two 1 in the number
position 2 has value 1 i.e. there is only one 2 in the number
position 3 has value 0 i.e. there is no 3 in the number
</code></pre>

<p>The process of computing self-descriptive numbers can become very slow as the base becomes large. Although this is not really necessary for computing only the first 3 self-descriptive numbers, we can include some simple performance optimization. The Wikipedia article states that a self-descriptive number in base <code>b</code> must be a multiple of that base (or equivalently, that the last digit of the self-descriptive number must be 0). So we can skip the check for any integer whose representation in a given base doesn&#8217;t end with 0. Also, all self-descriptive numbers have digit sums equal to their base. We can filter out those that don&#8217;t match these two conditions.</p>

<p>Some further optimizations (when the base is larger than or equal to 7) are possible as described in my <a href="http://blogs.perl.org/users/laurent_r/2020/01/perl-weekly-challenge-43-olympic-rings-and-self-descripting-numbers.html">blog post</a> of Jan. 19, 2020 on the same subject. They are not needed here.</p>

<h3>Self-Descriptive Numbers in Raku</h3>

<p>We iterate on bases from 2 to infinity (and exit the loop when we reach the target number of self-descriptive numbers). Then, for a given base, we loop over all integers having a number of digits equal to the base. For each such integer, we filter out those not ending with 0 or whose digit sum is not equal to the base. For the integers not filtered out, we check that each digit d at position n counts how many instances of digit n are in such integer.</p>

<pre><code>use v6;
constant MAX = 4;

my $*count = 0;
for 2..Inf -&gt; $base {
    check-self-desc($base);
    last if $*count &gt;= MAX;
}   

sub check-self-desc (Int $base) {
    my $found = False;
    for $base ** ($base -1) .. $base ** $base -1 -&gt; $num {
        my $num-in-b = $num.base($base);
        next unless $num-in-b ~~ /0$/;
        my @digits = $num-in-b.comb;
        next if $base != [+] @digits;
        my $success = True;
        for 0..$base - 1 -&gt; $rank {
            if (+ $num-in-b.indices($rank) != @digits[$rank]) {
                $success = False;
                last;
            }
        }
        if $success {
            say "Number in base $base: $num-in-b; decimal: $num";
            $*count++;
            $found = True;
            return if $*count &gt;= MAX;
        }   
    }
    say "No self-descriptive number for base $base" unless $found;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
</code></pre>

<p>I wanted to investigate a bit more and decided to change <code>MAX</code> to 4 and to measure the process duration:</p>

<pre><code>$ time raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
No self-descriptive number for base 6
Number in base 7: 3211000; decimal: 389305

real    0m5,684s
user    0m0,031s
sys     0m0,030s
</code></pre>

<p>So it takes about 5.7 seconds. If we comment out the two performance optimizations described above, we get the following result:</p>

<pre><code>$ time raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
No self-descriptive number for base 6
Number in base 7: 3211000; decimal: 389305

real    0m17,857s
user    0m0,015s
sys     0m0,031s
</code></pre>

<p>So, about 17.9 seconds without the performance enhancement, the optimizations are worth the effort.</p>

<h3>Self-Descriptive Numbers in Perl</h3>

<p>This is a port of the above Raku program to Perl. Since Perl doesn&#8217;t have any built-in function to convert numbers to a given base, we have to implement our own <code>to_base_b</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature qw /say/;
use constant DIGITS =&gt; ('0'..'9', 'A'..'Z');
use constant MAX =&gt; 3;
my $count = 0;

sub to_base_b { # Converts decimal number to base b string
    my($dec, $base) = @_;
    my @digits;
    while ($dec) {
        unshift @digits, (DIGITS)[$dec % $base];
        $dec = int($dec/$base);
    }
    return join "", @digits;
}

sub check_self_desc {
    my $base = shift;
    for my $num ($base ** ($base -1) .. $base ** $base -1) {
        my $num_in_b = to_base_b ($num, $base);
        next unless $num_in_b =~ /0$/;
        my @digits = split //, $num_in_b;
        my $sum = 0;
        $sum += $_ for split //, $num_in_b;
        next if $sum != $base;
        my $success = 1;
        for my $rank (0..$base - 1) {
            my $nb_digits = $digits[$rank];
            my $num_occ = $num_in_b =~ s/$rank/$rank/g;
            if ($num_occ != $nb_digits) {
                $success = 0;
                last;
            }
        }
        if ($success) {
            say "Number in base $base: $num_in_b; decimal: $num" ;
            $count++;
            return if $count &gt;= MAX;
        }
    }
}

for my $base (2..10) {
    check_self_desc($base);
    last if $count &gt;= MAX;
}
</code></pre>

<p>Output:</p>

<pre><code>$ perl self-descr.pl
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
</code></pre>

<h2>Task 2: List Methods</h2>

<p><em>Write a script to list methods of a package/class.</em></p>

<p><em>Example</em></p>

<pre><code>package Calc;

use strict;
use warnings;

sub new { bless {}, shift; }
sub add { }
sub mul { }
sub div { }

1;
</code></pre>

<p><em>Output:</em></p>

<pre><code>BEGIN
mul
div
new
add
</code></pre>

<p>The task is not entirely clear. Maybe we are asked to load a class and introspect the available methods, but I&#8217;ll consider it is more probable that we&#8217;re supposed to parse the file and list the methods defined in it. I&#8217;ll also suppose that we should look for methods in the programming language in which they are defined; in other words, we&#8217;ll be looking for Raku methods in Raku and Perl methods in Perl, although we could obviously perform cross-language searches (for example, use Raku to look for methods in a Perl module, or vice-versa).</p>

<h3>List Methods in Raku</h3>

<p>Raku methods are defined with the <code>method</code> keyword. Raku identifiers can contain alphanumeric characters, plus <code>-</code> dashes and <code>'</code> single quotes. In addition we should avoid finding the <code>method</code> keyword somewhere in a comment. We&#8217;ll be looking for the <code>method</code> keyword as the first thing in a code line (except for possible space characters) and capture the identifier coming immediately after.</p>

<pre><code>use v6;

sub MAIN (Str $file-name) {
     for $file-name.IO.lines -&gt; $line {
        say ~$0 if $line ~~ /^\s* method \s+ (&lt;[-'\w]&gt;+)/;
    }
}
</code></pre>

<p>Example output:</p>

<pre><code>$ ./raku find-methods.raku linked_list.raku
make-array
gist
</code></pre>

<h3>List Methods in Perl</h3>

<p>In Perl, methods use the <code>sub</code> keyword.</p>

<pre><code>use strict;
use warnings;
use feature qw /say/;

while (&lt;&gt;) {
    say $1 if /^\s*sub\s+(\w+)/;
}
</code></pre>

<p>Output:</p>

<pre><code>$ echo 'package Calc;
&gt;
&gt; use strict;
&gt; use warnings;
&gt;
&gt; sub new { bless {}, shift; }
&gt; sub add { }
&gt; sub mul { }
&gt;
sub div { }
&gt;
&gt; 1; '  |  perl  find-methods.pl
new
add
mul
div
</code></pre>

<p>Of course, this is so simple that a Perl one-liner would make sense:</p>

<pre><code>$ echo 'package Calc;
&gt;
&gt; use strict;
&gt; use warnings;
&gt;
&gt; sub new { bless {}, shift; }
&gt; sub add { }
&gt; sub mul { }
&gt; sub div { }
&gt;
&gt; 1;'  |  perl -nE 'say $1 if /^\s*sub\s+(\w+)/;'
new
add
mul
div
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 18, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Grant Proposals: March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_march_2021"/>
  <id>tag:news.perlfoundation.org,2021-04-05:/post/grant_proposals_march_2021</id>
  <published>2021-04-05T10:01:49</published>
  <updated>2021-04-05T10:01:49</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub max_difference_sorted{
    my(@sorted) = @_;
    return 0 if(@sorted == 1);
    my $x = $sorted[1] - $sorted[0];  
    my $y = max_difference_sorted(@sorted[1 .. @sorted - 1]);   
    return ($x &gt; $y)? $x: $y; 
}

sub max_difference{
    my (@numbers) = @_;
    return max_difference_sorted(
        sort { $a &lt;=&gt; $b } @numbers
    ); 
}

MAIN:{
    my (@N);
    @N = (2, 9, 3, 5);
    print max_difference(@N) . "\n"; 
    @N = (1, 3, 8, 2, 0); 
    print max_difference(@N) . "\n"; 
    @N = (5);
    print max_difference(@N) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
5
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I believe this code is straightforward enough! &lt;code&gt;max_difference&lt;/code&gt; performs the sort and &lt;code&gt;max_difference_sorted&lt;/code&gt; recursively finds the largest difference as required.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given numerator and denominator i.e. $N and $D. Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub nd2decimal{
    my($n, $d) = @_;
    my $max_repetend = $d - 1; 
    my $repeats = false; 
    my @factors = prime_factor($d);
    for my $factor (@factors){
        $repeats = true if($factor != 2 &amp;&amp; $factor != 5); 
    } 
    unless($repeats){ 
        return sprintf("%0.${max_repetend}g", $n / $d); 
    }
    else{
        my $x = divide($n, $d, [], []); 
        return $x; 
    }  
}

MAIN:{
    my($N, $D);
    ($N, $D) = (1, 3);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 2);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (5, 66);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 6);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 8);
    print nd2decimal($N, $D) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0.(3)
0.5
0.0(75)
0.1(6)
0.125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 2 is a bit trickier than the first part. The approach here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if it is a repeated decimal by checking if &lt;code&gt;$d&lt;/code&gt; has prime factors other than 2 or 5&lt;/li&gt;
&lt;li&gt;if it is not a repeated decimal then this is quick work, divide and display the solution&lt;/li&gt;
&lt;li&gt;in the case of repeated decimals we essentially implement grade school long division in the &lt;code&gt;divide&lt;/code&gt; function and keep track of remainders. When a remainder is repeated we know that we have found the cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some interesting theoretical properties to repeat decimals but none are particularly helpful in actually computing them. One observation is that the length of the cycle must be smaller than the value of the denominator, whence the use of &lt;code&gt;$d&lt;/code&gt; in the main loop in the &lt;code&gt;divide&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I’m re-using the same &lt;code&gt;prime_factors&lt;/code&gt; function that I used in &lt;a href="https://adamcrussell.livejournal.com/14043.html"&gt;Challenge 041&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Challenge 106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/RepeatingDecimal.html"&gt;Repeating Decimal&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc106</id>
    <published>2021-04-04T17:04:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Two Dist::Zilla questions (META.yml; user config)</title>
    <link href="http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html"/>
    <id>http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html</id>
    <updated>2021-04-03T20:22:49+00:00</updated>
    <category term="perl"/>
    <summary>During the great RT will be shutdown craze earlier this year, I updated my Dist::Zilla setup to use a custom author bundle (Dist::Zilla::PluginBundle::Author::DOMM) so I can unify my Dist::Zilla ...</summary>
    <content type="html">&lt;p&gt;During the great &lt;strong&gt;RT will be shutdown&lt;/strong&gt; craze earlier this year, I updated my &lt;a href="http://dzil.org/"&gt;Dist::Zilla&lt;/a&gt; setup to use a custom author bundle (&lt;a href="https://metacpan.org/pod/Dist::Zilla::PluginBundle::Author::DOMM"&gt;Dist::Zilla::PluginBundle::Author::DOMM&lt;/a&gt;) so I can unify my Dist::Zilla config in one place (instead of copying &lt;code&gt;dist.ini&lt;/code&gt; from project to project, adding &amp;amp; modifying it from time to time, but never backporting improvements to older projects).&lt;/p&gt;

&lt;p&gt;Two of my decisions might have been not too smart (as indicated by &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/7"&gt;various&lt;/a&gt; &lt;a href="https://github.com/domm/Web-Request-Role-JWT/pull/1"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/10"&gt;requests&lt;/a&gt;), so I'm now looking for feedback...&lt;/p&gt;

&lt;h4&gt;&lt;span class="caps"&gt;META.&lt;/span&gt;yml vs &lt;span class="caps"&gt;META.&lt;/span&gt;json?&lt;/h4&gt;

&lt;p&gt;I stopped generating &lt;code&gt;META.yml&lt;/code&gt; files and now only generate &lt;code&gt;META.json&lt;/code&gt;. As far as I can tell, the contents of those two files is identical, so I think it should be enought to include the data once per dist (and I prefer &lt;span class="caps"&gt;JSON &lt;/span&gt;to &lt;span class="caps"&gt;YAML...&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Of course, &lt;span class="caps"&gt;CPANTS &lt;/span&gt;now &lt;a href="https://cpants.cpanauthors.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.009"&gt;complains&lt;/a&gt; about the missing &lt;code&gt;META.yml&lt;/code&gt;. (Which is of course ironic, because it was me who first implemented this &lt;span class="caps"&gt;CPANTS &lt;/span&gt;metric...)&lt;/p&gt;

&lt;p&gt;Maybe some other (old?) tools still need &lt;code&gt;META.yml&lt;/code&gt;? So should I again produce both &lt;code&gt;META.yml&lt;/code&gt; and &lt;code&gt;META.json&lt;/code&gt;?&lt;/p&gt;

&lt;h4&gt;Dist::Zilla user config?&lt;/h4&gt;

&lt;p&gt;During my deep dive into Dist::Zilla plungins and author bundles, I learned that Dist::Zilla looks for per-user configuration in &lt;code&gt;~/.dzil/config.ini&lt;/code&gt;. So I moved some general information (my name &amp;amp; email, default license) from all my &lt;code&gt;dist.ini&lt;/code&gt; files into this central config file.&lt;/p&gt;

&lt;p&gt;But it seems that this makes contributing to my dists even harder, as the &lt;code&gt;dist.ini&lt;/code&gt; file included in the dist now is invalid. Contributors will get a (helpful) error message when running &lt;code&gt;dzil build&lt;/code&gt;, but this is yet another hurdle for potential contributors. I've already got two pull requests to "fix" this.&lt;/p&gt;

&lt;p&gt;On the one hand I would prefer to keep the global config file, so I can easily change data. On the other hand I could just as well run a small command to change whatever value I might want to change on multiple files (using this hot new tool called "Perl", which makes mangling text in multiple files very easy) and thus make contributions easier.&lt;/p&gt;

&lt;p&gt;How are other &lt;span class="caps"&gt;CPAN &lt;/span&gt;authors handling this?&lt;/p&gt;

&lt;h4&gt;Or is it all Dist::Zilla's fault?&lt;/h4&gt;

&lt;p&gt;Some people (like brian d foy in this &lt;a href="https://www.reddit.com/r/perl/comments/mgw033/distar_a_cpan_distribution_author_tool/"&gt;thread&lt;/a&gt; about &lt;a href="https://github.com/p5sagit/Distar"&gt;Distar&lt;/a&gt;, a simpler authoring tool (but it works with ExtUtils::MakeMaker, which is a module I don't want to touch..)) argue that Dist::Zilla is too complex and make contributing very hard (because potential contributors now need to install a lot of Dist::Zilla plugins).&lt;/p&gt;

&lt;p&gt;But I actually like Dist::Zilla a lot (esp after finally coming up with a PluginBundle that fits my workflow). So I will keep using Dist::Zilla, but would really appreciate any feedback on my two questions (&lt;code&gt;META.yml&lt;/code&gt; and user config).&lt;/p&gt;

&lt;p&gt;You can either enter a comment below (if my homegrown comments system works..), or via &lt;a href="https://www.reddit.com/r/perl/comments/mjeej7/two_distzilla_questions_metayml_user_config/"&gt;reddit&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update: user config vs github&lt;/h4&gt;

&lt;p&gt;After applying &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/12"&gt;another patch&lt;/a&gt; supplied by &lt;a href="https://github.com/paultcochrane"&gt;Paul Cochrane&lt;/a&gt; that adds some github testing hooks, it seems to be clear that depending on the user config is a bad idea. Surprisingly, github will &lt;span class="caps"&gt;NOT &lt;/span&gt;set up a &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; so it can "contribute" to my dist (by running it's test suite), see eg &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/runs/2260939037?check_suite_focus=true"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I guess I will stop using the global config file...&lt;/p&gt;</content>
    <category term="CPAN"/>
    <category term="Dist::Zilla"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3613177878497701470</id>
    <published>2021-04-03T15:29:00.000+02:00</published>
    <updated>2021-04-03T15:29:08.708+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxv) 12 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.071' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.071&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.070 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.08&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.07 was 7 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005004&lt;/strong&gt; on 2021-03-29&lt;/li&gt;  &lt;li&gt;Votes: 281&lt;/li&gt;  &lt;li&gt;Previous version: 2.005003 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2015&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 316&lt;/li&gt;  &lt;li&gt;Previous version: 2.2014 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.30&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.29 was 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.034&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.032 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20210402' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20210402&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20210111 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.56&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 151&lt;/li&gt;  &lt;li&gt;Previous version: 1.55 was 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0936' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0936&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0933 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.2.0&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.1.0 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JDB/Win32-OLE-0.1713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Win32::OLE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OLE Automation extensions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1713&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.1712 was 6 years, 10 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.66&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3613177878497701470/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html" title="(cccxxxv) 12 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5658972421208024952</id>
    <published>2021-04-03T15:27:00.001+02:00</published>
    <updated>2021-04-03T15:27:12.018+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxi) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 65&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/03 13:26:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::mokupona" target="_blank"&gt;App::mokupona&lt;/a&gt; - a feed aggregator for Gopher, Gemini, RSS and Atom&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Combine::Keys" target="_blank"&gt;Combine::Keys&lt;/a&gt; - keys on multiple hash references&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::NFSLock" target="_blank"&gt;File::NFSLock&lt;/a&gt; - perl module to do NFS (or not) locking&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::Checkers" target="_blank"&gt;Games::Checkers&lt;/a&gt; - Play the Checkers games&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::JPEG::Size" target="_blank"&gt;Image::JPEG::Size&lt;/a&gt; - find the size of JPEG images&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; - Validate data against a schema, minimally&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Language::FormulaEngine" target="_blank"&gt;Language::FormulaEngine&lt;/a&gt; - Evaluator for spreadsheet-style function expressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Private::Attribute" target="_blank"&gt;MooX::Private::Attribute&lt;/a&gt; - private attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; - add defer block syntax to perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Sparkline" target="_blank"&gt;Text::Sparkline&lt;/a&gt; - Creates text-based sparklines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Request::Role::JWT" target="_blank"&gt;Web::Request::Role::JWT&lt;/a&gt; - Accessors for JSON Web Token (JWT) stored in psgix&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Android::Build" target="_blank"&gt;Android::Build&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::TimeTracker" target="_blank"&gt;App::TimeTracker&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=146)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Augeas" target="_blank"&gt;Config::Augeas&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Plugin::Sysdeps" target="_blank"&gt;CPAN::Plugin::Sysdeps&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::ECDSA" target="_blank"&gt;Crypt::OpenSSL::ECDSA&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=275)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::regenerate" target="_blank"&gt;Dist::Zilla::App::Command::regenerate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Finance::Quote" target="_blank"&gt;Finance::Quote&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::FormBuilder" target="_blank"&gt;HTML::FormBuilder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer" target="_blank"&gt;Importer&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lucy" target="_blank"&gt;Lucy&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Random::Secure" target="_blank"&gt;Math::Random::Secure&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Release" target="_blank"&gt;Module::Release&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=449)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=281)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Singleton" target="_blank"&gt;MooseX::Singleton&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=373)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Protocol::DBus" target="_blank"&gt;Protocol::DBus&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Grammars" target="_blank"&gt;Regexp::Grammars&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Tools" target="_blank"&gt;Search::Tools&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Beautify" target="_blank"&gt;SQL::Beautify&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Diff" target="_blank"&gt;String::Diff&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Binmode" target="_blank"&gt;Sys::Binmode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Telugu::TGC" target="_blank"&gt;Telugu::TGC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Table" target="_blank"&gt;Term::Table&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Termbox" target="_blank"&gt;Termbox&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TermReadKey" target="_blank"&gt;TermReadKey&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Local" target="_blank"&gt;Time::Local&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/urpmi" target="_blank"&gt;urpmi&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ZMQ::LibZMQ3" target="_blank"&gt;ZMQ::LibZMQ3&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5658972421208024952/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html" title="(cdlxi) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>TPRCIC 2021 - Call for papers</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic2021callforpapers"/>
  <id>tag:news.perlfoundation.org,2021-04-03:/post/tprcic2021callforpapers</id>
  <published>2021-04-03T03:15:07</published>
  <updated>2021-04-03T03:15:07</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference in the Cloud 2021 celebrates all things Perl and Raku from 8-10 June with group meetings on the Monday and Friday each side of the main event. We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the Cloud 2021</a> celebrates all things Perl and Raku from 8-10 June with group meetings (BOFs) on the Monday and Friday each side of the main event.</p>

<p>We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of general interest to Perl and Raku programmers. Take a look at the talk schedules from <a href="https://perlconference.us/tprc-2021-cloud/past-conferences/">previous years</a> to help with additional ideas.</p>

<p>The call for papers is open NOW. You can submit your ideas for a talk to http://perlconference.us/speakers. Deadline for submissions is 18:00 UTC April 30, 2021. <strong>All speakers receive a FREE event pass.</strong></p>

<p>We will be accepting proposals for the following session types:</p>

<ul>
<li>Standard Talks (50 minutes)</li>
<li>Short Talks (20 minutes)</li>
<li>Lightning Talks (5 minutes)</li>
</ul>

<p>Follow the conference on <a href="https://twitter.com/PerlConferences">Twitter</a> and <a href="https://www.facebook.com/theperlconference/">FaceBook</a>, or <a href="https://perlconference.us/tprc-2021-cloud/keep-in-touch/">join our mailing list</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CONTRA/Acme-Automatix-0.01"&gt;Acme-Automatix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;The great new Acme::Automatix!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Frameworks-0.001"&gt;Acme-CPANModules-Frameworks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;List of frameworks on CPAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legodcsupervillains-0.02"&gt;Acme-MetaSyntactic-legodcsupervillains&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO DC Super Villains theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legotheincredibles-0.02"&gt;Acme-MetaSyntactic-legotheincredibles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO The Incredibles theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.16"&gt;Alien-uPB-Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.16&lt;/td&gt;
&lt;td&gt;build and find uPB (a.k.a. Unleaded)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-PerlNitpick-0.01"&gt;App-PerlNitpick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;change-suggester about insignificant details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-ThisDist-OnMetaCPAN-0.001"&gt;App-ThisDist-OnMetaCPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;this-dist-on-metacpan and some other CLIs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-dateseq-id-0.001"&gt;App-dateseq-id&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Generate a sequence of dates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WOLDRICH/App-knradio-0.044"&gt;App-knradio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.044&lt;/td&gt;
&lt;td&gt;interface for knradio, 92,2 FM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-depsort-0.001"&gt;App-lcpan-CmdBundle-depsort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;More lcpan subcommands related to sorting by dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Asm-C-20210328"&gt;Asm-C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210328&lt;/td&gt;
&lt;td&gt;Extract macro values and structure details from C programs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Boundary-0.01"&gt;Boundary&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare interface package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Complete-Finance-SE-IDX-0.001"&gt;Complete-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.001"&gt;Crypt-Passphrase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A module for managing passwords in a cryptographically agile manner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Argon2-0.001"&gt;Crypt-Passphrase-Argon2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;An Argon2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Bcrypt-0.001"&gt;Crypt-Passphrase-Bcrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A bcrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-PBKDF2-0.001"&gt;Crypt-Passphrase-PBKDF2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A PBKDF2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Scrypt-0.001"&gt;Crypt-Passphrase-Scrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A scrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Crypt-xxHash-0.01"&gt;Crypt-xxHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;xxHash implementation for Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Decl-Tok-0.01"&gt;Decl-Tok&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Given a line iterator, returns a token stream that tokenizes the lines as first-pass Decl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUCCHISK/Devel-PatchPerl-Plugin-Darwin-v0.1.0"&gt;Devel-PatchPerl-Plugin-Darwin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;patchperl plugin for darwin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/Devel-Util-0.80"&gt;Devel-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;a collection of general-utility development subroutines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LNATION/Game-HeroesVsAliens-0.01"&gt;Game-HeroesVsAliens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A tower defense game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AJNN/Geo-LibProj-FFI-0.01"&gt;Geo-LibProj-FFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Foreign function interface to PROJ coordinate transformation software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/Go-Tokenize-0.01"&gt;Go-Tokenize&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tokenize Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JBERGER/GuacLite-0.01"&gt;GuacLite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Toolkit for implementing a frontend server/client the Apache Guacamole system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RAJ/INI-Reader-Regexp-0.01"&gt;INI-Reader-Regexp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;INI Parser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-AIO-Promiser-0.01_01"&gt;IO-AIO-Promiser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01_01&lt;/td&gt;
&lt;td&gt;Promise interface around IO::AIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-FDSaver-0.01"&gt;IO-FDSaver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Save file descriptors from Perl&amp;acirc;&amp;#8364;&amp;#8482;s garbage collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JCRISTY/Image-Magick-6.9.12"&gt;Image-Magick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v6.9.12&lt;/td&gt;
&lt;td&gt;ImageMagick PERL Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Iterator-Records-Lines-0.01"&gt;Iterator-Records-Lines&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Provides simple record iterators for reading text line by line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DONGXU/JSON-JQ-0.01"&gt;JSON-JQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;jq (&lt;a href="https://stedolan.github.io/jq/" rel="nofollow"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) library binding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ETHER/JSON-Schema-Tiny-0.001"&gt;JSON-Schema-Tiny&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Validate data against a schema, minimally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOBYINK/LINQ-0.000_001"&gt;LINQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_001&lt;/td&gt;
&lt;td&gt;an interpretation of Microsoft&amp;#039;s Language Integrated Query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Linux-Sys-CPU-Affinity-0.01"&gt;Linux-Sys-CPU-Affinity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl XS extension for setupping CPU affinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/List-GroupingPriorityQueue-0.01"&gt;List-GroupingPriorityQueue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;priority queue with grouping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/List-Helpers-XS-0.01"&gt;List-Helpers-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension to provide some usefull functions with arrays&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TONKIN/Log-Any-Adapter-JSON-1.00"&gt;Log-Any-Adapter-JSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;One-line JSON logging of arbitrary structured data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Lyrics-Fetcher-LyricsOVH-0.01"&gt;Lyrics-Fetcher-LyricsOVH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Get song lyrics from api.lyrics.ovh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/MIME-DB-v1.46.0"&gt;MIME-DB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.46.0&lt;/td&gt;
&lt;td&gt;Media Type Database, a port of the mime-db JavaScript package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ZHMYLOVE/Math-LinearApprox-0.01"&gt;Math-LinearApprox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;fast linear approximation of 2D sequential points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PerlTrove-0.001"&gt;Module-Features-PerlTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Perl trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PythonTrove-0.001"&gt;Module-Features-PythonTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Python trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-FeaturesUtil-Check-0.001"&gt;Module-FeaturesUtil-Check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Check feature set specification and feature declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-0.008"&gt;Mojolicious-Plugin-Export&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;Export a Mojolicious website to static files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-Git-0.001"&gt;Mojolicious-Plugin-Export-Git&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export a Mojolicious site to a Git repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OETIKER/Mojolicious-Plugin-GSSAPI-0.1.0"&gt;Mojolicious-Plugin-GSSAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Provide Kerberos authentication for incomming https requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ABELTJE/MooX-Params-CompiledValidators-0.01"&gt;MooX-Params-CompiledValidators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A Moo::Role for using Params::ValidationCompiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/Music-RhythmSet-0.01"&gt;Music-RhythmSet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;sets of rhythms and various generation functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Nasm-X86-20210330"&gt;Nasm-X86&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210330&lt;/td&gt;
&lt;td&gt;Generate Nasm X86 code from Perl.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Maker-1.00"&gt;OPM-Maker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Module/App to build and test OPM packages for Znuny, OTOBO, ((OTRS)) Community edition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Validate-1.00"&gt;OPM-Validate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Validate .opm files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-EPPTCP-0.001"&gt;POE-Filter-EPPTCP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;EPP Frame parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-SimpleXML-1.000"&gt;POE-Filter-SimpleXML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;Simple XML parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Tar-0.001"&gt;Path-Tiny-Archive-Tar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Tar/untar add-on for file path utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/Paws-Credential-AssumeRoleWebIdentity-0.0.2"&gt;Paws-Credential-AssumeRoleWebIdentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Perinci-Sub-XCompletionBundle-Finance-SE-IDX-0.001"&gt;Perinci-Sub-XCompletionBundle-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to the Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Pinto-Remote-SelfContained-0.900"&gt;Pinto-Remote-SelfContained&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;interact with a remote Pinto repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RRA/Pod-Thread-2.00"&gt;Pod-Thread&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;Convert POD data to the HTML macro language thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-HelpDesk-0.01"&gt;RT-Extension-HelpDesk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-HelpDesk Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-TerminalTheme-0.01"&gt;RT-Extension-TerminalTheme&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-TerminalTheme Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Idrac4-v0.1.0"&gt;Rex-Interface-Shell-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Ilo-v0.1.0"&gt;Rex-Interface-Shell-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Idrac4-v0.1.0"&gt;Rex-Shell-Interface-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Ilo-v0.1.0"&gt;Rex-Shell-Interface-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OVID/Search-Typesense-0.01"&gt;Search-Typesense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl interface to Typesense search engine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/SmallRegistry-EPP-0.001-TRIAL"&gt;SmallRegistry-EPP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;SmallRegistry EPP Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOMK/Spreadsheet-Compare-0.10"&gt;Spreadsheet-Compare&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Module for comparing spreadsheet-like datasets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Sub-WrapInType-Attribute-0.01"&gt;Sub-WrapInType-Attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;attribute for Sub::WrapInType&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Defer-0.04"&gt;Syntax-Keyword-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;add defer block syntax to perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/Sys-Binmode-0.01"&gt;Sys-Binmode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Fix Perl&amp;acirc;&amp;#8364;&amp;#8482;s system call character encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Task-Lyrics-Fetcher-0.01"&gt;Task-Lyrics-Fetcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;install all known-to-work Lyrics::Fetcher fetchers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Test2-Tools-Process-0.05"&gt;Test2-Tools-Process&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Unit tests for code that calls exit, exec, system or qx()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PETDANCE/Text-Sparkline-v0.1.0"&gt;Text-Sparkline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Creates text-based sparklines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Text-Table-Tiny-_ModuleFeatures-0.001"&gt;Text-Table-Tiny-_ModuleFeatures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Features declaration for Text::Table::Tiny&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Text-TokenStream-0.01"&gt;Text-TokenStream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;lexer to break text up into user-defined tokens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/WWW-LinkRot-0.01"&gt;WWW-LinkRot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;check web page link rot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/WordList-ID-AnimalName-PERLANCAR-0.004"&gt;WordList-ID-AnimalName-PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;List of animals in Indonesian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/p5-Paws-Credential-Webidentity-0.0.1"&gt;p5-Paws-Credential-Webidentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;79&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;43&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Automatix CONTRA 0.01 The great new Acme::Automatix! Acme-CPANModules-Frameworks PERLANCAR 0.001 List of frameworks on CPAN Acme-MetaSyntactic-legodcsupervillains BINGOS 0.02 LEGO DC Super Villains theme Acme-MetaSyntactic-legotheincredibles BINGOS 0.02 LEGO The Incredibles theme Alien-uPB-Core MBARBON 0.16 build and find uPB (a.k.a. Unleaded) App-PerlNitpick GUGOD 0.01 change-suggester about insignificant details. App-ThisDist-OnMetaCPAN PERLANCAR 0.001 this-dist-on-metacpan and … <a href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1939</id>
    <published>2021-04-01T11:26:07Z</published>
    <updated>2021-04-01T11:26:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Interview: Trying to Catch Paul "LeoNerd" Evans</title>
    <link rel="alternate" href="https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.leonerd.org.uk/"&gt;Paul &amp;ldquo;LeoNerd&amp;rdquo; Evans&lt;/a&gt;&lt;/strong&gt; is a
&lt;a href="https://metacpan.org/author/PEVANS"&gt;CPAN author&lt;/a&gt;,
&lt;a href="https://leonerds-code.blogspot.com/"&gt;blogger&lt;/a&gt;,
and &lt;a href="https://github.com/leonerd"&gt;core Perl contributor&lt;/a&gt;. He introduced the
&lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;experimental &lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
in Perl 5.32 and the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax in an upcoming version.&lt;/p&gt;

&lt;h2 id="tell-me-a-little-about-yourself-and-your-background-whatever-you-feel-comfortable-sharing"&gt;Tell me a little about yourself and your background; whatever you feel comfortable sharing.&lt;/h2&gt;

&lt;p&gt;Lets see—I&amp;rsquo;m going to do this in reverse chronological order.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m a self-employed contractor, splitting my time between Perl and other computery things, and electronics. Most of the jobs I&amp;rsquo;ve had before I did that were based on Perl, with the minor exception of a little Internet startup company called &amp;ldquo;Google&amp;rdquo;—
maybe you&amp;rsquo;ve heard of them? Sadly they don&amp;rsquo;t do much Perl there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-did-you-first-get-into-programming-perl-and-then-later-hacking-on-perl-s-core"&gt;How did you first get into programming Perl, and then later hacking on Perl&amp;rsquo;s core?&lt;/h2&gt;

&lt;p&gt;I dabbled in a little amount of it at university, during my final year. When I ought to have been studying type systems and other academic stuff I found it much more interesting to be hacking on bits of C and Perl instead, much to the dismay of my supervisors. My first post-study job happened to be in Perl and I&amp;rsquo;ve just stuck with it ever since.&lt;/p&gt;

&lt;p&gt;The core hacking all came as a slow progression from writing Perl code, to writing modules, to the inevitable having to write bits of &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS code&lt;/a&gt; for some of those modules. The deeper you dive into that area the more you find you have to understand how the internals of the interpreter work. The largest amount of time I spent on that was probably while making the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; module—that has to have quite a tight in-depth integration with the interpreter core, in order to successfully suspend and resume running functions, which is the basis of how the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax all works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="you-first-uploaded-the-syntax-keyword-try-module-to-cpan-in-2016-and-at-the-time-there-were-and-are-still-a-number-of-other-modules-with-similar-functionality-you-compared-their-differences-in-the-syntax-keyword-try-documentation-but-were-there-any-particular-issues-that-inspired-you-to-contribute-another-module"&gt;You first uploaded the Syntax::Keyword::Try module to CPAN in 2016, and at the time there were (and are still) a number of other modules with similar functionality. You compared their differences in the Syntax::Keyword::Try documentation, but were there any particular issues that inspired you to contribute another module?&lt;/h2&gt;

&lt;p&gt;Two reasons. The first reason I wrote it just for myself, was a learning exercise to see if I could understand and use this new-fangled &amp;ldquo;&lt;a href="https://perldoc.perl.org/perlapi#wrap_keyword_plugin"&gt;custom keyword&lt;/a&gt;&amp;rdquo; mechanism that was recently added to Perl. Once I had a proof-of-concept working, it didn&amp;rsquo;t take me long to work out how to write it &amp;ldquo;correctly&amp;rdquo;—in the sense that the body of the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks were true blocks, and not closures-in-disguise like all of the pure Perl and even all of the custom syntax modules at the time were all doing. This meant it had a much ligher calling overhead, doesn&amp;rsquo;t interact with &lt;code&gt;@_&lt;/code&gt;, plays nicer with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;, and all sorts of other advantages. From there it didn&amp;rsquo;t take me too long before I had something that I felt had real technical advantages than anything else that came before, so I tried to encourage its use. &lt;a href="irc://irc.freenode.org/perl"&gt;Freenode&amp;rsquo;s #perl channel&lt;/a&gt; in particular were very instrumental in helping that effort, adopting it in their recommendations to new users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="recently-you-ve-spearheaded-adding-native-try-catch-syntax-to-native-perl-and-released-the-feature-compat-try-module-to-offer-the-same-syntax-for-earlier-versions-currently-the-former-is-enabled-by-a-feature-guard-do-you-anticipate-a-time-when-this-will-no-longer-be-the-case-would-that-cause-issues-with-code-that-uses-other-try-catch-syntax-modules"&gt;Recently you&amp;rsquo;ve spearheaded adding native try/catch syntax to native Perl, and released the Feature::Compat::Try module to offer the same syntax for earlier versions. Currently the former is enabled by a feature guard; do you anticipate a time when this will no longer be the case? Would that cause issues with code that uses other try/catch syntax modules?&lt;/h2&gt;

&lt;p&gt;I think it will be quite a while yet before we can see a Perl that would enable it &lt;em&gt;by default&lt;/em&gt;, but I hope very soon it will make its way into the numbered version bundles. That is, I hope that simply&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.36&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be enough to enable the &lt;code&gt;try&lt;/code&gt; syntax, and if and when such a time comes that we decide to bump the major version to 7, that will continue to hold—merely saying&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v7;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be sufficient to get that—along with all the other fancy fun things I hope to see by that time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-do-you-envision-syntax-keyword-try-s-role-going-forward-will-it-be-a-testbed-for-future-native-perl-exception-features"&gt;How do you envision Syntax::Keyword::Try&amp;rsquo;s role going forward? Will it be a testbed for future native Perl exception features?&lt;/h2&gt;

&lt;p&gt;It already is just that. There are more features in Syntax::Keyword::Try than the &amp;ldquo;minimal viable product&amp;rdquo; part that I ported to core in &lt;a href="https://github.com/Perl/perl5/releases/tag/v5.33.7"&gt;5.33&lt;/a&gt;. Two main things come to mind—the typed exception dispatch, and the &lt;code&gt;finally&lt;/code&gt; blocks. I&amp;rsquo;ve lately been looking at some &lt;code&gt;defer&lt;/code&gt; syntax for a more general-purpose version of &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question of how to handle typed dispatch is a more general one, which needs addressing in a wider language context—perhaps including considerations of signatures, &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt; syntax, variable or object slot type assertions, and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="what-s-next-for-you-aside-from-exceptions-in-perl-i-ve-been-reading-about-the-work-you-ve-been-doing-with-curtis-ovid-poe-on-and-your-object-pad-module-would-you-like-to-speak-on-that"&gt;What&amp;rsquo;s next for you aside from exceptions in Perl? I&amp;rsquo;ve been reading about the work you&amp;rsquo;ve been doing with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe on and your Object::Pad module—would you like to speak on that?&lt;/h2&gt;

&lt;p&gt;Yes, object systems seem to be of interest currently—so part of my thoughts are about &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt;. But I&amp;rsquo;m also working on a number of other things. &lt;code&gt;defer&lt;/code&gt; I already mentioned above. Additionally I have some thoughts in the direction of &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;, and a few other bits and pieces. These would mostly be done as CPAN modules at first to experiment with the ideas. I mentioned a lot of them in my recent &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;&amp;ldquo;Perl in 2025&amp;rdquo; talk at FOSDEM&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/</id>
    <published>2021-03-30T01:24:37Z</published>
    <updated>2021-03-30T01:24:37Z</updated>
  </entry>
  <entry>
  <title>Security Issues in Perl IP Address distros</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/security-issues-in-perl-ip-address-distros"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/security-issues-in-perl-ip-address-distros</id>
  <published>2021-03-29T20:51:04</published>
  <updated>2021-03-29T20:51:04</updated>
  <summary>
  <![CDATA[
     **TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.** If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on Dave Rolsky's personal blog. 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><strong>TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.</strong></p>

<p>If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on <a href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/">Dave Rolsky's personal blog</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Outreachy 2021 projects published</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreach-2021-projects"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/outreach-2021-projects</id>
  <published>2021-03-29T20:12:58</published>
  <updated>2021-03-29T20:12:58</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month to make contributions and create a final application. Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products Improve the Perl code quality of Open Food Facts These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. Additionally, Outreachy has one more Perl project sponsored by 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month (till April 30, 2021 at 4pm UTC) to make contributions and create a final application.</p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-ingredients-analysis-in-open-food-fact">Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products</a></li>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-perl-code-quality-of-open-food-facts">Improve the Perl code quality of Open Food Facts</a></li>
</ul>

<p>These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. </p>

<p>Additionally, Outreachy has one more Perl project sponsored by <a href="https://matrix.org/">Matrix</a>. </p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/matrix/#extend-and-improve-complement-our-end-to-end-test-">Extend and Improve Complement, our end-to-end test suite</a></li>
</ul>

<p>If you have any questions about the TPF-sponsored projects, feel free to contact Stéphane Gigandet (stephane@openfoodfacts.org) or Makoto Nozaki (makoto@perlfoundation.org).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
