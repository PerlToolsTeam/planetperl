<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-08-31T20:44:40Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-08-31T00:00:00Z</published>
    <updated>2022-08-31T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 180:  First Unique Character and Trim List</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-180-first-unique-character-and-trim-list.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10879</id>
    <published>2022-08-29T22:35:30Z</published>
    <updated>2022-08-29T22:37:12Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 180 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-180/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Sept. 4, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1:  First Unique Character</h2>

<p><em>You are given a string, <code>$s</code>.</em></p>

<p><em>Write a script to find out the first unique character in the given string and print its index (0-based).</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $s = "Perl Weekly Challenge"
Output: 0 as 'P' is the first unique character
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $s = "Long Live Perl"
Output: 1 as 'o' is the first unique character
</code></pre>

<h3>First Unique Character in Raku</h3>

<p>This is a straight-forward, no-frills solution. I thought that I could write a better (or, at least, simpler) solution using features such as <a href="https://modules.raku.org/dist/ArrayHash">ArrayHash</a> or <a href="https://raku.land/zef:lizmat/Hash::Ordered">Hash::Ordered</a>, but this did not seem to simplify the syntax. Similarly, I initially wanted to use the built-in <a href="https://docs.raku.org/routine/first">first</a> routine, but it only made things more complicated. So, I ended up with a plain-vanilla solution using a hash (the <code>%h</code> letter histogram) and an array (the <code>@let</code> array) in parallel, and a hand-made loop to look for the first unique letter. </p>

<pre><code>for "Perl Weekly Challenge", "Long Live Perl" -&gt; $test {
    my @let = $test.comb;
    my %h;      # histogram of letters
    %h{$_}++ for @let;
    say "$test: $_" and last if %h{@let[$_]} == 1 for 0..@let.end;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./first_unique.raku
Perl Weekly Challenge: 0
Long Live Perl: 1
</code></pre>

<h3>First Unique Character in Perl</h3>

<p>The good thing of having used a plain-vanilla solution in Raku is that it can be ported directly to Perl (and other languages) with only small changes. We&#8217;re using a hash (the <code>%h</code> letter histogram) and an array (the <code>@let</code> array) in parallel, and a hand-made loop to look for the first unique letter.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ("Perl Weekly Challenge", "Long Live Perl") {
    my @let = split //, $test;
    my %h;
    $h{$_}++ for @let;
    for my $i (0..$#let) {
        say "$test: $i" and last if $h{$let[$i]} == 1;
    }
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./first_unique.pl
Perl Weekly Challenge: 0
Long Live Perl: 1
</code></pre>

<h2>Task 2: Trim List</h2>

<p><em>You are given list of numbers, <code>@n</code> and an integer <code>$i</code>.</em></p>

<p><em>Write a script to trim the given list where element is less than or equal to the given integer.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @n = (1,4,2,3,5) and $i = 3
Output: (4,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @n = (9,0,6,2,3,8,5) and $i = 4
Output: (9,6,8,5)
</code></pre>

<p>This is quite easy using the built-in <code>grep</code> function in Raku and Perl (or <code>filter</code> in Python or Scala).</p>

<h3>Trim List in Raku</h3>

<p>Rather than filtering out items which are less than or equal to the input integer, we keep numbers that are larger than the input integer.</p>

<pre><code>for [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]] -&gt; $test {
    my $i = $test[0];
    my @nums = |$test[1];
    say "i = $i; nums = @nums[] =&gt; ", grep { $_ &gt; $i }, @nums;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./trim_list.raku
i = 3; nums = 1 4 2 3 5 =&gt; (4 5)
i = 4; nums = 9 0 6 2 3 8 5 =&gt; (9 6 8 5)
</code></pre>

<h3>Trim List in Perl</h3>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ( [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]] ) {
    my $i = $test-&gt;[0];
    my @nums = @{$test-&gt;[1]};
    say "i = $i, nums = @nums =&gt; ", join " ", grep $_ &gt; $i, @nums;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./trim_list.pl
i = 3, nums = 1 4 2 3 5 =&gt; 4 5
i = 4, nums = 9 0 6 2 3 8 5 =&gt; 9 6 8 5
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on September 11, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#579 - Looking for that motivation</title>
    <link rel="alternate" href="https://perlweekly.com/archive/579.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p><a href="https://perlweekly.com/archive/577.html">Last time</a> I mentioned the numbers I collect with the number of visitors to CPAN and I was wondering about the increased activity starting in August 2011. I got a few comments in email and some on <a href="https://www.reddit.com/r/perl/comments/wosxyi/perl_weekly_issue_577_optimism_and_numbers/">Reddit</a>.</p>
<p>Probably the best explanation is what I received from Neil Bowers:</p>
<p>Have a look at the <a href="https://neilb.org/2022/02/07/cpan-report-2022.html">CPAN report I did in February</a>. If you look at the new user signups, you'll see a jump in 2012, and also looking at that chart you'll see that 2012, 2013, and 2014 seem to buck a trend.</p>
<p>In 2012 Intermediate Perl was released, which told the reader to sign up for a PAUSE account and release a test module. If I remember right, brian d foy ran a tutorial at YAPC::NA the previous year, where he also got people to sign up (not sure if the tutorial was 2011 or 2012). We had the first CPAN Day in 2014, which also resulted in a big bump in CPAN releases. That may have helped 2014 stay up above the trend.</p>
<p>The question now, what could be a new motivation to increase activity and if there could be one that is sustainable?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/579.html</id>
    <published>2022-08-29T10:00:00Z</published>
    <updated>2022-08-29T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #173</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-173/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 173 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-173/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 179</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-179/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-179/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 180</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-180/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: First Unique Character 10. TASK #2: Trim List HEADLINES  Welcome to Week #180 of the weekly challenge.
Today, we are giving away Token #3 to Robert DiCicco for the book, Learning Perl Exercises by brian d foy. I will share the details with you in a separate email.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-180/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 179: Ordinal Numbers and Unicode Sparkline</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-179-ordinal-numbers-and-unicode-sparkline.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10877</id>
    <published>2022-08-24T21:56:35Z</published>
    <updated>2022-08-28T20:28:50Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 179 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-179/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 28, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Ordinal Number Spelling</h2>

<p><em>You are given a positive number, <code>$n</code>.</em></p>

<p><em>Write a script to spell the ordinal number.</em></p>

<p><em>For example,</em></p>

<pre><code>11 =&gt; eleventh
62 =&gt; sixty-second
99 =&gt; ninety-ninth
</code></pre>

<p>Hum, this task is not very interesting, since it has more to do with English than with computer science. I&#8217;m not going to enumerate dozens of numeral or ordinal English names. So, contrary to what I usually do, I&#8217;ll use an off-the-shelf module to complete this task.</p>

<h3>Ordinal Number Spelling in Raku</h3>

<p>Here, we use the <code>Lingua::EN::Numbers</code> Raku module:</p>

<pre><code>use Lingua::EN::Numbers;

for 11, 62, 99 -&gt; $num {
    say "$num =&gt; ", ordinal($num);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./ordinal_numbers.raku
11 =&gt; eleventh
62 =&gt; sixty-second
99 =&gt; ninety-ninth
</code></pre>

<h3>Ordinal Number Spelling in Perl</h3>

<p>The Perl module we&#8217;re going to use is also called <code>Lingua::EN::Numbers</code>, but it&#8217;s not the same package as the Raku module used above.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

use Lingua::EN::Numbers qw/num2en_ordinal/;

for my $num (11, 62, 99) {
    say "$num =&gt; ", ordinal($num);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./ordinal_numbers.pl
11 =&gt; eleventh
62 =&gt; sixty-second
99 =&gt; ninety-ninth
</code></pre>

<h2>Task 2: Unicode Sparkline</h2>

<p><em>You are given a list of positive numbers, <code>@n</code>.</em></p>

<p><em>Write a script to print sparkline in Unicode for the given list of numbers.</em></p>

<p>Here, I regret to have to say that my friend Mohammad has been a bit sloppy, since he did not explain anything about sparklines (I had never heard about sparklines before). A sparkline is a very small graph of successive values laid out horizontally where the height of the line is proportional to the values in succession. See this <a href="https://en.wikipedia.org/wiki/Sparkline">Wikipedia Page</a> for additional information.</p>

<p>The <a href="https://www.rosettacode.org/wiki/Sparkline_in_unicode">Rosetta Code Web site</a> provides additional information about Unicode sparklines:</p>

<blockquote>
  <p>Use the following series of Unicode characters to create a program that takes a series of numbers separated by one or more whitespace or comma characters and generates a sparkline-type bar graph of the values on a single line of output.</p>

<p>The eight characters: &#8216;▁▂▃▄▅▆▇█&#8217; (Unicode values U+2581 through U+2588). </p>
</blockquote>

<p>We have eight Unicode characters of growing size, so the problem essentially boils down to scaling the input sequence to eight steps.</p>

<h3>Unicode Sparkline in Raku</h3>

<pre><code>my @bars = map {.chr}, 0x2581 .. 0x2588;
for &lt; 2 4 6 8 10 12 10 8 6 4 2&gt;, &lt;0 1 19 20&gt;, 
    &lt;0 999 4000 4999 7000 7999&gt; -&gt; @test {
    my ($min, $max) = @test.minmax[0,*-1];
    say "@test[]; min: $min; max: $max.";
    say join '', @bars[ map { @bars * ($_ - $min) / ($max - $min) min @bars.end }, @test], "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./sparkline.raku
2 4 6 8 10 12 10 8 6 4 2; min: 2; max: 12.
▁▂▄▅▇█▇▅▄▂▁

0 1 19 20; min: 0; max: 20.
▁▁██

0 999 4000 4999 7000 7999; min: 0; max: 7999.
▁▁▅▅██
</code></pre>

<h3>Unicode Sparkline in Perl</h3>

<pre><code>use strict;
use warnings;
use feature qw/say/;

binmode(STDOUT, ":utf8");
my @bars = map chr, 0x2581 .. 0x2588;

for my $test ([&lt; 2 4 6 8 10 12 10 8 6 4 2&gt;], 
    [&lt;0 1 19 20&gt;], [&lt;0 999 4000 4999 7000 7999&gt;]) {
    my @test = @$test;
    my ($min, $max) = (sort {$a &lt;=&gt; $b} @$test)[0, $#test];
    my $out = "";
    for my $item (@test) {
        my $h = @bars * ($item - $min) / ($max - $min);
        $h = $#bars if $h &gt; $#bars;
        $out .= $bars[int($h)];
    }
    say "@test; min: $min; max: $max.";
    say $out, "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl sparkline.pl
2 4 6 8 10 12 10 8 6 4 2; min: 2; max: 12.
▁▂▄▅▇█▇▅▄▂▁

0 1 19 20; min: 0; max: 20.
▁▁██

0 999 4000 4999 7000 7999; min: 0; max: 7999.
▁▁▅▅██
</code></pre>

<h3>Unicode Sparkline in Julia</h3>

<pre><code>function sparkline(test)
    bars = '\u2581':'\u2588'
    bar_count = length(bars)
    min, max = extrema(test)
    out = ""
    for item in test
        h = 1 + bar_count * (item - min) / (max - min)
        h &gt; bar_count &amp;&amp; (h = bar_count)
        out = out * string(bars[Int(floor(h))])
    end
    return out * "\n"
end

tests = [ [2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2],
    [0, 1, 19, 20], [0, 999, 4000, 4999, 7000, 7999] ]
for test in tests
    println(test, "\n")
    println( sparkline(test))
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./sparkline.jl
[2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2]

▁▂▄▅▇█▇▅▄▂▁

[0, 1, 19, 20]

▁▁██

[0, 999, 4000, 4999, 7000, 7999]

▁▁▅▅██
</code></pre>

<h3>Unicode Sparkline in Python</h3>

<pre><code>def sparkline(test):
  bars = [chr(bar) for bar in range(9601, 9608+1)]
  minim = min(test)
  maxim = max(test)
  scale = maxim - minim
  length = len(bars)
  line = ""
  for item in test:
    line += bars[min(int((item-minim) / scale * length), length - 1)]
  return line

tests = [ [2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2], \
  [0, 1, 19, 20], [0, 999, 4000, 4999, 7000, 7999] ]

for test in tests:
  print(test)
  print(sparkline(test), "\n")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 sparkline.py
[2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2]
▁▂▄▅▇█▇▅▄▂▁

[0, 1, 19, 20]
▁▁██

[0, 999, 4000, 4999, 7000, 7999]
▁▁▅▅██
</code></pre>

<h3>Unicode Sparkline in Ruby</h3>

<pre><code>bars = ('▁'..'█').to_a 
tests = [ [1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1],
    [0, 1, 19, 20], [0, 999, 4000, 4999, 7000, 7999] ]
for test in tests
    min, max = test.minmax
    puts test.join(" ")
    puts "min: %.2f; max: %.2f"% [min, max]
    scale = (max - min) / (bars.size - 1)
    line = ""
    for item in test
        h = bars.size * (item - min) / (max - min)
        if h &gt;= bars.size
            h = bars.size - 1
        end
        line += bars[h]
    end
    puts line
    puts " "
end
</code></pre>

<p>Output:</p>

<pre><code>1 2 3 4 5 6 7 8 7 6 5 4 3 2 1
min: 1.00; max: 8.00
▁▂▃▄▅▆▇█▇▆▅▄▃▂▁

0 1 19 20
min: 0.00; max: 20.00
▁▁██

0 999 4000 4999 7000 7999
min: 0.00; max: 7999.00
▁▁▅▅██
</code></pre>

<h3>Unicode Sparkline in Scala</h3>

<pre><code>object sparkLine extends App {

  def sparkline(test: Array[Int]): String = {
    val bars = ('\u2581' to '\u2588')
    var outl = ""
    for (item &lt;- test) {
      var h = bars.length * (item - test.min) / (test.max - test.min)
      if (h &gt;= bars.length) { h = bars.length - 1 }
      outl = outl + bars(h)
    }
    return outl
  }
  val tests = Array(
    Array(1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1),
    Array(0, 1, 19, 20),
    Array(0, 999, 4000, 4999, 7000, 7999)
  )
  for (test &lt;- tests) {
    println(test.mkString(" "))
    println("")
    println(sparkline(test))
    println("")
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1 2 3 4 5 6 7 8 7 6 5 4 3 2 1

▁▂▃▄▅▆▇█▇▆▅▄▃▂▁

0 1 19 20

▁▁██

0 999 4000 4999 7000 7999

▁▁▅▅██
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on September 4, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Ordinal Sparkline</title>
    <link rel="alternate" href="https://dev.to/simongreennet/the-ordinal-sparkline-dn5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly challenge 179
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-179/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-179/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Ordinal Number Spelling
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive number, <code>$n</code>. Write a script to spell the ordinal number.</p>

<h3>
  
  
  My solution
</h3>

<p>This turned out to be a little more complex than I thought it was, especially around some edge cases. Sure there are Python and Perl modules that already do this, but that's not the spirit of completing these challenges.</p>

<p>I start by defining four lists (arrays in Perl). <code>numbers</code> has the words for the first 19 numbers, so one, two, three, etc. <code>tens</code> has the words for twenty, thirty, etc. The <code>ordinal</code> list has the ordinal words for the first 19 numbers, like first, second, third. Finally the <code>thousands</code> list has the words we use for thousand, million and billion. I'm not handling anything 10<sup>12</sup> or larger.</p>

<p>Next I split up the numbers into blocks of three from the right. So 12345 becomes <code>[345, 12]</code>.</p>

<p>Then it's time to print out the words for each block.</p>

<ol>
<li>If the number is 0 (for example the middle block in 1,000,234), do nothing</li>
<li>If the number is evenly divisible by 100, print the words for that number.</li>
<li>If the number is greater than 100, print the words for the hundreds number and the word ' and '. Change the number to be the remainder from 100.</li>
<li>If the number is greater than 19, print the tens words, and change the number to be the remainder from 10.</li>
<li>Print the number between one and nineteen. If this is the first block, use the <code>ordinal</code> list, otherwise use the <code>numbers</code> list.</li>
<li>Finally, if this is not the first block, add the appropriate thousands word.</li>
</ol>

<p>There is also an edge case where the solution is divisible by 100. In this case, we have never use the <code>ordinal</code> list. When this occurs, I add the string 'th' to the end of the string.</p>

<p>When writing this blog, I also realized that we also didn't print the ordinal word if the number is divisible by 10 (except hundred and ten). I've added some code to also handle this. Thankfully for all the <code>tens</code> words we can replace 'y' with 'ieth' to get the right word.</p>

<p>Then it's a matter of pieces the bits together to produce the final string.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 11
eleventh

$ ./ch-1.py 62
sixty second

$ ./ch-1.py 99
ninety ninth
</code></pre>

</div>



<h2>
  
  
  Task 2: Unicode Sparkline
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive numbers, <code>@n</code>.</p>

<p>Write a script to print sparkline in Unicode for the given list of numbers.</p>

<h3>
  
  
  My solution
</h3>

<p>First off, I'll give attribute of the solution to <a href="https://rosettacode.org/wiki/Sparkline_in_unicode#Python">Rosetta Code</a>, under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.</p>

<p>Thankfully both Python 3 and Perl support unicode out of the box, so we don't need to do anything special to support it.</p>

<p>The code defines the following variables:</p>

<ul>
<li>
<code>bar</code> the string <code>▁▂▃▄▅▆▇█</code> (I use a list for the Perl solution), and <code>barcount</code> the length of the list.</li>
<li>
<code>mn</code> and <code>mx</code> the minimum and maximum values from the list.</li>
<li>
<code>extent</code> the difference between the two values.</li>
</ul>

<p>It then goes through each value of <code>@n</code> and uses the equation <code>(n - mn) / extent * barcount</code> to work out which bar to display.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 1 2 3 4 5 6 7 8
▁▂▃▄▅▆▇█

$ ./ch-2.py 1 8 2 7 3 6 10
▁▇▁▆▂▅█
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/the-ordinal-sparkline-dn5</id>
    <published>2022-08-28T08:43:21Z</published>
    <updated>2022-08-28T08:43:21Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4848155625343884937</id>
    <published>2022-08-27T23:26:00.000+02:00</published>
    <updated>2022-08-27T23:26:46.137+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdvii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/ack-v3.6.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Ack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A grep-like program for searching source code &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.6.0&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: v3.5.0 was 1 year, 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.077' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.077&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 0.076 was 7 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.004000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004000&lt;/strong&gt; on 2022-08-26&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.002002 was 2 years, 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz-2.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to AT&amp;T's GraphViz. Deprecated. See GraphViz2 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.25&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.25 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MICKEY/MetaCPAN-Client-2.030000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MetaCPAN::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A comprehensive, DWIM-featured client to the MetaCPAN API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.030000&lt;/strong&gt; on 2022-08-22&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 2.029000 was 1 year, 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9645' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9645&lt;/strong&gt; on 2022-08-25&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9643 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Struct-Dumb-0.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Struct::Dumb&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - make simple lightweight record-like structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.13&lt;/strong&gt; on 2022-08-27&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.12 was 2 years, 4 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Tickit-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tickit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Terminal Interface Construction KIT &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-08-26&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 1 year, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.15&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.14 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4848155625343884937/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvii-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4848155625343884937"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4848155625343884937"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvii-9-great-cpan-modules-released.html" title="(cdvii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8381686511544238523</id>
    <published>2022-08-27T23:23:00.007+02:00</published>
    <updated>2022-08-27T23:25:09.142+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxx) metacpan weekly report - Try::Tiny</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 90&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Try::Tiny"&gt;Try::Tiny&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/08/27 21:22:13 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Don::t" target="_blank"&gt;Acme::Don::t&lt;/a&gt; - The opposite of do&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alias" target="_blank"&gt;Alias&lt;/a&gt; - aspirations for Alias&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pnc" target="_blank"&gt;App::pnc&lt;/a&gt; - Simple netcat clone implemented in Perl.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::YoutubeDlIf" target="_blank"&gt;App::YoutubeDlIf&lt;/a&gt; - Download videos using youtube-dl with extra selection/filtering&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::Codecov" target="_blank"&gt;Devel::Cover::Report::Codecov&lt;/a&gt; - Backend for Codecov reporting of coverage statistics&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Class" target="_blank"&gt;Feature::Compat::Class&lt;/a&gt; - make class syntax available&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::reCAPTCHA::v3" target="_blank"&gt;Google::reCAPTCHA::v3&lt;/a&gt; - A simple Perl API for Google reCAPTCHA v3&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Patch" target="_blank"&gt;JSON::Patch&lt;/a&gt; - JSON Patch (rfc6902) for perl structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Round::Fair" target="_blank"&gt;Math::Round::Fair&lt;/a&gt; - distribute rounding errors fairly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Optimization::NSGAII" target="_blank"&gt;Optimization::NSGAII&lt;/a&gt; - non dominant sorting genetic algorithm for multi-objective optimization&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SVG::Parser" target="_blank"&gt;SVG::Parser&lt;/a&gt; - XML Parser for SVG documents&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Screen" target="_blank"&gt;Term::Screen&lt;/a&gt; - A Simple all perl Term::Cap based screen positioning module&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::FTP" target="_blank"&gt;AnyEvent::FTP&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::WebSocket::Server" target="_blank"&gt;AnyEvent::WebSocket::Server&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::Solr" target="_blank"&gt;Apache::Solr&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=268)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::week" target="_blank"&gt;App::week&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::Memcached" target="_blank"&gt;Cache::Memcached&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::Memcached::Fast" target="_blank"&gt;Cache::Memcached::Fast&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Simple" target="_blank"&gt;CGI::Simple&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::INI::Tiny" target="_blank"&gt;Config::INI::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+2=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID::MT" target="_blank"&gt;Data::UUID::MT&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::BlackHole" target="_blank"&gt;DBD::BlackHole&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::mysql" target="_blank"&gt;DBD::mysql&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=178)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exception::Base" target="_blank"&gt;Exception::Base&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Rsync" target="_blank"&gt;File::Rsync&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/forks::BerkeleyDB" target="_blank"&gt;forks::BerkeleyDB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gazelle" target="_blank"&gt;Gazelle&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Pipely" target="_blank"&gt;IO::Pipely&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompt" target="_blank"&gt;IO::Prompt&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=111)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::SpamAssassin::4.0.0::rc1" target="_blank"&gt;Mail::SpamAssassin::4.0.0::rc1&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Complex" target="_blank"&gt;Math::Complex&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIME::Base64" target="_blank"&gt;MIME::Base64&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::MySQL5" target="_blank"&gt;Mojo::MySQL5&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=474)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Authorization" target="_blank"&gt;Mojolicious::Plugin::Authorization&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Loco" target="_blank"&gt;Mojolicious::Plugin::Loco&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+2=292)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TO_JSON" target="_blank"&gt;MooX::TO_JSON&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::AtonalUtil" target="_blank"&gt;Music::AtonalUtil&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/new" target="_blank"&gt;new&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Client" target="_blank"&gt;OpenAPI::Client&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Loops" target="_blank"&gt;Parallel::Loops&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Class" target="_blank"&gt;Path::Class&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PathTools" target="_blank"&gt;PathTools&lt;/a&gt; (+1=76)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Build" target="_blank"&gt;Perl::Build&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=122)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::MinimumVersion" target="_blank"&gt;Perl::MinimumVersion&lt;/a&gt; (+2=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlIO::gzip" target="_blank"&gt;PerlIO::gzip&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Coverage" target="_blank"&gt;Pod::Coverage&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::XS" target="_blank"&gt;Promise::XS&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quantum::Superpositions" target="_blank"&gt;Quantum::Superpositions&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Exception" target="_blank"&gt;Test::Exception&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=179)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads" target="_blank"&gt;threads&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads::shared" target="_blank"&gt;threads::shared&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+3=170)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Interface" target="_blank"&gt;Types::Interface&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unix::setuid" target="_blank"&gt;Unix::setuid&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::db" target="_blank"&gt;URI::db&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8381686511544238523/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8381686511544238523"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8381686511544238523"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxx-metacpan-weekly-report.html" title="(dxx) metacpan weekly report - Try::Tiny"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-976395790569742804</id>
    <published>2022-08-27T23:20:00.001+02:00</published>
    <updated>2022-08-27T23:20:44.030+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-08-27 21:20:02 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73484935" target="_blank"&gt;What does `/regex/o` really mean (once there was once, but it seems gone now)?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73449292" target="_blank"&gt;Regex (or bash), get pipes between quotes (perl)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73448911" target="_blank"&gt;How to get date of two month old date from current date&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73455057" target="_blank"&gt;DbiX::Class / Creating tree of test data without persisting&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73511956" target="_blank"&gt;How can I format boolean operators with perltidy?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/976395790569742804/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/976395790569742804"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/976395790569742804"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlviii-stackoverflow-perl-report.html" title="(dxlviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Introducing Venus, a new world for Perl 5</title>
    <link rel="alternate" href="http://blogs.perl.org/users/al_newkirk/2022/08/introducing-venus-a-new-world-for-perl-5.html"/>
    <id>tag:blogs.perl.org,2022:/users/al_newkirk//829.10876</id>
    <published>2022-08-23T09:48:04Z</published>
    <updated>2022-08-25T05:52:00Z</updated>
    <author>
        <name>awncorp</name>
        
    </author>
    <category term="objectoriented" label="object-oriented" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="oop" label="oop" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="standardlibrary" label="standard-library" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/al_newkirk/">
        <![CDATA[<h2>Abstract</h2>

<p>Programming in Perl is choices all the way down. Perl is a multi-paradigm programming language which means that Perl can support the development of software using different programming paradigms, e.g. functional programming, object-oriented programming, and more.</p>

<p>Programming languages are culture, and culture follows philosophy. Philosophy is how every culture provides itself with justification for its decisions, values, beliefs, and worldview.</p>

<h2>Perl's philosophy</h2>

<p>Perl's philosophy is TIMTOWTDI, i.e. “there’s more than one way to do it”. You might even say that Perl takes the position of not taking a position, and this disposition applies to the topic of a standard library as well.</p>

<p>To be clear, what some will call Perl's standard library is little more than a grab bag of functions, pragmas, and packages shipped together with the core. This collection is a mix of functional and object-oriented styles and is intentionally lightweight.</p>

<p>It’s probably worth mentioning that the Raku team has also adopted this posture (and tradition).</p>

<p><strong>What if Perl had a standard library?</strong></p>

<p>Not so fast. Let’s say we agree to provide a robust standard library, what paradigm should that library use? Should that library be written in C to maximize performance, or be written in Perl itself? Should the library be readable and serve as an example of how to Perl, or simply be a means to an end? Decisions, decisions.</p>

<p><strong>CPAN in lieu of a standard library</strong></p>

<p>Perl and its CPAN are overwhelmingly object-oriented, and here's where the TIMTOWTDI motto is on full display. This is both a gift and curse, simultaneously the source of Perl's greatest strengths and its greatest weaknesses. Although, even in the face of such an abundance of choice there have been a handful of CPAN distributions that have become de facto standards for the community. Still, the paradox of choice is real and paralyzing, and it’s really hard to find and/or create unity amongst all of the diversity.</p>

<p>Sustained object-orientation in Perl is difficult because the concept and mechanisms were bolted onto the language as an afterthought, and because it's optional, so one has to oscillate between this paradigm and others, i.e. some things are objects, most things are not, so when using Perl you have to constantly reaffirm your object-orientation.</p>

<h2>The TL;DR</h2>

<p>An OO standard library would make it a lot easier to write Perl in a way that avoids having to come up with similar or the same solutions to common computing tasks. It would make code easier to read and write and eliminate a lot of decision fatigue, especially that which comes with the "search for a library" or "write this library myself" obstacle, which is exactly the type of situation the NIH (not invented here) crowd enjoy. It would make downstream applications more performant and have fewer dependencies. So, is TIMTOWTDI a gift or a curse? Is convention over configuration a straightjacket? Is the Python "batteries included" motto best or bloat?</p>

<h2>What's in a standard library</h2>

<p>Typically a standard library will have routines to access the file system, and perform I/O operations; routines that work with the data types of the language; routines that allow manipulating memory; routines that enable concurrency/parallelism; routines to handle math, and date and time operations; and routines for error handling and assertions. Often, to ensure optimal performance, these routines are written in very low-level code, e.g. C.</p>

<p><strong>What makes a good standard library</strong></p>

<p>I believe a good standard library should have all of the standard fares, but should also be well organized, be dogfooding itself, and be written as to be readable in ways that help to enforce that derivative programs are idiomatic. In other words, be prescriptive, which Perl tries not to be.</p>

<p>A good standard library should have the goal of helping to reduce the number of decisions that an engineer is required to make without compromising flexibility or the don't repeat yourself (DRY) principles.</p>

<p>A standard library should answer the call and respond to what are people building (in the here and now), or what they're trying to build. What they don't have that they wish they did; what they want to adopt from other languages and frameworks which are successful in ways that we desire our software to be. To facilitate developer ergonomics.</p>

<h2>Enter Venus</h2>

<p>Introducing Venus, an attempt at establishing an opinionated idiomatic non-core object-oriented standard library for Perl 5, without years of navel-gazing, committee legislation, infighting, or stalling.</p>

<p>Venus has a simple modular architecture, robust library of classes, methods, and traits (roles), supports pure-Perl autoboxing, advanced exception handling, backward-compatible "true" and "false" keyword functions, simple package introspection, command-line options parsing, and much more.</p>

<p>The project motto and ethic is to "be a compliment, not a cudgel". This ethic is a kind of guiding principle that governs decision-making. The Venus system is strictly complimentary, all features are optional and opt-in (even autoboxing; especially autoboxing). This system can be easily extended without monkey-patching (i.e. via plugins), and useful behaviors can be reused outside of the system via traits (roles).</p>

<p><strong>Some Features</strong></p>

<ul>
<li>Supports Perl 5.18.0+</li>
<li>Backward-compatible Booleans</li>
<li>Composable Standards</li>
<li>Exception Handling</li>
<li>Fast Object-Orientation</li>
<li>Package Reflection</li>
<li>Perl-Perl Autoboxing</li>
<li>Pluggable Standard Library</li>
<li>Robust Documentation</li>
<li>Utility Classes</li>
<li>Value Classes</li>
<li>Zero Dependencies</li>
</ul>

<p><strong>Guiding Principles</strong></p>

<ul>
<li>The standard library should be a standard</li>
<li>The library should have zero-dependencies</li>
<li>The library should be prescriptive yet malleable</li>
<li>The library should service two major categories of need: values and utilities</li>
<li>The library should support wrapping all major native data types</li>
<li>The value class methods should use idiomatic pure-Perl algorithms</li>
<li>The library should leverage roles and interfaces to maximize behavior-portability</li>
<li>The library should expose and make use of the raw materials in the Perl core</li>
<li>The library classes can be easily extended (i.e. subclassed)</li>
<li>The library should allow plugins and discourage monkey-patching</li>
<li>The library should provide mechanisms for error handling (throwing, catching, etc)</li>
<li>The library should provide DMMT support for JSON and YAML</li>
<li>The library should be consistent in namings and conventions to increase predictability</li>
<li>The library should ease the multi-paradigm identity crisis</li>
<li>The library should provide robust documentation with maximal test coverage</li>
</ul>

<h2>The World Tour</h2>

<p>All Venus packages are classes and can usually be thought to belong in one of four categories; core classes, value classes, utility classes, or abstract behaviors (roles).</p>

<h3>CORE CLASSES</h3>

<p><strong>Venus</strong> - The main module which exports a handful of useful functions that
come standard with most other languages.</p>

<pre><code>package main;

use Venus qw(
  catch
  error
  raise
);

# the "catch" function for trapping exceptions, e.g. the "error" function
my ($error, $result) = catch {
  error;
};

# the "true" and "false" keyword functions
if ($result and $result eq false) {
  true;
}

# the "raise" function for raising custom exceptions
if (false) {
  raise 'MyApp::Error';
}

# and much more!
true ne false;
</code></pre>

<p><strong>Venus::Class</strong> - The class builder module which uses the Mars architecture
and supports integrating superclasses, mixins, roles, and interfaces.</p>

<pre><code>package Person;

use Venus::Class 'attr';

attr 'fname';
attr 'lname';

package User;

use Venus::Class 'attr', 'base';

base 'Person';

attr 'email';

package main;

my $user = User-&gt;new(
  fname =&gt; 'Elliot',
  lname =&gt; 'Alderson',
);

# bless({fname =&gt; 'Elliot', lname =&gt; 'Alderson'}, 'User')
</code></pre>

<p><strong>Venus::Mixin</strong> - The mixin builder module which uses the Mars architecture
and supports is essentially an exporter builder that supports dynamic exports.</p>

<pre><code>package Access;

use Venus::Mixin;

sub login {
  # ...
}

sub logout {
  # ...
}

sub EXPORT {
  ['login', 'logout']
}

package User;

use Venus::Class 'attr', 'mixin';

mixin 'Access';

attr 'email';
attr 'password';

package main;

my $user = User-&gt;new(
  fname =&gt; 'Elliot',
  lname =&gt; 'Alderson',
);

# bless({fname =&gt; 'Elliot', lname =&gt; 'Alderson'}, 'User')

# $user-&gt;login;

# undef

# $user-&gt;logout;

# undef
</code></pre>

<p><strong>Venus::Role</strong> - The role builder module which uses the Mars architecture and
supports integrating superclasses, mixins, roles, and interfaces.</p>

<pre><code>package Authenticable;

use Venus::Role 'error';

sub AUDIT {
  my ($self, $from) = @_;

  error "${from} missing the email attribute" if !$from-&gt;can('email');
  error "${from} missing the password attribute" if !$from-&gt;can('password');
}

package User;

use Venus::Class 'attr', 'with';

with 'Authenticable';

attr 'email';

package main;

# Exception! "User missing the password attribute"
</code></pre>

<h3>VALUE CLASSES</h3>

<p><strong>Venus::Array</strong> - The Array class provides methods for manipulating
array references.</p>

<pre><code>package main;

use Venus::Array;

my $array = Venus::Array-&gt;new([1..4]);

# bless({'value' =&gt; [1, 2, 3, 4]}, 'Venus::Array')

$array-&gt;count;

# 4

# $array-&gt;all(sub{ $_ &gt; 0 });
# $array-&gt;any(sub{ $_ &gt; 0 });
# $array-&gt;each(sub{ $_ &gt; 0 });
# $array-&gt;grep(sub{ $_ &gt; 0 });
# $array-&gt;map(sub{ $_ &gt; 0 });
# $array-&gt;none(sub{ $_ &lt; 0 });
# $array-&gt;one(sub{ $_ == 0 });
# $array-&gt;random;
</code></pre>

<p><strong>Venus::Boolean</strong> - The Boolean class provides methods for representing
and operating on boolean values.</p>

<pre><code>package main;

use Venus::Boolean;

my $boolean = Venus::Boolean-&gt;new(1);

# bless({'value' =&gt; 1}, 'Venus::Boolean')

$boolean-&gt;negate;

# 0
</code></pre>

<p><strong>Venus::Code</strong> - The Code class provides methods for manipulating
code references.</p>

<pre><code>package main;

use Venus::Code;

my $code = Venus::Code-&gt;new(sub {1});

# bless({'value' =&gt; sub {...}}, 'Venus::Code')

$code-&gt;call;

# 1
</code></pre>

<p><strong>Venus::Float</strong> - The Float class provides methods for manipulating
floating-point numbers.</p>

<pre><code>package main;

use Venus::Float;

my $float = Venus::Float-&gt;new(1.23);

# bless({'value' =&gt; '1.23'}, 'Venus::Float')

$float-&gt;int;

# 1
</code></pre>

<p><strong>Venus::Hash</strong> - The Hash class provides methods for manipulating
hash references.</p>

<pre><code>use Venus::Hash;

my $hash = Venus::Hash-&gt;new({1..8});

# bless({'value' =&gt; {'1' =&gt; 2, '3' =&gt; 4, '5' =&gt; 6, '7' =&gt; 8}}, 'Venus::Hash')

$hash-&gt;count;

# 4

# $hash-&gt;all(sub{ $_ &gt; 0 });
# $hash-&gt;any(sub{ $_ &gt; 0 });
# $hash-&gt;each(sub{ $_ &gt; 0 });
# $hash-&gt;grep(sub{ $_ &gt; 0 });
# $hash-&gt;map(sub{ $_ &gt; 0 });
# $hash-&gt;none(sub{ $_ &lt; 0 });
# $hash-&gt;one(sub{ $_ == 0 });
# $hash-&gt;random;
</code></pre>

<p><strong>Venus::Number</strong> - The Number class provides methods for manipulating
numeric values.</p>

<pre><code>package main;

use Venus::Number;

my $number = Venus::Number-&gt;new(1_000);

# bless({'value' =&gt; 1000}, 'Venus::Number')

$number-&gt;abs;

# 1000
</code></pre>

<p><strong>Venus::Regexp</strong> - The Regexp class provides methods for manipulating
regular expression references.</p>

<pre><code>package main;

use Venus::Regexp;

my $regexp = Venus::Regexp-&gt;new(
  qr/(?&lt;greet&gt;\w+) (?&lt;username&gt;\w+)/u,
);

# bless({'value' =&gt; qr/(?&lt;greet&gt;\w+) (?&lt;username&gt;\w+)/u}, 'Venus::Regexp')

$regexp-&gt;search('hello venus')-&gt;captures;

# ['hello', 'venus']
</code></pre>

<p><strong>Venus::Scalar</strong> - The Scalar class provides methods for manipulating
scalar references.</p>

<pre><code>package main;

use Venus::Scalar;

my $scalar = Venus::Scalar-&gt;new;

# bless({'value' =&gt; \''}, 'Venus::Scalar')

${$scalar}

# ""
</code></pre>

<p><strong>Venus::String</strong> - The String class provides methods for manipulating
string values.</p>

<pre><code>package main;

use Venus::String;

my $string = Venus::String-&gt;new('hello world');

# bless({'value' =&gt; 'hello world'}, 'Venus::String')

$string-&gt;camelcase;

# "helloWorld"
</code></pre>

<p><strong>Venus::Undef</strong> - The Undef class provides methods for representing
undefined values.</p>

<pre><code>package main;

use Venus::Undef;

my $undef = Venus::Undef-&gt;new;

# bless({'value' =&gt; undef}, 'Venus::Undef')

$undef-&gt;defined;

# 0
</code></pre>

<h3>UTILITY CLASSES</h3>

<p><strong>Venus::Args</strong> - The Args class provides methods for accessing and
manipulating <code>@ARGS</code> values.</p>

<pre><code>package main;

use Venus::Args;

my $args = Venus::Args-&gt;new(
  named =&gt; { flag =&gt; 0, command =&gt; 1 }, # optional
  value =&gt; ['--help', 'execute'],
);

# bless({....}, 'Venus::Args')

$args-&gt;flag;

# "--help"

# $args-&gt;get(0); # $ARGV[0]
# $args-&gt;get(1); # $ARGV[1]
# $args-&gt;action; # $ARGV[1]
# $args-&gt;exists(0); # exists $ARGV[0]
# $args-&gt;exists('flag'); # exists $ARGV[0]
# $args-&gt;get('flag'); # $ARGV[0]
</code></pre>

<p><strong>Venus::Box</strong> - The Box class is a proxy class provides a mechanism for
autoboxing the return values of its proxied objects.</p>

<pre><code>package main;

use Venus::Box;

my $box = Venus::Box-&gt;new(
  value =&gt; {},
);

# bless({'value' =&gt; bless({'value' =&gt; {}}, 'Venus::Hash')}, 'Venus::Box')

$box-&gt;keys-&gt;count-&gt;unbox;

# 0
</code></pre>

<p><strong>Venus::Data</strong> - The Data class provides methods for accessing and
manipulating POD data (and data sections) in the file or the <code>__DATA__</code> token.</p>

<pre><code>package main;

use Venus::Data;

my $data = Venus::Data-&gt;new;

# bless({...}, 'Venus::Data')

$data-&gt;value($data-&gt;space-&gt;format('label', 't/%s.t'));

# /path/to/t/Venus_Data.t

$data-&gt;find(undef, 'name');

# {
#   'data' =&gt; ['Venus::Data'],
#   'index' =&gt; 1,
#   'list' =&gt; undef,
#   'name' =&gt; 'name'
# }
</code></pre>

<p><strong>Venus::Date</strong> - The Date class provides methods for manipulating date
and time values.</p>

<pre><code>package main;

use Venus::Date;

my $date = Venus::Date-&gt;new(570672000);

# bless({...}, 'Venus::Date')

$date-&gt;string;

# '1988-02-01T00:00:00Z'
</code></pre>

<p><strong>Venus::Error</strong> - The Error class provides methods for throwing
exceptions.</p>

<pre><code>package main;

use Venus::Error;

my $error = Venus::Error-&gt;new;

# bless({...}, 'Venus::Error')

$error-&gt;throw;

# Exception!
</code></pre>

<p><strong>Venus::Json</strong> - The Json class provides methods for encoding and
decoding JSON data.</p>

<pre><code>package main;

use Venus::Json;

my $json = Venus::Json-&gt;new(
  value =&gt; { name =&gt; ['Ready', 'Robot'], version =&gt; 0.12, stable =&gt; !!1, }
);

# bless({...}, 'Venus::Json')

$json-&gt;encode;

# {"name": ["Ready", "Robot"], "stable": true, "version": 0.12}
</code></pre>

<p><strong>Venus::Match</strong> - The Match class provides an object-oriented switch
mechanism (or dispatch table).</p>

<pre><code>package main;

use Venus::Match;

my $match = Venus::Match-&gt;new(5);

# bless({...}, 'Venus::Match')

$match-&gt;when(sub{$_ &lt; 5})-&gt;then(sub{"&lt; 5"});
$match-&gt;when(sub{$_ &gt; 5})-&gt;then(sub{"&gt; 5"});
$match-&gt;none(sub{"?"});

my $result = $match-&gt;result;

# "?"
</code></pre>

<p><strong>Venus::Name</strong> - The Name class provides methods for parsing and
formatting package namespace strings.</p>

<pre><code>package main;

use Venus::Name;

my $name = Venus::Name-&gt;new('Foo/Bar');

# bless({'value' =&gt; 'Foo/Bar'}, 'Venus::Name')

$name-&gt;package;

# "Foo::Bar"
</code></pre>

<p><strong>Venus::Opts</strong> - The Opts class provides methods for accessing and
manipulating <code>@ARGS</code> values that are passed as command-line options.</p>

<pre><code>package main;

use Venus::Opts;

my $opts = Venus::Opts-&gt;new(
  value =&gt; ['--resource', 'users', '--help'],
  specs =&gt; ['resource|r=s', 'help|h'],
  named =&gt; { method =&gt; 'resource' } # optional
);

# bless({...}, 'Venus::Opts')

$opts-&gt;method;

# "users"

# $opts-&gt;method; # $resource
# $opts-&gt;get('resource'); # $resource

# $opts-&gt;help; # $help
# $opts-&gt;get('help'); # $help
</code></pre>

<p><strong>Venus::Path</strong> - The Path class provides methods for operating on paths.</p>

<pre><code>package main;

use Venus::Path;

my $path = Venus::Path-&gt;new('t/data/planets');

# bless({'value' =&gt; 't/data/planets'}, 'Venus::Path')

my $planets = $path-&gt;files;

# [
#   bless({...}, 'Venus::Path'),
#   bless({...}, 'Venus::Path'),
#   ...,
# ]

# my $mercury = $path-&gt;child('mercury');
# my $content = $mercury-&gt;read;
</code></pre>

<p><strong>Venus::Process</strong> - The Process class provides methods for forking and
managing processes.</p>

<pre><code>package main;

use Venus::Process;

my $parent = Venus::Process-&gt;new;

# bless({'value' =&gt; 2179356}, 'Venus::Process')

my $process = $parent-&gt;fork;

if ($process) {
  # do something in child process ...
  $process-&gt;exit;
}
else {
  # do something in parent process ...
  $parent-&gt;wait(-1);
}

# $parent-&gt;exit;
</code></pre>

<p><strong>Venus::Random</strong> - The Random class provides an object-oriented interface for
Perl's pseudo-random number generator (or PRNG) which produces a deterministic
sequence of bits which approximate true randomness.</p>

<pre><code>package main;

use Venus::Random;

my $random = Venus::Random-&gt;new(42);

# bless({'value' =&gt; 42}, 'Venus::Random')

my $bit = $random-&gt;bit;

# 1

my $number = $random-&gt;range(10, 50);

# 24
</code></pre>

<p><strong>Venus::Replace</strong> - The Replace class provides methods for manipulating
regular expression replacement data.</p>

<pre><code>package main;

use Venus::Replace;

my $replace = Venus::Replace-&gt;new(
  string =&gt; 'hello world',
  regexp =&gt; '(world)',
  substr =&gt; 'universe',
);

# bless({...}, 'Venus::Replace')

$replace-&gt;captures;

# "world"
</code></pre>

<p><strong>Venus::Search</strong> - The Search class provides methods for manipulating regexp
search data.</p>

<pre><code>package main;

use Venus::Search;

my $search = Venus::Search-&gt;new(
  string =&gt; 'hello world',
  regexp =&gt; '(hello)',
);

# bless({...}, 'Venus::Search')

$search-&gt;captures;

# "hello"
</code></pre>

<p><strong>Venus::Space</strong> - The Space class provides methods for parsing and
manipulating package namespaces.</p>

<pre><code>package main;

use Venus::Space;

my $space = Venus::Space-&gt;new('foo/bar');

# bless({'value' =&gt; 'Foo::Bar'}, 'Venus::Space')

$space-&gt;package;

# Foo::Bar
</code></pre>

<p><strong>Venus::Template</strong> - The Template class provides minimalist template rendering
functionality.</p>

<pre><code>package main;

use Venus::Template;

my $template = Venus::Template-&gt;new(
  'From: &lt;{{ email }}&gt;',
);

# bless({...}, 'Venus::Template')

$template-&gt;render;

# "From: &lt;&gt;"
</code></pre>

<p><strong>Venus::Throw</strong> - The Throw class provides a mechanism for generating and
raising errors (exception objects).</p>

<pre><code>package main;

use Venus::Throw;

my $throw = Venus::Throw-&gt;new;

# bless({'parent' =&gt; 'Venus::Error'}, 'Venus::Throw')

$throw-&gt;error;

# Exception!
</code></pre>

<p><strong>Venus::Try</strong> - The Try class provides an object-oriented interface for
performing complex try/catch operations.</p>

<pre><code>package main;

use Venus::Try;

my $try = Venus::Try-&gt;new;

# bless({...}, 'Venus::Try')

$try-&gt;call(sub {
  my (@args) = @_;

  # try something

  return 2 * 3 * 4;
});

$try-&gt;catch('Example::Error', sub {
  my ($caught) = @_;

  # caught an error (exception)

  return;
});

$try-&gt;default(sub {
  my ($caught) = @_;

  # catch the uncaught

  return;
});

$try-&gt;finally(sub {
  my (@args) = @_;

  # always run after try/catch

  return;
});

my @args;

my $result = $try-&gt;result(@args);

# 24
</code></pre>

<p><strong>Venus::Type</strong> - The Type class provides methods for casting native data types
to objects and the reverse.</p>

<pre><code>package main;

use Venus::Type;

my $type = Venus::Type-&gt;new([]);

# bless({'value' =&gt; []}, 'Venus::Type')

my $object = $type-&gt;deduce;

# bless({'value' =&gt; []}, 'Venus::Array')

my $code = $type-&gt;code;

# "ARRAY"
</code></pre>

<p><strong>Venus::Vars</strong> - The Vars class provides methods for accessing <code>%ENV</code> items.</p>

<pre><code>package main;

use Venus::Vars;

my $vars = Venus::Vars-&gt;new(
  value =&gt; { USER =&gt; 'awncorp', HOME =&gt; '/home/awncorp', },
  named =&gt; { iam =&gt; 'USER', root =&gt; 'HOME', },
);

# bless({....}, 'Venus::Vars')

$vars-&gt;iam;

# "awncorp"

# $vars-&gt;root; # $ENV{HOME}
# $vars-&gt;home; # $ENV{HOME}
# $vars-&gt;get('home'); # $ENV{HOME}
# $vars-&gt;get('HOME'); # $ENV{HOME}

# $vars-&gt;iam; # $ENV{USER}
# $vars-&gt;user; # $ENV{USER}
# $vars-&gt;get('user'); # $ENV{USER}
# $vars-&gt;get('USER'); # $ENV{USER}
</code></pre>

<p><strong>Venus::Yaml</strong> - The Yaml class provides methods for encoding and decoding
YAML data.</p>

<pre><code>package main;

use Venus::Yaml;

my $yaml = Venus::Yaml-&gt;new(
  value =&gt; { name =&gt; ['Ready', 'Robot'], version =&gt; 0.12, stable =&gt; !!1, }
);

# bless({...}, 'Venus::Yaml')

$yaml-&gt;encode;

# "---\nname:\n- Ready\n- Robot\nstable: true\nversion: 0.12\n"
</code></pre>

<h2>Why Try Venus</h2>

<ul>
<li>You're doing OO in Perl 5</li>
<li>You're interested in modern idiomatic Perl</li>
<li>You're looking for an architectural standard</li>
<li>You're partial to convention over configuration</li>
<li>You're in need of power and performance</li>
</ul>

<h2>Inspiration</h2>

<ul>
<li>https://github.com/ruby/ruby</li>
<li>https://github.com/crystal-lang/crystal</li>
<li>https://github.com/elixir-lang/elixir</li>
<li>https://github.com/python/cpython</li>
</ul>

<h2>Sources</h2>

<p><a href="https://github.com/awncorp/venus">Venus: OO Standard Library for Perl 5 - Github</a></p>

<p><a href="https://news.ycombinator.com/item?id=28975453">To learn a new language, read its standard library - Hacker News</a></p>

<p><a href="https://www.reddit.com/r/ProgrammingLanguages/comments/7mzfr6/is_the_standard_library_of_any_major_programming/">Is the standard library of any major programming language a liability? - ProgrammingLanguages</a></p>

<h2>End Quote</h2>

<p>"Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves." - Alan Kay</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>How I use Emacs to write Perl</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/how-i-use-emacs-to-write-perl-40e6" type="text/html"/>
    <content type="html">&lt;p&gt;This post is about how I use Emacs to write Perl. I do not claim to have the best Perl setup of all time or anything like that. The features I need to write Perl effectively are syntax highlighting, auto-indentation, linting, and code navigation.&lt;/p&gt;

&lt;p&gt;I personally like to build my own IDE by bringing together unrelated packages, which is in contrast to full blown IDE packages, such as &lt;a href="https://metacpan.org/pod/Devel::PerlySense"&gt;Devel::PerlySense&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt;. These packages just aren't for me.&lt;/p&gt;

&lt;p&gt;&lt;a id="orga25e1f5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Basics
&lt;/h1&gt;

&lt;p&gt;By default Emacs uses perl-mode instead of the more advanced cperl-mode. Both packages are built-in, so to use cperl-mode instead of perl-mode all you have to do is add the following line to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'perl-mode&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cperl-mode that was released with Emacs 28 improved the syntax highlighting for regular expressions and heredocs. It also fixed an annoying bug where array variable names in comments were highlighted with the array face instead of the comment face.&lt;/p&gt;

&lt;p&gt;If you are using an Emacs version less than 28 then I would recommend downloading the &lt;a href="https://github.com/emacs-mirror/emacs/blob/emacs-28/lisp/progmodes/cperl-mode.el"&gt;cperl-mode off the Emacs 28 branch&lt;/a&gt;. I personally place this file in &lt;code&gt;~/.emacs.d/cperl-mode/cperl-mode.el&lt;/code&gt;, then I load it with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/cperl-mode"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default cperl-mode replaces trailing whitespace with underscores. I cannot imagine why you would want this. To turn it off add the following line to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-invalid-face&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;cperl-mode indents code by 2 spaces by default. You can modify this by setting the &lt;code&gt;cperl-indent-level&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;You probably want multi-line statements wrapped in parens to be indented like a block. For example by default cperl-mode indents this hash declaration in a strange way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
           &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix this add the following to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-indent-parens-as-block&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-close-paren-offset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;cperl-indent-level&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our hash declaration indents nicely!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org3c40091"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Linting
&lt;/h1&gt;

&lt;p&gt;Linting our Perl code helps us easily find bugs caused by typos. My favorite Emacs linting package is &lt;a href="https://www.flycheck.org/en/latest/"&gt;Flycheck&lt;/a&gt;, which comes with built-in support for Perl.&lt;/p&gt;

&lt;p&gt;By default Flycheck checks your code with the Perl interpreter, but it also comes with integration with &lt;a href="https://metacpan.org/pod/Perl::Critic"&gt;Perl::Critic&lt;/a&gt;. Personally I have only used the former.&lt;/p&gt;

&lt;p&gt;I like to lint the file everytime I save, and I like to display any errors immediately. Here is how I accomplish this with Flycheck.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'flycheck&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;flycheck-check-syntax-automatically&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mode-enabled&lt;/span&gt; &lt;span class="nv"&gt;save&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;flycheck-display-errors-delay&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable flycheck mode in cperl-mode, simply turn it on with a hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(add-hook 'cperl-mode-hook 'flycheck-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Emacs will underline any syntax errors, and you can view the message in the echo area by placing your cursor on the erroneus code.&lt;/p&gt;

&lt;p&gt;I cannot tell you how many simple errors you will catch just by using Flycheck!&lt;/p&gt;

&lt;p&gt;&lt;a id="org063479d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Code Navigation
&lt;/h1&gt;

&lt;p&gt;For jumping between function definitions I use &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;, which usually &lt;strong&gt;just works&lt;/strong&gt;. I configure dumb-jump to use &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag&lt;/a&gt; for its searching which makes it work very quickly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'dumb-jump&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-force-searcher&lt;/span&gt; &lt;span class="ss"&gt;'ag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'xref-backend-functions&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;dumb-jump-xref-activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can then use dumb-jump by calling the &lt;code&gt;xref-find-definitions&lt;/code&gt; function while my cursor is on the symbol I want to search for. This function is bound to &lt;code&gt;M-.&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgde68f03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Shell
&lt;/h1&gt;

&lt;p&gt;A lot of people use &lt;code&gt;M-x compile&lt;/code&gt; to run their code, and one of the various debugger packages to run the Perl debugger. Personally I just use plain old &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; with the built-in &lt;code&gt;M-x shell&lt;/code&gt;. This makes my work flow when it comes to running and debugging quite similar to that of a classic Perl vimmer who does all their work in a terminal.&lt;/p&gt;

&lt;p&gt;I use the wonderful &lt;a href="https://github.com/riscy/shx-for-emacs"&gt;shx&lt;/a&gt; package for making &lt;code&gt;M-x shell&lt;/code&gt; a more usable shell interface, and I use &lt;a href="https://github.com/kyagi/shell-pop-el"&gt;shell-pop&lt;/a&gt; for popping up shell buffers that are automatically cd'd to the current files directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(require 'shx)
(add-hook 'shell-mode-hook 'shx-mode)

(require 'shell-pop)
(setq shell-pop-autocd-to-working-dir t)
(global-set-key (kbd "M-SPC") 'shell-pop)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org3936e96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Every 3rd-party package I described in this post is useful not only for Perl, but for programming in any language. This gives a uniform experience across different programming languages. If I instead used one of the Perl IDE packages then I wouldn't get the same uniform experience when using other languages.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgd51f8f0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  See Also
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.emacswiki.org/emacs/CPerlMode"&gt;CPerl Documentation&lt;/a&gt;  - Offical documentation for cperl-mode&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt; - Language server for Perl&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Devel::PerlySense"&gt;Devel::PerlySense&lt;/a&gt;    - Perl IDE features for Emacs&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Emacs::PDE"&gt;Emacs::PDE&lt;/a&gt;           - Elisp extensions for Perl development&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/how-i-use-emacs-to-write-perl-40e6</id>
    <published>2022-08-24T23:42:00Z</published>
    <updated>2022-08-24T23:42:00Z</updated>
    <category term="perl"/>
    <category term="emacs"/>
  </entry>
  <entry>
    <title>Get GC Content</title>
    <link rel="alternate" href="https://dev.to/jmeneghin/get-gc-content-1971" type="text/html"/>
    <content type="html">&lt;p&gt;I wrote a Perl script that calculates GC content for all the sequences in a fasta file back in 2010 for the Reysenbach Lab, and it was made publicly available soon after. You can find get_gc_content.pl on GitHub (&lt;a href="https://github.com/jmeneghin/perl-for-reysenbach-lab"&gt;https://github.com/jmeneghin/perl-for-reysenbach-lab&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here is a published article that uses my script:&lt;br&gt;
Schilling, T., Hoppert, M., and Hertel, R. 2018. Genomic Analysis of the Recent Viral Isolate vB_BthP-Goe4 Reveals Increased Diversity of φ29-Like Phages. Viruses, 10(11), 624, doi: 10.3390/v10110624.&lt;/p&gt;

&lt;p&gt;And also a PhD Dissertation:&lt;br&gt;
Quistad, S. D. 2015. Viruses, Corals and the Origin of Metazoans. UC San Diego, San Diego, CA.&lt;/p&gt;

&lt;p&gt;From a programming prospective, A DNA sequence is a sequence of As, Gs, Cs and Ts. The GC content of a sequence is the number of Gs + the number of Cs divided by the total number of As, Gs, Cs and Ts in the sequence (i.e. the length of the sequence), multiplied by 100% to get a percentage.&lt;/p&gt;

&lt;p&gt;Actual DNA is double stranded, but when we look at the sequence on a computer, we don’t need to look at the second strand because base pairs only form naturally between G and C, and A and T. So if you have a G on one strand you know you have a C on the other at the same location.&lt;/p&gt;

&lt;p&gt;If you are counting both strands, the total number of Gs and Cs should be the same, overall. Similarly, the total number of As and Ts should be the same, overall. And since there are only two groups here, if I give you the percentage of Gs and Cs on the first strand, it will be the same as the second strand, and also equal to 1 minus the percentage of As and Ts on the first and second strand. So it’s a nice summary statistic.&lt;/p&gt;

&lt;p&gt;This script takes a fasta file as its first (and only) parameter. It returns a tab delimited file (gc_out.txt): column 1 = header ID (everything between “&amp;gt;” and the first space in the header), column 2 = gc content for the fasta entry, column 3 = the total nucleotide count, and columns 4, 5, 6, and 7 = the number of A’s, G’s, C’s and T’s for each fasta record. Any other extraneous symbols (such as spaces or Ns that stand for unknown) are not included in the calculation.&lt;/p&gt;

&lt;p&gt;Many articles have been published about the role of GC content in the evolution of genomes, including studies on bacteria, plants, and animals including humans.&lt;/p&gt;

</content>
    <author>
      <name>Jennifer Meneghin</name>
    </author>
    <id>https://dev.to/jmeneghin/get-gc-content-1971</id>
    <published>2022-08-24T19:21:43Z</published>
    <updated>2022-08-24T19:21:43Z</updated>
    <category term="perl"/>
    <category term="bioinformatics"/>
    <category term="genomics"/>
  </entry>
  <entry>
  <title>Dancer2: Configuration</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-24T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-configuration"/>  <id>https://perlmaven.com/dancer2-configuration</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Introducing Venus, a new world for Perl 5</title>
    <link rel="alternate" href="https://dev.to/iamalnewkirk/introducing-venus-a-new-world-for-perl-5-1mfp" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Abstract
&lt;/h2&gt;

&lt;p&gt;Programming in Perl is choices all the way down. Perl is a multi-paradigm programming language which means that Perl can support the development of software using different programming paradigms, e.g. functional programming, object-oriented programming, and more.&lt;/p&gt;

&lt;p&gt;Programming languages are culture, and culture follows philosophy. Philosophy is how every culture provides itself with justification for its decisions, values, beliefs, and worldview.&lt;/p&gt;

&lt;h2&gt;
  
  
  Perl's philosophy
&lt;/h2&gt;

&lt;p&gt;Perl's philosophy is TIMTOWTDI, i.e. “there’s more than one way to do it”. You might even say that Perl takes the position of not taking a position, and this disposition applies to the topic of a standard library as well.&lt;/p&gt;

&lt;p&gt;To be clear, what some will call Perl's standard library is little more than a grab bag of functions, pragmas, and packages shipped together with the core. This collection is a mix of functional and object-oriented styles and is intentionally lightweight.&lt;/p&gt;

&lt;p&gt;It’s probably worth mentioning that the Raku team has also adopted this posture (and tradition).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if Perl had a standard library?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not so fast. Let’s say we agree to provide a robust standard library, what paradigm should that library use? Should that library be written in C to maximize performance, or be written in Perl itself? Should the library be readable and serve as an example of how to Perl, or simply be a means to an end? Decisions, decisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CPAN in lieu of a standard library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perl and its CPAN are overwhelmingly object-oriented, and here's where the TIMTOWTDI motto is on full display. This is both a gift and curse, simultaneously the source of Perl's greatest strengths and its greatest weaknesses. Although, even in the face of such an abundance of choice there have been a handful of CPAN distributions that have become de facto standards for the community. Still, the paradox of choice is real and paralyzing, and it’s really hard to find and/or create unity amongst all of the diversity.&lt;/p&gt;

&lt;p&gt;Sustained object-orientation in Perl is difficult because the concept and mechanisms were bolted onto the language as an afterthought, and because it's optional, so one has to oscillate between this paradigm and others, i.e. some things are objects, most things are not, so when using Perl you have to constantly reaffirm your object-orientation.&lt;/p&gt;

&lt;h2&gt;
  
  
  The TL;DR
&lt;/h2&gt;

&lt;p&gt;An OO standard library would make it a lot easier to write Perl in a way that avoids having to come up with similar or the same solutions to common computing tasks. It would make code easier to read and write and eliminate a lot of decision fatigue, especially that which comes with the "search for a library" or "write this library myself" obstacle, which is exactly the type of situation the NIH (not invented here) crowd enjoy. It would make downstream applications more performant and have fewer dependencies. So, is TIMTOWTDI a gift or a curse? Is convention over configuration a straightjacket? Is the Python "batteries included" motto best or bloat?&lt;/p&gt;

&lt;h2&gt;
  
  
  What's in a standard library
&lt;/h2&gt;

&lt;p&gt;Typically a standard library will have routines to access the file system, and perform I/O operations; routines that work with the data types of the language; routines that allow manipulating memory; routines that enable concurrency/parallelism; routines to handle math, and date and time operations; and routines for error handling and assertions. Often, to ensure optimal performance, these routines are written in very low-level code, e.g. C.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a good standard library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I believe a good standard library should have all of the standard fares, but should also be well organized, be dogfooding itself, and be written as to be readable in ways that help to enforce that derivative programs are idiomatic. In other words, be prescriptive, which Perl tries not to be.&lt;/p&gt;

&lt;p&gt;A good standard library should have the goal of helping to reduce the number of decisions that an engineer is required to make without compromising flexibility or the don't repeat yourself (DRY) principles.&lt;/p&gt;

&lt;p&gt;A standard library should answer the call and respond to what are people building (in the here and now), or what they're trying to build. What they don't have that they wish they did; what they want to adopt from other languages and frameworks which are successful in ways that we desire our software to be. To facilitate developer ergonomics.&lt;/p&gt;

&lt;h2&gt;
  
  
  Enter Venus
&lt;/h2&gt;

&lt;p&gt;Introducing Venus, an attempt at establishing an opinionated idiomatic non-core object-oriented standard library for Perl 5, without years of navel-gazing, committee legislation, infighting, or stalling.&lt;/p&gt;

&lt;p&gt;Venus has a simple modular architecture, robust library of classes, methods, and traits (roles), supports pure-Perl autoboxing, advanced exception handling, backward-compatible "true" and "false" keyword functions, simple package introspection, command-line options parsing, and much more.&lt;/p&gt;

&lt;p&gt;The project motto and ethic is to "be a compliment, not a cudgel". This ethic is a kind of guiding principle that governs decision-making. The Venus system is strictly complimentary, all features are optional and opt-in (even autoboxing; especially autoboxing). This system can be easily extended without monkey-patching (i.e. via plugins), and useful behaviors can be reused outside of the system via traits (roles).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports Perl 5.18.0+&lt;/li&gt;
&lt;li&gt;Backward-compatible Booleans&lt;/li&gt;
&lt;li&gt;Composable Standards&lt;/li&gt;
&lt;li&gt;Exception Handling&lt;/li&gt;
&lt;li&gt;Fast Object-Orientation&lt;/li&gt;
&lt;li&gt;Package Reflection&lt;/li&gt;
&lt;li&gt;Perl-Perl Autoboxing&lt;/li&gt;
&lt;li&gt;Pluggable Standard Library&lt;/li&gt;
&lt;li&gt;Robust Documentation&lt;/li&gt;
&lt;li&gt;Utility Classes&lt;/li&gt;
&lt;li&gt;Value Classes&lt;/li&gt;
&lt;li&gt;Zero Dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Guiding Principles&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The standard library should be a standard&lt;/li&gt;
&lt;li&gt;The library should have zero-dependencies&lt;/li&gt;
&lt;li&gt;The library should be prescriptive yet malleable&lt;/li&gt;
&lt;li&gt;The library should service two major categories of need: values and utilities&lt;/li&gt;
&lt;li&gt;The library should support wrapping all major native data types&lt;/li&gt;
&lt;li&gt;The value class methods should use idiomatic pure-Perl algorithms&lt;/li&gt;
&lt;li&gt;The library should leverage roles and interfaces to maximize behavior-portability&lt;/li&gt;
&lt;li&gt;The library should expose and make use of the raw materials in the Perl core&lt;/li&gt;
&lt;li&gt;The library classes can be easily extended (i.e. subclassed)&lt;/li&gt;
&lt;li&gt;The library should allow plugins and discourage monkey-patching&lt;/li&gt;
&lt;li&gt;The library should provide mechanisms for error handling (throwing, catching, etc)&lt;/li&gt;
&lt;li&gt;The library should provide DMMT support for JSON and YAML&lt;/li&gt;
&lt;li&gt;The library should be consistent in namings and conventions to increase predictability&lt;/li&gt;
&lt;li&gt;The library should ease the multi-paradigm identity crisis&lt;/li&gt;
&lt;li&gt;The library should provide robust documentation with maximal test coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  The World Tour
&lt;/h2&gt;

&lt;p&gt;All Venus packages are classes and can usually be thought to belong in one of four categories; core classes, value classes, utility classes, or abstract behaviors (roles).&lt;/p&gt;

&lt;h3&gt;
  
  
  CORE CLASSES
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Venus&lt;/strong&gt; - The main module which exports a handful of useful functions that come standard with most other languages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Venus&lt;/span&gt; &lt;span class="sx"&gt;qw(
  catch
  error
  raise
)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# the "catch" function for trapping exceptions&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# the "true" and "false" keyword functions&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# the "raise" function for raising custom exceptions&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyApp::Error&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# and much more!&lt;/span&gt;
&lt;span class="nv"&gt;true&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Class&lt;/strong&gt; - The class builder module which uses the Mars architecture and supports integrating superclasses, mixins, roles, and interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Elliot&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alderson&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({fname =&amp;gt; 'Elliot', lname =&amp;gt; 'Alderson'}, 'User')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Mixin&lt;/strong&gt; - The mixin builder module which uses the Mars architecture and is essentially an exporter builder that supports dynamic exports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Mixin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;logout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;EXPORT&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;']&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mixin&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;mixin&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Elliot&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alderson&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({fname =&amp;gt; 'Elliot', lname =&amp;gt; 'Alderson'}, 'User')&lt;/span&gt;

&lt;span class="c1"&gt;# $user-&amp;gt;login;&lt;/span&gt;

&lt;span class="c1"&gt;# undef&lt;/span&gt;

&lt;span class="c1"&gt;# $user-&amp;gt;logout;&lt;/span&gt;

&lt;span class="c1"&gt;# undef&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Role&lt;/strong&gt; - The role (or trait) builder module which uses the Mars architecture and supports integrating superclasses, mixins, roles, and interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Authenticable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;AUDIT&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${from}&lt;/span&gt;&lt;span class="s2"&gt; missing the email attribute&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;can&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
  &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${from}&lt;/span&gt;&lt;span class="s2"&gt; missing the password attribute&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;can&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;with&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authenticable&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;attr&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Exception! "User missing the password attribute"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  VALUE CLASSES
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Venus::Array&lt;/strong&gt; - The Array class provides methods for manipulating array references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; [1, 2, 3, 4]}, 'Venus::Array')&lt;/span&gt;

&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 4&lt;/span&gt;

&lt;span class="c1"&gt;# $array-&amp;gt;all(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;any(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;each(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;grep(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;map(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;none(sub{ $_ &amp;lt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;one(sub{ $_ == 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $array-&amp;gt;random;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Boolean&lt;/strong&gt; - The Boolean class provides methods for representing and operating on boolean values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 1}, 'Venus::Boolean')&lt;/span&gt;

&lt;span class="nv"&gt;$boolean&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;negate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Code&lt;/strong&gt; - The Code class provides methods for operating on code references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; sub {...}}, 'Venus::Code')&lt;/span&gt;

&lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Float&lt;/strong&gt; - The Float class provides methods for manipulating floating-point numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; '1.23'}, 'Venus::Float')&lt;/span&gt;

&lt;span class="nv"&gt;$float&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Hash&lt;/strong&gt; - The Hash class provides methods for manipulating hash references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; {'1' =&amp;gt; 2, '3' =&amp;gt; 4, '5' =&amp;gt; 6, '7' =&amp;gt; 8}}, 'Venus::Hash')&lt;/span&gt;

&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 4&lt;/span&gt;

&lt;span class="c1"&gt;# $hash-&amp;gt;all(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;any(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;each(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;grep(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;map(sub{ $_ &amp;gt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;none(sub{ $_ &amp;lt; 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;one(sub{ $_ == 0 });&lt;/span&gt;
&lt;span class="c1"&gt;# $hash-&amp;gt;random;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Number&lt;/strong&gt; - The Number class provides methods for manipulating numeric values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1_000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 1000}, 'Venus::Number')&lt;/span&gt;

&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Regexp&lt;/strong&gt; - The Regexp class provides methods for manipulating regular expression references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Regexp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$regexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Regexp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="sx"&gt;qr/(?&amp;lt;greet&amp;gt;\w+) (?&amp;lt;username&amp;gt;\w+)/&lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; qr/(?&amp;lt;greet&amp;gt;\w+) (?&amp;lt;username&amp;gt;\w+)/u}, 'Venus::Regexp')&lt;/span&gt;

&lt;span class="nv"&gt;$regexp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;search&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello venus&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;captures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# ['hello', 'venus']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Scalar&lt;/strong&gt; - The Scalar class provides methods for representing scalar references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Scalar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$scalar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Scalar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; \''}, 'Venus::Scalar')&lt;/span&gt;

&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$scalar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# ""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::String&lt;/strong&gt; - The String class provides methods for manipulating string values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 'hello world'}, 'Venus::String')&lt;/span&gt;

&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;camelcase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "helloWorld"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Undef&lt;/strong&gt; - The Undef class provides methods for representing undefined values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$undef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Undef&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; undef}, 'Venus::Undef')&lt;/span&gt;

&lt;span class="nv"&gt;$undef&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  UTILITY CLASSES
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Venus::Args&lt;/strong&gt; - The Args class provides methods for accessing and manipulating &lt;code&gt;@ARGS&lt;/code&gt; values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;named&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;# optional&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;--help&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({....}, 'Venus::Args')&lt;/span&gt;

&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "--help"&lt;/span&gt;

&lt;span class="c1"&gt;# $args-&amp;gt;get(0); # $ARGV[0]&lt;/span&gt;
&lt;span class="c1"&gt;# $args-&amp;gt;get(1); # $ARGV[1]&lt;/span&gt;
&lt;span class="c1"&gt;# $args-&amp;gt;action; # $ARGV[1]&lt;/span&gt;
&lt;span class="c1"&gt;# $args-&amp;gt;exists(0); # exists $ARGV[0]&lt;/span&gt;
&lt;span class="c1"&gt;# $args-&amp;gt;exists('flag'); # exists $ARGV[0]&lt;/span&gt;
&lt;span class="c1"&gt;# $args-&amp;gt;get('flag'); # $ARGV[0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Box&lt;/strong&gt; - The Box class is a proxy class provides a mechanism for autoboxing the return values of its proxied objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; bless({'value' =&amp;gt; {}}, 'Venus::Hash')}, 'Venus::Box')&lt;/span&gt;

&lt;span class="nv"&gt;$box&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;unbox&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Data&lt;/strong&gt; - The Data class provides methods for accessing and manipulating POD data (and data sections) in the underlying file or &lt;code&gt;__DATA__&lt;/code&gt; token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Data')&lt;/span&gt;

&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;label&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t/%s.t&lt;/span&gt;&lt;span class="p"&gt;'));&lt;/span&gt;

&lt;span class="c1"&gt;# /path/to/t/Venus_Data.t&lt;/span&gt;

&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# {&lt;/span&gt;
&lt;span class="c1"&gt;#   'data' =&amp;gt; ['Venus::Data'],&lt;/span&gt;
&lt;span class="c1"&gt;#   'index' =&amp;gt; 1,&lt;/span&gt;
&lt;span class="c1"&gt;#   'list' =&amp;gt; undef,&lt;/span&gt;
&lt;span class="c1"&gt;#   'name' =&amp;gt; 'name'&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Date&lt;/strong&gt; - The Date class provides methods for manipulating date and time values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;570672000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Date')&lt;/span&gt;

&lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# '1988-02-01T00:00:00Z'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Error&lt;/strong&gt; - The Error class provides methods for creating and throwing exceptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Error')&lt;/span&gt;

&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Exception!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Json&lt;/strong&gt; - The Json class provides methods for encoding and decoding JSON data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt; &lt;span class="s"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Json')&lt;/span&gt;

&lt;span class="nv"&gt;$json&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# {"name": ["Ready", "Robot"], "stable": true, "version": 0.12}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Match&lt;/strong&gt; - The Match class provides an object-oriented switch mechanism (or dispatch table).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Match&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Match&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Match')&lt;/span&gt;

&lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt; 5&lt;/span&gt;&lt;span class="p"&gt;"});&lt;/span&gt;
&lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; 5&lt;/span&gt;&lt;span class="p"&gt;"});&lt;/span&gt;
&lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;none&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="p"&gt;"});&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "?"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Name&lt;/strong&gt; - The Name class provides methods for parsing and formatting package namespace strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Foo/Bar&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 'Foo/Bar'}, 'Venus::Name')&lt;/span&gt;

&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "Foo::Bar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Opts&lt;/strong&gt; - The Opts class provides methods for accessing and manipulating &lt;code&gt;@ARGS&lt;/code&gt; values that are passed as command-line options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Opts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Opts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;--resource&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--help&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;
  &lt;span class="s"&gt;specs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;resource|r=s&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;help|h&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;
  &lt;span class="s"&gt;named&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# optional&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Opts')&lt;/span&gt;

&lt;span class="nv"&gt;$opts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "users"&lt;/span&gt;

&lt;span class="c1"&gt;# $opts-&amp;gt;method; # $resource&lt;/span&gt;
&lt;span class="c1"&gt;# $opts-&amp;gt;get('resource'); # $resource&lt;/span&gt;

&lt;span class="c1"&gt;# $opts-&amp;gt;help; # $help&lt;/span&gt;
&lt;span class="c1"&gt;# $opts-&amp;gt;get('help'); # $help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Path&lt;/strong&gt; - The Path class provides methods for operating on paths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;t/data/planets&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 't/data/planets'}, 'Venus::Path')&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$planets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# [&lt;/span&gt;
&lt;span class="c1"&gt;#   bless({...}, 'Venus::Path'),&lt;/span&gt;
&lt;span class="c1"&gt;#   bless({...}, 'Venus::Path'),&lt;/span&gt;
&lt;span class="c1"&gt;#   ...,&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;

&lt;span class="c1"&gt;# my $mercury = $path-&amp;gt;child('mercury');&lt;/span&gt;
&lt;span class="c1"&gt;# my $content = $mercury-&amp;gt;read;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Process&lt;/strong&gt; - The Process class provides methods for forking and managing processes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 2179356}, 'Venus::Process')&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# do something in child process ...&lt;/span&gt;
  &lt;span class="nv"&gt;$process&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# do something in parent process ...&lt;/span&gt;
  &lt;span class="nv"&gt;$parent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# $parent-&amp;gt;exit;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Random&lt;/strong&gt; - The Random class provides an object-oriented interface for Perl's pseudo-random number generator (or PRNG) which produces a deterministic sequence of bits which approximates true randomness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 42}, 'Venus::Random')&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$random&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# 1&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$random&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Replace&lt;/strong&gt; - The Replace class provides methods for operating on regular expression replacement data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Replace&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;regexp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(world)&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;substr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Replace')&lt;/span&gt;

&lt;span class="nv"&gt;$replace&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;captures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Search&lt;/strong&gt; - The Search class provides methods for operating on regexp search data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;regexp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(hello)&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Search')&lt;/span&gt;

&lt;span class="nv"&gt;$search&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;captures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Space&lt;/strong&gt; - The Space class provides methods for parsing, manipulating, and operating on package namespaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Space&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;foo/bar&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; 'Foo::Bar'}, 'Venus::Space')&lt;/span&gt;

&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Foo::Bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Template&lt;/strong&gt; - The Template class provides minimalist template rendering functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Template&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;From: "{{name}}"&amp;lt;{{ email }}&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Template')&lt;/span&gt;

&lt;span class="nv"&gt;$template&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awncorp&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awncorp@cpan.org&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;# 'From: "awncorp"&amp;lt;awncorp@cpan.org&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Throw&lt;/strong&gt; - The Throw class provides a mechanism for generating and raising errors (exception objects).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$throw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Throw&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'parent' =&amp;gt; 'Venus::Error'}, 'Venus::Throw')&lt;/span&gt;

&lt;span class="nv"&gt;$throw&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Exception!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Try&lt;/strong&gt; - The Try class provides an object-oriented interface for performing complex try/catch operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Try&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$try&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Try')&lt;/span&gt;

&lt;span class="nv"&gt;$try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# try something&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Example::Error&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$caught&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# caught an error (exception)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$caught&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# catch the uncaught&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# always run after try/catch&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$try&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Type&lt;/strong&gt; - The Type class provides methods for casting native data types to objects and the reverse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; []}, 'Venus::Type')&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;deduce&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# bless({'value' =&amp;gt; []}, 'Venus::Array')&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "ARRAY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Vars&lt;/strong&gt; - The Vars class provides methods for accessing &lt;code&gt;%ENV&lt;/code&gt; items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Vars&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awncorp&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;HOME&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/awncorp&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;named&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;iam&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HOME&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({....}, 'Venus::Vars')&lt;/span&gt;

&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;iam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "awncorp"&lt;/span&gt;

&lt;span class="c1"&gt;# $vars-&amp;gt;root; # $ENV{HOME}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;home; # $ENV{HOME}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;get('home'); # $ENV{HOME}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;get('HOME'); # $ENV{HOME}&lt;/span&gt;

&lt;span class="c1"&gt;# $vars-&amp;gt;iam; # $ENV{USER}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;user; # $ENV{USER}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;get('user'); # $ENV{USER}&lt;/span&gt;
&lt;span class="c1"&gt;# $vars-&amp;gt;get('USER'); # $ENV{USER}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Venus::Yaml&lt;/strong&gt; - The Yaml class provides methods for encoding and decoding YAML data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Yaml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Yaml&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt; &lt;span class="s"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# bless({...}, 'Venus::Yaml')&lt;/span&gt;

&lt;span class="nv"&gt;$yaml&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# "---\nname:\n- Ready\n- Robot\nstable: true\nversion: 0.12\n"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Why Try Venus
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You're doing modern OO in Perl 5&lt;/li&gt;
&lt;li&gt;You're interested in modern idiomatic Perl&lt;/li&gt;
&lt;li&gt;You're looking for an architectural standard&lt;/li&gt;
&lt;li&gt;You're partial to convention over configuration&lt;/li&gt;
&lt;li&gt;You're in need of power and performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Inspiration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ruby/ruby"&gt;https://github.com/ruby/ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/crystal-lang/crystal"&gt;https://github.com/crystal-lang/crystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir"&gt;https://github.com/elixir-lang/elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython"&gt;https://github.com/python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Sources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/awncorp/venus"&gt;Venus: OO Standard Library for Perl 5 - Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=28975453"&gt;To learn a new language, read its standard library - Hacker News&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/ProgrammingLanguages/comments/7mzfr6/is_the_standard_library_of_any_major_programming/"&gt;Is the standard library of any major programming language a liability? - ProgrammingLanguages&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  End Quote
&lt;/h2&gt;

&lt;p&gt;"Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves." - Alan Kay&lt;/p&gt;

</content>
    <author>
      <name>Al Newkirk</name>
    </author>
    <id>https://dev.to/iamalnewkirk/introducing-venus-a-new-world-for-perl-5-1mfp</id>
    <published>2022-08-23T11:25:00Z</published>
    <updated>2022-08-23T11:25:00Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="programming"/>
    <category term="tooling"/>
  </entry>
  <entry>
    <title>#578 - Corinna MVP</title>
    <link rel="alternate" href="https://perlweekly.com/archive/578.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Belated Happy Independence Day to all fellow Indians. We celebrated 75th Anniversary of Independence on <strong>15th August</strong>, a proud moment for all of us.</p>
<p>Ever since the release of <strong>Perl v5.36</strong>, everyone is looking forward to the next big thing in the pipeline, <strong>Corinna</strong>. I am sure, you don't need an introduction but if you do then you can take a look at this <a href="https://github.com/Ovid/Cor">official documentation</a>. <strong>Curtis Poe</strong> recently shared the latest update about the <strong>Corinna (MVP)</strong> as accepted by The Perl Steering Committee as detailed in the <a href="https://github.com/Ovid/Cor/blob/master/rfc/mvp.md">document</a>.</p>
<p>Do you follow the latest release to <strong>CPAN</strong> on <a href="https://metacpan.org/recent">MetaCPAN</a>?</p>
<p>I noticed one particular distribution, <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, currently maintained by a friend of mine and colleague at work, <strong>Julien Fiegehenn</strong>. He is on the mission to clear pending issues. He shared the news recently that pull request queue is empty in this <a href="https://twitter.com/simbabque/status/1559267485764816896">Twitter thread</a>. I noticed the distribution has <strong>92.50% coverage</strong>. If you have spare time and would like to contribute then please do help get <strong>100% coverage</strong>.</p>
<p>Perl jobs in London seems getting back on track. Couple of days ago, I received an email about <a href="https://perl.careers/jobs/perl_programmer_business_owner_uk_eu_remote">Perl role in London</a> by Perl Careers. The title of the post caught my eye, <strong>Perl Developer and Business Owner?</strong>.</p>
<p>Last but not the least, I would like to recommend <a href="https://leanpub.com/learning_perl_exercises">Learning Perl Exercises</a> by <strong>brian d foy</strong>. I am sure, you will find it handy.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/578.html</id>
    <published>2022-08-22T10:00:00Z</published>
    <updated>2022-08-22T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #172</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-172/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 172 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-172/</id>
    <published>2022-08-22T00:00:00Z</published>
    <updated>2022-08-22T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Quater-imaginary Business Date</title>
    <link rel="alternate" href="https://dev.to/simongreennet/quater-imaginary-business-date-58ln" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 178
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-178/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-178/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Quater-imaginary Base
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to convert a given number (base 10) to <a href="https://en.wikipedia.org/wiki/Quater-imaginary_base">quater-imaginary base number</a> and vice-versa.</p>

<h3>
  
  
  My solution
</h3>

<p>For this task, I chose to only do the first half of the challenge, that is take a base 10 numbers and covert it to a base -4 number. The general principle is take the number and divide it by -4, where the remainder makes up the solution. I had a few challenges when the resulting division was a negative number, but believe I've got that sorted.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 4
10300

$ ./ch-1.py 15
10103
</code></pre>

</div>



<h2>
  
  
  Task 2: Business Date
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given <code>$timestamp</code> (date with time) and <code>$duration</code> in hours.</p>

<p>Write a script to find the time that occurs <code>$duration</code> business hours after <code>$timestamp</code>. For the sake of this task, let us assume the working hours is 9am to 6pm, Monday to Friday. Please ignore timezone too.</p>

<h3>
  
  
  My solution
</h3>

<p>Time maths is never easy, at least I don't need to worry about timezones, although that wouldn't really be an issue as most (all?) countries change their clocks outside business hours. The excpetion would be Samoa (and later Tokelau) who <a href="https://www.bbc.com/news/world-asia-16351377">skipped a whole day</a> on Friday 30/12/2011.</p>

<p>There are a couple of ways to tackle this task, and I think the biggest challenge is handling a span that covers a weekend. I may have over complicated my solution, let's see what other Team PWC members come up with.</p>

<p>I start by converting the time input with strptime. For Python, this is part of the <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module, and the <a href="https://metacpan.org/pod/DateTime">DateTime</a> module for Perl. I also convert the hours provided into minutes. I also check that the start time is between 9am and 6pm on a weekday.</p>

<p>Next I wind the clock back to 9am Monday. I add the number of working minutes we wound the clock back to the <code>minutes</code> variable (days x 540, hours after 9am x 60 and minutes). We now know how many minutes after 9am Monday we need to add. I split this into <code>days</code> and <code>minutes</code>.</p>

<p>For every five whole days, we need to take 2 extra days for the weekend. Finally I use date math taken the 9am Monday time, and adding the required number of days and minutes to find the end time.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py "2022-08-01 10:30" 4
2022-08-01 14:30

$ ./ch-2.py "2022-08-01 17:00" 3.5
2022-08-02 11:30
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/quater-imaginary-business-date-58ln</id>
    <published>2022-08-21T11:45:37Z</published>
    <updated>2022-08-21T11:45:37Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8355876702800371113</id>
    <published>2022-08-20T23:58:00.000+02:00</published>
    <updated>2022-08-20T23:58:39.472+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdvi) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.59&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.56 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.055000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055000&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053007 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PABLROD/Chart-Plotly-0.042' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Chart::Plotly&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate html/javascript charts from perl data using javascript library plotly.js &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.042&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.041 was 1 year, 9 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.52 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.802' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.802&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: 0.801 was 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.10&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 5.08 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220820&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220720 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.05 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.04 was 2 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9643' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9643&lt;/strong&gt; on 2022-08-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9638 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ABW/Template-Toolkit-3.101' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Template::Toolkit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comprehensive template processing system &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.101&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 137&lt;/li&gt;  &lt;li&gt;Previous version: 3.100 was 3 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016008&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016007 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8355876702800371113/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html" title="(cdvi) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 177: Damm Algorithm and Palindromic Prime Cyclops</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-177-damm-algorithm-and-palindromic-prime-cyclops.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10872</id>
    <published>2022-08-08T20:21:01Z</published>
    <updated>2022-08-18T19:19:14Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 177 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-177/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 14, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Damm Algorithm</h2>

<p><em>You are given a positive number, <code>$n</code>.</em></p>

<p><em>Write a script to validate the given number against the included check digit.</em></p>

<p><em>Please checkout the <a href="https://en.wikipedia.org/wiki/Damm_algorithm">wikipedia page</a> for information.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $n = 5724
Output: 1 as it is valid number
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $n = 5727
Output: 0 as it is invalid number
</code></pre>

<p>The algorithm is a check digit algorithm named after H. Michael Damm, who presented it in 2004.</p>

<p>The process is quite simple. We&#8217;ll use the quasi-group table provided in the afore-mentioned Wikipedia article:</p>

<pre><code>0 3 1 7 5 9 8 6 4 2
7 0 9 2 1 5 4 8 6 3
4 2 0 6 8 7 1 3 5 9
1 7 5 0 9 8 3 4 2 6
6 1 2 3 0 4 5 9 7 8
3 6 7 4 2 0 9 5 8 1
5 8 6 9 7 2 0 1 3 4
8 9 4 5 3 6 2 0 1 7
9 4 3 8 6 1 7 2 0 5
2 5 8 1 4 3 6 7 9 0
</code></pre>

<h3>Damm Algorithm in Raku</h3>

<p>The process is simple. We start with a temporary value of 0. For each digit in the input number, we look up the table with the temporary variable and the digit, and set the temporary variable to the integer found in the table. At the end, the number is valid is the temporary variable is 0. For our test, we will use the two examples provided in the task specification, and we will test all numbers in the <code>5700..5800</code> range.</p>

<pre><code>my @damm =  &lt; 0 3 1 7 5 9 8 6 4 2 &gt;,
            &lt; 7 0 9 2 1 5 4 8 6 3 &gt;,
            &lt; 4 2 0 6 8 7 1 3 5 9 &gt;,
            &lt; 1 7 5 0 9 8 3 4 2 6 &gt;,
            &lt; 6 1 2 3 0 4 5 9 7 8 &gt;,
            &lt; 3 6 7 4 2 0 9 5 8 1 &gt;,
            &lt; 5 8 6 9 7 2 0 1 3 4 &gt;,
            &lt; 8 9 4 5 3 6 2 0 1 7 &gt;,
            &lt; 9 4 3 8 6 1 7 2 0 5 &gt;,
            &lt; 2 5 8 1 4 3 6 7 9 0 &gt;;

sub is-valid ($n) {
    my $t = 0;
    $t = @damm[$t][$_] for $n.comb;
    return $t == 0;
}

for 5724, 5727 -&gt; $test {
    say $test, is-valid($test) ?? " is valid." !! " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for 5700..5800 -&gt; $i {
    print "$i " if is-valid $i;
}
say "";
</code></pre>

<p>This program displays the following output: </p>

<pre><code>$ raku ./damm-algo.raku
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h3>Damm Algorithm in Perl</h3>

<p>The algorithm for finding the check digit is the same as the one for testing whether a number is valid. So, rather than simply testing the validity directly as we did in Raku, we&#8217;ll write a <code>find_check</code> subroutine to find the check digit. Then, a number will be valid if its check digit is 0. Thus, we sort of get the two functions for the price of one. Besides that, the process is essentially the same as in Raku. Check the Raku section above is you need further explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @damm =  (
[ &lt; 0 3 1 7 5 9 8 6 4 2 &gt; ],
[ &lt; 7 0 9 2 1 5 4 8 6 3 &gt; ],
[ &lt; 4 2 0 6 8 7 1 3 5 9 &gt; ],
[ &lt; 1 7 5 0 9 8 3 4 2 6 &gt; ],
[ &lt; 6 1 2 3 0 4 5 9 7 8 &gt; ],
[ &lt; 3 6 7 4 2 0 9 5 8 1 &gt; ],
[ &lt; 5 8 6 9 7 2 0 1 3 4 &gt; ],
[ &lt; 8 9 4 5 3 6 2 0 1 7 &gt; ],
[ &lt; 9 4 3 8 6 1 7 2 0 5 &gt; ],
[ &lt; 2 5 8 1 4 3 6 7 9 0 &gt; ] );

sub find_check {
    my $n = shift;
    my $t = 0;
    $t = $damm[$t][$_] for split //, $n;
    return $t;
}

sub is_valid {
    my $n = shift;
    return find_check($n) == 0;
}

for my $test (5724, 5727) {
    say $test, is_valid($test) ? " is valid." : " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for my $i (5700..5800) {
    print "$i " if is_valid $i;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./damm-algo.pl
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h3>Damm Algorithm in Other Languages</h3>

<p>We now present the same Damm algorithm in the following 18 guest languages (in alphabetic order):</p>

<ul>
<li>awk</li>
<li>C</li>
<li>D</li>
<li>Dart</li>
<li>Go</li>
<li>Java</li>
<li>JavaScript</li>
<li>Julia</li>
<li>Kotlin</li>
<li>Lua</li>
<li>Nim</li>
<li>Pascal</li>
<li>Python</li>
<li>Ring</li>
<li>Ruby</li>
<li>Rust</li>
<li>Scala</li>
<li>Tcl</li>
</ul>

<p>From now on, for all guest language implementations, the test will consist in listing the valid numbers between 5700 and 5800, a range that includes the two test cases (5724 and 5727) suggested in the task specification.</p>

<h4>Damm Algorithm in awk</h4>

<p>The awk programming language has minimal support for arrays. It doesn&#8217;t seem to support two-dimensional arrays, and iniitializing arrays in a pain in the neck (there may be some way, but the documentation is scarce). So we implement the <code>damm</code> lookup array as an array of strings and initialize it by initializing each item in the array (in the <code>populate_damm</code> function). Then we use the <code>substr</code> built-in function to retrieve the wanted value from the strings.</p>

<pre><code>function is_valid(n) {
    t = 0
    for (j = 1; j &lt;= length(n); j++) {
        t = substr(damm[t],substr(n, j, 1) + 1 ,1)
    }
    return t == 0
}
function populate_damm() {
    damm[0] = "0317598642"
    damm[1] = "7092154863"
    damm[2] = "4206871359"
    damm[3] = "1750983426"
    damm[4] = "6123045978"
    damm[5] = "3674209581"
    damm[6] = "5869720134"
    damm[7] = "8945362017"
    damm[8] = "9438617205"
    damm[9] = "2581436790"
}
BEGIN {
    populate_damm()
    print("Valid numbers between 5700 and 5800 are: ")
    for (i  = 5700; i&lt;= 5800; i++) {
        if (is_valid(i)) {
            printf("%d ", i)
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./damm-algo.awk
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<p>Note that I was thinking about a <em>bc</em> implementation of the Damm algorithm, but I gave up the idea because the situation with arrays (and also documentation) is worse that in awk.</p>

<h4>Damm Algorithm in C</h4>

<p>Not much to say, the code is quite clear. Just note that, in the <code>temp = damm[temp][str[i] - '0'];</code> code line, we need to subtract the Ascii value of 0 (48) from the value in the <code>str</code> integer-to-string conversion in order to get proper subscripts. We will have to do the same in a number of other guest language implementations. </p>

<pre><code>#include &lt;stdio.h&gt;

const char damm[10][10] = {
        {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
        {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
        {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
        {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
        {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
        {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
        {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
        {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
        {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
        {2, 5, 8, 1, 4, 3, 6, 7, 9, 0},
    };

int is_valid(int num) {
    int temp = 0;
    char str[10];
    int len = sprintf(str, "%d", num);   // convert input int to string
    str[len] = '\0';
    for (int i = 0; i &lt; len; i++) {
         temp = damm[temp][str[i] - '0'];
    }
    return temp == 0;
}

int main() {
    printf("%s\n", "Valid numbers between 5700 and 5800 are: ");
    for (int i = 5700; i &lt; 5800; i++) {
        if (is_valid(i)) 
            printf("%d ", i);
    }
    printf("%s\n", "");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in D</h4>

<p>As usual, the D syntax is very similar to the C syntax, but D is just a bit simpler to use than C.</p>

<pre><code>import std.stdio;
import std.conv;

auto damm = [
    [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
    [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
    [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
    [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
    [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
    [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
    [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
    [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
    [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
    [2, 5, 8, 1, 4, 3, 6, 7, 9, 0],
];

bool is_valid (int num) {
    string str = to!string(num, 10);
    int temp = 0;
    foreach (ch; str) {
        temp = damm[temp][ch - '0'];
    }
    return temp == 0;
}

void main() {
    writeln("Valid numbers between 5700 and 5800 are: ");
    for (int i = 5700; i &lt; 5800; i++) {
        if (is_valid(i)) 
            printf("%d ", i);
    }
    writeln("");
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Dart</h4>

<p>Like in awk, I haven&#8217;t found a good way to declare and initialize two-dimensional arrays in Dart, and the documentation is quite sparse. So I used the same solution as in awk: an array of strings.</p>

<pre><code>import "dart:io";

var damm = [ "0317598642",
             "7092154863",
             "4206871359",
             "1750983426",
             "6123045978",
             "3674209581",
             "5869720134",
             "8945362017",
             "9438617205",
             "2581436790" ];

void main() {
    print("Valid numbers between 5700 and 5800 are:");
    for (int i = 5700; i &lt;= 5800; i++ ) {
        if (is_valid(i)) {
            stdout.write("$i ");
        }
    }
    stdout.write("\n");
}
bool is_valid(n) {
    var digits = n.toString().split("");
    int temp = 0;
    var len = digits.length;
    for (int i = 0; i &lt; len; i++) { 
        var row = damm[temp];
        var idx = int.parse(digits[i]);
        temp = int.parse(row[idx]);
    }
    return temp == 0;
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Go</h4>

<pre><code>import (
    "fmt"
    "strconv"
)

var damm = [10][10] int {
    {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
    {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
    {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
    {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
    {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
    {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
    {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
    {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
    {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
    {2, 5, 8, 1, 4, 3, 6, 7, 9, 0},
}

func is_valid(num int) bool {
    var n_str = strconv.Itoa(num)
    var temp = 0
    for _, ch := range n_str {
        temp = damm[temp][ch-'0']
    }
    return temp == 0
}

func main() {
    fmt.Println("Valid numbers between 5700 and 5800 are:")
    for i := 5700; i &lt;= 5800; i++ {
        if is_valid(i) {
            fmt.Printf("%d ", i)
        }
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Java</h4>

<pre><code>public class DammCheckDigit {
    private static final int[][] damm = 
        { {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
          {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
          {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
          {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
          {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
          {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
          {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
          {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
          {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
          {2, 5, 8, 1, 4, 3, 6, 7, 9, 0} };

    private static boolean is_valid(Integer num) {
        char[] n = num.toString().toCharArray();
        int temp = 0;
        for (char ch : n) {
            temp = damm[temp][ch - '0'];
        }
        return temp == 0;
    }

    public static void main(String[] args) {
        System.out.printf("%s", "Valid numbers between 5700 and 5800 are:");
        for(int i = 5700; i &lt;= 5800; i++) {
            if (is_valid(i))  System.out.printf("%d ", i);
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in JavaScript</h4>

<pre><code>damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
         [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
         [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
         [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
         [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
         [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
         [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
         [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
         [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
         [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ];

function is_valid (n) {
    let digits = n.toString().split("")
    var temp = 0
    for (var i = 0; i &lt; digits.length; i++) {
        temp = damm[temp][digits[i]]
    }
    return temp == 0
}

console.log("Valid numbers between 5700 and 5800 are:")
for (var i = 5700; i &lt;= 5800; i++) {
    if (is_valid(i)) {
        process.stdout.write(i + " ")
    }
}
console.log("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Julia</h4>

<p>Julia array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][d - '0' + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>function is_valid(num)
    damm = (
        (0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
        (7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
        (4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
        (1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
        (6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
        (3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
        (5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
        (8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
        (9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
        (2, 5, 8, 1, 4, 3, 6, 7, 9, 0))
    temp = 0
    str = string(num)
    for d in str
        temp = damm[temp + 1][d - '0' + 1]
    end
    return temp == 0
end

println("Valid numbers between 5700 and 5800 are: ")
for i in 5700:5800
    if is_valid(i)
        print("$i ")
    end
end
println("")
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./damm-algo.jl
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Kotlin</h4>

<p>Declaring and initializing a matrix in Kotlin is somewhat painful, but the code is otherwise fairly straight forward.</p>

<pre><code>val damm = arrayOf(
    intArrayOf(0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
    intArrayOf(7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
    intArrayOf(4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
    intArrayOf(1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
    intArrayOf(6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
    intArrayOf(3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
    intArrayOf(5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
    intArrayOf(8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
    intArrayOf(9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
    intArrayOf(2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
)

fun is_valid(num: Int): Boolean {
    val n_str = num.toString()
    var temp = 0
    for (d in n_str) {
        temp = damm[temp][d - '0']
    }
    return temp == 0
}

fun main() {
    println("Valid numbers between 5700 and 5800 are: ")
    for (i in 5700..5800) {
        if (is_valid(i)) print("$i ")
    }
    println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Lua</h4>

<p>Like in Julia, Lua array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][ch + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>local damm = {
    {0,3,1,7,5,9,8,6,4,2},
    {7,0,9,2,1,5,4,8,6,3},
    {4,2,0,6,8,7,1,3,5,9},
    {1,7,5,0,9,8,3,4,2,6},
    {6,1,2,3,0,4,5,9,7,8},
    {3,6,7,4,2,0,9,5,8,1},
    {5,8,6,9,7,2,0,1,3,4},
    {8,9,4,5,3,6,2,0,1,7},
    {9,4,3,8,6,1,7,2,0,5},
    {2,5,8,1,4,3,6,7,9,0}
}
function is_valid(num)
    local n_str = tostring(num)
    local temp = 0
    for ch in n_str:gmatch"." do
        temp = damm[temp + 1][ch + 1]
    end
    return temp == 0
end

print("Valid numbers between 5700 and 5800 are: ")
for i = 5700, 5800 do
    if is_valid(i) then
        io.write(i, " ")
    end
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Nim</h4>

<p>Remember that Nim control flow is indentation-based, like Python.</p>

<pre><code>import strutils

let damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
             [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
             [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
             [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
             [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
             [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
             [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
             [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
             [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
             [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ]

proc is_valid(num: int): bool =
  let n_str = intToStr(num)
  var temp = 0
  for i in 0..len(n_str) - 1:
    temp = damm[temp][int(n_str[i]) - 48]
  return temp == 0

echo "Valid numbers between 5700 and 5800 are:"
for i in 5700..5800:
  if is_valid(i):
    stdout.write i, " "
echo ""
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Pascal</h4>

<p>I&#8217;m not particularly fond of Pascal, which I found too verbose (at least, by today&#8217;s criteria), and I&#8217;ve never used it for real-life projects (well, except some quite small Delphi projects a number of decades ago). But, having said that, I must add that Pascal is nonetheless a soft point for me, as it is the first language that I learned in my IS studies (although I had programmed as an autodidact before starting my studies, in Basic, in C, and in the pseudo-assembler of programmable pocket calculators). Pascal is quite clean (perhaps too clean) and it is with Pascal that I first learned the tenets of structured programming.  Other languages that I used at the time and found interesting were Fortran, Ada, Prolog, Caml, and especially Modula-2 (or, was it Modula-3? Quite possibly both, one after the other. I&#8217;m not quite sure). I might try implementations in some of these languages some day, although I have forgotten most about them. Another  language that I also (vaguely) learned at the time of my early studies is Cobol, but I disliked it so much that it is very unlikely that I will ever try to code something in it in the future.</p>

<pre><code>program DammCheckDigit;
uses
  sysutils;

const damm : array[0..9,0..9] of integer =
    ( (0,3,1,7,5,9,8,6,4,2),
      (7,0,9,2,1,5,4,8,6,3),
      (4,2,0,6,8,7,1,3,5,9),
      (1,7,5,0,9,8,3,4,2,6),
      (6,1,2,3,0,4,5,9,7,8),
      (3,6,7,4,2,0,9,5,8,1),
      (5,8,6,9,7,2,0,1,3,4),
      (8,9,4,5,3,6,2,0,1,7),
      (9,4,3,8,6,1,7,2,0,5),
      (2,5,8,1,4,3,6,7,9,0) );

function is_valid(num : integer) : boolean;
var
    temp, i : integer;
    n_str : string;
begin
    n_str := inttostr(num);
    temp := 0;
    for i := 0 to length(n_str) do
    begin
        temp := damm[temp, ord(n_str[i]) - ord ('0')];
    end;
    is_valid := temp=0;
end;

var
    i : integer;
begin
    writeln('Valid numbers between 5700 and 5800 are:');
    for i := 5700 to 5800 do
    begin
        if is_valid(i) then
             write(i, ' ');
    end;
    writeln
end.

{
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797 
}
</code></pre>

<h4>Damm Algorithm in Python</h4>

<pre><code>damm = (
    (0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
    (7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
    (4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
    (1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
    (6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
    (3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
    (5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
    (8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
    (9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
    (2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
)

def is_valid(num: int) -&gt; bool:
  temp = 0
  for d in str(num):
    temp = damm[temp][int(d)] 
  return temp == 0

print("Valid numbers between 5700 and 5800 are:")
for i in range(5700, 5801):
  if is_valid(i):
    print(i, end=' ')
print("")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./damm-algo.py
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Ring</h4>

<p>Like in Julia and Lua, array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][ch - '0' + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
         [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
         [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
         [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
         [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
         [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
         [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
         [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
         [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
         [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ]

see "Valid numbers between 5700 and 5800 are:" + nl
for i = 5700 to 5800
    if is_valid(i)
        see "" + i + " "
    ok
next
see " " + nl

func is_valid(num)
    temp = 0
    n = string(num)
    for ch in n
        temp = damm[temp + 1][ch - '0' + 1]
    next
    return temp = 0
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./damm-algo.ring
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Ruby</h4>

<p>The Ruby implementation is very simple and very concise, thanks to the built-in <code>digits</code> function. Note, however, that this function returns the digits in an inverse order, so we need to reverse it.</p>

<pre><code>def is_valid (n)
    damm = [ [0,3,1,7,5,9,8,6,4,2],
             [7,0,9,2,1,5,4,8,6,3],
             [4,2,0,6,8,7,1,3,5,9],
             [1,7,5,0,9,8,3,4,2,6],
             [6,1,2,3,0,4,5,9,7,8],
             [3,6,7,4,2,0,9,5,8,1],
             [5,8,6,9,7,2,0,1,3,4],
             [8,9,4,5,3,6,2,0,1,7],
             [9,4,3,8,6,1,7,2,0,5],
             [2,5,8,1,4,3,6,7,9,0] ]
    temp = 0
    for ch in n.digits.reverse
        temp = damm[temp][ch]
    end
    return temp == 0
end

puts("Valid numbers between 5700 and 5800 are:")
for i in 5700..5800
    if is_valid(i)
        printf("%d ", i)
    end
end
puts("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Rust</h4>

<pre><code>fn is_valid(num: u32) -&gt; bool {
    static DAMM: [[u8; 10]; 10] = [
        [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
        [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
        [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
        [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
        [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
        [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
        [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
        [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
        [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
        [2, 5, 8, 1, 4, 3, 6, 7, 9, 0],
    ];

    let mut temp = 0;
    let n_str = num.to_string();
    let digits = n_str.bytes();
    for i in digits {
        temp = DAMM[temp as usize][i as usize - 48];
    };
    return temp == 0
}

fn main() {
    println!("{}", "Valid numbers between 5700 and 5800 are:");
    for i in 5700..5800 {
        if is_valid(i) {
            print!("{} ", i);
        }
    }
    println!("{}", " ");
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Scala</h4>

<pre><code>object DammCheckDigit extends App {
  var damm =
    Vector(
      Vector(0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
      Vector(7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
      Vector(4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
      Vector(1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
      Vector(6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
      Vector(3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
      Vector(5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
      Vector(8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
      Vector(9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
      Vector(2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
    )

  def is_valid(num: Int): Boolean = {
    val num_str = num.toString.getBytes
    var temp = 0
    for (ch &lt;- num_str) {
      temp = damm(temp)(ch - '0')
    }
    return temp == 0
  }

  println("Valid numbers between 5700 and 5800 are:")
  for (i &lt;- 5700 to 5800) {
    if (is_valid(i)) {
      printf("%d ", i)
    }
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Tcl</h4>

<p>As in awk and Dart, I haven&#8217;t found a good way to declare and initialize two-dimensional arrays in Tcl, and the documentation is quite sparse. So I used the same solution as in awk and Dart for the conversion matrix: an array of strings. My knowledge of Tcl dates from the 1990s and is very rusty, so I initially had an interpreter error on almost every code line. So, be aware that my implementation certainly doesn’t satisfy the best practices of this language.</p>

<pre><code>proc is_valid {n} {
    set damm(0) "0317598642"
    set damm(1) "7092154863"
    set damm(2) "4206871359"
    set damm(3) "1750983426"
    set damm(4) "6123045978"
    set damm(5) "3674209581"
    set damm(6) "5869720134"
    set damm(7) "8945362017"
    set damm(8) "9438617205"
    set damm(9) "2581436790"

    set temp 0
    foreach ch [split $n {}] {
        set row $damm($temp)
        set temp [ string index $row $ch ]
    }
    return [ expr $temp == 0 ? 1 : 0]
}

puts "Valid numbers between 5700 and 5800 are: "
for {set i 5700} {$i &lt;= 5800} {incr i} {
    if [ is_valid $i ] {
        puts -nonewline  "${i} "
    }
}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./damm-algo.tcl
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h2>Task 2: Palindromic Prime Cyclops</h2>

<p><em>Write a script to generate first 20 Palindromic Prime Cyclops Numbers.</em></p>

<blockquote>
  <p><em>A cyclops number is a number with an odd number of digits that has a zero in the center only.</em></p>
</blockquote>

<p><em>Output</em></p>

<pre><code>101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049,
1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821,
1360631, 1390931, 1490941, 1520251
</code></pre>

<h3>Palindromic Prime Cyclops in Raku</h3>

<p>In order to reduce the pointless computations, we&#8217;ll only test number ranges with an odd number of digits (<code>100..999, 10000..99999, 1000000..9999999</code>). As it turns out, the process is quite fast (about 2.6 seconds), so that performance enhancement wasn&#8217;t really required. I find it nonetheless better to avoid useless computations.</p>

<pre><code>sub is-cyclops ($n) {
    my $length = $n.chars;
    return False if $length %% 2;
    my $mid = ($length - 1) /2;
    return False if substr($n, $mid, 1) != 0;
    return False if $n.comb[0..$mid-1] ~~ /0/;
    return False if $n.comb[$mid+1..$length-1] ~~ /0/;
    return True;
}

my $count = 0;
for |(100..999), |(10000..99999), |(1000000..9999999) -&gt; $i {
    next unless $i eq $i.flip;
    next unless $i.is-prime;
    if is-cyclops $i {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./cyclops.raku
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251

real    0m2,573s
user    0m0,015s
sys     0m0,015s
</code></pre>

<h3>Palindromic Prime Cyclops in Perl</h3>

<p>This is a port to Perl of the Raku program above. Since Perl doesn&#8217;t have a built-in <code>is_prime</code> subroutine, we roll out our own.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub is_cyclops {
    my $n = shift;
    my $len = length $n;
    return 0 if $len % 2 == 0;
    my $mid = ($len - 1) /2;
    return 0 if substr($n, $mid, 1) != 0;
    return 0 if (split //, $n)[0..$mid-1] =~ /0/;
    return 0 if (split //, $n)[$mid+1..$len-1] =~ /0/;
    return 1;
}

sub is_prime {
   my $n = shift;
   return 1 if $n == 2;
   return 0 if $n % 2 == 0;
   return 0 if $n == 1;
   my $p = 3;
   my $sqrt = sqrt $n;
   while ($p &lt;= $sqrt) {
       return 0 if $n % $p == 0;
       $p += 2;
   }
   return 1;
}

my $count = 0;
for my $i (100..999, 10000..99999, 1000000..9999999) {
    next unless $i eq reverse $i;
    next unless is_cyclops $i;
    if (is_prime $i) {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./cyclops.pl
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h3>Palindromic Prime Cyclops in Other Languages</h3>

<p>We now present the same palindromic prime cyclop implementations in the following 8 guest languages:</p>

<ul>
<li>Julia</li>
<li>JavaScript</li>
<li>Kotlin</li>
<li>Lua</li>
<li>Python</li>
<li>Ring</li>
<li>Ruby</li>
<li>Coconut</li>
</ul>

<h4>Palindromic Prime Cyclops in Julia</h4>

<p>I like the concision of Perl and Raku postfix conditionals such as:</p>

<pre><code>return False if substr($n, $mid, 1) != 0;
return False if $n.comb[0..$mid-1] ~~ /0/;
return False if $n.comb[$mid+1..$length-1] ~~ /0/;
return True;
</code></pre>

<p>In most other languages, you would need three code lines for each case, for example in JavaScript:</p>

<pre><code>if (s[mid] != '0') {
    return false
}
if (s.slice(0, mid-1).search('0') &gt;= 0) {
    return false
}
if (s.slice(mid+1).search('0') &gt;= 0) {
    return false
}
return true
</code></pre>

<p>Julia doesn&#8217;t have postfix conditionals, but you can use short-circuit evaluation of the <code>&amp;&amp;</code> and <code>||</code> operators as an alternative to short <code>if</code> statements to reach the same concision.</p>

<p>The short-circuit evaluation, which is common to most imperative programming languages, means that:</p>

<ul>
<li>In the expression a &amp;&amp; b, the subexpression b is only evaluated if a evaluates to true.</li>
<li>In the expression a || b, the subexpression b is only evaluated if a evaluates to false.</li>
</ul>

<p>Instead of <code>if &lt;cond&gt; &lt;statement&gt; end</code>, one can write <code>&lt;cond&gt; &amp;&amp; &lt;statement&gt;</code> (which could be read as: <code>&lt;cond&gt; and then &lt;statement&gt;</code>). Similarly, instead of <code>if ! &lt;cond&gt; &lt;statement&gt; end</code>, one can write <cond> || <statement> (which could be read as: <code>&lt;cond&gt; or else &lt;statement&gt;</code>). This idiomatic alternative to short <code>if</code> statement is frequently used in Julia. Although most languages have the short-circuit behavior of logical operators, not many of them support this construct with an ending statement. Raku and Perl do, but this is not commonly used because the <code>return false if ...</code> is admittedly clearer. In the seven guest languages used here, only Kotlin also supports this construct.</p>

<p>So, in Julia, we will have, for example:</p>

<pre><code>len % 2 == 0 &amp;&amp; return false
...
s[mid] == '0' || return false
</code></pre>

<p>This is our Julia implementation using this concise construct:</p>

<pre><code>using Primes

function is_cyclops(n)
    s = string(n)
    len = length(s)
    len % 2 == 0 &amp;&amp; return false
    mid = Int((len + 1) /2)
    s[mid] == '0' || return false
    if occursin('0', s[1:mid-1]) || occursin('0', s[mid+1:len])
        return false
    end
    return true;
end

count = 0
for i = [101:999; 10000:99999; 1000000:9999999]
    string(i) != reverse(string(i)) &amp;&amp; continue
    is_cyclops(i) || continue
    if isprime(i)
        print("$i ")
        global count += 1
        count &gt;= 20 &amp;&amp; break
    end
end
println("")
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./cyclop.jl
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in JavaScript</h4>

<p>JavaScript doesn&#8217;t have a built-in function for prime numbers (just as almost all other guest languages to follow). So we roll out our own <code>is_prime</code> function (ported from the Perl implementation above).</p>

<p>It also doesn&#8217;t seem possible to combine ranges as we&#8217;ve done previously in other languages, so we use a <code>if ... else if ... else if ...</code> construct to simulate range concatenation.</p>

<pre><code>function is_cyclops (n) {
    let s = n.toString()
    let len = s.length
    if (len % 2 == 0) {
        return false
    }

    let mid = (len - 1) / 2
    if (s[mid] != '0') {
        return false
    }

    if (s.slice(0, mid-1).search('0') &gt;= 0) {
        return false
    }
    if (s.slice(mid+1).search('0') &gt;= 0) {
        return false
    }
    return true
}

function is_prime(n) {
    if (n == 2) {
        return true
    }
    if (n &lt; 2 || n % 2 == 0) {
        return false
    }
    var p = 3
    let sqrt_n = Math.sqrt(n)
    while (p &lt;= sqrt_n) {
        if (n % p == 0) {
            return false
        }
        p += 2
    }
    return true
}

var count = 0
var i = 100
while (count &lt; 20) {
    i++
    if (i == 999) {
        i = 10000
    } else if (i == 99999) {
        i = 1000000
    } else if (i &gt;= 9999999) {
        break
    }
    if (i.toString() != i.toString().split("").reverse().join("")) {
        continue;
    }
    if (! is_cyclops(i)) {
        continue;
    }
    if (is_prime(i)) {
        process.stdout.write(i + " ")
        count++
    }
}
console.log("")
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Kotlin</h4>

<p>I do not know whether the short-circuit evaluation alternative to short <code>if</code> statement described above in the context of the Julia language is as commonly used in Kotlin as it is in Julia, but, since it works in Kotlin, I&#8217;ll use it here. Also note that we need to implement our own <code>is_prime</code> function in Kotlin.</p>

<pre><code>fun is_prime(n: Int): Boolean {
    n == 2 &amp;&amp; return true
    if (n &lt; 2 || n % 2 == 0) {
        return false
    }
    var p = 3
    val sqrt_n : Int = Math.sqrt(n.toDouble()).toInt()
    while (p &lt;= sqrt_n) {
        n % p == 0 &amp;&amp; return false
        p += 2
    }
    return true
}

fun is_cyclops(num: Int): Boolean {
    val s = num.toString()
    val len = s.length
    len % 2 == 0 &amp;&amp; return false
    val mid = ((len - 1) /2).toInt()
    s[mid] == '0' || return false
    if ('0' in s.slice(0 until mid) or '0' in s.slice(mid+1 until len) {
        return false
    }
    return true
}

fun main() {
    var count = 0
    var i = 100
    while (count &lt; 20) {
        i++
        if (i == 999) {
             i = 10000
        } else if (i == 99999) {
            i = 1000000
        } else if (i &gt;= 9999999) {
            break
        }
        if (i.toString() != i.toString().reversed()) {
            continue;
        }
        if (! is_cyclops(i)) {
            continue;
        }
        if (is_prime(i)) {
            print("$i ")
            count++
        }
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>    101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Lua</h4>

<p>Lua doesn&#8217;t have a <code>next</code> or <code>continue</code> statement to  go directly to the next iteration of a loop, because &#8220;the language is designed to be small.&#8221; I&#8217;m not sure it is a very good reason, as, in my humble opinion, this kind of statement is very useful. This is the reason for which we have two <code>goto skip</code> statements in the main part of the program. I know very well what Edsger Dijkstra said in his famous letter to ACM  &#8220;Go To Statement Considered Harmful,&#8221; but Donald Knuth commented that a &#8220;goto forward&#8221; within the same routine wasn&#8217;t that bad. This is the case here. Having said that, I would definitely prefer if Lua had a <code>continue</code> or <code>next</code> statement rather than a <code>goto</code> statement.</p>

<p>We also have to implement a <code>is_prime</code> function here.</p>

<pre><code>local function is_cyclops(num)
    local n_str = tostring(num)
    size = string.len(n_str)
    if size % 2 == 0 then
        return false
    end
    mid = (size + 1) / 2
    if string.sub(n_str, mid, mid ) ~= '0' then
        return false
    end
    if string.sub(n_str, 1, mid-1):find "0" ~= nil then
        return false
    end
    if string.sub(n_str, mid+1, len):find "0" ~= nil then
        return false
    end
    return true
end

local function is_prime(n)
    if n == 2 then
        return true
    end
    if n &lt; 2 or n % 2 == 0 then
        return false
    end
    local p = 3
    sqrt_n = math.sqrt(n)
    while p &lt;= sqrt_n do
        if n % p == 0 then
            return false
        end
        p = p + 2
    end
    return true
end

count = 0
i = 100
while count &lt; 20 do
    i = i + 1
    if i == 999 then
        i = 10000
    elseif i == 99999 then
        i = 1000000
    elseif i &gt;= 9999999 then
        break
    end

    if i ~= tonumber(string.reverse(tostring(i))) then
        goto skip
    end
    if not is_cyclops(i) then
        goto skip
    end
    if is_prime(i) then
        io.write(i, " ")
        count = count + 1
    end
    ::skip::
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Python</h4>

<pre><code>import math
from re import search
from itertools import chain

def is_prime(n):
  if n == 2:
    return True
  if n == 0 or n == 1 or n % 2 == 0:
    return False
  p = 3
  sqrt_n = math.sqrt(n)
  while (p &lt;= sqrt_n):
    if ((n % p) == 0):
      return False
    p += 2
  return True

def is_cyclops (num):
  s = str(num)
  size = len(s)
  if size % 2 == 0:
    return False
  mid = int((size - 1) / 2)
  if s[mid] != '0':
    return False
  if search(r"0", s[0:mid-1]) or search(r"0", s[mid+1:size-1]):
    return False
  return True

count = 0
myrange = chain(range(100, 999), range(10000, 99999), range(1000000, 9999999))
for i in myrange:
  if str(i) != str(i)[::-1]:
    continue
  if not is_cyclops(i):
    continue
  if is_prime(i):
    print(i, end=' ')
    count += 1
    if count &gt;= 20: 
      break

print("")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./cyclop.py
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Ring</h4>

<p>As far as I can tell, Ring also doesn&#8217;t have <code>continue</code> or <code>next</code> statements (and also no <code>last</code> and no <code>break</code>). Or, at least, I couldn&#8217;t find them (or an equivalent) in the documentation. So I had to use nested <code>if</code> statements, something that I don’t like too much. It also appears that there is no built-in function for reversing a string, so I wrote a <code>is_palindrome</code> function. And also a <code>is_prime</code> function. Also note that the equality operator (<code>==</code> in many languages) is spelled with a single equal sign in Ring, so we have for example <code>if n % p = 0</code>. I wonder how the compiler can distinguish it from the assignment operator, there must be some cases that are ambiguous.</p>

<pre><code>i = 100
count = 0
while count &lt; 20
    i++
    if i = 999
        i = 10000
    ok
    if i = 99999
        i = 1000000
    ok
    if is_palindrome(i)
        if is_cyclops(i)
            if is_prime(i)
                count++
                see "" + i + " "
            ok
       ok
   ok
end
see "" + nl

func is_prime (n)
    if n = 2 
        return true
    ok
    if n &lt; 2 or n % 2 = 0
        return false
    ok
    p = 3
    sqrt_n = sqrt(n)
    while p &lt; sqrt_n
        if n % p = 0
            return false
        ok
        p++
    end
    return true

func is_cyclops(n)
    s = "" + n
    size = len(s)
    if size % 2 = 0
        return false
    ok
    mid = ( size + 1) / 2
    if s[mid] != 0
        return false
    ok

    if substr(left(s, mid-1), "0") &gt; 0
        return false
    ok
    if substr(right(s, mid-1), "0") &gt; 0
        return false
    ok
    return true

func is_palindrome(n)
    s = "" + n
    size = len(s)
    for i = 1 to size/2
        if s[i] != s[size - i + 1]
            return false
        ok
    next
    return true
</code></pre>

<p>Output:</p>

<pre><code>$ ring  ./cyclop.ring
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Ruby</h4>

<p>Ruby has a built-in <code>prime</code> function, so we don&#8217;t need to implement it. I found a way to combine ranges, but I must admit that this is copied from a post on Stack Overflow, I would not have found it by myself.</p>

<pre><code>require 'prime'

def is_cyclops (num) 
    s = num.to_s
    len = s.length;
    if len % 2 == 0 then
        return false
    end
    mid = (len - 1) / 2
    if s[mid] != '0' then
        return false
    end
    if s[0..mid-1][/0/] || s[mid+1..len-1][/0/]
        return false
    end 
    return true
end

count = 0;
range = [ 100..999, 10000..99999, 1000000..9999999 ].map { |r| Array(r) }.inject( :+ )
for i in range
    if i.to_s != i.to_s.reverse || ! is_cyclops(i)
        next
    end
    if i.prime?
        printf("%d ", i)
        count += 1;
        if count == 20
            break
        end
    end
end
puts ""
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Coconut (a Functional Extension of Python)</h4>

<p><em>This section on Coconut was added on August 18, 2022.</em></p>

<p>Coconut is a variant of Python built for functional programming. It is actually a kind of extension of Python, and Coconut code is in fact compiled to Python code. The documentation is still somewhat limited, but there is a good <a href="https://coconut.readthedocs.io/en/latest/HELP.html#case-study-1-factorial">Coconut Tutorial</a> and a reference <a href="https://coconut.readthedocs.io/en/latest/DOCS.html">Coconut Documentation</a>.</p>

<p>I was interested in trying to use Coconut for this task essentially because of its support to pipeline style programming. Since we&#8217;re looking for the first twenty integers having a certain set of properties (prime, palindromic, with an odd number of digits, with a 0 in the middle and no other 0, etc.), it is appealing to use a pipeline of filters, one for each of these properties, as done in the last (main) section of the code below.</p>

<pre><code>import math
from re import search

def is_prime(n):
    case n:
        match 0:
            return False
        match 1:
            return False
        match 2:
            return True
        match _ is int if n &gt; 2:
            if n % 2 == 0:
                return False
            p = 3
            sqrt_n = math.sqrt(n)
            while (p &lt;= sqrt_n):
                if (n % p) == 0:
                    return False
                p += 2
            return True

def is_cyclops (num):
  s = str(num)
  size = len(s)
  mid = int((size - 1) / 2)
  if s[mid] != '0':
    return False
  if search(r"0", s[0:mid-1]) or search(r"0", s[mid+1:size-1]):
    return False
  return True

range(100, 999) :: range(10000, 99999) :: range(1000000, 9000000) \
|&gt; filter$( -&gt; str(_) == str(_)[::-1]) \    # palindrome
|&gt; filter$( -&gt; len(str(_)) %2 != 0) \       # odd number of digits
|&gt; filter$(is_cyclops) |&gt; filter$(is_prime) \
|&gt;  list |&gt; .$[:20] |&gt; print
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 21, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>RFC: new API for Type::Params</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2022/08/rfc-new-api-for-typeparams.html"/>
    <id>tag:blogs.perl.org,2022:/users/toby_inkster//1019.10875</id>
    <published>2022-08-18T12:27:59Z</published>
    <updated>2022-08-18T12:53:31Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Moose" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Type-Tiny" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="typetiny" label="Type-Tiny" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>Firstly, I'm not planning on breaking compatibility with Type::Params. The new API would live under a different namespace, such as Type::Params2.</p>

<p>The API for Type::Params is currently:</p>
<pre style="background:#ffe; border:1px solid #cc9; font-size:80%; padding: 4px">
use feature 'state';
use Type::Params qw( compile compile_named_oo );
use Types::Standard -types;

sub function_with_positional_parameters {
  state $check = compile( ArrayRef, Int, Int );
  my ( $list, $start, $end ) = $check->( @_ );

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

sub function_with_named_parameters {
  state $check = compile_named_oo( list => ArrayRef, start => Int, end => Int );
  my ( $arg ) = $check->( @_ );

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>Alternatively, there's:</p>
<pre style="background:#ffe; border:1px solid #cc9; font-size:80%; padding: 4px">
use Type::Params qw( wrap_subs compile_named_oo );
use Types::Standard -types;

wrap_subs function_with_positional_parameters => [ ArrayRef, Int, Int ];

sub function_with_positional_parameters {
  my ( $list, $start, $end ) = @_;

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

wrap_subs function_with_named_parameters =>
  compile_named_oo( list => ArrayRef, start => Int, end => Int );

sub function_with_named_parameters {
  my ( $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>My suggested API is:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
use feature 'state';
use Type::Params2;
use Types::Standard -types;

sub function_with_positional_parameters {
  state $check = signature(
    pos => [ ArrayRef, Int, Int ],
  );
  my ( $list, $start, $end ) = $check->( @_ );

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

sub function_with_named_parameters {
  state $check = signature(
    named => [ list => ArrayRef, start => Int, end => Int ],
  );
  my ( $arg ) = $check->( @_ );

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>It would also support the inside-out technique:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
use Type::Params2;
use Types::Standard -types;

signature_for function_with_positional_parameters => (
  pos => [ ArrayRef, Int, Int ],
);

sub function_with_positional_parameters {
  my ( $list, $start, $end ) = @_;

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

signature_for function_with_named_parameters => (
  named => [ list => ArrayRef, start => Int, end => Int ],
);

sub function_with_named_parameters {
  my ( $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>There would be a shortcut for methods:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
signature_for method_with_named_parameters => (
  method => 1,
  named  => [ list => ArrayRef, start => Int, end => Int ],
);

sub method_with_named_parameters {
  my ( $self, $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>Comments? Do people think this would be an improvement?</p>]]>
        
    </content>
</entry>
  <entry>
    <title>#577 - Optimism and numbers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/577.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>last week Mohammad expressed his optimism about Perl rising again. It's nice to have a gut feeling about that, but I would also like to see the numbers. So I looked at the stats I've been collecting for a while: The number of <a href="https://szabgab.com/cpan-number-of-visits.html">visits to CPAN</a>. More specifically these are the number of "entrances" to MetaCPAN (and in earlier times to SCO as well.) as measured by Google Analytics.</p>
<p>My assumption is that we can measure well the level of Perl usage by the number of visits to <a href="https://metacpan.org/">MetaCPAN</a>.</p>
<p>The number for July 2022 does not indicate any (positive) changes, but it is probably too early to see any effects anyway.</p>
<p>However, looking at the numbers I noticed that there was a nice increase in the activity in 2012. Actually starting in August 2011. This increased activity lasted about a year then the decline continued and by 2014 the activity was below that of the 2011 level.</p>
<p>I could find 2 Perl-related events preceding the increased activity. In May 2011 the release of perl 5.14 and in July the opening of MetaCPAN. Neither seem to explain the change. So I am turning to you:</p>
<p>What other things happened in or out of the Perl community that might explain that sudden increase of visitors to CPAN?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/577.html</id>
    <published>2022-08-15T10:00:00Z</published>
    <updated>2022-08-15T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Random redirect</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-15T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-random-redirect"/>  <id>https://perlmaven.com/dancer2-solution-2-random-redirect</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Cyclops Validation</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/14#pwc177" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to validate the given number 
against the included check digit.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

my @damm_matrix;
$damm_matrix[0] = [0, 7, 4, 1, 6, 3, 5, 8, 9, 2];
$damm_matrix[1] = [3, 0, 2, 7, 1, 6, 8, 9, 4, 5];
$damm_matrix[2] = [1, 9, 0, 5, 2, 7, 6, 4, 3, 8];
$damm_matrix[3] = [7, 2, 6, 0, 3, 4, 9, 5, 8, 1];
$damm_matrix[4] = [5, 1, 8, 9, 0, 2, 7, 3, 6, 4];
$damm_matrix[5] = [9, 5 ,7, 8, 4, 0, 2, 6, 1, 3];
$damm_matrix[6] = [8, 4, 1, 3, 5, 9, 0, 2, 7, 6];
$damm_matrix[7] = [6, 8, 3, 4, 9, 5, 1, 0, 2, 7];
$damm_matrix[8] = [4, 6, 5, 2, 7, 8, 3, 1, 0, 9];
$damm_matrix[9] = [2, 3, 9, 6, 8, 1, 4, 7, 5, 0];

sub damm_validation{
    my($x) = @_;
    my @digits = split(//, $x);
    my $interim_digit = 0;
    while(my $d = shift @digits){
        $interim_digit = $damm_matrix[$d][$interim_digit];
    }
    return boolean($interim_digit == 0);
}

MAIN:{
    print damm_validation(5724) . "\n";
    print damm_validation(5727) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Damm Validation really boils down to a series of table lookups. Once that is determined
we need to encode the table and then perform the lookups in a loop. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 Palindromic Prime Cyclops Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
no warnings q/recursion/;
use Math::Primality qw/is_prime/;

sub n_cyclops_prime_r{
    my($i, $n, $cyclops_primes) = @_;
    return @{$cyclops_primes} if @{$cyclops_primes} == $n;
    push @{$cyclops_primes}, $i if is_prime($i) &amp;&amp; 
                                   length($i) % 2 == 1 &amp;&amp;
                                   join("", reverse(split(//, $i))) == $i &amp;&amp;
                                   (grep {$_ == 0} split(//, $i))   == 1 &amp;&amp; 
                                   do{my @a = split(//, $i);
                                      $a[int(@a / 2)]
                                   } == 0;
    n_cyclops_prime_r(++$i, $n, $cyclops_primes);
}

sub n_cyclops_primes{
    my($n) = @_;
    return n_cyclops_prime_r(1, $n, []);
}

MAIN:{
    print join(", ", n_cyclops_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I recently saw the word &lt;em&gt;whipupitide&lt;/em&gt; used by Dave Jacoby and here is, I think, a good
example of it. We need to determine if a number is prime, palindromic, and cyclops. In 
Perl we can determine all of these conditions very easily. &lt;/p&gt;

&lt;p&gt;Just to add a bit of fun I decided to use a recursive loop. Out of necessity this will 
have a rather deep recursive depth, so we'll need to set &lt;code&gt;no warnings q/recursion/&lt;/code&gt; or 
else perl will complain when we go deeper than 100 steps. We aren't using too much memory
here, but if that were a concern we could do Perl style 
&lt;a href="https://perldoc.perl.org/functions/goto"&gt;tail recursion&lt;/a&gt; with a &lt;code&gt;goto __SUB__&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/"&gt;Challenge 177&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc177</id>
    <published>2022-08-14T17:59:00-04:00</published>
    <updated>2022-08-14T17:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4422026552243902575</id>
    <published>2022-08-13T21:58:00.001+02:00</published>
    <updated>2022-08-13T22:12:41.051+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdv) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.53" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.51 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.053007" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.053007&lt;/strong&gt; on 2022-08-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053005 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.3.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.3.0&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: v1.2.1 was 8 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.32&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.30 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.0&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.1 was 5 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSHELOR/Digest-SHA-6.03" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Digest::SHA&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for SHA-1/224/256/384/512 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.03&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 6.02 was 4 years, 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/FFI-Platypus-2.00" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.00&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 1 month, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/IPC-Run-20220807.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IPC::Run&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - system() and background procs w/ piping, redirs, ptys (Unix, Win32) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220807.0&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 20200505.0 was 2 years, 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Memoize-1.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.10&lt;/strong&gt; on 2022-08-11&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.09 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.7" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.7&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.6 was 9 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Object-Pad-0.68" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.66 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OALDERS/Pithub-0.01039" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01039&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01038 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCONWAY/PPR-0.001004" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001004&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.001002 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Proc-Fork-0.807" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Proc::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple, intuitive interface to the fork() system call &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.807&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.05 was 20 years, 4 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.63" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Scalar::List::Utils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.63&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 159&lt;/li&gt;  &lt;li&gt;Previous version: 1.62 was 4 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9638" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9638&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9635 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BIGJ/Test-Warn-0.37" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Warn&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to test methods for warnings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.37&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.36 was 4 years, 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ISHIGAKI/Text-CSV-2.02" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Text::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comma-separated values manipulator (using XS or PurePerl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 70&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 1 year, 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4422026552243902575/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html" title="(cdv) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#576 - Perl is on the Rise?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/576.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Personally I have noticed the fresh energy among all <strong>Perl</strong> fans ever since the release of latest <strong>Perl v5.36</strong>. I am telling this based on the amount of positive noise I heard on various public platform. There are still few in the pipeline that would give further push e.g. <strong>Corinna</strong>. If you are interested to know more then please do checkout this <a href="https://github.com/Ovid/Cor/wiki">page</a> maintained by <strong>Curtis Poe</strong>.</p>
<p><a href="https://metacpan.org/recent">MetaCPAN</a> is another place where you can see all the latest cool <strong>Perl</strong> projects. I know plenty of volunteers helping to improve the code base. If you use a distribution and you like it then why not share your experience with the <strong>Perl Community</strong> and submit your proposal to <a href="http://cfp.perladvent.org">Perl Advent Calendar 2022</a>? Or if you have created one then why not share with rest of the world.</p>
<p>If you are new to <strong>Perl</strong> and needs help then please do give us a shout. There are plenty of help available on various public platforms.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/576.html</id>
    <published>2022-08-08T10:00:00Z</published>
    <updated>2022-08-08T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Route-based Multi-Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-08T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-route-based-multicounter"/>  <id>https://perlmaven.com/dancer2-solution-2-route-based-multicounter</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Permuted Reversibly</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/07#pwc176" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the smallest integer x such that x, 2x, 3x, 4x, 5x and 6x are 
permuted multiples of each other.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_permuted{
    my($x, $y) = @_;
    my(@x, @y); 
    map {$x[$_]++} split(//, $x);
    map {$y[$_]++} split(//, $y);
    return false if $#x != $#y;
    my @matched = grep {(!$x[$_] &amp;&amp; !$y[$_]) || ($x[$_] &amp;&amp; $y[$_] &amp;&amp; $x[$_] == $y[$_])} 0 .. @y - 1;
    return true if @matched == @x;
    return false;
}

sub smallest_permuted{
    my $x = 0;
    {
        $x++;
        redo unless is_permuted($x, 2 * $x)     &amp;&amp; is_permuted(2 * $x, 3 * $x) &amp;&amp; 
                    is_permuted(3 * $x, 4 * $x) &amp;&amp; is_permuted(4 * $x, 5 * $x) &amp;&amp; 
                    is_permuted(5 * $x, 6 * $x);
    }
    return $x;
}

MAIN:{
    print smallest_permuted . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
142857
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is to check if any two numbers are permutations of each other by 
counting up the digits for each and comparing the counts. A fun use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;
but I will admit it is a bit unnecessary. I implemented solutions to this problem in 
multiple languages and in doing so just sorted the lists of digits and compared them. Much
easier, but less fun!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find out all Reversible Numbers below 100.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub is_reversible{
    my($x) = @_;
    my @even_digits = grep { $_ % 2 == 0 } split(//, ($x + reverse($x)));
    return @even_digits == 0;
}

sub reversibles_under_n{
    my($n) = @_;
    my @reversibles;
    do{
        $n--;
        unshift @reversibles, $n if is_reversible($n);

    }while($n &gt; 0);
    return @reversibles;
}

MAIN:{
    print join(", ", reversibles_under_n(100)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My favorite use of Perl is to prototype algorithms. I'll get an idea for how to solve a
problem and then quickly prove out the idea in Perl. Once demonstrated to be effective
the same approach can be implemented in another language if required, usually for business
reasons but also sometimes simply for performance.&lt;/p&gt;

&lt;p&gt;The code here is concise, easy to read, and works well. It's also 3 times slower than
a Fortran equivalent.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ time perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90

real    0m0.069s
user    0m0.048s
sys     0m0.020s
-bash-5.0$ time fortran/ch-2     
          10
          12
          14
          16
          18
          21
          23
          25
          27
          30
          32
          34
          36
          41
          43
          45
          50
          52
          54
          61
          63
          70
          72
          81
          90

real    0m0.021s
user    0m0.001s
sys     0m0.016s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, the Fortran took at least 3x longer to write. These are the tradeoffs that get 
considered on a daily basis!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/"&gt;Challenge 176&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc176</id>
    <published>2022-08-07T12:16:00-04:00</published>
    <updated>2022-08-07T12:16:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Wie erstellt man eine User Story Map?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Die Methode des User Story Mappings soll den am Prozess der  Softwareerstellung beteiligten Personen helfen, für den Anwender hilfreiche Software zu erstellen und dabei den Überblick über das große Ganze zu behalten. Wie wird nun ein solches User Story Mapping durchgeführt?</div>
    </content>
    <id>https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map</id>
    <published>2022-08-05T10:00:00Z</published>
    <updated>2022-08-05T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-08-03:/post/maintaining_perl_dave_mitchell_july_2022</id>
  <published>2022-08-03T21:15:22</published>
  <updated>2022-08-03T21:15:22</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during July covered by my TPF perl core maintenance grant.  3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz  3:28 Format in fill-mode has inconsistent behaviour  4:58 Goto xsub forces scalar context  0:57 Returning undef returns a weird hash reference  0:37 Segmentation fault with use re 'eval'  0:20 fix build warning  39:28 make stack reference counted  6:11 process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes: </p>

<p>This is my monthly report on work done during July covered by my TPF perl
core maintenance grant.
<code>
      3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz (Issue #19939)
      3:28 Format in fill-mode has inconsistent behaviour (Issue #19985)
      4:58 Goto xsub forces scalar context (#19188)
      0:57 Returning undef returns a weird hash reference (Issue #19996)
      0:37 Segmentation fault with use re 'eval' (Issue #19390)
      0:20 fix build warning
     39:28 make stack reference counted
      6:11 process p5p mailbox
      1:16 segfault on goto &amp;xs_sub when calling sub is replaced (Issue #19936)
    ------
     61:12 TOTAL (HH::MM)
</code>
I worked on quite a few tickets last month, but the most important thing I
did was to continue work on making the stack reference counted (work I
started near the end of June).</p>

<p>This is still very much a work in progress and I have nothing visible
(i.e. pushed) to show for it yet, but what I have done so far is:</p>

<p>1) Put wrappers around 254 pp functions.</p>

<p>This changes the definitions of pp function from e.g.:
<code>
    PP(pp_subst)
    {
        ...
    }
</code>
to
<code>
    PP_wrapped(pp_subst, ((PL_op-&amp;gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0)
    {
        ...
    }
</code>
which on normal builds has no effect, but on builds with <code>PERL_RC_STACK</code>
defined, it expands to something like:
```
    OP*
    Perl_pp_subst(aTHX) {
        return
            Perl_pp_wrap(my_perl, S_norcs_pp_subst,
                ((PL_op-&gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0);
    }</p>

<pre><code>STATIC OP*
S_norcs_pp_subst(pTHX)
{
    ...
}
</code></pre>

<p><code>``
</code>pp_wrap()<code>is responsible for pushing a (non-reference-counted) copy
of the current stack frame onto the end of the stack, then calling the
original pp function</code>S_norcs_pp_subst()`, which doesn't know about
reference-counted arguments, then shifting down and bumping the reference
count of everything that it returns on the stack.</p>

<p>The two numeric arguments for <code>pp_wrap</code> are how many arguments that op
expects on the stack, or for list ops, how many (mark-delineated) lists it
expects. Often these are just constants, but for some, like <code>pp_subst</code>, it
varies depending on flags.</p>

<p>2) Of the remaining 56 pp functions, some didn't need wrapping (like
<code>pp_pushmark</code>), while others required special handling - like most of the
<code>pp_enterfoo</code> and <code>pp_leavefoo</code> functions. For example most leavefoo ops in
void context just abandon any arguments left on the stack:
<code>
    PL_stack_sp = PL_stack_base + cx-&amp;gt;blk_oldsp;
</code>
For a reference-counted stack, this means that all those SVs leak. So I've
replaced all such occurrences with an inline function call:
<code>
    rpp_pop_to(PL_stack_base + cx-&amp;gt;blk_oldsp);
</code>
which on normal builds just resets <code>PL_stack_sp</code>, while on <code>PERL_RC_STACK</code>
builds, it will decrement the reference count of all those abandoned stack
items first.</p>

<p>I have almost finished doing (2) - just a handful of ops still need going
over on a line-by-line basis (in particular <code>pp_goto()</code>, which I've been
leaving to absolutely last).</p>

<p>None of the changes I've done so far actually do reference-counting yet: <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc currently have any <code>SvREFCNT_dec()</code>s etc
commented out. The idea is that I can initially add all these
modifications to the core while perl still works, Then once all that work
is done I should be able to make changes in a small number of places - <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc - and the whole of the perl core should
become reference-count-aware at once. This means that initially the core
will be merely mostly broken rather than completely broken, and it should
be easier to fix up those remaining bits which need it.</p>

<p>Then later on, things can be made more efficient again, e.g. by removing
the wrapper functions from common ops and make them directly
reference-count aware instead.</p>

<p>PS - for the avoidance of doubt, even with all these changes, unless the
core is built with <code>PERL_RC_STACK</code> defined, none of these changes take
affect yet.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grants: July 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-08-01:/post/grants_july_2022_votes</id>
  <published>2022-08-01T21:06:12</published>
  <updated>2022-08-01T21:06:12</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted: Grant Proposal: Google TensorFlow API Bindings for Perl VOTING RESULTS: Approved. 3 YES votes 0 NO votes, 3 ABSTAIN We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022">Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</a> (USD 8,800)</h4>

<p>VOTING RESULTS: Approved. 3 YES votes (12 points), 0 NO votes, 3 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#575 - Backward compatibility</title>
    <link rel="alternate" href="https://perlweekly.com/archive/575.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>One of the ongoing discussions in the Perl community is the question of backward compatibility. One group of people say it is (one of) the most important traits of Perl that you can run very old code on a very new version of Perl. The other side mostly say that there are very few cases when this is actually needed and the change in the version of Perl is just one aspect of upgrades people need to handle.</p>
<p>Then comes the case, like the introduction of th $00 variable in Perl 5.32 that breaks the code of people who used that variable for their own purposes. This is not the first case where a change in perl (or for that matter in a CPAN module) breaks some working code. Neither will be the last.</p>
<p>So the question isn't IF there can be changes breaking backward compatibility, but how we deal with them? Do the authors give proper warning? Are there tools to find pieces of code that will be impacted? (e.g. a Perl Critic rule). Are there instructions how to fix the code that will be broken?</p>
<p>On the other side of the coin, how can a user - a user of Perl or a CPAN module - ensure that changes in any of the dependencies won't impact their product or service? How can they notice any impact before it reaches the production system? Possibly even before it reaches the development machines forcing the whole team to stop working.</p>
<p>Hint: write and run automated tests!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/575.html</id>
    <published>2022-08-01T10:00:00Z</published>
    <updated>2022-08-01T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Tar-Size">Alien-Tar-Size</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libFLAC">Alien-libFLAC</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>find or build and install libFLAC with development dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-SNMP-TrapReceiver">AnyEvent-SNMP-TrapReceiver</a></td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>0.15</td>
<td>0.16</td>
<td>SNMP trap receiver by help of AnyEvent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Changelord">App-Changelord</a></td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>v0.0.1</td>
<td>0.0.2</td>
<td>cli-based changelog manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Git-Perl">App-Git-Perl</a></td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>v0.1.0</td>
<td>v0.1.15</td>
<td>adds custom git command "git perl" to make it easier to monitor latest changes in perl modules, and make you collaborate faster.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-JYJ">App-JYJ</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Convert JSON to YAML to JSON to…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KamstrupKemSplit">App-KamstrupKemSplit</a></td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Helper functions for the Kamstrup KEM file splitter application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-MHFS">App-MHFS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.4.0</td>
<td>v0.4.1</td>
<td>A Media HTTP File Server. Stream your own music and video library via your browser and standard media players.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diff2vba">App-diff2vba</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.99</td>
<td>generate VBA patch script from diff output</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Util-Shuffle">Array-Util-Shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Shuffle an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Author-Daemon-DockerMetaBundle">Author-Daemon-DockerMetaBundle</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
<td>1</td>
<td>A meta bundle that is used in the creation of a docker image.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-PERLANCAR-Tree-Examples">Bencher-Scenario-PERLANCAR-Tree-Examples</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.031</td>
<td>0.031</td>
<td>Benchmark PERLANCAR::Tree::Examples</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-shuffle">Bencher-Scenario-shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark various algorithms &amp; implementation of shuffle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Array-Sample-WeightedRandom">Bencher-Scenarios-Array-Sample-WeightedRandom</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Array::Sample::WeightedRandom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-ControllerPerContext">CatalystX-ControllerPerContext</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-RequestModel">CatalystX-RequestModel</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Digest-BLAKE3">Digest-BLAKE3</a></td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Perl extension for the BLAKE3 hash function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Authors">Dist-Zilla-Plugin-Authors</a></td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Build AUTHORS file from Git history</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-PruneAliases">Dist-Zilla-Plugin-PruneAliases</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Prune macOS aliases from your dist</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Earth">Earth</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>FP Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hashest">Hashest</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.3.1</td>
<td>v0.5.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-GIF-Encoder-PP">Image-GIF-Encoder-PP</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Pure perl GIF encoding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-WireGuard">Linux-WireGuard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_90</td>
<td>0.03</td>
<td>WireGuard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-Wireguard">Linux-Wireguard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wireguard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MHFS-XS">MHFS-XS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.2</td>
<td>XS extension module for Media HTTP File Server, for server side media encoding.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mac-Alias">Mac-Alias</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Read or create macOS alias files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mars">Mars</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>OO Framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Abacus">Math-Abacus</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.04</td>
<td>A toy model of Chinese abacus</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Notation-PostfixInfix">Math-Notation-PostfixInfix</a></td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>v2022.035.1</td>
<td>v2022.035.1</td>
<td>Perl extension for Math Postfix and Infix Notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-LibNFS">Net-LibNFS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>User-land NFS in Perl via libnfs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Touchstone">PDL-IO-Touchstone</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Dancer2">Perl-Critic-Dancer2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.4000</td>
<td>0.4100</td>
<td>A collection of handy perlcritic modules for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PlayStation-MemoryCard">PlayStation-MemoryCard</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.0</td>
<td>Utilities for working with PlayStation memory card and save files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-CopySubjectButton">RT-Extension-CopySubjectButton</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>RT-Extension-CopySubjectButton Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-From-String">Regexp-From-String</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Convert '/…/' or 'qr(…)' into Regexp object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rofi-Script">Rofi-Script</a></td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>0.001</td>
<td>1.221970</td>
<td>perl interface to the rofi menu</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Cwd">SPVM-Cwd</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>get pathname of current working directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-MD5">SPVM-Digest-MD5</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.06</td>
<td>SPVM interface to the MD5 Algorithm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-SHA">SPVM-Digest-SHA</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>SPVM extension for SHA-1/224/256/384/512</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Errno">SPVM-Errno</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Error Number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-PSchemas-Re">Sah-PSchemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression (parameterized) schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Fzf">Search-Fzf</a></td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ported Fzf using perl. </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Software-Copyright">Software-Copyright</a></td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Copyright class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/StandupGenerator">StandupGenerator</a></td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Package to create and manage daily standup files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Storable-Improved">Storable-Improved</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Storable improved with core flaws mitigated</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Login-Button">Tags-HTML-Login-Button</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for login button.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-Graille">Term-Graille</a></td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>0.03</td>
<td>0.071</td>
<td>Terminal Graphics using Braille</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-DBIC-Pg">Test-DBIC-Pg</a></td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>0.99_01</td>
<td>0.99_01</td>
<td>Connect to and deploy a DBIx::Class::Schema on Postgres</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-JSON-Type">Test-JSON-Type</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Test JSON data with types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-Bash">Test-More-Bash</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>Write Perl tests in Bash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-YAMLScript">Test-More-YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.5</td>
<td>Write Perl tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-YAFT">Test-YAFT</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Yet another testing framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Try-ALRM">Try-ALRM</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.1</td>
<td>0.6</td>
<td>Provides alarm semantics similar to Try::Catch.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Twitter-ID">Twitter-ID</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Parse the date from a Twitter Snowflake ID</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Library-Compiler">Type-Library-Compiler</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>compile a bunch of type constraints into a library with no non-core dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client">UID2-Client</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Perl Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client-XS">UID2-Client-XS</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Client for Perl (binding to the UID2 C++ library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-PackageURL">URI-PackageURL</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.02</td>
<td>Perl extension for Package URL (aka "purl")</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URN-OASIS-SAML2">URN-OASIS-SAML2</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Constants for urn:oasis SAML2 implementations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-Atom">WebFetch-Input-Atom</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from Atom feeds</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-RSS">WebFetch-Input-RSS</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from RSS feed</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TT">WebFetch-Output-TT</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch via the Perl Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TWiki">WebFetch-Output-TWiki</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch into a TWiki web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLScript">YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.16</td>
<td>YAML as a Programming Language</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLTest">YAMLTest</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.4</td>
<td>Write tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtin-compat">builtin-compat</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001002</td>
<td>Provide builtin functions for older perl versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins">builtins</a></td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>0.000002</td>
<td>0.000005</td>
<td>Install all the new builtins from the builtin namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins-compat">builtins-compat</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.004</td>
<td>install all the new builtins from the builtin namespace (Perl 5.36+), and try our best on older versions of Perl</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Alien-Tar-Size GAHAYES v0.1.0 v0.2.0 tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package Alien-libFLAC GAHAYES v0.1.0 v0.2.0 find or build and install libFLAC with development dependencies AnyEvent-SNMP-TrapReceiver NABOJ 0.15 0.16 SNMP trap receiver by help of AnyEvent App-Changelord YANICK v0.0.1 0.0.2 cli-based … <a href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1994</id>
    <published>2022-08-01T00:37:54Z</published>
    <updated>2022-08-01T00:37:54Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
