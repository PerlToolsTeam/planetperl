<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-12-07T06:51:51Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>This Company is No Shop of Horrors. Perl role in Canberra, Australia</title>
    <link rel="alternate" href="https://job.perl.careers/3e0" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">DNA-dynamos looking for someone whose modern Perl skills are complemented by an interest in genome technology and bioinformatics. They are searching for a candidate who is familiar with modern tooling and might have experience with Ansible, AWS, and Linux containers. Also interested in being on-site in Canberra? They would be eager to meet you.</div>
    </content>
    <id>https://job.perl.careers/3e0</id>
    <published>2020-12-07T10:00:53Z</published>
    <updated>2020-12-07T10:00:53Z</updated>
  </entry>
  <entry>
    <title>Just Another Day Working in Perl Paradise (Perl developer job in Malta)</title>
    <link rel="alternate" href="https://job.perl.careers/c6q" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is a financial company whose growth over the last twenty years has been nothing short of impressive. They started with the idea that online trading should be available to all, and from there, they’ve built a company with multiple locations worldwide. If you want to be part of a business that is thriving, this may be the perfect opportunity for you.</div>
    </content>
    <id>https://job.perl.careers/c6q</id>
    <published>2020-12-07T10:00:52Z</published>
    <updated>2020-12-07T10:00:52Z</updated>
  </entry>
  <entry>
    <title>Seeking Senior Perl Developers for Global Domination. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/u8x" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an international IT company managing over 4 million domains for retail and corporate customers in 200 countries. To help achieve global domination, they’re looking for a few top-notch senior Perl developers whose experience with implementing APIs and protocols is only matched by their drive to design and develop domain software solutions.</div>
    </content>
    <id>https://job.perl.careers/u8x</id>
    <published>2020-12-07T10:00:51Z</published>
    <updated>2020-12-07T10:00:51Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/78p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/78p</id>
    <published>2020-12-07T10:00:50Z</published>
    <updated>2020-12-07T10:00:50Z</updated>
  </entry>
  <entry>
    <title>How do you look in a fig leaf? Perl role in Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/ddn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This organization is one of the world’s leading developers of medical diagnostic technologies and clinical software. They believe in security, wellness, and the importance of driving innovation to deliver patient benefit. In short: do-gooders doing good! Isn’t it about time you felt positive about what you do?</div>
    </content>
    <id>https://job.perl.careers/ddn</id>
    <published>2020-12-07T10:00:49Z</published>
    <updated>2020-12-07T10:00:49Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be on Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-12-07T10:00:48Z</published>
    <updated>2020-12-07T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Raku: A New Language for a New Year</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 7, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/</id>
    <published>2020-12-07T10:00:47Z</published>
    <updated>2020-12-07T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-12-07T10:00:46Z</published>
    <updated>2020-12-07T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-12-07T10:00:45Z</published>
    <updated>2020-12-07T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Collective Voice: Web Application Development with Perl Dancer</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275011889/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275011889/</id>
    <published>2020-12-07T10:00:44Z</published>
    <updated>2020-12-07T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-12-07T10:00:43Z</published>
    <updated>2020-12-07T10:00:43Z</updated>
  </entry>
  <entry>
    <title>New Year's Resolution - every month</title>
    <link rel="alternate" href="https://szabgab.com/new-years-resolution-every-month.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I just realized I could use my monthly report to have a new month's resolution and then even if after 2-3 weeks I abandon the commitments, the following month they can start again. Possibly in a new direction.</div>
    </content>
    <id>https://szabgab.com/new-years-resolution-every-month.html</id>
    <published>2020-12-07T10:00:42Z</published>
    <updated>2020-12-07T10:00:42Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-12-07T10:00:41Z</published>
    <updated>2020-12-07T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89.</title>
    <link rel="alternate" href="https://wlmb.github.io/PWC89/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Although new to the team, but you can see the spark in his writings. Thank you for your contribution.</div>
    </content>
    <id>https://wlmb.github.io/PWC89/</id>
    <published>2020-12-07T10:00:40Z</published>
    <updated>2020-12-07T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-089/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt made the GCD sum task one-liner, great skill. Even the difficult task is no trouble for him. Check it out yourself.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-089/walt-mankowski/README.md</id>
    <published>2020-12-07T10:00:39Z</published>
    <updated>2020-12-07T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 089</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-089-f3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon very elegantly used brute-force technique to solve Magic Matrix task. Just loved it.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-089-f3</id>
    <published>2020-12-07T10:00:38Z</published>
    <updated>2020-12-07T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: magic sum</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_89__magic_sum.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger blog has been an inspirational for me every time. Read his word carefully and you will understand what I mean.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_89__magic_sum.html</id>
    <published>2020-12-07T10:00:37Z</published>
    <updated>2020-12-07T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: GCD Sums and Magic Squares</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is one of the few who have been associated with the weekly challenge from day one and you see he is still as refresh as he was on day one. Unmatched skill.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html</id>
    <published>2020-12-07T10:00:36Z</published>
    <updated>2020-12-07T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 089 -- GCD Sum and the magic square.</title>
    <link rel="alternate" href="https://gugod.org/2020/12/pwc-089-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min made the magic square looks like walk in the park. There are so much to learn from him.</div>
    </content>
    <id>https://gugod.org/2020/12/pwc-089-en/</id>
    <published>2020-12-07T10:00:35Z</published>
    <updated>2020-12-07T10:00:35Z</updated>
  </entry>
  <entry>
    <title>PWC089 - Magical Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/02/pwc089-magical-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio engaging writing skill is very addictive. Please check it out yourself.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/02/pwc089-magical-matrix/</id>
    <published>2020-12-07T10:00:34Z</published>
    <updated>2020-12-07T10:00:34Z</updated>
  </entry>
  <entry>
    <title>PWC089 - GCD Sum</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/01/pwc089-gcd-sum/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I love Flavio in the same spirit as he mentioned me in the blog. He is simply incredible.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/01/pwc089-gcd-sum/</id>
    <published>2020-12-07T10:00:33Z</published>
    <updated>2020-12-07T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Perl Challenge 89 and the Return of the Son of Overkill</title>
    <link rel="alternate" href="https://jacoby.github.io/2020/11/30/perl-challenge-89-and-the-return-of-the-son-of-overkill.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Reading blog like Dave's can be blessing. It gives you so much new ideas. You don't want to miss it.</div>
    </content>
    <id>https://jacoby.github.io/2020/11/30/perl-challenge-89-and-the-return-of-the-son-of-overkill.html</id>
    <published>2020-12-07T10:00:32Z</published>
    <updated>2020-12-07T10:00:32Z</updated>
  </entry>
  <entry>
    <title>The Greatest Common Magick Trick</title>
    <link rel="alternate" href="https://colincrain.com/2020/12/06/the-greatest-common-magick-trick/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Don't you love the blog title? The content is even magical as always.</div>
    </content>
    <id>https://colincrain.com/2020/12/06/the-greatest-common-magick-trick/</id>
    <published>2020-12-07T10:00:31Z</published>
    <updated>2020-12-07T10:00:31Z</updated>
  </entry>
  <entry>
    <title>CY's Brute-Force Take on Task 2 of PWC#089</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok-Yin is another gem of blogger. She can take you to another world with her writings.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html</id>
    <published>2020-12-07T10:00:30Z</published>
    <updated>2020-12-07T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Magical Sum with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/magical-sum.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne shared his invention generating GCD in Raku. His smooth transition to Perl from Raku is so beautiful and evident in his blog.</div>
    </content>
    <id>https://raku-musings.com/magical-sum.html</id>
    <published>2020-12-07T10:00:29Z</published>
    <updated>2020-12-07T10:00:29Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 89</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/advent-calendar-2020-12-04/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The weekly blog turned into Advent Calendar by the power of Andrew Shitov. Hats off.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/advent-calendar-2020-12-04/</id>
    <published>2020-12-07T10:00:28Z</published>
    <updated>2020-12-07T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 089</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/06" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam blog is never short of resourceful contents. You are going to enjoy it as much as I do.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/06</id>
    <published>2020-12-07T10:00:27Z</published>
    <updated>2020-12-07T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/06/perl-weekly-challenge-89-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail opened the pandora box in the blog and shared some of his coolest creations. Must Read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/06/perl-weekly-challenge-89-part-2/</id>
    <published>2020-12-07T10:00:26Z</published>
    <updated>2020-12-07T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/04/perl-weekly-challenge-89-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This week belong to Abigail with his collections of gems. In the blog, he only touched Perl side of it.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/04/perl-weekly-challenge-89-part-1/</id>
    <published>2020-12-07T10:00:25Z</published>
    <updated>2020-12-07T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-089/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron really impressed me with his blogging skill. You could easily read his thought process.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-089/</id>
    <published>2020-12-07T10:00:24Z</published>
    <updated>2020-12-07T10:00:24Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 089</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy quick recap of last week contributions by the Team PWC dealing with the "GCD Sum" and "Magical Matrix" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-089</id>
    <published>2020-12-07T10:00:23Z</published>
    <updated>2020-12-07T10:00:23Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 090</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-090" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome new week with couple of fun tasks "DNA Sequence" and "Ethiopian Multiplication". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-090</id>
    <published>2020-12-07T10:00:22Z</published>
    <updated>2020-12-07T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Programming Bootcamp for Scientists</title>
    <link rel="alternate" href="https://leanpub.com/c/bootcamp/c/pw20201207" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This is an introduction to Python for people who have no programming background. It includes the basics and some tools that are needed for Data Science. I teach this course at the <a href="https://www.weizmann.ac.il/">Weizmann Institute of Science</a>. The link here is a coupon that will give a deep discount in the next couple of days. Leanpub offers 45 days money-back guarantee.</div>
    </content>
    <id>https://leanpub.com/c/bootcamp/c/pw20201207</id>
    <published>2020-12-07T10:00:21Z</published>
    <updated>2020-12-07T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Dancer course</title>
    <link rel="alternate" href="https://leanpub.com/c/dancer" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Learn how to develop a web application using Perl Dancer. This course is going to be recorded one video a day during the Advent of 2020. The price will also go up by $1 a day. So the if you are interested to buy it then the sooner the cheaper. Leanpub offers 45 days money-back guarantee.</div>
    </content>
    <id>https://leanpub.com/c/dancer</id>
    <published>2020-12-07T10:00:20Z</published>
    <updated>2020-12-07T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2020.11 </title>
    <link rel="alternate" href="https://szabgab.com/report-2020-11.html" type="text/html"/>
    <id>https://szabgab.com/report-2020-11.html</id>
    <published>2020-12-07T10:00:19Z</published>
    <updated>2020-12-07T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Monthly Report - November</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html" type="text/html"/>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html</id>
    <published>2020-12-07T10:00:18Z</published>
    <updated>2020-12-07T10:00:18Z</updated>
  </entry>
  <entry>
    <title>A call to Perl bloggers to come on dev.to </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I'd add that even if you are not going to write a blog post, you could still register and up-vote the <a href="https://dev.to/t/perl">Perl-related</a> posts to encourage the authors.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee</id>
    <published>2020-12-07T10:00:17Z</published>
    <updated>2020-12-07T10:00:17Z</updated>
  </entry>
  <entry>
    <title>About Perl books review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6</id>
    <published>2020-12-07T10:00:16Z</published>
    <updated>2020-12-07T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Advent of Code Day 6 - simple counting</title>
    <link rel="alternate" href="https://domm.plix.at/perl/2020_12_aoc_day_06.html" type="text/html"/>
    <id>https://domm.plix.at/perl/2020_12_aoc_day_06.html</id>
    <published>2020-12-07T10:00:15Z</published>
    <updated>2020-12-07T10:00:15Z</updated>
  </entry>
  <entry>
    <title>A Perl love letter </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj</id>
    <published>2020-12-07T10:00:14Z</published>
    <updated>2020-12-07T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Twenty Years of Monthly CPAN Releases</title>
    <link rel="alternate" href="https://blog.urth.org/2020/12/05/twenty-years-of-cpan-releases/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I just love the personal anecdotes and I love the writings of Dave.</div>
    </content>
    <id>https://blog.urth.org/2020/12/05/twenty-years-of-cpan-releases/</id>
    <published>2020-12-07T10:00:13Z</published>
    <updated>2020-12-07T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Advent of Code Day 1 - brute loops</title>
    <link rel="alternate" href="https://domm.plix.at/perl/2020_12_aoc_day_01.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Part of a series of articles. Check them all!</div>
    </content>
    <id>https://domm.plix.at/perl/2020_12_aoc_day_01.html</id>
    <published>2020-12-07T10:00:12Z</published>
    <updated>2020-12-07T10:00:12Z</updated>
  </entry>
  <entry>
    <title>The blessing of forgetting</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/03/the-blessing-of-forgetting/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Forgetting is good because you can enjoy the (re)discovery.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/03/the-blessing-of-forgetting/</id>
    <published>2020-12-07T10:00:11Z</published>
    <updated>2020-12-07T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Find the first element in an array in Perl that satisfies a condition</title>
    <link rel="alternate" href="https://perlmaven.com/first" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Use grep or use List::Util::first</div>
    </content>
    <id>https://perlmaven.com/first</id>
    <published>2020-12-07T10:00:10Z</published>
    <updated>2020-12-07T10:00:10Z</updated>
  </entry>
  <entry>
    <title>RT - Action Plan for CPAN Authors</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave went ahead and described what CPAN authors could do to deal with the situation of RT going away. He even added a cute bug to the <a href="https://cpandashboard.com/">CPAN Dashboard</a> to help CPAN Authors identify the distribution that needs help. More ideas on <a href="https://www.reddit.com/r/perl/comments/k7tcgp/rt_action_plan_for_cpan_authors_perl_hacks/">Reddit</a>.</div>
    </content>
    <id>https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/</id>
    <published>2020-12-07T10:00:09Z</published>
    <updated>2020-12-07T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Perl and Camels</title>
    <link rel="alternate" href="http://neilb.org/2020/12/04/perl-and-camels.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In a nutshell: We can use any camel anywhere except two cases: we can't use the specific one O'Reilly has on it's 'Camel-book',we can't use a camel on a Perl-related book cover published by a publisher different from O'Reilly. <a href="https://www.reddit.com/r/perl/comments/k6q9na/perl_and_camels/">Reddit</a></div>
    </content>
    <id>http://neilb.org/2020/12/04/perl-and-camels.html</id>
    <published>2020-12-07T10:00:08Z</published>
    <updated>2020-12-07T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Rex-1.13.2 is now available</title>
    <link rel="alternate" href="https://www.rexify.org/blog/2020/12/05/rex-1.13.2.html" type="text/html"/>
    <id>https://www.rexify.org/blog/2020/12/05/rex-1.13.2.html</id>
    <published>2020-12-07T10:00:07Z</published>
    <updated>2020-12-07T10:00:07Z</updated>
  </entry>
  <entry>
    <title>FOSDEM 2021: Call for papers open</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/fosdem-2021-call-for-papers" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This time FOSDEM will be online</div>
    </content>
    <id>https://news.perlfoundation.org/post/fosdem-2021-call-for-papers</id>
    <published>2020-12-07T10:00:06Z</published>
    <updated>2020-12-07T10:00:06Z</updated>
  </entry>
  <entry>
    <title>rt.cpan.org will sunset on March 1st, 2021</title>
    <link rel="alternate" href="https://perlmaven.com/rt-cpan-org-is-closing" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">See the <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">original announcement</a>. If I understand correctly, every CPAN module needs to start using some other bug-tracking system. According to <a href="https://cpan.rocks/">CPAN Rocks</a> that is based on information from <a href="https://metacpan.org/">MetaCPAN</a> there are 4,921 distributions that explicitly set RT as their bug-tracking system and there are 24,884 distribution that have not set any, in which case MetaCPAN defaults to show RT. See also the <a href="https://www.reddit.com/r/perl/comments/k73bxy/rtcpanorg_is_closing/">Reddit discussion.</a> it isn't pretty.</div>
    </content>
    <id>https://perlmaven.com/rt-cpan-org-is-closing</id>
    <published>2020-12-07T10:00:05Z</published>
    <updated>2020-12-07T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Advent Planet</title>
    <link rel="alternate" href="http://www.lenjaffe.com/AdventPlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Every year Len collects the Advent calendars from around the world and create an Advent calendar of all of them.</div>
    </content>
    <id>http://www.lenjaffe.com/AdventPlanet/</id>
    <published>2020-12-07T10:00:04Z</published>
    <updated>2020-12-07T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 4; DevTo: 12; Perl.com: 0; PerlAcademy: 2; PerlHacks: 1; PerlMaven: 2; Reddit: 25; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-12-07T10:00:03Z</published>
    <updated>2020-12-07T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://perlweekly.com/metacpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 183 uploads to CPAN of 138 distinct distributions by 76 different authors. Number of distributions with link to VCS: 96. Number of distros with CI: 60. Number of distros with bugtracker: 68.</div>
    </content>
    <id>https://perlweekly.com/metacpan.html</id>
    <published>2020-12-07T10:00:02Z</published>
    <updated>2020-12-07T10:00:02Z</updated>
  </entry>
  <entry>
    <title>A Replacement for PPM - ActiveState's New Perl Ecosystem</title>
    <link rel="alternate" href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">While PPM is gone, the need to install dependencies without requiring a local build environment remains. ActivePerl allowed developers to get up and running quickly by delivering hundreds of popular modules with a single installation. Both use cases are now addressed in &lt;a href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition"&gt;ActiveState's new ecosystem&lt;/a&gt;.</content>
    <id>https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition</id>
    <published>2020-12-07T10:00:01Z</published>
    <updated>2020-12-07T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#489 - Meta Advent</title>
    <link rel="alternate" href="http://perlweekly.com/archive/489.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Advent is a religious Christian tradition, but throughout the years I saw quite a few people who are far from being Christian or religious (or both) using the opportunity to do something on the first 24 days of December. In the tech community it became a tradition to write a blog post every day, or send a Pull-Request every day during this period.</p>
<p>Len Jaffe has been maintaining an <a href="http://www.lenjaffe.com/AdventPlanet/">Advent Planet</a> in which he aggregates the various tech-related Advent calendars for 20 years now. Impressive</p>
<p>This year I thought I'll use the opportunity to run an experiment. I am going to create a video course during this period, one video every day. I'll also set the price to reflect the number of days passed. Today, on the 7th December it costs $7. Each day it will be one more. You can <a href="https://youtu.be/8cN7vS4GfJg?rel=0">watch my announcement and explanation</a> or go straight to <a href="https://leanpub.com/c/dancer">the store</a>.</p>
<p>Stay at home! If you really need to leave home, wear a mask!</p>
<p>In any case, enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/489.html</id>
    <published>2020-12-07T10:00:00Z</published>
    <updated>2020-12-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>CY's Brute-Force Take on Task 2 of PWC#089</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9982</id>

    <published>2020-12-06T15:32:33Z</published>
    <updated>2020-12-06T22:28:25Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenge, submit codes on-time (via GitHub or email).(In a rush, sorry for the "raw" style this week.)link for Task statements a...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<div><div><p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenge, submit codes on-time (via GitHub or email).</i></p></div></div><br /><div><br /></div><div>(In a rush, sorry for the "raw" style this week.)</div><div><div><br /></div><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/">link for Task statements</a></div><div><br /></div><div><br /></div>
<pre>a b c
d e f
g h i

<u>Statement</u>: The center term, "$e" , is 5.
<u>Proof</u>:<br />Given the sum of each "segment" is 15.<br /><br />Consider<br />  sum of 2 outer rows - the middle column - sum of 2 diagonals <br />= (2-1-2)*15<br /><br />Then we have<br />(a+b+c + g+h+i) - (b+e+h) - (a+e+i + c+e+g) = (2-1-2)*15
-3*e = -15
e = 5  □


Then loop the values of $a and $b over 1 to 9

$i = 10-$a
$c = 15-$a-$b
$h = 10-$b
$g = 10-$c
$d = 15-$a-$g
$f = 15-$c-$i
</pre><div>

Then check whether the value of variables <strike>match the 8 given equations and</strike> use every integer from 1 to 9 .<br /><br />I got 8 magic squares.</div><div><br /></div><div>---------------------- <br /></div><div><br /></div><div>The definition of "magic cube" as recorded on Wikipedia, early December 2020, is : "the sums of the numbers on each row [9 rows], on each column [9 columns], on each pillar [9 pillars] and on each of the four main space diagonals [4 space diagonals] are equal to the same number."

And I think we may explore 3x3x3 cube in a similar fashion. <br /></div><div><br /></div><pre>first (top) layer
a b c 
d e f 
g h i
 
second (middle) layer
j k l 
m X n 
o p q 

third (bottom) layer
r s t 
u v w 
x y z 


1+2+3+..+27 = 27*28/2 = 27*14
There are exactly 9 pillars composing the cube. 
Since the sums of each pillar are the same, we have 

             27*14/9 = 42 ,

as the sum of each "segment".


<u>Statement</u>: The center term, "$X", is 14.
<u>Proof</u>:<br /><br />&nbsp;Consider:<br /><br />&nbsp;(sum of 4 corner pillars)<br /> - (sum of 2 outer columns of the middle layer) + (m+X+n)<br />&nbsp;- (sum of 2 outer columns of the middle layer)<br />&nbsp;- (sum of 4 space diagonals)
<br />
  (4+2+1-2-4)*42 = a+j+r + c+l+t + i+q+z + x+o+g<br />               &nbsp;- (j+m+o) -(l+n+q) + m+X+n<br />                - (a+X+z) - (c+X+x) - (i+X+r) - (g+X+t) <br />= -3X
<br />
(A bit worry about making errors during cancelling terms? <br />Use a computer algebra system.)

-42 = -3X
X = 14  □
<br />
Then loop the values of $e,$a,$b,$g from 1 to 27

$c = 42 - $a - $b
$z = 28 - $a
$x = 28 - $c
$y = 42 - $x - $z
$d = 42 - $a - $g
$t = 28 - $g
$w = 42 - $z - $t
$h = 42 - $e - $b
$p = 42 - $y - $h
$f = 42 - $d - $e
$i = 42 - $c - $f
$r = 28 - $i
$s = 42 - $t - $r
$v = 42 - $y - $s
$j = 42 - $a - $r
$l = 42 - $c - $t
$k = 42 - $j - $l
$q = 42 - $z - $i
$n = 42 - $l - $q
$m = 28 - $n
$o = 42 - $j - $m
$u = 42 - $v - $w
</pre>
<br /><br /><div>I got 192 different magic cubes.</div><div>One of them is<br /></div><pre> 8 10 24 
 22 9 11
 12 23 7

 13 27 2 
 3 14 25
 26 1 15

 21 5 16 
 17 19 6
 4 18 20
</pre>
<div><br /></div><div>---</div><div><div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-089/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a> (Task 1 on gcd sum)</tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-089/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a> (Task 2; the 3x3x3 magic cube code is on POD of the bottom of the file)</tt></i> <br /></div><div><br /></div></div><div><p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p></div><div>Stay healthy! □</div><div><br /></div><div>(Note after 6-hour published: should write more caution or analysis on this task (Task 2 #089) and Sudoku (Task 2 #086) in next blogpost! )<br /></div>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 089</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/12/06#pwc089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2 id="part-1">Part 1</h2>
<p><em>You are given a positive integer $N. Write a script to sum GCD of all possible unique pairs between 1 and $N.</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given a positive integer $N. Write a script to sum GCD of all possible 
# unique pairs between 1 and $N.
##

sub all_unique_pairs{
    my($n) = @_;
    my %pairs;
    for my $i (1 .. $n){
        for my $j (1 .. $n){
            $pairs{"$i-$j"} = -1 unless $pairs{"$i-$j"} || $pairs{"$j-$i"} || $i == $j; 
        }
    }
    return sort keys %pairs;
}

sub euclid {
    my($a, $b) = @_;
    return ($b) ? euclid($b, $a % $b) : $a;
}

MAIN:{
    my $gcd_sum = 0; 
    my @values =  all_unique_pairs(3);
    for my $pair (@values[0 .. @values - 2]){
        my($i, $j) = split(/-/, $pair);
        $gcd_sum += euclid($i, $j);
        print "gcd($i, $j) + ";  
    }
    my ($i, $j) = split(/-/, $values[-1]); 
    $gcd_sum += euclid($i, $j);
    print "gcd($i, $j) = $gcd_sum\n";  

    $gcd_sum = 0; 
    @values =  all_unique_pairs(4);
    for my $pair (@values[0 .. @values - 2]){
        my($i, $j) = split(/-/, $pair);
        $gcd_sum += euclid($i, $j);
        print "gcd($i, $j) + ";  
    }
    ($i, $j) = split(/-/, $values[-1]); 
    $gcd_sum += euclid($i, $j);
    print "gcd($i, $j) = $gcd_sum\n";  

}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
gcd(1, 2) + gcd(1, 3) + gcd(2, 3) = 3
gcd(1, 2) + gcd(1, 3) + gcd(1, 4) + gcd(2, 3) + gcd(2, 4) + gcd(3, 4) = 7
</code></pre>
<h3 id="notes">Notes</h3>
<p>Sometimes before jumping into my own solutions I do a little research on the topics at hand. In doing so for this I came across this beautifully <a href="https://www.perlmonks.org/?node_id=109887">succinct implementation of Euclid’s algorithm</a>. I decided to use that here for the GCD computation.</p>
<p>Ok, with that sorted out, what is left is to generate all the unique pairs and print the results. I generate the pairs in <code>all_unique_pairs</code> by saving the pairs as hash heys, stringified by joining them with a ‘-’. When printing them out later it is necessary to split on the ‘-’.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given m x n matrix of positive integers. Write a script to print spiral matrix as a list.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# Write a script to display matrix as below with numbers 1 - 9. 
# Please make sure numbers are used once.
##
use boolean;
use Math::GSL::Permutation q/:all/;

sub validate {
    my($a, $b, $c, $d, $e, $f, $g, $h, $i) = @_;
    return false if ($a + $b + $c) != 15;
    return false if ($d + $e + $f) != 15;
    return false if ($g + $h + $i) != 15;
    return false if ($a + $d + $g) != 15;
    return false if ($b + $e + $h) != 15;
    return false if ($c + $f + $i) != 15;
    return false if ($a + $e + $i) != 15;
    return false if ($c + $e + $g) != 15;
    return true;
}

sub print_matrix {
    my($a, $b, $c, $d, $e, $f, $g, $h, $i) = @_;
    print "[ $a $b $c ]\n";
    print "[ $d $e $f ]\n";
    print "[ $g $h $i ]\n";
}    

MAIN:{
    my $permutation = new Math::GSL::Permutation(9);
    while(gsl_permutation_next($permutation-&gt;raw) == 0){
        my @values =  $permutation-&gt;as_list();
        @values = map { $_ + 1 } @values;
        do { 
            print_matrix(@values);
            print "\n";
        }if validate(@values);  
    }
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>The <code>validate</code> function is pretty straight forward, especially so since I intentionally wrote it to be blazingly obvious what is going on!</p>
<p>The real work is in generating the permutations that get checked. For that I used <a href="https://metacpan.org/pod/Math::GSL::Permutation">Math::GSL::Permutation</a> which, as the name implies, is an excellent module which wraps the Gnu Scientific Library. Well, the module is quite solid aside from the documentation which is a bit rough and often requires referring to the GSL documentation on the functions being wrapped.</p>
<p>The main point to know about Math::GSL::Permutation is that it only creates permutations on integers. As Perl programmers we get spoiled by being able to easily manipulate any type of data. If you are interested in permuting lists of arbitrary elements you could use Math::GSL::Permutation to permute the indices, but not the elements themselves.</p>
<p>One final note, having a conditional after the expression is just one of those classic examples of Perl expressiveness, but I seldom see the <code>do/if</code> form. A <code>do/if</code> allows you to have multiple statements, a whole block, execute with the <code>if</code> coming afterwards. Obviously just <em>syntactic sugar</em> for the more common <code>if{}</code> but I prefer it in cases like this where there is no need for an <code>else</code>.</p>
<h2 id="references">References</h2>
<p><a href="https://en.wikipedia.org/wiki/Euclidean_algorithm">Euclid’s Algorithm</a></p>
<p><a href="https://metacpan.org/pod/Math::GSL">Math::GSL</a></p>
<p><a href="https://www.gnu.org/software/gsl/">GSL</a></p>
<p><a href="ftp://ftp.gwdg.de/pub/gnu/www/savannah-checkouts/gnu/gsl/manual/html_node/Permutation-Examples.html">GSL Permutations Example</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc089</id>
    <published>2020-12-06T17:23:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: GCD Sums and Magic Squares</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9983</id>

    <published>2020-12-06T21:54:04Z</published>
    <updated>2020-12-06T22:03:47Z</updated>

    <summary>These are some answers to the Week 89 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Task 1: GCD Sums You are given a positive integer $N. Write a script to sum GCD of all possible unique pairs...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 89 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: GCD Sums</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to sum GCD of all possible unique pairs between 1 and <code>$N</code>.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 3
Output: 3

gcd(1,2) + gcd(1,3) + gcd(2,3)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 4
Output: 7

gcd(1,2) + gcd(1,3) + gcd(1,4) + gcd(2,3) + gcd(2,4) + gcd(3,4)
</code></pre>

<h3>GCD Sums in Raku</h3>

<p>Raku has the <a href="https://docs.raku.org/routine/gcd">infix gcd</a> operator which computes the GCD for us. Thus, chaining the <a href="https://docs.raku.org/routine/combinations">compinations</a>, <code>gcd</code>, <code>map</code>, and <a href="https://docs.raku.org/routine/sum">sum</a> built-in routines yields a solution fitting in just one code line:</p>

<pre><code>use v6;

say (1..$_).combinations(2).map({$_[0] gcd $_[1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>We could also use the <code>[]</code> reduction metaoparator with the <code>+</code> operator:</p>

<pre><code>say (1..$_).combinations(2).map({[gcd] $_[0,1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>Both solutions lead to the following output</p>

<pre><code>$ raku gcd-sum.raku 10
0
1
3
7
11
20
26
38
50
67
</code></pre>

<h3>GCD Sums in Perl</h3>

<p>We first implement a <code>gcd</code> subroutine that uses the Euclidean algorithm to compute the GCD of two numbers. We then use a doubly nested <code>for</code> loop to generate all pairs of numbers between 1 and the input ceiling parameter:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub gcd {
        my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
        while ($j) {
                ($i, $j) = ($j, $i % $j);
        }
        return $i;
}
my $n = shift;
my $sum = 0;
for my $i (1..$n) {
    for my $j ($i+1..$n) {
        $sum += gcd $i, $j;
    }
}
say $sum;
</code></pre>

<h2>Task 2: Magical Matrix</h2>

<p><em>Write a script to display matrix as below with numbers 1 - 9. Please make sure numbers are used once.</em></p>

<pre><code>[ a b c ]
[ d e f ]
[ g h i ]
</code></pre>

<p><em>So that it satisfies the following:</em></p>

<pre><code>a + b + c = 15
d + e + f = 15
g + h + i = 15
a + d + g = 15
b + e + h = 15
c + f + i = 15
a + e + i = 15
c + e + g = 15
</code></pre>

<p>This is more commonly known as a <em>magic square</em>. A square array of numbers, usually positive integers, is called a <em>magic square</em> if the sums of the numbers in each row, each column, and both main diagonals are the same. Albrecht Dürer&#8217;s famous engraving <em>Melencolia I</em> (1514) includes an order 4 square with magic sum 34.</p>

<p><img alt="Albrecht_Dürer_Melencolia_I.jpg" src="http://blogs.perl.org/users/laurent_r/Albrecht_D%C3%BCrer_Melencolia_I.jpg" width="555" height="578" class="mt-image-none" style="" /></p>

<h3>Magic Square in Raku</h3>

<p>I originally started to write a recursive subroutine to populate the square with all possible combinations of integers between 1 and 9 (or 1 and 126 for order 4 squares. This turned out to be a bit clumsy. I changed my mind and decided to use the <a href="https://docs.raku.org/routine/permutations">permutations</a> built-in routine to generate all possible lists of 9 integers (between 1 and 9) and only after that to transform them into squares of numbers and check whether they form a magic square.</p>

<pre><code>use v6;
constant \SIZE = 3;
constant \MAX = SIZE - 1;
constant \SUM = (([+] 1..SIZE*SIZE)/SIZE).Int;

my ($count-perm, $count-mat) = 0, 0;

sub print-matrix (@matrix) {
    for @matrix -&gt; @row {
        say '[', @row.fmt("%2i").join(" "), ' ]';
    }
    say " ";
}
sub col-sum (@matrix, Int $j) {
    my $sum = 0;
    $sum += @matrix[$_][$j] if defined @matrix[$_][$j] for 0..MAX;
    return $sum;
}
sub cross_sum (@matrix) {
    my $nw2se = 0;
    $nw2se += @matrix[$_][$_] for 0..MAX;
    my $ne2sw = 0;
    $ne2sw += @matrix[$_][MAX-$_] for 0..MAX;
    return $nw2se, $ne2sw;
}
sub is-valid (@matrix) {
    for (0..MAX) -&gt; $k {
        return False if (col-sum @matrix, $k) != SUM;
    }
    return True if SUM == all cross_sum @matrix;
    return False;
}

sub find-matrices {
    my @int-list = 1..9;
    OUT: for @int-list.permutations -&gt; $perm {
        $count-perm++;
        my @matrix = gather {
            for $perm.Array -&gt; $i, $j, $k {
                next OUT unless $i + $j + $k == SUM;
                take [ $i, $j, $k ];
            }
        }
        $count-mat++;
        next unless is-valid @matrix; 
        print-matrix @matrix;
        # last;
    }
}

find-matrices;   
say "Counters: $count-perm $count-mat";
</code></pre>

<p>Note that, for performance improvement, the <code>find-matrices</code> routine skips early on any matrix in which any line sum if not equal to the target sum. This way, instead of having to check 362,880 (9!) matrices, we need to verify only 2,592 of them (less than 1% of the total).</p>

<p>This is the output displayed by this program:</p>

<pre><code>$ raku magic-square2.raku
[ 2  7  6 ]
[ 9  5  1 ]
[ 4  3  8 ]

[ 2  9  4 ]
[ 7  5  3 ]
[ 6  1  8 ]

[ 4  3  8 ]
[ 9  5  1 ]
[ 2  7  6 ]

[ 4  9  2 ]
[ 3  5  7 ]
[ 8  1  6 ]

[ 6  1  8 ]
[ 7  5  3 ]
[ 2  9  4 ]

[ 6  7  2 ]
[ 1  5  9 ]
[ 8  3  4 ]

[ 8  1  6 ]
[ 3  5  7 ]
[ 4  9  2 ]

[ 8  3  4 ]
[ 1  5  9 ]
[ 6  7  2 ]

Counters: 362880 2592
</code></pre>

<p>The implementation above is still way too complicated. It would be better to work all the way with one-dimension arrays, and to transform them into squares at the last moment. I don&#8217;t have time to refactor this program now, but the Perl implementation below uses this much simpler implementation (despite having no <code>permutations</code> built-in).</p>

<h3>Magic Square in Perl</h3>

<p>As noted above, this implementation does all the work on flat arrays of 9 integers, and transforms them into squares only when it is needed at the latest moment for the purpose of printing the squares that have been found to be magic.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant SUM =&gt; 15;

my @in = 1..9;
my @permutations;

sub print_matrix {
    my @matrix = ( [@{$_}[0..2]], [@{$_}[3..5]], [@{$_}[6..8]] );
    for my $row (@matrix)  {
        say "[", (map { sprintf "% 2i", $_ } @$row), " ]"; # for @$row;
    }
    say " ";
}

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}

sub permute {
    my ($in, $left) = @_;
    if (scalar @$left == 0) {
        return 
            # lines
            if sum( @{$in}[0..2]) != SUM
            or sum( @{$in}[3..5]) != SUM
            or sum( @{$in}[6..8]) != SUM
            # columns
            or sum( @{$in}[0, 3, 6]) != SUM
            or sum( @{$in}[1, 4, 7]) != SUM
            or sum( @{$in}[2, 5, 8]) != SUM 
            # diagonals
            or sum( @{$in}[0, 4, 8]) != SUM 
            or sum( @{$in}[2, 4, 6]) != SUM;
        push @permutations, $in;
        return;
    }
    for my $candidate (@$left) {
        my @vals = @$in;
        push @vals, $candidate;
        permute(\@vals, [grep $_ != $candidate, @$left]);
    }
}

permute [], \@in;
print_matrix \$_ for @permutations;
</code></pre>

<p>This displays the following:</p>

<pre><code>$ perl magic-square.pl
[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 13, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent of Code Day 6 - simple counting</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_06.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_06.html</id>
    <updated>2020-12-06T15:11:28+00:00</updated>
    <category term="perl"/>
    <summary type="html">Today was rather easy (or at least I did not run of into the completely wrong direction like yesterday).

Part 1

At first I thought about reusing the "parser" from day 4, but then I just went with ...</summary>
    <content type="html">&lt;p&gt;Today was rather easy (or at least I did not run of into the completely wrong direction like &lt;a href="/perl/2020_12_aoc_day_05.html"&gt;yesterday&lt;/a&gt;).&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;At first I thought about reusing the "parser" from &lt;a href="/perl/2020_12_aoc_day_04.html"&gt;day 4&lt;/a&gt;, but then I just went with an iterative approach and used an empty line as a &lt;strong&gt;reset&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $count;
my %gq;
while (&amp;lt;&amp;gt;) {
    chomp;
    if (!$_) {
        $count += keys %gq;
        %gq=();
    }
    else {
        map { $gq{$_}++ } split //;
    }
}
$count += keys %gq;
say $count;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use a hash &lt;code&gt;%gc&lt;/code&gt; (group_count) to how often each answer is present; if the line is empty (&lt;code&gt;!$_&lt;/code&gt;), I count the number of keys in the hash (i.e. the number of distinct questions answered) and reset the group_count hash &lt;code&gt;%gq&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Basically the same as Part 1, but we now need to count the number of members per group, so we can identify which question was answered by all group members (i.e. where the count of answers is equal to the number of members).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $count;
my %gq;
my $members=0;
while (&amp;lt;&amp;gt;) {
    chomp;
    if (!$_) {
        count_group();
    }
    else {
        $members++;
        map { $gq{$_}++ } split //;
    }
}

say count_group();

sub count_group {
    my @all_yes = grep { $gq{$_} == $members } keys %gq;
    %gq=();
    $members=0;
    $count += @all_yes;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Due to the way I did the "parsing" (I didn't, I just follow the input stream and reset on newline) I have to do the calculation once more after all the input is processed (basically a final reset). So I put the calculation in a function (the first time I use in function in this years AoC!).&lt;/p&gt;

&lt;h4&gt;Part 2 - No Spaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;my($c,$m,%q);for(&amp;lt;&amp;gt;,$/){chomp;if(!$_){$c+=grep{$q{$_}==$m}
keys%q;%q=();$m=0}else{$m++;map{$q{$_}++}split//}}say$c;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only a tiny bit of "smartness" here: instead of calling the calculation again after processing the input, I just add a newline to the input, thus forcing a final calculation. (That's the &lt;code&gt;$/&lt;/code&gt; after &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, and also &lt;code&gt;for&lt;/code&gt; is shorter than &lt;code&gt;while&lt;/code&gt;..)&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 7:59 / 10:54&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 19091 / 17588&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/6"&gt;https://adventofcode.com/2020/day/6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>RT – Action Plan for CPAN Authors</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">CPAN RT is going away.</a> CPAN authors have until the beginning of March to extract any useful information from it.</p>
<p>RT is the “Request Tracker”, a bug tracking system that is written by <a href="https://bestpractical.com/">Best Practical</a>. For almost as long as I can remember, anyone who uploads a module to <a href="https://www.cpan.org/">CPAN</a> gets a free ticket queue for their module at <a href="https://rt.cpan.org/">rt.cpan.org</a>. <a href="https://metacpan.org/">MetaCPAN</a> assumes that’s where people should report bugs in your module and helpfully adds an “issues” link that goes to the appropriate page in RT.</p>
<p>But now that system is going away. It will be switched off on the 1st March 2021. The <a href="https://noc.perl.org/">Perl NOC team</a> is spread pretty thinly and they just don’t have the resources to keep it running.</p>
<p>Gabor has published <a href="https://www.youtube.com/watch?v=5ly28Ew0spY">a video talking about what this means and some of the potential problems</a>. But I thought it would be useful to work on a list of things that CPAN authors should be thinking about over the next three months.</p>
<p>Firstly, and most importantly, you’ll need somewhere new for people to report problems with your modules. For most people, that’ll be simple enough. If you host your code repos somewhere like GitHub, then you could just use the issue trackers that most of those services provide. If you host your own code repos (or don’t have public code repos), then you’ll need to find an alternative solution.</p>
<p>Next you’ll need to tell people where to find your new bug tracker. You do this by adding it to the metadata for your CPAN distribution. If, like most people, you provide a Makefile.PL in your distribution, then you’ll want to add a snippet like this to your code:</p><pre class="urvanov-syntax-highlighter-plain-tag">META_MERGE        =&gt; {
  'meta-spec' =&gt; { version =&gt; 2 },
  resources =&gt; {
    bugtracker =&gt; {
      "web" =&gt; "https://github.com/davorg/moox-role-json_ld/issues"
    }
 },</pre><p>It’s likely that you already have a “resources” key in your data structure (containing, for example, a link to your code repo), in which case you just need to add the “bugtracker” key inside it. When you release this new update to CPAN, the “issues” link will change to point to your new bug tracker.</p>
<p>You then have the problem of dealing with the tickets that are currently in your RT queues. I suggest one or more of the following strategies:</p>
<ol>
<li>Go through the list and fix any that can be easily fixed. I found two like that when looking through my list this morning. If you’re releasing new versions of the modules (to add the new bug tracker information) then you might as well fix a bug or two at the same time.</li>
<li>Look for tickets that can be closed. My list contains some very old tickets. I mean like fifteen years old. If someone had a problem installing one of your modules fifteen years ago and hasn’t followed-up more recently, then there’s a good chance that they no longer care about the solution. What I’ve been doing is to check on <a href="https://www.cpantesters.org/">CPAN Testers</a> to see if anyone else has seen a similar problem. If I see other reports, I know that it’s something that needs to be fixed. If there’s just the one in RT, then I close it with a message saying (paraphrased) “if this is still a problem that you’d like me to investigate, then please open a new ticket at [link to new bug tracker]”.</li>
<li>Then you’re left with the tickets that you’d still like to address at some point. The Perl NOC team say that they’ll probably make a static archive of the old RT tickets available. But it would be good to get those tickets over to your new bug tracker. As I’m using GitHub for my new bug trackers, and that’s currently the most popular solution other than the CPAN RT itself, I’m hoping that someone cleverer than me will write some code that will make moving the tickets easy. But if nothing happens before the end of January, I might have to look into that myself.</li>
</ol>
<p>I’ve got a bit of work to do in this area myself. Although I’ve been using GitHub for all of my CPAN code for a long time, I haven’t been advertising the fact that I’d prefer people to use GitHub for bug reporting too. So I need to update all of my modules with the new bug tracker information included. I’ll do that over the next few weeks.</p>
<p>I have a couple of tools that might help in this process. Firstly, I’ve just added to <a href="https://cpandashboard.com/">CPAN Dashboard</a> a column that links to the module’s bug tracker if one exists. I can use that to know which modules need to be updated.</p>
<p>You could <a href="https://cpandashboard.com/add/">add yourself to CPAN Dashboard</a> if you wanted to get that information for your modules. But if you don’t want to do that, I’ve written a really short program that you can use to find your CPAN distributions that don’t include the bug tracker information.<a href="https://gist.github.com/davorg/faab75c5f40c9a580aa532f441442eb6"> It’s available as a Gist.</a></p>
<p>Have I missed anything? I mean, yes, I know there are a large number of unmaintained CPAN distributions that no-one will get round to updating. But this post was aimed at active CPAN authors. If there’s anything else you think we should be doing, then please let me know in the comments.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">RT – Action Plan for CPAN Authors</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>CPAN RT is going away. CPAN authors have until the beginning of March to extract any useful information from it. RT is the “Request Tracker”, a bug tracking system that is written by Best Practical. For almost as long as I can remember, anyone who uploads a module to CPAN gets a free ticket queue […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">RT – Action Plan for CPAN Authors</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2022</id>
    <published>2020-12-06T12:40:17Z</published>
    <updated>2020-12-06T12:40:17Z</updated>
    <category term="Miscellaneous"/>
    <category term="bugtracker"/>
    <category term="cpan"/>
    <category term="rt"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-25623131984815419</id>
    <published>2020-12-05T21:06:00.000+01:00</published>
    <updated>2020-12-05T21:06:48.080+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxviii) 14 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.83&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 6.82 was 5 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A date and time object for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-04&lt;/li&gt;  &lt;li&gt;Votes: 197&lt;/li&gt;  &lt;li&gt;Previous version: 1.53 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/DBD-CSV-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI driver for CSV files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 4 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.08&lt;/strong&gt; on 2020-12-02&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 3.07 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AUDREYT/Feersum-1.410' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Feersum&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A PSGI engine for Perl based on EV/libev &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.410&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.407 was 1 year, 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2020-11-29&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.73&lt;/strong&gt; on 2020-12-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.72 was 1 year, 8 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.67&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 435&lt;/li&gt;  &lt;li&gt;Previous version: 8.65 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.7000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.7000&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.6006 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.051' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.051&lt;/strong&gt; on 2020-11-29&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 1.050 was 8 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20201202' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20201202&lt;/strong&gt; on 2020-12-02&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20201001 was 2 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Plack-1.0048' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Plack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Superglue for Web frameworks and Web Servers (PSGI toolkit) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.0048&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 220&lt;/li&gt;  &lt;li&gt;Previous version: 1.0047 was 2 years, 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v6.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v6.10.0&lt;/strong&gt; on 2020-12-01&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v6.8.0 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.63 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/25623131984815419/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/25623131984815419"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/25623131984815419"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html" title="(cccxviii) 14 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-478013986391213073</id>
    <published>2020-12-05T21:04:00.001+01:00</published>
    <updated>2020-12-05T21:04:11.451+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlv) metacpan weekly report - Plack</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/12/05 20:03:50 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amazon::SNS::V4" target="_blank"&gt;Amazon::SNS::V4&lt;/a&gt; - Amazon Simple Notification Service, V4 Signatures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::PAM" target="_blank"&gt;Authen::PAM&lt;/a&gt; - Frequently-Asked Questions about Authen::PAM.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive" target="_blank"&gt;Data::Recursive&lt;/a&gt; - array and hash merge, deep clone, recursive data compare, done very fast, with C++ API.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Sidef" target="_blank"&gt;Math::Sidef&lt;/a&gt; - Perl interface to Sidef's mathematical library.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Google::Cloud::Auth::ServiceAccount" target="_blank"&gt;WWW::Google::Cloud::Auth::ServiceAccount&lt;/a&gt; - Service account based OAuth authentication for Google Cloud APIs&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::PBKDF2" target="_blank"&gt;Crypt::PBKDF2&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Perl" target="_blank"&gt;Crypt::Perl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=197)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Backtrace" target="_blank"&gt;Devel::Backtrace&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode::Detect" target="_blank"&gt;Encode::Detect&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::SQLite" target="_blank"&gt;Minion::Backend::SQLite&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::ScanDeps" target="_blank"&gt;Module::ScanDeps&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=435)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SFTP" target="_blank"&gt;Net::SFTP&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH::Perl" target="_blank"&gt;Net::SSH::Perl&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Format" target="_blank"&gt;Number::Format&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::WorkUnit" target="_blank"&gt;Parallel::WorkUnit&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+3=220)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::ProcessTable" target="_blank"&gt;Proc::ProcessTable&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ProgressBar" target="_blank"&gt;Term::ProgressBar&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Compile" target="_blank"&gt;Test::Compile&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=103)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig::0.29" target="_blank"&gt;XML::Sig::0.29&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/478013986391213073/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/478013986391213073"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/478013986391213073"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html" title="(cdxlv) metacpan weekly report - Plack"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8710490265656854119</id>
    <published>2020-12-05T20:31:00.002+01:00</published>
    <updated>2020-12-05T20:31:57.021+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-12-05 19:31:10 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65080238" target="_blank"&gt;How can I wrap require and use?&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65095132" target="_blank"&gt;Regular expression to match exactly and only n times&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65058171" target="_blank"&gt;log4perl: How to write ERROR message to file and DEBUG message to stderr?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65062507" target="_blank"&gt;Properly detecting if Perl subroutine argument is array&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65073048" target="_blank"&gt;Regex: capture anything within parenthesis, also nested parenthesis&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65135802" target="_blank"&gt;How to ignore an exit(1) on a perl subroutine - tried eval but didn't work&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65130504" target="_blank"&gt;Can chrome know if there is a window maximized or not in front during selenium automation?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65137327" target="_blank"&gt;Is there a way to read comments/notes of a cell in an excel file with ParseExcel/ParseXLSX?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65074494" target="_blank"&gt;How send and received string, array and hash in perl function&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65074705" target="_blank"&gt;How can I get the local time modification of a file with File::stat in perl?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8710490265656854119/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8710490265656854119"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8710490265656854119"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html" title="(cdlxx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Advent of Code Day 5 - hard fail</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_05.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_05.html</id>
    <updated>2020-12-05T18:09:41+00:00</updated>
    <category term="perl"/>
    <summary>Today I failed quite hard. Instead of thinking what the task was really about (binary numbers), I just stupidly followed the instructions, and wasted 45min on a not-working string/arithmetic based ...</summary>
    <content type="html">&lt;p&gt;Today I failed quite hard. Instead of thinking what the task was really about (binary numbers), I just stupidly followed the instructions, and wasted 45min on a not-working string/arithmetic based &lt;a href="https://github.com/domm/adventofcode2020/blob/main/05_1.pl.not"&gt;monstrosity&lt;/a&gt; that did not even work because I had a lot of one-off errors.&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;I took a short break and planned the weekend shopping, and then cooked up an also quite &lt;a href="https://github.com/domm/adventofcode2020/blob/main/05_1_stupid.pl"&gt;stupid array-based solution&lt;/a&gt; in 11:27min. But at least I got valid results for the test data, and also for the proper input.&lt;/p&gt;

&lt;p&gt;After taking a run in the afternoon I (finally!) realized that I just need to convert the input to zeros and ones, and then convert this binary number to an int:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $max=0;
while (&amp;lt;&amp;gt;) {
    tr/FBLR/0101/;
    my $id = eval '0b'.substr($_, 0, 7).' * 8 + 0b'.substr($_, 7, 3);
    $max = $id if $id &amp;gt; $max;
}
say $max;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;tr&lt;/code&gt;, which is a Perl operator to *tr*ade chars in a string: the first char in the first part is replaced by the first char in the second part, and so on. This way I can easily convert the input into the more useful 0s and 1s.&lt;/p&gt;

&lt;p&gt;Then I can just prefix the &lt;code&gt;001010&lt;/code&gt; with &lt;code&gt;0b&lt;/code&gt; and eval the string (I know I should use &lt;code&gt;pack()&lt;/code&gt; for this, but I wasn't in the mood to read the manpage..).&lt;/p&gt;

&lt;h4&gt;Golf&lt;/h4&gt;

&lt;p&gt;Now that we have a reasonable short solution, we can golf it a bit more to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while(&amp;lt;&amp;gt;){tr/FBLR/0101/;s/(.{7})(.{3})/'0b'.$1.'*8+0b'.$2/ee;if($_&amp;gt;$a){$a=$_}}say$a;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using &lt;code&gt;substr&lt;/code&gt; to extract the row and set spec, I use a regex replacement, and in the replacement and use the nice double-e flag &lt;code&gt;/ee&lt;/code&gt; to evaluate the result twice. The first eval will prepare a string like &lt;code&gt;0b1001010*8+0b010&lt;/code&gt;, and the second eval will calculate this expression and return the seat &lt;span class="caps"&gt;ID.&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;The one benefit of my stupid approach for part 1 was that it was very easy to just generate a "map" of the plane, remove all the occupied seats, and then just print out the remaining seats.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %plane;
for my $r (0 .. 128) {
    for my $s (0..7) {
        $plane{$r.'_'.$s}='X';
    }
}
# ...
    delete $plane{$row.'_'.$seat};
# ...
    warn Data::Dumper::Dumper \%plane;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allowed me to immediately spot my seat (73/3)! Sometimes it's easier to use the big computer behind my eyes for simple pattern recognition instead to come up with a coded solution (of course this does not scale very well..)&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 55:48 / 04:51&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 20095 / 18927&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/5"&gt;https://adventofcode.com/2020/day/5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
  <title>RT.CPAN.ORG is closing</title>
  <summary type="html"><![CDATA[<p>
<a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">Request Tracker (RT) of CPAN is closing</a>. What is the impact?
<p>
Check <a href="https://cpan.rocks/">CPAN Rocks</a> for the statistics.
<p>
Add yourself to <a href="https://cpandashboard.com/">CPAN Dashboard</a>.
<p>
Check the most recent data from <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>.
<p>
]]></summary>
  <updated>2020-12-05T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/rt-cpan-org-is-closing"/>  <id>https://perlmaven.com/rt-cpan-org-is-closing</id>
  <content type="html"><![CDATA[<p>
<a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">Request Tracker (RT) of CPAN is closing</a>. What is the impact?
<p>
Check <a href="https://cpan.rocks/">CPAN Rocks</a> for the statistics.
<p>
Add yourself to <a href="https://cpandashboard.com/">CPAN Dashboard</a>.
<p>
Check the most recent data from <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6706364024855383118</id>
    <published>2020-12-04T17:40:00.000-08:00</published>
    <updated>2020-12-04T17:40:07.400-08:00</updated>
    <title type="text">rt.cpan.org will sunset on March 1st, 2021</title>
    <content type="html">&lt;p&gt;rt.cpan.org will be sunset on March 1st, 2021 due to low and declining use.&lt;/p&gt;&lt;p&gt;We're still finalizing the details, but the plan is to provide a static historical archive.&amp;nbsp;&lt;/p&gt;&lt;p&gt;This post will be updated as we figure things out.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/6706364024855383118/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html#comment-form" title="4 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html" title="rt.cpan.org will sunset on March 1st, 2021"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>4</thr:total>
  </entry>
  <entry>
    <title>Hello World</title>
    <link rel="alternate" href="https://dev.to/anjan50/hello-world-3c9k" type="text/html"/>
    <content type="html">PHA+PGEgaHJlZj0iaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vcHJhY3RpY2FsZGV2L2ltYWdlL2ZldGNoL3MtLW1idFZCaWRYLS0vY19saW1pdCUyQ2ZfYXV0byUyQ2ZsX3Byb2dyZXNzaXZlJTJDcV9hdXRvJTJDd184ODAvaHR0cHM6Ly9kZXYtdG8tdXBsb2Fkcy5zMy5hbWF6b25hd3MuY29tL2kvd3c2cG02YnpvZDZ3c2c1Yjdmd3MucG5nIiBjbGFzcz0iYXJ0aWNsZS1ib2R5LWltYWdlLXdyYXBwZXIiPjxpbWcgc3JjPSJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9wcmFjdGljYWxkZXYvaW1hZ2UvZmV0Y2gvcy0tbWJ0VkJpZFgtLS9jX2xpbWl0JTJDZl9hdXRvJTJDZmxfcHJvZ3Jlc3NpdmUlMkNxX2F1dG8lMkN3Xzg4MC9odHRwczovL2Rldi10by11cGxvYWRzLnMzLmFtYXpvbmF3cy5jb20vaS93dzZwbTZiem9kNndzZzViN2Z3cy5wbmciIGFsdD0iQWx0IFRleHQiPjwvYT48YnI+CkEgYmlnIHN5bnRheCBjb21wYXJpc29uIGlzIGhlcmUsIHNhbWUgd29yZCBmcm9tIGRpZmZlcmVudCBsYW5ndWFnZXMgbWF5IGhlbHAgeW91IHRvIHNlbGVjdCB5b3VyIGRlc2lyZWQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2Vz8J+noPCfkrvwn5KhPC9wPgoK</content>
    <author>
      <name>Anjan Diyora</name>
    </author>
    <id>https://dev.to/anjan50/hello-world-3c9k</id>
    <published>2020-12-04T16:06:42Z</published>
    <updated>2020-12-04T16:06:42Z</updated>
    <category term="python"/>
    <category term="javascript"/>
    <category term="java"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Advent of Code Day 4 - validating regex</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_04.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_04.html</id>
    <updated>2020-12-04T13:13:09+00:00</updated>
    <category term="perl"/>
    <summary>Todays task (esp part 2) was the task the most resembles my daily work... Part 1 For parsing the input I decided to also go the string/regex way. I concatenate the whole input into on long string, ...</summary>
    <content type="html">&lt;p&gt;Todays task (esp part 2) was the task the most resembles my daily work...&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;For parsing the input I decided to also go the string/regex way. I concatenate the whole input into on long string, replace an empty line (i.e. two newlines) with a record seperator (&lt;code&gt;|&lt;/code&gt;, pipe), replace all remaning spaces and newlines (&lt;code&gt;\s&lt;/code&gt;) with a field seperator (&lt;code&gt;;&lt;/code&gt;), and then split the long string into an array on the record seperator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $in = join('',&amp;lt;STDIN&amp;gt;);
$in =~ s/\n\n/SEP/gm;
$in =~ s/\s/;/g;
my @d = split(/SEP/,$in);

my $valid;
for my $l (@d) {
    my %p = map { split /:/ } split( /;/, $l);
    $valid++ if (keys %p  8 || (keys %p  7 &amp;amp;&amp;amp; !$p{cid}));
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can convert each line (&lt;code&gt;eyr:2039;hcl:#cfa07d;hgt:171cm&lt;/code&gt;) into an hash, by first splitting on the field seperator and then on the key/value seperator (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then we only need to check if the hash has either 8 keys, or 7 keys, none of which shall be &lt;code&gt;cid&lt;/code&gt;;&lt;/p&gt;


&lt;p&gt;Now that I'm writing this I realized that I could choose &lt;code&gt;:&lt;/code&gt; as the field seperator, and thus do not need the two splits when converting a line to the hash, again using one of the slightly confusing features of Perl that is actually very powerful. You can assign a list to either an array or an hash, and if you do the latter, Perl will use one value for the key and the other for the value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %hash = ( &amp;quot;a&amp;quot;, &amp;quot;apple&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;banana&amp;quot; );  # { a =&amp;gt; 'apple', b =&amp;gt; 'banana' }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we don't need to first split into fields and then into key/value, we can do this in one go by replacing this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %p = map { split /:/ } split( /;/, $l);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %p = split( /:/, $l);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which leads to bit more light golfing and:&lt;/p&gt;

&lt;h4&gt;Part 1 - No spaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$_=join('',&amp;lt;STDIN&amp;gt;);s/\n\n/|/gm;s/\s/:/g;for(split/\|/){my%p=split/:/;$a++if(keys%p==8||(keys%p==7&amp;amp;&amp;amp;!$p{cid}))}say$a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not as good as &lt;span class="caps"&gt;APL, &lt;/span&gt;but we're getting there :-)&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Now we just have to implement a few more validators, which translate very straight forward from the spec to some regex and value checks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $in = join('',&amp;lt;STDIN&amp;gt;);
$in =~ s/\n\n/SEP/gm;
$in =~ s/\s/;/g;
my @d = split(/SEP/,$in);

my $valid = 0;
for my $l (@d) {
    my %p = map { split /:/ } split( /;/, $l);
    next unless (keys %p  8 || (keys %p  7 &amp;amp;&amp;amp; !$p{cid}));
    next unless $p{byr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{byr} &amp;gt;= 1920 &amp;amp;&amp;amp; $p{byr} &amp;lt;= 2002;
    next unless $p{iyr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{iyr} &amp;gt;= 2010 &amp;amp;&amp;amp; $p{iyr} &amp;lt;= 2020;
    next unless $p{eyr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{eyr} &amp;gt;= 2020 &amp;amp;&amp;amp; $p{eyr} &amp;lt;= 2030;
    next unless $p{hcl} =~ /^#[0-9a-f]{6}$/;
    next unless $p{ecl} =~ /^(amb|blu|brn|gry|grn|hzl|oth)$/;
    next unless $p{pid} =~ /^\d{9}$/;
    if ($p{hgt} =~ /^(\d\d\d)cm$/) {
        next unless $1 &amp;gt;= 150 &amp;amp;&amp;amp; $1 &amp;lt;= 193;
    }
    elsif ($p{hgt} =~ /^(\d\d)in$/) {
        next unless $1 &amp;gt;= 59 &amp;amp;&amp;amp; $1 &amp;lt;= 76;
    }
    else {
        next;
    }

    $valid++;
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One small "trick" was to test for height last, so we don't have to check for other invalid heights. I lost a few minutes here because I wrote two if-blocks (for centimeter and inches), which discard all valid passports. After using the valid example data and some debugging (see &lt;a href="https://github.com/domm/adventofcode2020/blob/d8cfee7345b5c73f1f5a0adabca990fdc8c766fc/04_2.pl"&gt;this commit&lt;/a&gt;) I found my error and submitted a valid result.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First 4 digit rank (for second task)!&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 10:55 / 09:27&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11732 / 7688&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/4"&gt;https://adventofcode.com/2020/day/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Japhs autopsies (2)</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/japhs-autopsies-2-41jl" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#con-de-mime" class="anchor"&gt;
  &lt;/a&gt;
  Con de MIME
&lt;/h2&gt;

&lt;p&gt;This is a french joke 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EiuE3mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzxl2wrlekteq65y8ky3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EiuE3mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzxl2wrlekteq65y8ky3.gif" alt="Barrez vous, cons de MIMES"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Japh is from &lt;strong&gt;Reynold Scem&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MIME::&lt;/span&gt;&lt;span class="nv"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;decode_base64&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ==&lt;/span&gt;&lt;span class="p"&gt;'))&lt;/span&gt;&lt;span class="o"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt;/.*/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This one... We can't guess what will happen when we eval this encoded string...&lt;/p&gt;

&lt;p&gt;It uses actually 2 steps to produce the Japh, first &lt;strong&gt;base64 encoding&lt;/strong&gt;, that we can check with &lt;code&gt;base64 -d&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ=="&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;map&lt;span class="o"&gt;{&lt;/span&gt;chr&lt;span class="o"&gt;()}(&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt;/&lt;span class="se"&gt;\S&lt;/span&gt;/,split&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;/,&lt;span class="s1"&gt;'074117115116032097110111116104101114032080101114108032104097099107101114044'&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From decoding I got the actual Perl code to evaluate and I feel a bit better now 😁&lt;/p&gt;

&lt;p&gt;The code Japh string creation code looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt;&lt;span class="sr"&gt;/\S/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;'))))&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in the perl code there is &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;chr&lt;/code&gt; (convert value to char), &lt;code&gt;grep \S&lt;/code&gt; (match all non whitespace), &lt;code&gt;split(/(...)/,&lt;/code&gt; (split per 3 chars).&lt;/p&gt;

&lt;p&gt;It's a nice showcase 😃 even if a lot of things are actually useless and only there to obfuscate the Perl code.&lt;/p&gt;

&lt;p&gt;The Japh creation could be simply reduced to :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;')));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; seems useless but forces the &lt;strong&gt;string context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So here is the complete Japh unfolded :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MIME::&lt;/span&gt;&lt;span class="nv"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Base 64 encoding&lt;/span&gt;
&lt;span class="c1"&gt;# am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ==&lt;/span&gt;
&lt;span class="c1"&gt;# join('',(map{chr()}(grep/\S/,split(/(...)/,'074117115116032097110111116104101114032080101114108032104097099107101114044'))))&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt;&lt;span class="sr"&gt;/\S/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;'))))&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;# Take 3 chars (...), do not keep space (\S), tranform to corresponding string representation, concat without space, eval (useless)&lt;/span&gt;

&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/.*/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Match everything&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# The string matched by the last successful pattern match&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maybe you noticed that there is also some fun with regex match and captured match print. It is just for fun ! 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-format-write" class="anchor"&gt;
  &lt;/a&gt;
  Open Format Write
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,"&lt;/span&gt;&lt;span class="s2"&gt;|perl&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;format=&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;write&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After some ordering, it looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,"&lt;/span&gt;&lt;span class="s2"&gt;|perl&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;P&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;
format=
Just another Perl hacker,
.
write&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are 2 tricks here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The open filehandle to another perl process&lt;/li&gt;
&lt;li&gt;The "format", an old Perl function that is less and less used nowadays &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is actually the same than :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;another&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt; &lt;span class="nv"&gt;hacker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;write&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kisses" class="anchor"&gt;
  &lt;/a&gt;
  Kisses
&lt;/h2&gt;

&lt;p&gt;Here is a simple but interesting japh with some kisses inside ! 😘 😘 😘 😘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(.*) (.*) (.*) (.*)/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9EjVF2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82r897owzb3e1gdr6045.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9EjVF2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82r897owzb3e1gdr6045.jpeg" alt="Kisses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This japh demonstrates default variable &lt;code&gt;@_&lt;/code&gt; and matching.&lt;/p&gt;

&lt;p&gt;I think it can be rewritten like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(.*) (.*) (.*) (.*)/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Perl developers should be comfortable with this form 😄&lt;/p&gt;

&lt;p&gt;It's probably time to address &lt;em&gt;regex greediness&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This kind of greedy &lt;code&gt;.*&lt;/code&gt; matches is "dangerous" (depends what you want), because it will try to match as much as possible.&lt;/p&gt;

&lt;p&gt;For instance &lt;code&gt;"Just another Perl 7 hacker,"&lt;/code&gt; with the greedy version will produce a string split like the following : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Just another&lt;/code&gt; &lt;code&gt;Perl&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; &lt;code&gt;hacker,&lt;/code&gt; (because the &lt;code&gt;.*&lt;/code&gt; happily eats also the space)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#x25" class="anchor"&gt;
  &lt;/a&gt;
  x25
&lt;/h2&gt;

&lt;p&gt;Let's have a look at a simple japh using &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; and ASCII conversion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The operator &lt;code&gt;x&lt;/code&gt; is magic :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;perl &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Will produce :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the japh, the &lt;code&gt;x 25&lt;/code&gt; is applied to &lt;code&gt;"%c"&lt;/code&gt;, therefore it can be translated like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrow-here" class="anchor"&gt;
  &lt;/a&gt;
  Arrow here
&lt;/h2&gt;

&lt;p&gt;Again a &lt;code&gt;printf "%c"&lt;/code&gt; but this time the input being in hexadecimal and the whole thing being stored in a string assignment :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-- &lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; &lt;span class="sr"&gt;s/../printf "%c",hex($&amp;amp;)/g&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nv"&gt;a75737420616e6f74686572205065726c206861636b65722c&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It starts with a &lt;a href="https://perldoc.perl.org/perlop#%3C%3CEOF"&gt;"here-doc"&lt;/a&gt; delimited by &lt;code&gt;--&lt;/code&gt; (dash + dash + space not represented by DevTo).&lt;/p&gt;

&lt;p&gt;What is weird, is that the whole thing looks only like a string assignation...&lt;/p&gt;

&lt;p&gt;Actually, the &lt;code&gt;printf&lt;/code&gt; inside the regex will print to stdout. At the end &lt;code&gt;$_&lt;/code&gt; does not even contains the string, but &lt;code&gt;sprintf&lt;/code&gt; would have done the job.&lt;/p&gt;

&lt;p&gt;And what is exactly &lt;code&gt;s/../printf "%c",hex($&amp;amp;)/ge&lt;/code&gt; ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s///&lt;/code&gt; is for substitution.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&amp;amp;&lt;/code&gt; is what have been &lt;a href="(https://perldoc.perl.org/perlvar#%24&amp;amp;)"&gt;matched&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/e&lt;/code&gt; modifier allows the right part of the substitution to be actually executed as normal Perl code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/g&lt;/code&gt; modifier is the "looping modifier" or "global modifier" and just repeats the match along the string !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, I propose this rewrite of the japh :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4a75737420616e6f74686572205065726c206861636b65722c&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/../g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# Or $str =~ s/..//&lt;/span&gt;
       &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;%c&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cristal clear like this isn't it ?&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/japhs-autopsies-2-41jl</id>
    <published>2020-12-04T11:27:22Z</published>
    <updated>2020-12-04T11:27:22Z</updated>
    <category term="japh"/>
    <category term="perl"/>
    <category term="obfuscation"/>
  </entry>
  <entry>
    <title>Gitlab umziehen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-04-gitlab-umziehen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In verschiedenen Projekten setzen wir ein jeweils selbst gehostetes Gitlab ein. Gitlab bietet viel mehr als nur die Versionskontrolle. Gregor hat vor einiger Zeit schon einmal etwas dazu geschrieben, wie wir bei Perl-Services.de Gitlab benutzen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-04-gitlab-umziehen</id>
    <published>2020-12-04T10:00:00Z</published>
    <updated>2020-12-04T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ColorThemed-0.002">Acme-CPANModules-ColorThemed</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that has color theme support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Getopt-0.002">Acme-CPANModules-Getopt</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that parse command-line options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ModulesThatJustContainData-0.001">Acme-CPANModules-ModulesThatJustContainData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-Marvel-CinematicUniverse-Characters-0.001">Acme-Marvel-CinematicUniverse-Characters</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>example of distributing instance data on CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMOYAMA/Acme-TOMOYAMA-Utils-0.01">Acme-TOMOYAMA-Utils</a></td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>0.01</td>
<td>The great new Acme::TOMOYAMA::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Algorithm-Diff-JSON-1.000">Algorithm-Diff-JSON</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>find the differences between two lists and report on them in JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libavro_c-0.01">Alien-libavro_c</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libavro_c, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libgraphqlparser-0.01">Alien-libgraphqlparser</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libgraphqlparser, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libjansson-0.01">Alien-libjansson</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libjansson, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libmariadbclient-0.01">Alien-libmariadbclient</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libmariadbclient, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-librdkafka-0.01">Alien-librdkafka</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>librdkafka, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libsnappy-0.01">Alien-libsnappy</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libsnappy, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libzookeeper-0.02">Alien-libzookeeper</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.02</td>
<td>libzookeeper, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/Amazon-SNS-V4-1.4">Amazon-SNS-V4</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1.4</td>
<td>Amazon Simple Notification Service, V4 Signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TANIGUCHI/Amon2-Auth-Site-LINE-0.01">Amon2-Auth-Site-LINE</a></td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>0.01</td>
<td>LINE integration for Amon2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Ansible-Util-0.001">Ansible-Util</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Utilities for interacting with Ansible.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-UI-0.01">App-Device-Chip-UI</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Tickit-based UI for Device::Chip drivers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaInstall-0.001">App-GhaInstall</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides the gha-install command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaProve-0.001">App-GhaProve</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides gha-prove app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-GrepUtils-0.001">App-GrepUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to the Unix command 'grep'</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-Tables-CLI-0.003">App-Tables-CLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Manipulate Tables::* modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.01">App-ansicolumn</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>ANSI sequence aware column command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-colortheme-0.001">App-lcpan-CmdBundle-colortheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-lupapona-1">App-lupapona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>a simple static Gemini server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-mokupona-2.01">App-mokupona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>2.01</td>
<td>a feed aggregator for Gopher, Gemini, RSS and Atom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HKOBA/App-oo_modulino_zsh_completion_helper-0.01">App-oo_modulino_zsh_completion_helper</a></td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>0.01</td>
<td>provides zsh completion for OO-Modulinos</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-optex-xform-1.01">App-optex-xform</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>data transform filter module for optex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-phoebe-1.1">App-phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1.1</td>
<td>an app that serves a wiki as a Gemini and web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-LMDB-0.000_01">AtteanX-Store-LMDB</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>LMDB-based RDF store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRIANG/BRIANG-Dist-Perfect-0.01-TRIAL">BRIANG-Dist-Perfect</a></td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>0.01</td>
<td>A perfect distribution for a perfect year. Or perhaps not.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-AppSorted-0.001">Bencher-Scenario-AppSorted</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark sorted vs is-sorted</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-StringSimpleEscape-0.001">Bencher-Scenario-StringSimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark String::SimpleEscape</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/Config-MorePerl-1.2.0">Config-MorePerl</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.2.0</td>
<td>Convenient and flexible config loader in perl format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VANSTYN/DBIx-Class-StateMigrations-0.001">DBIx-Class-StateMigrations</a></td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>0.001</td>
<td>Schema migrations via checksums instead of versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-TCS3472x-0.01">Device-Chip-TCS3472x</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for TCS3472x-family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SHLOMIF/File-ShouldUpdate-0.0.1">File-ShouldUpdate</a></td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>0.0.1</td>
<td>should files be rebuilt?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Genealogy-ObituaryDailyTimes-0.01">Genealogy-ObituaryDailyTimes</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Compare a Gedcom against the Obituary Daily Times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenTable-0.001">Health-BladderDiary-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Linux-Utils-0.001">Linux-Utils</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Miscellaneous utilities for Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-Output-Test-Counter-0.001">Log-ger-Output-Test-Counter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Increase internal counter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseDataDumperCompact-0.001">Log-ger-UseDataDumperCompact</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Dumper::Compact to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRIBUSER/Minio-0.02">Minio</a></td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MONSTAR/Mojolicious-Plugin-MoreHelpers-0.02">Mojolicious-Plugin-MoreHelpers</a></td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>0.02</td>
<td>More helpers lacking in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Net-Camera-Sercomm-ICamera2-0.01">Net-Camera-Sercomm-ICamera2</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>Perl Interface for Sercomm ICamera2 network camera</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-PKCE-0.001">Net-OAuth2Server-PKCE</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A PKCE extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dBase-0.01">Net-SNMP-Mixin-NXOSDot1dBase</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for some Bridge base values from NXOS switches.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dStp-0.01">Net-SNMP-Mixin-NXOSDot1dStp</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1D spanning tree information from Cisco NXOS devices.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1qFdb-0.01">Net-SNMP-Mixin-NXOSDot1qFdb</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1-Q switch forwarding databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZMUGHAL/Orbital-Transfer-0.001">Orbital-Transfer</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>Software project manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Package-Role-ini-0.02">Package-Role-ini</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.02</td>
<td>Perl role for "ini" object the returns a Config::IniFiles object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock-0.01">Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not "return" in "do" block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ProhibitOrReturn-0.01">Perl-Critic-Policy-ProhibitOrReturn</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not use `or return`</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Perl-LineNumber-Comment-0.001">Perl-LineNumber-Comment</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add line number to Perl source as comment</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HMBRAND/PerlIO-via-xz-0.02">PerlIO-via-xz</a></td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>0.02</td>
<td>PerlIO layer for XZ (de)compression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEODESIAN/Playwright-0.001">Playwright</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>Perl client for Playwright</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CRAIGKAI/RT-Extension-ToggleTheme-0.02">RT-Extension-ToggleTheme</a></td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>0.01</td>
<td>RT-Extension-ToggleTheme Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-DzilBuild-0.003">Require-Hook-Source-DzilBuild</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Load module source code from Dist::Zilla build files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-MetaCPAN-0.002">Require-Hook-Source-MetaCPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Load module source code from MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Tables-0.001">Sah-Schemas-Tables</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to the Tables module family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/String-Binary-Interpolation-1.0.0">String-Binary-Interpolation</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v1.0.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/String-SimpleEscape-0.001">String-SimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Simple string escaping &amp; unescaping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-Quotes-JamesFT-0.001">Tables-Quotes-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-WordList-0.001">Tables-WordList</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Table from a WordList module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-ExpectAndCheck-0.01">Test-ExpectAndCheck</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>expect/check-style unit testing with object methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-Future-IO-0.01">Test-Future-IO</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>unit testing on Future::IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/Text-Conceal-0.99">Text-Conceal</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>conceal and recover interface for text processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASB/Tk-Zinc-3.304">Tk-Zinc</a></td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>3.304</td>
<td>a canvas offering groups, tranformations, transparency, color gradient…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-Corncob-0.001">WordList-EN-Corncob</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Corncob word list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-Phrase-EN-Quote-JamesFT-0.001">WordList-Phrase-EN-Quote-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Famous quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DMOL/XS-libpanda-backtrace-1.0.0">XS-libpanda-backtrace</a></td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>v1.0.0</td>
<td>C++ runtime backtraces library for XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Zydeco-Lite-App-0.001">Zydeco-Lite-App</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>use Zydeco::Lite to quickly develop command-line apps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/notice-0.01">notice</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Breaking-Change Acknowledgement Enforcement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOCHSTEN/rdf-ldf-0.251">rdf-ldf</a></td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>0.251</td>
<td>Linked Data Fragments client</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>73</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ColorThemed PERLANCAR 0.002 Modules that has color theme support Acme-CPANModules-Getopt PERLANCAR 0.002 Modules that parse command-line options Acme-CPANModules-ModulesThatJustContainData PERLANCAR 0.001 Modules that just contain data Acme-Marvel-CinematicUniverse-Characters TOBYINK 0.001 example of distributing instance data on CPAN Acme-TOMOYAMA-Utils TOMOYAMA 0.01 The great new Acme::TOMOYAMA::Utils! Algorithm-Diff-JSON DCANTRELL 1.000 find the differences between two lists … <a href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1929</id>
    <published>2020-12-04T09:47:51Z</published>
    <updated>2020-12-04T09:47:51Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>About Perl books review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2WGgD7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xapwycst9cl153u6oh0f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2WGgD7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xapwycst9cl153u6oh0f.jpg" alt="books"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fonda Lee &lt;a href="https://twitter.com/FondaJLee/status/1221647630368854019"&gt;said on Twitter&lt;/a&gt; something like this about books marketing : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"In the long run, the thing that sells books the most 
is word of mouth. 

This goes 10x for books that aren’t launched with big marketing 
or publicity support i.e. 95% of books. 

What I’m saying is, talk up the books you love, 
because their survival depends on it."
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That's why I started a serie of Perl books review 😃&lt;br&gt;
(and also for personal notetaking 👍)&lt;/p&gt;

&lt;p&gt;So far, here is the list of reviewed books (list always under construction) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-and-lwp-emd"&gt;Perl and LWP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-xml-and-perl-2jj4"&gt;Perl and XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-pour-l-impatient-4dfi"&gt;Perl pour l'impatient [FR]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-and-dbi-fbf"&gt;Perl and DBI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn"&gt;Perl for system administration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want more Perl books ? You can find them on my almost &lt;a href="https://github.com/thibaultduponchelle/perlres#books-books"&gt;complete list of Perl books&lt;/a&gt; &lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6</id>
    <published>2020-12-04T08:52:00Z</published>
    <updated>2020-12-04T08:52:00Z</updated>
    <category term="books"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>FOSDEM 2021: Call for papers open</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem-2021-call-for-papers"/>
  <id>tag:news.perlfoundation.org,2020-12-04:/post/fosdem-2021-call-for-papers</id>
  <published>2020-12-04T08:45:39</published>
  <updated>2020-12-04T08:45:39</updated>
  <summary>
  <![CDATA[
     About FOSDEM Perl and Raku have taken part in the annual free FOSDEM event for many years and we have now been accepted for a virtual devroom in 2021. There is no registration, but attendees must follow FOSDEM code of conduct and for the first time this year the event will be on-line. We are now calling for papers for talks in our virtual devroom. CfP Deadlines Submission deadline: Dec 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Hackathons" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>About FOSDEM</h2>

<p>Perl and Raku have taken part in the annual free <a href="https://fosdem.org/2021/">FOSDEM</a> event for many years and we have now been accepted for a virtual devroom in 2021.</p>

<p>There is no registration, but attendees must follow <a href="https://fosdem.org/2021/practical/conduct/">FOSDEM code of conduct</a> and for the first time this year the event will be on-line.</p>

<p>We are now calling for papers (CfP) for talks in our virtual devroom.</p>

<h2>CfP Deadlines</h2>

<ul>
<li>Submission deadline: Dec 23rd, 2020</li>
<li>Selected talks announced by Dec 31st, 2020</li>
<li>Conference dates 6 &amp; 7 February 2021 online</li>
<li>Perl &amp; Raku devroom taking place on Saturday February 2021.</li>
<li>Talk video submission: mid-January.</li>
</ul>

<h2>What kind of talks we're interested in</h2>

<p>The main topic of the room will be "Perl&amp;Raku in a world in flux", and the open call for papers will include the following topics:</p>

<ul>
<li>data science</li>
<li>infrastructure as code</li>
<li>virtualization and containers</li>
<li>development practices</li>
<li>teaching</li>
<li>data munging</li>
<li>data storage</li>
<li>interfacing Perl &amp; Raku to the rest of the world</li>
<li>testing, continuous integration and continuous development best practices</li>
<li>Perl, Raku and other scripting languages, what they can learn from each other</li>
</ul>

<h3>Talk details</h3>

<ul>
<li>The default duration for talks is about 45 minutes including discussion. 
<ul>
<li>Please select the most suitable duration for your talk, excluding Q&amp;A.</li>
</ul></li>
<li>Talks will be pre-recorded in advance, and streamed during the event. This means that you should be ready to submit your recorded talk by mid-January.
<ul>
<li>⚠️ Presentations has to be pre-recorded and submited by mid-January⚠️. Your whole talk needs to be ready by then</li>
</ul></li>
<li>The reference time will be Brussels local lime (CET).</li>
<li>Q/A session will be live, so you need to be present when your presentation is aired to take these questions.</li>
<li>Attendees will be able to chat, and will also have a way to submit questions.</li>
<li>Food and drinks is now allowed during the talks, but you are responsible for cleaning your own space. 
<ul>
<li>If you don't, we'll call your roommates and they will change the password for the WiFi to punish you.</li>
</ul></li>
</ul>

<h2>Submit your talk!</h2>

<p>All submissions for devrooms are made through the FOSDEM <a href="https://penta.fosdem.org/">Pentabarf website</a> - you need to register, in case you haven't done so already. 
- Select the "Perl and Raku devroom" as the track for your "event", which is FOSDEMspeak for talk. 
- Add all the info requested and whatever you think it's necessary for us to select it for FOSDEM. 
- Please remember to include your time zone in your bio or where you think it's reasonable so that we can schedule your talk accordingly.</p>

<h2>We need volunteers!</h2>

<p>If you want to help with selecting the talks, helping speakers, reviewing talks once they're ready, just let us know!</p>

<h2>Get in touch</h2>

<p>If you have questions, contact:
- JJ Merelo <a href="&#x6D;&#x61;&#x69;&#x6C;&#116;&#111;:&#106;&#106;&#x6D;&#x65;&#x72;&#x65;&#x6C;&#111;&#64;&#103;&#x6D;&#x61;&#105;&#x6C;&#46;&#99;&#x6F;&#x6D;">&#106;&#106;&#x6D;&#x65;&#x72;&#x65;&#x6C;&#111;&#64;&#103;&#x6D;&#x61;&#105;&#x6C;&#46;&#99;&#x6F;&#x6D;</a> 
- Stuart Mackintosh <a href="&#x6D;&#x61;&#105;&#x6C;&#x74;&#x6F;:&#x73;&#x74;&#117;a&#x72;&#x74;&#64;&#x70;&#101;&#x72;&#108;&#102;&#111;&#x75;&#110;&#100;&#97;t&#x69;&#111;&#x6E;&#x2E;&#111;&#x72;&#103;">&#x73;&#x74;&#117;a&#x72;&#x74;&#64;&#x70;&#101;&#x72;&#108;&#102;&#111;&#x75;&#110;&#100;&#97;t&#x69;&#111;&#x6E;&#x2E;&#111;&#x72;&#103;</a>.</p>

<p>You can also get in touch with us:</p>

<ul>
<li>via IRC at #raku on Freenode </li>
<li>in our #FOSDEM Slack channel
<ul>
<li>through this share link available for 7 days: https://join.slack.com/share/zt-jv3d9yec-2Ub7~dYc6kHMff2r9jMqWg?cdn_fallback=1</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Book review "Perl For System Administration"</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBNIBnru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ahkuxfyxed7dwkrr8n3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBNIBnru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ahkuxfyxed7dwkrr8n3.jpg" alt="Perl Sysadmin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Yet another book review ! \o/  &lt;/p&gt;

&lt;p&gt;This book was released in Y2K. Seems like there was no new edition since then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perl for System Administration&lt;/strong&gt; is written by &lt;strong&gt;David N. Blank-Edelman&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#very-cool" class="anchor"&gt;
  &lt;/a&gt;
  Very cool
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#old-bits" class="anchor"&gt;
  &lt;/a&gt;
  Old bits
&lt;/h3&gt;

&lt;p&gt;Some fun facts about how &lt;em&gt;old&lt;/em&gt; is the book : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The book mentions &lt;strong&gt;"Perl is not ubiquitous"&lt;/strong&gt; as a weakness 
when having to choose between Perl and other scripts languages.&lt;/li&gt;
&lt;li&gt;The author thanks Usenix, SAGE and LISA conferences.&lt;/li&gt;
&lt;li&gt;Recommends search.cpan.org 😄&lt;/li&gt;
&lt;li&gt;"NTFS driver will be integrated in Linux kernel 2.2"... ah memories&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Security is always one of the numerous hats of a System Administrator...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UK8ZqHMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s94r2hu2yes0f11qz1ai.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UK8ZqHMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s94r2hu2yes0f11qz1ai.jpg" alt="Security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some notions explained in the book :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poison null byte (still possible in 2020 ?)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;open(TEMPFILE, "&amp;gt;/tmp/tmp.$$);&lt;/code&gt; Predicatble &lt;code&gt;$$&lt;/code&gt; on multi user machine, 
a malicious user can predict and &lt;em&gt;steal&lt;/em&gt; a temp file and write custom text/command to force
reader to execute what he wants&lt;/li&gt;
&lt;li&gt;I discovered that "..." ". " were valid filenames (for bad people).&lt;/li&gt;
&lt;li&gt;Interesting exercise with system monitoring (dates, content, DNS dump...) &lt;/li&gt;
&lt;li&gt;The idea of Postmortem, long time before devops mindset :D&lt;/li&gt;
&lt;li&gt;Classic DDoS SYN flood attack (I think the first time I heard about it was in a story about Kevin Mitnick)&lt;/li&gt;
&lt;li&gt;Cool part mentioning "John the ripper", "Crack" or "L0phtCrack". "libcrack" and "npasswd" 💀&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-discovered" class="anchor"&gt;
  &lt;/a&gt;
  Things I discovered
&lt;/h3&gt;

&lt;p&gt;I learnt also : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lot of things about PPM.&lt;/li&gt;
&lt;li&gt;A lot about macperl : cpan-mac and &lt;strong&gt;installme&lt;/strong&gt; where you can drag and drop tarballs to install &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chapter-about-file-systems" class="anchor"&gt;
  &lt;/a&gt;
  Chapter about file systems
&lt;/h3&gt;

&lt;p&gt;Very cool !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How MAC is different (data fork, resource fork)&lt;/li&gt;
&lt;li&gt;How Windows is LOL (vfat = how to build something on top of a technical debt)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#corrupted-check-file" class="anchor"&gt;
  &lt;/a&gt;
  Corrupted check file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The sample code is cool&lt;/li&gt;
&lt;li&gt;The sysread trick vs &amp;lt; &amp;gt; (read sequentially and stop at first error)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, how the author tells a story and explains sysadmin concepts each time is very cool -- I LOVE IT --&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quotas" class="anchor"&gt;
  &lt;/a&gt;
  Quotas
&lt;/h3&gt;

&lt;p&gt;How quotas are explained is very cool.&lt;/p&gt;

&lt;p&gt;Quotas edition samples are a bit hacky and brittle (not by the fault of the author) but proves "how to get the job done" with Perl.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-users" class="anchor"&gt;
  &lt;/a&gt;
  Handling users
&lt;/h3&gt;

&lt;p&gt;Some tips detailed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GID is primary group&lt;/li&gt;
&lt;li&gt;We can have a group password &lt;/li&gt;
&lt;li&gt;Password &lt;code&gt;*&lt;/code&gt; to disable login&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&amp;lt;&lt;/code&gt; and &lt;code&gt;$&amp;gt;&lt;/code&gt; and &lt;code&gt;$)&lt;/code&gt; and &lt;code&gt;$(&lt;/code&gt; for real/effective user/group&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#windows" class="anchor"&gt;
  &lt;/a&gt;
  Windows
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Windows : RID + DID = SID &lt;/li&gt;
&lt;li&gt;Impossible to recreate same user then computer owner change implies to rename user&lt;/li&gt;
&lt;li&gt;Windows cannot &lt;em&gt;give&lt;/em&gt; ownership, we can only &lt;em&gt;take&lt;/em&gt; ownership&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#unix-vs-win" class="anchor"&gt;
  &lt;/a&gt;
  Unix vs Win
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;There is a password hash incompatibility (algorithm)&lt;/li&gt;
&lt;li&gt;On Unix there is a superuser whereas on Windows it's more like super-heros (users with super powers)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sysadmin-mindset" class="anchor"&gt;
  &lt;/a&gt;
  Sysadmin mindset
&lt;/h3&gt;

&lt;p&gt;Sysadmins have their own mindset (and the ones I know have a great sense of humor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTSJeRln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzypd39kfrex3vb1883r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTSJeRln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzypd39kfrex3vb1883r.jpg" alt="Sysadmin starter pack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Nothing is foolproof because fools are so ingenious"&lt;/li&gt;
&lt;li&gt;"Something is wrong and I have no idea what" (how some users report problems) lol&lt;/li&gt;
&lt;li&gt;"Sysadmins are log file linguists"&lt;/li&gt;
&lt;li&gt;"Handle with pack and unpack - this way lies madness and misery" 😃&lt;/li&gt;
&lt;li&gt;"There are times where death is too good for a process"&lt;/li&gt;
&lt;li&gt;"Security is continuum"&lt;/li&gt;
&lt;li&gt;"You can be more secure but you will never be 100% secure" and in the same theme "It is always possible to find more to fear"&lt;/li&gt;
&lt;li&gt;"Oog's password to get back into the clan's cave was probably "oog" " (about weak passwords)&lt;/li&gt;
&lt;li&gt;"Detect local signs of perils" (nothing special but it sounds good to me 😄)&lt;/li&gt;
&lt;li&gt;"Learn something from incident instead of only loosing time and effort"&lt;/li&gt;
&lt;li&gt;"An user does not login from a lot of different places" (probably still true today even in the "mobility world" that we know today)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#process-handling" class="anchor"&gt;
  &lt;/a&gt;
  Process handling
&lt;/h3&gt;

&lt;p&gt;Very nice chapter !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inspect process with &lt;code&gt;/dev/kmem&lt;/code&gt;, &lt;code&gt;Proc::ProcessTable&lt;/code&gt;, &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;proc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Filewatcher windows very contemporary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#directories-services" class="anchor"&gt;
  &lt;/a&gt;
  Directories services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finger&lt;/li&gt;
&lt;li&gt;whois&lt;/li&gt;
&lt;li&gt;LDAP (LDIF)&lt;/li&gt;
&lt;li&gt;Active Directory (ADSI, DCOM, OLE)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caracteristics : structured or not, some implementation details etc...&lt;/p&gt;

&lt;p&gt;Networked, remote, hierarchical, structured, read many write few...&lt;/p&gt;

&lt;p&gt;Very good chapter about LDAP, I skipped some parts at the end, but at least I have ready to use code if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-cool-things" class="anchor"&gt;
  &lt;/a&gt;
  Other cool things
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Control Windows windows with API !&lt;/li&gt;
&lt;li&gt;Security bits&lt;/li&gt;
&lt;li&gt;References at the end of chapter, original but cool&lt;/li&gt;
&lt;li&gt;Very nice chapter about DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#not-cool" class="anchor"&gt;
  &lt;/a&gt;
  Not cool
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Not for Perl beginners, sometimes complex notions are thrown without any explanation (&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;\%&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;refs&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Sometimes too much details that will be outdated one day after the book is released (a bug in a very specific version of &lt;code&gt;Net::NIS&lt;/code&gt;...)&lt;/li&gt;
&lt;li&gt;Sometimes too much code (one snippet was 5 pages long, tldr;)&lt;/li&gt;
&lt;li&gt;Lost with chapter about XML, not clear&lt;/li&gt;
&lt;li&gt;SNMP and LDAP are probably not so well explained&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#various-tips-and-tricks" class="anchor"&gt;
  &lt;/a&gt;
  Various Tips and tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Compare 2 tabs that contains numbers &lt;code&gt;if("@arr[1..12]" ne "@arr2")&lt;/code&gt; nice Perl idiom (slice then convert to string to compare).&lt;/li&gt;
&lt;li&gt;Do you know the SQL "SELECT ... &lt;em&gt;INTO&lt;/em&gt; ..." ? Me not ! 😁&lt;/li&gt;
&lt;li&gt;Good idea to compare SQL operators to Perl regex operators !&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appendix" class="anchor"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;p&gt;There are really short introductions, quality depends the topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XS and XML intros are cool. &lt;/li&gt;
&lt;li&gt;LDAP and SNMP intros are too hard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Very pleasant to let the author give a tour of Operating Systems for us for each topic, even (especially) if I'm less interested in some OS.&lt;/p&gt;

&lt;p&gt;You should read this book! Definitely ! 👍&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn</id>
    <published>2020-12-04T07:57:29Z</published>
    <updated>2020-12-04T07:57:29Z</updated>
    <category term="perl"/>
    <category term="books"/>
    <category term="sysadmin"/>
    <category term="systems"/>
  </entry>
  <entry>
    <title>Advent of Code Day 3 - the first modulo</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_03.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_03.html</id>
    <updated>2020-12-04T00:02:19+00:00</updated>
    <category term="perl"/>
    <summary>Part 1 .. and the first 2D map! Which is quite simple to parse in Perl (or Perl makes parsing simple?) We just need to look ahead in the map and search for trees. my @map = map { chomp; ...</summary>
    <content type="html">&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;.. and the first 2D map!&lt;/p&gt;

&lt;p&gt;Which is quite simple to parse in Perl (or Perl makes parsing simple?)&lt;/p&gt;

&lt;p&gt;We just need to look ahead in the map and search for trees.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [split(//,$_)] } &amp;lt;STDIN&amp;gt;;
my $w = $map[0]-&amp;gt;@*;

my $trees;
my $c=0;
my $r=0;
while (my $pos = $map[$r]-&amp;gt;[$c]) {
    $trees++ if $pos eq '#';
    $c = ($c + 3) % $w;
    $r++;
}
say $trees;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of repeating the pattern (as hinted in the instruction, ts, ts), we of course use &lt;code&gt;modulo&lt;/code&gt; to keep the horizontal counter inside the map definition.&lt;/p&gt;

&lt;p&gt;I still managed to waste at least 5 minutes to a scoping bug:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (my $pos = $map[$r]-&amp;gt;[$c]) {
    $trees++ if $pos eq '#';
    my $c = ($c + 3) % $w;
    $r++;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;my&lt;/code&gt; before the assignment to &lt;code&gt;$c&lt;/code&gt;. Thanks to this I was always checking the first column, for not very correct results...&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;For part two we just need to check a few (5) different ways to calculate where we should look for a tree, so we pack those instructions into an array, and adapt the lookahead to use these values instead of the hardcoded ones.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [split(//,$_)] } &amp;lt;STDIN&amp;gt;;
my $w = $map[0]-&amp;gt;@*;

my @slopes=([1,1],[3,1],[5,1],[7,1],[1,2]);

my $prod=1;
for my $slope (@slopes) {
    my $trees;
    my $c=0;
    my $r=0;
    while (my $pos = $map[$r]-&amp;gt;[$c]) {
        $trees++ if $pos eq '#';
        $c = ($c + $slope-&amp;gt;[0]) % $w;
        $r += $slope-&amp;gt;[1];
    }
    $prod*=$trees;
}
say $prod;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The basic logic stays the same, which would probably look nicer if I would have moved it into a function.&lt;/p&gt;

&lt;p&gt;I wasted a few minuts on the second part because I was running the file &lt;code&gt;03_2.pl&lt;/code&gt; but put my changes into an old, buggy version of &lt;code&gt;03_1.pl&lt;/code&gt; - and I was very annoyed why the loop did no stop...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 14:13 / 06:23&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11319 / 11060&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/3"&gt;https://adventofcode.com/2020/day/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Advent of Code Day 2 - counting regex</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_02.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_02.html</id>
    <updated>2020-12-03T23:36:50+00:00</updated>
    <category term="perl"/>
    <summary type="html">Part 1

Again rather simple task, simple solution. I've seen the regex to parse the input in a lot of solutions in various languages - it's nice that even though the languages look rather different, ...</summary>
    <content type="html">&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;Again rather simple task, simple solution. I've seen the regex to parse the input in a lot of solutions in various languages - it's nice that even though the languages look rather different, regex unites them all (in a very weird way :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $valid;
while ( my $line = &amp;lt;STDIN&amp;gt; ) {
    chomp($line);
    my ( $min, $max, $letter, $pwd ) = $line =~ /^(\d+)-(\d+) (\w): (\w+)$/;
    my $cnt =()= $pwd =~ /$letter/g;

    $valid++ if ( $min &amp;lt;= $cnt &amp;amp;&amp;amp; $cnt &amp;lt;= $max );
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing of interest is the "Saturn" operator &lt;code&gt;=()=&lt;/code&gt;, which (using some fancy list/scalar contexts) gets the number of times the regex matches (and thus counts how often the letter occurs in the password)&lt;/p&gt;

&lt;p&gt;Oh, and wait a minute: Since Perl 5.32 (released a few months ago) we can finally say (via &lt;a href="https://metacpan.org/pod/distribution/perl/pod/perldelta.pod#Chained-comparisons-capability"&gt;chained comparisons capability&lt;/a&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $valid++ if ( $min &amp;lt;= $cnt &amp;lt;= $max );&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Also not hard, but I tripped over my variable names: I copied the Part-1 solution to a new file, and kept the &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt; names. And because I wasn't reading the spec properly, I thought we have to count how often the letter occurs in the range defined by min and max. So I got a wrong result and lost a few minutes...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $valid;
while ( my $line = &amp;lt;STDIN&amp;gt; ) {
    chomp($line);
    my ( $p1, $p2, $letter, $pwd ) = $line =~ /^(\d+)-(\d+) (\w): (\w+)$/;
    my @pwd = ( 'X', split( //, $pwd ) );

    my $hit = 0;
    for my $i ( $p1, $p2 ) {
        $hit++ if $pwd[$i] eq $letter;
    }
    $valid++ if $hit == 1;
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of fiddling with the array index &lt;code&gt;$i&lt;/code&gt; I just padded the array with an extra value, so I could use the provided values as-is.&lt;/p&gt;

&lt;p&gt;Oh, and here's my bug:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   for my $i ( $min .. $max ) {
        $hit++ if $pwd[$i] eq $letter;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;strong&gt;..&lt;/strong&gt; between &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt;. That's why I renamed the vars to &lt;code&gt;$p1&lt;/code&gt; and &lt;code&gt;$p2&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 07:54 / 07:18&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11514 / 10843&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/2"&gt;https://adventofcode.com/2020/day/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
</feed>
