<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-06T16:40:32Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75950998</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Matching a number after a tab as one single line</title>
            <category scheme="https://stackoverflow.com/tags" term="regex"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Angelo Damian Armijos Carrión</name>
            <uri>https://stackoverflow.com/users/21581775</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75950998/matching-a-number-after-a-tab-as-one-single-line"/>
        <published>2023-04-06T15:01:42Z</published>
        <updated>2023-04-06T16:39:43Z</updated>
        <summary type="html">
            &lt;p&gt;I would like to know how to extract all the numbers after the ID (KC000001-3), including the number set after a tap using Perl regex.&lt;/p&gt;
&lt;p&gt;The additional number (0.50) for the first ID, (0.60) second ID, and (0.70 0.80) third ID is always starting with a space as a new line and ending up with another tap.&lt;/p&gt;
&lt;p&gt;Input file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KC000001    0.30 0.40 0.50
KC000002    0.30 0.40 0.50 0.60
KC152363    0.30 0.40 0.50 0.60 0.70 0.80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would like to get this output file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.30 0.40 0.50
0.30 0.40 0.50 0.60
0.30 0.40 0.50 0.60 0.70 0.80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have prepared this regex.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($linea =~ /^(.[a-z0-9]\d+.\d)\s(.?)$/){
    print $line 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it is giving me the following error (it is not printing the number after the tab (0.50 for the first), (0.60 for the second), and (0.70 0.80 for the third))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.30 0.40
0.30 0.40 0.50
0.30 0.40 0.50 0.60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would like to know what is wrong with this regex. Is it possible to make it with a regex only?&lt;/p&gt;
&lt;p&gt;Input file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KC000001 0.30 0.40 0.50
KC000002 0.30 0.40 0.50 0.60
KC152363 0.30 0.40 0.50 0.60 0.70 0.80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.30 0.40
0.30 0.40 0.50
0.30 0.40 0.50 0.60
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75950313</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">How to convert hash to array without the use of intermediate variable?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Talespin_Kit</name>
            <uri>https://stackoverflow.com/users/579689</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75950313/how-to-convert-hash-to-array-without-the-use-of-intermediate-variable"/>
        <published>2023-04-06T13:51:22Z</published>
        <updated>2023-04-06T16:22:47Z</updated>
        <summary type="html">
            &lt;p&gt;How to convert hash to to array temporarily without using intermediate variable&lt;/p&gt;
&lt;p&gt;For example in the following code &amp;quot;@arr&amp;quot; variable is an array storing the converted hash.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my %scientists = (
    &amp;quot;Newton&amp;quot;   =&amp;gt; &amp;quot;Isaac&amp;quot;,
    &amp;quot;Einstein&amp;quot; =&amp;gt; &amp;quot;Albert&amp;quot;,
    &amp;quot;Darwin&amp;quot;   =&amp;gt; &amp;quot;Charles&amp;quot;,
);

my @arr = %scientists;
print $_ . &amp;quot; &amp;quot; foreach @arr; # &amp;quot;Newton Isaac Darwin Charles Einstein Albert&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I am not trying to accomplish anything specific here. Just want to know if its possible to convert hash to an array wihtout intermediate variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print ref(\@arr); # print array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;similarly is there a something that can replace &amp;quot;&amp;quot; so that the following is possible&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print ref(&amp;lt;syntax&amp;gt;%scientists%&amp;lt;sytax&amp;gt;) # should print array.
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75947343</id>
        <re:rank scheme="https://stackoverflow.com">-1</re:rank>
        <title type="text">Decoding a file that is either Windows-1252 or UTF-8</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="encoding"/>
        <author>
            <name>ssr1012</name>
            <uri>https://stackoverflow.com/users/4251338</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75947343/decoding-a-file-that-is-either-windows-1252-or-utf-8"/>
        <published>2023-04-06T08:25:39Z</published>
        <updated>2023-04-06T15:03:50Z</updated>
        <summary type="html">
            &lt;p&gt;I need to open and read a file that might be encoded using Windows-1252 or UTF-8 without knowing which encoding was used.&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[F]ß[F][R]{\ss}[R]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[F]å[F][R]{\aa}[R]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when I have open and read the file its automatically converts like this:&lt;/p&gt;
&lt;p&gt;Current Output:&lt;br /&gt;
&lt;code&gt;[F]\xDF[F][R]{\ss}[R]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[F]\xE5[F][R]{\aa}[R]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Expected Output:&lt;br /&gt;
&lt;code&gt;[F]ß[F][R]{\ss}[R]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;[F]å[F][R]{\aa}[R]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;How I need to prevent this conversion.&lt;/p&gt;
&lt;p&gt;I used the list of each and every encodings and packages also:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; use Encode;
 use HTML::Entities;
 #use utf8;
 #use encoding 'utf8';
 binmode STDIN, ':utf8';
 use open ':encoding(utf)';
 use open ':encoding(utf8)';
 binmode STDOUT, ':utf8';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't know where I am doing mistake. Could someone help me on this one.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75948134</id>
        <re:rank scheme="https://stackoverflow.com">-3</re:rank>
        <title type="text">Perl Scripting - /^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\(\s*\S+\s*\))/; [duplicate]</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="scripting"/>
        <author>
            <name>Aakriti Goel</name>
            <uri>https://stackoverflow.com/users/21580097</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75948134/perl-scripting-s-s-s-s-s-s-s-s-s-s-s-s-s-s"/>
        <published>2023-04-06T09:51:27Z</published>
        <updated>2023-04-06T09:52:32Z</updated>
        <summary type="html">
            &lt;p&gt;/^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+((\s*\S+\s*))/;&lt;/p&gt;
&lt;p&gt;can anyone help me in understanding what the above line will do in a perl script?&lt;/p&gt;
&lt;p&gt;I am not getting any output with the above code and wish to modify it. That's why want to understand it's function.&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>PWC211 - Toepliz Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/06/toepliz-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/">#211</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a matrix <code class="language-plaintext highlighter-rouge">m x n</code>.</p>

  <p>Write a script to find out if the given matrix is `Toeplitz Matrix~.</p>

  <blockquote>
    <p>A matrix is Toeplitz if every diagonal from top-left to bottom-right has
the same elements.</p>
  </blockquote>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @matrix = [ [4, 3, 2, 1],
                   [5, 4, 3, 2],
                   [6, 5, 4, 3],
                 ]
Output: true
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @matrix = [ [1, 2, 3],
                   [3, 2, 1],
                 ]
Output: false
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>I was a bit dubious after reading the text part alone, and not looking at
the examples, because I thought that the diagonals had to be the same, only
shifted. Now, an <code class="language-plaintext highlighter-rouge">m x n</code> matrix can only have <em>some</em> full diagonals, and I
was already thinking whether I would have to wrap or not.</p>

<p>Well, nothing like this it seems. So here are my assumptions, with a big
final question <em>is this right?</em> at the end:</p>

<ul>
  <li>every diagonal is any subset of the matrix starting from the top or the
left edge and going on diagonally down-right, one step at a time in each
direction</li>
  <li>each diagonal is only composed of one single integer, repeated as many
times as necessary.</li>
</ul>

<p>There is still space to be more <em>precise</em>, but let’s not overdo.</p>

<h1 id="the-solution">The solution</h1>

<p>My take on this challenge is to forget about matrixes and focus on comparing
adjacent rows only. It might work with columns, too, but it’s easier to take
slices of a matrix when it’s stored by rows.</p>

<p>Considering two adjacent rows, in a Toepliz matrix the one below must be
almost the same as the one above; in particular, we have to make sure that
the first <code class="language-plaintext highlighter-rouge">n - 1</code> elements of the upper row are the same as the <em>last</em> <code class="language-plaintext highlighter-rouge">n -
1</code> elements of the lower one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(i - 1)-th:    A B C ... X *
                \ \ \     \
      i-th:    * A B C ... X
</code></pre></div></div>

<p>Check this for all pairs of adjacent rows and we’re done.</p>

<p><a href="https://raku.org/">Raku</a>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN {
   my $m1 = [ [4, 3, 2, 1],
              [5, 4, 3, 2],
              [6, 5, 4, 3],
            ];
   put 'm1: ', is-toepliz-matrix($m1);

   my $m2 = [ [1, 2, 3],
              [3, 2, 1],
            ];
   put 'm2: ', is-toepliz-matrix($m2);
}

sub is-toepliz-matrix ($m) {
   for 1 .. $m.end -&gt; $i {
      my ($r0, $r1) = $m[$i - 1, $i];
      return False unless all($r0[0 .. *-2] «==» $r1[1 .. *-1]);
   }
   return True;
}
</code></pre>

<p>The two parts are taken as slices; they are compared by applying the
comparison operator to each pair of corresponding items with the <code class="language-plaintext highlighter-rouge">«==»</code>
hyperoperator, then making sure that <code class="language-plaintext highlighter-rouge">all</code> comparisons are true.</p>

<p>The <a href="https://www.perl.org/">Perl</a> alternative is a bit <em>lower level</em>, with an explicit loop to
compare individual items. It’s less compact, but arguably more efficient as
it allows bailing out as soon as a difference is spotted (in the <a href="https://raku.org/">Raku</a>
alternative above all comparisons are done in a pair or rows):</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">$m1</span> <span class="o">=</span> <span class="p">[</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">];</span>
<span class="nv">say</span> <span class="p">'</span><span class="s1">m1: </span><span class="p">',</span> <span class="nv">is_toepliz_matrix</span><span class="p">(</span><span class="nv">$m1</span><span class="p">)</span> <span class="p">?</span> <span class="p">'</span><span class="s1">true</span><span class="p">'</span> <span class="p">:</span> <span class="p">'</span><span class="s1">false</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">$m2</span> <span class="o">=</span> <span class="p">[</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
         <span class="p">];</span>
<span class="nv">say</span> <span class="p">'</span><span class="s1">m2: </span><span class="p">',</span> <span class="nv">is_toepliz_matrix</span><span class="p">(</span><span class="nv">$m2</span><span class="p">)</span> <span class="p">?</span> <span class="p">'</span><span class="s1">true</span><span class="p">'</span> <span class="p">:</span> <span class="p">'</span><span class="s1">false</span><span class="p">';</span>


<span class="k">sub </span><span class="nf">is_toepliz_matrix</span> <span class="p">($m) {</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
      <span class="k">my</span> <span class="p">(</span><span class="nv">$r0</span><span class="p">,</span> <span class="nv">$r1</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="nv">@</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$i</span><span class="p">];</span>
      <span class="k">my</span> <span class="nv">$end</span> <span class="o">=</span> <span class="nv">$r1</span><span class="o">-&gt;</span><span class="nv">$#*</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$end</span> <span class="o">!=</span> <span class="nv">$r0</span><span class="o">-&gt;</span><span class="nv">$#*</span><span class="p">;</span>
      <span class="k">for</span> <span class="k">my</span> <span class="nv">$j</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$end</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$r0</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$r1</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span><span class="p">];</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/06/toepliz-matrix/</id>
    <published>2023-04-06T06:00:00+02:00</published>
    <updated>2023-04-06T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Increasing Perl’s Visibility, Redux</title>
    <link rel="alternate" href="https://blogs.perl.org/users/toby_inkster/2023/04/increasing-perls-visibility-redux.html"/>
    <id>tag:blogs.perl.org,2023:/users/toby_inkster//1019.11066</id>
    <published>2023-04-05T20:19:28Z</published>
    <updated>2023-04-05T20:29:03Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>https://toby.ink/</uri>
    </author>
    <category term="HTML" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="HTTP" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="pod" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<div>
<p>Quite a while ago, <a href="https://toby.ink/blog/2020/02/07/increasing-perls-visibility/">I blogged about how Perl projects should have websites</a> to increase not only their visibility, but the visibility of Perl as a whole.</p>
<p>Perl has had the CPAN and awesome websites like MetaCPAN and its predecessor search.cpan.org for a long time, so unlike how things happen in other programming language ecosystems, many Perl projects have felt no need to start their own websites for documentation, package downloads, and community — all these things were already provided.</p>
<p>However, I do feel that this centralization keeps Perl content on the Internet very isolated and makes Perl less visible than other programming languages.</p>
</div>
]]>
        <![CDATA[<p>I've recently released <a href="https://metacpan.org/dist/Web-PerlDistSite">Web::PerlDistSite</a> to provide an easy way to generate a modern-looking website for your project based mainly on its existing pod. You can then publish your site on github.io or your own hosting.</p>

<p>I used it to create <a href="https://exportertiny.github.io/">this website for Exporter-Tiny</a> and also to revamp the existing <a href="https://typetiny.toby.ink/">website for Type-Tiny</a>.</p>

<p>If you've got a CPAN distribution and want to create a website for it, Web::PerlDistSite could be a quick way to get started. The documentation is pretty limited right now, but you can <a href="https://github.com/tobyink/p5-web-perldistsite/issues">open an issue</a> if you need help.</p>]]>
    </content>
</entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75934617</id>
        <re:rank scheme="https://stackoverflow.com">2</re:rank>
        <title type="text">Using Perl to send sms via Twilio</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="twilio"/>
        <author>
            <name>Mike Lempriere</name>
            <uri>https://stackoverflow.com/users/7572516</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75934617/using-perl-to-send-sms-via-twilio"/>
        <published>2023-04-04T23:34:31Z</published>
        <updated>2023-04-05T17:26:34Z</updated>
        <summary type="html">
            &lt;p&gt;I have an extensive app in Perl that sends an occasional txt msg to me, and me only.  Definitely not a spammer.  I've had this app running for years on Plivo, but recently they have cut me off via 10DLC campaigns.  I have not been able to convince them that this is extremely low volume and does not go to a wide-spread audience - it's actually sending notices from a weather station of particular events, like temp going below freezing, high wind, etc.&lt;/p&gt;
&lt;p&gt;So I'm trying to change over to Twilio to see if that works out better for me.&lt;/p&gt;
&lt;p&gt;I have tried using their sample windows command-line CURL example, and this does work, I am able to successfully send a msg.&lt;/p&gt;
&lt;p&gt;As my program is in Perl, there's no pre-built API, so I'm having to manually craft the request packet myself.  My old Plivo code forms a tidy json packet, albeit with different names.&lt;/p&gt;
&lt;p&gt;I've changed it to the Twilio appropriate &amp;quot;To&amp;quot;, &amp;quot;From&amp;quot;, and &amp;quot;Body&amp;quot; parts.  I get back a &amp;quot;400 Bad Request&amp;quot;, &amp;quot;code 21604 A 'To' phone number is required&amp;quot;.&lt;/p&gt;
&lt;p&gt;I am providing a &amp;quot;To&amp;quot;, so clearly it's just not understanding my json packet.
Can anyone fill me in on exactly what Twilio request packet should look like?&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Increasing Perl’s Visibility, Redux</title>
    <link rel="alternate" href="https://dev.to/tobyink/increasing-perls-visibility-redux-17g6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Quite a while ago, <a href="https://toby.ink/blog/2020/02/07/increasing-perls-visibility/">I blogged about how Perl projects should have websites</a> to increase not only their visibility, but the visibility of Perl as a whole.</p>

<p>Perl has had the CPAN and awesome websites like MetaCPAN and its predecessor search.cpan.org for a long time, so unlike how things happen in other programming language ecosystems, many Perl projects have felt no need to start their own websites for documentation, package downloads, and community — all these things were already provided.</p>

<p>However, I do feel that this centralization keeps Perl content on the Internet very isolated and makes Perl less visible than other programming languages.</p>

<p>I’ve recently released <a href="https://metacpan.org/dist/Web-PerlDistSite">Web::PerlDistSite</a> to provide an easy way to generate a modern-looking website for your project based mainly on its existing pod. You can then publish your site on github.io or your own hosting.</p>

<p>I used it to create <a href="https://exportertiny.github.io/">this website for Exporter-Tiny</a> and also to revamp the existing <a href="https://typetiny.toby.ink/">website for Type-Tiny</a>.</p>

<p>If you’ve got a CPAN distribution and want to create a website for it, Web::PerlDistSite could be a quick way to get started. The documentation is pretty limited right now, but you can <a href="https://github.com/tobyink/p5-web-perldistsite/issues">open an issue</a> if you need help.</p>

</div>
    </content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/increasing-perls-visibility-redux-17g6</id>
    <published>2023-04-05T15:19:28Z</published>
    <updated>2023-04-05T15:19:28Z</updated>
    <category term="perl"/>
    <category term="html"/>
    <category term="http"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/67d37c55ddffebbcbf4847408106334b9ad9a6bc</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/67d37c55ddffebbcbf4847408106334b9ad9a6bc"/>
    <title>
        regen/HeaderParser.pm - improved expression formatting and wrapping
    </title>
    <updated>2023-04-05T07:22:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;regen/HeaderParser.pm - improved expression formatting and wrapping

Karl complained about some of the wrapping logic we use for expressions.
This tweaks the rules in a number of different ways in an attempt to
produce more legible expressions. For instance if we have a complex
expression with different parenthesized sub expressions, then try to put
each sub expression on its own line. A previous patch ensures that we
put shorter sub expressions first, and this patch builds on that to put
each sub expression on its own line.

We also use different logic to wrap the expressions, with the end result
that each line should have the same number of defined() operations on it
(with the exception of the last). We also try harder to line up
logical operators and defined() functions.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/0398b69bfddc8738a4788f056a79ba9e4d44fcfb</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/0398b69bfddc8738a4788f056a79ba9e4d44fcfb"/>
    <title>
        regen/HeaderParser.pm - remove comments from elif/else/endif when the…
    </title>
    <updated>2023-04-05T07:22:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;regen/HeaderParser.pm - remove comments from elif/else/endif when the contents is short

it is a bit &amp;quot;noisy&amp;quot; to have comments that duplication the conditions
when the original line with the condition is visible on the screen at
the same time. this patch changes the rules so we only add these comments
when the clause is 10 lines or more from its prior&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/9d18cc1309653402735f34cc33436853730b54fa</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/9d18cc1309653402735f34cc33436853730b54fa"/>
    <title>
        embed.fnc - remove incorrect comment
    </title>
    <updated>2023-04-05T07:22:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;embed.fnc - remove incorrect comment

which in turn allows the nested if clauses to be merged&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/564b0c90d4a5f7c04ed173bd9bac8d4241a9acb3</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/564b0c90d4a5f7c04ed173bd9bac8d4241a9acb3"/>
    <title>
        regen/HeaderParser.pm - with multi-term expressions put least first
    </title>
    <updated>2023-04-05T07:22:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;regen/HeaderParser.pm - with multi-term expressions put least first

if we have defined(X) &amp;amp;&amp;amp; (defined(Y) || defined(Z)) put the defined(X)
first because it has less operations in it.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Italian Audiobooks</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/05/italian-audiobooks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://www.raiplaysound.it/">RaiPlaySound</a> has an interesting selection of <a href="https://www.raiplaysound.it/programmi/adaltavoce/audiolibri">audiobooks</a> (in
Italian), and <a href="https://www.liberliber.it/">LiberLiber</a> has <a href="https://www.liberliber.it/online/opere/audiolibri/">audiobooks</a> too!</p>
</blockquote>

<p>If you’re interested into listening to audiobooks in Italian <em>for free</em>,
you’re <em>kinda</em> out of luck. I mean, there’s definitely a selection, but not
even comparable to what’s available in English (or many other languages).</p>

<p>Most of what I found online is from <a href="https://www.liberliber.it/">LiberLiber</a> (<a href="https://www.liberliber.it/online/opere/audiolibri/">here</a>), which is
interesting but a bit <em>limited</em>, being restricted to public domain material
only. It’s great and it’s very easy to download audiobooks for offline
listening.</p>

<p>More recently I found that <a href="https://www.raiplaysound.it/">RaiPlaySound</a> has a section about
<a href="https://www.raiplaysound.it/programmi/adaltavoce/audiolibri">audiobooks</a> too. Alas, it <em>seems</em> that we are able to get
audiobooks for offline listening only accessing the service through the App
for mobile or tablet devices, while the web access is only restricted to
streaming.</p>

<p>This is both unfortunate and <em>irritating</em>, considering that <a href="https://www.raiplaysound.it/">RaiPlaySound</a>
is a service by <a href="https://www.rai.it/">Rai</a>, which in turn is the national television which gets
public money, mine included.</p>

<p>Anyway, they decided that they should have a walled garden and strict
control over what and when and where we citizens can listen to stuff that
they’re paying… but they know better, right? <strong>Right?!?</strong></p>

<p>For this reason, I will not reiterate my enthusiasm for <a href="/ETOOBUSY/2023/04/04/cosmic-mitmproxy/">Cosmic
mitmproxy</a>, possibly dumping traffic in a file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mitmdump --flow-detail=2 --showhost | tee session.txt
</code></pre></div></div>

<p>I wonder if it would be able to capture anything if we then set the browser
to use it as a proxy and then click around in an audiobook’s page, possibly
for later extraction with a couple of regular expressions…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ grep -Po '\A\S+\s+(?mxs:GET|HEAD)\s+\K\S+' session.txt &gt; urls.txt
$ grep -Po '\Ahttps://creative.*?\.mp3' urls.txt | sort -u &gt; urls-mp3.txt
</code></pre></div></div>

<p>Does the second regular expression work? Will it tomorrow? Who knows?</p>

<p>Finally, who knows whether <code class="language-plaintext highlighter-rouge">curl</code> will be available to download those URLs
with just the default settings, or fail miserably? I discovered that there’s
no way to give it a file with a list of urls, so will <code class="language-plaintext highlighter-rouge">xargs</code> do the trick?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ xargs -n 1 curl -LO &lt;urls-mp3.txt
</code></pre></div></div>

<p>Well, I guess that I will never know…</p>

<p>Moving on to a totally different topic, I figured that the <a href="/ETOOBUSY/2023/04/03/awesome-exiftool/">Awesome
exiftool</a>, together with <a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Romeo</a>, can do wonders to organize a few MP3
files you might have around:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat m3u-template.tp2
#EXTM3U
#EXTALB: [% 0.Album %]
#EXTART: [% 0.Artist %]
#EXTGENRE: [% 0.Genre %]
[%
   for my $item (A) {
      my ($h, $m, $s) = $item-&gt;{Duration} =~ m{(\d+)}gmxs;
      $s += 60 * ($m + 60 * $h);
%]
#EXTINF:[%= $s %],[%= $item-&gt;{Title} %]
[%= $item-&gt;{SourceFile} %]
[% } %]

$ exiftool -j -q -Artist -Year -Genre -Album -Title -Duration *.mp3 \
  | romeo tp -t m3u-template.tp2 &gt; playlist.m3u
</code></pre></div></div>

<p>OK, not too much for today, but some days can be a bit weaker, can’t they?</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/05/italian-audiobooks/</id>
    <published>2023-04-05T06:00:00+02:00</published>
    <updated>2023-04-05T06:00:00+02:00</updated>
    <category term="audiobook"/>
    <category term="web"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/113cefaa4a736b299757774019cd1ee97b7e2db9</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/113cefaa4a736b299757774019cd1ee97b7e2db9"/>
    <title>
        threads.xs: Set non thread context in ithread_set()
    </title>
    <updated>2023-04-04T18:53:22Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106911?s=30&amp;v=4"/>
    <author>
      <name>khwilliamson</name>
      <uri>https://github.com/khwilliamson</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;threads.xs: Set non thread context in ithread_set()

This generally was getting set anyway, but a test yet to be committed
found a case where it wasn&amp;#39;t.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Cosmic mitmproxy</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/04/cosmic-mitmproxy/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://mitmproxy.org/">mitmproxy</a> is really useful.</p>
</blockquote>

<p>It was a busy, dark night and I needed to closely monitor <em>all</em> outcoming
requests from the browser, for later inspection. Nothing really fancy, just
get a list of all URLs at the end of the observation period, to skim through
with <code class="language-plaintext highlighter-rouge">grep</code> and the like.</p>

<p>My first thought was: <em>Surely Firefox’s developer tools will help me with
this!</em>. Well… sort of:</p>

<ul>
  <li>tracking all requests: <em>check</em></li>
  <li>saving to file: <em>check</em></li>
  <li>saving just a list of URLs: <strong>nope</strong></li>
</ul>

<p>The interface supports some slicing and dicing, but when it comes to
selecting the multiple interactions that I’m interested into… it’s not
possible. I can only select one at a time.</p>

<p>Moreover, I really don’t need to get the whole of the traffic. At this
initial stage, I’m just interested into the <em>URLs</em>.</p>

<p>OK, next I thought: <em>Surely Firefox has an extension for this!</em>. Well…
sort of. It seems that someone needed to do something similar to the
tracking I’m after, produced some code and made it work. They didn’t want to
do a complete and slick release, though, so we’re left with a dubious
extension that I don’t even know if it’s really related to the initial hack.</p>

<p>Now this started to get interesting, so I looked around and the internet
reminded be about <a href="https://mitmproxy.org/">mitmproxy</a>. Sure, it’s a bit <em>invasive</em> (one might even
say <em>overkill</em>), but it’s a fantastic tool and it’s perfect for hitting
nails like these.</p>

<p>As I have full control over the browser, I managed to use it in its basic
mode of operation. This meant:</p>

<ul>
  <li>Run <code class="language-plaintext highlighter-rouge">mitmdump</code> with the right level of verbosity to extract the full URLs:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mitmdump --flow-detail=2 --showhost
</code></pre></div></div>

<ul>
  <li>
    <p>Set Firefox to use it as a proxy, pointing to <code class="language-plaintext highlighter-rouge">localhost:8080</code>. Firefox
keeps proxy configurations by itself, so it’s a single-application
modification.</p>
  </li>
  <li>
    <p>Install the certificate in Firefox. In my system, it uses its own set of
trusted Certification Authorities, so there was no need to install it on
the whole system.</p>
  </li>
</ul>

<p>The last step <strong>MUST NOT</strong> be taken lightly. Always doubt about trusting
those little certificates, right? It helps to use a browser that you can
dedicate to the experiment, so that you can later throw it away and keep
your configuration modifications to a minimum, just to keep the right level
of paranoia.</p>

<p>The tool is really slick. One single nitpick I have is that the verbosity
level 1 (that is <code class="language-plaintext highlighter-rouge">--flow-detail=1</code>) would be perfect if URLs were complete
and not truncated. So I had to go to the next level and get <em>much more</em> than
I really needed.</p>

<p><em>Why truncate the URLs in a tool like this… <strong>why?!?</strong></em></p>

<p>Well, I guess there’s a good reason and I’m just not getting it without
reading around.</p>

<p>In the meantime, stay safe and keep an eye on the <em>man in the middle!</em></p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/04/cosmic-mitmproxy/</id>
    <published>2023-04-04T06:00:00+02:00</published>
    <updated>2023-04-04T06:00:00+02:00</updated>
    <category term="mitm"/>
    <category term="security"/>
    <category term="mitmproxy"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 210: Kill and Win and Number Collision</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-210-kill-and-win-and-number-collision.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11065</id>
    <published>2023-04-04T00:10:18Z</published>
    <updated>2023-04-04T00:12:45Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 210 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-210/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Kill and Win</h2>

<p><em>You are given a list of integers.</em></p>

<p><em>Write a script to get the maximum points. You are allowed to take out (kill) any integer and remove from the list. However if you do that then all integers exactly one-less or one-more would also be removed. Find out the total of integers removed.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @int = (2, 3, 1)
Output: 6

First we delete 2 and that would also delete 1 and 3. So the maximum points we get is 6.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @int = (1, 1, 2, 2, 2, 3)
Output: 11

First we delete 2 and that would also delete both the 1's and the 3. Now we have (2, 2).
Then we delete another 2 and followed by the third deletion of 2. So the maximum points we get is 11.
</code></pre>

<p>In my understanding of the process, we will always be able to pick a few integers and thereby remove all integers from the list. So, the sum of removed integers is the sum of the input integer.</p>

<h3>Kill and Win in Raku</h3>

<pre><code>sub sum-deleted-digits (@in) {
    # we can always delete all digits
    return [+] @in;
}

for &lt;2 3 1&gt;, &lt;1 1 2 2 2 3&gt; -&gt; @test {
    say "@test[]".fmt("%-15s =&gt; "), sum-deleted-digits @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./kill-and-win.raku
2 3 1           =&gt; 6
1 1 2 2 2 3     =&gt; 11
</code></pre>

<h3>Kill and Win in Perl</h3>

<pre><code>sub sum_deleted_digits {
    # we can always delete all digits
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;                        
}

for my $test ([&lt;2 3 1&gt;], [&lt;1 1 2 2 2 3&gt;])  {
    printf "%-15s =&gt; %d \n", "@$test", sum_deleted_digits @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./kill-and-win.pl
2 3 1           =&gt; 6
1 1 2 2 2 3     =&gt; 11
</code></pre>

<h2>Task 2: Number Collision</h2>

<p><em>You are given an array of integers which can move in right direction if it is positive and left direction when negative. If two numbers collide then the smaller one will explode. And if both are same then they both explode. We take the absolute value in consideration when comparing.</em></p>

<p><em>All numbers move at the same speed, therefore any 2 numbers moving in the same direction will never collide.</em></p>

<p><em>Write a script to find out who survives the collision.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (2, 3, -1)
Output: (2, 3)

The numbers 3 and -1 collide and -1 explodes in the end. So we are left with (2, 3).
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (3, 2, -4)
Output: (-4)

The numbers 2 and -4 collide and 2 explodes in the end. That gives us (3, -4).
Now the numbers 3 and -4 collide and 3 explodes. Finally we are left with -4.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1, -1)
Output: ()

The numbers 1 and -1 both collide and explode. Nothing left in the end.
</code></pre>

<h3>Number Collision in Raku</h3>

<pre><code>sub number-collision (@in-array) {
    my @in = @in-array;
    loop {
        return () if @in.elems == 0;
        my @temp;
        for 0..^@in.end -&gt; $i {
            if @in[$i] &gt; 0 {
                if @in[$i+1] &gt; 0 {
                    push @temp, @in[$i];
                } else {
                    next if abs(@in[$i]) == abs(@in[$i+1]);
                    push @temp, 
                        abs(@in[$i]) &gt; abs(@in[$i+1]) ??  
                        @in[$i] !! @in[$i+1];
                }
            } elsif @in[$i] &lt; 0 {
                push @temp, @in[$i] and next 
                    unless @in[$i-1]:exists;
                if @in[$i-1] &lt; 0 {
                    push @temp, @in[$i];
                } else {
                    shift @temp and next 
                        if abs(@in[$i]) == abs(@in[$i+1]);
                    @temp[*-1] = 
                        abs(@in[$i]) &gt; abs(@in[$i-1]) ?? 
                        @in[$i] !! @in[$i-1];
                }
            } else {     # @in[$i] == 0
                push @temp, @in[$i];
            }
        }
        return @temp if @temp.all &gt; 0 or @temp.all &lt; 0;
        @in = @temp;
    }
}

for &lt;2 3 -1&gt;, &lt;3 2 -4&gt;, &lt;1 -1&gt; -&gt; @test {
    say "@test[]".fmt("%-10s =&gt; "), number-collision @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./number-collision.raku
2 3 -1     =&gt; [2 3]
3 2 -4     =&gt; [-4]
1 -1       =&gt; []
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 9, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weather::WeatherKit and Weather::Astro7Timer</title>
    <link rel="alternate" href="https://blogs.perl.org/users/dimitrios_kechagias/2023/03/weatherweatherkit-and-weatherastro7timer.html"/>
    <id>tag:blogs.perl.org,2023:/users/dimitrios_kechagias//3414.11062</id>
    <published>2023-04-01T02:14:11Z</published>
    <updated>2023-04-03T15:05:01Z</updated>
    <author>
        <name>Dimitrios Kechagias</name>
        <uri>http://astro.ecuadors.net</uri>
    </author>
    <category term="weatherkitweatherapi" label="weatherkit weather api" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/dimitrios_kechagias/">
        <![CDATA[<p>Today, the popular <a href="https://darksky.net/dev">Dark Sky weather API</a> is shutting down. I did a little write-up for non-Perl devs on <a href="https://dev.to/dkechag/replacing-the-dark-sky-weather-api-weatherkit-7timer-and-more-3o">DEV.to</a>, but I thought I'd post here a couple of potentially useful modules I released to CPAN recently.&nbsp;<br /></p><div><a href="https://metacpan.org/pod/Weather::WeatherKit">Weather::WeatherKit</a> accesses the <a href="https://developer.apple.com/documentation/weatherkitrestapi">WeatherKit REST API</a>, which is Apple's official Dark Sky replacement. The module uses <a href="https://metacpan.org/pod/Crypt::JWT">Crypt::JWT</a> to create tokens, so accessing WeatherKit then is as simple as:</div><div>
<pre><code>
use Weather::WeatherKit;

my $wk = Weather::WeatherKit-&gt;new(
    team_id    =&gt; $apple_team_id,
    service_id =&gt; $weatherkit_service_id,
    key_id     =&gt; $key_id,
    key        =&gt; $private_key
);

my %report = $wk-&gt;get(
    lat      =&gt; 51.2,
    lon      =&gt; -1.8,
    dataSets =&gt; 'currentWeather'
);
</code></pre></div><div><br /></div><p>Of course, this API is sort of free, as it requires an Apple developer account. If you don't have one and don't want to get one, there are some alternative APIs, but for the purposes of this post I'll stick to <a href="https://7timer.info/">7Timer</a>, via <a href="https://metacpan.org/pod/Weather::Astro7Timer">Weather::Astro7Timer</a>. Even simpler, as it does not need authentication:</p><pre><code>
use Weather::Astro7Timer;

my $w7t = Weather::Astro7Timer-&gt;new();

my %report = $w7t-&gt;get(
    product =&gt; 'astro',
    lat     =&gt; 51.2,
    lon     =&gt; -1.8,
);
</code></pre>
<p><span style="font-size: 1em;">7Timer is well known in the amateur astronomy community because it offers the "ASTRO" forecast, which includes astronomical seeing and atmospheric transparency, important aspects of a stargazing forecast. I am actually donating the servers the service runs on, and I develop a free iOS client (<a href="https://apps.apple.com/us/app/xasteria-astronomy-weather/id985030722">Xasteria</a>) for it. It has some other forecast products, e.g. passing&nbsp;</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; font-family: monospace; white-space: pre-wrap;">product </span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; color: rgb(0, 0, 0); font-family: monospace; white-space: pre-wrap;">=&gt;</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; font-family: monospace; white-space: pre-wrap;"> </span><span class="str" style="margin: 0px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; color: rgb(17, 136, 17); font-family: monospace; white-space: pre-wrap;">'civil'</span><span style="font-size: 1em;">&nbsp;</span><span style="font-size: 1em;">will get you a more traditional type of forecast.</span></p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly #610 - Perl and TPF</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-610-perl-and-tpf-4gd2" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/610.html"&gt;Perl Weekly 610&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Belated &lt;strong&gt;Happy Ramadan&lt;/strong&gt; to those who celebrate the holy month.&lt;/p&gt;

&lt;p&gt;To me and most of us, &lt;strong&gt;TPF&lt;/strong&gt;, is the parent body who supports the language. With the emergence of &lt;strong&gt;Raku&lt;/strong&gt;, it is now referred as &lt;strong&gt;TPRF (The Perl and Raku Foundation)&lt;/strong&gt;. There have been many positive changes brought by the parent body. One of them is the creation of &lt;strong&gt;Perl Steering Council&lt;/strong&gt; and we even get the weekly update too. You can checkout the latest update from &lt;a href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-102.html"&gt;PSC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The change in name reminds me when I had to change the name &lt;strong&gt;Perl Weekly Challenge&lt;/strong&gt; to &lt;strong&gt;The Weekly Challenge&lt;/strong&gt; to accommodate &lt;strong&gt;Raku&lt;/strong&gt; and many other languages. Even today, I use the term &lt;strong&gt;Team PWC&lt;/strong&gt; as I find it hard to move on. The best part is the team shares ideas from other languages. A fellow &lt;strong&gt;Team PWC&lt;/strong&gt; member, &lt;strong&gt;Cheok-Yin Fung&lt;/strong&gt; started series where she talks about popular and usefull &lt;strong&gt;CPAN&lt;/strong&gt; module. Latest in the series is about &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/03/graph---weekly-travelling-in-cpan.html"&gt;Graph&lt;/a&gt;. If you like the idea then do share your comments and encourge her. I am so proud of her. I would also like to mention about the work recently done by &lt;strong&gt;Dave Cross&lt;/strong&gt; i.e. &lt;a href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet"&gt;Improvements to Planet Perl and Perlanet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am looking forward to the next big stable release of &lt;strong&gt;Perl&lt;/strong&gt; which would bring the new shiny OO concept, &lt;strong&gt;Corinna&lt;/strong&gt; among many other features. Ideally I would want to have &lt;strong&gt;v7&lt;/strong&gt; as it was suggested many years ago. I have no clue if anything is happening on that front.&lt;/p&gt;

&lt;p&gt;If you look at the positive noises on so many social platforms, I am confident we are going to bounce back soon. We have best of the best talent, we just need guidance. I am sure, &lt;strong&gt;TPF&lt;/strong&gt; can help us on that front too. So all you &lt;strong&gt;Perl Hackers&lt;/strong&gt;, please don't loose hope. We would bring back the glory we once had. For now enjoy all the &lt;strong&gt;Perl&lt;/strong&gt; goodies in the newsletter.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/toby_inkster/2023/04/experiments-in-overloading.html"&gt;Experiments in Overloading&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A very interesting use of case of overloading "0+" being discussed. You really don't want to skip it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/03/graph---weekly-travelling-in-cpan.html"&gt;Graph - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Continued with the weekly travelling, here we got another brilliant piece of work. Highly recommended.&lt;/p&gt;




&lt;h2&gt;
  
  
  Web
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/27/playing-with-png/"&gt;Playing with PNG files&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is not easy to play with PNG or any other images but here you get insight for fun. Nice work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/28/png-attachments/"&gt;PNG Attachments in Romeo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here we get the how-to do PNG attachements in Romeo. This will keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/29/jq-and-binary-data/"&gt;Binary data in jq&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you ever played with jq then this is for you when dealing with binary data.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/01/encoding-is-hard/"&gt;Encoding is hard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Encoding is not my favourite subject but here it is discussed in simple language that makes it easy to follow.&lt;/p&gt;




&lt;h2&gt;
  
  
  CPAN
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/dimitrios_kechagias/2023/03/weatherweatherkit-and-weatherastro7timer.html"&gt;Weather::WeatherKit and Weather::Astro7Timer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Useful addition to the CPAN, if you want to access WeatherKit.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211"&gt;The Weekly Challenge - 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Toeplitz Matrix" and "Split Same Average". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-210"&gt;RECAP - The Weekly Challenge - 210&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Kill and Win" and "Number Collision" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/killing-numbers.html"&gt;Killing Numbers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The quality blog post with graphical presentation is highly recommended. Go for it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/30/pwc210-kill-and-win/"&gt;PWC210 - Kill and Win&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Too many holes in the task but you still have solution from Flavio. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/31/pwc210-number-collision/"&gt;PWC210 - Number Collision&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To me, the question section of the post is most entertaing. So much to learn from the post every week. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-210/james-smith#readme"&gt;The Weekly Challenge 210&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another extraordinary piece of art by James. These need to be kept in safe.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/03/30/PerlWeeklyChallenge210.html"&gt;I didn't get very well&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lack of clarity in the task created so much confusions. Still we have solution ...&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/03/27/PWC210/"&gt;Perl Weekly Challenge 210&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Master of one-liner is once again up for the game. I really enjoy the creative side of it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/210"&gt;Kill and Collide!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Go and play with the solution online. Interesting discussion too.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/03/robbie-hatleys-perl-solutions-to-weekly_29.html"&gt;The Weekly Challenge #210&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Cool task analysis that makes it fun to read. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/numbers-challenges-32k1"&gt;Number Challenges&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Keeping the Perl flag flying on dev.to for so long. Thank you.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/03/27/2023-13-finitely/"&gt;2023.13 Finitely&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxxxviii-11-great-cpan-modules.html"&gt;Great CPAN modules released last week&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/rtr"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/20l"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game, and they’re looking for Perl folks with passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/6k8"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-610-perl-and-tpf-4gd2</id>
    <published>2023-04-03T09:24:12Z</published>
    <updated>2023-04-03T09:24:12Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Awesome exiftool</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/03/awesome-exiftool/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://exiftool.org/">exiftool</a> works for audio files too.</p>
</blockquote>

<p>I was downloading an audiobook (from <a href="https://www.liberliber.it/online/autori/autori-h/nathaniel-hawthorne/la-lettera-scarlatta-audiolibro/">here</a>) and I wanted to generate an
<a href="https://en.wikipedia.org/wiki/M3U">M3U</a> playlist programmatically.</p>

<p>One interesting line in such file “format” is useful for setting a title,
but it also needs the track duration. I initially thought to use <a href="https://ffmpeg.org/">ffmpeg</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ffmpeg -i hawthorne_lettera_mc_01_coperti.mp3
...
Input #0, mp3, from 'hawthorne_lettera_mc_01_coperti.mp3':
  Metadata:
    artist          : Nathaniel Hawthorne
    comment         : Liber liber, progetto "Libro parlato" &lt;https://www.liberliber.it/progetti/libroparlato/&gt;
    title           : Copertina
    genre           : Speech
    track           : 1
    album           : LA LETTERA SCARLATTA
    date            : 2019
  Duration: 00:00:47.60, start: 0.025056, bitrate: 277 kb/s
    Stream #0:0: Audio: mp3, 44100 Hz, mono, fltp, 102 kb/s
    Metadata:
      encoder         : LAME3.99r
    Stream #0:1: Video: mjpeg (Baseline), yuvj444p(pc, bt470bg/unknown/unknown), 2000x2000, 90k tbr, 90k tbn, 90k tbc (attached pic)
    Metadata:
      title           : Libro parlato
      comment         : Cover (front)
</code></pre></div></div>

<p>Uhm… there’s a lot to parse here. Having already introduced the wonderful
<a href="/ETOOBUSY/2021/10/09/image-exiftool/">Image::ExifTool</a> in the past, <em>I wonder if…</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ exiftool hawthorne_lettera_mc_01_coperti.mp3
ExifTool Version Number         : 12.42
File Name                       : hawthorne_lettera_mc_01_coperti.mp3
...
Artist                          : Nathaniel Hawthorne
Comment                         : Liber liber, progetto "Libro parlato" &lt;https://www.liberliber.it/progetti/libroparlato/&gt;
Year                            : 2019
Genre                           : Speech
Track                           : 1
Album                           : LA LETTERA SCARLATTA
Title                           : Copertina
...
Duration                        : 0:00:48 (approx)
</code></pre></div></div>

<p>Wow, it’s supported! Moreover, it’s definitely easier to get something
trivial to parse, as it’s capable of providing JSON data back and resrict to
only attributes of interest:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ exiftool -j -Artist -Year -Genre -Album -Title -Duration hawthorne_lettera_mc_01_coperti.mp3
[{
  "SourceFile": "hawthorne_lettera_mc_01_coperti.mp3",
  "Artist": "Nathaniel Hawthorne",
  "Year": 2019,
  "Genre": "Speech",
  "Album": "LA LETTERA SCARLATTA",
  "Title": "Copertina",
  "Duration": "0:00:48 (approx)"
}]
</code></pre></div></div>

<p>At this point, it’s easy to feed this into <a href="/ETOOBUSY/2021/03/16/teepee/">teepee</a> (or <a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Romeo</a>) with
the following template:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#EXTM3U
#EXTALB: [% 0.Album %]
#EXTART: [% 0.Artist %]
#EXTGENRE: [% 0.Genre %]
[%
   for my $item (A) {
      my ($h, $m, $s) = $item-&gt;{Duration} =~ m{(\d+)}gmxs;
      $s += 60 * ($m + 60 * $h);
%]
#EXTINF:[%= $s %],[%= $item-&gt;{Title} %]
[%= $item-&gt;{SourceFile} %]
[% } %]
</code></pre></div></div>

<p>to generate the playlist file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ exiftool -j -q -Artist -Year -Genre -Album -Title -Duration *.mp3 \
    | romeo tp -t m3u8.tp2

#EXTM3U
#EXTALB: LA LETTERA SCARLATTA
#EXTART: Nathaniel Hawthorne
#EXTGENRE: Speech

#EXTINF:48,Copertina
hawthorne_lettera_mc_01_coperti.mp3

#EXTINF:137,Preambolo alla seconda edizione
hawthorne_lettera_mc_02_preambo.mp3

#EXTINF:6651,La Dogana. Introduzione a "La lettera scarlatta"
hawthorne_lettera_mc_03_la_doga.mp3

...
</code></pre></div></div>

<p>Let’s face it: <a href="https://exiftool.org/">exiftool</a> is amazing, and we are should all stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/03/awesome-exiftool/</id>
    <published>2023-04-03T06:00:00+02:00</published>
    <updated>2023-04-03T06:00:00+02:00</updated>
    <category term="perl"/>
    <category term="audio"/>
    <category term="metadata"/>
  </entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>Experiments in Overloading</title>
    <link rel="alternate" href="https://blogs.perl.org/users/toby_inkster/2023/04/experiments-in-overloading.html"/>
    <id>tag:blogs.perl.org,2023:/users/toby_inkster//1019.11064</id>
    <published>2023-04-02T17:03:44Z</published>
    <updated>2023-04-02T17:08:07Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>https://toby.ink/</uri>
    </author>
    <category term="moo" label="Moo" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="overload" label="overload" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="test2suite" label="Test2-Suite" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<div>
		<p>Let's play with overloading a little.</p>
		<p>A simple class:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">package</span> <span class="word">Local::Overloaded</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Moo</span><span class="structure">;</span>
    
    <span class="word">has</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="structure">(</span> <span class="word">is</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'ro'</span> <span class="structure">);</span>
    
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">overload</span> <span class="single" style="color:#909">'0+'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">;</span>
      <span class="keyword" style="color:#009;font-weight:bold">return</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">number</span><span class="structure">;</span>
    <span class="structure">};</span>
  <span class="structure">}</span></pre>
		<p>And let's test it:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Local::Overloaded</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">is</span><span class="structure">(</span> <span class="number" style="color:#39C">0</span><span class="operator" style="color:#000;font-weight:bold">+</span><span class="symbol" style="color:#333;background-color:#fcc">$obj</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>This test fails.</p>
		<p>Why?</p>
</div>
]]>
        <![CDATA[		<p>We tend to think of <code>0+</code> as the way to "cast" a Perl variable to a number, so much so that the <a class="podlinkpod" href="https://metacpan.org/pod/overload">overload</a> pragma even calls the numeric overload "0+". However it is of course actually an addition, and we haven't overloaded the plus operator.</p>
		<p>The simple solution is to just including the <code>fallback =&gt; true</code> option when overloading. This tells Perl to fill in as many missing overloaded operations it can based on the operations you've explicitly provided.</p>
		<p>But I'm not interested in the simple solution. I'm interested in what we can do with the "0+" overload.</p>
		<p>Let's try rephrasing our test case:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Local::Overloaded</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">==</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>This still fails. The equality operator isn't overloaded either.</p>
		<p>However, this one works:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Local::Overloaded</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>So how is Test2 comparing them?</p>
		<p>The answer is that whenever the right hand side of an <code>is</code> comparison is a non-reference, Test2 compares them as strings. Specifically, it does this:</p>
		<pre class="highlighting-perl">  <span class="double" style="color:#909">"$left"</span> <span class="operator" style="color:#000;font-weight:bold">eq</span> <span class="double" style="color:#909">"$right"</span></pre>
		<p>And for whatever reason, even though we didn't set <code>fallback =&gt; true</code>, Perl will happily apply the numeric overload when an object is interpolated into a string and doesn't have a string overload.</p>
		<p>So let's add some stringy overloading to our class:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">package</span> <span class="word">Local::Overloaded</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Moo</span><span class="structure">;</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Lingua::EN::Numbers</span> <span class="words" style="color:#333;background-color:#ffc">qw( num2en )</span><span class="structure">;</span>
    
    <span class="word">has</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="structure">(</span> <span class="word">is</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'ro'</span> <span class="structure">);</span>
    
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">overload</span> <span class="structure">(</span>
      <span class="single" style="color:#909">'0+'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
        <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">;</span>
        <span class="keyword" style="color:#009;font-weight:bold">return</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">number</span><span class="structure">;</span>
      <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="single" style="color:#909">'""'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
        <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">;</span>
        <span class="keyword" style="color:#009;font-weight:bold">return</span> <span class="word">num2en</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">number</span> <span class="structure">);</span>
      <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>Now our previously passing test fails:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Local::Overloaded</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>It is comparing "forty-two" and "42" as strings.</p>
		<p>So this is where we stumble upon the safe way to cast to a number. And it's still not <code>0+</code>.</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Local::Overloaded</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">number</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">is</span><span class="structure">(</span> <span class="word">sprintf</span><span class="structure">(</span> <span class="single" style="color:#909">'%d'</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="structure">)</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">42</span> <span class="structure">);</span>
  <span class="word">is</span><span class="structure">(</span> <span class="word">sprintf</span><span class="structure">(</span> <span class="single" style="color:#909">'%s'</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$obj</span> <span class="structure">)</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'forty-two'</span> <span class="structure">);</span>
  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>Passing the object to <code>sprintf( '%d' )</code> for integers or <code>sprintf( '%f' )</code> will actually use the numeric overload without complaining about <code>==</code> and <code>+</code> not being overloaded. This seems the most reliable way to cast an object to a number if it doesn't have overload fallbacks enabled, or you're not sure if it does.</p>
		<p>The lesson here is that overloading can be weird in Perl, but using <code>fallback =&gt; true</code> makes it a lot less weird.</p>
		<p>The other lesson is to use <code>sprintf( '%d' )</code> or <code>sprintf( '%f' )</code> to cast to a number instead of <code>0+</code>.</p>
]]>
    </content>
</entry>
  <entry>
    <title>How to change charset=ISO-8859-1 to charset=UTF8?   Rocky 9.1 server</title>
    <link rel="alternate" href="https://blogs.perl.org/users/kido_mitsuru/2023/04/how-to-change-charsetiso-8859-1-to-charsetutf8-rocky-91-server.html"/>
    <id>tag:blogs.perl.org,2023:/users/kido_mitsuru//4229.11063</id>
    <published>2023-04-02T13:59:21Z</published>
    <updated>2023-04-02T14:30:16Z</updated>
    <author>
        <name>Kido Mitsuru</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/kido_mitsuru/">
        <![CDATA[<p>Hi !  Everyone,  I am back here to ask environmental issue.    <br />
When I ran the following CGI.pm testing script before placing at /var/www/cgi-bin, but it is still at /home/mkido/bin.    Perl script ran successfully at the Terminal, and replied back the OUTPUT below there.   </p>

<p>Perl Script,     check.pl<br />
#!/usr/bin/env perl<br />
use strict;<br />
use warnings;<br />
use CGI;</p>

<p>my $q = CGI->new;<br />
print $q->header();<br />
print "OK";</p>

<p>===================<br />
OUTPUT <br />
mkido@localhost$check.pl     [Enter to run it.]<br />
Content-Type: text/html; charset=ISO-8859-1</p>

<p>OK<br />
mkido@localhost$</p>

<p><br />
This output result evoked my recognition.   Is this Rocky 9.1 Web Server running to provide charset=ISO-8859-1 ??    I want to set all replies from the Server to charset=UTF-8.    The httpd.conf is already set to charset=UTF-8.      Is there any other setting adjustment somewhere in environmental configuration on my server to change from charset=ISO-8859-1 to charset=UTF-8 ??     Thanks, thanks.    </p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Experiments in Overloading</title>
    <link rel="alternate" href="https://dev.to/tobyink/experiments-in-overloading-kec" type="text/html"/>
    <content type="html">&lt;p&gt;Let’s play with overloading a little.&lt;/p&gt;

&lt;p&gt;A simple class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;overload&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0+&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let’s test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test fails.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;We tend to think of &lt;code&gt;0+&lt;/code&gt; as the way to “cast” a Perl variable to a number, so much so that the &lt;a href="https://metacpan.org/pod/overload"&gt;overload&lt;/a&gt; pragma even calls the numeric overload “0+”. However it is of course actually an addition, and we haven’t overloaded the plus operator.&lt;/p&gt;

&lt;p&gt;The simple solution is to just including the &lt;code&gt;fallback =&amp;gt; true&lt;/code&gt; option when overloading. This tells Perl to fill in as many missing overloaded operations it can based on the operations you’ve explicitly provided.&lt;/p&gt;

&lt;p&gt;But I’m not interested in the simple solution. I’m interested in what we can do with the “0+” overload.&lt;/p&gt;

&lt;p&gt;Let’s try rephrasing our test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This still fails. The equality operator isn’t overloaded either.&lt;/p&gt;

&lt;p&gt;However, this one works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how is Test2 comparing them?&lt;/p&gt;

&lt;p&gt;The answer is that whenever the right hand side of an &lt;code&gt;is&lt;/code&gt; comparison is a non-reference, Test2 compares them as strings. Specifically, it does this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "$left" eq "$right"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for whatever reason, even though we didn’t set &lt;code&gt;fallback =&amp;gt; true&lt;/code&gt;, Perl will happily apply the numeric overload when an object is interpolated into a string and doesn’t have a string overload.&lt;/p&gt;

&lt;p&gt;So let’s add some stringy overloading to our class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Lingua::EN::&lt;/span&gt;&lt;span class="nv"&gt;Numbers&lt;/span&gt; &lt;span class="sx"&gt;qw( num2en )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;overload&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0+&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;num2en&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our previously passing test fails:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is comparing “forty-two” and “42” as strings.&lt;/p&gt;

&lt;p&gt;So this is where we stumble upon the safe way to cast to a number. And it’s still not &lt;code&gt;0+&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Overloaded&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%d&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%s&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forty-two&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Passing the object to &lt;code&gt;sprintf( '%d' )&lt;/code&gt; for integers or &lt;code&gt;sprintf( '%f' )&lt;/code&gt; will actually use the numeric overload without complaining about &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; not being overloaded. This seems the most reliable way to cast an object to a number if it doesn’t have overload fallbacks enabled, or you’re not sure if it does.&lt;/p&gt;

&lt;p&gt;The lesson here is that overloading can be weird in Perl, but using &lt;code&gt;fallback =&amp;gt; true&lt;/code&gt; makes it a lot less weird.&lt;/p&gt;

&lt;p&gt;The other lesson is to use &lt;code&gt;sprintf( '%d' )&lt;/code&gt; or &lt;code&gt;sprintf( '%f' )&lt;/code&gt; to cast to a number instead of &lt;code&gt;0+&lt;/code&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/experiments-in-overloading-kec</id>
    <published>2023-04-02T12:03:44Z</published>
    <updated>2023-04-02T12:03:44Z</updated>
    <category term="perl"/>
    <category term="moo"/>
    <category term="overload"/>
  </entry>
  <entry>
    <title>Romeo is growing</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/02/romeo-growing/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Romeo</a> is growing.</p>
</blockquote>

<p>Well, maybe a bit too organically, but hey! It’s my commemoration of a cat,
and I’m going to put whatever I want inside:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sub-commands for /home/poletti/bin/romeo
         blocky: Turn stuff into Unicode blocky stuff
                 (also as: blk)
             cf: validate Italian "Codice Fiscale"
                 (also as: codicefiscale, codice-fiscale)
          color: Colorize lines according to regular expressions
                 (also as: colorize)
      corkscrew: Corkscrew in Perl (https://github.com/bryanpkc/corkscrew)
       csv2json: Turn a CSV into a JSON file
          frame: Put a frame around the input
          heail: head and tail a file
           hmac: calculate HMAC from several hashing algorithms
       json2csv: Turn a JSON into a CSV file
            pad: Pad input with whitespaces
           pass: generate a random password
                 (also as: password)
            png: Get PNG metadata from files
                 (also as: pngmeta, png-meta)
     same-width: Make all lines the same width (or at least try)
          slice: Slice input data and keep tasty samples
    slice-build: Slice input data and keep definitions for tasty samples
         teepee: Render Template::Perlish templates from JSON data
                 (also as: tp)
           time: Convert times depending on needs
      urldecode: url decode (or encode, depending on the name)
                 (also as: urlencode)
            xxd: hex dumper a-la xxd (shipped with the Vim editor)
</code></pre></div></div>

<p>It’s about 600 kB right now, which is fair. Maybe I could squeeze some
additional docs out.</p>

<p>Lately it underwent a bit of refactoring, so a few features might be
temporarily lost. I expect to be the only user, though, so it should not be
a big deal.</p>

<p>And I truly need to write systematic tests so that I don’t have to write
statements as the previous sentence, which is admittedly embarassing!</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/02/romeo-growing/</id>
    <published>2023-04-02T06:00:00+02:00</published>
    <updated>2023-04-02T06:00:00+02:00</updated>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6858914200457045543</id>
    <published>2023-04-01T17:27:00.000+02:00</published>
    <updated>2023-04-01T17:27:17.901+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxviii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.061000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.061000&lt;/strong&gt; on 2023-03-29, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.060010 was 19 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/OLIVER'&gt;OLIVER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.013&lt;/strong&gt; on 2023-03-29, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.012 was 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.60&lt;/strong&gt; on 2023-03-29, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.59 was 5 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.006002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.006002&lt;/strong&gt; on 2023-03-31, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.006001 was 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002001&lt;/strong&gt; on 2023-04-01, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.001005 was 2 months, 5 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/XAOC/Glib-Object-Introspection-0.050' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Glib::Object::Introspection&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Dynamically create Perl language bindings
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.050&lt;/strong&gt; on 2023-03-27, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.049 was 2 years, 5 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/XAOC'&gt;XAOC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.8' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;4.8&lt;/strong&gt; on 2023-04-01, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 4.79 was 6 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MLEHMANN'&gt;MLEHMANN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PJACKLAM/Math-BigInt-1.999838' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Math::BigInt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pure Perl module to test Math::BigInt with scalars
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.999838&lt;/strong&gt; on 2023-03-31, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.999837 was 8 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PJACKLAM'&gt;PJACKLAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2023-04-01, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.82 was 10 months, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETJ'&gt;ETJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9698' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9698&lt;/strong&gt; on 2023-03-31, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9696 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.70&lt;/strong&gt; on 2023-03-30, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.68 was 1 year, 7 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6858914200457045543/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxviii-11-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6858914200457045543"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6858914200457045543"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxviii-11-great-cpan-modules.html" title="(cdxxxviii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8の文字列を1行ずつ読み取り、各文字をU+(16進数)の形式などに変換して、1行ずつ出力する。</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>コマンドの出力結果を、Gitのレポジトリの中のファイルに保管する。</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を行列状に示す。</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>指定ディレクトリのファイル全て(直下のみでない)に対して、最後に変更された順で網羅的に表示する。</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>– new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for … <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Replacing the Dark Sky weather API: WeatherKit, 7Timer and other free APIs</title>
    <link rel="alternate" href="https://dev.to/dkechag/replacing-the-dark-sky-weather-api-weatherkit-7timer-and-more-3o" type="text/html"/>
    <content type="html">&lt;p&gt;Today, March 31st 2023, the excellent &lt;a href="https://darksky.net/dev"&gt;Dark Sky API&lt;/a&gt;, a quite popular weather forecast service, is going... well... dark. It is now part of &lt;strong&gt;Apple Weather&lt;/strong&gt; and replaced by &lt;a href="https://developer.apple.com/weatherkit/get-started/"&gt;WeatherKit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you used Dark Sky for iOS 16 apps, you will have probably already migrated to WeatherKit. For any other platform, including older iOS versions, you'd need something else, with various possible options starting with Apple's own &lt;a href="https://developer.apple.com/documentation/weatherkitrestapi"&gt;WeatherKit REST API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read on if you are either having issues accessing the WeatherKit REST API, or you want a completely free alternative and I'll share some tips and solutions from my experience porting my own app &lt;a href="https://astro.ecuadors.net/xasteria/"&gt;Xasteria Plus&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  WeatherKit REST API
&lt;/h2&gt;

&lt;p&gt;Apple thankfully provides a REST API that is mostly a complete replacement of Dark Sky - however there are a couple of "gotchas". Firstly, we should note that part of the appeal of Dark Sky was its cost: free for up to 1000 calls/day. The WeatherKit API requires an Apple developer account, which costs $99/year. With that cost though, it allows 500k requests per month, so if you already have a developer account it's a great deal. Secondly, instead of a simple API key you can pass with your request, the service requires passing signed developer tokens (JWT) with the request header, which requires some setup.&lt;/p&gt;

&lt;p&gt;If the first issue (the developer account) is no problem, I can assist with the second, otherwise jump to the next section. Here are the steps you will need to follow:&lt;/p&gt;

&lt;h3&gt;
  
  
  Setup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Register a new &lt;strong&gt;WeatherKit key&lt;/strong&gt; in the &lt;strong&gt;Certificates, IDs &amp;amp; Profiles&lt;/strong&gt; section of the Apple developer portal. Download the key in the last step and you'll have a file named like &lt;code&gt;AuthKey_YOURKEYID.p8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The key is in the PKCS8 format, in most cases you'll need to convert to the PEM format. On a Mac you can convert it simply:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl pkcs8 -nocrypt -in AuthKey_YOURKEYID.p8 -out AuthKey_YOURKEYID.pem

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Back on &lt;strong&gt;Certificates, IDs &amp;amp; Profiles&lt;/strong&gt; you'll need to provision a new &lt;strong&gt;Service ID&lt;/strong&gt;. You'll normally use the reverse-domain notation for it (com.mycompany.myapp).&lt;/li&gt;
&lt;li&gt;Locate your &lt;strong&gt;Team ID&lt;/strong&gt; - it's under &lt;strong&gt;Membership Details&lt;/strong&gt; on the Apple developer portal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Accessing the API
&lt;/h3&gt;

&lt;p&gt;You now have what you need (Team ID, PEM key, Key ID, service ID) to create a &lt;a href="https://jwt.io/"&gt;JSON Web Token&lt;/a&gt; to access the API per the &lt;a href="https://developer.apple.com/documentation/weatherkitrestapi/request_authentication_for_weatherkit_rest_api"&gt;official documentation&lt;/a&gt;. The token is used in the header of the api request, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -v -H 'Authorization: Bearer [developer token]' "https://weatherkit.apple.com/api/v1/availability/37.323/122.032?country=US"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Easy access with Perl / Weather::WeatherKit
&lt;/h3&gt;

&lt;p&gt;For my own app, I created the Perl module &lt;a href="https://metacpan.org/pod/Weather::WeatherKit"&gt;Weather::WeatherKit&lt;/a&gt;, which takes care of all the token creation etc. It makes it very simple if you use Perl, but even if you don't you can still make a full WeatherKit API proxy in a few lines of code as I'll demonstrate - which you can then access any way you like.&lt;/p&gt;

&lt;p&gt;Why Perl? Despite the flak it gets from devs who don't use it, it's still a great solution for many tasks and I still prefer it over python for those tasks. Also, it's already available or readily available on most systems (Mac/Linux/BSD), but if you'd like to have one of the latest versions, a good way to get it is via &lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\curl -L https://install.perlbrew.pl | bash
perlbrew install perl-5.36.0
perlbrew switch perl-5.36.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from Perl, you'll need a package manager to make your life easier, like &lt;a href="https://metacpan.org/dist/App-cpanminus/view/bin/cpanm"&gt;cpanm&lt;/a&gt;. On linux you'd use apt/yum to install a package called something like &lt;code&gt;cpanminus&lt;/code&gt; or &lt;code&gt;perl-App-cpanminus&lt;/code&gt;, while if you used perlbrew you'd do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perlbrew install-cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now install the two packages we'll use. I will use &lt;a href="https://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt;, which is a modern web app framework, so that I am not accused of using your grandpa's CGI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cpanm Mojolicious::Lite Weather::WeatherKit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full code for a proxy that handles the authentication follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojolicious::&lt;/span&gt;&lt;span class="nv"&gt;Lite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Weather::&lt;/span&gt;&lt;span class="nv"&gt;WeatherKit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/weather&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;($c) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Weather::&lt;/span&gt;&lt;span class="nv"&gt;WeatherKit&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;team_id&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TEAMID&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
        &lt;span class="s"&gt;service_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;com.mycompany.myapp&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
        &lt;span class="s"&gt;key_id&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOURKEYID&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
        &lt;span class="s"&gt;key_file&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AuthKey_YOURKEYID.pem&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$weather&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you saved the above as &lt;code&gt;weather-server.pl&lt;/code&gt; and put it in the same directory as your &lt;code&gt;.pem&lt;/code&gt; key, you can start it as a web service that listens to port 3000 with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;morbo cgi-bin/weather-server.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, simply point a browser to &lt;code&gt;http://127.0.0.1:3000/weather?lat=51.2&amp;amp;lon=-1.8&amp;amp;dataSets=forecastHourly&lt;/code&gt; and you'll get a hourly forecast for the next day for &lt;a href="https://www.youtube.com/watch?v=zg5Ovdu6bOE"&gt;Stonehenge&lt;/a&gt; in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"forecastHourly"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"HourlyForecast"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"metadata"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"attributionURL"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://weatherkit.apple.com/legal-attribution.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"expireTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2023-03-31T10:41:14Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;51.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;-1.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"readTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2023-03-31T09:41:14Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"reportedTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2023-03-31T08:05:04Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"units"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"hours"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"forecastStart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2023-03-31T09:00:00Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cloudCover"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"conditionCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Drizzle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"daylight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"humidity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"precipitationAmount"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"precipitationIntensity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"precipitationChance"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"precipitationType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"rain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pressure"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;984.31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pressureTrend"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"rising"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"snowfallIntensity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"snowfallAmount"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"temperature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;9.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"temperatureApparent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;6.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"temperatureDewPoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"uvIndex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"visibility"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;7558.44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"windDirection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"windGust"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;57.61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"windSpeed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;35.96&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  7Timer and other free solutions
&lt;/h2&gt;

&lt;h3&gt;
  
  
  7Timer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://7timer.info/"&gt;7Timer&lt;/a&gt;&lt;/strong&gt; is a completely free service based on &lt;a href="https://www.ncei.noaa.gov/products/weather-climate-models/global-forecast"&gt;NOAA's GFS&lt;/a&gt;. It's notable for calculating astronomical seeing and atmospheric transparency, which are very useful to astronomers and stargazers. I am donating the servers to the project and developing the iOS client &lt;a href="https://apps.apple.com/us/app/xasteria-astronomy-weather/id985030722"&gt;Xasteria&lt;/a&gt; (also free).&lt;/p&gt;

&lt;p&gt;You can check the &lt;a href="https://www.7timer.info/doc.php"&gt;documentation&lt;/a&gt; for the available forecast products and the meaning of the output values. If you use Perl, you can use &lt;a href="https://metacpan.org/pod/Weather::Astro7Timer"&gt;Weather::Astro7Timer&lt;/a&gt; to access the service in your code, otherwise here are a couple of example requests, one for the 3-day &lt;strong&gt;ASTRO&lt;/strong&gt; forecast, and one for the 7-day &lt;strong&gt;CIVIL&lt;/strong&gt; forecast:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.7timer.info/bin/astro.php?lat=51.2&amp;amp;lon=-1.8&amp;amp;output=json
http://www.7timer.info/bin/civil.php?lat=51.2&amp;amp;lon=-1.8&amp;amp;output=json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try them on your browser.&lt;/p&gt;

&lt;h3&gt;
  
  
  MET Norway
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.met.no/en"&gt;Norwegian Meteorological Institute&lt;/a&gt; offers a number of &lt;a href="https://api.met.no/"&gt;APIs&lt;/a&gt;. Their forecast API &lt;a href="https://api.met.no/weatherapi/locationforecast/2.0/documentation"&gt;Locationforecast 2.0&lt;/a&gt; is based on the European &lt;a href="https://www.ecmwf.int/"&gt;ECMWF&lt;/a&gt; forecast and it's a great solution, especially for users not interested in the astronomical aspects of 7Timer. It's completely free/open like 7Timer, so all you have to do to get a forecast is a request like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=51.2&amp;amp;lon=-1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally, given that &lt;strong&gt;MET Norway&lt;/strong&gt;, &lt;strong&gt;7Timer&lt;/strong&gt; and &lt;strong&gt;Apple Weather&lt;/strong&gt; are based on different forecast models, I find that consulting these three gives me a better forecast confidence (a hard thing here in the UK).&lt;/p&gt;

&lt;h3&gt;
  
  
  OpenWeather
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://openweathermap.org/"&gt;OpenWeather&lt;/a&gt; is a bit more like Dark Sky in that you have to sign up to get a key and then you get 1000 free requests per day (&lt;a href="https://openweathermap.org/api/one-call-3"&gt;One Call API&lt;/a&gt;). So it may be completely free if it fits your usage needs.&lt;/p&gt;

&lt;p&gt;Their various &lt;a href="https://openweathermap.org/api"&gt;API options&lt;/a&gt; may seem a bit confusing, but basically if you want something similar to Dark Sky, you would go with the aforementioned One Call API that provides current weather and minutely, hourly, daily forecasts in the future, or their &lt;a href="https://openweathermap.org/forecast5"&gt;5 day / 3h forecast&lt;/a&gt;. The latter has a greater free quota of 60 calls/min or 1 million per month.&lt;/p&gt;

</content>
    <author>
      <name>Dimitrios Kechagias</name>
    </author>
    <id>https://dev.to/dkechag/replacing-the-dark-sky-weather-api-weatherkit-7timer-and-more-3o</id>
    <published>2023-03-31T11:51:09Z</published>
    <updated>2023-03-31T11:51:09Z</updated>
    <category term="weather"/>
    <category term="weatherkit"/>
    <category term="perl"/>
    <category term="api"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #210</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-210-1ojj" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I'm back this week with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-210/">PWC #210</a>. Last week I was very busy and spent a long time reviewing other peoples' far more efficient solutions to #208, so I didn't get to doing any solutions for #209. The usual disclaimer about this could contain spoilers, so if you're trying to solve the challenge yourself you may want to skip this post for now. So let's get right into this.</p>

<h4>
  
  
  Kill And Win
</h4>

<p>For this challenge I decided to use some of the tools I learned about in the solutions other people submitted for #208, especially the ways hashes can make the process more efficient. The goal is to find the number in the list where you can delete the most points by deleting the number and its adjacent numbers plus and minus one. You get to count each number however many times it appears in the list.</p>

<p>My code is actually very simple for this one. I hope it's fairly elegant looking to others, but I'll have to see the solutions others provide. Essentially I just create a hash where for every number appearing in the list, it tells us how many times it appears. The key is the number, the value is the number of times it appears. It then iterates once through all the numbers that occur in the list and tests the total of it and its adjacent numbers if they exist. Then it checks the total against the previous winner. Pretty simple, really.</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.10;

my %hash;
$hash{$_}++ for @ARGV;

my $max;
for my $int (keys %hash) {
    my $total = (($int - 1) * $hash{$int - 1}) + ($int * $hash{$int}) + (($int + 1) * $hash{$int + 1});
    $max = $total if $total &gt; $max or !defined($max);
}

say $max if defined $max;
</code></pre>

</div>
<h4>
  
  
  Number Collision
</h4>

<p>Here's another interesting project. Originally I thought the first one would be hard and this one easy, but it turned out the opposite. This one I have to imagine has a better solution than I came up with, so I look forward to seeing the other solutions. Maybe others will use a sort of shifting mechanism, whereas I'm using good old-fashioned comparisons and splices.</p>

<p>What I do here is I make a collision. So this is the sum of the two numbers I'm comparing as I go through the list. If they're both positive I continue. If the second one is a negative with a smaller absolute value, I kill it and test the same left number with the new right replacement. Having said that about absolute values, I'm now thinking about how I could use <code>abs()</code> to make it cleaner when testing the positivity of a number, but I don't really intend to change it now. </p>

<p>Moving on, if the numbers are opposites, I kill both of them and test the numbers on either side. Speaking of zero values (as the collision value is when the numbers are opposites), I'm expecting there to be no zeros in the dataset. It's not stated, but zeros defeat the purpose of the challenge. Finally, if the right operand is a greater negative than the left positive, we loop backwards through any positive integers until we find one that beats the negative, or we find a negative.</p>

<p>Here's the code:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.10;

my @list = @ARGV;
for (my $index = 0; $index &lt; $#list; $index++) {
    my $collision = $list[$index] + $list[$index + 1];
    if ($collision &gt; $list[$index]) {next}
    elsif ($collision &gt; 0) {
        splice @list, $index + 1, 1;
        $index--;
    } elsif ($collision == 0) {
        splice @list, $index, 2;
        $index -= 2;
    } elsif (0 &gt; $collision &gt; $list[$index + 1]) {
        splice @list, $index, 1;
        for (my $index2 = $index - 1; $index2 &gt;= 0 and $list[$index2] &gt; 0; $index2--) {
            if (-$list[$index] &gt; $list[$index2]) {
                splice @list, $index2, 1;
                $index--;
                $index2--;                
            } elsif (-$list[$index] == $list[$index2]) {
                splice @list, $index2, 2;
                $index -= 2;
            } else {
                splice @list, $index, 1;
                $index--;
            }
        }
    }
}
say $_ for @list;
</code></pre>

</div>

<p>That's all for this week. Hopefully I should have more solutions for you next week. Stay tuned!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-210-1ojj</id>
    <published>2023-03-30T12:56:19Z</published>
    <updated>2023-03-30T12:56:19Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="challenge"/>
    <category term="practice"/>
  </entry>
  <entry>
    <title>Regex in python vs in perl</title>
    <link rel="alternate" href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/2600/0*vZMKz-sHEUjwbgNS" width="3024"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Regular expressions (regex) are a powerful tool for manipulating and searching text data. A regular expression is a sequence of characters&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Maxwell Langford</name>
    </author>
    <id>https://medium.com/p/693f5a98ba90</id>
    <published>2023-03-29T17:06:53Z</published>
    <updated>2023-03-29T17:06:53.762000Z</updated>
    <category term="perl"/>
    <category term="regex-in-python"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Perl Coding Interview Question and Answers</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;As a Perl developer, you need to have a solid understanding of the language&amp;#x2019;s syntax, semantics, and best practices. This blog provides a&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/a7c5b8e823e1</id>
    <published>2023-03-19T05:07:58Z</published>
    <updated>2023-03-28T04:02:48.155000Z</updated>
    <category term="interview-preparation"/>
    <category term="programming"/>
    <category term="coding-interviews"/>
    <category term="perl-interview-questions"/>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7194881803530293683</id>
    <published>2023-03-26T19:54:00.000+02:00</published>
    <updated>2023-03-26T19:54:26.242+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxvii) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.322' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.322&lt;/strong&gt; on 2023-03-23, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.320 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-3.00' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.00&lt;/strong&gt; on 2023-03-25, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.40 was 1 year, 7 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.012&lt;/strong&gt; on 2023-03-22, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.010 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.59&lt;/strong&gt; on 2023-03-24, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.57 was 3 months, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2023-03-23, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.50 was 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.11&lt;/strong&gt; on 2023-03-19, with 58 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.10 was 2 months, 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/JMCNAMARA'&gt;JMCNAMARA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.006001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.006001&lt;/strong&gt; on 2023-03-24, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.006000 was 4 months, 3 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;7.70&lt;/strong&gt; on 2023-03-26, with 52 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 7.68 was 12 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2023-03-25, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.67 was 2 years, 9 months before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/SHAY/libnet-3.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Collection of network protocol modules
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.15&lt;/strong&gt; on 2023-03-20, with 30 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.14 was 9 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/SHAY'&gt;SHAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.714' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.714&lt;/strong&gt; on 2023-03-20, with 61 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.713 was 3 months, 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PREACTION'&gt;PREACTION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230320&lt;/strong&gt; on 2023-03-21, with 41 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230220 was 1 month, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETJ/PDL-2.082' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.082&lt;/strong&gt; on 2023-03-22, with 47 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.081 was 4 months, 28 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETJ'&gt;ETJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/VPIT/Scope-Upper-0.34' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Scope::Upper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Act on upper scopes.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.34&lt;/strong&gt; on 2023-03-26, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.33 was 1 year, 3 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/VPIT'&gt;VPIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9696' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9696&lt;/strong&gt; on 2023-03-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9695 was 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.759' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.759&lt;/strong&gt; on 2023-03-26, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.758 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000150' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.000150&lt;/strong&gt; on 2023-03-21, with 40 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.000148 was 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETHER/YAML-Tiny-1.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write YAML files with as little code as possible
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.74&lt;/strong&gt; on 2023-03-23, with 31 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.73 was 5 years, 1 month, 2 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETHER'&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7194881803530293683/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvii-18-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7194881803530293683"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7194881803530293683"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvii-18-great-cpan-modules-released.html" title="(cdxxxvii) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8516666916140517742</id>
    <published>2023-03-26T19:48:00.004+02:00</published>
    <updated>2023-03-26T19:53:35.373+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dl) metacpan weekly report - Prima</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 54&lt;/p&gt;
&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Prima"&gt;Prima&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/03/26 17:47:43 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::MPV" target="_blank"&gt;AnyEvent::MPV&lt;/a&gt; - remote control mpv (https://mpv.io)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AsposeCellsCloud::CellsApi" target="_blank"&gt;AsposeCellsCloud::CellsApi&lt;/a&gt; - Aspose.Cells Cloud SDK for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::RAM" target="_blank"&gt;DBD::RAM&lt;/a&gt; - a DBI driver for files and data structures&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Keywords" target="_blank"&gt;Dist::Zilla::Plugin::Keywords&lt;/a&gt; - Add keywords to metadata in your distribution&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Jspell" target="_blank"&gt;Lingua::Jspell&lt;/a&gt; - Perl interface to the Jspell morphological analyser.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Action" target="_blank"&gt;Mail::Action&lt;/a&gt; - base for building modules that act on incoming mail&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM::IO" target="_blank"&gt;SPVM::IO&lt;/a&gt; - File IO, Socket, Select/Polling.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Pod" target="_blank"&gt;App::Pod&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor" target="_blank"&gt;Class::Accessor&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Const::Fast" target="_blank"&gt;Const::Fast&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Password::zxcvbn" target="_blank"&gt;Data::Password::zxcvbn&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::ICal" target="_blank"&gt;Date::ICal&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::AnyData" target="_blank"&gt;DBD::AnyData&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+2=68)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CheckChangesHasContent" target="_blank"&gt;Dist::Zilla::Plugin::CheckChangesHasContent&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/enum" target="_blank"&gt;enum&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/experimentals" target="_blank"&gt;experimentals&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Glib::Object::Introspection" target="_blank"&gt;Glib::Object::Introspection&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingy" target="_blank"&gt;Lingy&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Gen" target="_blank"&gt;List::Gen&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/match::simple" target="_blank"&gt;match::simple&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Formula" target="_blank"&gt;Math::Formula&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=94)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=481)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Types::Structured" target="_blank"&gt;MooseX::Types::Structured&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Types::MooseLike" target="_blank"&gt;MooX::Types::MooseLike&lt;/a&gt; (+1=19)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::clean" target="_blank"&gt;namespace::clean&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::OAuth" target="_blank"&gt;Net::Google::OAuth&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=36)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/oo_sub" target="_blank"&gt;oo_sub&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pango" target="_blank"&gt;Pango&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Pipes" target="_blank"&gt;Parallel::Pipes&lt;/a&gt; (+2=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=132)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=36)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+3=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Selenium::Remote::Driver" target="_blank"&gt;Selenium::Remote::Driver&lt;/a&gt; (+1=47)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=24)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Choose" target="_blank"&gt;Term::Choose&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadLine" target="_blank"&gt;Term::ReadLine&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=40)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Moment" target="_blank"&gt;Time::Moment&lt;/a&gt; (+1=72)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/TOML::Tiny" target="_blank"&gt;TOML::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twiggy" target="_blank"&gt;Twiggy&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=108)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Fast" target="_blank"&gt;XML::Fast&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=96)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/XXX" target="_blank"&gt;XXX&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8516666916140517742/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dl-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8516666916140517742"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8516666916140517742"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dl-metacpan-weekly-report.html" title="(dl) metacpan weekly report - Prima"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4343390497241876667</id>
    <published>2023-03-26T19:46:00.007+02:00</published>
    <updated>2023-03-26T19:46:59.868+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxvii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;
Build date: 2023-03-26 17:46:05 GMT&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75796336" target="_blank"&gt;removing ^M and new line while reading XML document&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75807504" target="_blank"&gt;Perl Gtk2::Window-&amp;gt;list_toplevels&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75804663" target="_blank"&gt;Running perl script and getting "Error in option spec:"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75845707" target="_blank"&gt;&amp;lt;STDIN&amp;gt; vs $name substring search - one works other doesn't&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75785937" target="_blank"&gt;Workarounds to print .00001 in perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4343390497241876667/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4343390497241876667"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4343390497241876667"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvii-stackoverflow-perl-report.html" title="(dlxxvii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Hack The Box Nunchucks Writeup</title>
    <link rel="alternate" href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1942/0*PEFYPGl9fZPn2zZb.png" width="1942"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Nunchucks is an easy Linux box created by TheCyberGeek on Hack The Box and I intend to hack it. Hello world, welcome to Haxez in this post&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Haxez - Hacking Made Easy</name>
    </author>
    <id>https://medium.com/p/f6eef36a8363</id>
    <published>2023-03-26T13:01:25Z</published>
    <updated>2023-03-26T15:49:30.057000Z</updated>
    <category term="nunchuck"/>
    <category term="perl"/>
    <category term="ssti"/>
    <category term="hacking"/>
    <category term="hack-the-box-writeup"/>
  </entry>
  <entry>
  <title>Now Accepting: TPRC Proposals for 2024</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcproposals2024"/>
  <id>tag:news.perlfoundation.org,2023-03-22:/post/tprcproposals2024</id>
  <published>2023-03-22T15:23:23</published>
  <updated>2023-03-22T15:23:23</updated>
  <summary>
  <![CDATA[
      It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. Please view the information, along with a sample RFP you can send to possible vendors here. When ready to submit your proposal, please use the same form. If you have any questions, please contact us at hello@perlfoundation.org 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/combo logo.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. <p>Please view the information, along with a sample RFP you can send to possible vendors <a href="https://forms.gle/tYHSK5XDw2p55qgx5">here</a>. When ready to submit your proposal, please <a href="https://forms.gle/tYHSK5XDw2p55qgx5">use the same form.</a><p> If you have any questions, please contact us at hello@perlfoundation.org .</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Report on Volunteerism in the Perl Community</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/reportonperlvolunteerism"/>
  <id>tag:news.perlfoundation.org,2023-03-21:/post/reportonperlvolunteerism</id>
  <published>2023-03-21T13:14:44</published>
  <updated>2023-03-21T13:14:44</updated>
  <summary>
  <![CDATA[
     This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering scenario within these communities and create techniques that will help in better management of volunteers. The Perl community is ideal for this research project as there is no single large corporate entity behind the communities. Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/11d7bbec952d46a9332b896177e91328c59d9a35/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. <p>
The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering
scenario within these communities and create techniques that will help in better management of volunteers. The Perl
community is ideal for this research project as there is no single large corporate entity behind the communities. <p><p> 
Please <a href="https://drive.google.com/file/d/1xlSSbqJnfpBMBZaxnjgC9JwbQwTMJ60c/view?usp=share_link">click here</a> to view the report in it's entirety. <p>
We will be discussing the report at the next Community and Reps meeting, which will be held on April 21st at 17:30 UTC. <p> 
To join the meeting virtually, please follow <a href="https://us02web.zoom.us/j/89049224605?pwd=cU5sTVdDR0x4bnRFQU4zR2dRQ0o2dz09">this Zoom link. </a> <p>
Meeting ID: 890 4922 4605<p>
Passcode: 8675309<p>
We hope to see you at the meeting and look forward to your input. <p> </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Input Requested - Future of TPRF website(s)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/websiteproposalcall"/>
  <id>tag:news.perlfoundation.org,2023-03-20:/post/websiteproposalcall</id>
  <published>2023-03-20T19:06:24</published>
  <updated>2023-03-20T19:06:24</updated>
  <summary>
  <![CDATA[
     TPRF is looking for community input on the future of the TPRF website We are asking for community members to submit proposals for the Perl/Raku website The proposals would ideally address the following: Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPRF is looking for community input on the future of the TPRF website(s). <p>
We are asking for community members to submit proposals for the Perl/Raku website(s). The proposals would ideally address the following: <p><p>
* Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language specific donations?<p>
* An approach to the professional graphic designing of the website (Please provide links to any examples/existing websites that show what a website along these lines would look like)<p>
* Cost to deploy<p>
* Ongoing costs for technical aspects and maintenance<p></p>

<p>Suggestions should also be:<p>
1. Template-based, for custom branding<p>
2. easy to add, update, move and delete content<p>
3. customizable menus<p>
4. mobile friendly<p>
5. multi-domain support<p>
6. access to logs etc for analysis and SEO purposes<p><p><p>
You can submit your ideas using our form template at https://forms.gle/s9uKWorzQ3GSHe8JA OR you can submit a free form proposal to board@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5037014830039743391</id>
    <published>2023-03-19T08:58:00.000+01:00</published>
    <updated>2023-03-19T08:58:08.089+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxvi) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.320&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.316 was 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.010&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.009 was 5 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;7.68&lt;/strong&gt; on 2023-03-14, with 52 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 7.66 was 2 months, 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.07&lt;/strong&gt; on 2023-03-14, with 58 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.05 was 3 months, 28 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PLICEASE'&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PEVANS/Future-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2023-03-17, with 56 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.49 was 5 months before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2023-03-17, with 45 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.64 was 1 month, 3 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2023-03-13, with 25 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.36 was 2 months, 14 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/NLNETLABS'&gt;NLNETLABS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.014' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.014&lt;/strong&gt; on 2023-03-14, with 31 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.013 was 3 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RHANDOM'&gt;RHANDOM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.758' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.758&lt;/strong&gt; on 2023-03-17, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.757 was 8 months before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302194' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.302194&lt;/strong&gt; on 2023-03-14, with 182 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.302193 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5037014830039743391/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html" title="(cdxxxvi) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Deadline for TPRC </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprctalks"/>
  <id>tag:news.perlfoundation.org,2023-03-17:/post/tprctalks</id>
  <published>2023-03-17T13:58:45</published>
  <updated>2023-03-17T13:58:45</updated>
  <summary>
  <![CDATA[
     The Perl Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers. The Perl Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023. The deadline to submit your talks is coming up quickly! Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers.</p>

<p>The Perl &amp; Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023.</p>

<p>The deadline to submit your talks is coming up quickly! Please visit https://www.papercall.io/tprctor23 to submit your talk before March 31st. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>One-liner: Remove first two characters of every line</title>
  <summary type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></summary>
  <updated>2023-03-14T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/remove-first-two-characters-of-every-line"/>  <id>https://perlmaven.com/remove-first-two-characters-of-every-line</id>
  <content type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Mendapatkan Username Login pada Wordpress versi 4.9.4</title>
    <link rel="alternate" href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/954/1*POyRpFXOGS0cmL9V8Dy0PQ.png" width="954"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Hai, disini saya akan menjelaskan cara mendapatkan username pada Login wordpress, yangmana cocok sekali apabila digabungkan dengan teknik&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>SamUkhid</name>
    </author>
    <id>https://medium.com/p/6621547dc4bf</id>
    <published>2023-03-09T18:32:41Z</published>
    <updated>2023-03-09T20:06:46.424000Z</updated>
    <category term="wordpress"/>
    <category term="perl"/>
    <category term="vulnerability"/>
    <category term="username"/>
  </entry>
</feed>
