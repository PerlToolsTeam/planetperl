<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-23T08:39:09Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge #213 - The Simple and the Hard</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-213---the-simple-and-the-hard.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11081</id>
    <published>2023-04-23T07:45:17Z</published>
    <updated>2023-04-23T08:08:23Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="sortdijkstrarouteschatgptai" label="#sort #dijkstra #routes #chatgpt #ai" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Hey everybody, back this week with a couple really interesting weekly challenge tasks. The first one is extremely simple, like one-liner simple, and the second one is quite complex and nearly 90 lines long.</p>

<h4>Challenge #1 - Fun Sort</h4>

<p>This was fun, it's in the name. This challenge took me about 5 minutes. Sort the input, split into even and odd arrays and put them together to print out. Pretty self-explanatory.</p>

<pre><code>#!/usr/bin/perl
use strict;
use v5.24;

my (@even, @odd);
$_ % 2 ? push @odd, $_ : push @even, $_ for sort @ARGV;
say @even, @odd;
</code></pre>

<h4>Challenge #2 - Not Fun Dijkstra</h4>

<p>I still don't know how Dijkstra came up with his algorithm after 20 minutes of thinking and it took me hours to understand it, but I'm glad he did. I had never heard of Dijkstra's algorithm, so originally I had no idea how to solve this challenge. To give me a starting point, I asked ChatGPT what it thought, and it said "Use Dijkstra's algorithm" and gave me an implementation to play with. As before, I wrote this code by hand, but it helped me a lot with the algorithmic design. Also, the AI seemed to fail badly when I asked it for additional error-checking if there was no route, so I designed and wrote that part entirely on my own.</p>

<p>If you haven't checked out the ways AI can assist your workflow and productivity, I highly recommend it. There are valid concerns about it, obviously, and I would never recommend copying and pasting code from it without understanding what it's doing, but it can help you understand a complex algorithm and how you would implement it.</p>

<p>Essentially, the theory behind Dijkstra's algorithm is not to traverse recursively, but to always follow whatever the shortest untraveled route attached to the source is. If you're always following whatever the shortest route is, the first route that reaches the destination will be the shortest route to the destination. Then you maintain a list of arrows (a hash of each node in our case) pointing backwards to the source node along that shortest route.</p>

<p>Here's the code:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;
use List::Util 'min';

my @routes = ([1, 2, 6], [5, 6, 7]);
my $source = 1;
my $destination = 7;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1, 2, 3], [4, 5, 6]);
$source = 2;
$destination = 5;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1,2,3], [4,5,6], [3,8,9], [7,8]);
$source = 1;
$destination = 7;

print_dijkstra(\@routes, $source, $destination);

sub print_dijkstra {
    my $result = dijkstra(@_);
    if ($result == -1) {
        say -1;
    } else {
        my @route = @{$result};
        for (@route) {
            $_ != $route[$#route] ? print "$_, " : print "$_\n"
        }
    }
}

sub dijkstra {
    my ($routeref, $source, $destination) = @_;
    my @routes = @{$routeref};

    my %adjacency;
    for my $route (@routes) {
        my @nodes = @$route;
        for my $i (0 .. $#nodes - 1) {
            push @{$adjacency{$nodes[$i]}}, $nodes[$i + 1];
            push @{$adjacency{$nodes[$i + 1]}}, $nodes[$i];
        }
    }

    my %distance;
    my %visited;
    my %previous;
    $distance{$source} = 0;

    my %new_visits;
    while (keys %visited != keys %adjacency) {
        my $node = min(grep {!defined $visited{$_}} keys %distance);
        $visited{$node} = 1;

        for my $adjacent (@{$adjacency{$node}}) {
            my $total_distance = $distance{$node} + 1;
            if (!defined $distance{$adjacent} || $total_distance &lt; $distance{$adjacent}) {
                $distance{$adjacent} = $total_distance;
                $previous{$adjacent} = $node;
            }
        }

        if (%visited == %new_visits &amp;&amp; !$visited{$destination}) {
            return -1;
        } elsif ($visited{$destination}) {
            last;
        }
        %new_visits = %visited;
    }

    my @route;
    my $node = $destination;
    while ($node != $source) {
        unshift @route, $node;
        $node = $previous{$node};
    }
    unshift @route, $source;

    return \@route;
}
</code></pre>

<p>The first iteration through, the second example ended up in an endless loop because it kept trying to reach the separate set of nodes and couldn't. Because of that, I had to write the no route code properly, which essentially checks whether we're making any progress through the route or not. If not and we've reached a dead-end, we return a -1 and leave. However, the third example shows that we also need to handle the case where there are nodes that can't be reached but we have visited the destination, so that's included in the no route code.</p>

<h4>Conclusion</h4>

<p>This week we had a very simple challenge and a tough one. I had fun with the first one (albeit briefly) and I learned a lot from the second one, including the power of AI. It's a very powerful tool to have on hand. Have a good week and if I have time next week I'll see you then with the next challenge!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Sorting Routes</title>
    <link rel="alternate" href="https://dev.to/simongreennet/sorting-routes-595b" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 213
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-213/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Fun Sort
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive integers.</p>

<p>Write a script to sort the all even integers first then all odds in ascending order</p>

<h3>
  
  
  My solution
</h3>

<p>This is relatively straight forward. A less experienced developer might sort all the even numbers first and then all the odd numbers, and that would (IMHO) be a perfectly acceptable solution for this task.</p>

<p>However, we know that both Perl and Python allow us to use a custom sorting method. In Perl, this is expressed as <code>{ $a % 2 &lt;=&gt; $b % 2 || $a &lt;=&gt; $b }</code>. <code>$a</code> and <code>$b</code> are global variables that the <a href="https://perldoc.perl.org/functions/sort">sort</a> function uses to achieve this. <code>&lt;=&gt;</code> provides a numerical comparison between two values, returning <code>1</code> if <code>$b</code> is greater, <code>-1</code> if <code>$a</code> is greater, or <code>0</code> if they are the same.</p>

<p>Python is a little more straight forward with it's lambda function. The syntax used here is <code>array.sort(key=lambda x: (x % 2, x))</code>, which means we first search by evenness (evens first), and then numerically.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 1 2 3 4 5 6
2, 4, 6, 1, 3, 5

<span class="nv">$ </span>./ch-1.py 1 2
2, 1

<span class="nv">$ </span>./ch-1.py 1
1

</code></pre>

</div>



<h2>
  
  
  Task 2: Shortest Route
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of bidirectional routes defining a network of nodes, as well as source and destination node numbers.</p>

<p>Write a script to find the route from source to destination that passes through fewest nodes.</p>

<h3>
  
  
  My solution
</h3>

<p>This task on the other hand is much more complex. I have submitted only a Python solution. A Perl solution would simply be a transliteration of it.</p>

<p>To begin with I parse the input. The first value is a JSON string converted into a list of lists, while the second and third values represent the start and end numbers.</p>

<p>I then loop through each number in the node until I find the starting points, there may be more than one. For each starting point, I call the recursive function <code>find_routers</code> with the original list, the starting point, and the end value.</p>

<p>The <code>find_routers</code> recursive function has the original list of nodes, a list of nodes/position pairs of routes we've visited, and the target number. For the current node, I go backwards from the current number, and then go forwards. For each new number, I call the <code>find_pairs</code> function to see any connected nodes that we have not already seen. For each occurrence of this, I call the recursive function again, updating the second value with what node/position pairs we have already seen.</p>

<p>The return of this function is a list of node/number pairs. We keep a track of the solution of the shortest one found so far, and update it if the current one is shorter.</p>

<p>If there is no solution, I print <code>-1</code> and exit. The last step is to convert the list of node/position pairs into a list of numbers, and display the new list.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,6], [5,6,7]]"</span> 1 7
1,2,6,7

<span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,3], [4,5,6]]"</span> 2 5
<span class="nt">-1</span>

<span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,3], [4,5,6], [3,8,9], [7,8]]"</span> 1 7
1,2,3,8,7

<span class="nv">$ </span>./ch-2.py <span class="s1">'[[1,2,3,4,5,6,7], [7,1], [9,1]]'</span> 6 9
6,7,1,9
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/sorting-routes-595b</id>
    <published>2023-04-23T07:51:49Z</published>
    <updated>2023-04-23T07:51:49Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <author>
      <name>/u/singe</name>
      <uri>https://www.reddit.com/user/singe</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Containerisation is useful for packaging code and for creating predictable dev/prod environments. &lt;/p&gt; &lt;p&gt;Building on an old (pre-pandemic) post by our friend &lt;a href="/u/szabgab"&gt;/u/szabgab&lt;/a&gt; (&lt;a href="https://perlmaven.com/getting-started-with-perl-on-docker"&gt;https://perlmaven.com/getting-started-with-perl-on-docker&lt;/a&gt;), you can use &lt;em&gt;podman&lt;/em&gt; (which does not require root permission) to run your local code instead of docker (which requires root).&lt;/p&gt; &lt;p&gt;&lt;a href="https://docs.podman.io/en/latest/"&gt;https://docs.podman.io/en/latest/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Debian 11 (and derivatives such as Ubuntu 22.04) has podman in its packages. The version of podman is not the latest, but it will work with docker containers.&lt;/p&gt; &lt;p&gt;Install podman the usual Debian way. &lt;/p&gt; &lt;p&gt;You will need to create the file &lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/.config/containers/registries.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The file should contain something like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[registries.search] registries = [&amp;quot;registry.access.redhat.com&amp;quot;, &amp;quot;quay.io&amp;quot; , &amp;quot;docker.io&amp;quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Pull the perl container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman pull docker.io/amd64/perl &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;List the image ID for the container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman images &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run some local perl code (replace the variables below):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman run -v `pwd`:/opt $IMAGEID perl /opt/$MYCODEFILE &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Enjoy using podman with a perl. And thanks to Gabor as always. ^_^&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/singe"&gt; /u/singe &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12vv8g4</id>
    <link href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"/>
    <updated>2023-04-23T04:15:44+00:00</updated>
    <published>2023-04-23T04:15:44+00:00</published>
    <title>Quick tip: run local perl code using podman to run a perl docker container</title>
  </entry>
  <entry>
    <title>Ahoy is an amazing YouTuber</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/23/ahoy-amazing-youtuber/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://www.youtube.com/watch?v=i4EFkspO5p4">This video</a> from YouTuber <a href="https://www.youtube.com/@XboxAhoy">Ahoy</a> is amazing.</p>
</blockquote>

<p>I sometimes end my delirant ramblings here with <em>have fun!</em> or something
like this.</p>

<p><a href="https://www.youtube.com/watch?v=i4EFkspO5p4">This video</a> is one of the most perfect interpretations of having fun.
<a href="https://www.youtube.com/@XboxAhoy">Ahoy</a> re-creates a digital image from the eighties starting from a photo,
because the digital version is lost for good. I can only wonder how much
time it took to do that, while collecting pieces on the way to produce an
amazing video with the usual amazing comment.</p>

<p>Kudos!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/23/ahoy-amazing-youtuber/</id>
    <published>2023-04-23T06:00:00+02:00</published>
    <updated>2023-04-23T06:00:00+02:00</updated>
    <category term="passion"/>
    <category term="youtube"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #213 - The Simple and the Hard</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-213-the-simple-and-the-hard-17o3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hey everybody, back this week with a couple really interesting weekly challenge tasks. The first one is extremely simple, like one-liner simple, and the second one is quite complex and nearly 90 lines long.</p>

<h4>
  
  
  Challenge #1 - Fun Sort
</h4>

<p>This was fun, it's in the name. This challenge took me about 5 minutes. Sort the input, split into even and odd arrays and put them together to print out. Pretty self-explanatory.</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl
use strict;
use v5.24;

my (@even, @odd);
$_ % 2 ? push @odd, $_ : push @even, $_ for sort @ARGV;
say @even, @odd;
</code></pre>

</div>
<h4>
  
  
  Challenge #2 - Not Fun Dijkstra
</h4>

<p>I still don't know how Dijkstra came up with his algorithm after 20 minutes of thinking and it took me hours to understand it, but I'm glad he did. I had never heard of Dijkstra's algorithm, so originally I had no idea how to solve this challenge. To give me a starting point, I asked ChatGPT what it thought, and it said "Use Dijkstra's algorithm" and gave me an implementation to play with. As before, I wrote this code by hand, but it helped me a lot with the algorithmic design. Also, the AI seemed to fail badly when I asked it for additional error-checking if there was no route, so I designed and wrote that part entirely on my own.</p>

<p>If you haven't checked out the ways AI can assist your workflow and productivity, I highly recommend it. There are valid concerns about it, obviously, and I would never recommend copying and pasting code from it without understanding what it's doing, but it can help you understand a complex algorithm and how you would implement it.</p>

<p>Essentially, the theory behind Dijkstra's algorithm is not to traverse recursively, but to always follow whatever the shortest untraveled route attached to the source is. If you're always following whatever the shortest route is, the first route that reaches the destination will be the shortest route to the destination. Then you maintain a list of arrows (a hash of each node in our case) pointing backwards to the source node along that shortest route.</p>

<p>Here's the code:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;
use List::Util 'min';

my @routes = ([1, 2, 6], [5, 6, 7]);
my $source = 1;
my $destination = 7;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1, 2, 3], [4, 5, 6]);
$source = 2;
$destination = 5;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1,2,3], [4,5,6], [3,8,9], [7,8]);
$source = 1;
$destination = 7;

print_dijkstra(\@routes, $source, $destination);

sub print_dijkstra {
    my $result = dijkstra(@_);
    if ($result == -1) {
        say -1;
    } else {
        my @route = @{$result};
        for (@route) {
            $_ != $route[$#route] ? print "$_, " : print "$_\n"
        }
    }
}

sub dijkstra {
    my ($routeref, $source, $destination) = @_;
    my @routes = @{$routeref};

    my %adjacency;
    for my $route (@routes) {
        my @nodes = @$route;
        for my $i (0 .. $#nodes - 1) {
            push @{$adjacency{$nodes[$i]}}, $nodes[$i + 1];
            push @{$adjacency{$nodes[$i + 1]}}, $nodes[$i];
        }
    }

    my %distance;
    my %visited;
    my %previous;
    $distance{$source} = 0;

    my %new_visits;
    while (keys %visited != keys %adjacency) {
        my $node = min(grep {!defined $visited{$_}} keys %distance);
        $visited{$node} = 1;

        for my $adjacent (@{$adjacency{$node}}) {
            my $total_distance = $distance{$node} + 1;
            if (!defined $distance{$adjacent} || $total_distance &lt; $distance{$adjacent}) {
                $distance{$adjacent} = $total_distance;
                $previous{$adjacent} = $node;
            }
        }

        if (%visited == %new_visits &amp;&amp; !$visited{$destination}) {
            return -1;
        } elsif ($visited{$destination}) {
            last;
        }
        %new_visits = %visited;
    }

    my @route;
    my $node = $destination;
    while ($node != $source) {
        unshift @route, $node;
        $node = $previous{$node};
    }
    unshift @route, $source;

    return \@route;
}
</code></pre>

</div>

<p>The first iteration through, the second example ended up in an endless loop because it kept trying to reach the separate set of nodes and couldn't. Because of that, I had to write the no route code properly, which essentially checks whether we're making any progress through the route or not. If not and we've reached a dead-end, we return a -1 and leave. However, the third example shows that we also need to handle the case where there are nodes that can't be reached but we have visited the destination, so that's included in the no route code.</p>

<h4>
  
  
  Conclusion
</h4>

<p>This week we had a very simple challenge and a tough one. I had fun with the first one (albeit briefly) and I learned a lot from the second one, including the power of AI. It's a very powerful tool to have on hand. Have a good week and if I have time next week I'll see you then with the next challenge!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-213-the-simple-and-the-hard-17o3</id>
    <published>2023-04-23T03:10:35Z</published>
    <updated>2023-04-23T03:10:35Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="dijkstra"/>
    <category term="chatgpt"/>
  </entry>
  <entry>
    <author>
      <name>/u/niceperl</name>
      <uri>https://www.reddit.com/user/niceperl</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/niceperl"&gt; /u/niceperl &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vhaxt/cdxli_10_great_cpan_modules_released_last_week/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12vhaxt</id>
    <link href="https://www.reddit.com/r/perl/comments/12vhaxt/cdxli_10_great_cpan_modules_released_last_week/"/>
    <updated>2023-04-22T19:57:47+00:00</updated>
    <published>2023-04-22T19:57:47+00:00</published>
    <title>(cdxli) 10 great CPAN modules released last week</title>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8746119144817944657</id>
    <published>2023-04-22T21:56:00.000+02:00</published>
    <updated>2023-04-22T21:56:56.827+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxli) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002003&lt;/strong&gt; on 2023-04-19, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002002 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Module-Build-Tiny-0.043' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.043&lt;/strong&gt; on 2023-04-19, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.039 was 8 years, 6 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230420&lt;/strong&gt; on 2023-04-20, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230320 was 30 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAREKR/Pod-Parser-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Parser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Modules for parsing/translating POD format documents
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2023-04-22, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.65 was 11 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAREKR'&gt;MAREKR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 62 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 23 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.971002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971002&lt;/strong&gt; on 2023-04-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9705 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;v9.2.0&lt;/strong&gt; on 2023-04-17, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: v9.0.0 was 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DANBERR'&gt;DANBERR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-22, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8746119144817944657/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html" title="(cdxli) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7735320647946670040</id>
    <published>2023-04-22T21:52:00.001+02:00</published>
    <updated>2023-04-22T21:52:55.784+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliii) metacpan weekly report - Getopt::Long &amp; Dash</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 75&lt;/p&gt;
&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Getopt::Long"&gt;Getopt::Long&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&amp;amp;&lt;b&gt; &lt;a href="https://metacpan.org/module/Dash"&gt;Dash&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/22 19:49:48 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Modify" target="_blank"&gt;Env::Modify&lt;/a&gt; - affect Perl %ENV from subshell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Win32::Service" target="_blank"&gt;POE::Component::Win32::Service&lt;/a&gt; - A POE component that provides non-blocking access to Win32::Service.
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Rest::Client::Builder" target="_blank"&gt;Rest::Client::Builder&lt;/a&gt; - Base class to build simple object-oriented REST clients&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword::Win32" target="_blank"&gt;Term::ReadPassword::Win32&lt;/a&gt; - Asking the user for a password (for Win32)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Win32::PEPM" target="_blank"&gt;Acme::Win32::PEPM&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=159)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Devel" target="_blank"&gt;Catalyst::Devel&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+2=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Perl::Releases" target="_blank"&gt;CPAN::Perl::Releases&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses::UI" target="_blank"&gt;Curses::UI&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+3=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env" target="_blank"&gt;Env&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Event" target="_blank"&gt;Event&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Fennec" target="_blank"&gt;Fennec&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Super" target="_blank"&gt;Forks::Super&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Frost" target="_blank"&gt;Frost&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Gepok" target="_blank"&gt;Gepok&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+3=117)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=63)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Request::FromCurl" target="_blank"&gt;HTTP::Request::FromCurl&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::CPP" target="_blank"&gt;Inline::CPP&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jmx4perl" target="_blank"&gt;jmx4perl&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::projectroot" target="_blank"&gt;lib::projectroot&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=162)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=102)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=97)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::LvalueAttribute" target="_blank"&gt;MooX::LvalueAttribute&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Fastly" target="_blank"&gt;Net::Fastly&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN2" target="_blank"&gt;OrePAN2&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Piper" target="_blank"&gt;Piper&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sepia" target="_blank"&gt;Sepia&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ProgressBar" target="_blank"&gt;String::ProgressBar&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tangram" target="_blank"&gt;Tangram&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::File" target="_blank"&gt;Test::File&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=183)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/TUWF" target="_blank"&gt;TUWF&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32" target="_blank"&gt;Win32&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Daemon" target="_blank"&gt;Win32::Daemon&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Exe" target="_blank"&gt;Win32::Exe&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Mechanize::NotepadPlusPlus" target="_blank"&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::OLE" target="_blank"&gt;Win32::OLE&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Packer" target="_blank"&gt;Win32::Packer&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Pipe" target="_blank"&gt;Win32::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::ShellQuote" target="_blank"&gt;Win32::ShellQuote&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7735320647946670040/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html" title="(dliii) metacpan weekly report - Getopt::Long &amp; Dash"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8619909316773646777</id>
    <published>2023-04-22T21:48:00.000+02:00</published>
    <updated>2023-04-22T21:48:13.429+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;
Build date: 2023-04-22 19:47:15 GMT&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76030424" target="_blank"&gt;How do I quote the special character + and a one-letter-plus-two-digit string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76027200" target="_blank"&gt;How can I refer to blessed block of code using reference to the object?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76052075" target="_blank"&gt;Difference between calling named anonymous function and regular subroutine&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76048997" target="_blank"&gt;Replace next line after match in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76060678" target="_blank"&gt;Perl - Unexpected behavior: Iterating thru an array "foreach $r (@a)" if iterator $r is changed via regex - the array elements themselves are changed&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8619909316773646777/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html" title="(dlxxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76052075</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Difference between calling named anonymous function and regular subroutine</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Dima</name>
            <uri>https://stackoverflow.com/users/12896988</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76052075/difference-between-calling-named-anonymous-function-and-regular-subroutine"/>
        <published>2023-04-19T08:04:26Z</published>
        <updated>2023-04-22T18:27:40Z</updated>
        <summary type="html">
            &lt;p&gt;I'm experimenting with anonymous functions in Perl, and I began to wonder what the difference between calling these two is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $read_file = sub {
    my ($filename) = @_;
    my @lines;
    
    open my $fh, '&amp;lt;:raw', $filename or die &amp;quot;Can't open file $filename: $!&amp;quot;;
    while (my $line = &amp;lt;$fh&amp;gt;) {
        chomp $line;
        push @lines, $line;
    }
    close $fh;
    return @lines;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sub read_file {
    my ($filename) = @_;
    my @lines;
    
    open my $fh, '&amp;lt;:raw', $filename or die &amp;quot;Can't open file $filename: $!&amp;quot;;
    while (my $line = &amp;lt;$fh&amp;gt;) {
        chomp $line;
        push @lines, $line;
    }
    close $fh;
    return @lines;
}
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/ThranPoster</name>
      <uri>https://www.reddit.com/user/ThranPoster</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"&gt; &lt;img src="https://external-preview.redd.it/ZQrXOCeeephqfF_6G9l0jDCzAgwoz7LJhUQvNbFOWd8.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=b6f0c78851765a4d2298ed003566481fc9fe48d2" alt="RSRU Release 3.2 - A static catalogue website and blog builder written in Perl" title="RSRU Release 3.2 - A static catalogue website and blog builder written in Perl" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/ThranPoster"&gt; /u/ThranPoster &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://github.com/lordfeck/rsru"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12veimc</id>
    <media:thumbnail url="https://external-preview.redd.it/ZQrXOCeeephqfF_6G9l0jDCzAgwoz7LJhUQvNbFOWd8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b6f0c78851765a4d2298ed003566481fc9fe48d2"/>
    <link href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"/>
    <updated>2023-04-22T18:21:30+00:00</updated>
    <published>2023-04-22T18:21:30+00:00</published>
    <title>RSRU Release 3.2 - A static catalogue website and blog builder written in Perl</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76073934</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Simple parse not printing out date in string</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>James Finnegan</name>
            <uri>https://stackoverflow.com/users/10157177</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76073934/simple-parse-not-printing-out-date-in-string"/>
        <published>2023-04-21T14:03:16Z</published>
        <updated>2023-04-22T18:17:29Z</updated>
        <summary type="html">
            &lt;p&gt;I'm not sure why my parse isn't working on this string.  I got it to work by putting the &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;.*&lt;/code&gt;, but I don't understand why the 1st parse isn't working.  Here is the string and the 1st and 2nd parses.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $string = &amp;quot;/usr/local/bin/python3.9 -u /usr/local/bin/scripts/master_program.py 4002 daily true 20230421&amp;quot;;
my $pythonpgm = &amp;quot;master_program.py&amp;quot;;
my ($midmark1) = $string =~ /.*$pythonpgm \d+ .*(\d+).*/;
my ($midmark2) = $string =~ /.*$pythonpgm \d+ .*?(\d+).*/;

print &amp;quot;\nmidmark1 =&amp;gt;  $midmark1\n&amp;quot;;
print &amp;quot;\nmidmark2 =&amp;gt;  $midmark2\n\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the printout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;midmark1 =&amp;gt;  1

midmark2 =&amp;gt;  20230421
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry>
    <title>Removing a session in Mojolicious</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/22/mojolicious-removing-session/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Just a note about removing sessions in <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>.</p>
</blockquote>

<p>When I wrote <a href="/ETOOBUSY/2023/04/17/no-back-button/">No back button after logout</a>, I forgot to take note of an
interesting fact about removing a session in <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>.</p>

<p>The fact is: you don’t control it from the server side.</p>

<p>I mean, the server can <em>ask</em> the browser to remove the session, by getting
rid of the cookie. On the other hand, if for some reason the browser is not
collaborating (e.g. refusing to delete the session cookie), then the session
will stick up to the expiration time.</p>

<p>This is <em>hardly</em> unexpected in a system that stores sessions completely on
the client side. Still, it surprised me the first time I saw this in action,
so it might surprise others (or me in a few months since now).</p>

<p>If you’re wondering <em>how</em> I was biten by this particular set of teeth, it
suffices to say that <a href="https://curl.se/">curl</a> has <em>two</em> options for dealing with a so-called
<em>cookie jar</em>:</p>

<ul>
  <li>option <code class="language-plaintext highlighter-rouge">-c</code> is the read-write alternative, which complies with what the
server asks to do, and…</li>
  <li>option <code class="language-plaintext highlighter-rouge">-b</code> is the read-only alternative, which disregards requests to do
anything with the cookie, including deletion.</li>
</ul>

<p>So there you go, another way to blow your foot!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/22/mojolicious-removing-session/</id>
    <published>2023-04-22T06:00:00+02:00</published>
    <updated>2023-04-22T06:00:00+02:00</updated>
    <category term="mojolicious"/>
    <category term="web"/>
  </entry>
  <entry>
    <title> This week in PSC (104)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-104.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11080</id>
    <published>2023-04-21T21:09:01Z</published>
    <updated>2023-04-21T21:09:57Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>All three of us met, having skipped last week.</p>

<p>There wasn't much to talk about because code freeze ahead of 5.38 is in
effect, so there isn't much going on.</p>

<ul>
<li><p>We talked further about the upcoming deprecations scheduled for
5.38.0 (smartmatch, tick-as-package-separator), and concluded that
we remain committed to keeping them deprecated on the current
schedule.</p></li>
<li><p>Next week's meeting will be in person in the French city of Lyon.</p></li>
</ul>
]]>
        

    </content>
</entry>
  <entry>
    <author>
      <name>/u/pmz</name>
      <uri>https://www.reddit.com/user/pmz</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/pmz"&gt; /u/pmz &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://two-wrongs.com/why-perl"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12ub3ec/why_perl/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12ub3ec</id>
    <link href="https://www.reddit.com/r/perl/comments/12ub3ec/why_perl/"/>
    <updated>2023-04-21T17:06:33+00:00</updated>
    <published>2023-04-21T17:06:33+00:00</published>
    <title>Why Perl?</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76065371</id>
        <re:rank scheme="https://stackoverflow.com">-2</re:rank>
        <title type="text">Passing arguments from Perl to Windows Command Prompt</title>
            <category scheme="https://stackoverflow.com/tags" term="windows"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="command"/>
            <category scheme="https://stackoverflow.com/tags" term="prompt"/>
        <author>
            <name>drmathprog</name>
            <uri>https://stackoverflow.com/users/19618179</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76065371/passing-arguments-from-perl-to-windows-command-prompt"/>
        <published>2023-04-20T14:43:17Z</published>
        <updated>2023-04-21T17:00:21Z</updated>
        <summary type="html">
            &lt;p&gt;I'm trying to execute an .exe file in Windows Command Prompt from Perl.
I'm using something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;system($Execute_Program)  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$Execute_Program&lt;/code&gt; looks like: &lt;code&gt;&amp;quot;Executable Program C:Path\foo1  --output_file c:\Path\foo2&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &amp;quot;--output_file foo2&amp;quot; format is required by the Windows executable file.
I get &lt;code&gt;&amp;quot;Error parsing options: Option 'output_file' does not exist&amp;quot;&lt;/code&gt;, which I assume is coming from the Windows &amp;quot;shell-like&amp;quot; thing.&lt;/p&gt;
&lt;p&gt;The command line sent from Perl to the Windows Command Prompt is constructed in Perl, not passed to Perl.
Perl itself is called with no
How do I get around this?
Thanks in advance.&lt;/p&gt;
&lt;p&gt;Various versions of building a long string holding the entire Command Prompt and sending it via the System() command.&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <author>
      <name>/u/leonerduk</name>
      <uri>https://www.reddit.com/user/leonerduk</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/leonerduk"&gt; /u/leonerduk &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-104.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12u9bj6/this_week_in_psc_104_perl_steering_council/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12u9bj6</id>
    <link href="https://www.reddit.com/r/perl/comments/12u9bj6/this_week_in_psc_104_perl_steering_council/"/>
    <updated>2023-04-21T16:10:33+00:00</updated>
    <published>2023-04-21T16:10:33+00:00</published>
    <title>This week in PSC (104) | Perl Steering Council [blogs.perl.org]</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76055472</id>
        <re:rank scheme="https://stackoverflow.com">-1</re:rank>
        <title type="text">Issue with Perl Scripts / XML [closed]</title>
            <category scheme="https://stackoverflow.com/tags" term="xml"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>JeyJim</name>
            <uri>https://stackoverflow.com/users/1633936</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76055472/issue-with-perl-scripts-xml"/>
        <published>2023-04-19T14:03:49Z</published>
        <updated>2023-04-21T10:03:58Z</updated>
        <summary type="html">
            &lt;p&gt;I'm fairly new at Perl / XML and i got assign the task to migrate from one server to another some of the perl functionality that we use in our application, i was able to migrate part of it (create and excel file) but i can't get the part to actually parse an excel file done...&lt;br /&gt;
I keep getting this error no matter what modules i installed in my perl/site/lib folder..&lt;/p&gt;
&lt;p&gt;Software error:
not well-formed (invalid token) at line 1, column 3, byte 3 at C:/Strawberry/perl/site/lib/XML/Parser.pm line 187.
at C:\inetpub\wwwroot\cgi-bin\carestreamhealth\importParts_test2test.pl line 255.&lt;/p&gt;
&lt;p&gt;This is the file that i'm using to send the parameters to importsParts_test2test.pl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #!/usr/bin/perl --
    use lib qw(.);
    use CGI qw(:standard);
    $sessionId = param(&amp;quot;sessionId&amp;quot;);
    $transactionId = param('bsId');
    $countryCode = param('countryCode');
    $quoteNumber = param(&amp;quot;quoteNumber&amp;quot;);
    $bmiSite = lc(param(&amp;quot;bmiSite&amp;quot;));

    print &amp;quot;Content-type: text/html\n\n&amp;quot;;  

    print &amp;lt;&amp;lt;END_HTML;  
    &amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot; &amp;quot;DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;  
    &amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;en&amp;quot; lang=&amp;quot;en&amp;quot;&amp;gt;  
    &amp;lt;head&amp;gt;  
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;  
    &amp;lt;title&amp;gt;Import Configuration Sheet&amp;lt;/title&amp;gt;  
    &amp;lt;/head&amp;gt;  
    &amp;lt;body&amp;gt;  
    &amp;lt;FORM ACTION=&amp;quot;importParts_test2test.pl&amp;quot; METHOD=&amp;quot;POST&amp;quot; ENCTYPE=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
    Upload Configuration Sheet: &amp;lt;INPUT TYPE=&amp;quot;file&amp;quot; NAME=&amp;quot;configSheet&amp;quot;&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;INPUT TYPE=&amp;quot;submit&amp;quot; NAME=&amp;quot;Submit&amp;quot; VALUE=&amp;quot;Submit Form&amp;quot;&amp;gt;
    &amp;lt;input name=&amp;quot;bsId&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;$transactionId&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;input name=&amp;quot;sessionId&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;$sessionId&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;input name=&amp;quot;countryCode&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;$countryCode&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;input name=&amp;quot;quoteNumber&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;$quoteNumber&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;input name=&amp;quot;bmiSite&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;$bmiSite&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;/FORM&amp;gt;  
    &amp;lt;/body&amp;gt;  
    &amp;lt;/html&amp;gt;  
    END_HTML
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is the file that is picking up the parameters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     #!/usr/bin/perl --
     ################################################################################
     # Import Configuration Sheet
     #################################################################################

     use lib qw(.);
     use CGI qw(:standard);
     use CGI::Carp qw(fatalsToBrowser); # redirect error messages to browser output

     use utf8;
     use Encode;

     use SOAP::Lite;
     use XML::Twig;
     use Spreadsheet::ParseExcel;
     use Text::CSV_XS;


     $query = new CGI;  #initialize the test of whether the form ,has been submitted


     $sessionId = param(&amp;quot;sessionId&amp;quot;);
     $bsId = param('bsId');
     $countryCode = param(&amp;quot;countryCode&amp;quot;);
     $quoteNumber = param(&amp;quot;quoteNumber&amp;quot;);
     my $file = param('configSheet') or die(&amp;quot;Please select a file.&amp;quot;);
     my $bmiSite = lc(param(&amp;quot;bmiSite&amp;quot;));
     my $successInsert = 1;
     $emptyString = &amp;quot;&amp;quot;;

     # SOAP Server URL
     $PROXY = &amp;quot;http://$bmiSite.bigmachines.com/v1_0/receiver&amp;quot;;
     # Set the filename and send the content type
     print &amp;quot;Content-Type: text/html\n\n&amp;quot;;
     my $oExcel = new Spreadsheet::ParseExcel;
     my $oBook;
     my $oWkS;
     my $partsAdded;
     my $partsAddedDiscount;
     my $partsAddedGroup;
     my $partsAddedQty;
     my $prevGroup;
     my $partialFailed = 0;

     if($file =~ m/\.xls$/) {   
     $oBook = $oExcel-&amp;gt;Parse($file) or die(&amp;quot;unable to open file, stopped at&amp;quot;);
     $oWkS = $oBook-&amp;gt;{Worksheet}[0];
     }
     else {
     print &amp;quot;Unable to read file. Please upload an excel file .xls&amp;quot;;
     exit(0);
     }


      my $errorMessage = &amp;quot;&amp;quot;;

      if($sessionId eq &amp;quot;Error&amp;quot;) {
      $errorMessage = $errorMessage.&amp;quot;Error: No Session ID.\n&amp;quot;;
      }
      if ($quoteNumber eq &amp;quot;Error&amp;quot; or $quoteNumber eq &amp;quot;&amp;quot;){
      $errorMessage = $errorMessage.&amp;quot;Error: This action is only available on a valid quote.\n&amp;quot;;
      }

      if($errorMessage eq &amp;quot;&amp;quot;) {
        
       #    Grouping    
       #    Quantity    
       #    Catalog Number  
       #    Price   
       #    Discount(%)
       my $counter = 0;
       #print &amp;quot;maxrow:$oWkS-&amp;gt;{MaxRow}&amp;quot;;
       foreach $row (1 .. $oWkS-&amp;gt;{MaxRow}) {    

        $counter = $counter + 1;
    
        my $groupName = $oWkS-&amp;gt;{Cells}[$row][0]-&amp;gt;{Val};
    
        my $catNumberQty = $oWkS-&amp;gt;{Cells}[$row][2]-&amp;gt;{Val};
        my $catNumber = $oWkS-&amp;gt;{Cells}[$row][3]-&amp;gt;{Val};
        my $discount = $oWkS-&amp;gt;{Cells}[$row][6]-&amp;gt;{Val};
    
        if ($catNumberQty eq &amp;quot;&amp;quot;) { $catNumberQty = 1; }
        else { $catNumberQty = sprintf(&amp;quot;%d&amp;quot;,$catNumberQty); }
    
        if ($discount eq &amp;quot;&amp;quot;) { $discount = 0; }
        if ($prevGroup ne $groupName) {
        # call configure API
        if ($partsAdded ne &amp;quot;&amp;quot;) {                
            callConfigure($partsAdded,$partsAddedQty, $partsAddedDiscount,$partsAddedGroup);
        }
        $partsAdded = &amp;quot;&amp;quot;;
        $partsAddedDiscount = &amp;quot;&amp;quot;;
        $partsAddedGroup = &amp;quot;&amp;quot;;
        $partsAddedQty = &amp;quot;&amp;quot;;    
        
        if($catNumber ne &amp;quot;&amp;quot; and $catNumberQty ne &amp;quot;&amp;quot; and $groupName ne &amp;quot;&amp;quot;) { 
            $partsAdded = $catNumber;
            $partsAddedDiscount = $discount;
            $partsAddedGroup = $groupName;
            $partsAddedQty = $catNumberQty;
        }
    }           
    else {
        if($catNumber ne &amp;quot;&amp;quot; and $catNumberQty ne &amp;quot;&amp;quot; and $groupName ne &amp;quot;&amp;quot;) {     
            $partsAdded = $partsAdded.&amp;quot;;&amp;quot;.$catNumber;
            $partsAddedDiscount = $partsAddedDiscount.&amp;quot;;&amp;quot;.$discount;                
            $partsAddedQty = $partsAddedQty.&amp;quot;;&amp;quot;.$catNumberQty;
        }   
    }   
    if ($counter == $oWkS-&amp;gt;{MaxRow} and $partsAdded ne &amp;quot;&amp;quot;) {
        callConfigure($partsAdded,$partsAddedQty, $partsAddedDiscount,$partsAddedGroup);            
    }
    $prevGroup = $groupName;        
}

if ($successInsert) {   
    print &amp;quot; &amp;quot;;  
    updateTransaction(&amp;quot;importPartsForConfiguration&amp;quot;);
    updateTransaction(&amp;quot;_update_line_items&amp;quot;);        
    
    if (not $partialFailed) {
        print &amp;quot;Configuration Sheet imported successfully for transaction $quoteNumber.&amp;quot;;
    }

    my $refreshPage = qq~
        &amp;lt;script&amp;gt;
        if (opener &amp;amp;&amp;amp; !opener.closed) {
         opener.location = &amp;quot;https://$bmiSite.bigmachines.com/commerce/buyside/document.jsp?document_id=4127156&amp;amp;action_id=4127157&amp;amp;version_id=4575271&amp;amp;document_number=-1&amp;amp;id=$bsId&amp;amp;formaction=performAction&amp;quot;;          
                
         opener.focus();
        }
        &amp;lt;/script&amp;gt;
        ~;
    print $refreshPage;
}   

   } else {
    print &amp;quot;Please login in the site and upload the configuration sheet&amp;quot;;
   exit 0;
   }

     # Get Line Item Data
    sub updateTransaction {

     my $actionName = shift;
     my $s = SOAP::Lite
     -&amp;gt;ns(&amp;quot;urn:soap.bigmachines.com&amp;quot;,&amp;quot;bm&amp;quot;)
     -&amp;gt;proxy($PROXY)
   
     -&amp;gt;encoding('iso-8859-1')
     -&amp;gt;envprefix(&amp;quot;soapenv&amp;quot;)
     -&amp;gt;readable(1)
      -&amp;gt;on_action( sub { join '#', &amp;quot;urn:soap.bigmachines.com&amp;quot;,&amp;quot;updateTransaction&amp;quot; } ) 
      -&amp;gt;outputxml('true')
       ;

      #soapenv:Header content
      my $envHeader = qq~
      &amp;lt;bm:userInfo xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;
      &amp;lt;bm:sessionId&amp;gt;$sessionId&amp;lt;/bm:sessionId&amp;gt;
      &amp;lt;/bm:userInfo&amp;gt;
      &amp;lt;bm:category xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;Commerce&amp;lt;/bm:category&amp;gt;
      &amp;lt;bm:xsdInfo xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;
       &amp;lt;bm:schemaLocation&amp;gt;https://$bmiSite.bigmachines.com/bmfsweb/$bmiSite/schema/v1_0/commerce/transaction.xsd&amp;lt;/bm:schemaLocation&amp;gt;
      &amp;lt;/bm:xsdInfo&amp;gt;
       ~;


       my $envBody = qq~
       &amp;lt;bm:transaction&amp;gt;
       &amp;lt;bm:id&amp;gt;$bsId&amp;lt;/bm:id&amp;gt;
       &amp;lt;bm:process_var_name&amp;gt;transaction&amp;lt;/bm:process_var_name&amp;gt;
       &amp;lt;bm:data_xml&amp;gt;
       &amp;lt;bm:quote bm:bs_id=&amp;quot;$bsId&amp;quot; bm:data_type=&amp;quot;0&amp;quot;  bm:document_name=&amp;quot;Quote&amp;quot; bm:document_number=&amp;quot;1&amp;quot; bm:document_var_name=&amp;quot;quote&amp;quot;&amp;gt;
        &amp;lt;bm:status&amp;gt;Pending&amp;lt;/bm:status&amp;gt;
        &amp;lt;bm:updatedViaImportScript_quote&amp;gt;true&amp;lt;/bm:updatedViaImportScript_quote&amp;gt;
        &amp;lt;/bm:quote&amp;gt;
        &amp;lt;/bm:data_xml&amp;gt;
        &amp;lt;bm:action_data&amp;gt;
        &amp;lt;bm:action_var_name&amp;gt;$actionName&amp;lt;/bm:action_var_name&amp;gt;
        &amp;lt;/bm:action_data&amp;gt;
        &amp;lt;/bm:transaction&amp;gt;
         ~;
    

        my $resultXML = $s-&amp;gt;call(&amp;quot;bm:updateTransaction&amp;quot;=&amp;gt;(SOAP::Header-&amp;gt;type('xml' =&amp;gt; $envHeader)-&amp;gt;uri(&amp;quot;urn:soap.bigmachines.com&amp;quot;)-&amp;gt;prefix(&amp;quot;bm&amp;quot;) ,
                                                                SOAP::Data-&amp;gt;type('xml' =&amp;gt; $envBody)-&amp;gt;uri(&amp;quot;urn:soap.bigmachines.com&amp;quot;)-&amp;gt;prefix(&amp;quot;bm&amp;quot;) 
                                                                ));

         return &amp;quot;&amp;quot;;
         }

        sub callConfigure {
        my $partsAdded = shift;
        my $partsAddedQty = shift;
        my $partsAddedDiscount = shift;
        my $partToUploadGroup = shift;  

        $partToUploadGroup =~ s/\&amp;amp;/&amp;amp;amp;/g; 

        my $s = SOAP::Lite
        -&amp;gt;ns(&amp;quot;urn:soap.bigmachines.com&amp;quot;,&amp;quot;bm&amp;quot;)
        -&amp;gt;proxy($PROXY)
   
        -&amp;gt;encoding('iso-8859-1')
        -&amp;gt;envprefix(&amp;quot;soapenv&amp;quot;)
        -&amp;gt;readable(1)
        -&amp;gt;on_action( sub { join '#', &amp;quot;urn:soap.bigmachines.com&amp;quot;,&amp;quot;configure&amp;quot; } ) 
        -&amp;gt;outputxml('true')
         ;

        #soapenv:Header content
        my $envHeader = qq~
          &amp;lt;bm:userInfo xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;
          &amp;lt;bm:sessionId&amp;gt;$sessionId&amp;lt;/bm:sessionId&amp;gt;
          &amp;lt;/bm:userInfo&amp;gt;
          &amp;lt;bm:category xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;Configuration&amp;lt;/bm:category&amp;gt;
          &amp;lt;bm:xsdInfo xmlns:bm=&amp;quot;urn:soap.bigmachines.com&amp;quot; soapenv:actor=&amp;quot;http://schemas.xmlsoap.org/soap/actor/next&amp;quot; soapenv:mustUnderstand=&amp;quot;0&amp;quot;&amp;gt;
          &amp;lt;bm:schemaLocation&amp;gt;https://$bmiSite.bigmachines.com/bmfsweb/$bmiSite/schema/v1_0/config/HCIS/manualUpload_manualUpload.xsd&amp;lt;/bm:schemaLocation&amp;gt;
          &amp;lt;/bm:xsdInfo&amp;gt;
           ~;                   


my $envBody = qq~   
    &amp;lt;bm:item&amp;gt;
        &amp;lt;bm:segment&amp;gt;HCIS&amp;lt;/bm:segment&amp;gt;
        &amp;lt;bm:product_line&amp;gt;manualUpload&amp;lt;/bm:product_line&amp;gt;
        &amp;lt;bm:model&amp;gt;manualUpload&amp;lt;/bm:model&amp;gt;
    &amp;lt;/bm:item&amp;gt;
    &amp;lt;bm:responseIncludes&amp;gt;
        &amp;lt;bm:price&amp;gt;true&amp;lt;/bm:price&amp;gt;
        &amp;lt;bm:spare&amp;gt;true&amp;lt;/bm:spare&amp;gt;
        &amp;lt;bm:bom&amp;gt;true&amp;lt;/bm:bom&amp;gt;
        &amp;lt;bm:attributeLabel&amp;gt;false&amp;lt;/bm:attributeLabel&amp;gt;
        &amp;lt;bm:previousValue&amp;gt;false&amp;lt;/bm:previousValue&amp;gt;
        &amp;lt;bm:displayedValue&amp;gt;false&amp;lt;/bm:displayedValue&amp;gt;
        &amp;lt;bm:transaction&amp;gt;
            &amp;lt;bm:process_var_name&amp;gt;transaction&amp;lt;/bm:process_var_name&amp;gt;
            &amp;lt;bm:document_var_name&amp;gt;quote&amp;lt;/bm:document_var_name&amp;gt;
            &amp;lt;bm:id&amp;gt;$bsId&amp;lt;/bm:id&amp;gt;
        &amp;lt;/bm:transaction&amp;gt;   
    &amp;lt;/bm:responseIncludes&amp;gt;
    &amp;lt;bm:price_book_var_name&amp;gt;_default_price_book&amp;lt;/bm:price_book_var_name&amp;gt;        
    &amp;lt;bm:attributes&amp;gt;
        &amp;lt;bm:attribute bm:_variableName=&amp;quot;partsToUpload&amp;quot; bm:locked=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;bm:value&amp;gt;$partsAdded&amp;lt;/bm:value&amp;gt;
        &amp;lt;/bm:attribute&amp;gt;
        &amp;lt;bm:attribute bm:_variableName=&amp;quot;partsToUploadQty&amp;quot; bm:locked=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;bm:value&amp;gt;$partsAddedQty&amp;lt;/bm:value&amp;gt;
        &amp;lt;/bm:attribute&amp;gt;
        &amp;lt;bm:attribute bm:_variableName=&amp;quot;partsToUploadDiscount&amp;quot; bm:locked=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;bm:value&amp;gt;$partsAddedDiscount&amp;lt;/bm:value&amp;gt;
        &amp;lt;/bm:attribute&amp;gt; 
        &amp;lt;bm:attribute bm:_variableName=&amp;quot;partToUploadGroup&amp;quot; bm:locked=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;bm:value&amp;gt;$partToUploadGroup&amp;lt;/bm:value&amp;gt;
        &amp;lt;/bm:attribute&amp;gt;             
    &amp;lt;/bm:attributes&amp;gt;        
    ~;

    my $resultXML = $s-&amp;gt;call(&amp;quot;bm:configure&amp;quot;=&amp;gt;(SOAP::Header-&amp;gt;type('xml' =&amp;gt; $envHeader)-&amp;gt;uri(&amp;quot;urn:soap.bigmachines.com&amp;quot;)-&amp;gt;prefix(&amp;quot;bm&amp;quot;) ,
                                                                SOAP::Data-&amp;gt;type('xml' =&amp;gt; $envBody)-&amp;gt;uri(&amp;quot;urn:soap.bigmachines.com&amp;quot;)-&amp;gt;prefix(&amp;quot;bm&amp;quot;) 
                                                                ));

      my $twig = XML::Twig-&amp;gt;new();

      $twig-&amp;gt;parse($resultXML);
    
      $err = $twig-&amp;gt;get_xpath('//bm:fault/bm:exceptionMessage');



      if($err == 1) {
       my $failedParts = $twig-&amp;gt;get_xpath('//bm:fault/bm:exceptionMessage', 0)-&amp;gt;text;
       my @failedPartsArray = split(/\./, $failedParts);
    
       print &amp;quot;&amp;lt;p&amp;gt;Upload failed for group $partToUploadGroup. One or more items are no longer valid; please export a current product list and try again.&amp;lt;/p&amp;gt;&amp;quot;;
       foreach (@failedPartsArray){
        print $_;
        print &amp;quot;.&amp;lt;br/&amp;gt;&amp;quot;;
        }           
        $partialFailed = 1;         
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm at a lost on why this is not working, we have a current instance with the same scripts but running different perl (Active State) and it does work.. Problem with that is that we need to migrate to a windows server 2019 and we are not allow to install active state, we need to use strawberry perl 5.32.1&lt;/p&gt;
&lt;p&gt;any help will be appreciate it&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76060054</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Replace string in perl script [duplicate]</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Mạch Điện Tử</name>
            <uri>https://stackoverflow.com/users/9014220</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76060054/replace-string-in-perl-script"/>
        <published>2023-04-20T02:15:46Z</published>
        <updated>2023-04-21T10:01:53Z</updated>
        <summary type="html">
            &lt;p&gt;I have a code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $orgstr = &amp;quot;\$map_remain{3}{1}=\&amp;quot;\${prefix}_123456\&amp;quot;;&amp;quot;;
my $cell   = &amp;quot;\${prefix}_123456&amp;quot;;
$orgstr =~ s/$cell/abc/;
print &amp;quot;new str: $orgstr\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;i want to replace &lt;strong&gt;${prefix}_123456&lt;/strong&gt; to &lt;strong&gt;abc&lt;/strong&gt; but this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$orgstr =~ s/$cell/abc/;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;does not do , i dont know why, pleae anyone can help this ?&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>PWC213 - Shortest Route</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/21/pwc213-shortest-route/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">#213</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of bidirectional routes defining a network of nodes,
as well as source and destination node numbers.</p>

  <p>Write a script to find the route from source to destination that passes
through fewest nodes.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,6], [5,6,7])
       $source = 1
       $destination = 7

Output: (1,2,6,7)

Source (1) is part of route [1,2,6] so the journey looks like 1 -&gt; 2 -&gt; 6
then jump to route [5,6,7] and takes the route 6 -&gt; 7.
So the final route is (1,2,6,7)
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,3], [4,5,6])
       $source = 2
       $destination = 5

Output: -1
</code></pre></div>  </div>

  <p><strong>Example 3:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,3], [4,5,6], [3,8,9], [7,8])
       $source = 1
       $destination = 7
Output: (1,2,3,8,7)

Source (1) is part of route [1,2,3] so the journey looks like 1 -&gt; 2 -&gt; 3
then jump to route [3,8,9] and takes the route 3 -&gt; 8
then jump to route [7,8] and takes the route 8 -&gt; 7
So the final route is (1,2,3,8,7)
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>None, but maybe a curiosity –why are all those called <em>routes</em>?</p>

<h1 id="the-solution">The solution</h1>

<p>Doing a lot of recreational programming made me code ready-made versions of
popular algorithms.</p>

<p>For the <a href="https://www.perl.org/">Perl</a> solution, we’ll leverage the venerable A*. I know, there’s
no good candidate for the heuristic in this case, so it’s basically
Dijkstra’s algorithm.</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">use</span> <span class="nn">Data::</span><span class="nv">Dumper</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@routes</span> <span class="o">=</span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]);</span>
<span class="k">my</span> <span class="nv">$source</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$destination</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$route</span> <span class="o">=</span> <span class="nv">shortest_route</span><span class="p">(</span><span class="o">\</span><span class="nv">@routes</span><span class="p">,</span> <span class="nv">$source</span><span class="p">,</span> <span class="nv">$destination</span><span class="p">)</span> <span class="sr">//</span> <span class="o">[]</span><span class="p">;</span>
<span class="p">{</span> <span class="nb">local</span> <span class="vg">$"</span> <span class="o">=</span> <span class="p">'</span><span class="s1">,</span><span class="p">';</span> <span class="nv">say</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span> <span class="p">?</span> <span class="p">"</span><span class="s2">(</span><span class="si">$route</span><span class="s2">-&gt;@*)</span><span class="p">"</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">shortest_route</span> <span class="p">($routes, $src, $dst) {</span>
   <span class="k">my</span> <span class="nv">$graph</span> <span class="o">=</span> <span class="nv">routes_to_graph</span><span class="p">(</span><span class="nv">$routes</span><span class="p">);</span>
   <span class="k">return</span> <span class="nb">scalar</span> <span class="nv">astar</span><span class="p">(</span>
      <span class="s">start</span> <span class="o">=&gt;</span> <span class="nv">$src</span><span class="p">,</span>
      <span class="s">goal</span>  <span class="o">=&gt;</span> <span class="nv">$dst</span><span class="p">,</span>
      <span class="s">distance</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">},</span>
      <span class="s">successors</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($v) {</span> <span class="nb">keys</span> <span class="nv">$graph</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$v</span><span class="p">}</span><span class="o">-&gt;%*</span> <span class="p">},</span>
      <span class="s">identifier</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($v) {</span> <span class="nv">$v</span> <span class="p">},</span>
   <span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">routes_to_graph</span> <span class="p">($routes) {</span>
   <span class="k">my</span> <span class="nv">%adjacents_for</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$route</span> <span class="p">(</span><span class="nv">$routes</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$prev</span> <span class="o">=</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
         <span class="k">my</span> <span class="nv">$curr</span> <span class="o">=</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
         <span class="nv">$adjacents_for</span><span class="p">{</span><span class="nv">$prev</span><span class="p">}{</span><span class="nv">$curr</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$adjacents_for</span><span class="p">{</span><span class="nv">$curr</span><span class="p">}{</span><span class="nv">$prev</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
         <span class="nv">$prev</span> <span class="o">=</span> <span class="nv">$curr</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="o">\</span><span class="nv">%adjacents_for</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">astar</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">%args</span> <span class="o">=</span> <span class="p">(</span><span class="err">@</span><span class="nv">_</span> <span class="o">&amp;&amp;</span> <span class="nb">ref</span><span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="p">?</span> <span class="nv">%</span><span class="p">{</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span> <span class="p">:</span> <span class="nv">@_</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@reqs</span> <span class="o">=</span> <span class="sx">qw&lt; start goal distance successors &gt;</span><span class="p">;</span>
   <span class="nb">exists</span><span class="p">(</span><span class="nv">$args</span><span class="p">{</span><span class="vg">$_</span><span class="p">})</span> <span class="o">||</span> <span class="nb">die</span> <span class="p">"</span><span class="s2">missing parameter '</span><span class="si">$_</span><span class="s2">'</span><span class="p">"</span> <span class="k">for</span> <span class="nv">@reqs</span><span class="p">;</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$start</span><span class="p">,</span> <span class="nv">$goal</span><span class="p">,</span> <span class="nv">$dist</span><span class="p">,</span> <span class="nv">$succs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@args</span><span class="p">{</span><span class="nv">@reqs</span><span class="p">};</span>
   <span class="k">my</span> <span class="nv">$h</span>     <span class="o">=</span> <span class="nv">$args</span><span class="p">{</span><span class="nv">heuristic</span><span class="p">}</span>  <span class="o">||</span> <span class="nv">$dist</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$id_of</span> <span class="o">=</span> <span class="nv">$args</span><span class="p">{</span><span class="nv">identifier</span><span class="p">}</span> <span class="o">||</span> <span class="k">sub </span><span class="p">{</span> <span class="k">return</span> <span class="p">"</span><span class="si">$_</span><span class="s2">[0]</span><span class="p">"</span> <span class="p">};</span>

   <span class="k">my</span> <span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$gid</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$start</span><span class="p">),</span> <span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$goal</span><span class="p">));</span>
   <span class="k">my</span> <span class="nv">%node_for</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$id</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s">value</span> <span class="o">=&gt;</span> <span class="nv">$start</span><span class="p">,</span> <span class="s">g</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">});</span>
   <span class="k">my</span> <span class="nv">$queue</span> <span class="o">=</span> <span class="nb">bless</span> <span class="p">['</span><span class="s1">-</span><span class="p">',</span> <span class="p">{</span><span class="s">id</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">,</span> <span class="s">f</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">}],</span> <span class="nv">__PACKAGE__</span><span class="p">;</span>

   <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_is_empty</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$cid</span> <span class="o">=</span> <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_dequeue</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">id</span><span class="p">};</span>
      <span class="k">my</span> <span class="nv">$cx</span>  <span class="o">=</span> <span class="nv">$node_for</span><span class="p">{</span><span class="nv">$cid</span><span class="p">};</span>
      <span class="k">next</span> <span class="k">if</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">visited</span><span class="p">}</span><span class="o">++</span><span class="p">;</span>

      <span class="k">my</span> <span class="nv">$cv</span> <span class="o">=</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">value</span><span class="p">};</span>
      <span class="k">return</span> <span class="nv">__unroll</span><span class="p">(</span><span class="nv">$cx</span><span class="p">,</span> <span class="o">\</span><span class="nv">%node_for</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$cid</span> <span class="ow">eq</span> <span class="nv">$gid</span><span class="p">;</span>

      <span class="k">for</span> <span class="k">my</span> <span class="nv">$sv</span> <span class="p">(</span><span class="nv">$succs</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$cv</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$sid</span> <span class="o">=</span> <span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sv</span><span class="p">);</span>
         <span class="k">my</span> <span class="nv">$sx</span> <span class="o">=</span> <span class="nv">$node_for</span><span class="p">{</span><span class="nv">$sid</span><span class="p">}</span> <span class="o">||=</span> <span class="p">{</span><span class="s">value</span> <span class="o">=&gt;</span> <span class="nv">$sv</span><span class="p">};</span>
         <span class="k">next</span> <span class="k">if</span> <span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">visited</span><span class="p">};</span>
         <span class="k">my</span> <span class="nv">$g</span> <span class="o">=</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">}</span> <span class="o">+</span> <span class="nv">$dist</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$cv</span><span class="p">,</span> <span class="nv">$sv</span><span class="p">);</span>
         <span class="k">next</span> <span class="k">if</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">})</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$g</span> <span class="o">&gt;=</span> <span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">});</span>
         <span class="nv">@</span><span class="p">{</span><span class="nv">$sx</span><span class="p">}{</span><span class="sx">qw&lt; p g &gt;</span><span class="p">}</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$cid</span><span class="p">,</span> <span class="nv">$g</span><span class="p">);</span>    <span class="c1"># p: id of best "previous"</span>
         <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_enqueue</span><span class="p">({</span><span class="s">id</span> <span class="o">=&gt;</span> <span class="nv">$sid</span><span class="p">,</span> <span class="s">f</span> <span class="o">=&gt;</span> <span class="nv">$g</span> <span class="o">+</span> <span class="nv">$h</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sv</span><span class="p">,</span> <span class="nv">$goal</span><span class="p">)});</span>
      <span class="p">}</span> <span class="c1">## end for my $sv ($succs-&gt;($cv...))</span>
   <span class="p">}</span> <span class="c1">## end while (!$queue-&gt;_is_empty)</span>

   <span class="k">return</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub astar</span>

<span class="k">sub </span><span class="nf">_dequeue</span> <span class="p">{</span>                              <span class="c1"># includes "sink"</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$k</span><span class="p">,</span> <span class="nv">$self</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="nv">_</span><span class="p">);</span>
   <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$#$self</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="nb">splice</span> <span class="nv">@$self</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">pop</span> <span class="nv">@$self</span><span class="p">)</span> <span class="p">:</span> <span class="nb">pop</span> <span class="nv">@$self</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">((</span><span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="nv">$k</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nv">$#$self</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nv">$j</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$#$self</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span><span class="p">]{</span><span class="nv">f</span><span class="p">});</span>
      <span class="k">last</span> <span class="k">if</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span><span class="p">]{</span><span class="nv">f</span><span class="p">};</span>
      <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$k</span><span class="p">],</span> <span class="nv">$k</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$k</span><span class="p">,</span> <span class="nv">$j</span><span class="p">],</span> <span class="nv">$j</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">$r</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub _dequeue</span>

<span class="k">sub </span><span class="nf">_enqueue</span> <span class="p">{</span>                              <span class="c1"># includes "swim"</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
   <span class="nb">push</span> <span class="nv">@$self</span><span class="p">,</span> <span class="nv">$node</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$k</span> <span class="o">=</span> <span class="nv">$#$self</span><span class="p">;</span>
   <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$k</span> <span class="sr">/ 2, $k], $k) = (@{$self}[$k, $k /</span> <span class="mi">2</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="nv">$k</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
     <span class="k">while</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]{</span><span class="nv">f</span><span class="p">});</span>
<span class="p">}</span> <span class="c1">## end sub _enqueue</span>

<span class="k">sub </span><span class="nf">_is_empty</span> <span class="p">{</span> <span class="k">return</span> <span class="o">!</span><span class="nv">$#</span><span class="p">{</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">__unroll</span> <span class="p">{</span>    <span class="c1"># unroll the path from start to goal</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$node</span><span class="p">,</span> <span class="nv">$node_for</span><span class="p">,</span> <span class="nv">@path</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="vg">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]{</span><span class="nv">value</span><span class="p">});</span>
   <span class="k">while</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="k">my</span> <span class="nv">$p</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">p</span><span class="p">}))</span> <span class="p">{</span>
      <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$node_for</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$p</span><span class="p">};</span>
      <span class="nb">unshift</span> <span class="nv">@path</span><span class="p">,</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">value</span><span class="p">};</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nb">wantarray</span> <span class="p">?</span> <span class="nv">@path</span> <span class="p">:</span> <span class="o">\</span><span class="nv">@path</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub __unroll</span>
</code></pre></div></div>

<p>For the <a href="https://raku.org/">Raku</a> solution, then, we’re using Dijkstra’s algorithm:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;

sub MAIN {
   my @routes = [1,2,3], [4,5,6], [3,8,9], [7,8];
   my $source = 1;
   my $destination = 6;
   my $route = shortest-route(@routes, $source, $destination) // -1;
   say $route;
}

class Dijkstra { ... }
class PriorityQueue { ... }

sub shortest-route (@routes, $src, $dst) {
   my $graph = routes-to-graph(@routes);
   my $d = Dijkstra.new(
      distance =&gt; { $graph{$^a}{$^b} },
      successors =&gt; { $graph{$^a}.keys },
      start =&gt; $src,
      goals =&gt; [ $dst ],
   );
   return $d.path-to($dst);
}

sub routes-to-graph (@routes) {
   my %adjacents_for;
   for @routes -&gt; $route {
      my $prev = $route[0];
      for (1 ..^ @$route) -&gt; $i {
         my $curr = $route[$i];
         %adjacents_for{$prev}{$curr} = %adjacents_for{$curr}{$prev} = 1;
         $prev = $curr;
      }
   }
   return %adjacents_for;
}

class Dijkstra {
   has %!thread-to is built; # thread to a destination
   has $!start     is built;     # starting node
   has &amp;!id-of     is built;     # turn a node into an identifier

   method new (:&amp;distance!, :&amp;successors!, :$start!, :@goals,
         :$more-goals is copy, :&amp;id-of = -&gt; $n { $n.Str }) {
      my %is-goal = @goals.map: { &amp;id-of($_) =&gt; 1 };
      $more-goals //= (sub ($id) { %is-goal{$id}:delete; %is-goal.elems })
         if %is-goal.elems;
      my $id = &amp;id-of($start);
      my $queue = PriorityQueue.new(
         before =&gt; sub ($a, $b) { $a&lt;d&gt; &lt; $b&lt;d&gt; },
         id-of  =&gt; sub ($n) { $n&lt;id&gt; },
         items  =&gt; [{v =&gt; $start, id =&gt; $id, d =&gt; 0},],
      );
      my %thr-to = $id =&gt; {d =&gt; 0, p =&gt; Nil, pid =&gt; $id};
      while ! $queue.is-empty {
         my ($ug, $uid, $ud) = $queue.dequeue&lt;v id d&gt;;
         for &amp;successors($ug) -&gt; $vg {
            my ($vid, $alt) = &amp;id-of($vg), $ud + &amp;distance($ug, $vg);
            next if ($queue.contains-id($vid)
               ?? ($alt &gt;= (%thr-to{$vid}&lt;d&gt; //= $alt + 1))
               !! (%thr-to{$vid}:exists));
            $queue.enqueue({v =&gt; $vg, id =&gt; $vid, d =&gt; $alt});
            %thr-to{$vid} = {d =&gt; $alt, p =&gt; $ug, pid =&gt; $uid};
         }
      }
      self.bless(thread-to =&gt; %thr-to, :&amp;id-of, :$start);
   }

   method path-to ($v is copy) {
      my $vid = &amp;!id-of($v);
      my $thr = %!thread-to{$vid} or return;
      my @retval;
      while defined $v {
         @retval.unshift: $v;
         ($v, $vid) = $thr&lt;p pid&gt;;
         $thr = %!thread-to{$vid};
      }
      return @retval;
   }
   method distance-to ($v) { (%!thread-to{&amp;!id-of($v)} // {})&lt;d&gt; }
}

class PriorityQueue {
   has @!items;
   has %!pos-of;
   has %!item-of;
   has &amp;!before;
   has &amp;!id-of;

   submethod BUILD (
      :&amp;!before = {$^a &lt; $^b},
      :&amp;!id-of  = {~$^a},
      :@items
   ) {
      @!items = '-';
      self.enqueue($_) for @items;
   }

   method contains ($obj --&gt; Bool) { self.contains-id(&amp;!id-of($obj)) }
   method contains-id ($id --&gt; Bool) { %!item-of{$id}:exists }
   method dequeue { self!remove-kth(1) }
   method elems { @!items.end }
   # method enqueue ($obj) &lt;-- see below
   method is-empty { @!items.elems == 1 }
   method item-of ($id) { %!item-of{$id}:exists ?? %!item-of{$id} !! Any }
   method remove ($obj) { self.remove-id(&amp;!id-of($obj)) }
   method remove-id ($id) { self!remove-kth(%!pos-of{$id}) }
   method size  { @!items.end }
   method top { @!items.end ?? @!items[1] !! Any }
   method top-id { @!items.end ?? &amp;!id-of(@!items[1]) !! Any }

   method enqueue ($obj) {
      my $id = &amp;!id-of($obj);
      %!item-of{$id} = $obj; # keep track of this item
      @!items[my $k = %!pos-of{$id} ||= @!items.end + 1] = $obj;
      self!adjust($k);
      return $id;
   }
   method !adjust ($k is copy) { # assumption: $k &lt;= @!items.end
      $k = self!swap(($k / 2).Int, $k)
         while ($k &gt; 1) &amp;&amp; &amp;!before(@!items[$k], @!items[$k / 2]);
      while (my $j = $k * 2) &lt;= @!items.end {
         ++$j if ($j &lt; @!items.end) &amp;&amp; &amp;!before(@!items[$j+1], @!items[$j]);
         last if &amp;!before(@!items[$k], @!items[$j]); # parent is OK
         $k = self!swap($j, $k);
      }
      return self;
   }
   method !remove-kth (Int:D $k where 0 &lt; $k &lt;= @!items.end) {
      self!swap($k, @!items.end);
      my $r = @!items.pop;
      self!adjust($k) if $k &lt;= @!items.end; # no adjust for last element
      my $id = &amp;!id-of($r);
      %!item-of{$id}:delete;
      %!pos-of{$id}:delete;
      return $r;
   }
   method !swap ($i, $j) {
      my ($I, $J) = @!items[$i, $j] = @!items[$j, $i];
      %!pos-of{&amp;!id-of($I)} = $i;
      %!pos-of{&amp;!id-of($J)} = $j;
      return $i;
   }
}
</code></pre>

<p>Stay safe and minimal!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/21/pwc213-shortest-route/</id>
    <published>2023-04-21T06:00:00+02:00</published>
    <updated>2023-04-21T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/cf4572e56a4eb6fa6c1cc391275befc2a24ab419</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/cf4572e56a4eb6fa6c1cc391275befc2a24ab419"/>
    <title>
        Prepare Module-CoreList for 5.37.12
    </title>
    <updated>2023-04-20T19:45:25Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Prepare Module-CoreList for 5.37.12&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/f4cdcf043eee941b572ec97a9ca9b68d344191ff</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/f4cdcf043eee941b572ec97a9ca9b68d344191ff"/>
    <title>
        Bump version for 5.37.12
    </title>
    <updated>2023-04-20T19:35:47Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Bump version for 5.37.12&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/1bd18d8f778fe8e94561bc41c56fc0d28797c690</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/1bd18d8f778fe8e94561bc41c56fc0d28797c690"/>
    <title>
        New perldelta for 5.37.12
    </title>
    <updated>2023-04-20T19:25:16Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;New perldelta for 5.37.12&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/e2af16f323f89af597e7f474a7a04e10bede9a6e</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/e2af16f323f89af597e7f474a7a04e10bede9a6e"/>
    <title>
        Tick off release
    </title>
    <updated>2023-04-20T19:17:54Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Tick off release&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/ffc14e3c0fc4472aebc002d17aaeaf473286deb7</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/ffc14e3c0fc4472aebc002d17aaeaf473286deb7"/>
    <title>
        Add epigraph for 5.37.11
    </title>
    <updated>2023-04-20T19:14:24Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Add epigraph for 5.37.11&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>PWC213 - Fun Sort</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/20/pwc213-fun-sort/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">#213</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of positive integers.</p>

  <p>Write a script to sort the all even integers first then all odds in
ascending order.</p>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1,2)
Output: (2,1)
</code></pre></div>  </div>

  <p><strong>Example 3</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1)
Output: (1)
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>I guess the output should be a single list with the described order, so it
will be what I’ll assume.</p>

<h1 id="the-solution">The solution</h1>

<p>For the <a href="https://raku.org/">Raku</a> solution, I opted for splitting the input list first, then
sorting the two lists separately:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { say fun-sort(@args ?? @args !! [1 .. 6]) }

sub fun-sort (@input) {
   my (@even, @odd);
   for @input -&gt; $v {
      if $v %% 2 { @even.push: $v.Int }
      else       { @odd.push: $v.Int  }
   }
   return (@even.sort, @odd.sort).flat;
}
</code></pre>

<p>In the <a href="https://www.perl.org/">Perl</a> variant, though, I decided to sort first, then sweep through
the array from begin to end, moving odd elements to the end. At each
iteration, either we move one position ahead, or we move the last position
to consider one step behind, so we will anyway only consider each element
once. This approach preserves the ordering or odd items, so we’re done.</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="nv">say</span> <span class="p">'</span><span class="s1">(</span><span class="p">',</span> <span class="nb">join</span><span class="p">('</span><span class="s1">,</span><span class="p">',</span> <span class="nv">fun_sort</span><span class="p">(</span><span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="mi">6</span><span class="p">))),</span> <span class="p">'</span><span class="s1">)</span><span class="p">';</span>

<span class="k">sub </span><span class="nf">fun_sort</span> <span class="p">(@input) {</span>
   <span class="nv">@input</span> <span class="o">=</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nv">@input</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$stop</span> <span class="o">=</span> <span class="nv">$#input</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="nv">$start</span> <span class="o">&lt;=</span> <span class="nv">$stop</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="p">[</span><span class="nv">$start</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># move odds at the end</span>
         <span class="nb">push</span> <span class="nv">@input</span><span class="p">,</span> <span class="nb">splice</span> <span class="nv">@input</span><span class="p">,</span> <span class="nv">$start</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
         <span class="o">--</span><span class="nv">$stop</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="o">++</span><span class="nv">$start</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">@input</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Stay safe and have fun… sorting!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/20/pwc213-fun-sort/</id>
    <published>2023-04-20T06:00:00+02:00</published>
    <updated>2023-04-20T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Open Source Development Course for Perl developers - 2023.01</title>
    <link rel="alternate" href="https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>What happens in life is that we learn until the end. For me, it's time to learn how to use tools supporting Open Source projects. For years, I mostly worked alone. And mostly in closed projects. I've been developing an Open Source project for some time now. In order to properly cooperate with other programmers, I started an interesting course "Open Source Development Course for Perl developers - 2023.01" implemented as part of the code-maven.com project. </p>

</div>
    </content>
    <author>
      <name>Jarosław Danielski</name>
    </author>
    <id>https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9</id>
    <published>2023-04-19T19:46:56Z</published>
    <updated>2023-04-19T19:46:56Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Self-signed wildcard certificates</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/19/self-signed-wildcard-crt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>A <a href="https://gist.github.com/dmadisetti/16006751fd6e1526fa9c2f2e1660e8e3">useful gist</a> for generating a self-signed certificate with wildcards.</p>
</blockquote>

<p>Using self-signed certificates <em>can</em> be a viable solution, especially in
development environments. Sometimes… it can also be useful to have these
certificates supporting wildcards.</p>

<p>This <a href="https://gist.github.com/dmadisetti/16006751fd6e1526fa9c2f2e1660e8e3">useful gist</a> is very interesting for doing this.</p>

<p>It sort-of overlaps with <a href="/ETOOBUSY/2022/11/20/ekeca-standalone-certificate/">ekeca standalone certificate for a server</a>, only
producing one less artifact (i.e. the one-foff Root CA certificate), forcing
to install the generated certificate inside the pool of available ones in
the client machine. This might or might not be useful, so let’s just keep it
in the bag.</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/19/self-signed-wildcard-crt/</id>
    <published>2023-04-19T06:00:00+02:00</published>
    <updated>2023-04-19T06:00:00+02:00</updated>
    <category term="openssl"/>
    <category term="security"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 213: Fun Sort</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-213-fun-sort.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11078</id>
    <published>2023-04-18T00:02:02Z</published>
    <updated>2023-04-18T00:06:19Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 213 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-213/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 23, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fun Sort</h2>

<p><em>You are given a list of positive integers.</em></p>

<p><em>Write a script to sort the all even integers first then all odds in ascending order.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1,2)
Output: (2,1)
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1)
Output: (1)
</code></pre>

<h3>Fun Sort in Raku</h3>

<p>In theory, this task should ideally use a special comparison subroutine to be used with <code>sort</code> that leads to the desired sorting order. </p>

<p>It is, however, simpler to separate even and odd numbers into two lists (for example using <code>grep</code>), sort the lists and then reassemble the lists in the proper order.</p>

<pre><code>sub fun-sort (@in) {
    return (@in.grep({$_ %% 2}).sort, 
            @in.grep({$_ % 2}).sort).flat;
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say fun-sort @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<p>For the fun of it, or perhaps for the sake of trying to be pedantic <code>;-)</code> , let&#8217;s see how we can do the same using a special comparison subroutine. Note that <code>Less</code> and <code>More</code> (and also <code>Same</code>) are special values provided by the <a href="https://docs.raku.org/type/Order.html">Order</a> <code>enum</code> and are respectively equal to -1 and 1 (and 0). When the <code>fun-cmp</code> subroutine returns <code>Less</code> (i.e. -1), then the <code>sort</code> routine knows that the first parameter (<code>$a</code> in this case) should be ordered before the second one (<code>$b</code>). Conversely, the first parameter should be ordered after the second one if the comparison subroutine returns <code>More</code>. When both parameters are even, or both are odd, we just use the <code>&lt;=&gt;</code> numeric comparison operator (which also returns <code>Less</code>, <code>More</code>, or <code>Same</code> to the <code>sort</code> function).</p>

<pre><code>sub fun-cmp ($a, $b) { 
    if $a %% 2 {
        return $a &lt;=&gt; $b if $b %% 2;
        return Less;
    } else {
        return $a &lt;=&gt; $b unless $b %% 2;
        return More;
  }
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say sort &amp;fun-cmp, @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort2.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<h3>Fun Sort in Perl</h3>

<p>This is a port to Perl of the first Raku program above, splitting the input into two lists (even and odd numbers), sorting them separately and reassembling the sorted sub-lists at the end.</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    return (sort { $a &lt;=&gt; $b } grep { $_ % 2 == 0 } @_),
           (sort { $a &lt;=&gt; $b } grep { $_ % 2 != 0 } @_);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fun-sort.pl
2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Note that we could also first sort the input and then split the result into even and odd numbers and finally rearrange them:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    my @sorted = sort { $a &lt;=&gt; $b } @_;
    return (grep { $_ % 2 == 0 } @sorted), 
           (grep { $_ % 2 != 0 } @sorted);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the same output as before:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Finally, just as in Raku, we can also be pedantic in Perl and write a special comparison subroutine:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_cmp { 
    if ($a % 2 == 0) {
        return $a &lt;=&gt; $b unless $b % 2;
        return -1;
    } else {
        return $a &lt;=&gt; $b if $b % 2;
        return 1;
  }
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", sort { fun_cmp } @$test;
}
</code></pre>

<p>This program displays again the same output:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<h2>Task 2: Shortest Route</h2>

<p>This second task will be handled later, if I find the time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 30, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly #612 - Coming Soon!</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-612-coming-soon-14jp" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/612.html"&gt;Perl Weekly 612&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what's coming soon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well it's the subject of the talk to be presented by &lt;strong&gt;Curtis Poe&lt;/strong&gt; at &lt;a href="https://tprc2023.sched.com/event/1Lhr0/coming-soon"&gt;The Perl and Raku Conference 2023, TORONTO, Canada.&lt;/a&gt; I have been waiting for the event to come to &lt;strong&gt;Canada&lt;/strong&gt; as going to &lt;strong&gt;America&lt;/strong&gt; was never on card. Post &lt;strong&gt;9/11&lt;/strong&gt;, travelling to &lt;strong&gt;America&lt;/strong&gt; having &lt;strong&gt;Mohammad&lt;/strong&gt; as first name isn't good idea. Having seen the list of &lt;a href="https://tprc2023.sched.com/directory/speakers"&gt;speakers&lt;/a&gt;, I am sure it's going to be lots of fun. I really wanted to attend the event and meet the top guns. So what's stopping me? I haven't been keeping well in the recent months. I know my current employer, &lt;a href="https://www.oleeo.com"&gt;Oleeo&lt;/a&gt; has been regular sponsor of &lt;strong&gt;London Perl Workshop&lt;/strong&gt; and have sponsored selected few to attend various events in the past. Having said, I have to be mentally prepared before I take the plunge but I really don't want to miss the opportunity. I still remember the first time, I attended the talk by &lt;strong&gt;Curtis&lt;/strong&gt; was at &lt;strong&gt;German Perl Workshop 2018&lt;/strong&gt; and it was about &lt;a href="https://www.youtube.com/watch?v=4c8ixLgpxwo"&gt;Rescuing Legacy Code&lt;/a&gt;. After that I met him again at &lt;strong&gt;The Perl Conference 2019, Riga&lt;/strong&gt;. I think that was the last time I ever attended any conference in person. I am not sure if I still have time to reserve a place or even submit a short talk proposal at &lt;strong&gt;The Perl and Raku Conference 2023&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Talking about conference, I would also like to mention another big event in Europe, &lt;a href="https://perlkohacon.fi"&gt;The Perl and Koha Conference in Helsinki&lt;/a&gt;. They have extended time to accept talks. So if you are planning to attend then please do submit your proposal now. I am planning to visit India in the month of August otherwise I would have given a push.&lt;/p&gt;

&lt;p&gt;I am a big fan of writing skills of &lt;strong&gt;brian d foy&lt;/strong&gt;, &lt;strong&gt;Curtis Poe&lt;/strong&gt;, &lt;strong&gt;Damian Conway&lt;/strong&gt;, &lt;strong&gt;Dave Cross&lt;/strong&gt; and many more. It's not just about blog post but also about their books. &lt;strong&gt;Dave Cross&lt;/strong&gt; recently published &lt;a href="https://actions.davecross.co.uk/"&gt;GitHub Actions Essentials&lt;/a&gt;. I haven't read it yet but I am confident it is going to be worth spending time and money.&lt;/p&gt;

&lt;p&gt;Enjoy the rest of the newsletter and please do take extra care of your health.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Sponsors
&lt;/h2&gt;




&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perlkohacon.fi/News-for-Conference-YAPC-Europe-KohaCon-Helsinki-August-2023.html"&gt;The CfP has just been extenden:&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The Perl and Koha Conference 2023 is now accepting talks. Please do submit.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/04/datatable---weekly-travelling-in-cpan.html"&gt;Data::Table - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CPAN travellers having fun every week, thanks to Cheok-Yin Fung.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/10/rearviewmirror-on-kasai/"&gt;Rearviewmirror on Kasai!&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/11/some-hats-icons/"&gt;Some hats icons&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/12/data-collection-api/"&gt;Thinking on a data collection API&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/15/data-collection-update/"&gt;Data collection update&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/16/cloudflare-caching/"&gt;Cloudflare caching&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213"&gt;The Weekly Challenge - 213&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Fun Sort" and "Shortest Route". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-212"&gt;RECAP - The Weekly Challenge - 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Jumping Letters" and "Rearrange Groups" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/letters-groups.html"&gt;Letters and Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice use of multi keyword of Raku. Nice detailed discussion as always. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-212-spinning-letters-and-chopping-numbers-2kdc"&gt;Perl Weekly Challenge #212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice and easy solution with plenty of explanation. Good job, well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/13/pwc212-jumping-letters/"&gt;PWC212 - Jumping Letters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice explanation of each and every tiny details. Nothing is left for the readers. Spoon feeding.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/14/pwc212-rearrange-groups/"&gt;PWC212 - Rearrange Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Perl got preference this week. Nice one. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/04/perl_weekly_challenge_week_212.html"&gt;Perl Weekly Challenge: Week 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lots of Raku magic and interesting story about the second task. Keep us entertained every week.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-212/james-smith#readme"&gt;The Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Great show of Perl power. I just loved it. Thank you for sharing knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html"&gt;Perl Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I loved the way Raku magic is implemented in Perl. Very impressive. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/04/11/PerlWeeklyChallenge212.html"&gt;Jumping words and batching arrays&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Raku magic made the task so easy. Still getting it together is an art. Thank you for the contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/04/10/PWC212/"&gt;Perl Weekly Challenge 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another week another cool Perl one-liner. Keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/212"&gt;Lead to Gold and 1 2 3&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice and easy to understand solution without any gimmicks. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/04/robbie-hatleys-perl-solutions-to-weekly_11.html"&gt;The Weekly Challenge #212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nicely re-worded description made it so easy to follow. Thanks for sharing the knowledge.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/04/The_Weekly_Challenge_212__Rearrange_by_Jumps.html"&gt;Rearrange by Jumps&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lucky week, we got Perl and Rust solutions getting discussed in the blog post. Nice one, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/jumping-groups-2ld2"&gt;Jumping Groups&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Little more detailed analysis than regular. Still very concise, good job.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/04/10/2023-15-testing-patterns/"&gt;2023.15 Testing Patterns&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/wo1"&gt;Adventure Awaits! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game, and they're looking for Perl folks with passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/anv"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/2wr"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-612-coming-soon-14jp</id>
    <published>2023-04-17T06:09:40Z</published>
    <updated>2023-04-17T06:09:40Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>A Simple Guide to Extract GPS Information from GoPro Photos and Videos</title>
    <link rel="alternate" href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1727/1*zNI5ysYb953nYHc4HfHWaA.png" width="1727"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Many people have a consumer grade camera like GoPro, these cameras are nice and resistant to create action videos and shots in the water&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>John R. Ballesteros</name>
    </author>
    <id>https://medium.com/p/cf6edf6dc601</id>
    <published>2023-04-16T22:20:32Z</published>
    <updated>2023-04-16T22:24:38.457000Z</updated>
    <category term="gps"/>
    <category term="gis"/>
    <category term="gopro"/>
    <category term="geotag"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Jumping Groups</title>
    <link rel="alternate" href="https://dev.to/simongreennet/jumping-groups-2ld2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 212
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-212/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-212/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Jumping Letters
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a word having alphabetic characters only, and a list of positive integers of the same length</p>

<p>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</p>

<h3>
  
  
  My solution
</h3>

<p>This seems relatively straight forward. I have a list called <code>lower_alphabet</code> that contains the twenty six letters of the English alphabet, and <code>upper_alphabet</code> for the capital letters.</p>

<p>I then loop through each letter in the original word, choose the right alphabet to use, take the position of that letter (a = 0, z = 25), and the appropriate number from the input, and take the modulus of 26 from it to chose the new letter. For each step, I add to the <code>new_word</code> array.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py Perl 2 22 19 9
Raku

<span class="nv">$ </span>./ch-1.py Raku 24 4 7 17
Perl
</code></pre>

</div>



<h2>
  
  
  Task 2: Rearrange Groups
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of integers and group size greater than zero.</p>

<p>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print <code>-1</code>.</p>

<h3>
  
  
  My solution
</h3>

<p>Mea culpa from me. I misunderstood the task, and asked Mohammad for help for something that I really should have figured out myself. Sorry about that.</p>

<p>My solution needs a little of explanation. So here goes. Firstly I take the last number from the array and call it <code>n</code>. This is number of elements I need in each set. I then sort the remainder of the <code>array</code> list (array in Perl) numerically. While there are items in the list I do the following:</p>

<ol>
<li>Set the <code>expected</code> variable. This is from the first (lowest) value in the array, incrementing by 1 continuing for <code>n</code> times.</li>
<li>Set the <code>not_matched</code> set (hash in Perl) with the values from the <code>expected</code> array.</li>
<li>Loop through the values in <code>array</code>. The first occurrence of an <code>expected</code> integer will remove the value from the <code>not_matched</code> set. Anything else will add to a new list called <code>new_array</code>
</li>
<li>If there are any values in the <code>not_matched</code> set means that I haven't found a solution, so I print <code>-1</code> and exit.</li>
<li>Otherwise I add a nicely formatted output of the <code>expected</code> list, set <code>array</code> to be the values of <code>new_array</code>, and continue on.</li>
</ol>

<p>If I have exhausted the <code>array</code> list, then I know we have a solution, and print it to the user.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 2 3 5 1 2 7 6 3 3
<span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>5,6,7<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 2 3 2
<span class="nt">-1</span>

<span class="nv">$ </span>./ch-2.py 1 2 4 3 5 3 3
<span class="o">(</span>1,2,3<span class="o">)</span>, <span class="o">(</span>3,4,5<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 5 2 6 4 7 3
<span class="nt">-1</span>
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/jumping-groups-2ld2</id>
    <published>2023-04-16T13:01:54Z</published>
    <updated>2023-04-16T13:01:54Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7604825972187342661</id>
    <published>2023-04-15T23:51:00.000+02:00</published>
    <updated>2023-04-15T23:51:07.712+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxl) 5 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-3.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.02&lt;/strong&gt; on 2023-04-12, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.00 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-10, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.001008&lt;/strong&gt; on 2023-04-11, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.001007 was 1 month, 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DCONWAY'&gt;DCONWAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9705' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9705&lt;/strong&gt; on 2023-04-13, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9703 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.031' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.031&lt;/strong&gt; on 2023-04-12, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.030 was 3 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RJBS'&gt;RJBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7604825972187342661/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html" title="(cdxl) 5 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-329016586609546432</id>
    <published>2023-04-15T23:49:00.001+02:00</published>
    <updated>2023-04-15T23:49:18.704+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlii) metacpan weekly report - Web::PerlDistSite</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 86&lt;/p&gt;
&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/15 21:48:06 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dochazka::REST" target="_blank"&gt;App::Dochazka::REST&lt;/a&gt; - Dochazka REST server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CVS" target="_blank"&gt;Crypt::CVS&lt;/a&gt; - Substitution cipher for CVS passwords&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Role::CryptedPassword" target="_blank"&gt;MooX::Role::CryptedPassword&lt;/a&gt; - Password attribute from a encrypted file.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::WSDL" target="_blank"&gt;SOAP::WSDL&lt;/a&gt; - SOAP with WSDL support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mock::Net::Server::Mail" target="_blank"&gt;Test::Mock::Net::Server::Mail&lt;/a&gt; - mock SMTP server for use in tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Handle::FileWriteRotate" target="_blank"&gt;Tie::Handle::FileWriteRotate&lt;/a&gt; - Filehandle tie to write to autorotated file with File::Write::Rotate&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tuple::Munge" target="_blank"&gt;Tuple::Munge&lt;/a&gt; - manipulate Perl's tuple object representations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::REST::Apid" target="_blank"&gt;WWW::REST::Apid&lt;/a&gt; - Generic REST API Daemon&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::TensorFlow::Libtensorflow" target="_blank"&gt;AI::TensorFlow::Libtensorflow&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Antsy" target="_blank"&gt;Antsy&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Adenosine" target="_blank"&gt;App::Adenosine&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=46)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Netdisco" target="_blank"&gt;App::Netdisco&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Rad" target="_blank"&gt;App::Rad&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=155)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI::Driver::Redis" target="_blank"&gt;CHI::Driver::Redis&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=77)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CBC" target="_blank"&gt;Crypt::CBC&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::FileHandle" target="_blank"&gt;Crypt::FileHandle&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=49)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Generic" target="_blank"&gt;Daemon::Generic&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=133)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::MessagePack" target="_blank"&gt;Data::MessagePack&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dezi" target="_blank"&gt;Dezi&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::xxHash" target="_blank"&gt;Digest::xxHash&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ETL::Pipeline::3.10" target="_blank"&gt;ETL::Pipeline::3.10&lt;/a&gt; (+1=0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=45)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=61)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Write::Rotate" target="_blank"&gt;File::Write::Rotate&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Furl" target="_blank"&gt;Furl&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Parser::XS" target="_blank"&gt;HTTP::Parser::XS&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=107)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Compress" target="_blank"&gt;IO::Compress&lt;/a&gt; (+1=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::Socks" target="_blank"&gt;IO::Socket::Socks&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Ion" target="_blank"&gt;Ion&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Jifty" target="_blank"&gt;Jifty&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Util::MaybeXS" target="_blank"&gt;List::Util::MaybeXS&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::Protocol::AnyEvent::http" target="_blank"&gt;LWP::Protocol::AnyEvent::http&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=95)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MLPerl" target="_blank"&gt;MLPerl&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=482)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::CHI" target="_blank"&gt;Mojolicious::Plugin::CHI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=296)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=19)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=408)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=37)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=230)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=66)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=62)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Encoder" target="_blank"&gt;Sereal::Encoder&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::Lite" target="_blank"&gt;SOAP::Lite&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::ByExample" target="_blank"&gt;Sort::ByExample&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=113)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable" target="_blank"&gt;Storable&lt;/a&gt; (+1=52)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ShellUI" target="_blank"&gt;Term::ShellUI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twiggy" target="_blank"&gt;Twiggy&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite&lt;/a&gt; (+2=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Wurm" target="_blank"&gt;Wurm&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::Tiny" target="_blank"&gt;YAML::Tiny&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/329016586609546432/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html" title="(dlii) metacpan weekly report - Web::PerlDistSite"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 212: Jumping Letters</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11073</id>
    <published>2023-04-11T02:36:04Z</published>
    <updated>2023-04-14T00:12:52Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic, i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<h3>Jumping Letters in Raku</h3>

<p>The <a href="https://docs.raku.org/routine/ord.html">ord</a> routine translates a letter into its ASCII code (well, really, it&#8217;s a Unicode code point, but it is equivalent for our purpose here with values less than 128). The <a href="https://docs.raku.org/routine/chr.html">chr</a> performs the inverse operation. So we can simply convert each letter of the input, add the relevant jump value and convert the result back to a letter. One little complication is that we need to subtract 26 from the code point if it gets beyond the upper case and lower case letter ranges after having added the jump value. </p>

<pre><code>sub jump-letter ($letter, $val) {
    my $new_ascii = $letter.ord + $val;
    return ($new_ascii - 26).chr if $new_ascii &gt; 'z'.ord;
    return ($new_ascii - 26).chr if $letter le 'Z'
        and $new_ascii &gt; 'Z'.ord;
    return $new_ascii.chr;
}
my @test = "Perl", &lt;2 22 19 9&gt;;
for ("Perl", &lt;2 22 19 9&gt;), ("Raku", &lt;24 4 7 17&gt;) -&gt; @test {
    printf "%-10s =&gt; ", "@test[0]";
    for @test[0].comb Z @test[1].Array -&gt; $a {
        print jump-letter $a[0], $a[1];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./jumping-letters.raku
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h3>Jumping Letters in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the previous section if you need some explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub jump_letter  {
    my ($letter, $val) = @_;
    my $new_ascii = ord($letter) + $val;
    return chr($new_ascii - 26) if $new_ascii &gt; ord 'z';
    return chr($new_ascii - 26) if $letter le 'Z'
        and $new_ascii &gt; ord 'Z';
    return chr $new_ascii;
}

for my $test (["Perl", [&lt;2 22 19 9&gt;]], ["Raku", [&lt;24 4 7 17&gt;]]) {
    printf "%-10s =&gt; ", "$test-&gt;[0]";
    my @letters = split //, $test-&gt;[0];
    for my $i (0..$#letters) {
        print jump_letter $letters[$i], $test-&gt;[1][$i];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./jumping-letters.pl
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 2
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, I think that example 3 above is wrong. I believe that <code>size</code> should probably be 3 for the example to make sense.</p>

<p><em>Update:</em> this error in the task specifications has now been fixed.</p>

<p>Second, even though I started working on this second task (and think I probably have a working solution in Raku), I have no time today to complete this task, and probably won&#8217;t have time for several days. I still wanted to make my solutions to task 1 available today. I&#8217;ll hopefully write a new blog post or update this one later on.</p>

<p><em>Update:</em> I have now written a <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html">second blog post</a> dated April 13, 2023, providing solutions to this task 2 of the challenge.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 212: Rearrange Groups</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11076</id>
    <published>2023-04-14T00:02:28Z</published>
    <updated>2023-04-14T00:07:23Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<p>This task was the subject of <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html">this post</a> published on April 10, 2023.</p>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 3
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, there was initially an error in Example 3 above of the task specification (<code>$size</code> was 2 instead of 3, and that did not fit with the suggested output), but this has been fixed now.</p>

<p>Next, I first thought of sorting the input list of integers and, assuming for example a group size of 3, to try sequences of 3 successive integers in the list. But then I thought that it would be easier to store the input in a Raku <a href="https://docs.raku.org/type/Bag.html">Bag</a> and to remove items used to construct groups as we go. As this turned out to be quite simple, I decided, as you will see, to use the same method in Perl, simulating bags with hashes.</p>

<h3>Rearrange Groups in Raku</h3>

<p>First, note that <code>bags</code> are immutable in Raku. This means that you cannot change the inner items of the bag (or add or remove items), but this does not preclude you from <em>re-assigning</em> bags, as we do in the last statement of the <code>while</code> loop in the code below.</p>

<p>Using bags means that we can use operators with set theory semantics, such as the infix <code>(&lt;=)</code> or infix <code>⊆</code> <a href="https://docs.raku.org/language/operators.html#infix_(&lt;=">is a subset of or equal to</a>,<em>infix</em>⊆), or the infix <code>(-)</code>, infix <code>∖</code> <a href="https://docs.raku.org/language/operators.html#infix_(-">set difference</a>,<em>infix</em>%E2%88%96), operators.</p>

<p>In the <code>rearrange</code> subroutine, the <code>while</code> loop runs as long as there are some items left in the bag. The loop looks for the smallest item in the bag, construct a sequence (<code>$list</code>) of <code>$size</code> successive items. If <code>$list</code> is a subset of (or equal to) the bag, we store the <code>$list</code> into the <code>@result</code> and remove the items of the <code>$list</code> from the bag. If <code>$list</code> is not part of the bag, then we failed and return -1. If we get normally out of the loop (because the bag is now empty), then we succeeded to build equal groups of items and can return the <code>@result</code>.</p>

<pre><code>sub rearrange (@in, $size) {
    my @result;
    return -1 unless @in.elems %% $size; 
    my $bag  = @in.Bag;
    while ($bag) {
        my $min = $bag.min.key;
        my @list = $min..^($min + $size);
        return -1 unless @list ⊆ $bag;
        push @result, @list;
        $bag = $bag (-) @list;  # set difference
    }
    return @result;
}

for ((1,2,3,5,1,2,7,6,3), 3), ((1,2,3), 2), ((1,2,3), 3),
    ((1,2,4,3,5,3), 3), ((1,5,2,6,4,7), 3),
    ((1,5,2,6,4,7), 2) -&gt; @test {
    say @test;
    say rearrange(|@test), "\n"; 
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./rearrange-groups.raku
((1 2 3 5 1 2 7 6 3) 3)
[[1 2 3] [1 2 3] [5 6 7]]

((1 2 3) 2)
-1

((1 2 3) 3)
[[1 2 3]]

((1 2 4 3 5 3) 3)
[[1 2 3] [3 4 5]]

((1 5 2 6 4 7) 3)
-1

((1 5 2 6 4 7) 2)
[[1 2] [4 5] [6 7]]
</code></pre>

<h3>Rearrange Groups in Perl</h3>

<p>I initially thought of using a different technique for solving the task in Perl, since there is no built-in <code>bag</code> data structure in Perl, but then I found that it was quite easy to simulate a <code>bag</code> with a hash containing an histogram of the input values. So this program essentially works the same as the Raku implementation (read the previous section if you need explanations). The <code>for</code> loop checks that all the values of <code>$list</code> exist in the bag and remove these items from the bag.</p>

<pre><code>use warnings;
use feature "say";

sub rearrange {
    my @in = @{$_[0]};
    my $size = $_[1];
    my @result;
    return "-1" if @in % $size; 
    my %bag;
    $bag{$_}++ for @in;
    while (%bag) {
        my $min = (sort { $a &lt;=&gt; $b } keys %bag)[0];
        my @list = $min..($min + $size -1);
        for my $item (@list) {
            return "-1" unless exists $bag{$item};
            $bag{$item}--;
            delete $bag{$item} if $bag{$item} == 0;
        }
        push @result, \@list;
    }
    return @result;
}

for my $test( [[1,2,3,5,1,2,7,6,3], 3],
              [[1,2,3], 2], [[1,2,3], 3],
              [[1,2,4,3,5,3], 3],
              [[1,5,2,6,4,7], 3],
              [[1,5,2,6,4,7], 2] )
              {
    say "(@{$test-&gt;[0]})", " ", "($test-&gt;[1])";
    my @result = rearrange(@$test);
    if ($result[0] == "-1") {
        say -1;
    } else {
        say map { "[@$_] " } @result;
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./rearrange-groups.pl
(1 2 3 5 1 2 7 6 3) (3)
[1 2 3] [1 2 3] [5 6 7]

(1 2 3) (2)
-1

(1 2 3) (3)
[1 2 3]

(1 2 4 3 5 3) (3)
[1 2 3] [3 4 5]

(1 5 2 6 4 7) (3)
-1

(1 5 2 6 4 7) (2)
[1 2] [4 5] [6 7]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8の文字列を1行ずつ読み取り、各文字をU+(16進数)の形式などに変換して、1行ずつ出力する。</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>コマンドの出力結果を、Gitのレポジトリの中のファイルに保管する。</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を行列状に示す。</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>指定ディレクトリのファイル全て(直下のみでない)に対して、最後に変更された順で網羅的に表示する。</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>– new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for … <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Regex in python vs in perl</title>
    <link rel="alternate" href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/2600/0*vZMKz-sHEUjwbgNS" width="3024"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Regular expressions (regex) are a powerful tool for manipulating and searching text data. A regular expression is a sequence of characters&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Maxwell Langford</name>
    </author>
    <id>https://medium.com/p/693f5a98ba90</id>
    <published>2023-03-29T17:06:53Z</published>
    <updated>2023-03-29T17:06:53.762000Z</updated>
    <category term="perl"/>
    <category term="regex-in-python"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Hack The Box Nunchucks Writeup</title>
    <link rel="alternate" href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1942/0*PEFYPGl9fZPn2zZb.png" width="1942"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Nunchucks is an easy Linux box created by TheCyberGeek on Hack The Box and I intend to hack it. Hello world, welcome to Haxez in this post&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Haxez - Hacking Made Easy</name>
    </author>
    <id>https://medium.com/p/f6eef36a8363</id>
    <published>2023-03-26T13:01:25Z</published>
    <updated>2023-03-26T15:49:30.057000Z</updated>
    <category term="nunchuck"/>
    <category term="perl"/>
    <category term="ssti"/>
    <category term="hacking"/>
    <category term="hack-the-box-writeup"/>
  </entry>
</feed>
