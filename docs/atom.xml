<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-05-31T13:02:30Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Future is Now! Perl Role in Malaysia</title>
    <link rel="alternate" href="https://job.perl.careers/ydw" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an online financial services company, still rapidly expanding after 20 years of impressive growth. With a truly international presence, they’re well known globally in their niche. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/ydw</id>
    <published>2021-05-31T10:00:46Z</published>
    <updated>2021-05-31T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Let’s do an experiment! Perl role in Canberra, Australia</title>
    <link rel="alternate" href="https://job.perl.careers/h6s" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Attention, Perl programmers. We’re looking for those among you who loved their childhood chemistry sets and could spend hours studying their ant farms. Science buffs and genetics junkies, our client wants to hear from you. They deliver cost-efficient genotyping technology that promotes the development of better, stronger crops adapted to suit their environment.</div>
    </content>
    <id>https://job.perl.careers/h6s</id>
    <published>2021-05-31T10:00:45Z</published>
    <updated>2021-05-31T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Vienna Does it Best. Perl Developer role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/91m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">After almost twenty years in business, our client has proven their success in the Austrian and German markets and are now expanding into the UK and Poland. With a corporate belief system that promotes transparency, quality content, and a user-friendly experience, it’s no wonder they’re breaking into new markets and have an opening for a new Perl programmer.</div>
    </content>
    <id>https://job.perl.careers/91m</id>
    <published>2021-05-31T10:00:44Z</published>
    <updated>2021-05-31T10:00:44Z</updated>
  </entry>
  <entry>
    <title>A Role that Makes Dollars (and Cents). Perl Developer Role in London</title>
    <link rel="alternate" href="https://job.perl.careers/52q" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you are a senior Perl/JS programmer with a passion for finance and business, this could be the role you’ve been waiting for. Our client is looking for an individual who understands Go programming languages, is experienced with Python and Django, and knows the ins and outs of databases like MySQL, and NoSQL databases like Google BigTable.</div>
    </content>
    <id>https://job.perl.careers/52q</id>
    <published>2021-05-31T10:00:43Z</published>
    <updated>2021-05-31T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Doers Wanted. Perl Developer role in Pittsburgh, PA</title>
    <link rel="alternate" href="https://job.perl.careers/wbh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you’re a Perl software engineer who enjoys distilling broadly defined objectives into actionable tasks, this might just be your next career move. This client is looking for someone who will design and build the tools their customers need. You’ll coordinate implementation, testing, deployment, and maintenance across multiple systems.</div>
    </content>
    <id>https://job.perl.careers/wbh</id>
    <published>2021-05-31T10:00:42Z</published>
    <updated>2021-05-31T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, July 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-05-31T10:00:41Z</published>
    <updated>2021-05-31T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, June 30, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-05-31T10:00:40Z</published>
    <updated>2021-05-31T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, June 9, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-05-31T10:00:39Z</published>
    <updated>2021-05-31T10:00:39Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-05-31T10:00:38Z</published>
    <updated>2021-05-31T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, June 3, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-05-31T10:00:37Z</published>
    <updated>2021-05-31T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Washington, DC Perl (DCPM)</title>
    <link rel="alternate" href="http://dc.pm.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Tuesday, 1st June, 2021; 07:00 PM Eastern Time (US and Canada)</div>
    </content>
    <id>http://dc.pm.org/</id>
    <published>2021-05-31T10:00:36Z</published>
    <updated>2021-05-31T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Working on PyDigger with Upasana Shukla</title>
    <link rel="alternate" href="https://code-maven.com/pydigger-2" type="text/html"/>
    <id>https://code-maven.com/pydigger-2</id>
    <published>2021-05-31T10:00:35Z</published>
    <updated>2021-05-31T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Developing an application for organising online self knowledge workshops - part 5</title>
    <link rel="alternate" href="https://code-maven.com/online-self-knowledge-workshop-5" type="text/html"/>
    <id>https://code-maven.com/online-self-knowledge-workshop-5</id>
    <published>2021-05-31T10:00:34Z</published>
    <updated>2021-05-31T10:00:34Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/05/cccxliii-10-great-cpan-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdlxix-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdxcii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-05-31T10:00:33Z</published>
    <updated>2021-05-31T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2021.21 Chattering</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/05/24/2021-21-chattering/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/05/24/2021-21-chattering/</id>
    <published>2021-05-31T10:00:32Z</published>
    <updated>2021-05-31T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Live Video - Higher Integer Set Bits by Mohammad Anwar</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=wpxOxswh9YE" type="text/html"/>
    <id>https://www.youtube.com/watch?v=wpxOxswh9YE</id>
    <published>2021-05-31T10:00:31Z</published>
    <updated>2021-05-31T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Live Video - Next Palindrome Number by Mohammad Anwar</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=DrXU7nPOk8s" type="text/html"/>
    <id>https://www.youtube.com/watch?v=DrXU7nPOk8s</id>
    <published>2021-05-31T10:00:30Z</published>
    <updated>2021-05-31T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 7</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-7" type="text/html"/>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-7</id>
    <published>2021-05-31T10:00:29Z</published>
    <updated>2021-05-31T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 114</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-114-51h1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon's use of brute force method made it compact and concise. Cool attempt.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-114-51h1</id>
    <published>2021-05-31T10:00:28Z</published>
    <updated>2021-05-31T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114: Going Higher</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_114__Going_Higher.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's use of substr() to generate palindrome is the surprise element for me. Thanks for sharing the hack.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_114__Going_Higher.html</id>
    <published>2021-05-31T10:00:27Z</published>
    <updated>2021-05-31T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114: palindrome and 1's number</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/05/24/PerlWeeklyChallenge114.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As always, you can find interesting Raku magic in Luca's blog post. Fun to read the blog.</div>
    </content>
    <id>https://fluca1978.github.io/2021/05/24/PerlWeeklyChallenge114.html</id>
    <published>2021-05-31T10:00:26Z</published>
    <updated>2021-05-31T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/05/24/PWC114/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the hack used for the 'Higher Integer Set Bits' task. Thanks for sharing the knowledge.</div>
    </content>
    <id>https://wlmb.github.io/2021/05/24/PWC114/</id>
    <published>2021-05-31T10:00:25Z</published>
    <updated>2021-05-31T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114: Next Palindrome Number and Higher Integer Set Bits</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-114-next-palindrome-number-and-higher-integer-set-bits.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">For me the USP of Laurent's blog post is to see the comparison of his Perl and Raku implementations. You don't want to miss the discussion.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-114-next-palindrome-number-and-higher-integer-set-bits.html</id>
    <published>2021-05-31T10:00:24Z</published>
    <updated>2021-05-31T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #114</title>
    <link rel="alternate" href="https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-114/james-smith" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James's focus on performance is the highlight. Plenty to learn from his work. Keep up the great work.</div>
    </content>
    <id>https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-114/james-smith</id>
    <published>2021-05-31T10:00:23Z</published>
    <updated>2021-05-31T10:00:23Z</updated>
  </entry>
  <entry>
    <title>PWC114 - Higher Integer Set Bits</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/27/pwc114-higher-integer-set-bits/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio used brute force method to get the desired result. Small and compact solution.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/27/pwc114-higher-integer-set-bits/</id>
    <published>2021-05-31T10:00:22Z</published>
    <updated>2021-05-31T10:00:22Z</updated>
  </entry>
  <entry>
    <title>PWC114 - Next Palindrome Number</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/26/pwc114-next-palindrome-number/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">When I see no questions being asked in the blog post, it means a lot. It reminds me of my early days with Raku.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/26/pwc114-next-palindrome-number/</id>
    <published>2021-05-31T10:00:21Z</published>
    <updated>2021-05-31T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Escape From The Infinite Loop: Perl Weekly Challenge #114</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/05/24/escape-from-the-infinite-loop-perl-weekly-challenge-114.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave kept the discussion to the point and shared the secret. Must Read.</div>
    </content>
    <id>https://jacoby.github.io/2021/05/24/escape-from-the-infinite-loop-perl-weekly-challenge-114.html</id>
    <published>2021-05-31T10:00:20Z</published>
    <updated>2021-05-31T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Your New Pal Knows the Weight of Ham</title>
    <link rel="alternate" href="https://colincrain.com/2021/05/30/your-new-pal-knows-the-weight-of-ham/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin's choice of blog title is really cool. I love reading it for its literary value. Keep it up.</div>
    </content>
    <id>https://colincrain.com/2021/05/30/your-new-pal-knows-the-weight-of-ham/</id>
    <published>2021-05-31T10:00:19Z</published>
    <updated>2021-05-31T10:00:19Z</updated>
  </entry>
  <entry>
    <title>The Perl Weekly Challenges, #114</title>
    <link rel="alternate" href="http://functional-perl.org/docs/blog/perl_weekly_challenges_114.xhtml" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Find out more about Functional Perl in this blog post. Thanks for sharing.</div>
    </content>
    <id>http://functional-perl.org/docs/blog/perl_weekly_challenges_114.xhtml</id>
    <published>2021-05-31T10:00:18Z</published>
    <updated>2021-05-31T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Palindromic Set with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/palindromic-set.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A complete application in Perl and Raku with detailed discussion, as always. Thanks for sharing.</div>
    </content>
    <id>https://raku-musings.com/palindromic-set.html</id>
    <published>2021-05-31T10:00:17Z</published>
    <updated>2021-05-31T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 114</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/30" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thank you Adam for introducing redo; I had never heard of it before.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/30</id>
    <published>2021-05-31T10:00:16Z</published>
    <updated>2021-05-31T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114: Higher Integer Set Bits</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-114-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail is unbeatable when it comes to regex. Please check it out yourself to see what I am talking about.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-114-2.html</id>
    <published>2021-05-31T10:00:15Z</published>
    <updated>2021-05-31T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114: Next Palindrome Number</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-114-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail once again shared the mathematical aspect of palindromes. It makes me feel I know nothing. Thanks for sharing.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-114-1.html</id>
    <published>2021-05-31T10:00:14Z</published>
    <updated>2021-05-31T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 114</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-114/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron's point by point explanation of Raku feature is the highpoint of his blog post. Keep it up.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-114/</id>
    <published>2021-05-31T10:00:13Z</published>
    <updated>2021-05-31T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Meet The Champion - Tyler Wardhaugh</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/meet-the-champion-2021-03/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please check out the interview with Tyler Wardhaugh, Champion of the month for March.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/meet-the-champion-2021-03/</id>
    <published>2021-05-31T10:00:12Z</published>
    <updated>2021-05-31T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 112</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-112" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-112</id>
    <published>2021-05-31T10:00:11Z</published>
    <updated>2021-05-31T10:00:11Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 114</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-114" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Next Palindrome Number" and "Higher Integer Set Bits" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-114</id>
    <published>2021-05-31T10:00:10Z</published>
    <updated>2021-05-31T10:00:10Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 115</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "String Chain" and "Largest Multiple". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-115</id>
    <published>2021-05-31T10:00:09Z</published>
    <updated>2021-05-31T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Maintaining Perl 5 (Tony Cook): April 2021 Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tony-2021-04" type="text/html"/>
    <id>https://news.perlfoundation.org/post/tony-2021-04</id>
    <published>2021-05-31T10:00:08Z</published>
    <updated>2021-05-31T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Term::Twiddle</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/25/term-twiddle/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio continued with his daily blog series and introduced Term::Twiddle with a nice short video.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/25/term-twiddle/</id>
    <published>2021-05-31T10:00:07Z</published>
    <updated>2021-05-31T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Date handling modularized</title>
    <link rel="alternate" href="https://dev.to/vkroll/date-handling-modularized-10h9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Volker continued his Perl series for beginners and presented Date handling.</div>
    </content>
    <id>https://dev.to/vkroll/date-handling-modularized-10h9</id>
    <published>2021-05-31T10:00:06Z</published>
    <updated>2021-05-31T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Perl Lists - a Partial Taxonomy</title>
    <link rel="alternate" href="https://dev.to/matthewpersico/perl-lists-a-partial-taxonomy-g8p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Matthew consolidated the features of List::Util and related modules.</div>
    </content>
    <id>https://dev.to/matthewpersico/perl-lists-a-partial-taxonomy-g8p</id>
    <published>2021-05-31T10:00:05Z</published>
    <updated>2021-05-31T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Perl can do that now!</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark's latest blog post takes us on the release journey of Perl.</div>
    </content>
    <id>https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/</id>
    <published>2021-05-31T10:00:04Z</published>
    <updated>2021-05-31T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Perl’s SvPV Menace</title>
    <link rel="alternate" href="https://dev.to/fgasper/perl-s-svpv-menace-5515" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl C API is meant for bravehearts only. Check it yourself if you are keen to know more about it.</div>
    </content>
    <id>https://dev.to/fgasper/perl-s-svpv-menace-5515</id>
    <published>2021-05-31T10:00:03Z</published>
    <updated>2021-05-31T10:00:03Z</updated>
  </entry>
  <entry>
    <title>berrybrew version 1.34 released!</title>
    <link rel="alternate" href="http://blogs.perl.org/users/steve_bertrand/2021/05/berrybrew-version-134-released.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Steve presented the change history for the latest release of berrybrew.</div>
    </content>
    <id>http://blogs.perl.org/users/steve_bertrand/2021/05/berrybrew-version-134-released.html</id>
    <published>2021-05-31T10:00:02Z</published>
    <updated>2021-05-31T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Perl::Critic::Policy::RegularExpressions::RequireDefault</title>
    <link rel="alternate" href="https://dev.to/jonasbn/first-public-release-of-perl-critic-policy-prohibithighprecedentlogicaloperatorerrorhandling-1p50" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jonas shared his recent patch to a PerlCritic policy. You won't want to miss it if you are a Perl::Critic fan.</div>
    </content>
    <id>https://dev.to/jonasbn/first-public-release-of-perl-critic-policy-prohibithighprecedentlogicaloperatorerrorhandling-1p50</id>
    <published>2021-05-31T10:00:01Z</published>
    <updated>2021-05-31T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#514 - Is OOP bad?</title>
    <link rel="alternate" href="http://perlweekly.com/archive/514.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>First things first, I am a big fan of OOP in general. However I do agree OOP is not always the best choice. Since Perl promotes the idea of TIMTOWTDI (There's more than one way to do it), we have plenty of options to pick from. I have come across many Perl haters in the past complaining about lack of proper OOP support in Perl. With the introduction of postmodern object system for Perl, <a href="https://metacpan.org/pod/Moose">Moose</a>, we finally had structured OOP support. I must confess I prefer <a href="https://metacpan.org/pod/Moo">Moo</a> which is known as minimalist object orientation.</p>
<p>Fast forward to now, Curtis Poe joined hands with other Perl masters and came up with <a href="https://github.com/Ovid/Cor/wiki/Corinna-Overview">Corinna</a>. It is proposed to be part of core Perl soon. I can't wait for that to happen. I sincerely applaud the efforts of each and every contributor of Corinna. I beleive it will be the best addition to the Perl core in recent times. I am confident it will be the highlight of the future Perl7.</p>
<p>In the last week <a href="https://perlweekly.com/archive/513.html">edition</a> of the weekly newsletter, Gabor reminded me that I forgot to celebrate the special <a href="https://perlweekly.com/archive/512.html">512th edition</a>. What a shame, I missed the opportunity. I blame my busy routine for the missed opportunity. I am looking forward to my personal 100th edition of the weekly newsletter. This is the 79th edition for the record, not far off from the target.</p>
<p>Happy to see, the COVID-19 situation in India is getting better. I pray to ALLAH s.w.t for the complete protection from COVID-19. Please look after yourself and your loved ones.</p>
<p>To all our readers in the UK, enjoy your bank holiday with the weekly newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/514.html</id>
    <published>2021-05-31T10:00:00Z</published>
    <updated>2021-05-31T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 7</title>
  <summary type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-7"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-7</id>
  <content type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 114: Next Palindrome Number and Higher Integer Set Bits</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-114-next-palindrome-number-and-higher-integer-set-bits.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10240</id>
    <published>2021-05-27T02:37:09Z</published>
    <updated>2021-05-31T02:47:31Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 114 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 30, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Next Palindrome Number</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to find out the next Palindrome Number higher than the given integer <code>$N</code>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 1234
Output: 1331

Input: $N = 999
Output: 1001
</code></pre>

<h3>Next Palindrome Number in Raku</h3>

<p>In theory, we could build directly the next palindrome number from the current one. But there are different situations to cover, depending for example on whether the input number has an odd or even number of digits. Also, there are various edge cases. It is not so easy to be sure you&#8217;ve covered all possible cases. The alternative is to check each number in ascending order until you get a match. This brute force approach is much easier and in fact quite efficient for small and moderately large input numbers, as it is in most cases quite fast to find a palindrome larger than a given input number. We&#8217;ll use this second approach. We assume here that the input is a correct integer.</p>

<pre><code>use v6;

my $input = @*ARGS[0] // 1234;
for $input .. Inf -&gt; $candidate {
    next unless $candidate eq $candidate.flip;
    say $candidate;
    last;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./palin.raku
1331
$ raku ./palin.raku 3445
3553
</code></pre>

<h3>Next Palindrome Number in Perl</h3>

<p>We use the same algorithm, except that we use a <code>while</code> loop instead of a <code>for</code> because it is not possible to define an infinite range in Perl.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $num = shift // 1234;
$num =~ s/^0+//; # remove leading 0s just in case
while (++ $num) {
    say $num and last if $num eq reverse $num;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl palin.pl
1331

$ perl palin.pl 3554
3663

$ perl palin.pl 075
77
</code></pre>

<h3>Next Palindrome in Scala</h3>

<p>Scala doesn&#8217;t have a <code>last</code> or <code>break</code> statement (there is a <code>break</code> method, but it is not very practical). So we will use a <code>while</code> loop with an explicit value incrementation.</p>

<pre><code>object palindrome extends App {
  var num = 1234
  var found = 0
  while (found == 0) {
    if (num.toString == num.toString.reverse) {
      println(num)
      found = 1
    }
    num += 1
  }
}
</code></pre>

<p>This program duly prints 1331.</p>

<h3>Next Palindrome in Python</h3>

<pre><code>import sys

num = int(sys.argv[1])
while (1):
    if str(num) == str(num)[::-1]:
        print(num)
        break
    num += 1
</code></pre>

<p>Output:</p>

<pre><code>$ python3 palin.py 1234
1331
</code></pre>

<h2>Task 2: Higher Integer Set Bits</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to find the next higher integer having the same number of 1 bits in binary representation as $N.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 3
Output: 5

Binary representation of $N is 011. There are two 1 bits. So the next higher integer is 5 having the same the number of 1 bits i.e. 101.

Input: $N = 12
Output: 17

Binary representation of $N is 1100. There are two 1 bits. 
So the next higher integer is 17 having the same number of 1 bits i.e. 10001.
</code></pre>

<p>It is easy to show that we can always find one such number with the same number of bits set to 1 for any strictly positive integer (you can just add a 1 at the front of the binary representation of the number and set any other 1 bit to 0, but that of course does not necessarily yields the next higher integer).</p>

<h3>Higher Integer Set Bits in Raku</h3>

<p>To count the number of 1 bits, we just add all digits of the binary representation of the input number (in the <code>number_of_1</code> subroutine). Then we just test all successive numbers larger than the input number until we find one that has the same number of bits set to 1. </p>

<pre><code>use v6;

sub number_of_1 (Int $in) {
    my $count = [+] $in.base(2).comb;
}

my $input = @*ARGS[0] // 3;
my $target = number_of_1 $input.Int;
for $input ^.. Inf -&gt; $candidate {
    next unless $candidate.Int.&amp;number_of_1 == $target;
    say $candidate;
    last;
}
</code></pre>

<p>This program displays the following output for a few input values:</p>

<p>$ raku ./nextbin.raku
5</p>

<p>$ raku ./nextbin.raku 12
17</p>

<p>$ raku ./nextbin.raku 123
125</p>

<h3>Higher Integer Set Bits in Perl</h3>

<p>This is essentially a port to Perl of the above Raku program with just a couple of changes: we use a loop to count the bits set to 1 and we use a <code>while</code> loop instead of a <code>for</code> loop </p>

<pre><code>use strict;
use warnings;
use feature "say";

sub number_of_1 {
    my $in = shift;
    my $count = 0;
    $count += $_ for split //, sprintf "%b", $in;
    return $count;
}

my $num = shift // 3;
my $target = number_of_1 $num;
while (++ $num) {
    say $num and last if $target == number_of_1 $num;
}
</code></pre>

<p>This program displays the following output for a few input values:</p>

<pre><code>$ perl nextbin.pl
5

$ perl nextbin.pl 111
119

$ perl nextbin.pl 256
512
</code></pre>

<h3>Higher Integer Set Bits in Scala</h3>

<pre><code>object nextbin extends App {

  def number_of_1(in: Int): Int = {
    val binlist = in.toBinaryString.toList
    var count = 0
    for (char &lt;- binlist) {
      if (char == '1') count += 1
    }
    return count
  }
  var num = 111
  val target = number_of_1(num)
  var found = 0
  while (found == 0) {
    num += 1
    if (number_of_1(num) == target) {
      println(num)
      found = 1
    }
  }
}
</code></pre>

<p>This program duly prints 119.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, June 6, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>CGI::Tiny - Perl CGI, but modern</title>
    <link rel="alternate" href="https://dev.to/grinnz/perl-cgi-but-modern-4630" type="text/html"/>
    <content type="html">&lt;p&gt;In a &lt;a href="http://blogs.perl.org/users/grinnz/2018/11/modern-perl-cgi.html"&gt;previous blog post&lt;/a&gt;, I explored the modern way to write CGI scripts using frameworks like &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt;. But as pointed out in comments, despite the many benefits, there is one critical problem: when you actually need to deploy to a regular CGI server, frameworks designed for persistent applications add lots of overhead to each request.&lt;/p&gt;

&lt;p&gt;CGI scripts have historically been written using the &lt;a href="https://metacpan.org/pod/CGI"&gt;CGI&lt;/a&gt; module (or even more ancient libraries). But this module is bulky, crufty, and has serious design issues that led to it being &lt;a href="https://metacpan.org/pod/CGI#CGI.pm-HAS-BEEN-REMOVED-FROM-THE-PERL-CORE"&gt;removed from Perl core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://metacpan.org/pod/CGI::Tiny"&gt;CGI::Tiny&lt;/a&gt;. It is built for one thing only: serving the CGI protocol. In most cases, frameworks are still the right answer, but in the case of scripts that are forced to run under the actual CGI protocol (such as shared web hosting), or when you want to just drop in CGI scripts with no need to scale, CGI::Tiny provides a modern alternative to CGI.pm. You can explore the &lt;a href="https://metacpan.org/pod/CGI::Tiny#COMPARISON-TO-CGI.PM"&gt;interface differences from CGI.pm&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/CGI::Tiny#EXTENDING"&gt;suggested ways to extend CGI::Tiny scripts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So without further ado, here is the equivalent CGI::Tiny script to my previous blog post's examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;CGI::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;cgi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$cgi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$cgi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
  &lt;span class="nv"&gt;$cgi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Dan Book</name>
    </author>
    <id>https://dev.to/grinnz/perl-cgi-but-modern-4630</id>
    <published>2021-05-30T21:44:36Z</published>
    <updated>2021-05-30T21:44:36Z</updated>
    <category term="perl"/>
    <category term="cgi"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 114</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/30#pwc114" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find out the next Palindrome 
Number higher than the given integer $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub next_palindrome{
    my($n) = @_;
    {
        $n++;
        return $n if $n eq join("", reverse(split(//, $n)));
        redo;
    }
}

MAIN:{
    my($N);
    $N = 1234;
    print next_palindrome($N) . "\n";
    $N = 999;
    print next_palindrome($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1331
1001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is probably the most straight forward approach to this task. Here we iterate
upwards from our starting point and check each number using 
&lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt;. Since we are guaranteed of 
eventually finding a palindrome the loop is 
done (via &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;) without any exit criteria or 
bounds checking other than returning when one is found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find the next higher integer 
having the same number of 1 bits in binary representation as $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub count_bits{
    my($n) = @_;
    my $total_count_set_bit = 0;
    while($n){
        my $b = $n &amp; 1;
        $total_count_set_bit++ if $b;
        $n = $n &gt;&gt; 1;
    }
    return $total_count_set_bit;
}

sub next_same_bits{
    my($n) = @_;
    my $number_bits = count_bits($n);
    {
        my $next = $n + 1;
        return $next if count_bits($next) == $number_bits;
        $n = $next;
        redo;
    }
}

MAIN:{
    my($N);
    $N = 3;
    print next_same_bits($N) . "\n";
    $N = 12;
    print next_same_bits($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
5
17
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;count_bits&lt;/code&gt; subroutine is based on code written for 
&lt;a href="https://adamcrussell.livejournal.com/18587.html"&gt;Challenge 079&lt;/a&gt;. Otherwise, the approach
to this task is very similar to what was done in the first one this week.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114/"&gt;Challenge 114&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc114</id>
    <published>2021-05-30T16:01:00-04:00</published>
    <updated>2021-05-30T16:01:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>SQLite, Perl, and a Boolean</title>
    <link rel="alternate" href="https://dev.to/fgasper/sqlite-perl-and-a-boolean-30d8" type="text/html"/>
    <content type="html">&lt;p&gt;I’ve &lt;a href="https://dev.to/fgasper/use-sys-binmode-4e6o"&gt;written&lt;/a&gt; &lt;a href="https://dev.to/fgasper/perl-s-svpv-menace-5515"&gt;several&lt;/a&gt; &lt;a href="https://dev.toPerl,%20Unicode,%20and%20Bytes"&gt;articles&lt;/a&gt; &lt;a href="https://www.perl.com/article/json-unicode-and-perl-oh-my-/"&gt;now&lt;/a&gt; about the trials and tribulations of character encoding in Perl. Having gained the knowledge I have, I’ve also been finding bugs in libraries we use at $work and sending patches to their maintainers.&lt;/p&gt;

&lt;p&gt;The latest one is &lt;a href="https://metacpan.org/pod/DBD::SQLite"&gt;DBD::SQLite&lt;/a&gt;, CPAN’s self-contained SQLite binding. It’s a great library that I’ve used for years, but I recently noted two problems in it:&lt;/p&gt;

&lt;p&gt;1) In its default configuration it used the &lt;code&gt;SvPV&lt;/code&gt; macro to translate Perl strings to C strings, which is bad for reasons I detailed in “&lt;a href="https://dev.to/fgasper/perl-s-svpv-menace-5515"&gt;Perl’s SvPV Menace&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;2) In its (non-default) “unicode” configuration it used a “naïve” method of UTF-8 decoding that neglects validation. This mechanism can corrupt Perl’s internals by making it mistake invalid UTF-8 sequences for valid ones.&lt;/p&gt;

&lt;p&gt;Neither of these is trivial to fix: applications may depend on the &lt;code&gt;SvPV&lt;/code&gt; problem—what one coworker of mine calls a “load-bearing bug” 😀—while adding UTF-8 validation entails a performance hit.&lt;/p&gt;

&lt;p&gt;In reality, DBD::SQLite needed at least 4 modes of translating between Perl and C strings:&lt;/p&gt;

&lt;p&gt;1) The current (“load-bearing-buggy”) default.&lt;br&gt;
2) Same as #1, but use &lt;code&gt;SvPVbyte&lt;/code&gt; to avoid the &lt;code&gt;SvPV&lt;/code&gt; bug.&lt;br&gt;
3) Current “naïve unicode” behaviour.&lt;br&gt;
4) A “non-naïve unicode” mode that validates incoming UTF-8.&lt;/p&gt;

&lt;p&gt;(I eventually made two variants of this last one: one that just warns on invalid data, and the other that throws an exception.)&lt;/p&gt;

&lt;p&gt;There was another problem, though: DBD::SQLite’s interface for controlling this was a boolean. That meant only two modes were even &lt;em&gt;possible&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;This exemplifies a principle a mentor of mine taught me years back: &lt;strong&gt;avoid boolean parameters.&lt;/strong&gt; They restrict your ability to add additional configurations.&lt;/p&gt;

&lt;p&gt;(And for pity’s sake, abhor &lt;em&gt;unnamed&lt;/em&gt; booleans in particular! What does the 0 in &lt;code&gt;open_file($path, 0)&lt;/code&gt; mean??)&lt;/p&gt;

&lt;p&gt;To fix this &lt;a href="https://github.com/DBD-SQLite/DBD-SQLite/pull/80"&gt;my pull request&lt;/a&gt; had to deprecate the existing &lt;code&gt;sqlite_unicode&lt;/code&gt; parameter. It’s an unfortunate step that’ll produce new warnings in existing applications, but the “omelet” here justifies the “broken egg”.&lt;/p&gt;

</content>
    <author>
      <name>Felipe Gasper</name>
    </author>
    <id>https://dev.to/fgasper/sqlite-perl-and-a-boolean-30d8</id>
    <published>2021-05-30T16:27:02Z</published>
    <updated>2021-05-30T16:27:02Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="sql"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5134727855626457964</id>
    <published>2021-05-29T20:39:00.000+02:00</published>
    <updated>2021-05-29T20:39:25.596+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxliii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.065' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.065&lt;/strong&gt; on 2021-05-25&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.062 was 9 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Data-Dumper-2.181' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Dumper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - stringified perl data structures, suitable for both printing and eval &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.181&lt;/strong&gt; on 2021-05-26&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 2.180 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/THINC/DateTime-Format-Flexible-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Flexible&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DateTime::Format::Flexible - Flexibly parse strings and turn them into DateTime objects. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-05-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 1 year, 8 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.87' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a script to package Devel::AssertOS modules with your code. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.87&lt;/strong&gt; on 2021-05-25&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.86 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.071' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.071&lt;/strong&gt; on 2021-05-23&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.070 was 2 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.26&lt;/strong&gt; on 2021-05-27&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.25 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.18' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.18&lt;/strong&gt; on 2021-05-23&lt;/li&gt;  &lt;li&gt;Votes: 452&lt;/li&gt;  &lt;li&gt;Previous version: 9.17 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.048' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.048&lt;/strong&gt; on 2021-05-23&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.047 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9005&lt;/strong&gt; on 2021-05-27&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9002 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.072&lt;/strong&gt; on 2021-05-26&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.070 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5134727855626457964/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxliii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5134727855626457964"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5134727855626457964"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxliii-10-great-cpan-modules-released.html" title="(cccxliii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8235280658001006182</id>
    <published>2021-05-29T20:36:00.003+02:00</published>
    <updated>2021-05-29T20:36:21.151+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxix) metacpan weekly report - List::Keywords</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 37&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/List::Keywords"&gt;List::Keywords&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/29 18:35:20 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::MasterMind" target="_blank"&gt;Algorithm::MasterMind&lt;/a&gt; - Framework for algorithms that solve the MasterMind game&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encoding::BER" target="_blank"&gt;Encoding::BER&lt;/a&gt; - Perl module for encoding/decoding data using ASN.1 Basic Encoding Rules (BER)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Game::Entities" target="_blank"&gt;Game::Entities&lt;/a&gt; - A simple entity registry for ECS designs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GitHub::Crud" target="_blank"&gt;GitHub::Crud&lt;/a&gt; - Create, Read, Update, Delete files, commits, issues, and web hooks on GitHub.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Archive::Zip" target="_blank"&gt;Archive::Zip&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beam::Wire" target="_blank"&gt;Beam::Wire&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BioPerl" target="_blank"&gt;BioPerl&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Diff" target="_blank"&gt;Data::Diff&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Difference" target="_blank"&gt;Data::Difference&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump" target="_blank"&gt;Data::Dump&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Localize" target="_blank"&gt;Data::Localize&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Holidays" target="_blank"&gt;Date::Holidays&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Milla" target="_blank"&gt;Dist::Milla&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=175)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::Starter" target="_blank"&gt;Dist::Zilla::PluginBundle::Starter&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+3=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Install" target="_blank"&gt;Module::Install&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::List" target="_blank"&gt;Module::List&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; (+2=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::NTP" target="_blank"&gt;Net::NTP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH::Perl" target="_blank"&gt;Net::SSH::Perl&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Graphics::Gnuplot" target="_blank"&gt;PDL::Graphics::Gnuplot&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=378)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=113)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Construct" target="_blank"&gt;Syntax::Construct&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Continuous" target="_blank"&gt;Test::Continuous&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URL::Encode" target="_blank"&gt;URL::Encode&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URL::Encode::XS" target="_blank"&gt;URL::Encode::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8235280658001006182/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8235280658001006182"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8235280658001006182"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxix-metacpan-weekly-report.html" title="(cdlxix) metacpan weekly report - List::Keywords"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4551166172175348863</id>
    <published>2021-05-29T20:22:00.000+02:00</published>
    <updated>2021-05-29T20:22:30.484+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-05-29 18:21:44 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67743933" target="_blank"&gt;RegEx, Substituting a variable number of replacements&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67709274" target="_blank"&gt;Splitting large text files with Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67666794" target="_blank"&gt;Perl Passing Variable to subroutines&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67726957" target="_blank"&gt;How to extract certain data using Perl from a file?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67657374" target="_blank"&gt;map a string in each element of an array and assigning in another array in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67654766" target="_blank"&gt;Meaning of if(!$_)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67703298" target="_blank"&gt;Not Getting Response while initiating Session on Net::SNMP while accessing the device with snmpv3 credentials using AES-256&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67662208" target="_blank"&gt;Split String in 3 By REGEX Groups&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67714926" target="_blank"&gt;How do I parse an xml dictionary with XML::LibXML&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67664364" target="_blank"&gt;Perl Dancer and Mason2&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4551166172175348863/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxcii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4551166172175348863"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4551166172175348863"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxcii-stackoverflow-perl-report.html" title="(cdxcii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Date handling modularized</title>
    <link rel="alternate" href="https://dev.to/vkroll/date-handling-modularized-10h9" type="text/html"/>
    <content type="html">&lt;p&gt;Thanks to mentioning my first post on the &lt;a href="https://perlweekly.com/archive/513.html"&gt;perl weekly newsletter&lt;/a&gt; a lot people read the first part of this serie of articles. (Don't know yet, how many parts it will be.) So I decided to write a follow-up. &lt;/p&gt;

&lt;p&gt;What can you expect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moving functions to modules&lt;/li&gt;
&lt;li&gt;testing functions automatically&lt;/li&gt;
&lt;li&gt;change a module to a class&lt;/li&gt;
&lt;li&gt;inherit the class from a base class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To summarize where we left our little skript in part one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;

use Getopt::Long;
use DateTime;
use DateTime::Duration;

my $date;   ## the starting date argument
my $dt;     ## DateTime Object of starting date


GetOptions(
        "date=s"         =&amp;gt; \$date,
        );

$dt = get_dt($date);
my $today = DateTime-&amp;gt;today();



if(!$dt) {
    print "submitted value $date is no date\n";
}
if(is_last_week($dt)) {
    print "submitted date was in the last week\n";
}

sub is_last_week {
    my $dt = shift;
    return unless ref $dt eq "DateTime";
    return if($dt &amp;gt; $today) ;

    my $dur = DateTime::Duration-&amp;gt;new(days =&amp;gt; 7);
    $today-&amp;gt;subtract_duration($dur);
    return 1 if $today &amp;lt; $dt;
}


sub get_dt {
    my $date = shift;

    my($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    my $dt;
    eval {
        $dt = DateTime-&amp;gt;new(year =&amp;gt; $y, month =&amp;gt; $m, day =&amp;gt; $d);
    }; 
    if ($@) {
        print STDERR "Error while generating DateTime: $@\n";
        return 0;
    }
    else {
        return $dt;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script checks a parameter -d if it is a valid date and that the date is in the last week.&lt;/p&gt;

&lt;p&gt;Calling the script without a paremeter end with a not so nice error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;perl skript.pl &lt;br&gt;
Error while generating DateTime: Validation failed for type named DayOfMonth declared in package DateTime::Types (/home/kroll/.plenv/versions/5.32.1/lib/perl5/site_perl/5.32.1/x86_64-linux/DateTime/Types.pm) at line 29 in sub named (eval) with value undef&lt;/p&gt;

&lt;p&gt;Trace begun at Specio::Exception-&amp;gt;new line 57&lt;br&gt;
Specio::Exception::throw('Specio::Exception', 'message', 'Validation failed for type named DayOfMonth declared in package DateTime::Types (/home/kroll/.plenv/versions/5.32.1/lib/perl5/site_perl/5.32.1/x86_64-linux/DateTime/Types.pm) at line 29 in sub named (eval) with value undef', 'type', 'Specio::Constraint::Simple=HASH(0x55a2fa53c0a8)', 'value', undef) called at (eval 201) line 91&lt;br&gt;
DateTime::_check_new_params('year', undef, 'month', undef, 'day', undef) called at /home/kroll/.plenv/versions/5.32.1/lib/perl5/site_perl/5.32.1/x86_64-linux/DateTime.pm line 176&lt;br&gt;
DateTime::new('DateTime', 'year', undef, 'month', undef, 'day', undef) called at skript.pl line 45&lt;br&gt;
eval {...} at skript.pl line 44&lt;br&gt;
main::get_dt(undef) called at skript.pl line 15&lt;/p&gt;

&lt;p&gt;submitted value  is no date&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will write this on our to-do-list for later.&lt;/p&gt;

&lt;p&gt;But for today we want to put the date handling out of the script in a module, so that the script later can do the heavy lifting but the date handling can be reused in other scripts. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generating-a-new-and-empty-module"&gt;
  &lt;/a&gt;
  Generating a new and empty module
&lt;/h1&gt;

&lt;p&gt;For the perl people it is quite obvious, you generate a directory lib and put the module in and do the normal perl boilerplate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package Date;

use strict;

use DateTime;
use DateTime::Duration;


1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as the test-driven guy I am usually, I added my first test too. In t/date.t you will find:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Test::More;

use_ok("Date");

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And of course this will result green: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ prove -lv&lt;br&gt;
t/date.t .. &lt;br&gt;
ok 1 - use Date;&lt;br&gt;
1..1&lt;br&gt;
ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we can commit it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Thu May 6 11:59:53 2021 +0200&lt;/p&gt;

&lt;p&gt;new Module Date&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date is empty&lt;/li&gt;
&lt;li&gt;t/date.t has a test, that it loads correctly&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#move-the-getdt-in-datepm"&gt;
  &lt;/a&gt;
  Move the get_dt in Date.pm
&lt;/h1&gt;

&lt;p&gt;Not much to do then get the code from the script and paste it in our module. But because I prefer modules to be a little more object-oriented I also added a constructor in the - little weird old oo-perl style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub new {
    my $class = shift;
    my $datestring = shift|| undef;
    if ($datestring) {
        bless get_dt($datestring), $class;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a little more testing of course:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use_ok("Date");

my $d = Date::get_dt('2020-01-02');
isa_ok($d, DateTime);
my $date = Date-&amp;gt;new('2020-01-02');
isa_ok($date, "Date");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ prove -lv&lt;br&gt;
t/date.t .. &lt;br&gt;
ok 1 - use Date;&lt;br&gt;
ok 2 - An object of class 'DateTime' isa 'DateTime'&lt;br&gt;
ok 3 - An object of class 'Date' isa 'Date'&lt;br&gt;
1..3&lt;br&gt;
ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enough code to commit it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;a href="mailto:kroll@strato.de"&gt;kroll@strato.de&lt;/a&gt;&lt;br&gt;
Date:   Thu May 6 12:11:15 2021 +0200&lt;/p&gt;

&lt;p&gt;get_dt now in Date&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get_dt is called like in skript.pl Date::get_dt(yyyy-mm-dd)&lt;/li&gt;
&lt;li&gt;additionally you can do a Date-&amp;gt;new(yyyy-mm-dd)
 returned is an object of class Date (that is a DateTime)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#why-not-make-date-a-child-of-datetime"&gt;
  &lt;/a&gt;
  Why not make Date a child of DateTime?
&lt;/h1&gt;

&lt;p&gt;While working on my module I thought it might be a good idea to inherit from DateTime so that if I do a Date-&amp;gt;new(...) I get a DateTime object back. But, that did not work immediatly, because I need to add a lot of code of DateTime then for follow that constructor. (And to be honest, I forgot how to only add a little in my constructor and letting the "real constructor" do the heavy lifting of DateTime, so I decided for this project to rename my constructor to create (that's easy in perl, where you can name your constructor like you want to).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package Date;

use strict;

use base qw(DateTime);
use DateTime;
use DateTime::Duration;


sub create {
    my $class = shift;
    my $datestring = shift|| undef;
    if ($datestring) {
        return bless get_dt($datestring), $class;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also I wanted my function is_last_week in the module too, we had it before in our little script. For making the tests more easy, I added the possibility to "cheat with today" as A. mentioned. When I add a parameter today in the call it uses that not the "real today":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub is_last_week {
    my $dt = shift;
    return unless ref $dt;
    my $today = shift ||  DateTime-&amp;gt;today();
    return if($dt &amp;gt; $today) ;

    my $dur = DateTime::Duration-&amp;gt;new(days =&amp;gt; 7);
    $dt-&amp;gt;add_duration($dur);
    return 1 if $today &amp;lt; $dt;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I was able to add some more testing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Test::More;
use Data::Dumper;
use DateTime;

use_ok("Date");
test_new();
test_is_last_week();
done_testing();

sub test_new {
    my $d = Date::get_dt('2020-01-02');
    isa_ok($d, DateTime);
    my $date = Date-&amp;gt;create('2020-01-02');
    isa_ok($date, Date);
    isa_ok($date, DateTime);
}

sub test_is_last_week {
    my $date = Date-&amp;gt;create('2020-01-02');
    my $today = DateTime-&amp;gt;new(year =&amp;gt; 2020, month =&amp;gt; 01, day =&amp;gt; 05);
    can_ok($date, "is_last_week");
    isa_ok($date, "Date");
    isa_ok($today, "DateTime");
    is($date-&amp;gt;is_last_week($today), 1, "2020-01-02 was in the week before 2020-01-05 ");
    is($date-&amp;gt;is_last_week(), 0, "2020-01-02 was not last week from today ");

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again resulting in the expected output:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ prove -lv&lt;br&gt;
t/date.t .. &lt;br&gt;
ok 1 - use Date;&lt;br&gt;
ok 2 - An object of class 'DateTime' isa 'DateTime'&lt;br&gt;
ok 3 - An object of class 'Date' isa 'Date'&lt;br&gt;
ok 4 - An object of class 'Date' isa 'DateTime'&lt;br&gt;
ok 5 - Date-&amp;gt;can('is_last_week')&lt;br&gt;
ok 6 - An object of class 'Date' isa 'Date'&lt;br&gt;
ok 7 - An object of class 'DateTime' isa 'DateTime'&lt;br&gt;
ok 8 - 2020-01-02 was in the week before 2020-01-05 &lt;br&gt;
ok 9 - 2020-01-02 was not last week from today &lt;br&gt;
1..9&lt;br&gt;
ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is of course -- as usual -- the commit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Fri May 7 11:38:11 2021 +0200&lt;/p&gt;

&lt;p&gt;added Tests for date was in last week&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changed new to create to not interfere with DateTime new&lt;/li&gt;
&lt;li&gt;add function for is_last_week&lt;/li&gt;
&lt;li&gt;for testing purposes it is possible to call is_last_week with a given
 "today" so tests don't become red&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#just-a-few-more-tests"&gt;
  &lt;/a&gt;
  Just a few more tests
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub test_is_last_week {
    my $date = Date-&amp;gt;create('2020-01-02');
    my $today = DateTime-&amp;gt;new(year =&amp;gt; 2020, month =&amp;gt; 01, day =&amp;gt; 05);
    can_ok($date, "is_last_week");
    isa_ok($date, "Date");
    isa_ok($today, "DateTime");
    is($date-&amp;gt;is_last_week($today), 1, "2020-01-02 was in the week before 2020-01-05 ");
    is($date-&amp;gt;is_last_week(), 0, "2020-01-02 was not last week from today ");
    is($date-&amp;gt;is_last_week(), 0, "2020-01-02 was not last week from today ");

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the whole module is tested enough to use it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;t/date.t .. &lt;br&gt;
ok 1 - use Date;&lt;br&gt;
ok 2 - An object of class 'DateTime' isa 'DateTime'&lt;br&gt;
ok 3 - An object of class 'Date' isa 'Date'&lt;br&gt;
ok 4 - An object of class 'Date' isa 'DateTime'&lt;br&gt;
ok 5 - Date-&amp;gt;can('is_last_week')&lt;br&gt;
ok 6 - An object of class 'Date' isa 'Date'&lt;br&gt;
ok 7 - An object of class 'DateTime' isa 'DateTime'&lt;br&gt;
ok 8 - 2020-01-02 was in the week before 2020-01-05 &lt;br&gt;
ok 9 - 2020-01-02 was not last week from today &lt;br&gt;
ok 10 - 2020-01-02 was not last week from today &lt;br&gt;
1..10&lt;br&gt;
ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a final commit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Fri May 7 14:21:09 2021 +0200&lt;/p&gt;

&lt;p&gt;some more testing in date.t&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Only a few changes changed a lot. Now we are able to easily test the functions we developed. Additionally we can later reuse our (now DateTime) object. But the biggest benefit for the following work is to remove the date handling from the script that will have other work to do. So we separeted the different parts which make them more easy to modify and use.&lt;/p&gt;

&lt;p&gt;What will be the next logical step? That is depended of the requirements and the users of the software. But I would probably fix the "bad error message" when called without a parameter. Usually I call the help function (that still needs to be written), when a mandatory parameter is missing. But that will be done in a third part -- maybe -- stay tuned.&lt;/p&gt;

</content>
    <author>
      <name>Volker Kroll</name>
    </author>
    <id>https://dev.to/vkroll/date-handling-modularized-10h9</id>
    <published>2021-05-28T14:34:08Z</published>
    <updated>2021-05-28T14:34:08Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
    <category term="learning"/>
    <category term="tdd"/>
  </entry>
  <entry>
    <title>Perl, should you develop your strengths or correct your weaknesses?</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/perl-should-you-develop-your-strengths-or-correct-your-weaknesses-g42" type="text/html"/>
    <content type="html">&lt;p&gt;If you follow me and read some of my past posts, you know that I generally talk about correcting weaknesses. This is for 3 main reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is so much room for improvements&lt;/li&gt;
&lt;li&gt;Perl has bad reputation and it is not deserved&lt;/li&gt;
&lt;li&gt;You could have the best product in the world, but if nobody knows it...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I heard one time that in relationship we finally end up loving our partner for "defects", well I'm not sure it's true and if it applies for programming languages 😀&lt;/p&gt;

&lt;p&gt;What is obvious is that Perl programmers love Perl for its strengths and that's all!&lt;/p&gt;

&lt;p&gt;In current situation, Perl strengths are more what make people enjoy and stick with Perl when weaknesses are what make people stay &lt;em&gt;out&lt;/em&gt; of Perl... (some sort of contrary analysis could probably be valid for some javascript frameworks or other programming languages, hype but then dreaded from users).&lt;/p&gt;

&lt;p&gt;Finally, trying to work on weaknesses can also be seen unnatural because at some point that's not by hazard if they became weaknesses. It means they are not really in the DNA of the Perl folks (and it’s also a good thing, after all we love Perl for its DNA).&lt;/p&gt;

&lt;p&gt;It could also happen that working on weaknesses could weaken strengths.&lt;/p&gt;

&lt;p&gt;So according to you, should Perl focus on its strengths or try to work on its weaknesses?&lt;/p&gt;

&lt;p&gt;Some strengths according to me: extreme compatibility, portability, smart interpreter, quality, toolchain, sysadmin...&lt;br&gt;
Some weaknesses according to me: reputation, boilerplate, web presence...&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/perl-should-you-develop-your-strengths-or-correct-your-weaknesses-g42</id>
    <published>2021-05-28T13:46:53Z</published>
    <updated>2021-05-28T13:46:53Z</updated>
    <category term="perl"/>
    <category term="discuss"/>
  </entry>
  <entry>
    <title>Perl’s SvPV Menace</title>
    <link rel="alternate" href="https://dev.to/fgasper/perl-s-svpv-menace-5515" type="text/html"/>
    <content type="html">&lt;p&gt;If you’ve read my &lt;a href="https://dev.to/fgasper/perl-unicode-and-bytes-5cg7"&gt;Perl, Unicode, and Bytes&lt;/a&gt; or &lt;a href="https://dev.to/fgasper/use-sys-binmode-4e6o"&gt;Sys::Binmode&lt;/a&gt; posts, you know about the complexities of character encoding in Perl. A bit after I wrote that first post I had a little epiphany I thought worth sharing.&lt;/p&gt;

&lt;p&gt;One day I noticed that &lt;a href="https://metacpan.org/pod/URI::XSEscape"&gt;URI::XSEscape&lt;/a&gt; was mangling its output: I’d pass in &lt;code&gt;épée&lt;/code&gt; and get out &lt;code&gt;%C3%83%C2%A9p%C3%83%C2%A9e&lt;/code&gt;. I recognized this as an extra UTF-8 encode: rather than URI-encoding my 6 bytes of &lt;code&gt;épée&lt;/code&gt;, it was UTF-8 encoding—so now 10 bytes—then URI-encoding that.&lt;/p&gt;

&lt;p&gt;I pulled out &lt;a href="https://metacpan.org/pod/Devel::Peek"&gt;Devel::Peek&lt;/a&gt; and saw that something prior to the URI-encoding step had “upgraded” my string’s internal storage: Perl itself stored my string as 10 bytes, even though the Perl scalar still consisted of 6 &lt;em&gt;characters&lt;/em&gt;. Ordinarily this is nothing of importance since Perl code doesn’t need to care how Perl itself stores its strings.&lt;/p&gt;

&lt;p&gt;… until it &lt;em&gt;does&lt;/em&gt; need to care, that is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-svpv"&gt;
  &lt;/a&gt;
  What is SvPV?
&lt;/h1&gt;

&lt;p&gt;Perl’s C API—the set of macros and functions available to work with Perl from C—is a classic C API: lots of different ways to do &lt;em&gt;almost&lt;/em&gt; the same thing. To translate a Perl scalar to a C signed integer, for example, you can use &lt;code&gt;SvIV&lt;/code&gt;, &lt;code&gt;SvIV_nomg&lt;/code&gt;, &lt;code&gt;SvIVX&lt;/code&gt;, or &lt;code&gt;SvIVx&lt;/code&gt;. (&lt;code&gt;IV&lt;/code&gt; here signifying an “integer value”) A similar set of macros exists for unsigned integers (&lt;code&gt;UV&lt;/code&gt;s).&lt;/p&gt;

&lt;p&gt;Converting a Perl scalar to a C string is similar. There are many tools available, but the 3 “fundamental” ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SvPVbyte&lt;/code&gt;: Takes the code points of your Perl string and gives back a C buffer whose bytes match those code points. Thus, any code point that exceeds 255 doesn’t work, and an exception is thrown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SvPVutf8&lt;/code&gt;: Like &lt;code&gt;SvPVbyte&lt;/code&gt; but gives the &lt;em&gt;UTF-8-encoded&lt;/em&gt; bytes for your Perl string’s code points. This works for any code point that Perl can store, but for code points 128-255 it’ll give different results from &lt;code&gt;SvPVbyte&lt;/code&gt;. (cf. &lt;a href="https://perldoc.perl.org/perlunicode#The-%22Unicode-Bug%22"&gt;perldoc perlunicode&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SvPV&lt;/code&gt;: Gives you the Perl string’s internal buffer, aka its “PV” (“pointer value”). It could be bytes, or it could be UTF-8. It’s like a C analogue to Perl’s &lt;code&gt;use bytes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;SvPV&lt;/code&gt;, of course, is what URI::XSEscape was using.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;SvPV&lt;/code&gt; to be meaningful it has to be used in tandem with &lt;code&gt;SvUTF8&lt;/code&gt;, a macro that tells you which form the PV is: bytes, or UTF-8. So if &lt;code&gt;SvUTF8&lt;/code&gt; is true, then &lt;code&gt;SvPV&lt;/code&gt;’s output is UTF-8; otherwise &lt;code&gt;SvPV&lt;/code&gt;’s output is bytes. But URI::XSEscape wasn’t checking &lt;code&gt;SvUTF8&lt;/code&gt;; it was just URI-encoding &lt;code&gt;SvPV&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;The big problem with &lt;code&gt;SvPV&lt;/code&gt; is that the number of contexts &lt;em&gt;other&lt;/em&gt; than Perl where it’s sensible to have a C string that could be bytes &lt;em&gt;or&lt;/em&gt; UTF-8 is … small. Nevertheless, uses of this macro (and its variants) to interact with contexts outside Perl are all over CPAN.&lt;/p&gt;

&lt;p&gt;URI::XSEscape, like &lt;a href="https://metacpan.org/pod/URI::Escape"&gt;its pure-Perl counterpart&lt;/a&gt;, presents interfaces appropriate for both “byte-oriented” and “character-oriented” Perl code (cf. &lt;a href="https://dev.to/fgasper/perl-unicode-and-bytes-5cg7"&gt;Perl, Unicode, and Bytes&lt;/a&gt;). Since the byte-oriented interface is what I was using, switching URI::XSEscape from &lt;code&gt;SvPV&lt;/code&gt; to &lt;code&gt;SvPVbyte&lt;/code&gt; was the simple fix to this problem.&lt;/p&gt;

&lt;p&gt;In essence, C code like URI::XSEscape should approach Perl strings the same way that pure-Perl code does, without caring about Perl’s internal string storage. &lt;em&gt;Most&lt;/em&gt; C code should thus avoid &lt;code&gt;SvPV&lt;/code&gt; for the same reason that most Perl should not &lt;code&gt;use bytes&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-plot-thickens-"&gt;
  &lt;/a&gt;
  The plot thickens …
&lt;/h1&gt;

&lt;p&gt;A quick scan through some popular XS modules showed more occurrences of this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/DBD::SQLite"&gt;DBD::SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Net::Curl"&gt;Net::Curl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/DNS::Unbound"&gt;DNS::Unbound&lt;/a&gt; (mea culpa!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/DNS::LDNS"&gt;DNS::LDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/YAML::Syck"&gt;YAML::Syck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/HTTP::Parser::XS"&gt;HTTP::Parser::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Socket"&gt;Socket&lt;/a&gt; (a core module!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These offer a non-default mode that auto-encodes to UTF-8, but their default setup has the same bug:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/CDB_File"&gt;CDB_File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/LMDB_File"&gt;LMDB_File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are likely many more; those are just ones I’ve found.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-did-this-come-to-be"&gt;
  &lt;/a&gt;
  How did this come to be?
&lt;/h1&gt;

&lt;p&gt;I suspect it’s that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SvPV&lt;/code&gt; is the shortest of the above-named methods for converting a Perl scalar to a C string. Thus, it’s easier to type and looks less “intimidating”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Historically, Perl’s documentation favoured &lt;code&gt;SvPV&lt;/code&gt; in its examples of scalar-to-string conversion; the other two were seldom discussed. &lt;a href="https://github.com/Perl/perl5/commit/3c3f883d1ac1fc6048277d2d60015c66c211ac9b"&gt;I fixed this recently&lt;/a&gt;, but it’ll be years before everyone’s local &lt;code&gt;perldoc&lt;/code&gt; reflects that change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perl’s default &lt;a href="https://perldoc.perl.org/perlxstypemap"&gt;XS typemap&lt;/a&gt; uses &lt;code&gt;SvPV&lt;/code&gt; (without consulting &lt;code&gt;SvUTF8&lt;/code&gt;) to convert a scalar to a string. Thus, the following XSUB, called as &lt;code&gt;printstr($mystr)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void
printstr (const char *str)
  CODE:
    fprintf(stdout, str);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;… prints Perl’s internals, which a Perl caller isn’t supposed to care about. Ideally language defaults like this would be the “safe” ways to do things, but this particular one is nonsensical.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-this-problem-affect-your-code"&gt;
  &lt;/a&gt;
  Does this problem affect your code?
&lt;/h1&gt;

&lt;p&gt;A simple way to test for this problem is to &lt;code&gt;utf8::upgrade&lt;/code&gt; your strings before you give them to the tested code—ensuring, of course, that you’re testing with some code points in the 128-255 range. Your test should verify that your program’s behaviour is the same with &lt;code&gt;utf8::upgrade&lt;/code&gt;d strings as with non-upgraded strings.&lt;/p&gt;

&lt;p&gt;You wouldn’t normally upgrade strings manually in production (since it makes your Perl code think about Perl’s internals, which it shouldn’t do), but for testing it’s fine and useful.&lt;/p&gt;

&lt;p&gt;For example, I found the URI::XSEscape problem by doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my $foo = "épée";
utf8::upgrade($foo);
print URI::XSEscape::uri_escape($foo);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#not-just-any-old-bug-"&gt;
  &lt;/a&gt;
  Not just any old bug …
&lt;/h1&gt;

&lt;p&gt;The worst part of all this is that modules like CDB_File &lt;em&gt;can’t&lt;/em&gt; replace &lt;code&gt;SvPV&lt;/code&gt; without breaking existing applications that may depend on that &lt;code&gt;use bytes&lt;/code&gt;-ish behaviour. So there’s not much to do except build new, corrected interfaces, deprecating the old ones … which of course will &lt;em&gt;eventually&lt;/em&gt; necessitate changes to existing code. For Perl “gurus” that may be simple, but for everyone else changing existing code could be expensive, painful, and even harmful to Perl’s reputation as a language that prizes backward compatibility.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-thats-not-all-"&gt;
  &lt;/a&gt;
  But that’s not all …
&lt;/h1&gt;

&lt;p&gt;XS code isn’t the only place where this bug appears; &lt;em&gt;Perl itself&lt;/em&gt; has it, too! Read all about it at “&lt;a href="https://dev.to/fgasper/use-sys-binmode-4e6o"&gt;use Sys::Binmode;&lt;/a&gt;”.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-we-fix-this"&gt;
  &lt;/a&gt;
  How can we fix this?
&lt;/h1&gt;

&lt;p&gt;I think &lt;em&gt;most&lt;/em&gt; code that uses &lt;code&gt;SvPV&lt;/code&gt; to convert a Perl string to a C string intends for Perl code points to correspond to bytes in the C string; thus, such code should actually use &lt;code&gt;SvPVbyte&lt;/code&gt; or one of its variants. (UTF-8-aware C code, of course, would use &lt;code&gt;SvPVutf8&lt;/code&gt;.) Toward that end, we &lt;strong&gt;MUST&lt;/strong&gt; discourage further use of &lt;code&gt;SvPV&lt;/code&gt;. I propose to the Perl community, then, a few  changes: some that don’t break anything, and others that will probably break some things:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-this-the-easy-parts"&gt;
  &lt;/a&gt;
  Fixing this: The easy parts!
&lt;/h2&gt;

&lt;p&gt;1) Rename &lt;code&gt;SvPV&lt;/code&gt; and friends. We can’t &lt;em&gt;remove&lt;/em&gt; them, but we can create longer, “scarier-looking” aliases for them and use those names in the documentation. I propose &lt;code&gt;SvPVinternal&lt;/code&gt;, &lt;code&gt;SvPVinternal_const&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;2) Make &lt;code&gt;xsubpp&lt;/code&gt; warn when it sees SvPV or variants in a typemap.&lt;/p&gt;

&lt;p&gt;3) Use &lt;a href="https://dev.to/fgasper/use-sys-binmode-4e6o"&gt;Sys::Binmode&lt;/a&gt; in all new code to fix Perl’s own buggy behaviour.&lt;/p&gt;

&lt;p&gt;4) Submit bug reports! Audit the XS modules that you use, and if you find different behaviour between upgraded and downgraded strings, let the maintainers know—ideally by sending them patches!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-this-the-hard-part-"&gt;
  &lt;/a&gt;
  Fixing this: The hard part …
&lt;/h2&gt;

&lt;p&gt;You can’t make an omelet without breaking some eggs, and you often can’t fix things like this without breaking &lt;em&gt;some&lt;/em&gt; current applications. Nevertheless …&lt;/p&gt;

&lt;p&gt;5) Make &lt;code&gt;char *&lt;/code&gt; and &lt;code&gt;const char *&lt;/code&gt; in Perl’s default typemap use &lt;code&gt;SvPVbyte&lt;/code&gt;. (Actually &lt;code&gt;SvPVbyte_nolen&lt;/code&gt;, but hey.) For the vast majority of XS modules this probably would be just a bug fix, though for apps that depend on a &lt;code&gt;use bytes&lt;/code&gt;-ish status quo there would be breakage. Thankfully, though: a) the most widely-used XS modules (e.g., &lt;a href="https://metacpan.org/pod/MIME::Base64"&gt;MIME::Base64&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/JSON::XS"&gt;JSON::XS&lt;/a&gt;) where this &lt;em&gt;could&lt;/em&gt; be a problem don’t appear to be vulnerable, and b) any breakage would be easy to fix: module authors merely have to adopt &lt;code&gt;SvPVutf8&lt;/code&gt; if that’s what they want, optionally creating separate functions if support for both is desired.&lt;/p&gt;

&lt;p&gt;6) Make &lt;a href="https://metacpan.org/pod/Sys::Binmode"&gt;Sys::Binmode&lt;/a&gt;’s behaviour Perl’s own behaviour. This is more contentious because it sidesteps the much larger problem of Perl’s lacklustre support for Windows filesystems; still, Sys::Binmode-type behaviour is no &lt;em&gt;worse&lt;/em&gt; than Perl’s status quo, and it fixes a significant leak in Perl’s string abstraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-this-the-moonshot-"&gt;
  &lt;/a&gt;
  Fixing this: The moon-shot …
&lt;/h2&gt;

&lt;p&gt;7) Perl needs to differentiate byte sequences from text strings. This would fix a plethora of “shin-bumpers” that afflict users of the language. This is a fairly difficult problem to solve, but I don’t think it’s insurmountable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-the-meantime-"&gt;
  &lt;/a&gt;
  In the meantime …
&lt;/h1&gt;

&lt;p&gt;Absent fixes like the above, we just have to avoid this issue. You’ll always have consistent behaviour if you send &lt;em&gt;encoded&lt;/em&gt; strings to the operating system and &lt;em&gt;downgrade&lt;/em&gt; them prior to output; this way Perl doesn’t store any strings as UTF-8, so &lt;code&gt;SvPV&lt;/code&gt; and &lt;code&gt;SvPVbyte&lt;/code&gt; give the same result.&lt;/p&gt;

&lt;p&gt;IMPORTANT: If you don’t &lt;em&gt;decode&lt;/em&gt; your strings, then by definition they’re already encoded, so in this case &lt;em&gt;don’t&lt;/em&gt; encode them manually, or you’ll mangle your output.&lt;/p&gt;

</content>
    <author>
      <name>Felipe Gasper</name>
    </author>
    <id>https://dev.to/fgasper/perl-s-svpv-menace-5515</id>
    <published>2021-05-27T02:42:30Z</published>
    <updated>2021-05-27T02:42:30Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>berrybrew version 1.34 released!</title>
    <link rel="alternate" href="http://blogs.perl.org/users/steve_bertrand/2021/05/berrybrew-version-134-released.html"/>
    <id>tag:blogs.perl.org,2021:/users/steve_bertrand//2771.10239</id>
    <published>2021-05-26T07:32:42Z</published>
    <updated>2021-05-26T14:10:41Z</updated>
    <author>
        <name>Steve Bertrand</name>
        
    </author>
    <category term="berrybrew" label="berrybrew" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perlbrew" label="perlbrew" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="strawberry" label="strawberry" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="strawberryperl" label="strawberryperl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/steve_bertrand/">
        <![CDATA[<p>I've released version 1.34 of <a href="https://github.com/stevieb9/berrybrew">berrybrew</a>.</p>

<p>Notable changes:</p>

<ul>
<li>UI elements now update on the fly, so all changes are reflected immediately</li>
<li>You can 'use' any version of installed Perl from the UI, which opens up a new CLI window set to use the selected version</li>
<li>You can now fetch the updated list of Strawberry Perls available through the UI</li>
<li>Cloning installed Perls as well as a myriad of other operations can now be done through the UI</li>
<li>The API has been updated so that internal objects are updated live-time. This makes having long-running processes possible</li>
<li>Build/Test infrastructure updates</li>
<li>Documentation updates</li>
<li>Minor bug fixes</li>
</ul>

<p>I've just got a new full time job, programming in Perl... finally, after several years of looking for that perfect work environment. Some of it will be on Windows (which I haven't used except for developing <code>berrybrew</code>), so I'm actually looking forward to using my own software, especially how useful its become thanks to the new UI I've developed.</p>

<p>Happy Perling!</p>

<p>-stevieb</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>TPRCIC Newsletter 26 May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic-newsletter-26-may-2021"/>
  <id>tag:news.perlfoundation.org,2021-05-25:/post/tprcic-newsletter-26-may-2021</id>
  <published>2021-05-25T12:31:36</published>
  <updated>2021-05-25T12:31:36</updated>
  <summary>
  <![CDATA[
     Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter. This issue: The schedule is available Submit a Lightning Talk Volunteers needed Do you want to host a virtual BoF? Order your conference shirt About the Conference in the Cloud Get your tickets How to Reach Us See you real soon The conference is in just 2 weeks! We're really looking forward to seeing everyone again. We’ve 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/99958ba268cb98cef73fd7773128f8164b29031b/logo-tpc-2021-colors.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter.</p>

<p>This issue:
* <a href="https://perlconference.us/tprc-2021-cloud/schedule/">The schedule is available</a>
* <a href="http://perlconference.us/papers">Submit a Lightning Talk</a>
* Volunteers needed ( virtual moderators, hosts ) 
* Do you want to host a virtual BoF? 
* Order your conference <a href="https://www.cafepress.com/perlandrakuconference">shirt</a>
* About the Conference in the Cloud
* <a href="https://tprc2021cic.sched.com/tickets?iframe=no">Get your tickets</a>
* How to Reach Us</p>

<h1>See you real soon</h1>

<p>The conference is in just 2 weeks! We're really looking forward to seeing everyone again. 
We’ve got a lot of great talks lined up! The schedule is available on our <a href="https://perlconference.us/tprc-2021-cloud/schedule/">website</a>. </p>

<h1>Give a Lightning Talk</h1>

<p>Lightning Talks are short, 5 minute, talks that may be serious, funny, or both. They may be given by experienced speakers already giving full length talks or by first time speakers just starting out (this is a great way to get started if you have something to say). Adding the virtual component to lightning talks should add for some extra fun! If you are a first time speaker you will win a tie with an experienced speaker when the schedule is made, if it comes to it. Today’s first time speaker could be tomorrow’s keynote speaker! <a href="http://perlconference.us/papers">Sign up here</a>.</p>

<h1>Volunteers Needed</h1>

<p>The Conference in the Cloud needs some volunteers! Email <a href="admin@perlconference.us">admin@perlconference.us</a> to volunteer. Right now we need volunteers to help moderate rooms and coordinate day-of things:
* Room moderators - Monitor the chat and help coordinate audience participation during a virtual presentation.
* Room Hosts - Help coordinate speakers and manage the live stream to YouTube</p>

<h1>Host a Birds of a Feather (BoF)</h1>

<p>Do you have a topic you'd like to host for a virtual Birds of Feather (BoF) meeting? We'd love to help! Virtual meeting space will be reserved for BoFs on a first come, first served basis.</p>

<p>Start by proposing and then promoting your BOF on the <a href="http://perlconference.us/wiki">conference wiki</a>. TPRC staff is happy to help facilitate a meeting space if you need it. Just reach out to us on TPF Slack or email us at <a href="admin@perlconference.us">admin@perlconference.us</a> </p>

<h1>Order your conference shirt</h1>

<p>We designed a logo and we’re sharing it with the community! Order a shirt or other cloud conference items at <a href="https://www.cafepress.com/perlandrakuconference">CafePress</a>. We aren’t making any money (neither is TPF) on these products but we have designed a logo if you’d like to buy a momento!</p>

<h1>About the Conference in the Cloud</h1>

<p>The 2021 Perl and Raku Conference in the Cloud will be on June 8-10. If you see #TPRCiC around on social media, that’s our tag for the conference.
At the Conference in the Cloud there will be Perl, Raku, and other related technology topics, just like you’ve seen at our in-person conferences. The Conference in the Cloud is organized and run by volunteers just like The Perl and Raku Conference. Presentations are also given by volunteers. The presentations at the conference were submitted during our Call For Presentations (CFP) and selected by organizers who volunteered to be on our talks-committee. We will have 2 or more tracks at this event with presentations (20-50 minutes long) on a variety of technical topics throughout each day.</p>

<h2>Registration Cost</h2>

<p>By paying a $10 fee attendees can interact live with speakers and other attendees (during BOFs, panels, and Q&amp;A). The $10.00 fee is inclusive of the entire event. This fee helps secure a safe event, and covers the minor costs of hosting it.</p>

<h2>Conference Time</h2>

<p>In order to accommodate the most time zones possible, we have decided to go with 11AM to 6PM EDT or 15:00 to 22:00 UTC. Sched now supports time zones in their interface. Be sure to login and select your time zone!</p>

<h2>Hosting Platform</h2>

<p>The Perl and Raku Conference in the Cloud (TPRCiC) is going to be an online, interactive event hosted on the Zoom platform. The broadcast will be recorded and streamed simultaneously to <a href="https://www.youtube.com/yapcna">YouTube</a>. </p>

<p>Access to the interactive conference on Zoom will only be granted to people who register in advance, agree to the Code of Conduct, and pay a $10 registration fee for the whole conference. Presentations will be streamed live to <a href="https://www.youtube.com/yapcna">YouTube</a> so those who can’t pay the fee or won’t use Zoom, can still access most conference content. <a href="https://github.com/perlconference/tpc-2020-cloud/wiki#bofs">BOFs</a> will not be available on <a href="https://www.youtube.com/yapcna">YouTube</a>.</p>

<h1>Get Your Ticket</h1>

<p>Event tickets are available on eventbrite for $10. The $10.00 fee is inclusive of the entire 3-day event. This fee helps secure a safe event, and covers the minor costs of hosting it. <a href="https://tprc2021cic.sched.com/tickets">Sign up today</a>! </p>

<h1>How to Reach #TPRCiC Organizers</h1>

<ul>
<li>Visit our website: https://perlconference.us/</li>
<li>Follow us on Twitter: <a href="https://twitter.com/PerlConferences">@PerlConferences</a></li>
<li>Like us on Facebook: The Perl Foundation (<a href="https://www.facebook.com/tpf.perl">@tpf.perl</a>)</li>
<li>Subscribe to the mailing list: https://perlconference.us/tprc-2021-cloud/keep-in-touch/</li>
<li>Send any questions about The Perl Conference to <a href="https://perlconference.us/tprc-2021-cloud/contact-us/">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Lists - a Partial Taxonomy</title>
    <link rel="alternate" href="http://blogs.perl.org/users/matthew_persico/2021/05/perl-lists---a-partial-taxonomy.html"/>
    <id>tag:blogs.perl.org,2021:/users/matthew_persico//2139.10238</id>
    <published>2021-05-25T06:03:11Z</published>
    <updated>2021-05-25T06:08:32Z</updated>
    <author>
        <name>Matthew Persico</name>
        
    </author>
    <category term="perllistarrayhash" label="perl list array hash" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/matthew_persico/">
        <![CDATA[<p><br />
<a href="https://dev.to/matthewpersico/perl-lists-a-partial-taxonomy-g8p">Follow-up</a> to Mark Gardner's article about Perl List:: modules.<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl / Unix One-liner Cage Match, Part 2</title>
    <link rel="alternate" href="https://perl.com/article/perl-one-liners-part-2/" type="text/html"/>
    <content type="html">

&lt;p&gt;In &lt;a href="https://www.perl.com/article/perl-one-liners-part-1/"&gt;Part 1&lt;/a&gt;, I compared Perl&amp;rsquo;s regexp features with sed and Awk. In this concluding part, I&amp;rsquo;ll cover examples that make use of Perl&amp;rsquo;s extensive built-in features and third-party modules.&lt;/p&gt;

&lt;h2 id="bigger-library"&gt;Bigger library&lt;/h2&gt;

&lt;p&gt;Perl has a much bigger collection of built-in functions compared to Awk. For command-line usage, I often need &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. I like that arrays and hashes are distinct in Perl and applying &lt;code&gt;sort&lt;/code&gt; on these data types is much simpler compared to Awk.&lt;/p&gt;

&lt;h3 id="append-items-to-a-list"&gt;Append items to a list&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/49765879/4082052"&gt;This problem&lt;/a&gt; wants to append columns to rows that have too few, like the &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; rows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;a,10,12,13
b,20,22
c,30
d,33&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This appends zeros to list by using the &lt;code&gt;/e&lt;/code&gt; again. This time, the Perl in the replacement counts the number of commas, and subtracts that from 3 to find out how many more columns it needs. The &lt;code&gt;x&lt;/code&gt; is the string replication operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s|$|&amp;#34;,0&amp;#34; x (3 - tr/,//)|e&amp;#39;&lt;/span&gt; ip.txt
a,10,12,13
b,20,22,0
c,30,0,0
d,33,0,0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reversing-things"&gt;Reversing things&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://stackoverflow.com/q/45571828/4082052"&gt;reverse complement DNA sequence for a specific field&lt;/a&gt;, I need to select part of the string, complement it, and turn it around. I want to work on the third column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;ABC DEF GATTAG GHK
ABC DEF GGCGTC GHK
ABC DEF AATTCC GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use the &lt;code&gt;tr&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; in the replacement side (with &lt;code&gt;/e&lt;/code&gt; again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/^(\H+\h+){2}\K\H+/reverse $&amp;amp;=~tr|ATGC|TACG|r/e&amp;#39;&lt;/span&gt; test.txt
ABC DEF CTAATC GHK
ABC DEF GACGCC GHK
ABC DEF GGAATT GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, I can use &lt;code&gt;-a&lt;/code&gt;, which automatically splits on whitespace and puts the result in &lt;code&gt;@F&lt;/code&gt;. I work on the third element then output &lt;code&gt;@F&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;$F[2]=reverse $F[2]=~tr/ATGC/TACG/r; print &amp;#34;@F&amp;#34;&amp;#39;&lt;/span&gt; test.txt
ABC DEF CTAATC GHK
ABC DEF GACGCC GHK
ABC DEF GGAATT GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sort-a-csv-row"&gt;Sort a CSV row&lt;/h3&gt;

&lt;p&gt;How about &lt;a href="https://stackoverflow.com/q/48920626/4082052"&gt;sorting rows in csv file without header &amp;amp; first column&lt;/a&gt;? Here&amp;rsquo;s some simple comma-separated values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;id,h1,h2,h3,h4,h5,h6,h7
&lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;,zebra,1,papa,4,dog,3,apple
&lt;span style="color:#ae81ff"&gt;102&lt;/span&gt;,2,yahoo,5,kangaroo,7,ape&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;-a&lt;/code&gt; again, but also &lt;code&gt;-F,&lt;/code&gt; to make comma as the field separator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -F, -lane &lt;span style="color:#e6db74"&gt;&amp;#39;print join &amp;#34;,&amp;#34;, $.==1 ? @F : (shift @F, sort @F)&amp;#39;&lt;/span&gt; ip.txt
id,h1,h2,h3,h4,h5,h6,h7
&lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;,1,3,4,apple,dog,papa,zebra
&lt;span style="color:#ae81ff"&gt;102&lt;/span&gt;,2,5,7,ape,kangaroo,yahoo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$.&lt;/code&gt; variable keeps track of the input line number. I use this to skip the first line (the header). In all other lines, I make a list of the first element of &lt;code&gt;@F&lt;/code&gt; and the sorted list of the rest of the elements. Note that the numbers to be sorted in this example have the same number of digits, otherwise it wouldn&amp;rsquo;t work.&lt;/p&gt;

&lt;h3 id="insert-incremental-row-and-column-labels"&gt;Insert incremental row and column labels&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/48985854/4082052"&gt;Insert a row and a column in a matrix&lt;/a&gt; needs to add numerical labels with a fixed interval:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, I use &lt;code&gt;map&lt;/code&gt; to generate the header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;print join &amp;#34;\t&amp;#34;, &amp;#34;&amp;#34;, map {20.00+$_*0.33} 0..$#F if $.==1;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print join &amp;#34;\t&amp;#34;, 100+(0.33*$i++), @F&amp;#39;&lt;/span&gt; matrix.txt
        &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;      &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.33   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.66   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.99   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.32   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.65
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;     &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.33  &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.66  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.99  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;

&lt;span style="color:#75715e"&gt;# with formatting and alternate way to join print arguments&lt;/span&gt;
$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;BEGIN{$,=&amp;#34;\t&amp;#34;; $st=0.33}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print &amp;#34;&amp;#34;, map {sprintf &amp;#34;%.2f&amp;#34;, 20+$_*$st} 0..$#F if $.==1;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print sprintf(&amp;#34;%.2f&amp;#34;, 100+($st*$i++)), @F&amp;#39;&lt;/span&gt; matrix.txt
        &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.00   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.33   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.66   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.99   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.32   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.65
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.00  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.33  &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.66  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.99  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="using-perl-modules"&gt;Using Perl modules&lt;/h2&gt;

&lt;p&gt;Apart from built-in functions, Standard or CPAN modules come in handy too. Load those with &lt;code&gt;-M&lt;/code&gt; and put the import list after a &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#75715e"&gt;# randomize word list after filtering&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;floor bat to dubious four pact feed&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MList::Util&lt;span style="color:#f92672"&gt;=&lt;/span&gt;shuffle -lanE &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                    say join &amp;#34;:&amp;#34;, shuffle grep {/[au]/} @F&amp;#39;&lt;/span&gt;
bat:four:pact:dubious

&lt;span style="color:#75715e"&gt;# remove duplicate elements while retaining input order&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;3,b,a,3,c,d,1,d,c,2,2,2,3,1,b&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MList::Util&lt;span style="color:#f92672"&gt;=&lt;/span&gt;uniq -F, -lanE &lt;span style="color:#e6db74"&gt;&amp;#39;say join &amp;#34;,&amp;#34;, uniq @F&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,b,a,c,d,1,2

&lt;span style="color:#75715e"&gt;# apply base64 decoding only for a portion of the string&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;123 aGVsbG8gd29ybGQK&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MMIME::Base64 -ane &lt;span style="color:#e6db74"&gt;&amp;#39;print decode_base64 $F[1]&amp;#39;&lt;/span&gt;
hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cpan"&gt;CPAN&lt;/h2&gt;

&lt;p&gt;The Comprehensive Perl Archive Network (&lt;a href="https://www.cpan.org"&gt;CPAN&lt;/a&gt;) has a huge collection of modules for various use cases.  Here are some examples.&lt;/p&gt;

&lt;h3 id="extract-ipv4-addresses"&gt;Extract IPv4 addresses&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Regexp::Common"&gt;Regexp::Common&lt;/a&gt; has recipes for common things you want to match. Here&amp;rsquo;s some text with dotted-decimal IP addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243 &lt;span style="color:#ae81ff"&gt;555&lt;/span&gt;.4.3.1 &lt;span style="color:#ae81ff"&gt;34242534&lt;/span&gt;.23.42.42
foo &lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123 baz &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.4.4.3123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s easy to extract the IPv4 addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MRegexp::Common&lt;span style="color:#f92672"&gt;=&lt;/span&gt;net -nE &lt;span style="color:#e6db74"&gt;&amp;#39;say $&amp;amp; while /$RE{net}{IPv4}/g&amp;#39;&lt;/span&gt; ipv4.txt
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243
&lt;span style="color:#ae81ff"&gt;55&lt;/span&gt;.4.3.1
&lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;.23.42.42
&lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123
&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.4.4.31&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can match only if the IPv4 address isn&amp;rsquo;t surrounded by digit characters, so I don&amp;rsquo;t match in the middle of &lt;code&gt;34242534.23.42.42&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MRegexp::Common&lt;span style="color:#f92672"&gt;=&lt;/span&gt;net -nE &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;        say $&amp;amp; while /(?&amp;lt;!\d)$RE{net}{IPv4}(?!\d)/g&amp;#39;&lt;/span&gt; ipv4.txt
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243
&lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="real-csv-processing"&gt;Real CSV processing&lt;/h3&gt;

&lt;p&gt;Earlier I did some simple CSV processing, but if I want to do it for real I can use &lt;a href="https://metacpan.org/pod/Text::CSV_XS"&gt;Text::CSV_XS&lt;/a&gt; to make sure everything happens correctly. This one handles the quoted field &lt;code&gt;fox,42&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;eagle,&amp;#34;fox,42&amp;#34;,bee,frog\n1,2,3,4&amp;#39;&lt;/span&gt;

&lt;span style="color:#75715e"&gt;# note that neither -n nor -p are used here&lt;/span&gt;
$ printf &lt;span style="color:#e6db74"&gt;&amp;#39;%b&amp;#39;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MText::CSV_XS -E &lt;span style="color:#e6db74"&gt;&amp;#39;say $row-&amp;gt;[1]
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                     while $row = Text::CSV_XS-&amp;gt;new-&amp;gt;getline(*ARGV)&amp;#39;&lt;/span&gt;
fox,42
&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="processing-xml"&gt;Processing XML&lt;/h3&gt;

&lt;p&gt;Processing XML files is another format that&amp;rsquo;s easy to mess up. Many people try to do this with regexp, but that can easily go wrong. Here&amp;rsquo;s an example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&amp;lt;doc&amp;gt;
    &amp;lt;greeting type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;ask&amp;#34;&lt;/span&gt;&amp;gt;Hi there. How are you?&amp;lt;/greeting&amp;gt;
    &amp;lt;greeting type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;reply&amp;#34;&lt;/span&gt;&amp;gt;I am good.&amp;lt;/greeting&amp;gt;
    &amp;lt;color&amp;gt;
        &amp;lt;blue&amp;gt;flower&amp;lt;/blue&amp;gt;
        &amp;lt;blue&amp;gt;sand stone&amp;lt;/blue&amp;gt;
        &amp;lt;light-blue&amp;gt;sky&amp;lt;/light-blue&amp;gt;
        &amp;lt;light-blue&amp;gt;water&amp;lt;/light-blue&amp;gt;
    &amp;lt;/color&amp;gt;
&amp;lt;/doc&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;xpath&lt;/code&gt; (a Perl program) and &lt;code&gt;xmllint&lt;/code&gt; can be used for processing XML files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ xpath -e &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
Found &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; nodes in sample.xml:
-- NODE --
flower
-- NODE --
sand stone
$ xpath -q -e &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone

$ xmllint --xpath &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt; module will help if you need Perl&amp;rsquo;s power:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MXML::LibXML -E &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    $ip = XML::LibXML-&amp;gt;load_xml(location =&amp;gt; $ARGV[0]);
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    say $_-&amp;gt;to_literal() for $ip-&amp;gt;findnodes(&amp;#34;//blue&amp;#34;)&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone

$ perl -MXML::LibXML -E &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    $ip = XML::LibXML-&amp;gt;load_xml(location =&amp;gt; $ARGV[0]);
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    say uc $_-&amp;gt;to_literal() for $ip-&amp;gt;findnodes(&amp;#34;//blue&amp;#34;)&amp;#39;&lt;/span&gt; sample.xml
FLOWER
SAND STONE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="processing-json"&gt;Processing JSON&lt;/h3&gt;

&lt;p&gt;JSON files have the same issue. You don&amp;rsquo;t want to do regexes on this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;greeting&amp;#34;:&amp;#34;hi&amp;#34;,&amp;#34;marks&amp;#34;:[78,62,93],&amp;#34;fruit&amp;#34;:&amp;#34;apple&amp;#34;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Various JSON modules, such as &lt;a href="http://metacpan.org/pod/Cpanel::JSON::XS"&gt;Cpanel::JSON::XS&lt;/a&gt; can handle this. For example, pretty printing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | cpanel_json_xs
&lt;span style="color:#f92672"&gt;{&lt;/span&gt;
   &lt;span style="color:#e6db74"&gt;&amp;#34;fruit&amp;#34;&lt;/span&gt; : &lt;span style="color:#e6db74"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;,
   &lt;span style="color:#e6db74"&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt; : &lt;span style="color:#e6db74"&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;,
   &lt;span style="color:#e6db74"&gt;&amp;#34;marks&amp;#34;&lt;/span&gt; : &lt;span style="color:#f92672"&gt;[&lt;/span&gt;
      &lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;,
      &lt;span style="color:#ae81ff"&gt;62&lt;/span&gt;,
      &lt;span style="color:#ae81ff"&gt;93&lt;/span&gt;
   &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;span style="color:#f92672"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;rsquo;s a particular selection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MCpanel::JSON::XS -0777 -E &lt;span style="color:#e6db74"&gt;&amp;#39;$ip=decode_json &amp;lt;&amp;gt;;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              say join &amp;#34;:&amp;#34;, @{$ip-&amp;gt;{marks}}&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;:62:93&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s easier to put that in a script (although that&amp;rsquo;s not really a one-liner anymore). I use a Bash function as a shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ pj&lt;span style="color:#f92672"&gt;()&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt; perl -MCpanel::JSON::XS -0777 -E &lt;span style="color:#e6db74"&gt;&amp;#39;$ip=decode_json &amp;lt;&amp;gt;;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$@&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; ; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;

$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | pj &lt;span style="color:#e6db74"&gt;&amp;#39;say $ip-&amp;gt;{fruit}&amp;#39;&lt;/span&gt;
apple
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | pj &lt;span style="color:#e6db74"&gt;&amp;#39;say join &amp;#34;:&amp;#34;, @{$ip-&amp;gt;{marks}}&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;:62:93&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A non-Perl example of the same thing is &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;, but that&amp;rsquo;s something you have to install separately and might not be available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style="color:#e6db74"&gt;&amp;#39;.fruit&amp;#39;&lt;/span&gt;
&lt;span style="color:#e6db74"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style="color:#e6db74"&gt;&amp;#39;.marks | join(&amp;#34;:&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;span style="color:#e6db74"&gt;&amp;#34;78:62:93&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;

&lt;p&gt;Perl is usually slower compared to specialized tools, but the regexp engine performs better for certain cases of backreferences and quantifiers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ time LC_ALL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;C grep -xE &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]..)\1&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f1
real    0m0.074s

$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /^([a-z]..)\1$/&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f2
real    0m0.024s

$ time LC_ALL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;C grep -xP &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]..)\1&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f3
real    0m0.010s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl&amp;rsquo;s hash implementation performs better compared to Awk&amp;rsquo;s associative arrays for large number of keys. The &lt;code&gt;SCOWL-wl.txt&lt;/code&gt; file used below was created using &lt;a href="http://app.aspell.net/create"&gt;app.aspell.net&lt;/a&gt;. &lt;code&gt;words.txt&lt;/code&gt; is from &lt;code&gt;/usr/share/dict/words&lt;/code&gt;. Mawk is usually faster, but GNU Awk does better in this particular case.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ wc -l words.txt SCOWL-wl.txt
  &lt;span style="color:#ae81ff"&gt;99171&lt;/span&gt; words.txt
 &lt;span style="color:#ae81ff"&gt;662349&lt;/span&gt; SCOWL-wl.txt
 &lt;span style="color:#ae81ff"&gt;761520&lt;/span&gt; total

&lt;span style="color:#75715e"&gt;# finding common lines between two files&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# Case 1: shorter file passed as the first argument&lt;/span&gt;
$ time mawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t1
real    0m0.296s
$ time gawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t2
real    0m0.210s
$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;if(!$#ARGV){$h{$_}=1; next}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                 print if exists $h{$_}&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t3
real    0m0.189s

&lt;span style="color:#75715e"&gt;# Case 2: longer file passed as the first argument&lt;/span&gt;
$ time mawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f1
real    0m0.539s
$ time gawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f2
real    0m0.380s
$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;if(!$#ARGV){$h{$_}=1; next}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                 print if exists $h{$_}&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f3
real    0m0.351s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="other-things-to-read"&gt;Other things to read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My ebook on &lt;a href="https://learnbyexample.github.io/learn_perl_oneliners/"&gt;Perl one-liners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/hachiojipm/awesome-perl"&gt;Awesome Perl&lt;/a&gt; has a curated list of awesome Perl5 frameworks, libraries and software&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://grantm.github.io/perl-libxml-by-example/"&gt;Perl XML::LibXML by example&lt;/a&gt; for a detailed book on &lt;code&gt;XML::LibXML&lt;/code&gt; module&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;[image from &lt;a href="https://www.flickr.com/photos/ljsilver71/14139619905/in/photolist-nxtfo6-xDEB2-2hdZdFv-XPjLeQ-6nGeoM-29v1fwo-puR1K-2kNaM6P-nxtgeK-a2nLuc-qvDmkw-nfYDTu-6R6FQB-2i1Psj2-74Nwsu-2kNam6c-c2EsqS-2i1PsgB-nvqjK1-2i1RTpS-2i1T2RR-2i1S2Wr-2i1Psik-2gcee9c-2i1PHci-23p4pKV-2i4eukR-urRBFS-nzf35k-6R6Fmp-nvqicm-pvqAaK-6RaKuU-2i1S8S9-2i1Tbr1-2i1Psd5-2i1S9WP-2i1T2LL-nfYwEo-2i1RTnx-2i1RTbW-2i1PsbB-2i1S2VE-2i1S8Tg-2tFtHH-2i1Psku-2i1TbFV-614Rh8-2i1S8Va-27YK5Fj"&gt;Riccardo Maria Mantero&lt;/a&gt; on Flickr, (CC BY-NC-ND 2.0)]&lt;/em&gt;&lt;/p&gt;
</content>
    <id>https://perl.com/article/perl-one-liners-part-2/</id>
    <published>2021-05-25T02:54:23Z</published>
    <updated>2021-05-25T02:54:23Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 113: Represent Integer and Recreate Binary Tree</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-113-represent-integer-and-recreate-binary-tree.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10237</id>
    <published>2021-05-25T00:19:56Z</published>
    <updated>2021-05-25T00:21:25Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 113 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Represent Integer</h2>

<p><em>You are given a positive integer <code>$N</code> and a digit <code>$D</code>.</em></p>

<p><em>Write a script to check if <code>$N</code> can be represented as a sum of positive integers having <code>$D</code> at least once. If check passes print 1 otherwise 0.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 25, $D = 7
Output: 0 as there are 2 numbers between 1 and 25 having the digit 7 i.e. 7 and 17. If we add up both we don't get 25.

Input: $N = 24, $D = 7
Output: 1
</code></pre>

<p>I&#8217;m very late and have very little time this week, so I&#8217;ll implement this task only in Raku.</p>

<h3>Represent Integer in Raku</h3>

<p>This script first populates the <code>@candidates</code> array with numbers between 1 and the input positive integer where the target digit is present. It then uses the <a href="https://docs.raku.org/routine/combinations">combinations</a> built-in routine to generate all combinations of the numbers in <code>@candidates</code> and checks whether the sum of the number in the combination is equal to the input positive integer.</p>

<pre><code>use v6;

sub sum-int (Int $num, Int $digit where 1 &lt;= $digit &lt;= 9) {
    my @candidates = grep { /$digit/ }, 1..$num;
    for @candidates.combinations -&gt; $comb {
        if $num == [+] $comb {
            # say $comb;
            return 1;
        }
    }
    return 0;
}
for 1..30 -&gt; $test {
    say "$test: ", sum-int $test, 7;
}
</code></pre>

<p>The script performs the test for all numbers between 1 and 30 with a targhet digit of 7:</p>

<pre><code>$ raku sum-int.raku
1: 0
2: 0
3: 0
4: 0
5: 0
6: 0
7: 1
8: 0
9: 0
10: 0
11: 0
12: 0
13: 0
14: 0
15: 0
16: 0
17: 1
18: 0
19: 0
20: 0
21: 0
22: 0
23: 0
24: 1
25: 0
26: 0
27: 1
28: 0
29: 0
30: 0
</code></pre>

<h2>Task 2: Recreate Binary Tree</h2>

<p><em>You are given a Binary Tree.</em></p>

<p><em>Write a script to replace each node of the tree with the sum of all the remaining nodes.</em></p>

<p><em>Example:</em></p>

<pre><code>Input Binary Tree

        1
       / \
      2   3
     /   / \
    4   5   6
     \
      7

Output Binary Tree

        27
       /  \
      26  25
     /   /  \
    24  23  22
     \
     21
</code></pre>

<p>Binary trees can be stored in breadth-first order as an array with an implicit data structure. This is similar to what is commonly done for <em>binary heaps</em> (i.e. a binary tree that keeps a partial order). Here, we&#8217;re not interested with partial order, but the idea is to use an array with the following properties. The item with subscript 0 is the value of the root node. The index of an element is used to compute the index of its parent and the indices of its children. The basic idea is that, for any node, the index of its parent is about half the index of the current node, and, conversely, the indices of the children are about twice the index of the current node. More precisely, for a tree starting at index 0, the exact formulas for a node with index <code>$n</code> are commonly as follows:</p>

<ul>
<li>parent: <code>int( ($n-1)/2 )</code></li>
<li>left child: <code>2*$n + 1</code></li>
<li>right child: <code>2*$n + 2</code></li>
</ul>

<p>The root node is at index 0, and its children are at positions 1 and 2. The children of item with index 1 are at positions 3 and 4 and the children of 2 are at positions 5 and 6.</p>

<p>These rules may seem a bit complicated (and it is a bit tedious to compute these things manually), but they&#8217;re in fact quite easy to implement in a program. For example, in Perl:</p>

<pre><code>sub children { my $i = shift; 2*$i + 1, 2*$i + 2 }
sub parent { my $i = shift; ($i-1) / 2; }
</code></pre>

<p>These <code>children</code> and <code>parent</code> subroutines are provided here for the purpose of completeness, they are not needed in our program.</p>

<p>Note that it is very easy to populate the binary-heap-like array from a graphical representation: you just need to perform a breadth-first traversal (and provide empty slots for missing nodes if any, but we will only be dealing with full binary trees for the sake of simplification). For example, this binary tree:</p>

<pre><code>    1
   /  \
  2    3
 / \  / \
4   5 6  7
</code></pre>

<p>can be encoded as:</p>

<pre><code>my $tree = [1 , 2, 3, 4, 5, 6, 7];
</code></pre>

<p>or even:</p>

<pre><code>my $tree = [1 .. 7];
</code></pre>

<p>Now, the required task becomes very simple, as we can just manipulate the flat array.</p>

<p>We also provide a <code>bft</code> and a <code>display</code> subroutines for the purpose of displaying a graphical ASCII representation of the data in a tree format.</p>

<h3>Recreate Binary Tree in Raku</h3>

<p>We&#8217;re using a flat array to store the binary tree data structure, as described above:</p>

<pre><code>use v6;

sub children (Int $i) { 2*$i+1, 2*$i+2 }  # not needed here
sub parent (Int $i) { ($i-1)/2; }         # not needed here

sub display ($tree) {
    my @bft_tree = bft($tree);
    my $start = (@bft_tree[*-1]).elems;
    my $sep_val = (2 * $start) - 1;
    for @bft_tree -&gt; @line {
        my $sep = " " x $sep_val;
        say " " x $start, join $sep, @line;
        $start /= 2;
        $sep_val = ($sep_val - 1) / 2;
    }
}
sub bft ($tree) {               # Breadth First Traversal
    my ($index, $level) = (0, 0);
    my @bft_tree;
    while ($index &lt;= $tree.end) {
        my $new_index = $index + 2 ** $level - 1;
        (@bft_tree[$level++]).append($tree[$index .. $new_index]);
        $index = $new_index + 1;
    }
    return @bft_tree;
}

my @tree = 1..7;
say "Tree before change:";
display @tree;
my $sum = [+] @tree;
my @new-tree = map { $sum - $_ }, @tree;
say "\nTree after change:";
display @new-tree;
</code></pre>

<p>Note that the performing the task requires only two lines of code:</p>

<pre><code>my $sum = [+] @tree;
my @new-tree = map { $sum - $_ }, @tree;
</code></pre>

<p>It is the code to display the data in a tree format that takes most of the code.</p>

<p>This program displays the following output:</p>

<pre><code>$ raku bin-tree.raku
Tree before change:
    1
  2   3
 4 5 6 7

Tree after change:
    27
  26   25
 24 23 22 21
</code></pre>

<h3>Recreate Binary Tree in Perl</h3>

<p>We&#8217;re again using a flat array to store the binary tree data structure, as described above:</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

sub children { my $i = shift; 2*$i+1, 2*$i+2 }
sub parent { my $i = shift; ($i-1)/2; }  # not needed here

sub display {
    my $bft_tree = bft(shift);
    my $start = scalar @{$bft_tree-&gt;[-1]};
    my $sep_val = (2 * $start) - 1;
    for my $line (@$bft_tree) {
        my $sep = " " x $sep_val;
        say " " x $start, join $sep, @$line;
        $start /= 2;
        $sep_val = ($sep_val - 1) / 2;
    }
}
sub bft {               # Breadth First Traversal
    my $tree = shift;
    my ($index, $level) = (0, 0);
    my @bft_tree;
    while ($index &lt; scalar @$tree) {
        my $new_index = $index + 2 ** $level - 1;
        push @{$bft_tree[$level++]}, @{$tree}[$index .. $new_index];
        $index = $new_index + 1;
    }
    return \@bft_tree;
}

my $tree = [ 1..7 ];
say "\nTree before change:";
display $tree;
my $sum = 0;
$sum += $_ for @$tree;
my $new_tree = [ map $sum - $_, @$tree ];
say "\nNew tree";
display $new_tree;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl bin-tree.pl

Tree before change:
    1
  2   3
 4 5 6 7

New tree
    27
  26   25
 24 23 22 21
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 30, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): April 2021 Report </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-2021-04"/>
  <id>tag:news.perlfoundation.org,2021-05-24:/post/tony-2021-04</id>
  <published>2021-05-24T13:32:51</published>
  <updated>2021-05-24T13:32:51</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 39 tickets were reviewed.  2.66 #16249 read code, try to work up some implementation  #16249 more implementation  0.80 review list discussion, comment on #17999 re walking  backwards through UTF-8  0.73 #18588 debugging  1.43 #18670 review CI results, reproduce on Win32, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.</p>

<pre>
Approximately 39 tickets were reviewed.

[Hours]         [Activity]
  2.66          #16249 read code, try to work up some implementation
                #16249 more implementation
  0.80          review list discussion, comment on #17999 re walking
                backwards through UTF-8
  0.73          #18588 debugging
  1.43          #18670 review CI results, reproduce on Win32, testing, add
                debug code
                #18670 find issue, fix, testing, push to PR
  0.32          #18671 research, comment and approve
  0.42          #18685 review, research and comment
  0.38          #18692 review, research and approve (in freeze, so not
                applied)
  1.91          #18694 try to reproduce, comment on upstream ticket
                #18694 follow-up
  0.73          #18697 comment
  0.85          #18702 review, research
                #18702 more research and approve
  2.92          #18703 set up to test, start build
                #18703 comment
  1.55          #18734 ask for more information
                #18734 review supplied config.sh, research multiarch,
                write up how to produce a backtrace
  1.32          cygwin locale debugging
  0.62          Data::Alias - finish fix, comment on cpan ticket 130156,
                comment on blocker thread
  2.18          Data::Alias - more work on fix
  1.45          Data::Alias - parser debugging
  0.33          Data::Alias - test a fix, comment on D::A ticket 130156
                with a patch and comment on blocker thread on p5p
  2.13          Data::Alias - work on fix
  2.78          Data::Alias - work on PR, post PR and write up, look at
                parsing issue, reproduce
  1.02          Data::Alias debugging
  2.13          Data::Alias fix compilation errors, debug crash
  0.63          debug cygwin issue
  1.25          debug cygwin locale test silent exit, email to khw
  0.25          github notifications
  0.22          list catch up
  1.02          look at khw’s cygwin export problem, email to khw
  0.70          lower cop memory usage
  1.72          lower COP memory usage again
  0.90          more Data::Alias
  1.50          more Data::Alias debugging
  2.03          more Data::Alias debugging, work on a fix, start write up
                for list
  1.43          more debug cygwin
  3.40          more lower cop memory usage
                more lower cop memory usage
  1.13          no feature stringification
  2.12          no feature stringification - debugging, list catch up
  0.27          reply trim vote
  1.97          review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
  1.32          review p5p discussion
  1.65          try to reproduce cygwin blead failure, reproduce, fix test
                and fix utime(handle), make PR 18749
======
 52.17 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Witch and the Witch-hunt</title>
    <link rel="alternate" href="http://blogs.perl.org/users/leon_timmermans/2021/05/the-witch-and-the-witch-hunt.html"/>
    <id>tag:blogs.perl.org,2021:/users/leon_timmermans//150.10236</id>
    <published>2021-05-23T20:51:52Z</published>
    <updated>2021-05-24T10:34:50Z</updated>
    <author>
        <name>Leon Timmermans</name>
        <uri>http://codespeaks.blogspot.com/</uri>
    </author>
    <category term="cattpf" label="cat tpf" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/leon_timmermans/">
        <![CDATA[<p>A lot has been said about the recent CAT report and updates. It feels to me like we're not getting anywhere because the critical matters aren't being addressed.</p>
]]>
        <![CDATA[<h1>Division</h1>

<p>Right now there are two groups of people with opinions on this matter.</p>

<p>One group is appalled by the original report, because they have a number of serious concerns with the report. There was</p>

<ul>
<li>A truth-seeking process that was haphazard at best, in ways that are obvious to anyone with the slightest bit of knowledge of what happened</li>
<li>An expeditionary power-grab despite explicit requests not to do so</li>
<li>A punishment that was clearly not proportional to the incidents described</li>
<li>A willingness to cherry pick people from one side of a conflict where both sides have behaved in ways they really shouldn't have.</li>
<li>An apparent willingness to punish people who associate with Subject</li>
</ul>

<p>Combined this means that people fear the CAT because this is exactly the sort of behavior that can easily result in innocent people being banned.</p>

<p>The other group was relieved that someone they have known to be toxic is finally being removed from the community. Most have had so many negative experiences with him that they'll readily believe any further accusations in his general direction without need for further evidence. Others genuinely don't care anymore how the sausage is made as long as he's eliminated from the community.</p>

<p><strong>These different worldviews make it almost impossible for people to talk about the issue at hand, because they're talking past each other</strong>. Almost any discussion on the subject quickly devolves to bickering between people saying "How can you defend this toxic person" versus people saying "how can you defend this miscarriage of justice". For a lot of people it becomes a "you're either with us or against us" type of issue. Without splitting these conversations, we can't actually meet each other eye-to-eye. <strong>One can admit that what happened here was a cockup without denying that it tries to deal with an actual issue</strong>.</p>

<h1>Accountability</h1>

<p>Simply put, it rather appears like the CAT is firmly in the second camp. Everything that happens makes sense if they already believed him to be toxic and this incident was an opportunity to kick him out for once and for all. I'm not saying this was a conspiracy or some such; I'm suggesting that they were sufficiently biased that they got sloppy in dealing with this incident, they were entirely caught off guard by opposition to what they had done. The thing is, <strong>the CAT should not be doing a witch hunt, even if we know the target to actually be a witch</strong>.</p>

<p>The CAT's (draft) charter says <em>"the CAT must be trusted and viewed as consistent and impartial"</em> and <em>"to maintain the trust of the community, the CAT must make its processes and actions transparent while not sacrificing privacy"</em> but right now a large segment of the community doesn't trust them anymore because they have failed to do exactly those things. Despite all their good intentions, the CAT's actions actively worked against those intentions by focusing on the "easy win" and made the situation more difficult the next time action needs to be taken.</p>

<p><strong>The CAT is supposed to enforce accountability in our community, but it can not credibly and effectively do that if it is not accountable itself</strong>. What TPF should have done IMHO is pull the report and let someone else redo the entire thing, but it's probably too late for that now. What they can still do to put our community on a path out of this conflict is for them to:</p>

<ol>
<li>acknowledge what they did wrong</li>
<li>answer the question "how could this have happened?"</li>
<li>apologize for it</li>
</ol>

<p>but from my conversations with them over the past five weeks it rather looks like they intend to just move on without doing any of those things.</p>

<h1>Closure</h1>

<p>We've been infighting for a full year now, for a brief moment between the PSC's <code>use v7</code> announcement and the CAT's report it seemed we might finally get some peace. The CAT clearly underestimated just how divisive this action would be, and more division is the very last thing our community needs right now. This is the thing that upsets me the most of all; I remember a few weeks ago telling myself "finally we can put all this drama behind ourselves", I even wrote a blog post with that perspective and quite the opposite has happened.</p>

<p>I am tired of conflict and very disappointed.</p>
]]>
    </content>
</entry>
  <entry>
  <title>Grant Proposal: Raku Dispatch and Compiler Improvements</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements"/>
  <id>tag:news.perlfoundation.org,2021-05-23:/post/grant_proposal_raku_dispatch_compiler_improvements</id>
  <published>2021-05-23T20:32:28</published>
  <updated>2021-05-23T20:32:28</updated>
  <summary>
  <![CDATA[
     Name Jonathan Worthington Synopsis I currently have two ongoing grants: A Raku performance and reliability grant, under which almost all the time is  currently dedicated to implementing a new generalized dispatch mechanism. Progress  so far indicate it will offer both performance improvements and simplify future  development. A RakuAST grant, which involves implementing a user-facing document object model  for the Raku programming language. This will provide a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>Name</h1>

<p>Jonathan Worthington</p>

<h1>Synopsis</h1>

<p>I currently have two ongoing grants:</p>

<ul>
<li>A Raku performance and reliability grant, under which almost all the time is
currently dedicated to implementing a new generalized dispatch mechanism. Progress
so far indicate it will offer both performance improvements and simplify future
development.</li>
<li>A RakuAST grant, which involves implementing a user-facing document object model
for the Raku programming language. This will provide a foundation for macros and
a number of other meta-programming features. A new compiler frontend is being
developed in parallel with the new AST.</li>
</ul>

<p>The first of these two grants is near the end of its funded hours. Therefore, this
grant application is most immediately for funds to continue with, and bring to
completion, the new dispatch mechanism, such that it can be delivered in MoarVM and
Rakudo releases. That grant operates on the basis of hours worked, and I'm requesting
this grant on the same basis.</p>

<p>The second of the two has some way to run, but its goal is to reach 80% coverage
of the specification test suite using the new RakuAST-based compiler frontend.
Further work will be needed beyond that, to exploit the new opportunities for
better quality code generation by the compiler as well as to make it robust
enough to become the default compiler frontend for Rakudo. Therefore, the hours
left over on this grant beyond the delivery of the new dispatch mechanism would
be allocated to furthering that effort.</p>

<h1>Benefits to Raku Development</h1>

<p>Early benchmarking of the new dispatch mechanism suggests it will bring significant
performance improvements to a number of Raku language features, and potentially
improve even on areas that are quite well optimized today. It will also simplify
the overall architecture of the Rakudo/MoarVM stack, eliminating a number of special
cases and easing further improvements. With performance still being one of the key
weak areas, improvements in this area are important. We've come a long way, but it is
not yet enough for some applications. Performance aside, the new dispatch mechanism
also stands to simplify the development of some future Raku features, and to create
new optimization opportunities.</p>

<p>RakuAST brings about the first major overhaul of the Rakudo compiler frontend in a
decade. That's a lot of time to have learned better ways to do things. On top of
that, macros remain one of the main undelivered promises of the Raku language.
RakuAST provides the foundation for delivering useful macros that can solve real
problems, as well as providing an API to the Raku language that could have many
further applications, such as implementing linters and even a Language Server
Protocol implementation to improve editor support.</p>

<h1>Project Details</h1>

<p>I have written a <a href="https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/">blog post about the new dispatch mechanism</a>,
which provides an overview of what it is about. The key remaining tasks at this
point are:</p>

<ol>
<li>Finish implementing all of the Rakudo dispatch semantics atop of the new dispatch
mechanism. This work is currently around 80% complete.</li>
<li>Switch all dispatch in Rakudo to use the new general dispatch mechanism.</li>
<li>Fix everything needed to get the specification test suite passing and the module
ecosystem looking in good shape.</li>
<li>Make the MoarVM specializer able to work more completely with the new dispatch
mechanism, so we get all of the inlining and other benefits back.</li>
<li>Switch NQP to use the new dispatch mechanism too.</li>
<li>Eliminate lots of now-unused code in MoarVM, along with the current method
caches, which shall no longer be needed.</li>
</ol>

<p>In theory, we can "ship it" before doing steps 5 and 6. In practice, we'll see
if that makes sense. I expect all of these to be completed within the hours
requested on this grant.</p>

<p>Similarly, I've given a <a href="https://jnthn.net/papers/2020-cic-rakuast.pdf">talk that lays out the rationale for RakuAST</a>.
I won't work on it under this grant until the goals of the previous one have
been reached. However, at that point the remaining work shall be:</p>

<ul>
<li>Get the new RakuAST-based compiler frontend fully passing the specification test
suite</li>
<li>Ensure that the optimizations performed by the current compiler frontend are
also achieved by the RakuAST-based one, so we can say it produces equivalent or
better bytecode than is achieved today</li>
<li>Resolve any other blockers to switching over to using RakuAST as the new compiler
frontend</li>
</ul>

<p>The hours requested under this grant may not be sufficient to complete all of these
steps, however there should at that point be a more detailed picture of what work
remains to be done.</p>

<h1>Project Schedule</h1>

<p>I expect to have exhausted the hours allocated to the current Raku Performance and
Reliability grant by the end of April 2021, and so would be ready to begin working
under this grant right away.</p>

<p>I aim for the July or August releases of Rakudo and MoarVM to use the new dispatch
mechanism, which means merging it shortly after either the June or the July release
to maximize testing time.</p>

<h1>Bio</h1>

<p>I am the founder and architect of MoarVM, the most popular runtime for Raku users,
and the architect of the Rakudo compiler. I have contributed to the implementation
of numerous Raku language features, and played a key role in the design of the
concurrent and parallel aspects of the language. I hold a degree in Computer
Science from the University of Cambridge, and actively work in the field of
developer tooling and compilation.</p>

<h1>Amount requested</h1>

<p>200 hours * $60 USD / hour = $12,000 USD</p>

<h1>Endorsed By</h1>

<p>The full Raku Steering Council (see comments on https://gist.github.com/jnthn/e8d62a0452e9fc24f7eb445139b1ff76)</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 6</title>
  <summary type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-23T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-6"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-6</id>
  <content type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Weekly Challenge 113</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/23#pwc113" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive integer $N and a digit $D. Write a script to check if $N can be 
represented as a sum of positive integers having $D at least once. If check passes print 
1 otherwise 0.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
sub is_represented{
    my($n, $d) = @_;
    my @contains = grep { grep { $_ == $d } split(//) } (1 .. $n);
    return $n == unpack("%32C*", pack("C*",  @contains));
}

MAIN:{
    print is_represented(25, 7) + 0 . "\n";
    print is_represented(24, 7) + 0 . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0
1
</code></pre>

<h3>Notes</h3>

<p>I've been trying to avoid using regexes in these challenges recently, to help promote
some increased creativity. Here I use a nested grep to determine which numbers contain the
digit <code>$d</code>.</p>

<p>I also use one of my favorite ways to sum a list of numbers using <code>unpack</code> and <code>pack</code>!</p>

<p>By default the false value in the first example will print as an empty string. The <code>+ 0</code>
forces a numification to 0 (or 1 too) which then stringifies to what we expect.</p>

<h2>Part 2</h2>

<p><em>You are given a Binary Tree. Write a script to replace each node of the tree with the sum
of all the remaining nodes.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub dfs_update{
    my($graph, $vertex, $graph_updated, $previous) = @_;
    my @successors = $graph-&gt;successors($vertex);
    for my $successor (@successors){
        my $sum_remaining = sum_remaining($graph, $vertex);
        $graph_updated-&gt;add_edge($previous, $sum_remaining) if $previous;
        dfs_update($graph, $successor, $graph_updated, $sum_remaining);
    }
    $graph_updated-&gt;add_edge($previous, sum_remaining($graph, $vertex)) if !@successors;
}

sub sum_remaining{
    my($graph, $visited) = @_;
    my $sum = 0;
    for my $vertex ($graph-&gt;vertices()){
        $sum += $vertex if $vertex != $visited;
    }
    return $sum;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]";
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = new Graph();
    my $graph_updated = new Graph();
    my $root = 1;
    $graph-&gt;add_edge($root, 2);
    $graph-&gt;add_edge($root, 3);
    $graph-&gt;add_edge(2, 4);
    $graph-&gt;add_edge(4, 7);
    $graph-&gt;add_edge(3, 5);
    $graph-&gt;add_edge(3, 6);
    dfs_update($graph, $root, $graph_updated);
    display_graph($graph);
    display_graph($graph_updated);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
+---+     +---+     +---+     +---+
| 1 | ==&gt; | 2 | ==&gt; | 4 | ==&gt; | 7 |
+---+     +---+     +---+     +---+
  H
  H
  v
+---+     +---+
| 3 | ==&gt; | 5 |
+---+     +---+
  H
  H
  v
+---+
| 6 |
+---+
+----+     +----+     +----+     +----+
| 27 | ==&gt; | 26 | ==&gt; | 24 | ==&gt; | 21 |
+----+     +----+     +----+     +----+
  H
  H
  v
+----+     +----+
| 25 | ==&gt; | 22 |
+----+     +----+
  H
  H
  v
+----+
| 23 |
+----+
</code></pre>

<h3>Notes</h3>

<p>Whenever I work these sort of problems with Trees and Graphs I use the 
<a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod">Graph</a> module. My main 
motivation is to maintain a consistent interface so the code I write is more re-usable for
the many problems that can be solved using a graph based approach. The problem at hand
is a clear candidate as it is explicitly stated as such. Sometimes, however, graph
problems are somewhat in disguise although the use of a graph representation will yield the
best solution.</p>

<p>The core of the solution is done via a Depth First traversal of the tree. Each vertex, as
it is visited is used to generate a new edge on a tree constructed with the conditions of
the problem statement.</p>

<p>The original and updated trees are visualized with 
<a href="https://metacpan.org/pod/Graph::Easy">Graph::Easy</a>.</p>

<h2>References</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113/">Challenge 113</a></p>

<p><a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth First Traversal</a></p>

<p><a href="https://www.oreilly.com/library/view/mastering-algorithms-with/1565923987/">Mastering Algorithms with Perl</a>
is an excellent book with a very in depth chapter on Graphs.</p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc113</id>
    <published>2021-05-23T15:33:00-04:00</published>
    <updated>2021-05-23T15:33:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for March and April 2021 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2021-mar-apr"/>
  <id>tag:news.perlfoundation.org,2021-05-23:/post/dave-report-2021-mar-apr</id>
  <published>2021-05-23T14:53:15</published>
  <updated>2021-05-23T14:53:15</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund.  2: We would like to thank the TPF sponsors to make this grant possible.  3:  Did very little work in March and April  2:17 fix compiler warnings  0:38 fixup misc issues  3:46 process p5p mailbox   6:41 TOTAL 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
 2:  We would like to thank the TPF sponsors to make this grant possible.
 3: <pre>
 Did very little work in March and April</p>

<pre><code>  2:17 fix compiler warnings
  0:38 fixup misc issues
  3:46 process p5p mailbox
------
  6:41 TOTAL (HH::MM)
</code></pre>

<p></pre></p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6253412890709334243</id>
    <published>2021-05-22T21:34:00.000+02:00</published>
    <updated>2021-05-22T21:34:01.588+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RAZ/Cache-Memcached-Fast-0.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::Memcached::Fast&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl client for memcached, in C language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.26 was 1 year, 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Data-Dumper-2.180' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Dumper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - stringified perl data structures, suitable for both printing and eval &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.180&lt;/strong&gt; on 2021-05-17&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 2.173 was 2 years, 6 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMIKEW/DateTime-Format-MySQL-0.0701' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::MySQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse and format MySQL dates and times &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0701&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.06 was 5 years, 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.15.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15.0&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 85&lt;/li&gt;  &lt;li&gt;Previous version: 3.14.2 was 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.86' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a script to package Devel::AssertOS modules with your code. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.86&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.85 was 7 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.10&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.09 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-CheckLib-0.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::CheckLib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Check that a library is available for FFI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.28&lt;/strong&gt; on 2021-05-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.27 was 1 year, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.32&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.31 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.26&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.16 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.25&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.24 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210521' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210521&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210420 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XSAWYERX/perl-5.34.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;less&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Perl 5 language interpreter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.034000&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 376&lt;/li&gt;  &lt;li&gt;Previous version: 5.32.1 was 3 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9002&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9001 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Test-Differences-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Differences&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Test strings and data structures and show differences if not ok &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 2 years, 2 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302185' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302185&lt;/strong&gt; on 2021-05-19&lt;/li&gt;  &lt;li&gt;Votes: 169&lt;/li&gt;  &lt;li&gt;Previous version: 1.302183 was 6 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6253412890709334243/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxlii-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6253412890709334243"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6253412890709334243"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxlii-15-great-cpan-modules-released.html" title="(cccxlii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3637119549140611582</id>
    <published>2021-05-22T21:28:00.000+02:00</published>
    <updated>2021-05-22T21:28:28.293+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxviii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 50&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl (+4)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/22 19:27:20 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::libsdl2" target="_blank"&gt;Alien::libsdl2&lt;/a&gt; - Find or download and install libsdl2&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPAN::Get" target="_blank"&gt;App::CPAN::Get&lt;/a&gt; - Base class and script for getting of dist from CPAN.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Asm::C" target="_blank"&gt;Asm::C&lt;/a&gt; - Extract macro values and structure details from C programs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::BuildMethods" target="_blank"&gt;Class::BuildMethods&lt;/a&gt; - Lightweight implementation-agnostic generic methods.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Default" target="_blank"&gt;Class::Default&lt;/a&gt; - Static calls apply to a default instantiation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Exporter" target="_blank"&gt;Class::Exporter&lt;/a&gt; - Basic utilities for writing tests.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Ref" target="_blank"&gt;Class::Ref&lt;/a&gt; - Automatic OO wrapping of container references&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone::Choose" target="_blank"&gt;Clone::Choose&lt;/a&gt; - Choose appropriate clone utility&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Package" target="_blank"&gt;Data::Package&lt;/a&gt; - Base class for packages that are purely data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP4Import::Declare" target="_blank"&gt;MOP4Import::Declare&lt;/a&gt; - Thin Meta-Object Protocol to build extensible exporters&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Soo" target="_blank"&gt;Soo&lt;/a&gt; - Simple object oriented system for Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Minify::XS" target="_blank"&gt;Text::Minify::XS&lt;/a&gt; - Simple text minification&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zapp" target="_blank"&gt;Zapp&lt;/a&gt; - Plan building, job creating web app&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::LookOfDisapproval" target="_blank"&gt;Acme::LookOfDisapproval&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PAUSE::cleanup" target="_blank"&gt;App::PAUSE::cleanup&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sourcepan" target="_blank"&gt;App::sourcepan&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beam::Wire" target="_blank"&gt;Beam::Wire&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+2=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Repository" target="_blank"&gt;Dist::Zilla::Plugin::Repository&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter" target="_blank"&gt;Exporter&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::XSpp" target="_blank"&gt;ExtUtils::XSpp&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Tiny" target="_blank"&gt;Form::Tiny&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3" target="_blank"&gt;Gtk3&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::HTML5::Parser" target="_blank"&gt;HTML::HTML5::Parser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINE::Bot::API" target="_blank"&gt;LINE::Bot::API&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Romana::Perligata" target="_blank"&gt;Lingua::Romana::Perligata&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::AllUtils" target="_blank"&gt;List::AllUtils&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Box" target="_blank"&gt;Mail::Box&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MetaCPAN::Client" target="_blank"&gt;MetaCPAN::Client&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build" target="_blank"&gt;Module::Build&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=452)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH2::Cisco" target="_blank"&gt;Net::SSH2::Cisco&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Stats" target="_blank"&gt;PDL::Stats&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+4=376)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=121)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Alloy" target="_blank"&gt;Template::Alloy&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::VimColor" target="_blank"&gt;Text::VimColor&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TheSchwartz" target="_blank"&gt;TheSchwartz&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3637119549140611582/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxviii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637119549140611582"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637119549140611582"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxviii-metacpan-weekly-report-perl.html" title="(cdlxviii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>CAT: Addressing the issues, planning ahead</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-addressing-the-issues-planning-ahead"/>
  <id>tag:news.perlfoundation.org,2021-05-19:/post/cat-addressing-the-issues-planning-ahead</id>
  <published>2021-05-19T13:57:25</published>
  <updated>2021-05-19T13:57:25</updated>
  <summary>
  <![CDATA[
     This is a statement from the TPF Board of Directors. We screwed up. The TPF Board failed to make sure that the first significant test of the new CAT team and process went well. For that, **we deeply apologize**. This post will go into detail on exactly what we think went wrong, clarify a number of points, and explain how we plan to do better in the future. Our first 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a statement from the TPF Board of Directors.</p>

<p>We screwed up. The TPF Board failed to make sure that the first significant test of the new CAT team and process went well. For that, <strong>we deeply apologize</strong>.</p>

<p>This post will go into detail on exactly what we think went wrong, clarify a number of points, and explain how we plan to do better in the future.</p>

<p>Our first mistake was a focus on responding quickly to the incident reported to the CAT. Because of that, the <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">first transparency report</a> that was published was based on a draft that had not been reviewed or approved by the board. This is because the board failed to clarify the process for publishing this report.</p>

<p>Then, having moved too quickly, we were too slow to provide a correction. It took two weeks to publish <a href="https://news.perlfoundation.org/post/cat-transparency-report-updates0">the update</a>. In addition, that update did not do a good enough job of acknowledging that the first report should not have been published as is.</p>

<p>Finally, it's taken us another three weeks to publish this apology.</p>

<p>During this drawn out time, people in the Perl and Raku communities have been free to assume the worst, and a lot of misinformation has been going around uncorrected. This is entirely our fault.</p>

<p><strong>All of this has harmed our communities, harmed TPF, and harmed Perl and Raku.</strong></p>

<p>Why did this all drag out so long? Simply put, TPF is not an organization designed to move quickly. This is no one's fault. In the past, we haven't generally needed to do so. We are an entirely volunteer organization, including the board, which is made up of people spread around the world. Even finding a time where a quorum can meet is not straightforward.</p>

<p>The board has not delegated significant authority to any one individual who could have handled this incident by themselves. We have no Executive Director or any similar role. This means decision making is always done through discussion and voting.</p>

<p>Realistically, this aspect of TPF is unlikely to change. What we can do is work much harder to prevent situations that need quick responses from occurring in the first place.</p>

<h2>Transparency Report Mistakes</h2>

<p>The initial response asserted authority over aspects of the communities which are not TPF's responsibility, such as IRC, mailing lists, etc. <strong>That was simply wrong, because we do not have any authority over those services or spaces.</strong></p>

<p><strong>The initial consequence was both too harsh and poorly worded.</strong> The lifetime ban was not intended to be a "permaban", but was supposed to be an <em>indefinite</em> ban that would be lifted when the person in question demonstrated that they would not repeat their unacceptable behavior. <strong>But as was noted in the update, a lifetime ban was too harsh.</strong> And the part about this ban being reversible was simply missing from the initial report.</p>

<p>In the update, this was changed to a minimum 1 year ban. However, there were concerns in the community around this particular statement:</p>

<p>&gt; Unacceptable behavior within that 1 year period could lead to an extension or modification of the length or the terms of the ban. This includes interactions between the Subject and others in the Perl and Raku communities, even outside of TPF events and online platforms.</p>

<p>Some people interpreted "includes interactions between the Subject and others in the Perl and Raku communities" as saying that any interaction between the Subject and others in the Perl and Raku communities was grounds for extending the ban.</p>

<p>That was not the intended reading. <strong>Instead, the intended reading is that further unacceptable behavior would be grounds for extending the ban.</strong> Unacceptable behavior includes treating others in a disrespectful manner, harassment, or not respecting another person's desire to end a conversation.</p>

<h2>Other Concerns</h2>

<p><strong>A number of people in the community have stated that the Subject received no communication from the CAT before the post on the TPF blog went live. This is not true.</strong> The Subject was invited to a meeting with the CAT before the post went live, agreed to meet at a specified time, and then did not show up at that time. However, the Subject has met with the CAT since the initial report was posted.</p>

<p>Other people have expressed concern that the Subject was not allowed to present a case for their defense. The exact process of how Standards of Conduct violations should be handled is a larger topic than we can cover here. However, we do want to note that this is not a legal process, and cannot be modeled on such processes. We do not have the time, resources, or expertise to treat each case like a legal case, with a prosecution, defense, judge, and jury.</p>

<p><strong>However, we can and do commit to developing a process for handling complaints with input from the community.</strong> See later in this post for more details.</p>

<h2>Moving Forward</h2>

<p>Even though we made many mistakes, there are some parts of this affair that we do stand by.</p>

<p>Among our responsibilities, TPF runs the annual Perl and Raku Conference in North America. We cannot allow the conference to be an unsafe space. The conference is not the only space for which we are responsible, but it is our flagship. Because of that, we have an obligation to respond to Standards of Conduct complaints in order to make sure that all conference attendees feel welcome.</p>

<p>A credible complaint was made to us that ongoing problem behavior was driving one or more people from the community. The CAT investigated and felt that this complaint was correct. Because of our commitment to creating a welcoming and inclusive environment, the CAT and the board agreed that there needed to be consequences for the Subject of the investigation. We still believe that to be the case, and we are not going to reverse the final decision to issue a minimum one year ban on conference participation or participation in other TPF activities and spaces, including the TPF Slack.</p>

<p>Moreover, we are not going to dissolve the CAT or stop enforcing the Standards of Conduct, especially given that this year's conference is happening again in just four weeks.</p>

<p>Our initial postings made it sound like we think TPF gets to make decisions about every place that people gather to talk about Perl. We don't think that. We would like to help establish common expectations of what kind of behavior creates a healthy environment for interaction. We know that our missteps here have created obstacles for us to overcome, but we think the mission is worth pursuing, and that we have a responsibility to pursue it.</p>

<p>As it stands now, the CAT is in a holding pattern while the board reviews its charter and we work to define a process for handling these complaints. It won't be taking action until that's done, unless the board explicitly approves that action. We do plan to produce those documents, and we take that process seriously, both because we acknowledge the mistakes made so far and because we believe in the goal of making TPF spaces as welcoming as possible.</p>

<p>We will form an SoC team solely for the conference. They will handle incident reports during the conference. Their powers will include:</p>

<ul>
<li>Issuing warnings to conference participants.</li>
<li>Removing people from conference chat.</li>
<li>Stop a presentation if it contains unacceptable content.</li>
<li>Placing a temporary hold on publishing a presentation to YouTube.</li>
<li>Temporarily removing an already published presentation.</li>
</ul>

<p>Any further consequences, including permanently removing a presentation from YouTube, will be reviewed by the board.</p>

<p>If you would like to provide input on the charter or the process, please <a href="https://join.slack.com/t/perlfoundation/shared_invite/zt-phfb4e13-uAqqK956F0u8bTStSY8RTQ">join the #tpf-cat Slack channel</a>. (Note that this link expires on May 26. Email <a href="mailto:board@perlfoundation.org">board@perlfoundation.org</a> if you'd like to join after that time and we will invite you.)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Weekly Challenge 112</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/16#pwc112" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to convert the given absolute path to the simplified canonical path.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to convert the given absolute path to the simplified canonical path.
# The canonical path format:
#     - The path starts with a single slash '/'.
#     - Any two directories are separated by a single slash '/'.
#     - The path does not end with a trailing '/'.
#     - The path only contains the directories on the path from the root directory to the target file or directory
##
sub leading_slash{
    my($path) = @_;
    $path = "/" . $path if substr($path, 0, 1) ne "/";
    return $path;  
}

sub single_seperator{
    my($path) = @_;
    $path =~ s#\/\/#\/#;
    return $path;  
}

sub trailing_slash{
    my($path) = @_;
    chop($path) if substr($path, length($path) - 1, 1) eq "/";
    return $path; 
}

sub up_stay{
    my($path) = @_;
    my @directories = split(/\//, substr($path, 1)); 
    my @temp_path; 
    for my $d (@directories){
        push @temp_path, $d if $d ne "." &amp;&amp; $d ne ".."; 
        pop @temp_path if $d eq ".."; 
        next if $d eq ".";      
    }  
    return "/" . join("/", @temp_path);   
}

sub canonical_path{
    my($path) = @_; 
    return up_stay(trailing_slash(single_seperator(leading_slash($path))));  
} 

MAIN:{
    while(&lt;DATA&gt;){
        chomp;
        print canonical_path($_) . "\n"; 
    }  
}

__DATA__
/a/
/a/b//c/
/a/b/c/../..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
/a
/a/b/c
/a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The challenge I set for myself here was to completely avoid any use of regular 
expressions! I think I pulled it off, more or less. I am not quite sure I covered every
possible corner case, but it works for the examples given.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given $n steps to climb. Write a script to find out the distinct ways to climb 
to the top. You are allowed to climb either 1 or 2 steps at a time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given $n steps to climb
# Write a script to find out the distinct ways to climb to the top.
# You are allowed to climb either 1 or 2 steps at a time.
##
use Array::Compare;
use Algorithm::Combinatorics q/variations_with_repetition/;

sub steps{
    my($k) = @_;
    my @data = (0, 1, 2);
    my @steps;
    my $comparison = new Array::Compare();
    my $iterator = variations_with_repetition(\@data, $k);
    while(my $combination = $iterator-&gt;next()){
        if(unpack("%32C*", pack("C*", @{$combination})) == $k){
            my $step = [grep {$_ != 0} @{$combination}];
            push @steps, $step if(!grep {$comparison-&gt;compare($_, $step)} @steps);
        }
    }
    return @steps;
}

MAIN:{
    my @steps;
    @steps = steps(3);
    print "k = 3\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(4);
    print "\nk = 4\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(5);
    print "\nk = 5\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
k = 3
1 step + 2 steps
2 steps + 1 step
1 step + 1 step + 1 step

k = 4
2 steps + 2 steps
1 step + 1 step + 2 steps
1 step + 2 steps + 1 step
2 steps + 1 step + 1 step
1 step + 1 step + 1 step + 1 step

k = 5
1 step + 2 steps + 2 steps
2 steps + 1 step + 2 steps
2 steps + 2 steps + 1 step
1 step + 1 step + 1 step + 2 steps
1 step + 1 step + 2 steps + 1 step
1 step + 2 steps + 1 step + 1 step
2 steps + 1 step + 1 step + 1 step
1 step + 1 step + 1 step + 1 step + 1 step
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Rather than pursue some sort of algorithmic elegance and optimization I decided to 
try what is effectively a brute force approach. For small values of &lt;code&gt;$k&lt;/code&gt; this works quite
nicely with the above example output generated in about a second on very modest hardware
(an approximately 20 year old 450Mhz G4 Power Macintosh). Naturally we face a 
&lt;em&gt;combinatorial explosion&lt;/em&gt; for larger values of &lt;code&gt;$k&lt;/code&gt;. For larger input values consider
a graph search with memoization!&lt;/p&gt;

&lt;p&gt;Overview of this brute force approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate all arrays of numbers of length &lt;code&gt;$k&lt;/code&gt; using digits 0, 1, and 2.
&lt;/li&gt;
&lt;li&gt;Keep all those arrays that sum to &lt;code&gt;$k&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove zeroes from these matching arrays
&lt;/li&gt;
&lt;li&gt;Remove duplicate arrays 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combinations are generated using 
&lt;a href="https://metacpan.org/pod/Algorithm::Combinatorics"&gt;Algorithm::Combinatorics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Duplicate array removal is facilitated by 
&lt;a href="https://metacpan.org/pod/Array::Compare"&gt;Array::Compare&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112/"&gt;Challenge 112&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc112</id>
    <published>2021-05-16T18:10:00-04:00</published>
    <updated>2021-05-16T18:10:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Disk space usage of CPAN authors (May 16, 2021 edition)</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" type="text/html"/>
    <content type="html">&lt;p&gt;Prompted by &lt;a href="http://neilb.org/2021/05/10/delete-your-old-releases.html"&gt;this post&lt;/a&gt; on PAUSE running out of disk space, I thought I&amp;#039;d refresh my own post &amp;quot;&lt;a href="https://perlancar.wordpress.com/2019/12/26/top-50-authors-by-disk-space-on-backpan/"&gt;Top 50 authors by disk space on BackPAN&amp;quot;&lt;/a&gt; (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. &lt;/p&gt;
&lt;p&gt;&lt;h2&gt;On CPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="https://www.cpan.org/indices/find-ls.gz" rel="nofollow"&gt;https://www.cpan.org/indices/find-ls.gz&lt;/a&gt; (~14MB as of this writing), but more readily used: &lt;a href="https://www.cpan.org/indices/du-k.gz" rel="nofollow"&gt;https://www.cpan.org/indices/du-k.gz&lt;/a&gt; (~80KB as of this writing). &lt;/p&gt;
&lt;p&gt;Total size of CPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;.&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;29.0GB
&lt;/pre&gt;
&lt;p&gt; So, CPAN is not that big by today&amp;#039;s standards and I would guess that it&amp;#039;s growing at a relatively regular pace. Also the first post does not give details on the spec of PAUSE&amp;#039;s server nor the exact thing that caused the disk to be full, but anyway. &lt;/p&gt;
&lt;p&gt;Total size of &lt;tt&gt;authors/id/&lt;/tt&gt; directory: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;28.0GB
&lt;/pre&gt;
&lt;p&gt; Not much surprise here. The &lt;tt&gt;authors/id/&lt;/tt&gt; directory is where CPAN authors upload to. Outside of this directory, it&amp;#039;s mostly just indices (&lt;tt&gt;modules/&lt;/tt&gt;, &lt;tt&gt;indices/&lt;/tt&gt;) or stuffs like old scripts (&lt;tt&gt;scripts/&lt;/tt&gt;) and ancient Perl sources/binaries (&lt;tt&gt;src/&lt;/tt&gt;, &lt;tt&gt;ports/&lt;/tt&gt;). &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and $total = $F[0]; $F[1] =~ m!authors/id/./../(\w+)! or next; $sizes{$1}=$F[0]; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $sizes{$_}/1024, $sizes{$_}/$total*100 for sort { $sizes{$b}&amp;lt;=&amp;gt;$sizes{$a} } keys %sizes }&amp;#039; | head -n50
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;     SHAY 2397.8MB ( 8.4%)
   LSKATZ 1144.4MB ( 4.0%)
     RJBS  938.6MB ( 3.3%)
 XSAWYERX  778.9MB ( 2.7%)
TIEDEMANN  612.7MB ( 2.1%)
      LDS  535.6MB ( 1.9%)
    GIBUS  460.2MB ( 1.6%)
  TMILLER  362.7MB ( 1.3%)
   BINGOS  322.3MB ( 1.1%)
  ABIGAIL  321.8MB ( 1.1%)
   OLIVER  311.3MB ( 1.1%)
PERLANCAR  296.2MB ( 1.0%)
 WOLFSAGE  268.9MB ( 0.9%)
    JESSE  259.6MB ( 0.9%)
    FLORA  239.3MB ( 0.8%)
  VANSTYN  208.2MB ( 0.7%)
SUNDQUIST  192.7MB ( 0.7%)
   STEVEB  191.4MB ( 0.7%)
   DGINEV  189.7MB ( 0.7%)
 CJFIELDS  183.1MB ( 0.6%)
 PAWAPAWA  179.3MB ( 0.6%)
  NWCLARK  177.0MB ( 0.6%)
      SRI  176.7MB ( 0.6%)
      ARC  169.4MB ( 0.6%)
    ETHER  158.5MB ( 0.6%)
 JDDPAUSE  146.0MB ( 0.5%)
 DAGOLDEN  137.3MB ( 0.5%)
      KAL  133.3MB ( 0.5%)
   RENEEB  132.1MB ( 0.5%)
   ABRETT  131.8MB ( 0.5%)
     TVDW  129.2MB ( 0.5%)
   ZEFRAM  127.1MB ( 0.4%)
 GRIBUSER  124.4MB ( 0.4%)
    MOTIF  122.9MB ( 0.4%)
   STEVAN  116.0MB ( 0.4%)
 MIYAGAWA  109.7MB ( 0.4%)
  DROLSKY  109.1MB ( 0.4%)
     DAPM  109.0MB ( 0.4%)
  ATOOMIC  105.9MB ( 0.4%)
   CORION   94.1MB ( 0.3%)
 LBROCARD   93.3MB ( 0.3%)
      MGV   92.4MB ( 0.3%)
    ADAMK   88.5MB ( 0.3%)
  RGARCIA   88.1MB ( 0.3%)
     LETO   86.6MB ( 0.3%)
 BRMILLER   79.6MB ( 0.3%)
  ASLEWIS   78.7MB ( 0.3%)
      JWB   77.1MB ( 0.3%)
 GENEHACK   77.0MB ( 0.3%)
 AUTRIJUS   76.8MB ( 0.3%)
&lt;/pre&gt;
&lt;h2&gt;On BackPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="http://backpan.cpantesters.org/backpan-full-index.txt.gz" rel="nofollow"&gt;http://backpan.cpantesters.org/backpan-full-index.txt.gz&lt;/a&gt; (~14MB as of this writing) &lt;/p&gt;
&lt;p&gt;Total size of files on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;/.+ \d+ (\d+)$/ or next; $size+=$1; END { printf &amp;quot;%.1fGB\n&amp;quot;, $size/1024/1024/1024 }&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;78.5GB
&lt;/pre&gt;
&lt;p&gt; This is a 9.50% increase from Dec 26, 2019. &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;m!authors/id/./../(\w+)/.+ (\d+) (\d+)$! or next; $size{$1}+=$3; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $size{$_}/1024/1024, $size{$_}/1024/1024/73445.3*100 for sort { $size{$b}&amp;lt;=&amp;gt;$size{$a} } keys %size }&amp;#039; | head -n50
 REEDFISH 9607.0MB (13.1%)
     SHAY 2423.3MB ( 3.3%)
   LSKATZ 1771.1MB ( 2.4%)
     RJBS 1761.0MB ( 2.4%)
      ZDM 1724.6MB ( 2.3%)
PERLANCAR 1322.5MB ( 1.8%)
   AJPAGE 1218.4MB ( 1.7%)
 XSAWYERX 1185.4MB ( 1.6%)
TIEDEMANN 1090.9MB ( 1.5%)
      KAL  957.1MB ( 1.3%)
DCANTRELL  873.4MB ( 1.2%)
      LDS  767.1MB ( 1.0%)
   BINGOS  747.7MB ( 1.0%)
    JKEGL  692.0MB ( 0.9%)
      INA  639.6MB ( 0.9%)
    JESSE  625.7MB ( 0.9%)
BTMCINNES  615.8MB ( 0.8%)
   DGINEV  575.2MB ( 0.8%)
  DROLSKY  546.8MB ( 0.7%)
      SRI  539.1MB ( 0.7%)
 JDDPAUSE  520.5MB ( 0.7%)
      CHM  495.5MB ( 0.7%)
 PAWAPAWA  474.2MB ( 0.6%)
 AREIBENS  470.2MB ( 0.6%)
    GIBUS  459.7MB ( 0.6%)
  RKELSCH  452.3MB ( 0.6%)
  NWCLARK  435.6MB ( 0.6%)
  TMILLER  433.5MB ( 0.6%)
   OLIVER  428.6MB ( 0.6%)
 CJFIELDS  427.6MB ( 0.6%)
   STEVEB  426.6MB ( 0.6%)
     AMBS  397.5MB ( 0.5%)
    ADAMK  374.4MB ( 0.5%)
EARONESTY  370.6MB ( 0.5%)
 MLEHMANN  355.6MB ( 0.5%)
     JGNI  353.6MB ( 0.5%)
 DANKOGAI  349.0MB ( 0.5%)
    ETHER  339.8MB ( 0.5%)
   NHORNE  334.9MB ( 0.5%)
  ABIGAIL  327.2MB ( 0.4%)
  ASLEWIS  315.2MB ( 0.4%)
  GRAHAMC  295.0MB ( 0.4%)
  MARTIMM  293.3MB ( 0.4%)
 MIYAGAWA  290.8MB ( 0.4%)
    HISSO  276.6MB ( 0.4%)
   CORION  271.8MB ( 0.4%)
  VANSTYN  271.1MB ( 0.4%)
 WOLFSAGE  269.2MB ( 0.4%)
      ETJ  268.6MB ( 0.4%)
 DBAURAIN  267.5MB ( 0.4%)
&lt;/pre&gt;
&lt;p&gt; Some authors have mentioned that they would like to have their old releases purged from BackPAN as well, but from what I see so far this does not seem to have happened yet. &lt;/p&gt;
&lt;p&gt;Also if you see, some authors have not done much purging. I remember someone produced percentage number of an individual author&amp;#039;s CPAN/BackPAN usage as a measure of &amp;quot;cleanup&amp;quot;, but can&amp;#039;t remember who and where.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Prompted by this post on PAUSE running out of disk space, I thought I'd refresh my own post "Top 50 authors by disk space on BackPAN" (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. On CPAN Source: https://www.cpan.org/indices/find-ls.gz (~14MB as of this writing), but more … <a href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" class="more-link">Continue reading <span class="screen-reader-text">Disk space usage of CPAN authors (May 16, 2021 edition)</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1943</id>
    <published>2021-05-16T08:48:50Z</published>
    <updated>2021-05-16T08:48:50Z</updated>
    <category term="backpan"/>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl / Unix One-liner Cage Match, Part 1</title>
    <link rel="alternate" href="https://perl.com/article/perl-one-liners-part-1/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A shell (like Bash) provides built-in commands and scripting features to easily solve and automate various tasks. External commands like grep, sed, Awk, sort, find, or parallel can be combined to work with each other. Sometimes you can use Perl either as a single replacement or a complement to them for specific use cases.&lt;/p&gt;

&lt;p&gt;Perl is the most robust portable option for text processing needs. Perl has a feature rich regular expression engine, built-in functions, an extensive ecosystem, and is quite portable. However, Perl may have slower performance compared to specialized tools and can be more verbose.&lt;/p&gt;

&lt;h2 id="one-liners-or-scripts"&gt;One-liners or scripts?&lt;/h2&gt;

&lt;p&gt;For assembly-level testing of a digital signal processing (DSP) chip, I had to replicate the same scenario for multiple address ranges. My working knowledge of Linux command line was limited at that time and I didn&amp;rsquo;t know how to use sed or Awk. I used Vim and Perl for all sorts of text processing needs.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t know about Perl&amp;rsquo;s options for one-liners, so I used to modify a script whenever I had to do substitutions for multiple files. Once, I even opened the files as Vim buffers and applied a &lt;code&gt;bufdo&lt;/code&gt; command to see if that would make my workflow simpler. If I had known about Perl one-liners, I could have easily utilized find and Bash globs to make my life easier, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -i -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/0xABCD;/0x1234;/; s/0xDEAD;/0xBEEF;/&amp;#39;&lt;/span&gt; *.tests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; option will write back the changes to the source files. If needed, I can pass an argument to create a backup of the original files. For example, &lt;code&gt;-i.bkp&lt;/code&gt; will create &lt;em&gt;ip.txt.bkp&lt;/em&gt; as the backup for &lt;em&gt;ip.txt&lt;/em&gt; passed as the input file. I can also put the backups in another existing directory. The &lt;code&gt;*&lt;/code&gt; gets expanded to original filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ mkdir backups
$ perl -i&lt;span style="color:#e6db74"&gt;&amp;#39;backups/*&amp;#39;&lt;/span&gt; -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/SEARCH/REPLACE/g&amp;#39;&lt;/span&gt; *.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="powerful-regexp-features"&gt;Powerful regexp features&lt;/h2&gt;

&lt;p&gt;Perl regexps are much more powerful than either basic or extended regular expressions used by utilities. The common features I often use are non-greedy and possessive quantifiers, lookarounds, the &lt;code&gt;/e&lt;/code&gt; flag, subexpression calls, and &lt;code&gt;(*SKIP)(*FAIL)&lt;/code&gt;. Here are some examples from StackOverflow threads that I have answered over the years.&lt;/p&gt;

&lt;h3 id="skip-some-matches"&gt;Skip some matches&lt;/h3&gt;

&lt;p&gt;This question needed &lt;a href="https://stackoverflow.com/q/64368280/4082052"&gt;to convert avr-asm to arm-gnu comments&lt;/a&gt;. The starting file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; ; comment
  ;;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need to change &lt;code&gt;;&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt;, but &lt;code&gt;;&lt;/code&gt; within single or double quotes shouldn&amp;rsquo;t be affected. I can match quoted &lt;code&gt;;&lt;/code&gt; in the first branch of the alternation and use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; to not replace those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(?:\x27;\x27|&amp;#34;;&amp;#34;)(*SKIP)(*F)|;/@/&amp;#39;&lt;/span&gt; ip.txt
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; @ comment
  @;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; so often that I wish it had a shorter syntax, &lt;code&gt;(*SF)&lt;/code&gt; for example.&lt;/p&gt;

&lt;h3 id="replace-a-string-with-an-incrementing-value"&gt;Replace a string with an incrementing value&lt;/h3&gt;

&lt;p&gt;I can &lt;a href="https://stackoverflow.com/q/42554684/4082052"&gt;replace strings with incrementing value&lt;/a&gt;. The &lt;code&gt;/e&lt;/code&gt; on a substitution allows me to treat the replacement side as Perl code. Whatever that code evaluates to is the replacement. That can be a variable that I increment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;a | a | a | a | a | a | a | a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/ *\| */$i++/ge&amp;#39;&lt;/span&gt;
a0a1a2a3a4a5a6a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reverse-a-substring"&gt;Reverse a substring&lt;/h3&gt;

&lt;p&gt;I also used the &lt;code&gt;/e&lt;/code&gt; trick &lt;a href="https://stackoverflow.com/q/63681983/4082052"&gt;to reverse the text matched by a pattern&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;romarana789:qwerty12543&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+$/reverse $&amp;amp;/e&amp;#39;&lt;/span&gt;
romarana789:qwerty34521&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="do-some-arithmetic"&gt;Do some arithmetic&lt;/h3&gt;

&lt;p&gt;Adding another &lt;code&gt;/e&lt;/code&gt; to get &lt;code&gt;/ee&lt;/code&gt; means there are two rounds of Perl code. I evaluate the replacement side to get the string that I&amp;rsquo;ll evaluate as Perl code. In &lt;a href="https://stackoverflow.com/q/62241101/4082052"&gt;Arithmetic replacement in a text file&lt;/a&gt;, I need to find simple arithmetic, like &lt;code&gt;25100+10&lt;/code&gt;, and replace that with its arithmetic result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25100&lt;/span&gt;+10
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25100+1,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can do that with one &lt;code&gt;/e&lt;/code&gt; by matching the numbers and doing some Perl on the replacement side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(\d+)\+(\d+)/$1+$2/ge&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But instead of matching the numbers separately, I can match the whole expression. The match is in &lt;code&gt;$&amp;amp;&lt;/code&gt;, so the first &lt;code&gt;/e&lt;/code&gt; interpolates that to &lt;code&gt;25100+10&lt;/code&gt;. The second round runs that as Perl, which is addition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+\+\d+/$&amp;amp;/gee&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That would also make it easier to handle a set of operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;2+3 10-3 8*8 11/5&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s|\d+[+/*-]\d+|$&amp;amp;|gee&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="handling-the-newline"&gt;Handling the newline&lt;/h2&gt;

&lt;p&gt;I want to un-hypenate this text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;Hello there.
It will rain to-
day. Have a safe
and pleasant jou-
rney.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike sed and Awk, you can choose to preserve the record separator in Perl. That makes it easier to solve this problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/-\n//&amp;#39;&lt;/span&gt; msg.txt
Hello there.
It will rain today. Have a safe
and pleasant journey.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://unix.stackexchange.com/q/647648/109046"&gt;remove dashes and replace newlines with spaces&lt;/a&gt; for a similar problem and to compare the Perl solution with sed/Awk.&lt;/p&gt;

&lt;h2 id="multiline-fixed-string-substitution"&gt;Multiline fixed-string substitution&lt;/h2&gt;

&lt;p&gt;Escaping regexp metacharacters is simpler with built-in features in Perl. Combined with slurping entire input file as a single string, I can easily perform multiline fixed-string substitutions. Consider this sample input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;This is a multiline
sample input with lots
of special characters
like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say you have a file containing the lines you wish to match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a file containing the replacement string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s one way to do it with Perl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -0777 -ne &lt;span style="color:#e6db74"&gt;&amp;#39;$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                  print s/\Q$s/$r/gr&amp;#39;&lt;/span&gt; search.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in the above solution, contents of &lt;code&gt;search.txt&lt;/code&gt; and &lt;code&gt;replace.txt&lt;/code&gt; are also processed by the Perl command. Avoid using shell variables to save their contents, since trailing newlines and ASCII NUL characters will require special attention.&lt;/p&gt;

&lt;p&gt;Awk and sed do not have an equivalent option to slurp the entire input file content. Sed is Turing complete and Awk is a programming language, so you can write code for it if you wish, in addition to the code you&amp;rsquo;d need for escaping the metacharacters.&lt;/p&gt;

&lt;h2 id="better-regexp-support"&gt;Better regexp support&lt;/h2&gt;

&lt;p&gt;Some other regexp libraries have problems tied to whatever they use to implement them. GNU versions, for example, may have some bugs that other implementations may not have. Which version you use can give different results. Perl, however, has the same bugs everywhere.&lt;/p&gt;

&lt;h3 id="back-references"&gt;Back references&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=25322"&gt;problem with backreferences in glibc&lt;/a&gt; that I found and &lt;a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=26864"&gt;reported for grep&lt;/a&gt;. This bug is seen in at least GNU implementations of grep and sed. As far as I know, no implementation of Awk supports backreferences within regexp definition.&lt;/p&gt;

&lt;p&gt;I wanted to get words having two occurrences of consecutive repeated characters. This example takes some time and results in no output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does work when the nesting is unrolled or PCRE is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;[a-z]*([a-z])\1[a-z]*([a-z])\2[a-z]*&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...

$ grep -xiP &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the Perl, which is the original regexp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /^([a-z]*([a-z])\2[a-z]*){2}$/i&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="word-boundaries"&gt;Word boundaries&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/579889/109046"&gt;Why doesn&amp;rsquo;t this sed command replace the 3rd-to-last &amp;ldquo;and&amp;rdquo;?&lt;/a&gt; shows another interesting bug when word boundaries and group repetition are involved. This bug is seen in anything using the regexp stuff from glibc (as you would on Linux):&lt;/p&gt;

&lt;p&gt;This incorrectly matches because there is no word boundary in the middle of &amp;ldquo;cocoa&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ sed --version
sed &lt;span style="color:#f92672"&gt;(&lt;/span&gt;GNU sed&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.8
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/(\bco){2}/p&amp;#39;&lt;/span&gt;
cocoa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the quantifier, there&amp;rsquo;s no problem and no matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/\bco\bco/p&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /(\bco){2}/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s another example from GNU sed. This modifies the line because it thinks it finds &amp;ldquo;it&amp;rdquo; as a separate word two times after &amp;ldquo;with&amp;rdquo;, but the second is really in the middle of &amp;ldquo;sit&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ too&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the pattern to get rid of the quantifier and it works correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a

&lt;span style="color:#75715e"&gt;# Perl doesn&amp;#39;t need such workarounds&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="stay-tuned"&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll have more in Part 2, where I&amp;rsquo;ll delve into XML, JSON, and CSV.&lt;/p&gt;

&lt;h2 id="other-things-to-read"&gt;Other things to read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/303044/109046"&gt;When to use grep, sed, Awk, Perl, etc&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dave Cross&amp;rsquo;s &lt;a href="https://www.perl.com/pub/2004/08/09/commandline.html/"&gt;Perl Command-Line Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/7427262/4082052"&gt;Pitfalls of reading file into shell variable&lt;/a&gt; and my blog post on &lt;a href="https://learnbyexample.github.io/multiline-search-and-replace/"&gt;multiline fixed-string search and replace with cli tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Known bugs section in the &lt;a href="https://www.gnu.org/software/grep/manual/grep.html#Known-Bugs"&gt;GNU grep manual&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/24275070/4082052"&gt;BSD/macOS sed vs GNU sed vs the POSIX sed specification&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/13711/109046"&gt;Differences between sed on Mac OSX and other standard sed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;[image from &lt;a href="https://www.flickr.com/photos/ppetrovic72/3981925030/in/photolist-74SpzQ-bU41RP-2kNaLcQ-nxdaVA-bKtznV-bwyLmq-beJniM-58jr5R-2kNakh3-6fxhGR-nxtfo6-xDEB2-2hdZdFv-XPjLeQ-6nGeoM-29v1fwo-puR1K-2kNaM6P-nxtgeK-a2nLuc-qvDmkw-nfYDTu-6R6FQB-2i1Psj2-74Nwsu-2kNam6c-c2EsqS-2i1PsgB-nvqjK1-2i1RTpS-2i1T2RR-2i1S2Wr-2i1Psik-2gcee9c-2i1PHci-23p4pKV-2i4eukR-urRBFS-nzf35k-6R6Fmp-nvqicm-pvqAaK-6RaKuU-2i1S8S9-2i1Tbr1-2i1Psd5-2i1S9WP-2i1T2LL-nfYwEo-2i1RTnx"&gt;Dim Sum!&lt;/a&gt; on Flickr, (CC BY-NC-ND 2.0)]&lt;/em&gt;&lt;/p&gt;
</content>
    <id>https://perl.com/article/perl-one-liners-part-1/</id>
    <published>2021-05-12T02:54:23Z</published>
    <updated>2021-05-12T02:54:23Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-941270258783630818</id>
    <published>2021-05-09T21:29:00.006-07:00</published>
    <updated>2021-05-09T21:29:59.578-07:00</updated>
    <title type="text">Weekend Outage</title>
    <content type="html">&lt;p&gt;You may have noticed that some perl.org services were unavailable this weekend.&amp;nbsp; Email continued to flow, and no data was lost.&lt;/p&gt;&lt;p&gt;The short version of the story is that we were bitten by&amp;nbsp;&lt;a href="https://github.com/containerd/containerd/issues/5280#issuecomment-813707613" target="_blank"&gt;this bug.&lt;/a&gt;&amp;nbsp;and&amp;nbsp;learned a &lt;b&gt;lot&lt;/b&gt; about how Kubernetes works while we figured out what the issue was.&lt;/p&gt;&lt;p&gt;Sorry for any inconvenience!&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/941270258783630818/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html#comment-form" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html" title="Weekend Outage"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Efficient Matrix Search: The Weekly Challenge 111</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/09#pwc111" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row. Write a script to find a given integer in the matrix using an efficient search algorithm.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;      
use constant MATRIX_SIZE =&gt; 5;   

sub matrix_search{
    my($matrix, $search) = @_;
    unless(@{$matrix} == 1){  
        my $half = int(@{$matrix} / 2);      
        if($matrix-&gt;[$half]-&gt;[0] &gt; $search){
            my @matrix_reduced = @{$matrix}[0 .. $half - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] &lt; $search){
            my @matrix_reduced = @{$matrix}[$half .. @{$matrix} - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] == $search){
            return true;  
        } 
    }
    else{
        return row_search($matrix-&gt;[0], $search);  
    }    
}

sub row_search{
    my ($row, $search) = @_; 
    unless(@{$row} == 1){
        my $half = int(@{$row} / 2);  
        if($row-&gt;[$half] &gt; $search){
            my @row_reduced = @{$row}[0 .. $half - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] &lt; $search){
            my @row_reduced = @{$row}[$half .. @{$row} - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] == $search){
            return true;
        }  
    } 
    else{
        return false;
    }   
} 

MAIN:{
    my $N = [[  1,  2,  3,  5,  7 ],  
             [  9, 11, 15, 19, 20 ],   
             [ 23, 24, 25, 29, 31 ],    
             [ 32, 33, 39, 40, 42 ],   
             [ 45, 47, 48, 49, 50 ]];
    my $search = 35;
    print matrix_search($N, $search) . "\n";
    $search = 39;
    print matrix_search($N, $search) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The most efficient way to search through this sorted matrix is with a binary search. Here the binary search is implemented recursively and split into two subroutines. The first search for the right row, the second performs a binary search within the row.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to find the longest English words that don’t change when their letters are sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub max_sorted{
    my($words) = @_;
    my $max = -1;
    my @length_words; 
    for my $word (@{$words}){
        my $sorted_word = join("", sort { $a cmp $b } split(//, $word));   
        if($word eq $sorted_word &amp;&amp; length($word) &gt;= $max){
            $length_words[length($word)] = [] if(!$length_words[length($word)]); 
            push @{$length_words[length($word)]}, $word;  
            $max = length($word);   
        }   
    }
    return $length_words[$max];  
}

MAIN:{
    my @words;
    while(&lt;&gt;){
        chomp;
        push @words, lc($_);  
    }  
    print join("\n", @{max_sorted(\@words)}) . "\n";    
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl &lt; /usr/share/dict/words
adelops
alloquy
beefily
begorry
billowy
egilops
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code expects input on STDIN. Here the system dictionary is used. For this file the maximum length of words meeting the criteria is seven. There are six such words, as shown in the output.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/"&gt;Challenge 111&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;Binary Search&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc111</id>
    <published>2021-05-09T23:58:00-04:00</published>
    <updated>2021-05-09T23:58:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Checking Phone Numbers and Transposing Tabular Data the Hard Way: The Weekly Challenge 110</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/02#pwc110" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to display all valid phone numbers in the given text file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use Capture::Tiny q/capture_stdout/;
use PhoneNumberParser;

MAIN:{
    my $parser = new PhoneNumberParser();
    while(my $line = &lt;DATA&gt;){
        $line =~ s/^\s+|\s+$//g;
        my $syntax_error = capture_stdout {
            $parser-&gt;parse($line); 
        };
        print("$line\n") if !$syntax_error;
    }
}   

__DATA__
0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
 00 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; grammar.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
%token SPACE DIGIT OPEN CLOSE PLUS
%%

phone_number: prefix SPACE area_exchange_subscriber
;

prefix: DIGIT DIGIT DIGIT DIGIT
    | OPEN DIGIT DIGIT CLOSE
    | PLUS DIGIT DIGIT
;   

area_exchange_subscriber: DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^(\s)// and return ("SPACE", $1);
        s/^(\d)// and return ("DIGIT", $1);
        s/^(\()// and return ("OPEN", $1);
        s/^(\))// and return ("CLOSE", $1);
        s/^(\+)// and return ("PLUS", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp perl/PhoneNumberParser.yp
$ perl -Iperl perl/ch-1.pl
0044 1148820341
+44 1148820341
(44) 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While a set of regular expression would have done the job quite nicely I figured I’d use this problem as a reason to shake the rust off my grammar writing skills. Not that I am a master parser writer or anything, but &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; makes it easy enough!&lt;/p&gt;
&lt;p&gt;Well, easy is a bit relative I suppose. This is definitely not the simplest way of performing this task.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to transpose the contents of the given file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
sub transpose{
    my @columns = @_;
    return transpose_r([], \@columns);  
}

sub transpose_r{
    my($transposed, $remaining) = @_;
    return $transposed if(@{$remaining} == 0);   
    $transposed = transpose_row_r($transposed, $remaining-&gt;[0]);  
    shift @{$remaining}; 
    transpose_r($transposed, $remaining);  
}

sub transpose_row_r{
    my($transposed, $row) = @_;
    return $transposed if(@{$row} == 0); 
    my $index = @{$row} - 1;
    push @{$transposed-&gt;[$index]}, pop @{$row};  
    transpose_row_r($transposed, $row);    
}

MAIN:{
    my @columns;
    while(my $line = &lt;DATA&gt;){
        chomp($line);
        my @fields = split(/,/, $line);   
        push @columns, \@fields; 
    }
    my $transposed = transpose(@columns);   
    for my $i (0 .. @{$transposed} - 1){
        print join(",", @{$transposed-&gt;[$i]}) . "\n";       
    }    
}

__DATA__
name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Similar to Part 1 this is also not the easiest way to perform this task. Here the same sort of recursion is used that is used in the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/05/02"&gt;Prolog version&lt;/a&gt; of the solution to this part. That is, we recurse over the table itself and then for each row perform a separate recursion to perform the transpostion.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/"&gt;Challenge 110&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc110</id>
    <published>2021-05-02T19:03:00-04:00</published>
    <updated>2021-05-02T19:03:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 5</title>
  <summary type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-02T22:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-5"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-5</id>
  <content type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-05-01T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRAINBUZ/Acme-Brainbuz-markdown-0.001-TRIAL">Acme-Brainbuz-markdown</a></td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>0.001</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-BrowsingTableInteractively-0.001">Acme-CPANModules-BrowsingTableInteractively</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors-0.001">Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-0.01">Acme-Markdown-Embarrassing</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>Testing the MetaCPAN Markdown converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Alien-OpenMP-0.001">Alien-OpenMP</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>Encapsulate system info for OpenMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-ical-0.01">App-Greple-ical</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>Module to support Apple OS X Calendar data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/App-MigrateToTest2V0-0.01">App-MigrateToTest2V0</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Migrate your tests from Test::More to Test2::V0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/App-ProxyThat-0.001">App-ProxyThat</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.001</td>
<td>Proxy an URL from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-SQLiteUtils-0.001">App-SQLiteUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-dateseq-idn-0.003">App-dateseq-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Like dateseq, but with built-in support for Indonesian holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/App-perlimports-0.000001">App-perlimports</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Make implicit imports explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayData-0.1.0">ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Specification for ArrayData::*, modules that contains array data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayDataRoles-Standard-0.001">ArrayDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Standard set of roles for ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Constellations-0.01">Astro-Coord-Constellations</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Identify the constellation for position (RA, Dec)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Precession-0.01">Astro-Coord-Precession</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Precess coordinates between 2 epochs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMICO/Beekeeper-0.01">Beekeeper</a></td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>0.01</td>
<td>Framework for building applications with a microservices architecture</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GROUSSE/BigIP-REST-0.1">BigIP-REST</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.1</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Book-Bilingual-v0.001">Book-Bilingual</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.001</td>
<td>Data structure for a bilingual book</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BOD/Business-Stripe-WebCheckout-0.1_1">Business-Stripe-WebCheckout</a></td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>0.1_1</td>
<td>Simple way to implement payments using Stripe hosted checkout</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBOOK/CGI-Tiny-0.001">CGI-Tiny</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>0.001</td>
<td>Common Gateway Interface, with no frills</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DJERIUS/CXC-Number-0.03">CXC-Number</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.03</td>
<td>A namespace for modules which deal with numbers.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OVID/CodeGen-Protection-0.01">CodeGen-Protection</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.01</td>
<td>Safely rewrite parts of generated code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-API-0.01">Crypto-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-API-0.01">Crypto-Exchange-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-0.01">Crypto-Exchange-Binance</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-Spot-API-0.01">Crypto-Exchange-Binance-Spot-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance Spot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Data-Enum-v0.1.0">Data-Enum</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>fast, immutable enumeration classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Lookup-0.002">Data-TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Object-0.112">Data-TableData-Object</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.112</td>
<td>Manipulate data structure via table object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Devel-GlobalSub-0.01">Devel-GlobalSub</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.01</td>
<td>Automagically import a subroutine into all namespaces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CCM/File-Codeowners-0.50">File-Codeowners</a></td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>0.50</td>
<td>Read and write CODEOWNERS files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/File-Edit-0.0.1">File-Edit</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.0.1</td>
<td>A naive, probably buggy, file editor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/File-SortedSeek-PERLANCAR-0.015.0">File-SortedSeek-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015.0</td>
<td>A fork of File::SortedSeek with some more options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SANKO/Finance-Alpaca-0.9900">Finance-Alpaca</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.9900</td>
<td>Perl Wrapper for Alpaca's Commission-free Stock Trading API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CHROMATIC/Finance-Dogechain-1.20210418.2306">Finance-Dogechain</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210418.2306</td>
<td>use the dogecoin.info API from Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDN/Fork-Utils-0.01">Fork-Utils</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>set of usefull methods to work with processes and signals</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Function-Version-0.0001">Function-Version</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.0001</td>
<td>Define and use different function versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FAYLAND/Google-UULE-Generator-0.01">Google-UULE-Generator</a></td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>0.01</td>
<td>Generate Google UULE param</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-ExtendedKeys-0.01">Hash-ExtendedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>Hash Keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-RestrictedKeys-0.01">Hash-RestrictedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>restricted hash keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VRAG/JSON-Pointer-Extend-0.01">JSON-Pointer-Extend</a></td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>0.01</td>
<td>JSON::Pointer extension module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/LINQ-Database-0.000_001">LINQ-Database</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.000_001</td>
<td>LINQ extension for working with databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Lagrange-0.1.3">Lagrange</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>Perl extension for Lagrange Theory and Applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-CPUInfo-0.001">Lib-CPUInfo</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to PyTorch's libcpuinfo C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-PWQuality-0.001">Lib-PWQuality</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to the libpwquality C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NATARAJ/Lingua-StarDict-Writer-0.01">Lingua-StarDict-Writer</a></td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>0.01</td>
<td>A module that allows to create a StarDict dictionary</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/Linux-MCELog-0.01">Linux-MCELog</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to extract memory failure information from MCELog UNIX domain socket on Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/List-AllUtils-Null-0.001">List-AllUtils-Null</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>List subroutines that treat undef as contagious unknown, like null in SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/List-Keywords-0.01">List-Keywords</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a selection of list utility keywords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RVOSA/MIDI-SP404sx-v1.0.0">MIDI-SP404sx</a></td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>v1.0.0</td>
<td>Convert between MIDI files and SP404sx patterns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DFUG/Minion-Backend-Redis-0.002">Minion-Backend-Redis</a></td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>0.002</td>
<td>Redis backend for Minion job queue</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojo-OBS-Client-0.01">Mojo-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>Mojolicious client for the OBS WebSocket remote plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARASIK/Mojo-Reactor-Prima-1.00">Mojo-Reactor-Prima</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1.00</td>
<td>Prima event loop backend for Mojo::Reactor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DERIV/Myriad-0.001">Myriad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>async microservice framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Net-Protocol-OBSRemote-0.01">Net-Protocol-OBSRemote</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>event-loop agnostic protocol to control OBS via the WebSocket plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABIGAIL/OEIS-2021041201">OEIS</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2021041201</td>
<td>Fetch values from sequences of the OEIS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOOJONIO/OpenAPI-Generator-0.01">OpenAPI-Generator</a></td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>0.01</td>
<td>generate openapi definition</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/OpenMP-Environment-1.0.0">OpenMP-Environment</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1.0.0</td>
<td>Perl extension managing OpenMP variables in %ENV within a script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLICEASE/Package-Checkpoint-0.01">Package-Checkpoint</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>Checkpoint the scalar, array and hash values in a package for later restoration</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Perl-Oberon-0.1.3">Perl-Oberon</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>an Oberon compiler system written in Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASDAGO/Perl-PrereqScanner-Scanner-DistZilla-PluginBundle-0.001">Perl-PrereqScanner-Scanner-DistZilla-PluginBundle</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>scan for required plugins in Dist::Zilla plugin bundles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LTM/Plack-App-WWW-0.01">Plack-App-WWW</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>Serve cgi-bin and static files from root directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.001_001">Pod-Coverage-TrustMe</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001_001</td>
<td>Pod::Coverage but more powerful</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Collection-0.001">Role-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Iterator-0.001">Role-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>A basic iterator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KEEDI/SMS-Send-KR-Aligo-0.004">SMS-Send-KR-Aligo</a></td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>0.004</td>
<td>An SMS::Send driver for the smartsms.aligo.in SMS service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Finance-SE-IDX-0.001">Sah-Schemas-Finance-SE-IDX</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Schemas related to the Indonesian Stock Exchange</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/INA/See-0.01">See</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>Debug See</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Fermi-0.1.2">Stats-Fermi</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.2</td>
<td>Perl extension for Fermi, Boltzmann potentials</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Hawking-0.1.1">Stats-Hawking</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Perl extension for a Hawking Boltzmann Model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-0.05-TRIAL">Sub-Genius</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.05</td>
<td>manage concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-TRIAL-0.01">Sub-Genius-TRIAL</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.01</td>
<td>module for managing concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.01">Syntax-Keyword-Match</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a match/case syntax for perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/TOML-XS-0.01">TOML-XS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Parse TOML with XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-0.1.3">TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.3</td>
<td>Specification for TableData::*, modules that contains table data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableDataRoles-Standard-0.007">TableDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>Standard set of roles for TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-TickitWidget-0.001">Text-Table-TickitWidget</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>View table data on the terminal using Tickit::Widget::Table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Trek-20210424">Tree-Trek</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210424</td>
<td>Trek through a tree one character at a time.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Trim-20210401">Trim</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210401</td>
<td>Trim various things by removing leading and trailing whitespace.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/UniEvent-Socks-0.1.0">UniEvent-Socks</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>Socks support for UniEvent's tcp handles.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Unicode-Confuse-0.01">Unicode-Confuse</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Win32-Symlinks-0.03">Win32-Symlinks</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.03</td>
<td>A maintained, working implementation of Perl symlink built in features for Windows.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.01">XS-Parse-Keyword</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>XS functions to assist in parsing keyword syntax</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>50</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>16</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Brainbuz-markdown BRAINBUZ 0.001 turns baubles into trinkets Acme-CPANModules-BrowsingTableInteractively PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-Markdown-Embarrassing CONTRA 0.01 Testing the MetaCPAN Markdown converter Alien-OpenMP ETJ 0.001 Encapsulate system info for OpenMP App-Greple-ical UTASHIRO 0.01 Module to support Apple OS … <a href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1941</id>
    <published>2021-05-01T00:37:07Z</published>
    <updated>2021-05-01T00:37:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
