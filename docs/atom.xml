<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-01-25T18:10:59Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl - mockgen helper perl script</title>
    <link rel="alternate" href="https://dev.to/takakd/mockgen-helper-perl-script-1g5l" type="text/html"/>
    <content type="html">&lt;p&gt;Created the helper script of &lt;code&gt;mockgen&lt;/code&gt; because typing &lt;code&gt;mockgen&lt;/code&gt; command takes time and effort.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Ref.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/golang/mock"&gt;golang/mock&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Takahiro Kudo</name>
    </author>
    <id>https://dev.to/takakd/mockgen-helper-perl-script-1g5l</id>
    <published>2021-01-25T12:59:26Z</published>
    <updated>2021-01-25T12:59:26Z</updated>
    <category term="go"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The Trouble with Reference Counting</title>
    <link rel="alternate" href="https://www.perl.com/article/the-trouble-with-reference-counting/" type="text/html"/>
    <content type="html">

&lt;p&gt;Perl uses a simple form of garbage collection (GC) called &lt;a href="https://en.wikipedia.org/wiki/Reference_counting"&gt;reference counting&lt;/a&gt;. Every variable created by a Perl program has a &lt;a href="https://perldoc.perl.org/perlguts#Reference-Counts-and-Mortality"&gt;refcnt&lt;/a&gt; associated with it. If the program creates a reference to the variable, Perl increments its &lt;code&gt;refcnt&lt;/code&gt;. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; are either decremented or they&amp;rsquo;re reclaimed as well if no other references to them remain.&lt;/p&gt;

&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;

&lt;p&gt;Reference counting has some nice properties. As GC is deterministic, it is usually not a cause of variable program performance from run-to-run. Whenever Perl leaves a subroutine or a block, it will check for variables to reclaim. This spreads the cost of GC over program runtime, keeping Perl responsive.&lt;/p&gt;

&lt;p&gt;Another benefit of timely reclamation is it minimizes memory fragmentation as variables created in the same scope tend to be reclaimed at the same time, allowing Perl to more efficiently reuse the memory (it exhibits good &lt;a href="https://en.wikipedia.org/wiki/Locality_of_reference#Spatial_and_temporal_locality_usage"&gt;spatial locality of reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Predictable and timely GC provides a useful mechanism for destructors. A popular example is that &amp;ldquo;lexical&amp;rdquo; filehandles are automatically closed when they go out scope; Perl programs do not need to call &lt;a href="https://perldoc.perl.org/functions/close"&gt;close&lt;/a&gt; on filehandles themselves, and because the filehandle is closed immediately, there is no risk of contention from a new filehandle being opened on the same file before the original is reclaimed.&lt;/p&gt;

&lt;h2 id="how-expensive-is-reference-counting"&gt;How expensive is reference counting?&lt;/h2&gt;

&lt;p&gt;Different reference counting operations have different costs. Consider the following Perl subroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update_customer&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($customer, $values) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s called with two arguments; a customer object and a hashref of values. The &lt;code&gt;my&lt;/code&gt; declaration causes Perl to add the lexical variables &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; to the savestack (here it performs an optimization, adding them as one group entry instead of two). Each variable is initialized with a &lt;code&gt;refcnt&lt;/code&gt; of 1. Each argument is then assigned to its corresponding lexical variable which increments the &lt;code&gt;refcnt&lt;/code&gt; of the reference&amp;rsquo;s corresponding value. This is cheap as the Perl interpreter just increments the value&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; in its header struct.&lt;/p&gt;

&lt;p&gt;When the subroutine returns a scope exit occurs, and &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; must be reclaimed. Their group is popped off the savestack. Perl fetches the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt;, saves it to a local variable, and tests it to see if it is greater than 1. As the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt; is 1, it must be reclaimed. Here Perl performs another optimization, essentially doing &lt;code&gt;undef $customer&lt;/code&gt; leaving it ready to be reused next time the subroutine is called. As &lt;code&gt;$customer&lt;/code&gt; is a reference, the referenced customer object&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; must also be fetched and tested. In this case it&amp;rsquo;s greater than 1, so Perl decrements the local &lt;code&gt;refcnt&lt;/code&gt; and stores it back in the customer object&amp;rsquo;s header struct. Perl then performs the same decrement routine for &lt;code&gt;$values&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t have any data on how long each operation takes, or estimates of how long Perl spends on reference counting activities during the course of a program. Nor is such data available for other reference counting dynamic languages like Python and PHP. Some research has shown that reference counting increases GC runtime by 30% compared to tracing&lt;sup&gt;1, 2&lt;/sup&gt;, but it&amp;rsquo;s not clear how representative that is of Perl&amp;rsquo;s optimized routines.&lt;/p&gt;

&lt;h2 id="drawbacks"&gt;Drawbacks&lt;/h2&gt;

&lt;p&gt;Reference counting scales linearly insofar as every variable created increases the GC overhead. In programming we can usually do better than that, for example by using tricks like minimizing the number of function calls via batch processing.&lt;/p&gt;

&lt;p&gt;Only objects that have a &lt;a href="https://perldoc.perl.org/perlobj#Destructors"&gt;DESTROY&lt;/a&gt; method need timely reclamation, yet Perl  treats &lt;em&gt;every&lt;/em&gt; variable like it needs it, incrementing and decrementing reference counts live. Whenever Perl exits a block it must check for and clean up any unreferenced variables.&lt;/p&gt;

&lt;p&gt;Reference counting usually spreads the cost of GC over runtime, however deterministic and timely reclamation means that the potential cost of any given scope exit is unbounded. Imagine Perl returning from a subroutine which reclaims the final reference to a &lt;em&gt;huge&lt;/em&gt; graph of data, triggering an avalanche of reclamation&amp;rsquo;s. Perl &lt;em&gt;has&lt;/em&gt; to clean it all up immediately; a tracing GC could choose not to.&lt;/p&gt;

&lt;p&gt;Reference counts increase memory use a little as every variable has a &lt;code&gt;refcnt&lt;/code&gt; integer associated with it. Compared to tracing schemes, reference counting actually saves memory by not requiring a larger heap to avoid thrashing&lt;sup&gt;3&lt;/sup&gt;. However circular references can increase memory use a lot via memory leaks (if detected the developer can &lt;a href="https://metacpan.org/pod/Scalar::Util#weaken"&gt;weaken&lt;/a&gt; the reference to fix this).&lt;/p&gt;

&lt;p&gt;Reference counts can trigger unneeded &lt;a href="https://en.wikipedia.org/wiki/Copy-on-write"&gt;Copy-On-Write&lt;/a&gt;. Imagine a sub-process loops through a data set it inherited from its parent: &lt;code&gt;for my $foo (@foos) { ... }&lt;/code&gt;. This temporarily increments each element&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt;, triggering a memory copy. This isn&amp;rsquo;t quite as calamitous as it sounds as each variable&amp;rsquo;s header struct  is 16 bytes. Since a page is usually 4KB, only one copy is needed per 296 objects (assuming they&amp;rsquo;re contiguous). The copy can also be avoided by not creating the lexical reference by accessing each member directly: &lt;code&gt;for my $i (0..$#foos) { $foos[$i] ... }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Speculating a little, reference counting may increase cache misses as the frequent changes in counts displace valuable data.&lt;/p&gt;

&lt;h2 id="opportunity"&gt;Opportunity?&lt;/h2&gt;

&lt;p&gt;At first glance it seems like Perl can save runtime by switching to a tracing GC scheme and not checking or updating reference counts, but periodically reclaiming unused variables. Observe that most variables are &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)"&gt;short-lived&lt;/a&gt;; therefore the cost of tracing should scale better than linearly (as only long-lived variables are traceable).&lt;/p&gt;

&lt;p&gt;However to avoid breaking a lot of code, Perl would still need to honor timely reclamation of objects with &lt;code&gt;DESTROY&lt;/code&gt; methods. Perhaps it could follow a hybrid model, reference counting only those objects that need it, but that would reduce the performance benefits of tracing GC, and it complexifies the interpreter adding conditional branches for reference-counted variables. As objects may gain or lose a&lt;code&gt;DESTROY&lt;/code&gt; method during runtime, the interpreter would also need to be able promote and demote variables from the reference counting scheme.&lt;/p&gt;

&lt;p&gt;A further wrinkle is that references to objects with &lt;code&gt;DESTROY&lt;/code&gt; methods must &lt;em&gt;also&lt;/em&gt; be reference counted (and references to those references and so on). Imagine an array of database handles: the array itself must be reference counted so that when it is reclaimed, Perl can decrement the database handles&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; and possibly reclaim them as well.&lt;/p&gt;

&lt;p&gt;A more promising line of inquiry may be to review Perl&amp;rsquo;s reference counting code for further optimization opportunities. Common techniques for improving reference counting are well known&lt;sup&gt;4&lt;/sup&gt; and research has shown that the aforementioned 30% runtime gap can be closed&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Before starting that effort, we should collect data on how much time Perl is spending on GC. Two Perl core developers, Todd Rinaldo and Tony Cook have told me they think Perl spends very little time on GC relative to other operations like memory allocation, IO and so on. If 2% of the runtime is spent on GC, reducing it by 30% is nothing to brag about. It may be the case that for Perl at least, better opportunities lie elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Tony Cook, Dave Mitchell and Todd Rinaldo for their insights on Perl&amp;rsquo;s GC behavior.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/1005686.1005693"&gt;Myths and Realities: The Performance Impact of Garbage Collection&lt;/a&gt;, Blackburn, Cheng &amp;amp; McKinley 2004.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/2258996.2259008"&gt;Down for the Count? Getting Reference Counting Back in the Ring&lt;/a&gt;, Shahriyar, Blackburn &amp;amp; Frampton 2012.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/rej/gcbook/"&gt;Garbage Collection: Algorithms For Automatic Dynamic Memory Management&lt;/a&gt;, Jones &amp;amp; Lins 1999 pp 43.&lt;/li&gt;
&lt;li&gt;Ibid. pp 44-74.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <id>https://www.perl.com/article/the-trouble-with-reference-counting/</id>
    <published>2021-01-25T12:05:23Z</published>
    <updated>2021-01-25T12:05:23Z</updated>
  </entry>
  <entry>
    <title>Free Lunch? Yes, Please. Perl job in Vienna.</title>
    <link rel="alternate" href="https://job.perl.careers/74d" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of the largest product and price comparison platforms in German-speaking countries is on the hunt for a Perl programmer who wants to use their skills to eradicate inflated prices. The successful candidate will relish the chance to join a team that attributes nearly two decades of success to an uncompromising commitment to transparency, objectivity, and quality content.</div>
    </content>
    <id>https://job.perl.careers/74d</id>
    <published>2021-01-25T10:00:49Z</published>
    <updated>2021-01-25T10:00:49Z</updated>
  </entry>
  <entry>
    <title>We aren’t Mal-teasing—this is the Perl job you’ve been waiting for! Perl in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/kgm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">We have an international client looking to hire for their Malta office. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools. Sun, smiles, scuba … if you haven’t emailed already to jump on this opportunity, then what are you waiting for?</div>
    </content>
    <id>https://job.perl.careers/kgm</id>
    <published>2021-01-25T10:00:48Z</published>
    <updated>2021-01-25T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/b1n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/b1n</id>
    <published>2021-01-25T10:00:47Z</published>
    <updated>2021-01-25T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Guten Tag, Senior Perl Developers! Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/xkq" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">While work for this client is currently 100% remote, their main office is in St. Ingbert, Germany with a satellite office in Munich. With a friendly, sociable crew, a rooftop deck, and all the table soccer and air hockey you can handle. The ideal candidate should be confident using Modern Perl, in particular happy with DBIx::Class and Moose/Moo.</div>
    </content>
    <id>https://job.perl.careers/xkq</id>
    <published>2021-01-25T10:00:46Z</published>
    <updated>2021-01-25T10:00:46Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/o8c" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/o8c</id>
    <published>2021-01-25T10:00:45Z</published>
    <updated>2021-01-25T10:00:45Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. The private ticket will be cheaper (EUR 30). People who register in time and transfer the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-01-25T10:00:44Z</published>
    <updated>2021-01-25T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-01-25T10:00:43Z</published>
    <updated>2021-01-25T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Regular Expression: Master Manipulator of Text</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 4, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-01-25T10:00:42Z</published>
    <updated>2021-01-25T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 28, 2021;  7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-01-25T10:00:41Z</published>
    <updated>2021-01-25T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-01-25T10:00:40Z</published>
    <updated>2021-01-25T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Using the ActiveState Platform</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275282889" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275282889</id>
    <published>2021-01-25T10:00:39Z</published>
    <updated>2021-01-25T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Testing in Perl course</title>
    <link rel="alternate" href="https://courses.code-maven.com/p/testing-in-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">During the last week I made some nice progress recording the Testing in Perl course. So if you are a Perl developer who wants to make sure their code works well, this course can help you learn all the tools you need.</div>
    </content>
    <id>https://courses.code-maven.com/p/testing-in-perl</id>
    <published>2021-01-25T10:00:38Z</published>
    <updated>2021-01-25T10:00:38Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Josephus problem</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/24/aoc2016-19-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Never heard of it before, thanks to Flavio, I learnt something new today.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/24/aoc2016-19-josephus/</id>
    <published>2021-01-25T10:00:37Z</published>
    <updated>2021-01-25T10:00:37Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/15 - Chinese Reminder Theorem - again!</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/23/aoc2016-15-crt-again/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thank you Flavio for the refresher, it is always fun to revisit.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/23/aoc2016-15-crt-again/</id>
    <published>2021-01-25T10:00:36Z</published>
    <updated>2021-01-25T10:00:36Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/11 - Optimization</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/22/aoc2016-11-optimization/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/22/aoc2016-11-optimization/</id>
    <published>2021-01-25T10:00:35Z</published>
    <updated>2021-01-25T10:00:35Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/11 - Part 2 solution</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/19/aoc2016-11-part2-solution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Setup search using AstarX.pm</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/19/aoc2016-11-part2-solution/</id>
    <published>2021-01-25T10:00:34Z</published>
    <updated>2021-01-25T10:00:34Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-01-25T10:00:33Z</published>
    <updated>2021-01-25T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2021.03 Course Topped</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/01/18/2021-03-course-topped/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/01/18/2021-03-course-topped/</id>
    <published>2021-01-25T10:00:32Z</published>
    <updated>2021-01-25T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Loop controls: next, last, continue, break</title>
    <link rel="alternate" href="https://perlmaven.com/loop-controls-next-last" type="text/html"/>
    <id>https://perlmaven.com/loop-controls-next-last</id>
    <published>2021-01-25T10:00:31Z</published>
    <updated>2021-01-25T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/01/18/PWC096/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis seems to follow the philosophy "Don't re-invent the wheel". I highly recommend the use of CPAN as much as possible.</div>
    </content>
    <id>https://wlmb.github.io/2021/01/18/PWC096/</id>
    <published>2021-01-25T10:00:30Z</published>
    <updated>2021-01-25T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Distance</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_96__Reverse_Distance.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog post is one place where we get to explore more than just Perl solutions. Must Read.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_96__Reverse_Distance.html</id>
    <published>2021-01-25T10:00:29Z</published>
    <updated>2021-01-25T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 096 - Raku</title>
    <link rel="alternate" href="http://blogs.perl.org/users/joan_mimosinnet/2021/01/perl-weekly-challenge-096---raku.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Joan showing an OO solution to the "Edit Distance" task. Highly Recommended.</div>
    </content>
    <id>http://blogs.perl.org/users/joan_mimosinnet/2021/01/perl-weekly-challenge-096---raku.html</id>
    <published>2021-01-25T10:00:28Z</published>
    <updated>2021-01-25T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Levenshtein distance</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/01/18/PerlWeeklyChallenge96.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca sharing the power of Raku. It reminded me of my days of struggling with Raku.</div>
    </content>
    <id>https://fluca1978.github.io/2021/01/18/PerlWeeklyChallenge96.html</id>
    <published>2021-01-25T10:00:27Z</published>
    <updated>2021-01-25T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words and Edit Distance (and Decorators in Perl)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is teaching us the decorator pattern in Perl this week. You don't want to miss this.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html</id>
    <published>2021-01-25T10:00:26Z</published>
    <updated>2021-01-25T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/01/22/perl-weekly-challenge/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome back Lance with a new shiny website. Cool solutions promoting TDD.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/01/22/perl-weekly-challenge/</id>
    <published>2021-01-25T10:00:25Z</published>
    <updated>2021-01-25T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC096 - Edit Distance</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/21/pwc096-edit-distance/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Straight implementation of pseudocode from Wikipedia. No fancy stuff. A pure Perl solution.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/21/pwc096-edit-distance/</id>
    <published>2021-01-25T10:00:24Z</published>
    <updated>2021-01-25T10:00:24Z</updated>
  </entry>
  <entry>
    <title>PWC096 - Reverse Words</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/20/pwc096-reverse-words/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio using the power of regex to solve the "Reverse Words" task. Nice and easy to follow.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/20/pwc096-reverse-words/</id>
    <published>2021-01-25T10:00:23Z</published>
    <updated>2021-01-25T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 096 -- Reverse Words and Edit distance.</title>
    <link rel="alternate" href="https://gugod.org/2021/01/pwc-096-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min exploring Dynamic Programing to deal with the Levenshtein distance. Must Read.</div>
    </content>
    <id>https://gugod.org/2021/01/pwc-096-en/</id>
    <published>2021-01-25T10:00:22Z</published>
    <updated>2021-01-25T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Going The Distance: Perl Weekly Challenge #96</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/01/19/going-the-distance-perl-weekly-challenge-96.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave presenting Levenshtein Distance solution in a unique way. Highly Recommended.</div>
    </content>
    <id>https://jacoby.github.io/2021/01/19/going-the-distance-perl-weekly-challenge-96.html</id>
    <published>2021-01-25T10:00:21Z</published>
    <updated>2021-01-25T10:00:21Z</updated>
  </entry>
  <entry>
    <title>The Wagner–Fischer-Price, Backwards</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/25/the-wagner-fischer-price-backwards/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin introducing the Wagner-Fisher algorithm, which is new to me. Need to revisit.</div>
    </content>
    <id>https://colincrain.com/2021/01/25/the-wagner-fischer-price-backwards/</id>
    <published>2021-01-25T10:00:20Z</published>
    <updated>2021-01-25T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Reversed Distance with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/reversed-distance.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I love it when Arne does both Perl and Raku together. You get to see the similarities. Must Read.</div>
    </content>
    <id>https://raku-musings.com/reversed-distance.html</id>
    <published>2021-01-25T10:00:19Z</published>
    <updated>2021-01-25T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 096</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/24" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam showing Perl a adaptation of a Haskell implementation deaing with the "Edit Distance" task. An interesting approach.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/24</id>
    <published>2021-01-25T10:00:18Z</published>
    <updated>2021-01-25T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Edit Distance</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/23/perl-weekly-challenge-96-edit-distance/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail presenting the mathematical side of the task "Edit Distance". Must Read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/23/perl-weekly-challenge-96-edit-distance/</id>
    <published>2021-01-25T10:00:17Z</published>
    <updated>2021-01-25T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/22/perl-weekly-challenge-96-reverse-words/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail showing off the power of one-liners. Incredible.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/22/perl-weekly-challenge-96-reverse-words/</id>
    <published>2021-01-25T10:00:16Z</published>
    <updated>2021-01-25T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 96</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-096/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron promoting Raku and encouraging following the official documentation. A short and sweet solutions.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-096/</id>
    <published>2021-01-25T10:00:15Z</published>
    <updated>2021-01-25T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 094</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-094" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-094</id>
    <published>2021-01-25T10:00:14Z</published>
    <updated>2021-01-25T10:00:14Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 096</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-096" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Reverse Words" and "Edit Distance" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-096</id>
    <published>2021-01-25T10:00:13Z</published>
    <updated>2021-01-25T10:00:13Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 097</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks - "Caesar Cipher" and "Binary Substrings". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-097</id>
    <published>2021-01-25T10:00:12Z</published>
    <updated>2021-01-25T10:00:12Z</updated>
  </entry>
  <entry>
    <title>UV Grant Report for 2020-12</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant-report-uv-2020-12" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant-report-uv-2020-12</id>
    <published>2021-01-25T10:00:11Z</published>
    <updated>2021-01-25T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Regarding the closure of rt.cpan</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Martin picked up a hot topic to discuss. Very useful if you have published module to CPAN.</div>
    </content>
    <id>http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html</id>
    <published>2021-01-25T10:00:10Z</published>
    <updated>2021-01-25T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Perl Steering Council, meeting #003</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting discussion among the top brass. You don't want to miss it.</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html</id>
    <published>2021-01-25T10:00:09Z</published>
    <updated>2021-01-25T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Pull Request Club 2020 Report</title>
    <link rel="alternate" href="https://kyzn.org/posts/prc-2020-report/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please checkout Kivanc's annual report for the year 2020. Great work Kivanc, keep it up.</div>
    </content>
    <id>https://kyzn.org/posts/prc-2020-report/</id>
    <published>2021-01-25T10:00:08Z</published>
    <updated>2021-01-25T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Roles, h'uh, what are they good for?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jesse_shy/2021/01/roles-huh-what-are-they-good-for.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jesse brought up a good old topic and shares his views with us.</div>
    </content>
    <id>http://blogs.perl.org/users/jesse_shy/2021/01/roles-huh-what-are-they-good-for.html</id>
    <published>2021-01-25T10:00:07Z</published>
    <updated>2021-01-25T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Toby sharing his Perl skill to automate mood lighting. Worth reading for fun.</div>
    </content>
    <id>http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html</id>
    <published>2021-01-25T10:00:06Z</published>
    <updated>2021-01-25T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Debugging a web application in Perl</title>
    <link rel="alternate" href="https://phoenixtrap.com/index.php/2021/01/23/debugging-a-web-application-in-perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark talking about the most difficult subject. Debugging web app is the most difficult task of any dev.</div>
    </content>
    <id>https://phoenixtrap.com/index.php/2021/01/23/debugging-a-web-application-in-perl/</id>
    <published>2021-01-25T10:00:05Z</published>
    <updated>2021-01-25T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Perl 5.34.0 *will be released* in May</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258879.html" type="text/html"/>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258879.html</id>
    <published>2021-01-25T10:00:04Z</published>
    <updated>2021-01-25T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 6; DevTo: 7; Perl.com: 0; PerlAcademy: 1; PerlHacks: 0; PerlMaven: 1; Reddit: 18; TPF: 3;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2021-01-25T10:00:03Z</published>
    <updated>2021-01-25T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://perlweekly.com/metacpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 218 uploads to CPAN of 164 distinct distributions by 95 different authors. Number of distributions with link to VCS: 135. Number of distros with CI: 73. Number of distros with bugtracker: 117.</div>
    </content>
    <id>https://perlweekly.com/metacpan.html</id>
    <published>2021-01-25T10:00:02Z</published>
    <updated>2021-01-25T10:00:02Z</updated>
  </entry>
  <entry>
    <title>A Replacement for PPM - ActiveState's New Perl Ecosystem</title>
    <link rel="alternate" href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">While PPM is gone, the need to install dependencies without requiring a local build environment remains. ActivePerl allowed developers to get up and running quickly by delivering hundreds of popular modules with a single installation. Both use cases are now addressed in &lt;a href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition"&gt;ActiveState’s new ecosystem&lt;/a&gt;.</content>
    <id>https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition</id>
    <published>2021-01-25T10:00:01Z</published>
    <updated>2021-01-25T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#496 - Statocles vs Hugo</title>
    <link rel="alternate" href="http://perlweekly.com/archive/496.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I think it is unfair to compare the two, but I couldn't stop myself. Let me make this crystal clear, I am talking about two static site builder. Statocles written in Perl and Hugo written in Go.</p>
<p>Why am I even talking about Hugo in the Perl weekly newsletter?</p>
<p>Well, to me it doesn't matter whether it is Perl or any other language. What matters is which one gets the job done quickly. I hear it is matter of personal choice as well. I was first introduced to <a href="https://github.com/gohugoio/hugo">Hugo</a> when I wrote my <a href="https://www.perl.com/article/how-to-become-cpan-contributor/">first article</a> for <a href="https://www.perl.com/">Perl.com</a> in 2018. If I am not mistaken, they still use Hugo. I was so impressed with Hugo that I used it to build <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a> website. During the peak of my CPAN contributions, I came to know about <a href="https://metacpan.org/pod/Statocles">Statocles</a>. I loved it but never got the opportunity to use it. However I did become one of the contributors to the project. My contribution wasn't ground-breaking, but I feel proud to see my name in the list of contributors. All credit goes to Doug Bell for the coolest tool. For those who don't know him, he leads the team running and managing the <a href="https://cpantesters.org/">CPAN Testers</a> since Barbie took a break.</p>
<p>Last week, I saw a new website <a href="https://perl.kiwi/">perl.kiwi</a> become the talk of the town. It is built using Statocles as the idea behind the website is to promote Perl. I am going to keep an eye out for fun stuff related to Perl. I loved the domain name. Congratulations Lance Wicks.</p>
<p>Talking about promoting Perl, Sawyer shared the details of the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html">3rd Perl Steering Council meeting</a>. There was another big annoucement by Sawyer with regard to the release date of <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258817.html">Perl v5.34</a>. We should all be thankful to the PSC members for their time and efforts.</p>
<p>Last time I forgot to mention about the <a href="https://kyzn.org/posts/prc-2020-report/">Pull Request Club 2020 Report</a> by Kivanc Yazan. Kudos to Kivanc for running the club for 2 years now. Keep it up. You are doing a great service to the Perl community.</p>
<p>Last but not the least, please don't forget to watch the weekly show, "Perl Town Hall" by Will Braswell on <a href="https://www.facebook.com/groups/perlprogrammers">Facebook</a>. It doesn't suit my timezone but I do watch it the recordings later.</p>
<p>Enjoy the rest of the newsletter</p></div>
    </content>
    <id>http://perlweekly.com/archive/496.html</id>
    <published>2021-01-25T10:00:00Z</published>
    <updated>2021-01-25T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>&lt;p&gt;Perl Weekly Challenge 096&lt;/p&gt;</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/24#pwc096" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a string $S. Write a script to reverse the order of words in the given string.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub reverse_words{
    my($words) = @_; 
    if(@{$words}){
        my $word = $words-&gt;[0];
        my $a = reverse_words([@{$words}[1 .. (@{$words} - 1)]]);
        $a-&gt;[@{$a}] = $word;
        return $a;
    }
    return [];
}

MAIN:{
    my($S, $reversed);
    $S = "The Weekly Challenge";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
    
    $S = "    Perl and   Raku are  part of the same family  ";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Challenge Weekly The
family same the of part are Raku and Perl 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My solution is done using recursion with the self-imposed restrictions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do not use the &lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;only access array elements in an ordinary way, without using any functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than being a bit over engineered it works as required!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given two strings $S1 and $S2. Write a script to find out the minimum operations required to convert $S1 into $S2. The operations can be insert, remove or replace a character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Memoize;
memoize("edit_distance");

sub edit_distance{
    my($s, $t) = @_;
    if(length($s) == 0){
        return length($t);
    }
    if(length($t) == 0){
        return length($s);
    }
    my($s0, $t0) = (substr($s, 0, 1), substr($t, 0, 1));
    if($s0 eq $t0){
        return edit_distance(substr($s, 1), substr($t, 1));
    }
    my @sorted_distances = sort {$a &lt;=&gt; $b} (
        edit_distance($s, substr($t, 1)),
        edit_distance(substr($s, 1), $t),
        edit_distance(substr($s, 1), substr($t, 1)),
    );
    return 1 + $sorted_distances[0];
}

MAIN:{
    my $distance;
    
    $distance = edit_distance("kitten", "sitting");
    print "$distance\n";

    $distance = edit_distance("sunday", "monday");
    print "$distance\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code is a pretty faithful Perl translation of the algorithm presented in Haskell in the &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance#Computing_Levenshtein_distance"&gt;Wikipedia article&lt;/a&gt; for &lt;em&gt;Levenshtein_distance&lt;/em&gt;. Like the code for Part 1 of this weeks Challenge this is a recursive procedure.&lt;/p&gt;
&lt;p&gt;As noted in that article this algorithm is inefficient in that substrings are checked repeatedly. This code can be made more efficient by the use of &lt;em&gt;Memoization&lt;/em&gt; so that the results for each substring are saved and re-used. In the interest of improving performance &lt;code&gt;Memoize&lt;/code&gt; is used with the &lt;code&gt;edit_distance&lt;/code&gt; function. While the code is now more efficient it really doesn’t have much effect on execution time for these short test strings. However, the code is now ready to handle much more significant sized strings.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/Memoize"&gt;Memoization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc096</id>
    <published>2021-01-24T01:26:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5068327869800457164</id>
    <published>2021-01-23T23:28:00.002+01:00</published>
    <updated>2021-01-23T23:28:59.409+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxv) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/autodie-2.34" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;autodie&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Replace functions with ones that succeed or die with lexical scope &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.34&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.32 was 1 year, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/NICS/Catmandu-1.2015" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Catmandu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a data toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.2015&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.2014 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/XAOC/Gtk3-0.038" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Gtk3&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the 3.x series of the gtk+ toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.038&lt;/strong&gt; on 2021-01-20&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.037 was 10 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.16" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.16&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.00 was 7 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/IO-Async-0.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 8 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SULLR/IO-Socket-SSL-2.069" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.069&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 2.068 was 9 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BRTASTIC/Kelp-1.05" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Kelp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A web framework light, yet rich in nutrients. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20210120" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210120&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SRI/Mojolicious-8.71" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.71&lt;/strong&gt; on 2021-01-17&lt;/li&gt;  &lt;li&gt;Votes: 441&lt;/li&gt;  &lt;li&gt;Previous version: 8.70 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SALVA/Net-SFTP-Foreign-1.93" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SFTP::Foreign&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Secure File Transfer Protocol client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.93&lt;/strong&gt; on 2021-01-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.91 was 6 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/CHRISN/Net-SSLeay-1.90" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SSLeay&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for using OpenSSL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.90&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.88 was 1 year, 8 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.116" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.116&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 157&lt;/li&gt;  &lt;li&gt;Previous version: 0.114 was 8 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHAY/perl-5.32.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;perl-5.32.1&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- The Perl 5 language interpreter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.032001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 365&lt;/li&gt;  &lt;li&gt;Previous version: 5.32.0 was 7 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JCRISTY/PerlMagick-7.0.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::Magick&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - objected-oriented Perl interface to ImageMagick. Use it to read, manipulate, or write an image or image sequence from within a Perl script. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.0.10&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 6.9.11 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSTROUT/SQL-Abstract-2.000001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SQL::Abstract&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate SQL from Perl data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 69&lt;/li&gt;  &lt;li&gt;Previous version: 1.87 was 7 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.21&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.20 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MIYAGAWA/Twiggy-0.1026" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Twiggy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - AnyEvent HTTP server for PSGI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1026&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.1025 was 6 years, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5068327869800457164/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html" title="(cccxxv) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5393193259115390142</id>
    <published>2021-01-23T23:25:00.006+01:00</published>
    <updated>2021-01-23T23:25:56.321+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdli) metacpan weekly report - LWP</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/pod/LWP"&gt;LWP&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/23 22:23:25 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Calendar::Japanese::Holiday" target="_blank"&gt;Calendar::Japanese::Holiday&lt;/a&gt; - Japanese holidays in calender&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Earthquake_EEW_Decoder" target="_blank"&gt;Earthquake_EEW_Decoder&lt;/a&gt; - Perl extension for JMA Earthquake Early Warning data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::Signal" target="_blank"&gt;Mojo::IOLoop::Signal&lt;/a&gt; - Non-blocking signal handler&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::QuoteLike" target="_blank"&gt;PPIx::QuoteLike&lt;/a&gt; - Parse Perl string literals and string-literal-like things.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Minify::XS" target="_blank"&gt;Text::Minify::XS&lt;/a&gt; - Simple text minification&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PAUSE::cleanup" target="_blank"&gt;App::PAUSE::cleanup&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PPI::Dumper" target="_blank"&gt;App::PPI::Dumper&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Audio::Scan" target="_blank"&gt;Audio::Scan&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cairo" target="_blank"&gt;Cairo&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Std" target="_blank"&gt;Config::Std&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace::More" target="_blank"&gt;Devel::Trace::More&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME::Kit" target="_blank"&gt;Email::MIME::Kit&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/LWP" target="_blank"&gt;LWP&lt;/a&gt;&amp;nbsp;(+3=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=83)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=441)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Web::Auth" target="_blank"&gt;Mojolicious::Plugin::Web::Auth&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::CA" target="_blank"&gt;Mozilla::CA&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsgPack::Raw" target="_blank"&gt;MsgPack::Raw&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+2=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sidef" target="_blank"&gt;Sidef&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::RunAlone" target="_blank"&gt;Sys::RunAlone&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockTime" target="_blank"&gt;Test::MockTime&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unix::Statgrab" target="_blank"&gt;Unix::Statgrab&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Scraper" target="_blank"&gt;Web::Scraper&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Tutorial" target="_blank"&gt;XS::Tutorial&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5393193259115390142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html" title="(cdli) metacpan weekly report - LWP"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6975381453978214772</id>
    <published>2021-01-23T23:22:00.001+01:00</published>
    <updated>2021-01-23T23:22:32.050+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-01-23 22:21:47 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65782772" target="_blank"&gt;Mojo::UserAgent - Inspect the Content-Encoding header before decoding&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65834921" target="_blank"&gt;How do you catch a buggy sig die handler if the mechanism to debug code that everyone uses overrides it?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65816094" target="_blank"&gt;How to do chained regex in Perl?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65837342" target="_blank"&gt;How to do sum of hash reference slice?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65829505" target="_blank"&gt;How can I get my Perl one-liner to show only the first regex match in the file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65771589" target="_blank"&gt;How do I extract quoted portions from a text in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65778688" target="_blank"&gt;HTTP::Daemon: How to set a custom value for Server in HTTP-Header?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65767267" target="_blank"&gt;How to enforce Perl create unsigned integer overflows without warnings, e.g. that $a+$b is simply calculated as ($a+$b) modulo 2**64?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65770199" target="_blank"&gt;sed unterminated address regex&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65823375" target="_blank"&gt;Speed in replacing a set of words in text in perl&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6975381453978214772/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6975381453978214772"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6975381453978214772"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxv-stackoverflow-perl-report.html" title="(cdlxxv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Debugging a web application in Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/debugging-a-web-application-in-perl-34pm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I spent this week debugging an issue with an internal web tool that our company’s support team relies upon to pull up information about our customers, making changes on their behalf to their subscriptions of the various packages and services that we offer. Trying to view one particular customer — one! — would always crash the application, leaving an unhelpful message that said, “Internal Server Error: Please contact the server administrator. More information about this error may be available in the server error log.” Unfortunately, there was only a single line in the log, “Error 500,” which only indicated that yes, an error had happened on the server. No details from the application.</p>

<p>Luckily, this application was written in Perl, an expressive programming language with a rich ecosystem of open-source libraries. It also has a built-in debugger mode that can run your program step by step, line by line. Any program that can be run from the text command line can be paused, have its variables and objects examined, new code interactively entered, and then continue its execution as if nothing had happened.</p>

<p>However, this was a web application that assumed it was running in a web server environment, and the customer’s information was in our production database, safe from prying eyes (including curious developers like me) due to financial compliance rules. I could not simply run this program on my desktop and reproduce the problem with this one customer — I had to somehow tease out more information from a running system and report it back using the only tool available: the server error log mentioned above.</p>

<p>But still, the Perl debugger approach was appealing. Could I somehow get the application to log each line of code as it was executed? Could I then see what was running the moment before it crashed, the offending line printed in the log like a smoking gun that had just murdered its victim? And assuming that the problem was in our code and not in the millions of lines of third-party code it depended upon, could I filter out all the noise?</p>

<p>The answer, thankfully, was yes; since the debugger itself is written in Perl and designed to be extended or replaced, I could add code at the beginning of our application that intercepted each line as it was run, throw out anything that came from a file outside of our application’s directory folder, and then report the rest (along with helpful line numbers) to the error log. Then turn on the “debug” switch on the web server running the application, and voilà, the log would dutifully fill up with (slower, more memory-consuming) code reported by the debugger.</p>

<p>We set up our staging server to use the branch of code with debugging enabled, and then instructed the application to display the problematic customer's records. As expected, the error log immediately began filling up with line after line of our application’s code and then bang, crashed right after issuing a particular database query for services tied to the account. I had my smoking gun! After extracting the query and running it on a redacted copy of our database, I found that it was returning some 1.9 million rows of data as it retrieved provisioning, billing, and renewal history for every service owned by the customer. This was far too many than necessary — the application only cares about current status, and it was running out of memory as it created service objects for each row.</p>

<p>The database expert on my team was able to adjust the query to return only current information, and after a quick test on the redacted database, the change is now waiting for quality assurance testing before launching to our production servers. The debugging code branch will be saved until it’s needed again, and our team was once again grateful that we were working in such a powerful programming language as Perl.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/debugging-a-web-application-in-perl-34pm</id>
    <published>2021-01-23T16:14:24Z</published>
    <updated>2021-01-23T16:14:24Z</updated>
    <category term="perl"/>
    <category term="debugging"/>
    <category term="webdev"/>
    <category term="programming"/>
  </entry>
  <entry>
  <title>Grant Report: RakuAST 2020-12 by Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-rakuast-2020-12"/>
  <id>tag:news.perlfoundation.org,2021-01-23:/post/grant-rakuast-2020-12</id>
  <published>2021-01-23T05:34:28</published>
  <updated>2021-01-23T05:34:28</updated>
  <summary>
  <![CDATA[
     Jonathan Worthington has gotten back to working on the RakuAST grant, and has provided us with the update below. Note that publishing of this report has been delayed due to technical difficulties, with no fault to Jonathan. Anyway, here is the report: After a couple of months break to take care of myself, I took some gentle steps back into working on my RakuAST grant during December. It's not much, 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthington has gotten back to working on the RakuAST grant, and has provided us with the update below.</p>

<p>Note that publishing of this report has been delayed due to technical difficulties, with no fault to Jonathan.</p>

<p>Anyway, here is the report:</p>

<hr />

<p>After a couple of months break to take care of myself, I took some gentle steps back into working on my RakuAST grant during December. It's not much, but it's all work that needs doing at some point.</p>

<p>After a rebase of the <code>rakuast</code> branch onto Rakudo <code>master</code> - mostly straightforward - I reviewed some RakuAST commits made by other Rakudo contributors while I was away. One of them mostly added support for state variables; I fixed a small shortcoming to allow it to pass a failing test case.</p>

<p>Further to that, I implemented RakuAST nodes and wired them up to the new compiler frontend for the following features:</p>

<ul>
<li>Contextualizers</li>
<li>Quoted method calls</li>
<li>Meta-method calls</li>
<li>The <code>if</code>/<code>unless</code> and <code>while</code>/<code>until</code> statement modifiers</li>
</ul>

<p>Those together unblocked 12 further specification test files. I'm hopeful of having rather more to report by the end of January.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>UV Grant Report for 2020-12</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-uv-2020-12"/>
  <id>tag:news.perlfoundation.org,2021-01-23:/post/grant-report-uv-2020-12</id>
  <published>2021-01-23T05:30:05</published>
  <updated>2021-01-23T05:30:05</updated>
  <summary>
  <![CDATA[
     Paul "LeoNerd" has submitted his report for his work on the UV grant. It looks like the grant is close to finishing. Due to technical problems, publishing of this report has been delayed, with no fault to Paul. He write Almost all the handle types are now done; except for `uv_async_t`. I'm not really sure it makes sense to wrap this from Perl, because it's inherently dealing with multi-threading issues 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul "LeoNerd" has submitted his report for his work on the UV grant. It looks like the grant is close to finishing.</p>

<p>Due to technical problems, publishing of this report has been delayed, with no fault to Paul.</p>

<p>He write (with slight redactions due to formatting and bringing a conversation into a one-shot report):</p>

<hr />

<p>Almost all the handle types are now done; except for <code>uv_async_t</code>.</p>

<p><a href="https://trello.com/c/skhwh5go/5-add-remaining-handle-types">https://trello.com/c/skhwh5go/5-add-remaining-handle-types</a></p>

<p>I'm not really sure it makes sense (or is even possible) to wrap this from Perl, because it's inherently dealing with multi-threading issues which don't really come up. I suppose it (or at least the tests for it) could be optional on a (working) thready perl.</p>

<p>Almost all the request types are now done; except for any of the
filesystem ones: <a href="https://trello.com/c/ypnmhsbc/6-add-request-types">https://trello.com/c/ypnmhsbc/6-add-request-types</a></p>

<p>Those should be relatively simple to write, if a little awkward to test some of them because they'll require filesystem mutations at testing time.</p>

<p>If we're not doing <code>uv_async_t</code>, then there's probably no need to wrap the thread pool functions, for similar reasons</p>

<p><a href="https://trello.com/c/iibm7dts/7-investigate-possibility-of-thread-pool">https://trello.com/c/iibm7dts/7-investigate-possibility-of-thread-pool</a></p>

<p>There's a few small bits and pieces on UDP sockets that I skipped for now because they seem like they're not going to be used much, but I could probably do them for completeness: <a href="https://trello.com/c/ngcqndaz/13-remaining-udp-methods">https://trello.com/c/ngcqndaz/13-remaining-udp-methods</a>.</p>

<p>And finally, there's some more argument types that need handling for <code>uv_process_t</code>, except that libuv itself doesn't really document them clearly enough: <a href="https://trello.com/c/ezjdr22c/14-consider-uvprocess-stdio-stream-args">https://trello.com/c/ezjdr22c/14-consider-uvprocess-stdio-stream-args</a></p>

<p><a href="https://github.com/libuv/libuv/issues/3025">I have an issue open with them about it</a>.</p>

<p>Aside from those, I think we're basically done with code writing.</p>

<p>Code is currently sitting at <a href="https://github.com/p5-uv/p5-uv/tree/leonerd/v2">https://github.com/p5-uv/p5-uv/tree/leonerd/v2</a>.</p>

<hr />

<p>Paul also published a <a href="https://metacpan.org/release/PEVANS/UV-1.901-TRIAL">Trial release on CPAN</a>, and later a <a href="https://metacpan.org/release/UV">production release</a>.</p>

<p>Paul concludes:</p>

<p>&gt; I've also prodded the Mojo folks about it, so they can have a go at the Mojo::Reactor for it too. That all helps demonstrate the "Completeness Criteria" part of the original proposal.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 96: Reverse Words and Edit Distance (and Decorators in Perl)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-96-reverse-words-and-edit-distance-and-decorators-in-perl.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10059</id>
    <published>2021-01-22T23:34:51Z</published>
    <updated>2021-01-22T23:40:43Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 96 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-096/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (January 24, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Reverse Words</h2>

<p><em>You are given a string <code>$S</code>.</em></p>

<p><em>Write a script to reverse the order of words in the given string. The string may contain leading/trailing spaces. The string may have more than one space between words in the string. Print the result without leading/trailing spaces and there should be only one space between words.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $S = "The Weekly Challenge"
Output: "Challenge Weekly The"
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $S = "    Perl and   Raku are  part of the same family  "
Output: "family same the of part are Raku and Perl"
</code></pre>

<h3>Reverse Words in Raku</h3>

<p>we simply chain the <a href="https://docs.raku.org/routine/words">words</a>, <a href="https://docs.raku.org/routine/reverse">reverse</a> and <a href="https://docs.raku.org/routine/join">join</a> method invocations:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // "    Perl and   Raku are  part of the same family  ";
say $input.words.reverse.join(" ");
</code></pre>

<p>Example output:</p>

<pre><code>$ raku reverse-words.raku
family same the of part are Raku and Perl
~
$ raku reverse-words.raku "Don't ask what your country can do for you, ask what you can do for   your country  "
country your for do can you what ask you, for do can country your what ask Don't
</code></pre>

<p>Of course, this short script can easily be transformed into a Raku one-liner:</p>

<pre><code>$ raku -e '@*ARGS[0].words.reverse.join(" ").say;' "    Perl and   Raku are  part of the same family  "
family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Perl</h3>

<p>In Perl, we use the same idea, just chaining function calls instead of method invocations:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $input = shift // "    Perl and   Raku are  part of the same family  ";
say join " ", reverse split /\s+/, $input;
</code></pre>

<p>Output:</p>

<pre><code>$ perl reverse-words.pl
family same the of part are Raku and Perl
</code></pre>

<p>Of course, we could also make it as a Perl one-liner:</p>

<pre><code>$ perl -E 'say join " ", reverse split /\s+/, shift' "    Perl and   Raku are  part of the same family  "
family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Scala</h3>

<p>Using the same idea as in Raku, i.e. chaining the <code>split</code>, <code>reverse</code>, and <code>mkString</code> method invocations:</p>

<pre><code>object reverseWords extends App {
  val in = "    Perl and   Raku are  part of the same family  "
  println(in.split("\\s+").reverse.mkString(" "))
}
</code></pre>

<p>Output:</p>

<pre><code>family same the of part are Raku and Perl
</code></pre>

<h3>Reverse Words in Python</h3>

<p>Whether using a function-call syntax (in Perl), or a method-invocation syntax (in Raku and Scala), our three programs above all use a functional programming approach chaining pure functions and using immutable data, more precisely a data flow or pipeline pattern. In this programming model, each piece of data is channeled through a series of successive transformations in which  the returned data elements produced by one of the operations are fed to the next operation, and so on. This is possible because each operation of the pipeline is a &#8220;pure function&#8221; that takes an input and produces an output to be processed by the next operation.</p>

<p>This is not easily transposable in Python, because some operators acts are pure function as in the three other languages, and some others (such as <code>reverse</code> in our case) are not pure functions and modify the data in-place instead of sending back the modified data as a return value. It would certainly be possible to work around the limitation in Python (using for example <em>maps</em>), but this is much less natural than in the three other languages, and it probably doesn&#8217;t make much sense to try to force the data flow model into Python. Therefore, our Python implementation will use intermediate temporary variables, as in traditional procedural programming.</p>

<pre><code>def reverse_words(in_str):
    words = in_str.split()
    words.reverse()
    return " ".join(words)

input = "    Perl and   Raku are  part of the same family  "
print(reverse_words(input))
</code></pre>

<p>Output:</p>

<pre><code>$ python3 reverse-words.py
Perl and Raku are part of the same family
</code></pre>

<h2>Task 2: Edit Distance</h2>

<p><em>You are given two strings <code>$S1</code> and <code>$S2</code>.</em></p>

<p><em>Write a script to find out the minimum operations required to convert <code>$S1</code> into <code>$S2</code>. The operations can be insert, remove or replace a character. Please check out <a href="https://en.wikipedia.org/wiki/Edit_distance">Wikipedia page</a> for more information.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $S1 = "kitten"; $S2 = "sitting"
Output: 3

Operation 1: replace 'k' with 's'
Operation 2: replace 'e' with 'i'
Operation 3: insert 'g' at the end
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $S1 = "sunday"; $S2 = "monday"
Output: 2

Operation 1: replace 's' with 'm'
Operation 2: replace 'u' with 'o'
</code></pre>

<p>In computer science, <em>edit distance</em> is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations (usually single character edits) required to transform one string into the other. When the operations permettied are insertion, deletion, or substitution of a character, edit distance is usually called <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>, named after the Soviet mathematician Vladimir Levenshtein.</p>

<p>The Levenshtein distance between two strings <em>a</em>, <em>b</em> (of length |<em>a</em>| and |<em>b</em>| respectively) is given by <code>lev ⁡ (*a*, *b*)</code> where</p>

<p><img alt="levenstein_dist.jpg" src="http://blogs.perl.org/users/laurent_r/levenstein_dist.jpg" width="568" height="261" class="mt-image-none" style="" /></p>

<p>where the tail of some string <em>x</em> is a string of all but the first character of <em>x</em> and <code>*x*[*n*]</code> is the <em>n</em>th character of the string <em>x</em>, starting with character 0.</p>

<p>Note that, in the above formula, the first element in the minimum corresponds to deletion, the second to insertion and the third to replacement.</p>

<p>This definition can lead directly to a naïve recursive implementation. The problem, though, is that such naïve implementation would have an exponential time complexity and would unusable even for moderately large strings (especially if the strings are markedly different). As an example, the naïve (not optimized) version of the Raku recursive subroutine implementation presented below for the pseudo random strings &#8220;LMIjkHFSAE&#8221; and &#8220;dmqkdjfERZG&#8221; takes more than one minute:</p>

<pre><code>$ time raku edit-distance.raku
11 LMIjkHFSAE - dmqkdjfERZG
-
real    1m15,592s
user    0m0,015s
sys     0m0,046s
</code></pre>

<p>The reason for that is that the recursive subroutine is called many times with the same input in the process. If we can <em>cache</em> (or <em>memoize</em>) the results to avoid having to recompute again and again the same result, then the time to compute the Levenshtein distance falls dramatically and becomes roughly proportional to the product of the two string lengths. This still makes the process quite inefficient for very long strings (such as DNA strands), but it&#8217;s usually OK for strings representing words in common human languages.</p>

<p>The recursive approach is a form of top-down dynamic programming, i.e. it breaks a large problem into smaller and smaller subproblems, until the subproblems can be solved. Other solutions use bottom-up dynamic programming, i.e. start from small elementary problems and expand them to larger problems; they often use a matrix or table and iterate over the matrix to expand it. The bottom-up approach also as a time complexity roughly proportional to the product of the two string lengths. So, while the two approaches may not be equivalent (the bottom-up approach is likely to be faster), they have the same time complexity, which means that they essentially scale up essentially the same way when the size of the strings increase. Here, we will use the recursive (top-down) approach.</p>

<p>Note that our implementations will work the other way around, from right to left. The only reason for this is that I had written about four years ago an <code>edit-distance</code> program in Perl, and I found it easier to start from that implementation.</p>

<h3>Edit Discance in Raku</h3>

<p>We present two implementations of a cached implementation of the recursive solution.</p>

<h4>Memoized Version (Raku)</h4>

<p>First, we implement a &#8220;naïve&#8221; <code>edit-distance</code> recursive function and use the Raku <a href="https://modules.raku.org/dist/Memoize:cpan:ELIZABETH">Memoize</a> module (written by my friend Elizabeth Mattijsen as a port of Mark-Jason Dominus&#8217;s equivalent Perl module) to automatically perform the caching of already computed distances:</p>

<pre><code>use v6;
use Memoize;

sub edit-distance (Str $left, Str $right) {
    # If one of the substrings is empty, return the length of the other
    return $right.chars unless $left;
    return $left.chars unless $right;
    my $shortened-left  = substr $left,  0, *-1;
    my $shortened-right = substr $right, 0, *-1;

    # If the last chars are the same, we ignore them
    # and call edit-distance on shortened strings    
    return edit-distance $shortened-left, $shortened-right 
        if substr($left, *-1) eq substr($right, *-1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit-distance($left,       $shortened-right), #insert
        edit-distance($shortened-left,  $right),      #remove
        edit-distance($shortened-left,  $shortened-right)  #replace
    );
}    

memoize("edit-distance");

my @test-pairs = (
    [ &lt; kitten sitting &gt;],
    [ &lt; Monday Friday &gt; ],
    [ &lt; Sunday Saturday &gt; ],
    [ &lt; January February &gt; ],
    [ &lt; November December &gt; ],
    [ &lt; constitutionally anticonstitutional &gt; ],
    [ &lt; LMIjkHFSAE dmqkdjfERZG &gt;],
);
for @test-pairs -&gt; @test {
    my ($str1, $str2) = @test;
    print edit-distance($str1, $str2), " $str1 - $str2\n";
}
</code></pre>

<p>This program produces the following output:</p>

<pre><code>$ time raku edit-distance.raku
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG
-
real    0m1,452s
user    0m0,015s
sys     0m0,046s
</code></pre>

<p>Note how much faster this program is (1.45 seconds for 8 tests), compared to the non-optimized version with only the last test discussed above (about 1 min 15 sec for only one string pair).</p>

<h4>Implementing A Cache Manually in Raku</h4>

<p>I have often said that I eschew using off-the-shelf modules in the context of a programming challenge because I feel that it is sort of cheating. In the case of the above solution, I used the <code>Memoize</code> module because it wasn&#8217;t really part of the Levenshtein distance algorithm, but only a performance optimization. In that case in point, however, that performance optimization is crucial (making the difference between a usable and a not usable implementation), so that I feel it is necessary to show a solution that implements the cache manually. This might be more useful for a beginner or a student wishing to understand how caching or memoizing works:</p>

<pre><code>use v6;

my %cache;

sub edit-distance (Str $left, Str $right) {
    sub cache-distance (Str $l, Str $r) {
        %cache{"$l;$r"} = edit-distance($l, $r) unless %cache{"$l;$r"}:exists;
        return %cache{"$l;$r"};
    }

    # If one of the substrings is empty, return the length of the other
    return $right.chars unless $left;
    return $left.chars unless $right;
    my $shortened-left  = substr $left,  0, *-1;
    my $shortened-right = substr $right, 0, *-1;
    # say " $shortened-left  $shortened-right";

    # If the last chars are the same, we ignore them
    # and call edit-distance on shortened strings
    if substr($left, *-1) eq substr($right, *-1) { 
        return cache-distance $shortened-left, $shortened-right;
    }

    # Else find the minimum between the three operations
    return 1 + min(
        cache-distance($left,       $shortened-right), #insert
        cache-distance($shortened-left,  $right),      #remove
        cache-distance($shortened-left, $shortened-right)  #replace
    );
}    

my @test-pairs = (
    [ &lt; kitten sitting &gt;],
    [ &lt; Monday Friday &gt; ],
    [ &lt; Sunday Saturday &gt; ],
    [ &lt; January February &gt; ],
    [ &lt; November December &gt; ],
    [ &lt; constitutionally anticonstitutional &gt; ],
    [ &lt; LMIjkHFSAE dmqkdjfERZG &gt;],
);
for @test-pairs -&gt; @test {
    my ($str1, $str2) = @test;
    print edit-distance($str1, $str2), " $str1 - $str2\n";
}
</code></pre>

<p>Note that I have implemented the cache management as a separate lexically-scoped subroutine, <code>cache-distance</code>, because there were four recursive calls to <code>edit-distance</code> in the body of the <code>edit-distance</code> and I did not want to implement the cache management code four times.</p>

<p>This script displays the following output:</p>

<pre><code>$ time raku edit-distance_cache.raku
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,398s
user    0m0,015s
sys     0m0,031s
</code></pre>

<p>We see another significant performance improvement, probably because it is more efficient to tailor a cache for a specific problem, compared to a general solution such as using the <code>Memoize</code> module (and perhaps also because it takes some time to compile the module, not quite sure).</p>

<h3>Edit Distance in Perl</h3>

<h4>Memoized Version (Perl)</h4>

<p>First, we implement a &#8220;naïve&#8221; <code>edit-distance</code> recursive function and use the core Perl <code>Memoize</code> module (written by Mark-Jason Dominus) to automatically perform the caching of already computed distances:</p>

<pre><code>use strict;
use warnings;
use feature 'say';
use Memoize;

sub min {
    my $rv = shift;
    for my $tmp (@_) {
        $rv = $tmp if $tmp &lt; $rv;
    }
    return $rv;
}

sub edit_distance {
    my ($left, $right) = @_;

    # If one of the substrings is empty, return the length of the other
    return length $right unless $left;
    return length $left  unless $right;

    my $shortened_left  = substr $left,  0, -1;
    my $shortened_right = substr $right, 0, -1;
    # In the last chars are the same, we ignore them
    # and call edit_distance on shortened strings
    return edit_distance ($shortened_left, $shortened_right) if substr($left, -1) eq substr($right, -1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit_distance($left, $shortened_right), #insert
        edit_distance($shortened_left, $right), #remove
        edit_distance($shortened_left, $shortened_right) #replace
    );
}

memoize("edit_distance");

my @test_pairs = (
    [ qw&lt;kitten sitting&gt;],
    [ qw&lt;Monday Friday&gt; ],
    [ qw&lt;Sunday Saturday&gt; ],
    [ qw&lt;January February&gt; ],
    [ qw&lt;November December &gt; ],
    [ qw&lt;constitutionally anticonstitutional &gt; ],
    # [ qw&lt;LMIjkHFSAE dmqkdjfERZG&gt;],
);
for my $ar (@test_pairs) {
    my ($str1, $str2) = @$ar;
    say edit_distance($str1,$str2), " $str1 - $str2 ";
}
</code></pre>

<p>This program displays the following output and time measures:</p>

<pre><code>$ time perl edit-distance.pl
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,103s
user    0m0,015s
sys     0m0,046s
</code></pre>

<h4>Creating a Decorator in Perl</h4>

<p>As I said before, I don&#8217;t like to use ready-made modules in programming challenges (which the reason why I also implemented myself the <code>min</code> subroutine). We could manually implement some form of wrapper around the naïve <code>edit_distance</code> subroutine, as we more or less did in Raku, to manage the cache. However, I thought it would be more fun to implement a <em>decorator</em> in order to modify the behavior of the <code>edit_distance</code> subroutine.</p>

<p>Originally, a <em>decorator</em> was a OO-programming <em>design pattern</em> making it possible to assign new properties or responsibilities to an object, without modifying that object&#8217;s class. The idea has later been expanded to other programming models. For example, PEP 318 in Python introduced decorators as functions that are designed to change the behavior of other functions without modifying the code of these other functions. This may be useful, for example, to modify the behavior of a legacy or complex function that you don&#8217;t want to change, or to modify in some specific case the behavior of a module that you otherwise don&#8217;t want to change because other programs may be using that module. It is this extended meaning of decorators that we mean here. So, let&#8217;s assume we don&#8217;t want to modify the code of our edit_distance subroutine (perhaps it&#8217;s complicated and I spent so much time debugging it that I want to leave it alone). Rather than changing the code of that subroutine, we will <em>decorate</em> it to add to it the caching functionality.</p>

<p>Contrary to Python, Perl doesn&#8217;t have a specific syntax for decorators, but, as we will see, it is relatively easy to use higher-order functions and typeglobs to implement our own decorators.</p>

<p>First, we define a <code>decorate</code> subroutine which takes as input parameter a reference to the subroutine to be cached and returns an anonymous subroutine that checks the cache and returns the value in the cache if it exists, and else calls the subref it has received as a parameter:</p>

<pre><code>sub decorate {
    my $coderef = shift;  # the argument is a ref to edit_distance
    my %cache;
    return sub {
        my ($l, $r) = @_;
        $cache{"$l;$r"} = $coderef-&gt;(@_) unless exists $cache{"$l;$r"};
        return $cache{"$l;$r"};
    }
}
</code></pre>

<p>Note that we define the <code>%cache</code> in the <code>decorate</code> subroutine. The anonymous subroutine thus acts as a closure and keeps its access to the cache.</p>

<p>Then, we replace the original <code>edit_distance</code> subroutine with the anonymous subroutine returned by <code>decorate</code> in the main symbol table:</p>

<pre><code>{
    # local scope for the deactivation of the redefine warning
    no warnings 'redefine';
    # we replace the edit-distance subroutine by its 
    # decorated version in the main symbol table
    *main::edit_distance = decorate(\&amp;edit_distance);
}
</code></pre>

<p>Here, <code>*main::edit_distance</code> is a typeglob representing the entry of the original <code>edit_distance</code> subroutine in the symbol table. Before that, we deactivate the <code>redefine</code> warning (to avoid a warning upon the subroutine definition, and we do that in a code block to limit the scope of the deactivation to this code line.</p>

<p>Now, whenever the code will call the <code>edit_distance</code> subroutine, it is the anonymous subroutine produced by the <code>decorate</code> subroutine that will be called instead. Thus, the <code>edit_distance</code> subroutine seen by the rest of the program is now memoized (the edit distances are cached), although we did not change anything to the code defining it. That subroutine is called recursively four times in its own code, but we don&#8217;t need to charge all these subroutine calls.</p>

<p>The overall program now looks like this:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub min {
    my $rv = shift;
    for my $tmp (@_) {
        $rv = $tmp if $tmp &lt; $rv;
    }
    return $rv;
}

sub edit_distance {
    my ($left, $right) = @_;

    # If one of the substrings is empty, return the length of the other
    return length $right unless $left;
    return length $left  unless $right;

    my $shortened_left  = substr $left,  0, -1;
    my $shortened_right = substr $right, 0, -1;
    # In the last chars are the same, we ignore them
    # and call edit_distance on shortened strings
    return edit_distance ($shortened_left, $shortened_right) if substr($left, -1) eq substr($right, -1);

    # Else find the minimum between the three operations
    return 1 + min(
        edit_distance($left, $shortened_right), #insert
        edit_distance($shortened_left, $right), #remove
        edit_distance($shortened_left, $shortened_right) #replace
    );
}

# The decorator returns the edit_distance subroutine wrapped in 
# code lines performing the caching of values
sub decorate {
    my $coderef = shift;
    my %cache;
    return sub {
        my ($l, $r) = @_;
        $cache{"$l;$r"} = $coderef-&gt;(@_) unless exists $cache{"$l;$r"};
        return $cache{"$l;$r"};
    }
}

{
    # local scope for the deactivation of the redefine warning
    no warnings 'redefine';
    # we replace the edit-distance subrouytine by its 
    # decorated version in the main symbol table
    *main::edit_distance = decorate(\&amp;edit_distance);
}

my @test_pairs = (
    [ qw&lt;kitten sitting&gt; ],
    [ qw&lt;Monday Friday&gt; ],
    [ qw&lt;Sunday Saturday&gt; ],
    [ qw&lt;January February&gt; ],
    [ qw&lt;November December &gt; ],
    [ qw&lt;constitutionally anticonstitutional &gt; ],
    [ qw&lt;LMIjkHFSAE dmqkdjfERZG&gt;],
);
for my $ar (@test_pairs) {
    my ($str1, $str2) = @$ar;
    say edit_distance($str1,$str2), " $str1 - $str2 ";
}
</code></pre>

<p>This script produces the following output and execution times:</p>

<pre><code>$ time perl  edit-distance_decorator.pl
3 kitten - sitting
3 Monday - Friday
3 Sunday - Saturday
4 January - February
3 November - December
6 constitutionally - anticonstitutional
11 LMIjkHFSAE - dmqkdjfERZG

real    0m0,064s
user    0m0,000s
sys     0m0,046s
</code></pre>

<p>Note that our manually decorated subroutine is slightly faster that the original memoized version.</p>

<h3>Edit Distance in Python</h3>

<p>I do not know whether there is something equivalent to the <code>Memoize</code> module in Python, so I will manage the cache manually (in the <code>cached_distance</code> subroutine):</p>

<pre><code>cache = dict()

def cached_distance(left, right):
    key = left + ';' + right
    if key not in cache:
        cache[key] = edit_distance(left, right)  
    return cache[key]

def edit_distance(left, right):
    lr = len(right)
    ll = len(left)
    if not left: return lr
    if not right: return ll
    shortened_l = left[0:ll-1]
    shortened_r = right[0:lr-1]
    if left[ll-1] == right[lr-1]:
        return cached_distance(shortened_l, shortened_r)

    return 1 + min( cached_distance(left, shortened_r),     # Insert 
                    cached_distance(shortened_l, right),    # Remove 
                    cached_distance(shortened_l, shortened_r)  # Replace 
                  )     

tests = ( [ "kitten", "sitting" ], [ "Monday", "Friday" ], 
          [ "Sunday", "Saturday" ], [ "January", "February" ],
          [ "November", "December" ],
          [ "constitutionally", "anticonstitutional" ],
        )

for test in tests:
    print (test[0], test[1], edit_distance(test[0], test[1]  ))
</code></pre>

<p>This produces the following output:</p>

<pre><code>$ time python3 edit-distance.py
kitten sitting 3
Monday Friday 3
Sunday Saturday 3
January February 4
November December 3
constitutionally anticonstitutional 6

real    0m0,114s
user    0m0,000s
sys     0m0,062s
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, January 31, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl weekly challenge 96</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-96.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10058</id>
    <published>2021-01-22T03:23:39Z</published>
    <updated>2021-01-22T14:49:53Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>This week we had contrasting challenges.</p>

<h3>Challenge 1 - Reverse Words</h3>

<p>Take a string of words {with arbitrary white space around the words} and reverse the order of the words in the string and removing any redundant white space.</p>

<p>This is a classic example of a 1-liner....</p>

<pre><code>
   join q( ), reverse grep {$_} split m{\s+}, $_[0];
</code></pre>

<h3>Challenge 2 - Edit Distance</h3>

<p>I will provide 2 solutions here... one a less optimal solution which at the same time gives us a nice way of rendering the alignment - and then an more efficient "boiling down" of the first algorithm to just return the distance...</p>

<p>I'm just going to add <em>"Another day job challenge!"</em></p>

<p>To be able to make "nicer" output - rather than just keeping track of the edit distance of substrings - we will actually keep the alignment of the two words as a string of "operations" whether they be Indels or SNPs.</p>

<p>One of my background is working with genomic data and this can be thought of as a simple alignment algorithm - and so I think of the three operations as Indels {inserts/deletes - remembering an insert into one sequence is just the same as a delete from the other} and SNPs - or single nucleotide polymorphisms.</p>

<p>The simple alignment string representation we will use consists of:<br />
<pre><br />
  '|' - the letters are the same;<br />
  'v' - insert<br />
  '^' - delete<br />
  ' ' - SNP/modify<br />
</pre></p>

<p>We can convert this to an edit distance by counting all the non-"|"s In perl we do this with tr/^v /^v / which returns the number of matches in scalar form. See {<tt>_edit_dist</tt> - function}</p>

<p>Finally we include a nice way to render the alignment {edits} By showing the two words with appropriate inserts in each word and indicate where the letters match in each word via a the alignment string in the middle. See {<tt>render_alighnment</tt> function}</p>

<pre>
  kitten-    sunday    boat rid-ing
   ||| |v      ||||    |^||||||v|||
  sitting    monday    b-at ridding
</pre>

<p>Additional note - we "memoise" the alignment function - as it will be called with the same subseq of letters following different paths through the two sequences. This increases performance...</p>

<p>From a "genomic" point of view this is known as the basis of the Smith-Waterman local alignment algorithm. Although Smith-Waterman has other features - including variable "penalties" for each type of edit {inserts, deletes, modifications}. Even having different penalties for certain changes {this is also similar to how typing correction software works - with assuming adjacent key typos are more likely.</p>

<p>See:<br />
 * https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm</p>

<h4>Solution</h4>

<p>We solve the recursively (stripping letters from one or both words each time). We have a number of options.</p>

<p> * Either of the words has no-letters - so the alignment is either a set of inserts/deletes from the other string.<br />
 * If the first character of each word is the same - we continue to the next letters {and an alignment is marked between the two words}<br />
 * If they are not the same - we look to see which of the options insert, delete or snp makes has the lowest score...</p>

<p>The other two helper functions render this string (given the two sequences) showing the gaps and alignments; and work out the edit distance from the alignment.</p>

<pre><code>
sub alignment_string {
  my( $s, $t ) = @_;
  $calls++;
  my $key = "$s\t$t";
  return $cache{$key} if exists $cache{$key};
  $misses++;
  ## Both strings are empty so reached end!
  return $cache{$key}||=''              if $t eq q() && $s eq q();
  ## Exhausted t so all edits are now deletes...
  return $cache{$key}||='^' x length $s if $t eq q();
  ## Exhausted s so all edits are now inserts...
  return $cache{$key}||='v' x length $t if $s eq q();
  ## First letters are the same so we just prepend the
  ## match symbol (|) and continue...
  return $cache{$key}||='|'.alignment_string(substr($s,1),substr($t,1))
                                        if ord $s == ord $t;

<p>  ## We now have three choices - "insert", "delete" or "SNP"<br />
  my($d,$i,$m) = (<br />
    '^'.alignment_string( substr($s,1), $t           ),<br />
    'v'.alignment_string( $s,           substr($t,1) ),<br />
    ' '.alignment_string( substr($s,1), substr($t,1) ),<br />
  );<br />
  return  $cache{$key}||=<br />
        _edit_dist( $d ) < _edit_dist( $i )<br />
    ? ( _edit_dist( $d ) < _edit_dist( $m ) ? $d : $m )<br />
    : ( _edit_dist( $i ) < _edit_dist( $m ) ? $i : $m );<br />
}</p>

<p>sub edit_distance {<br />
  return _edit_dist( alignment_string( @_ ) );<br />
}</p>

<p>sub _edit_dist { ## Count inserts(v), deletes(^) & mis-matches( )<br />
  return $_[0] =~ tr/^v /^v /;<br />
}</p>

<p>sub render_alignment {<br />
  my( $s, $t ) = @_;<br />
  my $a = alignment_string( $s, $t );<br />
  my( $top, $bot ) = ( '','' );<br />
  foreach ( split m{}, $a ) {<br />
    $top .= $_ eq 'v' ? '-' : substr $s, 0, 1, '';<br />
    $bot .= $_ eq '^' ? '-' : substr $t, 0, 1, '';<br />
  }<br />
  return sprintf "%s\n%s (%d)\n%s\n",<br />
    $top, $a, _edit_dist($a), $bot;<br />
}<br />
</code></pre></p>

<p>If we are not interested in the "alignment" diagram we can simplify the code:</p>

<pre><code>
sub edit_distance_simple {
  my( $s, $t ) = @_;
  return $cache_x{"$s\t$t"}||=
     $t eq q()          ? length $s
   : $s eq q()          ? length $t
   : (ord $s == ord $t) ? edit_distance(substr($s,1),substr($t,1))
   :                      1+(sort { $a <=> $b }
                            edit_distance(substr($s,1),$t),
                            edit_distance($s,substr$t,1),
                            edit_distance(substr($s,1),substr $t,1)
                          )[0]
   ;
}
</code></pre>

<p>Note re-caches - these memoize the function - from trials the approximate hit is 50% - this matches up with the non recursive solution.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2021/01/mood-lighting.html"/>
    <id>tag:blogs.perl.org,2021:/users/toby_inkster//1019.10057</id>
    <published>2021-01-22T13:55:25Z</published>
    <updated>2021-01-22T14:35:29Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>The lighting in my bedroom uses <a href="https://en.wikipedia.org/wiki/Philips_Hue">Philips Hue bulbs</a> — specifically, the coloured ones. Last night, I decided it would be nice to set the three lights in my bedroom to cycle slowly through a set of warm colours using a script.</p>

<p>I didn't want harsh transitions from one colour to the next, but for the lighting to fade from one colour to the next in a smooth gradient. Also, I didn't want the three bulbs to all be the exact same colour, but wanted each bulb to be at different stage in the cycle, like they're "chasing" each other through the colours.</p>

<p>So I whipped up a quick script. It requires the command-line tool <a href="https://github.com/bahamas10/hueadm">hueadm</a> to be installed and set up before we start. You can run <kbd>hueadm lights</kbd> to get a list of available lights, and in particular, their ID numbers.</p>]]>
        <![CDATA[<p>First step, we need to be able blend two colours together. This is necessary to be able to create smooth transitions between colours. I stole a little code from <a href="https://metacpan.org/release/Color-Fade/source/lib/Color/Fade.pm">Color::Fade</a> on CPAN to do this.</p>

<script src="https://gist.github.com/tobyink/e9686777d150937f0b929de115fae695.js"></script>

<p>Pretty simple averaging of two RGB values. You could arguably get a better effect by converting to HSL, averaging those values and then converting back to RGB, but in practice, using RGB seems fine.</p>

<p>Now we can build the gradients. We want to take an array of colours and make it into a cycle by copying the first colour to the end, then create a new array, copying the colours into the new array, but inserting a blend of each pair between them, so our initial array of N colours grows to an array of 2N colours. Then repeat that process a few times.</p>

<script src="https://gist.github.com/tobyink/e7f910b8d3947f3536483ed9a4fe23c3.js"></script>

<p>Nice. Now we know what colours our lights should be.</p>

<p>Here's a quick Moo class to control a lightbulb, given its ID. Nothing interesting to see here.</p>

<script src="https://gist.github.com/tobyink/593316c89929cde61ce52a199633c2f8.js"></script>

<p>Finally we can work on the logic. We have an array of colours; we need to pick an index in that array for each bulb. My array of colours (after being expanded into a gradient), ended up being 160 colours, so it seemed that a good starting point was to set my three bulbs initially to colours 0, 16, and 32 in the array. Something along these lines:</p>

<script src="https://gist.github.com/tobyink/30a15fce9f03e493420ca72ded4955b1.js"></script>

<p>Then pause for a second or two, then add one to each index (looping any that go over 160 back to 0) and repeat. Here's the full code for that:</p>

<script src="https://gist.github.com/tobyink/e9462093b4830a8fd0216a8ff1cba0ca.js"></script>

<p>Now let's test it out...</p>

<script src="https://gist.github.com/tobyink/a7a01c4a362f40b685b54abd6afc706d.js"></script>

<p>It works!</p>

<p>The <a href="https://gist.github.com/tobyink/62a6d7a994573f3f7dc83acc5754d4d7">full script is on GitHub Gist</a>.</p>]]>
    </content>
</entry>
  <entry>
    <title>Mood Lighting</title>
    <link rel="alternate" href="https://dev.to/tobyink/mood-lighting-40lg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl 5 script to cycle through a gradient of colours on a set of Philips Hue lightbulbs.</p>

<p><a href="https://gist.github.com/tobyink/62a6d7a994573f3f7dc83acc5754d4d7">Full script on Gist</a></p>

<p><a href="https://toby.ink/blog/2021/01/22/mood-lighting/">Explanation on my blog</a></p>

</div>
    </content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/mood-lighting-40lg</id>
    <published>2021-01-22T09:43:43Z</published>
    <updated>2021-01-22T09:43:43Z</updated>
    <category term="perl"/>
    <category term="moo"/>
    <category term="perl5"/>
    <category term="homeautomation"/>
  </entry>
  <entry>
    <title>Generate checksum using Perl</title>
    <link rel="alternate" href="https://dev.to/raigaurav/generate-checksum-in-perl-5af1" type="text/html"/>
    <content type="html">&lt;p&gt;In this article we will be looking at how to generate different type of &lt;a href="https://en.wikipedia.org/wiki/Checksum"&gt;checksum&lt;/a&gt; across Linux and Windows.&lt;/p&gt;

&lt;p&gt;In Perl, there are various module available to generate checksum -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Digest::SHA"&gt;Digest::SHA&lt;/a&gt; - Perl core module&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Crypt::Digest"&gt;CryptX::Digest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are few other but either they are specific to particular digest or abandoned.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Digest::SHA&lt;/code&gt; is in Perl core since &lt;code&gt;v5.9.3&lt;/code&gt;. So, if you have Perl installed having higher version than 5.9.3 you will have Digest::SHA and installation is not needed.&lt;br&gt;
But what if you are in some closed system, stuck with some older Perl version. What if you don't have permission and you can't install/use any external modules. I have faced similar issue and I have created this script just for that purpose.&lt;/p&gt;

&lt;p&gt;So lets get started.&lt;br&gt;
Both linux and windows comes with inbuilt utilities to calculate different hash - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux   - md5sum, sha1sum, sha256sum, sha512sum etc.&lt;/li&gt;
&lt;li&gt;Windows - &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil"&gt;certutil.exe&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can execute these commands using &lt;a href="https://perldoc.perl.org/perlop#Backticks"&gt;backticks&lt;/a&gt; operator and get there output.&lt;br&gt;
For linux the commands are present in &lt;code&gt;/usr/bin&lt;/code&gt;. For windows it is in &lt;code&gt;C:/Windows/System32/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# HashAlgorithm choices: MD2 MD4 MD5 SHA1 SHA256 SHA384 SHA512&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_checksum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path_to_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$hash_algorithm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$checksum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$os&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$^O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sr"&gt;s $path_to_file) {
            if ($os =~ /MSWin32/i) {
                $c&lt;/span&gt;&lt;span class="nv"&gt;hecksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                        &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;C:/Windows/System32/certutil.exe -hashfile &lt;/span&gt;&lt;span class="si"&gt;$path_to_file&lt;/span&gt;&lt;span class="sb"&gt; &lt;/span&gt;&lt;span class="si"&gt;$hash_algorithm&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/usr/bin/&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hash_algorithm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sum &lt;/span&gt;&lt;span class="si"&gt;$path_to_file&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
                &lt;span class="nv"&gt;$checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="si"&gt;$cmd&lt;/span&gt;&lt;span class="p"&gt;`))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File is empty&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Unable to calculate the &lt;/span&gt;&lt;span class="si"&gt;$hash_algorithm&lt;/span&gt;&lt;span class="s2"&gt; for &lt;/span&gt;&lt;span class="si"&gt;$path_to_file&lt;/span&gt;&lt;span class="s2"&gt; : $@&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$checksum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Calculate checksum of the given file&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$checksum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;get_checksum&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;test.txt&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$checksum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output from external command contains some extra elements also. We are removing those and getting only the checksum.&lt;br&gt;
Running this script generated the following output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;946576fd7b973e3a8c78e5695637727399f34ca8d6fd6b89f1f5328c1e0b0bdc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can pass different type of checksum parameter to &lt;code&gt;get_checksum&lt;/code&gt; function and and get different output. &lt;br&gt;
You can also modify the script to use it as command line tool.&lt;br&gt;
This can come in handy if you want to check integrity of file across different OS without changing your code.&lt;/p&gt;

&lt;p&gt;Perl onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Hash function image taken from &lt;a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gaurav Rai</name>
    </author>
    <id>https://dev.to/raigaurav/generate-checksum-in-perl-5af1</id>
    <published>2021-01-21T17:20:51Z</published>
    <updated>2021-01-21T17:20:51Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Regarding the closure of rt.cpan.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html"/>
    <id>tag:blogs.perl.org,2021:/users/martin_mcgrath//2910.10056</id>
    <published>2021-01-21T13:03:19Z</published>
    <updated>2021-01-21T13:08:22Z</updated>
    <author>
        <name>Martin McGrath</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/martin_mcgrath/">
        <![CDATA[<p>Let me preface this short post with this, I don't have the solution to this problem. Perhaps there is someone in the wider Perl space who is well placed to pick this up, but there seems to be little going on in terms of community engagement.</p>

<p>In the first week of 2021 I noticed a link <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">to this sunset message</a> for rt.cpan behind displayed on the rt.cpan homepage. Firstly I believe the notification on the page could be highlighted better, grey on grey, on a page with lots of grey isn't exactly eye catching.</p>

<p>At the time the linked article didn't contain much information, besides a date. It has since been updated with links to resources to migrate tickets elsewhere.</p>

<p><a href="https://perlmonks.org/?node_id=11125896">A reply</a> to my post in the perlmonks news section was concerning to me, I shortly found the <a href="https://perl.topicbox.com/groups/infrastructure/Te92859202f730470">infrastructure working group post</a> on topicbox (which I find no link to on any of the perl websites, or release documentation). This thread was concerning in so much as a single volunteer has decided to step back, which is of course fine, but it doesn't seem like the option of asking the wider community if anyone would be willing to step up and take it over has been explored. It doesn't even seem to be being openly discussed.</p>

<p>On the day it was posted I replied to <a href="http://blogs.perl.org/users/lee_j/2021/01/a-static-archive-of-rtcpanorg.html">A Static archive or rt.cpan.org</a>, raising some concerns. The site told me my response was awaiting author moderation, as yet it remains unpublished.</p>

<p>I registered and was approved on Topicbox, posted in the thread linked above, raising some concerns about how this is is going, and how this has been communicated with the wider community. This too is apparently still in a moderation queue.</p>

<p>I reached out to Ricardo Signes, asking for clarity on the situation, Richardo responded to say that the static archive was more likely to be the course of action rather than someone else picking up the operation rt.cpan.</p>

<p>Paul Evans has posted <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/01/msg258825.html">FYI rt.cpan.org is going away</a> over on p5p, which contains lots of good information, the whole thread is really worth reading, including the quote:</p>

<p>"To emphasise again: in 41 days time the bug tracker used by nearly 80%<br />
of all of CPAN is going to be shut down and become unavailable for<br />
either historic or newly-reported bugs. We *need* to find a solution in<br />
that time."</p>

<p>Karen Etheridge posted a reply ending:</p>

<p>"I want to be clear that it is totally acceptable for a volunteer to decide<br />
that they can't or won't have the time/energy/enthusiasm to continue a<br />
task. Volunteer effort is greatly appreciated while it is there, but it<br />
cannot be presumed to be provided in perpetuity. However, I find it greatly<br />
distressing that the option for new volunteer(s) to step in and take over<br />
is not being permitted. This is not something that can or should be decided<br />
unilaterally."<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl weekly challenge 096 - Raku </title>
    <link rel="alternate" href="http://blogs.perl.org/users/joan_mimosinnet/2021/01/perl-weekly-challenge-096---raku.html"/>
    <id>tag:blogs.perl.org,2021:/users/joan_mimosinnet//2785.10055</id>
    <published>2021-01-21T05:47:09Z</published>
    <updated>2021-01-21T07:12:41Z</updated>
    <author>
        <name>Joan Mimosinnet</name>
        
    </author>
    <category term="perlweeklychallenge" label="perlweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/joan_mimosinnet/">
        <![CDATA[<p>This is a Raku answer for the 096 <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge </a></p>.

<p><big><strong>Exercise 1</strong></big></p>

<p>The first task consists in writing a script to reverse the order of words without leading/trailing spaces. These are the examples:</p>

<p>Example 1:<br />
Input: $S = "The Weekly Challenge"<br />
Output: "Challenge Weekly The"</p>
<p>Example 2:<br />
Input: $S = "    Perl and   Raku are  part of the same family  "<br />
Output: "family same the of part are Raku and Perl"</p>

<p>This is easy to implement in Raku due to the many routines and methods included by default:</p>

<p><pre><code>sub challenge( $string ) {
  return $string.words.reverse;
}</code></pre></p>

<p><big><strong>Exercise 2</strong></big></p>

<p>The second exercise is the implementation of the <a href="https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm">Wagner–Fischer algorithm</a> to compute the edit distance between two strings of characters. Raku shows the muscle of its support for OOP, allowing to almost literally write down the algorithm as a class. This is the <a href="https://en.wikipedia.org/wiki/Pseudocode">pseudocode</a> algorithm on Wikipedia:</p> 

<p><pre><code style='font-size: 0.7em'>function LevenshteinDistance(char s[1..m], char t[1..n]):
  declare int d[0..m, 0..n]
  set each element in d to zero
  for i from 1 to m:
      d[i, 0] := i
  for j from 1 to n:
      d[0, j] := j
  for j from 1 to n:
      for i from 1 to m:
          if s[i] = t[j]:
            substitutionCost := 0
          else:
            substitutionCost := 1
          d[i, j] := minimum(d[i-1, j] + 1,                   // deletion
                             d[i, j-1] + 1,                   // insertion
                             d[i-1, j-1] + substitutionCost)  // substitution
  return d[m, n]</code></pre></p>

<p>And the definition of the class in Raku:</p>

<p><pre><code style='font-size: 0.7em'>class Distance {

  has Str $.s1;
  has Str $.s2;

  method distance() {
    return $!s1.chars if $!s2.chars == 0;
    return $!s2.chars if $!s1.chars == 0;
    min (
      Distance.new( s1 => $!s1.chop, s2 => $!s2      ).distance + 1, 
      Distance.new( s1 => $!s1     , s2 => $!s2.chop ).distance + 1, 
      Distance.new( s1 => $!s1.chop, s2 => $!s2.chop ).distance + 
!($!s1.substr(*-1) eq $!s2.substr(*-1)).Num; # substitution
    );
  }
}</code></pre></p>

While this may be similar to the other dynamic programming solutions provided, this OOP recursion appears more intuitive and readable for neophytes like me. It has been quite amazing to be able to write the class definition and see that it works!]]>
        
    </content>
</entry>
  <entry>
    <title>CLI tools: Replace snake by camel in a text file</title>
    <link rel="alternate" href="https://dev.to/szabgab/cli-tools-replace-snake-by-camel-in-a-text-file-2gdd" type="text/html"/>
    <content type="html">&lt;p&gt;I have a file that has the word "snake" in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;There is a snake in the first line.
No such word in the second line.
Another snake in the 3rd line.
There is a blue snake and a red snake here.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This one-liner that you can run on the command line will replace the word "snake" by the word "camel" in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -i -p -e 's/snake/camel/g' snakes_or_camels.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This one-liner will create a backup of the original file before making the changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -i.bak -p -e 's/snake/camel/g' snakes_or_camels.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-i&lt;/code&gt; means "inplace editing"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-i.bak&lt;/code&gt; means "copy to .bak then inplace editing"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-p&lt;/code&gt; means (in rough terms) "What ever you do, do it on every line of data."&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-e&lt;/code&gt; means "execute the following code".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s/snake/camel/g&lt;/code&gt; is a substitution. The &lt;code&gt;g&lt;/code&gt; at the end means globally. Without that only the first snake would be replaced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;There is a camel in the first line.
No such word in the second line.
Another camel in the 3rd line.
There is a blue camel and a red camel here.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you'd like to learn more about Perl check out my &lt;a href="https://perlmaven.com/perl-tutorial"&gt;Perl Tutorial&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/cli-tools-replace-snake-by-camel-in-a-text-file-2gdd</id>
    <published>2021-01-20T18:12:49Z</published>
    <updated>2021-01-20T18:12:49Z</updated>
    <category term="devops"/>
    <category term="beginners"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Loop controls: next, last, continue, break</title>
  <summary type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></summary>
  <updated>2021-01-20T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/loop-controls-next-last"/>  <id>https://perlmaven.com/loop-controls-next-last</id>
  <content type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Call for Grants (January 2021 Round)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_jan_2021"/>
  <id>tag:news.perlfoundation.org,2021-01-19:/post/call_for_grants_jan_2021</id>
  <published>2021-01-19T15:39:00</published>
  <updated>2021-01-19T15:39:00</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 27, 2021, UTC. We will publish the received applications, get community feedback through February 3rd, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 27, 2021, UTC. We will publish the received applications, get community feedback through February 3rd, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by January 28th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Geodaten in Bildern und Videos können viel über Nutzer verraten</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Am vorvergangenen Wochenende (9./10. Januar 2021) gab es relativ viel Wirbel um die Plattform Parler, die offensichtlich als Twitterersatz für hauptsächlich amerikanische "Konservative" diente. Amazon Web Services (AWS) kündigte Parler alle Services, da dort jede Menge Hass verbreitet wurde. Bevor alles abgeschaltet war, wurden wohl alle öffentlich verfügbaren Daten über ein API heruntergeladen. Ein paar der Fehler, die bei dem API gemacht wurden, werde ich kurz in der Schulung im März erläutern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif</id>
    <published>2021-01-19T10:00:00Z</published>
    <updated>2021-01-19T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 095</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/17#pwc095" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a number $N. Write a script to figure out if the given number is a Palindrome. Print 1 if true, otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub is_palindrome{
    my($n) = @_;
    return false if $n &lt; 0;
    my @digits = split(//, $n);
    if(@digits % 2 == 0){
        do{
            my $a = shift @digits;
            my $b = pop @digits;
            return false if $a != $b;
        }while(@digits);
        return true;
    }
    while(@digits != 1){
        my $a = shift @digits;
        my $b = pop @digits;
        return false if $a != $b;
    };
    return true;
}

MAIN:{
    print is_palindrome(1221);
    print "\n";
    print is_palindrome(-101);
    print "\n";
    print is_palindrome(90);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;One assumption is made and that is that the input is a valid integer.&lt;/p&gt;
&lt;p&gt;My approach here is straightforward iteration and matches what one might do manually: work inwards from both ends and if at any point there is not a match of the two elements being compared then return false. If we make it all the way to the middle then return true. Here the middle is either an empty array, in the case of an even number of elements or, in the case of an odd number of elements, an array of length 1.&lt;/p&gt;
&lt;p&gt;The case of a single digit has no special handling, if the number has an odd number of digits but that odd number happens to be 1 then the loop is not entered and we just return true.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to demonstrate Stack operations.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Stack;

my $stack = new Stack();
$stack-&gt;push(2);
$stack-&gt;push(-1);
$stack-&gt;push(0);
$stack-&gt;pop;       
print $stack-&gt;top . "\n"; 
$stack-&gt;push(0);
print $stack-&gt;min . "\n"; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Stack module used is of my own making. The next listing is that code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Stack{
    use boolean;
    use Class::Struct;

    struct(
        data =&gt; q/@/
    );

    sub push{
        my($self, $n) = @_;
        push @{$self-&gt;data()}, $n;
    }

    sub pop{
        my($self, $n) = @_;
        pop @{$self-&gt;data()};
    }

    sub top{
        my($self, $n) = @_;
        @{$self-&gt;data()}[@{$self-&gt;data()} - 1];
    }
    
    sub min{
        my($self, $n) = @_;
        my @sorted = sort {$a &lt;=&gt; $b} @{$self-&gt;data()};
        return $sorted[0];
    }
    true;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -Iperl perl/ch-2.pl
-1
-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Like &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10"&gt;last week’s LinkedList module&lt;/a&gt; I use &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt; to create the Stack module.&lt;/p&gt;
&lt;p&gt;Class::Struct creates accessors for all the class variables automatically. In this way, by calling &lt;code&gt;$self-&amp;gt;data()&lt;/code&gt;, we get a reference to the internal array &lt;code&gt;data&lt;/code&gt; and perform the required Stack operations.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc095</id>
    <published>2021-01-17T14:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): December 2020 Grant Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-report-20-12"/>
  <id>tag:news.perlfoundation.org,2021-01-17:/post/tony-report-20-12</id>
  <published>2021-01-17T01:50:05</published>
  <updated>2021-01-17T01:50:05</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his grant under [Perl 5 Core Maintenance Fund](http://www.perlfoundation.org/perl_5_core_maintenance_fund).
We thank the TPF sponsors to make this grant possible.

Approximately 16 tickets were reviewed, and 4 patches were applied.
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
Approximately 16 tickets were reviewed, and 4 patches were
applied

[Hours]         [Activity]
  2.62          #1420 debugging, research
                #1420 research and comment, some work on a fix
  5.55          #17094 write up an approach
                #17094 research, more write up
                #17094 more editing, post
                #17094 follow-up
  0.27          #17673 review and close
  2.03          #17724 testing, add regression test, apply to blead and
                close PR
  0.57          #17906 rebase, testing and apply to blead
 10.28          #18005 hopefully final rebase and test for merge,
                reconsider PathTools PerlLIO_symlink/readlink, research
                #18005 add symlink/readlink aliases, look into
                Devel::PPPort for new PerlLIO_* functions, don’t think
                it’s needed, apply to blead
                #18005 follow up: issue management, perldelta, add tests
                for other possibly fixed issues (some were fixed, others
                weren’t)
                #18005 more testing, debug #7410 and comment
                #18005 finish up and apply new regression tests to blead,
                more work on perldelta
                #18005 more ticket management, finish perldelta and apply
                to blead
  0.55          #18341 discussion with khw
  0.23          #18365 comment
  6.18          #18380 debugging
                #18380 more debugging, long comment
                #18380 think about a fix, work on a KISS fix for the
                immediate problem, testing
                #18380 more testing.make PR 18390, comment on more
                complete solutions
  2.00          #18388 research, testing, briefly comment
                #18388 review discussion, research
  3.85          #18396 review, track down issue with RW mutexes
                #18396 irc discussion with khw, work on a PR with test and
                fix, back to review
                #18396 follow-up
  2.15          #18402 review and research
                #18402 more research and comment
  0.12          #18403 review and apply to blead
  0.80          review github notifications
                review github notifications
  0.33          review khw’s alternate patch for the PERL_MEM_LOG
                deadlock/potential getenv() corruption
  0.58          review khw’s khw-safe branch, research
======
 38.11 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3832795828773899481</id>
    <published>2021-01-16T23:40:00.000+01:00</published>
    <updated>2021-01-16T23:40:50.012+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxiv) 15 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.38&lt;/strong&gt; on 2021-01-11&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.37 was 2 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NICS/Catmandu-1.2014' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catmandu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a data toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.2014&lt;/strong&gt; on 2021-01-15&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.2013 was 6 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.031' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.031&lt;/strong&gt; on 2021-01-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.030 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.65&lt;/strong&gt; on 2021-01-09&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.64 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BRTASTIC/Kelp-1.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Kelp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A web framework light, yet rich in nutrients. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.03&lt;/strong&gt; on 2021-01-12&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.02 was 3 years, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/Module-ScanDeps-1.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::ScanDeps&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Recursively scan Perl code for dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.30&lt;/strong&gt; on 2021-01-13&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.29 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-1.017' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Archive Toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.017&lt;/strong&gt; on 2021-01-13&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.016 was 1 year, 7 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.052' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.052&lt;/strong&gt; on 2021-01-13&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 1.051 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20210111' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20210111&lt;/strong&gt; on 2021-01-10&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20201207 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JCRISTY/PerlMagick-6.9.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::Magick&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - objected-oriented Perl interface to ImageMagick. Use it to create, edit, compose, or convert bitmap images from within a Perl script. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v6.9.11&lt;/strong&gt; on 2021-01-16&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 6.89-1 was 6 years, 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.022&lt;/strong&gt; on 2021-01-11&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 1.020 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Role-Tiny-2.002003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Role::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Roles: a nouvelle cuisine portion size slice of Moose &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002003&lt;/strong&gt; on 2021-01-11&lt;/li&gt;  &lt;li&gt;Votes: 62&lt;/li&gt;  &lt;li&gt;Previous version: 2.001004 was 1 year, 2 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.0.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.0.0&lt;/strong&gt; on 2021-01-15&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v6.10.0 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012001&lt;/strong&gt; on 2021-01-10&lt;/li&gt;  &lt;li&gt;Votes: 124&lt;/li&gt;  &lt;li&gt;Previous version: 1.012000 was 2 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.06&lt;/strong&gt; on 2021-01-14&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 5.05 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3832795828773899481/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiv-15-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3832795828773899481"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3832795828773899481"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiv-15-cpan-great-modules-released.html" title="(cccxxiv) 15 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-629151960886944272</id>
    <published>2021-01-16T23:36:00.000+01:00</published>
    <updated>2021-01-16T23:36:12.571+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdl) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 61&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/16 22:35:36 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Taboo" target="_blank"&gt;Acme::Taboo&lt;/a&gt; - Automated Cencoring Micro Engine&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::NoodlePay" target="_blank"&gt;App::NoodlePay&lt;/a&gt; - Convenient way to securely send Bitcoin from cold storage&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Audio::StreamGenerator" target="_blank"&gt;Audio::StreamGenerator&lt;/a&gt; - create a 'radio' stream by mixing ('cross fading') multiple audio sources (files or anything that can be converted to PCM audio) and sending it to a streaming server (like Icecast)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Std" target="_blank"&gt;Class::Std&lt;/a&gt; - Support for creating standard "inside-out" classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Std::Utils" target="_blank"&gt;Class::Std::Utils&lt;/a&gt; - Utility subroutines for building "inside-out" objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Paging" target="_blank"&gt;Data::Paging&lt;/a&gt; - pagination helper for view&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fluent::AgentLite" target="_blank"&gt;Fluent::AgentLite&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Serial" target="_blank"&gt;IPC::Serial&lt;/a&gt; - Simple message passing over serial ports&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Server" target="_blank"&gt;JSON::Server&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kelp::Module::Template::Toolkit" target="_blank"&gt;Kelp::Module::Template::Toolkit&lt;/a&gt; - Template rendering for Kelp via Template&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nephia::Plugin::ErrorPage" target="_blank"&gt;Nephia::Plugin::ErrorPage&lt;/a&gt; - Error Page DSL for Nephia&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nephia::Plugin::FillInForm" target="_blank"&gt;Nephia::Plugin::FillInForm&lt;/a&gt; - A plugin for Nephia that provides fill-in-form feature&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nephia::Plugin::View::Xslate" target="_blank"&gt;Nephia::Plugin::View::Xslate&lt;/a&gt; - A plugin for Nephia that provides template mechanism&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nephia::Setup::Plugin::Normal" target="_blank"&gt;Nephia::Setup::Plugin::Normal&lt;/a&gt; - Normal setup of Nephia&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/NephiaX::Auth::Twitter" target="_blank"&gt;NephiaX::Auth::Twitter&lt;/a&gt; - Twitter Authorizer&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Azure::NotificationHubs" target="_blank"&gt;Net::Azure::NotificationHubs&lt;/a&gt; - A Client Class for Azure Notification Hubs &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::GrowthForecast" target="_blank"&gt;Net::GrowthForecast&lt;/a&gt; - A client library for awesome visualization tool GrowthForecast&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Hadoop::DFSAdmin::ReportParser" target="_blank"&gt;Net::Hadoop::DFSAdmin::ReportParser&lt;/a&gt; - Parser module for 'hadoop dfsadmin -report'&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Hadoop::HuahinManager" target="_blank"&gt;Net::Hadoop::HuahinManager&lt;/a&gt; - Client library for Huahin Manager.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Saml2" target="_blank"&gt;Net::Saml2&lt;/a&gt; - SAML bindings and protocol implementation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Norikra::Client" target="_blank"&gt;Norikra::Client&lt;/a&gt; - Client library for Norikra (https://github.com/tagomoris/norikra)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ordeal::Model" target="_blank"&gt;Ordeal::Model&lt;/a&gt; - Manage cards and decks&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Otogiri::Plugin::BulkInsert" target="_blank"&gt;Otogiri::Plugin::BulkInsert&lt;/a&gt; - bulk insert for Otogiri&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Otogiri::Plugin::InsertAndFetch" target="_blank"&gt;Otogiri::Plugin::InsertAndFetch&lt;/a&gt; - An Otogiri plugin that keep compatibility for insert method&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Otogiri::Plugin::SelectWithColumns" target="_blank"&gt;Otogiri::Plugin::SelectWithColumns&lt;/a&gt; - Otogiri plugin to search row-data that contains only specific columns from database&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TAP3::Tap3edit" target="_blank"&gt;TAP3::Tap3edit&lt;/a&gt; - Decodes, modifies and encodes TAP 3 files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::DataMatrix" target="_blank"&gt;Term::DataMatrix&lt;/a&gt; - Generate terminal base DataMatrix 2D Code&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::PostgreSQL::Docker" target="_blank"&gt;Test::PostgreSQL::Docker&lt;/a&gt; - A Postgresql mock server for testing perl programs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Vector::QRCode::IntoPDF" target="_blank"&gt;Vector::QRCode::IntoPDF&lt;/a&gt; - A module to append QRCode as vector data into PDF&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::256locksMaker" target="_blank"&gt;WWW::256locksMaker&lt;/a&gt; - Perl Interface of 256locks maker (http://maker-256locks.herokuapp.com/)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Diver" target="_blank"&gt;XML::Diver&lt;/a&gt; - Dive XML with XML and first-class collection + alpha&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::XPath::Diver" target="_blank"&gt;XML::XPath::Diver&lt;/a&gt; - Dive XML with XML::XPath and first-class collection + alpha&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BerkeleyDB" target="_blank"&gt;BerkeleyDB&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Business::Bitcoin" target="_blank"&gt;Business::Bitcoin&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=120)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::Coveralls" target="_blank"&gt;Devel::Cover::Report::Coveralls&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eixo::Docker" target="_blank"&gt;Eixo::Docker&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::2048" target="_blank"&gt;Games::2048&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::Python" target="_blank"&gt;Inline::Python&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter::PBP" target="_blank"&gt;Module::Starter::PBP&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=439)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mouse" target="_blank"&gt;Mouse&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::HTTP::Server" target="_blank"&gt;Net::Async::HTTP::Server&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Azure::CognitiveServices::Face" target="_blank"&gt;Net::Azure::CognitiveServices::Face&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Docker" target="_blank"&gt;Net::Docker&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Duo" target="_blank"&gt;Net::Duo&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=365)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Raisin" target="_blank"&gt;Raisin&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Random" target="_blank"&gt;String::Random&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::QRCode" target="_blank"&gt;Term::QRCode&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::QRCode" target="_blank"&gt;Text::QRCode&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML::PrettyPrint" target="_blank"&gt;XML::LibXML::PrettyPrint&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/629151960886944272/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdl-metacpan-weekly-report-mojolicious.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629151960886944272"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629151960886944272"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdl-metacpan-weekly-report-mojolicious.html" title="(cdl) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grants Committee Takes on Expanded Role in TPF</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_committee_expanded_role"/>
  <id>tag:news.perlfoundation.org,2021-01-16:/post/grants_committee_expanded_role</id>
  <published>2021-01-16T18:55:55</published>
  <updated>2021-01-16T18:55:55</updated>
  <summary>
  <![CDATA[
     Starting in 2021, the Grants Committee will be taking on an expanded role in supporting the development of Perl and Raku within The Perl Foundation. In addition to the usual set of grants that benefit the greater Perl and Raku communities, the Grants Committee will also be the caretakers of the Perl and Raku Development Funds, and therefore responsible for awarding grants that directly benefit the core development of these 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Starting in 2021, the Grants Committee will be taking on an expanded role in supporting the development of Perl and Raku within The Perl Foundation. In addition to the usual set of grants that benefit the greater Perl and Raku communities, the Grants Committee will also be the caretakers of the Perl and Raku Development Funds, and therefore responsible for awarding grants that directly benefit the core development of these languages. Prior to this, Perl and Raku development funds were managed and awarded through a separate process that interacted directly with the TPF Board of Directors.</p>

<p>While the eligibility requirements for Perl and Raku development grants are different, they will go through the same process that other grants go through: each grant request will be published publicly; a period of public discussion will take place, during which time, applicants may be asked to provide additional information or make other changes before the voting period begins; finally, there is a voting period, after which the results are publicly posted.</p>

<h2>So what are the eligibility requirements?</h2>

<p>Since grants involving these funds are very focused and targeted, each has a specific set of requirements that must be met before being considered for discussion and funding. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>In the case of Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, check out the <a href="https://www.perlfoundation.org/perl-core-development-fund.html">Perl Core Development Fund</a> and <a href="https://www.perlfoundation.org/raku-development-fund.html">Raku Development Fund</a> pages.</p>

<h2>What are the benefits of this process?</h2>

<p>All grant requests now follow the same, consistent progress. Every grant request, regardless of what it's for will always be publicly posted and discussed in the open. The community will have a say in the decision making process, and will get to see how donations and grant money are allocated and awarded for the betterment of the Perl and Raku languages.</p>

<h2>How can I get involved?</h2>

<p>The next call for grants is coming up <em>this week!</em> The Grants Committee <a href="https://grants.perlfoundation.org/">maintains a list of possible grant ideas</a>, or you can propose your own ideas. The Perl and Raku communities grow from your involvement. Submit your request and let's get something positive accomplished!</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Refactoring code snippet</title>
  <summary type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></summary>
  <updated>2021-01-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/refactoring-code-snippet"/>  <id>https://perlmaven.com/refactoring-code-snippet</id>
  <content type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Extracting the list of O'Reilly Animals</title>
    <link rel="alternate" href="https://www.perl.com/article/extracting-the-list-of-o-reilly-animals/" type="text/html"/>
    <content type="html">

&lt;p&gt;Now I want to grab the entire list of O&amp;rsquo;Reilly cover animals, and &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; is going to help me do that.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly Media, who publishes most of my books, is distinctively known
by the animals it chooses for their covers. Edie Freedman explains how she came up with the well-known design in &lt;a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/"&gt;A short history of the O’Reilly animals&lt;/a&gt;. I think I first saw this design on the cover of &lt;a href="https://shop.oreilly.com/product/9781565922259.do"&gt;sed &amp;amp; awk&lt;/a&gt;; those Slender Lorises (Lori?) are a bit creepy, but not creepy enough to keep me away from the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/extracting-the-list-of-o-reilly-animals/sed.jpeg" alt="sed &amp;amp; awk" /&gt;&lt;/p&gt;

&lt;p&gt;Not that a Perler should talk since Larry Wall choose a camel: it&amp;rsquo;s ugly but it gets the job done under tough conditions. And, for &lt;a href="https://www.intermediateperl.com"&gt;own of my own books&lt;/a&gt;, the alpaca is a bit cuter, but they are nasty beasts as well.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly &lt;a href="https://www.oreilly.com/animals.csp"&gt;lists almost all of the animals&lt;/a&gt; from their covers, even if &amp;ldquo;animals&amp;rdquo; is a bit of a loose term that encompasses &amp;ldquo;Catholic Priests&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/0636920021872.do"&gt;Ethics of Big Data&lt;/a&gt;&lt;/em&gt;) or &amp;ldquo;Soldiers or rangers, with rifles&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/9780596007164.do"&gt;SELinux&lt;/a&gt;&lt;/em&gt;). You can page through that list 20 results at a time, or search it. But, as with most lists I see online, I want to grab the entire list at once. Show me a paginated resources and I&amp;rsquo;ll show you the program I automated to unpaginate it.&lt;/p&gt;

&lt;p&gt;Scraping a bunch of pages is no problem for Perl, especially with &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; (as I write about in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). I whipped up a quick script and soon had &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;all of the animals in a JSON file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing particularly fancy in my programming, although I do use &lt;a href="https://docs.mojolicious.org/Mojo/Promise"&gt;Mojo::Promise&lt;/a&gt; so I can make the requests concurrently. That wasn&amp;rsquo;t something that I cared that much about, but I had just answered &lt;a href="https://stackoverflow.com/q/64597755/2766176"&gt;a StackOverflow question about Promises&lt;/a&gt; so it was on my mind. I set up all of the web requests but don&amp;rsquo;t run them right away. Once I have all of them, I run them at once through the &lt;code&gt;all()&lt;/code&gt; Promise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.26&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; experimental &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::JSON &lt;span style="color:#e6db74"&gt;qw(encode_json)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Promise;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::UserAgent;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Util &lt;span style="color:#e6db74"&gt;qw(dumper)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://www.oreilly.com/animals.csp&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total );

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ua &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Mojo::UserAgent&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;# We need to get the first request to get the total number of&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# requests. Note that that number is actually larger than the&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# number of results there will be, by about 80.&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $first_page_tx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) {
		push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*;&lt;/span&gt;
		&lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_pagination( $tx );
		},
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { die &lt;span style="color:#e6db74"&gt;&amp;#34;Initial fetch failed!&amp;#34;&lt;/span&gt; }
	)&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @requests &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
	map {
		&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $page &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_;
		$ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; form &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#39;x-o&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $page } )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;,
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { warn &lt;span style="color:#e6db74"&gt;&amp;#34;Something is wrong&amp;#34;&lt;/span&gt; }
			);
		}
	map {
		$_ &lt;span style="color:#f92672"&gt;*&lt;/span&gt; $interval
		}
	&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;..&lt;/span&gt; ($total &lt;span style="color:#f92672"&gt;/&lt;/span&gt; $interval)
	;

Mojo::Promise&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;all( @requests )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_pagination&lt;/span&gt; ( $tx ) {
	&lt;span style="color:#75715e"&gt;# 1141 to 1160 of 1244&lt;/span&gt;
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $tx
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;span.cs-prevnext&amp;#39;&lt;/span&gt; )
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=~&lt;/span&gt;&lt;span style="color:#e6db74"&gt; /
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;		(\d+) \h+ to \h+ (\d+) \h+ of \h+ (\d+) /x&lt;/span&gt;;
	}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_page&lt;/span&gt; ( $tx ) {
&lt;span style="color:#75715e"&gt;=pod
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;div class=&amp;#34;animal-row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;a class=&amp;#34;book&amp;#34; href=&amp;#34;...&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;img class=&amp;#34;book-cvr&amp;#34; src=&amp;#34;...&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;p class=&amp;#34;book-title&amp;#34;&amp;gt;Perl 6 and Parrot Essentials&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;p class=&amp;#34;animal-name&amp;#34;&amp;gt;Aoudad, aka Barbary sheep&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;=cut&lt;/span&gt;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; eval {
		$tx
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find( &lt;span style="color:#e6db74"&gt;&amp;#39;div.animal-row&amp;#39;&lt;/span&gt; )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
				&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %h;
				$h{link}      &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;a.book&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;href&amp;#39;&lt;/span&gt; );
				$h{cover_src} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;img.book-cvr&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;src&amp;#39;&lt;/span&gt; );
				$h{title}     &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.book-title&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				$h{animal}    &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.animal-name&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%h;
				} )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;to_array
		} &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
			warn &lt;span style="color:#e6db74"&gt;&amp;#34;Could not process a request!\n&amp;#34;&lt;/span&gt;;
			&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;
			};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those concurrent requests make this program much faster than it would be if I did them individually one after the other, although it can really hammer a server if I&amp;rsquo;m not careful. Most of the web request time is simply waiting and I get all of those requests to wait at the same time. Now, this isn&amp;rsquo;t really parallelism because once one request has something to do, such as reading the data, the other requests still need to wait their turn. Perhaps I&amp;rsquo;ll rewrite this program later to use &lt;a href="https://docs.mojolicious.org/Minion"&gt;Minion&lt;/a&gt;, the Mojo-based job queue that can do things in different processes.&lt;/p&gt;

&lt;p&gt;The rest of the program is data extraction. In &lt;code&gt;parse_page&lt;/code&gt;, I have various &lt;a href="https://docs.mojolicious.org/Mojo/DOM/CSS"&gt;CSS Selectors&lt;/a&gt; to extract all of the &lt;code&gt;div.animal-row&lt;/code&gt; and turn each animal into a hash (again, I have lots of examples in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). Each Promise adds its results to the &lt;code&gt;@grand&lt;/code&gt; array. At the end, I turn that into a JSON file, which I&amp;rsquo;ve also uploaded as a &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As someone who has been doing this sort of extraction for quite a while, I&amp;rsquo;m always quite pleased how easy Mojolicious makes this. Everything I need is already there, uses the same idioms, and works together nicely. I get the page and select some elements. A long time ago, I would have had long series of substitutions, regexes, and other low-level text processing. Perl&amp;rsquo;s certainly good at text processing, but that doesn&amp;rsquo;t mean I want to work at that level in every program. Do something powerful a couple times and it doesn&amp;rsquo;t seem so cool anymore, although the next step for Mojolicious might be &lt;em&gt;Minority Report&lt;/em&gt;-style pre-fetching where it knows what I want before I do.&lt;/p&gt;

&lt;h2 id="a-nifty-trick"&gt;A nifty trick&lt;/h2&gt;

&lt;p&gt;I do use a few interesting tricks just because I do. Lately in these sorts of programs I&amp;rsquo;m collecting things into a data structure then presenting it at the end. Typically that means I do the setup at the top of the program file and the output at the end.  However, after I&amp;rsquo;ve defined the &lt;code&gt;@grand&lt;/code&gt; variable, I immediately define an &lt;code&gt;END&lt;/code&gt; block to specify what to do with &lt;code&gt;@grand&lt;/code&gt; once everything else has happened:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That keeps the details of the data structure together. The entire point of the program is to get those data out to the JSON file.&lt;/p&gt;

&lt;p&gt;I could have just as easily kept that together with a normal Perl subroutine, but &lt;code&gt;END&lt;/code&gt; is a subroutine that I don&amp;rsquo;t need to call explicitly. This is merely something I&amp;rsquo;ve been doing lately and I might change my mind later.&lt;/p&gt;

&lt;h2 id="a-little-safari"&gt;A little safari&lt;/h2&gt;

&lt;p&gt;And I leave you with a little safari for your own amusement. My animals are the Llama, Alpaca, Vicuñas, Camel, and Hamadryas Butterfly. Search the O&amp;rsquo;Reilly list (or my JSON) to find those titles. Some of them are missing and some have surprising results.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/extracting-the-list-of-o-reilly-animals/learning_perl.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Here are some interesting &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; commands to play with the &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;Animals JSON file&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all the title
$ jq -r '.[].title' &amp;lt; animals.json | sort | head -10
.NET &amp;amp; XML
.NET Compact Framework Pocket Guide
.NET Framework Essentials
.NET Gotchas
.NET Windows Forms in a Nutshell
20 Recipes for Programming MVC 3
20 Recipes for Programming PhoneGap
21 Recipes for Mining Twitter
25 Recipes for Getting Started with R
50 Tips and Tricks for MongoDB Develope

# tab-separated list of animals and titles
$ jq -r '.[] | &amp;quot;\(.animal) =&amp;gt; \(.title)&amp;quot;' &amp;lt; animals.json | sort
12-Wired Bird of Paradise	Mobile Design and Development
3-Banded Armadillo	Windows PowerShell for Developers
Aardvark	Jakarta Commons Cookbook
Aardwolf	Clojure Cookbook
Addax, aka Screwhorn Antelope	Ubuntu: Up and Running
Adjutant (Storks)	Social eCommerce
Aegina Citrea, narcomedusae, jellyfish	BioBuilder
African Civet	JRuby Cookbook
African Crowned Crane aka Grey Crowned Crane	C# 5.0 Pocket Reference
African Crowned Crane aka Grey Crowned Crane	Programming C# 3.0

# find a title by exact match of animal
$ jq -r '.[] | select(.animal==&amp;quot;Llama&amp;quot;) | .title' &amp;lt; animals.json
Randal Schwartz on Learning Perl

# find a title with a regex match against the animal
$ jq -r '.[] | select(.animal|test(&amp;quot;ama&amp;quot;)) | .title' &amp;lt; animals.json | sort
Access Cookbook
Access Database Design &amp;amp; Programming
ActionScript for Flash MX Pocket Reference
ActionScript for Flash MX: The Definitive Guide
Ajax on Java
Appcelerator Titanium: Up and Running
Embedding Perl in HTML with Mason
Fluent Python
Identity, Authentication, and Access Management in OpenStack
Introduction to Machine Learning with Python
Learning Perl 6
PDF Explained
Randal Schwartz on Learning Perl
SQL Pocket Guide
SQL Tuning
Solaris 8 Administrator's Guide
The Little Book on CoffeeScript
Writing Game Center Apps in iOS

# find an animal with a regex match against the title
$ jq -r '.[] | select(.title|test(&amp;quot;Perl&amp;quot;)) | .animal' &amp;lt; animals.json | sort
Alpaca
Aoudad, aka Barbary sheep
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary, Head
Badger
Bighorn Sheep
Black Leopard
Blesbok (African antelope)
Camel, aka Dromedary
Cheetah
Emu, large and fluffy
Emu, young
Fan-footed Gecko, aka Wall Gecko
Flying Dragon (lizard)
Flying Dragon (lizard)
Greater Honeyguide
Green Monkey 1 (adult holding a baby)
Hamadryas Baboon
Hamadryas Butterfly
Llama
Mouse
North American Bullfrog
Proboscis Monkey
Red Colobus Monkey
Sea Otter
Staghound
Tadpole of a Greenfrog (sketch)
Thread-winged Lacewing, aka Antlion
White-tailed Eagle
Wolf
&lt;/code&gt;&lt;/pre&gt;
</content>
    <id>https://www.perl.com/article/extracting-the-list-of-o-reilly-animals/</id>
    <published>2021-01-11T18:02:50Z</published>
    <updated>2021-01-11T18:02:50Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Git-Hooks mit Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Git ist eine weit verbreitete Software zur Versionsverwaltung. Wir nutzen Git seit vielen Jahren, um unseren Perl-Code zu verwalten. Soll im Git-Workflow etwas erzwungen werden, kommen sogenannte Git-Hooks zum Einsatz.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl</id>
    <published>2021-01-06T10:00:00Z</published>
    <updated>2021-01-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 093</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/03#pwc093" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given set of co-ordinates &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to count maximum points on a straight line when given co-ordinates plotted on 2-d plane.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given set of co-ordinates @N.
# Write a script to count maximum points 
# on a straight line when given co-ordinates 
# plotted on 2-d plane.
##
sub triangle_area{
    my($i, $j, $k) = @_;
    return ($i-&gt;[0] * ($j-&gt;[1] - $k-&gt;[1])) 
         + ($j-&gt;[0] * ($k-&gt;[1] - $i-&gt;[1]))
         + ($k-&gt;[0] * ($i-&gt;[1] - $j-&gt;[1]));
}

sub collinear_points{
    my(@points) = @_;
    my @collinear;
    for my $i (@points){
        for my $j (@points){
            for my $k (@points){
                if(triangle_area($i, $j, $k) == 0){
                    my $i_string = join(",", @{$i});
                    my $j_string = join(",", @{$j});
                    my $k_string = join(",", @{$k});
                    if(($i_string ne $j_string) &amp;&amp; ($i_string ne $k_string) &amp;&amp; ($j_string ne $k_string)){
                        my $has_i = grep { $i_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $i if !$has_i;
                        my $has_j = grep { $j_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $j if !$has_j;
                        my $has_k = grep { $k_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $k if !$has_k;
                    }
                }
            }
        }
    }
    return @collinear;
}

MAIN:{
    my @N;
    @N = ([5,3], [1,1], [2,2], [3,1], [1,3]);
    my @collinear = collinear_points(@N);
    print "There are a maximum of " . @collinear . " collinear points.\n"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
There are a maximum of 3 collinear points.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Keep in mind that any two points determine a line. Therefore to consider all possible non-trivial lines we need to review all triples of points. This method will work in the most general case when the starting data may contain multiple lines with a larger number of points.&lt;/p&gt;
&lt;p&gt;In determining collinearity I calculate the area of a triangle using the triple of points. If the area is zero we know that all the points lay on the same line.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree containing only the numbers 0-9. Write a script to sum all possible paths from root to leaf.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a binary tree containing 
# only the numbers 0-9.
# Write a script to sum all possible paths 
# from root to leaf.
##
use Graph;

sub travserse_sum{
    my($tree) = @_;
    my @paths = build_paths($tree);
    my $path_sum = 0;
    for my $path (@paths){
        $path_sum +=  unpack("%32C*", pack("C*", @{$path})); 
    }
    return $path_sum;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         push @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(2, 3);
    $Tree-&gt;add_edge(2, 4);
    print travserse_sum($Tree) . "\n";
    
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(3, 5);
    $Tree-&gt;add_edge(3, 6);
    print travserse_sum($Tree) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
13
26
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is straightforward enough, at a high level anyway: (1) Get all paths and then (2) sum all the nodes on the paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am always happy to have a chance to use the &lt;a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod"&gt;Graph module&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The Graph module has a bunch of nice algorithms implemented but what we want here is not a &lt;em&gt;shortest path&lt;/em&gt; but &lt;em&gt;all paths&lt;/em&gt;. The Graph module doesn’t have anything for us to use for that. Implementing a recursive &lt;em&gt;Depth First Search&lt;/em&gt; and collecting all the paths is not such a hard thing to do, but in the &lt;strong&gt;Holiday Spirit&lt;/strong&gt; (i.e. laziness) I just re-used &lt;a href="https://www.perlmonks.org/?node_id=381608"&gt;Ikegami&lt;/a&gt;’s code. See the References section.&lt;/li&gt;
&lt;li&gt;I first used the pack/unpack trick for summing array back in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/09"&gt;Challenge 007&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Collinear.html"&gt;Collinear Points&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/41646812/4705722"&gt;All Paths&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc093</id>
    <published>2021-01-03T16:37:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Bulk downloading all episodes of a podcast</title>
    <link href="http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html"/>
    <id>http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html</id>
    <updated>2021-01-03T14:51:24+00:00</updated>
    <category term="perl"/>
    <summary type="html">In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want MP3s on my hard disk (and/or vinyl on my record player). I want ...</summary>
    <content type="html">&lt;p&gt;In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want &lt;span class="caps"&gt;MP3&lt;/span&gt;s on my hard disk (and/or vinyl on my record player). I want access to my music when I'm offline (and I'm offline a lot) and without using a so-called smart phone (I prefer vintage &lt;span class="caps"&gt;USB&lt;/span&gt;-stick &lt;span class="caps"&gt;MP3 &lt;/span&gt;players). My partner thinks the same (I guess 25+ years of my propaganda had some influence..).&lt;/p&gt;

&lt;p&gt;But "modern" sites make it rather hard to actually download content (even if it's free). They offer links to a myriad of apps, but often no download button. At least a lot of podcasts still provide an &lt;span class="caps"&gt;RSS &lt;/span&gt;feed. So when my partner cannot download a newly discovered podcast, she asked me if I can do it for her. Which I'm of course happy to do, and which is often done with a few lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use strict;
use warnings;
use 5.030;

use XML::Feed;
use URI;
use String::Ident;

my $feed = XML::Feed-&amp;gt;parse( URI-&amp;gt;new( $ARGV[0] ) );

for my $entry ( $feed-&amp;gt;entries ) {
    my $date = $entry-&amp;gt;issued;
    $date =~ s/T.*$//;
    my $filename = join( '-', $date, String::Ident-&amp;gt;cleanup( $entry-&amp;gt;title ) ) . '.mp3';
    next if -f $filename;
    say &amp;quot;wget -O $filename &amp;quot; . $entry-&amp;gt;enclosure-&amp;gt;url;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href="https://metacpan.org/pod/XML::Feed"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;::Feed&lt;/a&gt; to fetch and parse the &lt;span class="caps"&gt;RSS &lt;/span&gt;feed, passing in the &lt;span class="caps"&gt;URL &lt;/span&gt;as the first command line argument. I create a nice filename based on the date the podcast was &lt;code&gt;issued&lt;/code&gt; (removing the time-part) and a &lt;code&gt;cleanup()ed&lt;/code&gt; version of the title. (&lt;a href="https://metacpan.org/pod/String::Ident"&gt;String::Ident&lt;/a&gt; is a nice little helper module Jozef created for a project we were working on some time ago).&lt;/p&gt;

&lt;p&gt;If the filename already exists in the current directory, we skip, because we don't need to download it again.&lt;/p&gt;

&lt;p&gt;Then I output a &lt;a href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; command to download the &lt;span class="caps"&gt;URL &lt;/span&gt;(provided by &lt;code&gt;$entry-&amp;gt;enclosure-&amp;gt;url&lt;/code&gt;) and save it under the nice filename.&lt;/p&gt;

&lt;p&gt;Why do I not download the file directly in the script?&lt;/p&gt;

&lt;p&gt;I just find it easier to use an external tool, especially as I like to pipe the output of this script into a file, so I can munge the file a bit. Eg, for this podcast, I did not download all 131 episodes, but only the 5 oldest and the 5 newest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/media/podcasts$ fetch_podcast.pl https://example.com/podcast.rss &amp;gt; all
~/media/podcasts$ head -n 5 all &amp;gt; test_it
~/media/podcasts$ tail -n 5 all &amp;gt;&amp;gt; test_it
~/media/podcasts$ bash test_it
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy!&lt;/p&gt;</content>
    <category term="automatization"/>
    <category term="~/bin"/>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 1</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" type="text/html"/>
    <content type="html">&lt;p&gt;Back in mid-November 2020, I noticed that &lt;a href="https://hackage.haskell.org/"&gt;Hackage&lt;/a&gt; (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. &lt;/p&gt;
&lt;p&gt;Since the &lt;a href="https://hackage.haskell.org/api"&gt;Hackage API&lt;/a&gt; does not provide a way to list releases (uploads), I had to &lt;a href="https://metacpan.org/pod/http-tiny-plugin-every"&gt;download&lt;/a&gt; the &lt;a href="http://hackage.haskell.org/packages/recent"&gt;recent additions&lt;/a&gt; page periodically, &lt;a href="https://github.com/sharyanto/scripts/blob/master/parse-hackage-page"&gt;parse&lt;/a&gt; each page, and &lt;a href="https://metacpan.org/pod/combine-overlap"&gt;merge&lt;/a&gt; the results into a single large list. Because I have just collected the recent additions page since mid-November, I&amp;#039;m looking at December 2020 period. &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% http-tiny-plugin-every --every 3h http://hackage.haskell.org/packages/recent --dir . --trace
% for f in 2*.log; do parse-hackage-page &amp;quot;$f&amp;quot; --format ltsv &amp;gt; &amp;quot;$$.ltsv&amp;quot;; done
% combine-overlap 2*.ltsv &amp;gt; hackage_release_202012.ltsv
&lt;/pre&gt;
&lt;p&gt; For CPAN, the MetaCPAN API lets us query various things in many ways so the simple task of listing recent releases is not a problem at all. I&amp;#039;m using a &lt;a href="https://metacpan.org/pod/list-metacpan-releases"&gt;CLI&lt;/a&gt; to do this: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% list-metacpan-releases --from-date 2020-12-01 --to-date 2020-12-31 --json &amp;gt; cpan_release_202012.json
&lt;/pre&gt;
&lt;p&gt; With this two pieces of data, I just need to perform some SQL (again, using &lt;a href="https://metacpan.org/pod/fsql"&gt;CLI&lt;/a&gt; for this) to get what I want. &lt;/p&gt;
&lt;p&gt;So for December 2020, there are 957 releases: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
957
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 629: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
629
&lt;/pre&gt;
&lt;p&gt; As for number of authors who did releases in this period, the two are more similar: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
207
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 191: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
191
&lt;/pre&gt;
&lt;p&gt; So this does confirm my guess that the upload activity for both repositories are currently in the same order of magnitude, but does not confirm the suspicion that Hackage is more active than CPAN, at least in December 2020. I plan to do a follow up next year in January after I collected all 2021 data.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Back in mid-November 2020, I noticed that Hackage (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. Since the Hackage API does not provide a way to list releases (uploads), I had to download the recent additions page periodically, parse each page, and merge the results into … <a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 1</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1933</id>
    <published>2021-01-03T04:40:59Z</published>
    <updated>2021-01-03T04:40:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Frohes Neues Jahr 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das in vielerlei Hinsicht ungewöhnliche Jahr 2020 ist vorbei. Wir wünschen allen treuen und neuen Leser\*innen unseres Blogs ein frohes neues Jahr. Wir hoffen, dass Sie gut durch das vergangene Jahr gekommen sind und dass 2021 besser wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr</id>
    <published>2021-01-01T10:00:00Z</published>
    <updated>2021-01-01T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/AWS-ARN-0.001">AWS-ARN</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>0.001</td>
<td>Dumb module to parse and generate ARNs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-0.09-TRIAL">AnyPAN</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.09</td>
<td>CPAN Mirror and DarkPAN merging toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-Storage-S3-0.05-TRIAL">AnyPAN-Storage-S3</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.05</td>
<td>AnyPAN storage plugin for Amazon S3</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-ImageMagickUtils-0.001">App-ImageMagickUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to ImageMagick</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-MetaCPANUtils-0.001">App-MetaCPANUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-OverlapUtils-0.001">App-OverlapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Command-line utilities related to overlapping lines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/App-Toolforge-MixNMatch-0.01">App-Toolforge-MixNMatch</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool app.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-jupiter-1">App-jupiter</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>an app that serves a river of news as a static page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Array-OverlapFinder-0.001">Array-OverlapFinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Find/remove overlapping items between two ordered sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OKLAS/Async-Template-0.12">Async-Template</a></td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>0.12</td>
<td>Async Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/EXODIST/Atomic-Pipe-0.001">Atomic-Pipe</a></td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>0.001</td>
<td>Send atomic messages from multiple writers across a POSIX pipe.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-DBI-0.000_01">AtteanX-Store-DBI</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>Database quad-store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Badge-Depot-Plugin-Githubactions-0.0100">Badge-Depot-Plugin-Githubactions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Github Actions plugin for Badge::Depot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-Meta-diff-0.001">CLI-Meta-diff</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Metadata for diff CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-MetaUtil-Getopt-Long-0.001">CLI-MetaUtil-Getopt-Long</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Routine related to Getopt::Long</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/CPANfile-Parse-PPI-0.01">CPANfile-Parse-PPI</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Parse cpanfiles with PPI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Data-CompactReadonly-0.0.1">Data-CompactReadonly</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>a description of CompactReadonly data format, version 0.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMC/Devel-WatchVars-v1.0.0">Devel-WatchVars</a></td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>v1.0.0</td>
<td>trace access to scalar variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-BME280-0.01">Device-Chip-BME280</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for BME280</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Dist-Mgr-1.00">Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Distribution development cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-Author-CSSON-GithubActions-0.0100">Dist-Zilla-Plugin-Author-CSSON-GithubActions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Ease creation of common Github Actions workflows</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-CheckForUnwantedFiles-0.0100">Dist-Zilla-Plugin-CheckForUnwantedFiles</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Check for unwanted files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-PluginBundle-Author-GTERMARS-0.01">Dist-Zilla-PluginBundle-Author-GTERMARS</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Plugin Bundle for distributions built by GTERMARS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/Finance-Crypto-Exchange-Kraken-0.001">Finance-Crypto-Exchange-Kraken</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Perl implementation of the Kraken REST API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKWIN/Finance-IG-0.01">Finance-IG</a></td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>0.01</td>
<td>– Module for doing useful stuff with IG Markets REST API.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Geo-Compass-Direction-0.01">Geo-Compass-Direction</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Convert a compass heading degree into human readable direction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-0.06">HEAT-Crypto</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.06</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-X25519-0.04">HEAT-Crypto-X25519</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.04</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenChart-0.001">Health-BladderDiary-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/JavaScript-Const-Exporter-v0.1.0">JavaScript-Const-Exporter</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Convert exported Perl constants to JavaScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/LocalConf-Parser-0.01">LocalConf-Parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Locale-Places-0.01">Locale-Places</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Translate places using <a href="http://download.geonames.org/" rel="nofollow">http://download.geonames.org/</a></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log-Log4perl-Appender-Redis-0.01">Log-Log4perl-Appender-Redis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseBaheForDump-0.001">Log-ger-UseBaheForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Bahe to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseJSONForDump-0.003">Log-ger-UseJSONForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Use JSON::MaybeXS to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseYAMLForDump-0.001">Log-ger-UseYAMLForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use YAML::PP to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log4perlAppenderRedis-0.01">Log4perlAppenderRedis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/LogicMonitor-REST-Signature-0.0.1">LogicMonitor-REST-Signature</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Builds LMv1 token header info for Logicmonitor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TURNERJW/LyricFinder-1.00">LyricFinder</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>Fetch song lyrics from several internet lyric sites.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TRIZEN/Math-Sidef-0.01">Math-Sidef</a></td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>0.01</td>
<td>Perl interface to Sidef's mathematical library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Mo-utils-0.01">Mo-utils</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Mo utilities.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Module-Installed-1.00">Module-Installed</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Check whether a module, or a file's list of includes are installed.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Mojolicious-Plugin-Parametry-1.001001">Mojolicious-Plugin-Parametry</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Mojolicious plugin providing param helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAMI/MsOffice-Word-Template-1.0">MsOffice-Word-Template</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1.0</td>
<td>treat a Word document as Template Toolkit document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-Chord-Progression-0.0001">Music-Chord-Progression</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0001</td>
<td>Create network transition chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Inversion-0.0100">Music-MelodicDevice-Inversion</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply melodic inversion to a series of notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Ornamentation-0.0100">Music-MelodicDevice-Ornamentation</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Chromatic and diatonic musical ornamentation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Transposition-0.0100">Music-MelodicDevice-Transposition</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply chromatic and diatonic transposition to notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Nano-0.01">Nano</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Minimalist Object Persistence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Net-Cloudflare-DNS-0.01">Net-Cloudflare-DNS</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>DNS API for Cloudflare API v4</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-TokenExchange-0.001">Net-OAuth2Server-TokenExchange</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A Token Exchange extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OETIKER/PDF-QRCode-0.1.0">PDF-QRCode</a></td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>v0.1.0</td>
<td>Add QRCode method to PDF::API2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LEONT/PerlIO-bom-0.001">PerlIO-bom</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>Automatic BOM handling in Unicode IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAVECROSS/Plack-App-DirectoryIndex-0.0.1">Plack-App-DirectoryIndex</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>Serve static files from document root with an index file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Plack-Middleware-Text-Minify-v0.1.0">Plack-Middleware-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>minify text responses on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueCurses-0.0.1">RogueCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.0.1</td>
<td>game system for RPG/Adventure games using Curses.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueQuest-0.1.1">RogueQuest</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>game system for RPG/Adventure games using SDL for graphics.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/SMS-Send-Adapter-Node-Red-0.04">SMS-Send-Adapter-Node-Red</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.04</td>
<td>SMS::Send Adapter to Node-RED JSON HTTP request</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/SQL-PatchDAG-0.100">SQL-PatchDAG</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.100</td>
<td>A minimal DB schema patch manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/STEVEB-Dist-Mgr-0.01">STEVEB-Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>My distribution release cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-AudioTag-0.0102">Statocles-Plugin-AudioTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0102</td>
<td>Change mp3 anchors to audio elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Syntax-Check-1.00">Syntax-Check</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Wraps 'perl -c' so it works even if modules are unavailable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMCOP/Sys-Linux-KernelVersion-0.100">Sys-Linux-KernelVersion</a></td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>0.100</td>
<td>Gives tools for checking the current running linux kernel version</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Test-Mojo-Role-DOMinizer-1.001001">Test-Mojo-Role-DOMinizer</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Test::Mojo role to examine DOM mid test chain</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Text-Minify-XS-v0.1.0">Text-Minify-XS</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Simple text minification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Diff-0.01">Toolforge-MixNMatch-Diff</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool diff.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Object-0.01">Toolforge-MixNMatch-Object</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool objects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Print-0.01">Toolforge-MixNMatch-Print</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool object print routines.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Struct-0.01">Toolforge-MixNMatch-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool structures.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GETTY/WWW-Picnic-0.001">WWW-Picnic</a></td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>0.001</td>
<td>Library to access Picnic Supermarket API
</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-0.01">Wikibase-Datatype</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-Struct-0.01">Wikibase-Datatype-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types struct conversions.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Word-Rhymes-0.01">Word-Rhymes</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Takes a word and fetches rhyming matches from RhymeZone.com</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ColorName-Any-0.002">WordList-ColorName-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Wordlist from any Graphics::ColorNames::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Json-0.01">Zing-Encoder-Json</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JSON Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Jwt-0.01">Zing-Encoder-Jwt</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JWT Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Mysql-0.01">Zing-Store-Mysql</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Mysql Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Pg-0.01">Zing-Store-Pg</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Postgres Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Redis-0.01">Zing-Store-Redis</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Redis Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Sqlite-0.01">Zing-Store-Sqlite</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Sqlite Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Zang-0.01">Zing-Zang</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Callback-based Zing Processes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/config-parser-0.01">config-parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/crazy-fast-media-scan-0.001-TRIAL">crazy-fast-media-scan</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>methods to identify files using random sampling</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>11</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>8</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>6</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract AWS-ARN JWRIGHT 0.001 Dumb module to parse and generate ARNs AnyPAN KARUPA 0.09 CPAN Mirror and DarkPAN merging toolkit AnyPAN-Storage-S3 KARUPA 0.05 AnyPAN storage plugin for Amazon S3 App-ImageMagickUtils PERLANCAR 0.001 Utilities related to ImageMagick App-MetaCPANUtils PERLANCAR 0.001 CLI utilities related to MetaCPAN App-OverlapUtils PERLANCAR 0.001 Command-line utilities related to overlapping … <a href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1931</id>
    <published>2021-01-01T00:32:41Z</published>
    <updated>2021-01-01T00:32:41Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Evaluate Perl project for new client - assessment</title>
  <summary type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></summary>
  <updated>2020-12-30T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/evaluate-project"/>  <id>https://perlmaven.com/evaluate-project</id>
  <content type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>CPAN-Updates November/Dezember 2020</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Auch in den letzten beiden Monaten dieses Jahres waren wir nicht ganz untätig – teilweise mit Hilfe anderer Perl-Programmierer\*innen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember</id>
    <published>2020-12-29T10:00:00Z</published>
    <updated>2020-12-29T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Teaser: Gitlab und Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-28-gitlab-schulung" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Gitlab bietet viel Funktionalität, die für Perl-Projekte sinnvoll genutzt werden kann. Unsere Schulung soll am praktischen Beispiel einer kleinen CPAN-Distribution einen Einblick in die Möglichkeiten bieten.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-28-gitlab-schulung</id>
    <published>2020-12-28T10:00:00Z</published>
    <updated>2020-12-28T10:00:00Z</updated>
  </entry>
</feed>
