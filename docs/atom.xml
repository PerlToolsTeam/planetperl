<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-12-18T13:51:25Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6706364024855383118</id>
    <published>2020-12-04T17:40:00.006-08:00</published>
    <updated>2020-12-16T22:53:54.702-08:00</updated>
    <title type="text">rt.cpan.org will sunset on March 1st, 2021</title>
    <content type="html">&lt;p&gt;rt.cpan.org will be sunset on March 1st, 2021 due to low and declining use.&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;Back when we started this service, it filled a need by providing a place for CPAN authors to track bug reports and feature requests. In recent years&amp;nbsp;&lt;/span&gt;&lt;a data-saferedirecturl="https://www.google.com/url?q=http://github.com&amp;amp;source=gmail&amp;amp;ust=1608051614409000&amp;amp;usg=AFQjCNHHBoyICGB-3KjXQ_B1HAHSPyhCIg" href="http://github.com/" rel="noreferrer" style="background-color: white; color: #1155cc; font-family: Arial, Helvetica, sans-serif;" target="_blank"&gt;github.com&lt;/a&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;&amp;nbsp;and other sites have added issue tracking to their git repo hosting and many CPAN authors have migrated to these sites.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;If you are a CPAN author, there are several tools to help you migrate existing tickets:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;https://github.com/dagolden/zzz-rt-to-github&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;https://github.com/houseabsolute/RTx-ToGitHub&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;&lt;span style="background-color: white;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;See Dave Cross'&amp;nbsp;&lt;a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/"&gt;Plan for CPAN Authors&lt;/a&gt;, which describes steps you may wish to take to transition to a new bug tracking system.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;p&gt;We're still finalizing the details, but the plan is to provide a static historical archive.&amp;nbsp;&lt;/p&gt;&lt;p&gt;This post will be updated as we figure things out.&lt;/p&gt;&lt;p&gt;Updated: 2020-12-13&lt;/p&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html" title="rt.cpan.org will sunset on March 1st, 2021"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry>
    <title>Drawing a blank with XS</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/12/drawing-a-blank-with-xs.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9995</id>

    <published>2020-12-17T06:35:28Z</published>
    <updated>2020-12-17T06:51:12Z</updated>

    <summary>I spent quite a lot of time trying to work out what this error message meant: Error: Unterminated '#if/#ifdef/#ifndef' in Libpng.xs, line 1328 The first problem here is that line 1328 is the end of the file, so that wasn't...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="blanklines" label="blank lines" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="blanketyblank" label="blankety-blank" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="drawingablank" label="drawing a blank" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perlxs" label="Perl XS" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>I spent quite a lot of time trying to work out what this error message meant:</p>

<pre><code>Error: Unterminated '#if/#ifdef/#ifndef' in Libpng.xs, line 1328
</code></pre>

<p>The first problem here is that line 1328 is the end of the file, so that wasn't a big help.</p>

<p>After spending a lot of time counting #if and #endif statements in the file over and over again, in the end I had the bright idea of looking at the actual XS output, and managed to find the problem. Apologies for quoting it in full here but I can't think of a good way to truncate it:</p>

<pre>
#if 0
#define XSubPPtmpAAAD 1


XS_EUPXS(XS_Image__PNG__Libpng_set_crc_action); /* prototype to pass -Wmissing-prototypes */Image__PNG__Libpng_set_crc_action)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "Png, crit_action, ancil_action");
    {
        Image__PNG__Libpng      Png;
        int     crit_action = (int)SvIV(ST(1))
;
        int     ancil_action = (int)SvIV(ST(2))
;

        if (SvROK(ST(0)) && sv_derived_from(ST(0), "Image::PNG::Libpng")) {

            IV tmp = SvIV((SV*)SvRV(ST(0)));
            Png = INT2PTR(Image__PNG__Libpng,tmp);
        }
        else
            Perl_croak_nocontext("%s: %s is not of type %s",
                        "Image::PNG::Libpng::set_crc_action",
                        "Png", "Image::PNG::Libpng")
;
#line 905 "Libpng.xs"
        png_set_crc_action (Png->png, crit_action, ancil_action);
#endif /* 0 */
#line 2836 "Libpng.c"
    }
    XSRETURN_EMPTY;
}
</pre>

<p>Can you work it out?</p>

<p>It turns out that XS processes</p>

<pre>
#if 0

void
perl_png_set_crc_action  (Png, crit_action, ancil_action);
    Image::PNG::Libpng Png;
    int crit_action;
    int ancil_action;
CODE:
    png_set_crc_action (Png->png, crit_action, ancil_action);

#endif /* 0 */

</pre>

<p>completely differently from</p>

<pre>
#if 0

void
perl_png_set_crc_action  (Png, crit_action, ancil_action);
    Image::PNG::Libpng Png;
    int crit_action;
    int ancil_action;
CODE:
    png_set_crc_action (Png->png, crit_action, ancil_action);
#endif /* 0 */

</pre>

<p>In the former case, the #endif goes after the function, and in the latter case it goes into the function body before the end of the function.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 91: Count Numbers and Jump Games</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-91-count-numbers.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9991</id>

    <published>2020-12-16T04:27:19Z</published>
    <updated>2020-12-17T04:36:12Z</updated>

    <summary>These are some answers to the Week 91 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a few days (December 20, 2020). This blog post offers some solutions to...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 91 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-091/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (December 20, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Count Numbers</h2>

<p><em>You are given a positive number <code>$N</code>.</em></p>

<p><em>Write a script to count number and display as you read it.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $N = 1122234
Output: 21321314

as we read "two 1 three 2 one 3 one 4"
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $N = 2333445
Output: 12332415

as we read "one 2 three 3 two 4 one 5"
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $N = 12345
Output: 1112131415

as we read "one 1 one 2 one 3 one 4 one 5"
</code></pre>

<h3>Count Numbers in Raku</h3>

<p>For this task, we&#8217;re going to use the three examples provided in the task description. I first tried to look whether it could be done with a simple regex, but that quickly turned out to be a bit more complicated than I originally thought. Of course, this is quite a simple task for a Raku grammar, but I decided to avoid it because I wanted to be able to use a similar solution in Perl and in Scala. So I decided to do it the good old procedural way and to simply loop over the digits of the integer and to count the sequences.</p>

<pre><code>use v6;

my @tests = &lt;1122234 2333445 12345&gt;;
say $_.fmt("%-10d -&gt; "), count-numbers $_ for @tests;

sub count-numbers (Int $n) {
    my $result = "";
    my @digits = $n.comb;
    my $start = shift @digits;
    my $count = 1;
    for @digits -&gt; $digit {
        if $digit eq $start {
            $count++;
        } else {
            $result ~= $count ~ $start;
            $count = 1;
            $start = $digit;
        }
    }
    $result ~= $count ~ $start;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./count-numbers.pl
1122234    -&gt; 21321314
2333445    -&gt; 12332415
12345      -&gt; 1112131415
</code></pre>

<h3>Count Numbers in Perl</h3>

<p>Just as in Raku, we loop over the digits of the integer and count the sequences:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = qw&lt;1122234 2333445 12345&gt;;
say  sprintf( "%-10d -&gt; ", $_), count_numbers($_) for @tests;

sub count_numbers {
    my $n = shift;
    my $result = "";
    my @digits = split //, $n;
    my $start = shift @digits;
    my $count = 1;
    for my $digit (@digits) {
        if ($digit eq $start) {
            $count++;
        } else {
            $result .= $count . $start;
            $count = 1;
            $start = $digit;
        }
    }
    $result .= $count . $start;
    return $result;
}
</code></pre>

<p>Output:</p>

<pre><code>$ perl count-numbers.pl
1122234    -&gt; 21321314
2333445    -&gt; 12332415
12345      -&gt; 1112131415
</code></pre>

<h3>Count Numbers in Scala</h3>

<p>We also loop over the digits of the integer and count the sequences. Caveat: I am a beginner in Scala (and use the Perl Weekly Challenge tasks to learn Scala), my Scala programs are certainly quite clumsy at this point. They do the job, but please don&#8217;t consider them to be good practice or idiomatic. I certainly intend to evolve towards more OO and functional programming paradigms, but at this point, I first need to get acquainted to the basic syntax. For the time being, please be kind enough to let me know if you see any errors, problems or inefficiencies in my Scala programs.</p>

<pre><code>import Array._
object numCount extends App {
  val tests = List("1122234", "2333445", "12345")
  for (test &lt;- tests) {
    println(f"$test%-10s -&gt; ${countNumbers(test)}%s")
  }

  def countNumbers(n: String): String = {
    var result = ""
    val digits = n.split("")
    var start = digits(0)
    var count = 1
    for (i &lt;- 1 to digits.size - 1) {
      if (digits(i).equals(start)) {
        count += 1
      } else {
        result += s"$count" + start
        count = 1;
        start = digits(i)
      }
    }
    result += s"$count" + start
    return result
  }
}
</code></pre>

<p>Output generated:</p>

<pre><code>1122234    -&gt; 21321314
2333445    -&gt; 12332415
12345      -&gt; 1112131415
</code></pre>

<h2>Task 2: Jump Game</h2>

<p><em>You are given an array of positive numbers <code>@N</code>, where value at each index determines how far you are allowed to jump further.</em></p>

<p><em>Write a script to decide if you can jump to the last index. Print 1 if you are able to reach the last index otherwise 0.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @N = (1, 2, 1, 2)
Output: 1

as we jump one place from index 0 and then two places 
from index 1 to reach the last index.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @N = (2,1,1,0,2)
Output: 0

it is impossible to reach the last index. as we jump 
two places from index 0 to reach index 2, followed by 
one place jump from index 2 to reach the index 3. once 
you reached the index 3, you can't go any further 
because you can only jump 0 position further.
</code></pre>

<p>Note that any time you reach a 0 in the process, you&#8217;re just stuck there (possibly in an infinite loop) and can&#8217;t go any further (and should print 0). I thought for a few seconds that it might be a good idea to reject any array in which any value (except the last one) is 0, but that&#8217;s wrong because we may actually jump over the 0 and eventually succeed to get to the last item of the input array. So we need to stop when we actually land on a zero value or when we get past the end of the array.</p>

<h3>Jump Game in Raku</h3>

<p>We first define three test cases. The <code>jump</code> subroutine just follows the jump game algorithm, return 0 if it landed on a zero item or if it got past the array end. And it return 1 if it landed on the array&#8217;s last element.</p>

<pre><code>use v6;

my @tests = [ &lt;1 2 1 2 &gt; ], [ &lt; 2 1 1 0 2 &gt; ], [ &lt; 1 2 1 2 1 &gt; ];
say $_, " -&gt; ", jump $_ for @tests;

sub jump (@in) {
    my $i = 0;
    loop {
        return 0 unless @in[$i];
        my $next_i = $i + @in[$i];
        return 1 if $next_i == @in.end;
        return 0 if $next_i &gt; @in.end;
        $i = $next_i;
    }
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ raku ./jump-game.raku
[1 2 1 2] -&gt; 1
[2 1 1 0 2] -&gt; 0
[1 2 1 2 1] -&gt; 0
</code></pre>

<h3>Jump Game in Perl</h3>

<p>Same method: The <code>jump</code> subroutine just follows the jump game algorithm, return 0 if it landed on a zero item or if it got past the array end. And it return 1 if it landed on the array&#8217;s last element.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ([ qw&lt;1 2 1 2 &gt; ], [ qw&lt; 2 1 1 0 2 &gt; ], [ qw&lt;1 2 1 2 1 &gt; ]);
say "@{$_}  -&gt; ", jump($_) for @tests;

sub jump {
    my @in = @{$_[0]};
    my $i = 0;
    while (1) {
        return 0 unless $in[$i];
        my $next_i = $i + $in[$i];
        return 1 if $next_i == $#in;
        return 0 if $next_i &gt; $#in;
        $i = $next_i;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ perl jump-game.pl
1 2 1 2  -&gt; 1
2 1 1 0 2  -&gt; 0
1 2 1 2 1  -&gt; 0
</code></pre>

<h3>Jump Game in Scala</h3>

<p>We use again the same basic algorithm:</p>

<pre><code>import Array._
object jumpGame extends App {
  val tests =
    Array(Array(1, 2, 1, 2), Array(2, 1, 1, 0, 2), Array(1, 2, 1, 2, 1))
  for (test &lt;- tests) {
    println(s"${test.mkString(" ")} -&gt; ${jump(test)}")
  }

  def jump(in: Array[Int]): Int = {
    var i = 0;
    val max = in.size - 1
    while (i &lt;= max) {
      if (in(i) == 0) { return 0 }
      val next_i = i + in(i);
      if (next_i == max) { return 1 }
      if (next_i &gt; max) { return 0 }
      i = next_i;
    }
    return 0
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1 2 1 2 -&gt; 1
2 1 1 0 2 -&gt; 0
1 2 1 2 1 -&gt; 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 27, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl dying? Well now I don't care</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/dmitry_karasik/2020/12/perl-dying-well-now-i-dont-care.html"/>
    <id>tag:blogs.perl.org,2020:/users/dmitry_karasik//1164.9994</id>

    <published>2020-12-17T02:46:54Z</published>
    <updated>2020-12-17T03:45:22Z</updated>

    <summary>It is a bit of a long story how I got burned by bad perl internal politics. For many years I wanted images in Pod. And many others wanted too. And of course, each time I raised this in lists...</summary>
    <author>
        <name>Dmitry Karasik</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dmitry_karasik/">
        <![CDATA[<p>It is a bit of a long story how I got burned by bad perl internal politics.</p>

<p>For many years I wanted images in Pod. And many others wanted too. And of course, each time I raised this in lists and on facebook, an answer was, if you want it, go and write it yourself. I would tell that myself, the classic "patches are welcome". Until one day I said, well, now, why actually not, right?  Especially that I do have experience in creating and actively using images in pod using various hacks, such as direct inclusion of html with images, and even writing a standalone POD viewer capable of showing said images.</p>

<p>However as I'm in software development in so many years, I know that just writing whatever image extension I feel like won't get accepted: people won't necessarily agree on the new sytnax, on the way it is implemented, or even on the very fact that the extenision is needed, at all. So I started by carefully asking around these questions everyone on all perl groups I could reach, and even opened a ticket on github to discuss whether image extension for pod is a good and desired thing to do, and what syntax it should have.</p>

<p>And indeed, both on <a href="https://github.com/Perl/perl5/issues/18169">github</a> and in pod-people archives, there was lots of productive discussions, and some things were pointed to that I didn't think as good as I thought, but step by step, final capacity and syntax emerged. Strangely enough, the best case for all requirement came to be ... YAML! Even though I didn't consider it, and in its full form it is a clear overkill, but if one to go pedantically through every requirement, it seems that strange as it may be, but YAML actually is quite a good candidate, the best actually of all proposal and syntaxes. One clear win is that when you create a new syntax, you need its full specification, and BNF, and a parser. And a standard implementation.  However, if the syntax exists already, lots of efforts can be spared, and also other languages can use this extension out of the box. Granted, that can be any other syntax but YAML, but then .. what? Json? Xml? No, thank you, but no. And YAML has excellent, first-class support of multiline text, which is vital for interspersing new syntax with old, for the older parsers. Anyway, whoever is interested in that discussion, it is in pod-perl archives <a href="https://www.nntp.perl.org/group/perl.pod-people/2020/10.html">here</a> , and I personally think the extension became very light and intuitive, see the <a href="https://github.com/dk/pod-simple/blob/master/lib/Pod/Simple/Images.pod">description</a>.</p>

<p>So, next step. After reaching consensus both on github and pod-people, I'm asking several times everyone, if I'm going to start the implementation, would that be okay with what we agreed on? Would that not be ignored, would we continue working on it? I'm not asking for immediate accept , because during the implentation anything could happen, but yes, I was assured by Karl Williamson, Pod::Simple committer, that he would really encourage me to do that work. Thank you Karl for your kind words!</p>

<p>And so it started. I quickly found that I don't what whole YAML, and a rather limited set of it would suffice. YAML is rather esoteric, but as we need something simple, basically, commands about that this is a picture and this is its caption, that was basically it. I chose to implement though inline arrays partly as a fun experience, and partly in case where one would need to specify an image set, <i>srcset</i>, that would contain several images, or something similar. I rather quickly implemented a patch for Pod::Simple and filed a pull request <a href="https://github.com/perl-pod/pod-simple/pull/128">here</a> .</p>

<p>First, there were constructive feedbacks. Tina Muller noted that YAML parser, or even a limited YAML parser, cannot really use word YAML in its name if it parses something that a real parser wouldn't (and fail where real parser doesn't). The rationale is that if someone writes an invalid YAML that will be parsed by the reference implementation, other parser will be in trouble, and we don't want that. But since we're doing the limited YAML, failing on valid YAML is okay by definition, because we never specify that this is a valid syntax in the first place. In addition, she referenced me to a huge YAML test suite, and quite frankly, I had a hell of a time adapting the parser to microscopic special cases in the suite. But in time, that was done, too. I was seriously proud of my work and really hoped for the next step. Unfortunately Tina couldn't check the result because she's busy with personal stuff, and I respect that of course, but on the other hand, I believe I fixed all problems she mentioned, and some smaller stuff can be done later.</p>

<p>However the next step came to be not quite what I expected. Or even worse, it _was_ what I expected, but worked some months in advance to prevent just that.  Namely, there started to appear feedbacks that said that they don't want YAML.  Well, after having come that far, some would consider it a bit too late probably. But okay, let's find out what the problem is, and let's fix it, and let's move on. But... no. I asked several times what seems to be the problem, and the gist of it seems to be that they just don't want it, without explanation.  Just that. Worse, as I understand, this is core people. And so it has halted.</p>

<p>Boy, this was a disappointment. Did I not ask everyone, everyone I could reach, do you have any objection? Do you mind this? Do you mind that? What is, in your optinion the syntax should be? And only after lots of efforts, it ended like this. I'm angry, I'm frustrated, I don't have any stamina left to ask around again, especially the other side doesn't seem to be interested in dialogue. And why should I, really? When I started with perl in 1997, and went on YAPC conferences, there were so many possibilities to expand the language, and Larry Wall was blessing all kinds of crazy extensions (remember rewrite of perl on C++? that was blessed too). It's a pity that a culture once blossoming turned into this. Probably it needs to die so everyone would understand what was lost. I don't know. And I don't care now.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Replacing CPAN RT</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/replacing-cpan-rt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two weeks ago, we learned that the <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">CPAN Request Tracker was closing down early next year</a>. I proposed <a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">a plan that CPAN authors could follow</a> to ensure that their users can still find somewhere to report bugs in modules (and, perhaps more importantly, to see what bugs have already been reported in modules).</p>
<p>But that’s only part of the problem. In fact, it’s probably a minor part of the problem. If you’re an active CPAN author, then you probably already knew about the impending closure and had already made plans to deal with it. It’s likely that you had already moved your bug tracking to a new system. At the very least, you now know what the problem is and are considering the best way to deal with it before next March.</p>
<p>The far larger problem is the thousands of distributions that aren’t owned by active CPAN authors. What are we going to do about those?</p>
<p>How big is the problem? Well, the site <a href="https://cpan.rocks/">cpan.rocks</a> displays stats about CPAN. One of the panels on its front page shows a summary of the bugtracker information in CPAN distribution. You’ll see that 24,873 distributions (that’s 66% of them) have no bugtracker information included in their metadata. That’ll be for a number of reasons. Some of them will be distributions that haven’t been updated since alternative bugtrackers were supported by CPAN (originally, it was just assumed that everyone used the CPAN RT); some of them will be because the authors don’t know how to add the required metadata; and some of them (including most of my distributions) are missing it because the author just hasn’t got round to adding it yet. There will, of course, be many more reasons.</p>
<p>Some people will have read the recent news and will be galvanised into doing something about it (I fall firmly into that category) but others (and I’d suggest that it’s a large majority) either won’t hear about the change or won’t care about it. And why should they care? They were generous enough to donate some of their code to CPAN at some point. They don’t have any obligation at all to carry on maintaining it after they’ve lost interest in whatever project led to them writing that software.</p>
<p>Take, for example, <a href="https://metacpan.org/release/Mail-Alias">Mail-Alias</a>. That was released by someone called Tom Zeltwanger twenty years ago. He released three versions over a period of two months and then stopped. Who knows why. When he last updated the module, the CPAN search engine didn’t support alternative bugtrackers, so he never considered adding one. And that meant that the CPAN page for his module linked to the default bugtracker set up for the distribution on the CPAN RT. In the last fifteen years, <a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Mail-Alias">four bugs have been reported</a> against that module. But as Tom has moved on, nothing has been done about any of them. There are a lot of modules on CPAN in a similar situation.</p>
<p>But that leaves <a href="https://metacpan.org/">MetaCPAN</a> (the current CPAN search engine) with a problem. Where does it send people who want to report a bug against an inactive module?</p>
<p>You might think that it doesn’t matter. But I disagree. Maybe I think that Mail::Alias would be the perfect module for a project I’m working on. Even before I start using it, it’s useful to be able to browse any existing bugs to see how they might affect my use of the module. And if someone later comes along and wants to take over maintenance of the module, then it’s useful for them to see any bugs that have been raised during the hiatus when the module was unmaintained.</p>
<p>So, I’m a big fan of having a default bugtracker for CPAN modules – even for ones with inactive authors. Which leads us to the question of where should that be. And I have a suggestion.</p>
<p>A few years ago, Micheal Schwern and Olaf Alders set up <a href="https://github.com/gitpan">Gitpan</a>. It’s an organisation which has a Github repo for every distribution on CPAN. And those repos each have a commit for every release of those distributions. Here, for example, is <a href="https://github.com/gitpan/Mail-Alias">the repo for Mail-Alias</a> – and you can see the three commits for the three releases I mentioned above.</p>
<p>So I’d like to suggest Gitpan as a suitable place to use as a default bugtracker for CPAN distributions. There are a couple of problems:</p>
<ul>
<li>It looks like the auto-population of the commits stopped a few years ago. We’d need to work out how that works and catch up on the recent uploads.</li>
<li>None of the repos has the issue tracker turned on. But I expect that can be done with a relatively simple program that uses the GitHub API.</li>
</ul>
<p>Of course, we also have the problem that some people object to using GitHub since it was taken over by Microsoft. But that’s fine, they can just point their bugtracker metadata to their preferred system.</p>
<p>The problem with the CPAN RT was that it needed too much maintenance – and the Perl NOC team is really overworked. Any self-hosted alternative seems likely to have the same problem eventually. So I’m all in favour of using a third-party alternative. And if you’re taking that route, then it makes sense (to me, at least) to use a third-party system that already has all (ok, most) of the repos set up.</p>
<p>I haven’t spoken to Schwern or Olaf about this, so I don’t know if there was some major problem that would stop this plan from working. But I think it’s worth looking at.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two weeks ago, we learned that the CPAN Request Tracker was closing down early next year. I proposed a plan that CPAN authors could follow to ensure that their users can still find somewhere to report bugs in modules (and, perhaps more importantly, to see what bugs have already been reported in modules). But that’s […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2026</id>
    <published>2020-12-16T17:24:20Z</published>
    <updated>2020-12-16T17:24:20Z</updated>
    <category term="CPAN"/>
    <category term="bugtracker"/>
    <category term="cpan"/>
    <category term="cpan rt"/>
    <category term="github"/>
    <category term="gitpan"/>
  </entry>
  <entry>
    <title>I made a podcast about regular expressions</title>
    <link rel="alternate" href="https://dev.to/eugenekudashev/i-made-a-podcast-about-regular-expressions-3h67" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;Hello everyone! I’m Eugene, and /^[a-z0-9_-] {3,16}$/ is a podcast in which I share some tips and tricks about working with regular expressions and using them in your day-to-day work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/229EPBGAyYQjZpsUSyVJyS"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Regular expressions can be extremely useful whenever you need to make the computer do something with text. &lt;/p&gt;

&lt;p&gt;For example, when you need to check that what user typed is a real email, or automatically replace every uppercase letter F into a lowercase letter F. &lt;/p&gt;

&lt;p&gt;But as useful as they are, regular expressions can be extremely confusing and intimidating for beginners. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_gVWbEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EpRk2-FXEAAn50n.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLjhErYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/754964134610034688/ZX7HA_eI_normal.jpg" alt="Not followed by anyone you’re following profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Not followed by anyone you’re following
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/eugenekudashev"&gt;@eugenekudashev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      some behind the scenes — excerpt from the transcript&lt;br&gt;&lt;br&gt;LISTEN ON SPOTIFY &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href="https://t.co/KSeHkmkiX7"&gt;open.spotify.com/show/00DKkZWGl…&lt;/a&gt;&lt;br&gt;&lt;br&gt;LISTEN ELSEWHERE &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href="https://t.co/aBQkYJIf5e"&gt;anchor.fm/slashcircumflex&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:23 AM - 15 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338806834816294915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338806834816294915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      0
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338806834816294915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      1
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In this podcast I’m going to explain regular expressions in a simple and accessible way, and help you start using them in your day-to-day work.&lt;/p&gt;

&lt;p&gt;The first episode, &lt;strong&gt;/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,6})*$/&lt;/strong&gt;, is about checking that a given string is a valid email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://open.spotify.com/show/00DKkZWGlbKA5VC4Cjd6KB"&gt;Listen on Spotify&lt;/a&gt; or &lt;a href="https://anchor.fm/slashcircumflex"&gt;elsewhere&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know what you think and share it with your network if you like it! And follow me on Twitter or Spotify to get the next episodes&lt;/p&gt;

&lt;p&gt;Thank you :)&lt;/p&gt;

</content>
    <author>
      <name>Not followed by anyone you’re following</name>
    </author>
    <id>https://dev.to/eugenekudashev/i-made-a-podcast-about-regular-expressions-3h67</id>
    <published>2020-12-15T12:08:15Z</published>
    <updated>2020-12-15T12:08:15Z</updated>
    <category term="podcast"/>
    <category term="regexp"/>
    <category term="sideprojects"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Einführung in Test::Class::Moose</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-15-einfuehrung-test-class-moose" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Mit Test::Class::Moose können Entwickler die Mittel von Moose nutzen, um ihre Testsuite objektorientiert aufzubauen. In einem vorherigen Artikel habe ich gezeigt, wie diese Tests durch einen Testtreiber ausgeführt werden. In diesem Artikel zeigen ich an einem einfachen Beispiel die grundsätzliche Verwendung von `Test::Class::Moose.`</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-15-einfuehrung-test-class-moose</id>
    <published>2020-12-15T10:00:00Z</published>
    <updated>2020-12-15T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 091</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-091-12l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-091/">Challenge 091</a></p>

<h1>
  <a href="#task-1-count-number" class="anchor">
  </a>
  TASK #1 › Count Number
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given a positive number <code>$N</code>.</p>

<p>Write a script to count number and display as you read it.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>The task mentions a positive number (as opposed to a positive integer), but didn't give an example of what to do with a dot, so my script will only accept integers.</p>

<p>This is one of those tasks where I'm interested in how other Team PWC members attempt it. I'm sure there is a way to do this purely with a regular expression, but after about 10 minutes of trying to find the correct syntax, I abandoned that idea.</p>

<p>In the end I went with something that just works™. I take the first character, and then use a regular expression pattern <code>/^($char+)(.*)$/</code> to remove the one or more occurrences of that character. I continue until the string is empty.</p>

<p>Then it is simply a matter of displaying the new number made up of the length and the number for each match.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl 1122234
21321314

» ./ch-1.pl 2333445
12332415

» ./ch-1.pl 12345
1112131415
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-jump-game" class="anchor">
  </a>
  TASK #2 › Jump Game
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given an array of positive numbers <code>@N</code>, where value at each index determines how far you are allowed to jump further.</p>

<p>Write a script to decide if you can jump to the last index. Print 1 if you are able to reach the last index otherwise 0.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>Like with the first task it is suggested that any positive number is valid. However zero - which is <a href="https://mathworld.wolfram.com/Zero.html">not a positive number</a> - is used in an example. It also doesn't make sense to have a fractional number, as you can't jump in non whole numbers. So for this task, I only allow non-negative integers.</p>

<p>For this tasks, I have a value <code>$position</code> which records my current position.</p>

<ul>
<li>I return 1 if the current position is the last index (array length - 1). In this case we have landed on the last index.</li>
<li>If the current position is greater than the last index I return 0. We have overshot the last index, and therefore no solution is possible.</li>
<li>I also return 0 if the value at the current position is <code>0</code>. In this case we will have an endless loop that will never move forward.</li>
<li>I then increase the <code>$position</code> variable by the value of the current index, and repeat the above tests.</li>
</ul>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl 1 2 1 2
1

» ./ch-2.pl 2 1 1 0 2
0
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-091-12l</id>
    <published>2020-12-14T12:48:27Z</published>
    <updated>2020-12-14T12:48:27Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Business Casual has a Whole New Meaning. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/pd5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online shopping, socializing, working—it’s a digital world now, which is perfect for our client. As an international IT company managing millions of domains for retail and corporate customers in nearly every country in the world, they’re busier than ever—and they need a few senior Perl developers to help them continue to thrive.</div>
    </content>
    <id>https://job.perl.careers/pd5</id>
    <published>2020-12-14T10:00:38Z</published>
    <updated>2020-12-14T10:00:38Z</updated>
  </entry>
  <entry>
    <title>If Jurassic Park has Taught us Anything, it’s that Science is Awesome! Perl in Australia.</title>
    <link rel="alternate" href="https://job.perl.careers/lyx" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">To make it to the inner circle, you need to have modern Perl skills. Ideally, you’ll have an interest in genome technology and bioinformatics. If you spend your weekends reading science magazines and think smarter crops are key to our future, they want to hear from you.</div>
    </content>
    <id>https://job.perl.careers/lyx</id>
    <published>2020-12-14T10:00:37Z</published>
    <updated>2020-12-14T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Free Lunch? Yes, Please. Perl job in Vienna.</title>
    <link rel="alternate" href="https://job.perl.careers/ssh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of the largest product and price comparison platforms in German-speaking countries is on the hunt for a Perl programmer who wants to use their skills to eradicate inflated prices. The successful candidate will relish the chance to join a team that attributes nearly two decades of success to an uncompromising commitment to transparency, objectivity, and quality content.</div>
    </content>
    <id>https://job.perl.careers/ssh</id>
    <published>2020-12-14T10:00:36Z</published>
    <updated>2020-12-14T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Bored of jobs that don't matter? Be a Perl developer and save lives! Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/vj6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This web-app saves lives, and literally pushes forward medical science. Your work will be used by the NHS, research labs, and healthcare providers worldwide to diagnose patients, organize research, and make the world a better place.</div>
    </content>
    <id>https://job.perl.careers/vj6</id>
    <published>2020-12-14T10:00:35Z</published>
    <updated>2020-12-14T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Not your ordinary town! Perl job in Malaysia!</title>
    <link rel="alternate" href="https://job.perl.careers/e02" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is a financial company whose meteoric growth over the last twenty years means that they’re a solid investment for anyone looking to make a change in location for their career. They started with the idea that online trading should be available to all, and from there, they’ve built a company with multiple locations worldwide.</div>
    </content>
    <id>https://job.perl.careers/e02</id>
    <published>2020-12-14T10:00:34Z</published>
    <updated>2020-12-14T10:00:34Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-12-14T10:00:33Z</published>
    <updated>2020-12-14T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Derrick Talks renv - Purdue Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 13, 2021; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/</id>
    <published>2020-12-14T10:00:32Z</published>
    <updated>2020-12-14T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Raku: A New Language for a New Year</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 7, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/</id>
    <published>2020-12-14T10:00:31Z</published>
    <updated>2020-12-14T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-12-14T10:00:30Z</published>
    <updated>2020-12-14T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-12-14T10:00:29Z</published>
    <updated>2020-12-14T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Python Programming Bootcamp for Scientists</title>
    <link rel="alternate" href="https://leanpub.com/c/bootcamp/c/pw20201207" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This is an introduction to Python for people who have no programming background. It includes the basics and some tools that are needed for Data Science. I teach this course at the <a href="https://www.weizmann.ac.il/">Weizmann Institute of Science</a>. The link here is a coupon that will give a deep discount in the next couple of days. Leanpub offers a 45-day, money-back guarantee.</div>
    </content>
    <id>https://leanpub.com/c/bootcamp/c/pw20201207</id>
    <published>2020-12-14T10:00:28Z</published>
    <updated>2020-12-14T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Dancer Course</title>
    <link rel="alternate" href="https://leanpub.com/c/dancer" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I started it 10 days ago. It was not easy, but so far I have managed to make some progress and record at least one video every day. In the last week, my two courses were the <a href="https://leanpub.com/bookstore?type=course">best seller courses</a> on Leanpub. I am quite happy with that and I hope they will remain there for the next week as well.</div>
    </content>
    <id>https://leanpub.com/c/dancer</id>
    <published>2020-12-14T10:00:27Z</published>
    <updated>2020-12-14T10:00:27Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/12/cccxix-12-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/12/cdxlvi-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-12-14T10:00:26Z</published>
    <updated>2020-12-14T10:00:26Z</updated>
  </entry>
  <entry>
    <title>2020.49 Shaped Shaping Up</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2020/12/07/2020-49-shaped-shaping-up/" type="text/html"/>
    <id>https://rakudoweekly.blog/2020/12/07/2020-49-shaped-shaping-up/</id>
    <published>2020-12-14T10:00:25Z</published>
    <updated>2020-12-14T10:00:25Z</updated>
  </entry>
  <entry>
    <title>do</title>
    <link rel="alternate" href="https://perlmaven.com/do" type="text/html"/>
    <id>https://perlmaven.com/do</id>
    <published>2020-12-14T10:00:24Z</published>
    <updated>2020-12-14T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90</title>
    <link rel="alternate" href="https://wlmb.github.io/2020/12/07/PWC90/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis tried the rarely-used bit operator for mathematica operation. Fun to read always.</div>
    </content>
    <id>https://wlmb.github.io/2020/12/07/PWC90/</id>
    <published>2020-12-14T10:00:23Z</published>
    <updated>2020-12-14T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 090</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-090-41" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Congratulations to Simon for becoming the Champion. Thanks for blogging on dev.to and promoting the cause.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-090-41</id>
    <published>2020-12-14T10:00:22Z</published>
    <updated>2020-12-14T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90: DNA Sequence and Ethiopian Multiplication</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-90-dna-sequence-and-ethiopian-multiplication.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent once again came up with compact solutions. You even get a bonus Scala solution this time.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-90-dna-sequence-and-ethiopian-multiplication.html</id>
    <published>2020-12-14T10:00:21Z</published>
    <updated>2020-12-14T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 090 -- DNA Sequence and Ethiopian Multiplication</title>
    <link rel="alternate" href="https://gugod.org/2020/12/pwc-090-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min made good use of Raku's power and made the DNA task look too easy.</div>
    </content>
    <id>https://gugod.org/2020/12/pwc-090-en/</id>
    <published>2020-12-14T10:00:20Z</published>
    <updated>2020-12-14T10:00:20Z</updated>
  </entry>
  <entry>
    <title>PWC090 - Ethiopian Multiplication</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/12/pwc090-ethiopian-multiplication/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Straight to the solution without any discussion.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/12/pwc090-ethiopian-multiplication/</id>
    <published>2020-12-14T10:00:19Z</published>
    <updated>2020-12-14T10:00:19Z</updated>
  </entry>
  <entry>
    <title>PWC090 - DNA Sequence</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/11/pwc090-dna-sequence/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One might say there is not much to talk about in DNA task. I would recommend Flavio's blog post to disprove that point.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/11/pwc090-dna-sequence/</id>
    <published>2020-12-14T10:00:18Z</published>
    <updated>2020-12-14T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Multiplication and DNA: Perl Weekly Challenge #90</title>
    <link rel="alternate" href="https://jacoby.github.io/2020/12/08/multiplication-and-dna-perl-weekly-challenge-90.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave made use of deadly combinations of scalar, grep and split. Please do check it out.</div>
    </content>
    <id>https://jacoby.github.io/2020/12/08/multiplication-and-dna-perl-weekly-challenge-90.html</id>
    <published>2020-12-14T10:00:17Z</published>
    <updated>2020-12-14T10:00:17Z</updated>
  </entry>
  <entry>
    <title>DNA Fragments Are Multiplying Exponentially in North-East Africa</title>
    <link rel="alternate" href="https://colincrain.com/2020/12/13/dna-fragments-are-multiplying-exponentially-in-north-east-africa/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin's blog is always fun to read. It is never short of fascinating facts beyond the power of Perl and Raku.</div>
    </content>
    <id>https://colincrain.com/2020/12/13/dna-fragments-are-multiplying-exponentially-in-north-east-africa/</id>
    <published>2020-12-14T10:00:16Z</published>
    <updated>2020-12-14T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Sequenced Multiplication with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/sequenced-multiplication.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne has been one of the biggest supporters of the Weekly Challenge. This was another week when he gave us Perl and Raku solutions.</div>
    </content>
    <id>https://raku-musings.com/sequenced-multiplication.html</id>
    <published>2020-12-14T10:00:15Z</published>
    <updated>2020-12-14T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Task 2 - Ethiopian Multiplication</title>
    <link rel="alternate" href="https://andinus.tilde.institute/pwc/challenge-090/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Andinus shows the power of Raku when dealing with the Ethiopian Multiplication task.</div>
    </content>
    <id>https://andinus.tilde.institute/pwc/challenge-090/</id>
    <published>2020-12-14T10:00:14Z</published>
    <updated>2020-12-14T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 090</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/13" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting to read Adam's reference to YAPC 2009 with regard to the DNA task.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/13</id>
    <published>2020-12-14T10:00:13Z</published>
    <updated>2020-12-14T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/14/perl-weekly-challenge-90-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's presentation of the results of Ethiopian multiplication is very elegant and verbose,</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/14/perl-weekly-challenge-90-part-2/</id>
    <published>2020-12-14T10:00:12Z</published>
    <updated>2020-12-14T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/13/perl-weekly-challenge-week-90/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail made the DNA task more fun by reading the sequence from STDIN.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/13/perl-weekly-challenge-week-90/</id>
    <published>2020-12-14T10:00:11Z</published>
    <updated>2020-12-14T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-090/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron with his Biochemistry background taught me something new: that DNA has direction.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-090/</id>
    <published>2020-12-14T10:00:10Z</published>
    <updated>2020-12-14T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 088</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-088</id>
    <published>2020-12-14T10:00:09Z</published>
    <updated>2020-12-14T10:00:09Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 090</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-090" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC dealing with the "DNA Sequence" and "Ethiopian Multiplication" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-090</id>
    <published>2020-12-14T10:00:08Z</published>
    <updated>2020-12-14T10:00:08Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 091</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-091" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to the new week with couple of fun tasks - "Count Number" and "Jump Game". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-091</id>
    <published>2020-12-14T10:00:07Z</published>
    <updated>2020-12-14T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Bill &amp; Ted's Bogus Journey</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2020/12/bill-teds-bogus-journey.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ben started an interesting discussion about putting debug information in a test script.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2020/12/bill-teds-bogus-journey.html</id>
    <published>2020-12-14T10:00:06Z</published>
    <updated>2020-12-14T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Strawberryperl.com - https any time soon?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin_mcgrath/2020/12/strawberryperlcom---https-any-time-soon.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Is there a plan to get support for https?</div>
    </content>
    <id>http://blogs.perl.org/users/martin_mcgrath/2020/12/strawberryperlcom---https-any-time-soon.html</id>
    <published>2020-12-14T10:00:05Z</published>
    <updated>2020-12-14T10:00:05Z</updated>
  </entry>
  <entry>
    <title>The Twelve Days of Dancer, 2020 Edition</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2020/12/the-twelve-days-of-dancer-2020-edition.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jason announced the Advent Calendar 2020 for Dancer2.</div>
    </content>
    <id>http://blogs.perl.org/users/jason_a_crome/2020/12/the-twelve-days-of-dancer-2020-edition.html</id>
    <published>2020-12-14T10:00:04Z</published>
    <updated>2020-12-14T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 4; DevTo: 6; Perl.com: 0; PerlAcademy: 2; PerlHacks: 0; PerlMaven: 1; Reddit: 25; TPF: 2;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-12-14T10:00:03Z</published>
    <updated>2020-12-14T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://perlweekly.com/metacpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 269 uploads to CPAN of 154 distinct distributions by 93 different authors. Number of distributions with link to VCS: 132. Number of distros with CI: 57. Number of distros with bugtracker: 92.</div>
    </content>
    <id>https://perlweekly.com/metacpan.html</id>
    <published>2020-12-14T10:00:02Z</published>
    <updated>2020-12-14T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Perl 5.32 from ActiveState - Build your own Perl, the way you want</title>
    <link rel="alternate" href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="html">&lt;b&gt;Try out our whole new Perl ecosystem, featuring:&lt;/b&gt;
&lt;li&gt;A unified, cloud-based toolchain for Linux and Windows (replaces PPM)&lt;/li&gt;
&lt;li&gt;Virtual environment support (similar to Python's virtualenv)&lt;/li&gt;
&lt;li&gt;Pure open source licensing (no more ActiveState license)&lt;/li&gt;
&lt;/br&gt;
Try ActiveState’s &lt;a href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition"&gt;latest Perl&lt;/a&gt; release</content>
    <id>https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition</id>
    <published>2020-12-14T10:00:01Z</published>
    <updated>2020-12-14T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#490 - Elevator Pitch Day</title>
    <link rel="alternate" href="http://perlweekly.com/archive/490.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The term "Elevator Pitch Day" was coined by one of the respected members of <a href="https://www.facebook.com/groups/perlprogrammers">Facebook Perl Programmers</a> group. I like the idea behind it as described in the post. The core idea is to invite members to organise a virtual meet-up to discuss all those awesome startup idea out there. It would be nice to find out who we can get to attend that has money/connections/resources to try and make it happen. Would you be interested in joining us? I am definitely up for it.</p>
<p>I came across another hate blog post. I am tired of such crap - although I don't see it quite as regularly as before. I was happy to see few big names responded with facts and figures. We should continue promoting the idea of putting Perl in non-Perl blogging sites. I have seen a big rise in recent weeks as far as the weekly challenge is concerned.</p>
<p>Lets change the topic and talk about positive vibes. Dave Cross wrote an inspiring <a href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp">blog post</a> where he shared the story behind his new module <a href="https://metacpan.org/pod/Plack::App::DirectoryIndex">Plack::App::DirectoryIndex</a>. I am confident it would inspire others to contribute to CPAN. Another <a href="https://docs.microsoft.com/en-us/learn/modules/get-started-with-windows-subsystem-for-linux/">blog post</a> recommended by Dave talks about how to get started with Windows Subsystem for Linux (WSL).</p>
<p>A couple of weeks ago, I requested the Dancer2 core team to get Advent Calendar 2020 going in the <a href="https://perlweekly.com/archive/488.html">weekly newsletter</a>. I am so happy to see it happening finally. Thank you Jason Crome for <a href="http://blogs.perl.org/users/jason_a_crome/2020/12/the-twelve-days-of-dancer-2020-edition.html">The Twelve Days of Dancer, 2020 Edition</a>. It is no longer a secret that Dancer2 is one of my favourite web application frameworks. Talking about Dancer2, why don't you join the <a href="https://leanpub.com/c/dancer">Perl Dancer Course</a> run by Gabor Szabo? It is yet another source of quality material for all Perl lovers. I am confident you will enjoy it.</p>
<p>Last, but not least, enjoy the festive season, keeping a safe distance.</p></div>
    </content>
    <id>http://perlweekly.com/archive/490.html</id>
    <published>2020-12-14T10:00:00Z</published>
    <updated>2020-12-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 090</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/12/13#pwc090" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2 id="part-1">Part 1</h2>
<p><em>Write a script to print the nucleiobase count in the given DNA sequence. Also print the complementary sequence where Thymine (T) on one strand is always facing an adenine (A) and vice versa; guanine (G) is always facing a cytosine (C) and vice versa.</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# Write a script to print  the nucleiobase count in
# the given DNA sequence. Also print the complementary 
# sequence where Thymine (T) on one strand is always 
# facing an adenine (A) and vice versa; guanine (G) is 
# always facing a cytosine (C) and vice versa.
##
use constant SEQUENCE =&gt; "GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG";
my %nucleotide_map = (
    "T" =&gt; "A", 
    "A" =&gt; "T", 
    "G" =&gt; "C", 
    "C" =&gt; "G" 
);    

sub complementary_sequence{
    my($sequence) = @_;
    my @complement = map { $nucleotide_map{$_} } split(//, $sequence);
    return @complement; 
} 

MAIN:{
    print "length of sequence: " . length(SEQUENCE) . "\n";
    print "complementary sequence: " . join("", complementary_sequence(SEQUENCE)) . "\n";      
} 
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl 
length of sequence: 67
complementary sequence: CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC
</code></pre>
<h3 id="notes">Notes</h3>
<p>When doing this problem I recalled a <a href="http://www.yapcna.org/yn2009/talk/1840">talk</a> I attended at YAPC 2009. In that talk Steven Lembark discussed how allocating array storage for very long arrays, such as DNA sequences!, could result in memory issues. He presented an interesting use of LinkedLists to deal with this. I have to say that I am not sure if Perl’s internals have changed in some way that these concerns are still valid. If you are looking to deal with actual (tremendously large) DNA sequences and not the sample shown here this would be something to consider!</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given two positive numbers $A and $B. Write a script to demonstrate Ethiopian Multiplication using the given numbers.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given two positive numbers $A and $B.
# Write a script to demonstrate Ethiopian Multiplication 
# using the given numbers.
##
sub ethiopian_multiplication{
    my($a, $b) = @_;
    my @steps;
    my $product = 0; 
    my ($x, $y) = ($a, $b); 
    do{
        $x = int($x / 2);
        $y = $y * 2;
        push @steps, [$x, $y] if $x % 2 != 0;
    }until $steps[-1]-&gt;[0] == 1; 
    for my $step (@steps){
        $product += $step-&gt;[1];
    } 
    return $product; 
}

MAIN:{
    my($A, $B) = (14, 12);
    print "$A x $B = " . ethiopian_multiplication($A, $B) . "\n";
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl 
14 x 12 = 168
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My implementation here follows pretty directly from the definition of the procedure. At each step there is a check to see if the <em>odd/even</em> condition holds and if true the result for that step is saved to an array. After the loop terminates the results are evaluated.</p>
<h2 id="references">References</h2>
<p><a href="https://threesixty360.wordpress.com/2009/06/09/ethiopian-multiplication/">Ethiopian Multiplication</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc090</id>
    <published>2020-12-13T18:34:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>The Twelve Days of Dancer, 2020 Edition</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/jason_a_crome/2020/12/the-twelve-days-of-dancer-2020-edition.html"/>
    <id>tag:blogs.perl.org,2020:/users/jason_a_crome//712.9989</id>

    <published>2020-12-13T21:48:22Z</published>
    <updated>2020-12-13T21:52:31Z</updated>

    <summary>Need some joy this holiday season? Head over to the Dancer Advent Calendar for this year's Twelve Days of Dancer. With a little help from our friends, we've put together a 12-day mini advent calendar featuring some great software built...</summary>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>Need some joy this holiday season? Head over to the <a href="http://advent.perldancer.org">Dancer Advent Calendar</a> for this year's Twelve Days of Dancer. With a little help from our friends, we've put together a 12-day mini advent calendar featuring some great software built in Dancer, some helpful tips and tricks, new features, and more. </p>

<p>Thanks for being such a great community, and for your continued support of Dancer! Wishing you the happiest of holiday seasons!</p>

<p>CromeDome (on behalf of the Dancer Core Developers)</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Closures as objects</title>
    <link rel="alternate" href="https://www.perl.com/article/closures-as-objects/" type="text/html"/>
    <content type="html">

&lt;p&gt;Perl&amp;rsquo;s object system is not one of its most admired qualities. Included in the 1993 Perl 5.0 release, objects were a bolt-on. A big improvement at the time, in today&amp;rsquo;s context the Perl 5 object system requires too much boilerplate and is under-powered compared to other language offerings (no private state, no type checking, no traits, no multimethods). Perl programmers have been trying to upgrade it for years (&lt;a href="https://gist.github.com/Ovid/68b33259cb81c01f9a51612c7a294ede"&gt;Cor&lt;/a&gt; is a recent example).&lt;/p&gt;

&lt;p&gt;Combining a few concepts can lead to great power; 60 years ago in the &lt;a href="https://mitpress.mit.edu/books/lisp-15-programmers-manual"&gt;LISP Programmer&amp;rsquo;s Manual&lt;/a&gt; John McCarthy showed how a Lisp interpreter could be created from simple parsing rules, a few types and just five (!) elementary functions.&lt;/p&gt;

&lt;p&gt;Two things Perl 5 got right was its lexical scoping rules and support for anonymous functions (&amp;ldquo;lambdas&amp;rdquo;). Combine those features and you can make closures. And just what are closures good for? Well it turns out they&amp;rsquo;re pretty damn powerful; powerful enough, in fact to make a better object system than Perl&amp;rsquo;s built-in offering.&lt;/p&gt;

&lt;h2 id="private-state"&gt;Private state&lt;/h2&gt;

&lt;p&gt;Perl objects are &amp;ldquo;blessed&amp;rdquo; data structures, which means data plus its package subroutines. Here&amp;rsquo;s a &lt;code&gt;Point&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Point;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, $x, $y) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; bless { x &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $x, y &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $y }, $class;
}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x&lt;/span&gt; { $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{x} }

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;y&lt;/span&gt; { $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{y} }

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;to_string&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $self &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
  &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; sprintf &lt;span style="color:#e6db74"&gt;&amp;#39;x: %d, y: %d&amp;#39;&lt;/span&gt;, $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;x, $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;y;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; subroutine is (by convention) the object constructor method. It accepts x y coordinates, and blesses a hashref of that data into a Point object. This associates all the subroutines in the package &lt;code&gt;Point&lt;/code&gt; with the object (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;to_string&lt;/code&gt; and oops! it gets &lt;code&gt;new&lt;/code&gt; as well). As a Point object is just a hashref, any consuming code is able to modify the object data directly, even if no setter method was provided:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Point&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;);
$p&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{x} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;; &lt;span style="color:#75715e"&gt;# methods schmethods&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Score one for convenience, strike one for (lack of) encapsulation. Here&amp;rsquo;s the same Point class, implemented using a closure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Point;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, $x, $y) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
    to_string &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#34;x: $x, y: $y&amp;#34;&lt;/span&gt; },
    x         &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $x },
    y         &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $y },
  );
  &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $method_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
    $methods{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(__SUB__, @_);
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case &lt;code&gt;new&lt;/code&gt; returns an anonymous function which performs the method resolution itself. Because the x and y coordinates are copied into the scope of the anonymous function, it has &amp;ldquo;closed over&amp;rdquo; the lexical environment and calling code has no way of altering those variables without using its public interface:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Point&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;);
say $p&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;# 1&lt;/span&gt;
say $p&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;# 5&lt;/span&gt;
say $p&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;to_string&amp;#39;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;# x: 1, y: 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As its constructor does not provide any setter methods, its x y coordinates cannot change. It is immutable. The object also does not get its package subroutines, i.e. it has no &lt;code&gt;new&lt;/code&gt; method, which stays where it belongs, in the Point package.&lt;/p&gt;

&lt;h2 id="making-it-re-usable"&gt;Making it re-usable&lt;/h2&gt;

&lt;p&gt;So far so good. But what if I wanted to make other classes which work in the same way? If I have to copy-and-paste this pattern around, it&amp;rsquo;s not buying me much. Instead I&amp;rsquo;m going to introduce a new package which builds classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Class::Lambda;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new_class&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class_name, $properties, $methods) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;

  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
    properties &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { %$properties },
    methods    &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { %$methods },
    name       &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $class_name },
    &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;        &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %self;
      %self &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (%$properties,
               %{$_[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]},
               self &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                         &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $method_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
                         $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%self, @_);
                       });
      $self{self};
    },
  };
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($method_name) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
    $class_methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(__SUB__, @_);
  };
  $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{class} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $class };
  $class;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;new_class&lt;/code&gt; subroutine takes a class name, a hashref of properties for object state (name and default value), and a hashref of methods (method name and anonymous subroutine). It returns a function object class, which uses the same method dispatch mechanism as before. I&amp;rsquo;ve omitted error checks for brevity.&lt;/p&gt;

&lt;p&gt;The class objects have some useful methods for inspecting them: &lt;code&gt;properties&lt;/code&gt; returns the object properties and their default values, &lt;code&gt;methods&lt;/code&gt; returns the object methods, &lt;code&gt;name&lt;/code&gt; returns the class name, and &lt;code&gt;new&lt;/code&gt; creates a new instance of the class. It also injects a &lt;code&gt;class&lt;/code&gt; method into every object which returns itself (e.g. given a function object, you can call its &lt;code&gt;class&lt;/code&gt; method to get its class object). With these methods, our class objects have no need for Perl&amp;rsquo;s built-in object toolset of packages, &lt;a href="https://perldoc.perl.org/functions/bless.html
"&gt;bless&lt;/a&gt;, and &lt;a href="https://perldoc.perl.org/5.30.0/functions/UNIVERSAL.html
"&gt;UNIVERSAL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Point class compresses nicely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_point &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Class::Lambda::new_class(
  &lt;span style="color:#e6db74"&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;,
  {
    x &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; undef,
    y &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; undef,
  },
  {
    x &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{x} },
    y &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{y} &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;}});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One wrinkle here is the naive copying of constructor args into the object state. If the args themselves contain references, the caller could change the state of the references without using the object&amp;rsquo;s interface (assuming they retained a reference to the data). To prevent that the code could be updated to deep-copy any references that have a refcount greater than 1.&lt;/p&gt;

&lt;h2 id="inheritance"&gt;Inheritance&lt;/h2&gt;

&lt;p&gt;This wouldn&amp;rsquo;t be much of an object system if it didn&amp;rsquo;t support inheritance. I&amp;rsquo;ve extended the &lt;code&gt;new_class&lt;/code&gt; subroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new_class&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class_name, $properties, $methods, $superclass) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;

  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
    superclass &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $superclass },
    properties &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { %$properties },
    subclass   &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($superclass, $class_name, $properties, $methods) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
      $properties   &lt;span style="color:#f92672"&gt;=&lt;/span&gt; { $superclass&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;), %$properties };
      $methods      &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
      &lt;span style="color:#75715e"&gt;# prevent changes to subclass method changing the super&lt;/span&gt;
      (map { ref $_ ? _clone_method($_) : $_ } $superclass&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;methods&amp;#39;&lt;/span&gt;)),
      %$methods };
      new_class($class_name, $properties, $methods, $superclass);
    },
    methods      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { %$methods },
    name         &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $class_name },
    &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;          &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %self;
      %self &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (%$properties,
               %{$_[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]},
               self &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                         &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $method_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
                         $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%self, @_);
                       });
      $self{self};
    },
  };
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($method_name) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
    $class_methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(__SUB__, @_);
  };
  $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{class} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $class };
  $class;
}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_clone_method&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $sub &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
  &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { goto $sub };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It now accepts an optional superclass argument. I&amp;rsquo;ve also added two new methods to call on the class object: &lt;code&gt;superclass&lt;/code&gt; returns the superclass object and &lt;code&gt;subclass&lt;/code&gt; accepts similar arguments to &lt;code&gt;new_class&lt;/code&gt; and creates a new class built with the current class properties and methods and its arguments. Because it uses list-flattening to combine the key/value pairs of properties and methods, and because the superclass data is listed first, the subclass specification always override the superclass.&lt;/p&gt;

&lt;p&gt;Superclass methods are copied using &lt;code&gt;_clone_method&lt;/code&gt; to prevent method re-definition also redefining the superclass method. For now I&amp;rsquo;ve accomplished this with &lt;a href="https://perldoc.perl.org/functions/goto.html
"&gt;goto&lt;/a&gt;; every subclass adds a new layer of indirection. This could be implemented in XS to avoid the indirection cost; &lt;a href="https://metacpan.org/pod/Sub::Clone"&gt;Sub::Clone&lt;/a&gt; does this, but it doesn&amp;rsquo;t work on &lt;a href="http://matrix.cpantesters.org/?dist=Sub-Clone+0.03"&gt;v5.18 or higher&lt;/a&gt; (I guess the Perl interpreter internals changed and it needs an update).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a subclass of Point which in addition to storing x y coordinates, accepts a &amp;ldquo;z&amp;rdquo; value, to store a point in 3d coordinates. It overrides &lt;code&gt;to_string&lt;/code&gt; to include the new value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_point3d &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $class_point&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;subclass&amp;#39;&lt;/span&gt;,
  &lt;span style="color:#e6db74"&gt;&amp;#39;Point3D&amp;#39;&lt;/span&gt;,
  { z &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; undef },
  {
    to_string &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#34;x: $_[0]-&amp;gt;{x}, y: $_[0]-&amp;gt;{y}, z: $_[0]-&amp;gt;{z}&amp;#34;&lt;/span&gt; },
    z         &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { shift&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{z} },
  });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="traits"&gt;Traits&lt;/h2&gt;

&lt;p&gt;Single inheritance is quite limited; I could add support for multiple inheritance by accepting an arrayref of superclasses, and making method resolution more sophisticated. Instead I&amp;rsquo;m going to support traits which avoid the complexity of multiple inheritance and allow class behavior to be extended in a more flexible way:&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll add support for creating new traits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new_trait&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($trait_name, $methods, $requires) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $trait_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
    requires &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { @$requires },
    methods  &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { %$methods },
    name     &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { $trait_name },
  };
  &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $method_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
    $trait_methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name}&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;();
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is implemented as the (what should be familiar by now) function object pattern. Every trait object has 3 methods: &lt;code&gt;requires&lt;/code&gt; returns a list of required method names, &lt;code&gt;methods&lt;/code&gt; key/value pairs of method names and anonymous subroutines, and &lt;code&gt;name&lt;/code&gt; to return the trait&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;Classes can be composed with traits using the &lt;code&gt;compose&lt;/code&gt; method, which looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new_class&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class_name, $properties, $methods, $superclass) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $traits &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;

  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
    compose    &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, @traits) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
      &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $t (@traits) {
        &lt;span style="color:#66d9ef"&gt;next&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; $class&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;does&amp;#39;&lt;/span&gt;, $t&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;));
        &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @missing &lt;span style="color:#f92672"&gt;=&lt;/span&gt; grep { &lt;span style="color:#f92672"&gt;!&lt;/span&gt;$methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$_} } $t&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;requires&amp;#39;&lt;/span&gt;);
        die sprintf(&lt;span style="color:#e6db74"&gt;&amp;#39;Cannot compose %s as %s is missing: %s&amp;#39;&lt;/span&gt;,
          $t&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;), $class_name, join &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, @missing) &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; @missing;
        &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %trait_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $t&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;methods&amp;#39;&lt;/span&gt;);
        &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $m (keys %trait_methods) {
          &lt;span style="color:#66d9ef"&gt;next&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; exists $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$m}; &lt;span style="color:#75715e"&gt;# clashing methods are excluded&lt;/span&gt;
          &lt;span style="color:#75715e"&gt;# prevent changes to composed class method changing the trait&lt;/span&gt;
          $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$m} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _clone_method($trait_methods{$m});
        }
        push @$traits, $t;
      }
    },
    traits     &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; { @$traits },
    does       &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, $trait_name) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
                    grep { $trait_name &lt;span style="color:#f92672"&gt;eq&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;) } @$traits;
                  },
    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This isn&amp;rsquo;t a precise implementation of traits; in the original &lt;a href="http://web.cecs.pdx.edu/~black/publications/TR_CSE_02-012.pdf"&gt;paper&lt;/a&gt; traits are not given access to the state of the object (except via its methods). That would require storing trait methods in a separate hashref, not passing the object state as an argument when the methods are called, and updating method dispatch to include searching the object&amp;rsquo;s trait methods hashref.&lt;/p&gt;

&lt;h2 id="metamethods"&gt;Metamethods&lt;/h2&gt;

&lt;p&gt;Whereas methods are concerned with object state, metamethods deal with object &lt;em&gt;structure&lt;/em&gt;. Because function objects control their method dispatch, it&amp;rsquo;s trivial to modify dispatch to support metamethods like &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; which run code before or after a method is called:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new_class&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class_name, $properties, $methods, $superclass) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $traits &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;

  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $class_methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
    before       &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, $method_name, $sub) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
                      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $original_method &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name};
                      $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                        &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $self &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
                        &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $sub&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;($self, @_);
                        $original_method&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;($self, @args);
                      &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;}},
    after        &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($class, $method_name, $sub) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
                      &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $original_method &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name};
                      $methods&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{$method_name} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
                        &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $original_method&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;(@_);
                        $sub&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;($_[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], @results);
                      &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;}},
    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whilst this works, it feels like the code is starting to get unwieldy. What I really need is a &lt;a href="https://en.wikipedia.org/wiki/Metaobject#Metaobject_protocol"&gt;Metaobject Protocol&lt;/a&gt;. Instead of defining methods in a hashref of anonymous functions, I could have a &amp;ldquo;make_method&amp;rdquo; metamethod, which registers a new method in a class. Method registration would provide the opportunity to do things like multiple-dispatch; that is, a class could have several methods with the same name, dispatched to based on the arguments received at runtime (aka &lt;a href="https://en.wikipedia.org/wiki/Multiple_dispatch"&gt;multimethods&lt;/a&gt;). This is one way of solving the &lt;a href="https://craftinginterpreters.com/representing-code.html#the-expression-problem"&gt;Expression Problem&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;

&lt;p&gt;By this point you might be wondering how fast function objects are; I ran some &lt;a href="https://github.com/dnmfarrell/Class-Lambda/blob/master/bench/run.pl"&gt;benchmarks&lt;/a&gt; to compare built-in OO, Moose and Class::Lambda objects. These show that function objects are at least &lt;em&gt;in the ballpark&lt;/em&gt; of acceptable performance for construction, get and set methods. Once you add type constraints, error checking and deep-copies of arguments (Moose deep-copies its args), I don&amp;rsquo;t think these differences would matter in most cases. For example if I add &lt;code&gt;isa =&amp;gt; 'Int'&lt;/code&gt; to the Moose Point class&amp;rsquo;s x property, its setter benchmark is ~4x slower.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                 Rate   moose-new  lambda-new builtin-new
moose-new    714757/s          --        -13%        -64%
lambda-new   817247/s         14%          --        -59%
builtin-new 2012803/s        182%        146%          --
                  Rate  lambda-get   moose-get builtin-get
lambda-get   5804047/s          --        -46%        -61%
moose-get   10789651/s         86%          --        -27%
builtin-get 14813317/s        155%         37%          --
                 Rate  lambda-set builtin-set   moose-set
lambda-set  4272114/s          --        -46%        -46%
builtin-set 7855213/s         84%          --         -0%
moose-set   7886981/s         85%          0%          --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Point function objects did use about 3x more memory than their built-in and Moose style equivalents on my computer: 812 bytes compared to 266 bytes (I was surprised to find simple Moose objects are as memory efficient as built-in ones). This is because function objects carry around more data, but also because closures require more Perl internal data structures. I could save memory by not copying every class instance method as a key/value pair into every object, and resolve method calls with a recursive search of the object&amp;rsquo;s class hierarchy instead. This trades memory for speed though.&lt;/p&gt;

&lt;h2 id="future"&gt;Future&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve uploaded this proof-of-concept to &lt;a href="https://github.com/dnmfarrell/Class-Lambda"&gt;GitHub&lt;/a&gt;. If you&amp;rsquo;re interested in learning more about metaobjects, &lt;a href="https://mitpress.mit.edu/books/art-metaobject-protocol"&gt;The Art of the Metaobject Protocol&lt;/a&gt; is the definitive reference. For what it&amp;rsquo;s worth, &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; is Metaobject Protocol aware, battle-tested and remains the classiest (har) object system available for Perl today.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s evolution into a kitchen-sink of capabilities provides many tools: some powerful, some mediocre. The question is, where do we go from here? I&amp;rsquo;m not convinced &amp;ldquo;more OO&amp;rdquo; is the right direction for Perl; the language is already huge, the interpreter a byzantine labyrinth of C macros, and Ruby cornered the market for expressive, object-oriented dynamic languages long-ago.&lt;/p&gt;

&lt;p&gt;One way to fight the bloat would be to distill the role of the Perl interpreter down to fewer, more powerful ideas. Objects are more powerful than subroutines, and a Metaobject Protocol more profound still. Yet beneath that, lexical scoping and a thoughtful type system could power them all&lt;sup&gt;†&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;sup&gt;†&lt;/sup&gt; Doug Hoyte writes in &lt;a href="https://letoverlambda.com/index.cl/guest/chap2.html#sec_7"&gt;Let Over Lambda&lt;/a&gt;: &amp;ldquo;Let and lambda are fundamental; objects and classes are derivatives.&amp;rdquo;&lt;/p&gt;
</content>
    <id>https://www.perl.com/article/closures-as-objects/</id>
    <published>2020-12-13T12:57:03Z</published>
    <updated>2020-12-13T12:57:03Z</updated>
  </entry>
  <entry>
  <title>do</title>
  <summary type="html"><![CDATA[<p>
<b>do $filename</b> will read the content of the file and the it will try to execute it insides the current process.
<p>
I use it sometimes when there is a command line program I'd like to test, but one that needs finer interaction
than one could do if it was executed as an external Perl program. For example if I need to set some variables, or
mock some part of the program.
<p>
Just as <b>eval</b> using <b>do</b> will also capture errors it encounters. It is important to understand how we can
see those errors.
<p>
Here is how <b>do</b> reports problems.
<p>
]]></summary>
  <updated>2020-12-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/do"/>  <id>https://perlmaven.com/do</id>
  <content type="html"><![CDATA[<p>
<b>do $filename</b> will read the content of the file and the it will try to execute it insides the current process.
<p>
I use it sometimes when there is a command line program I'd like to test, but one that needs finer interaction
than one could do if it was executed as an external Perl program. For example if I need to set some variables, or
mock some part of the program.
<p>
Just as <b>eval</b> using <b>do</b> will also capture errors it encounters. It is important to understand how we can
see those errors.
<p>
Here is how <b>do</b> reports problems.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 090</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-090-41" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-090/">Challenge 090</a></p>

<h1>
  <a href="#champion" class="anchor">
  </a>
  Champion
</h1>

<p>Mohammad awarded me Team PWC champion for last month. I was totally surprised when reading this weeks challenge to find this out. I feel honoured to have joined the other <a href="https://perlweeklychallenge.org/champions/">champions</a>.</p>

<p>And a big thanks to Randi Comrie and <a href="https://perl.careers/">Perl Careers</a> team for the reward.</p>

<h1>
  <a href="#task-1-dna-sequence" class="anchor">
  </a>
  Task #1 › DNA Sequence
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>Write a script to print nucleobase count in the given DNA sequence. Also print the complementary sequence where Thymine (T) on one strand is always facing an adenine (A) and vice versa; guanine (G) is always facing a cytosine (C) and vice versa.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>I'll admit I know nothing about DNA sequencing, so I took this challenge as a purely programmatic one. The task can be broken down to two parts.</p>

<ol>
<li>To display the count, I use a <code>foreach</code> loop to count each character, and another to display the count of each nucleobase.</li>
<li>To calculate the complementary sequence I use the <a href="https://perldoc.perl.org/functions/tr">tr function</a> to reverse the characters in the string, and display it.</li>
</ol>

<h2>
  <a href="#example" class="anchor">
  </a>
  Example
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG
Nucleobases count
T: 22
A: 14
G: 13
C: 18

Complementary sequence is 'CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC'
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-ethiopian-multiplication" class="anchor">
  </a>
  Task #2 › Ethiopian Multiplication
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given two positive numbers <code>$A</code> and <code>$B</code>.</p>

<p>Write a script to demonstrate <a href="https://threesixty360.wordpress.com/2009/06/09/ethiopian-multiplication/">Ethiopian Multiplication</a> using the given numbers.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>This was a really interesting challenge for two reasons. Firstly, I learnt a new way to multiple numbers and the way that it works. Secondly was the way to show the result without using fonts.</p>

<p>For this task I use a loop to build an array starting with the two numbers, and then divided the first number (dropping the remainder) and multiplying the second. We end that loop when the first number is 1.</p>

<p>I then display each row with the two numbers with <code>&gt;</code> symbol to indicate whether the first number is odd. Finally, I add up all the second numbers where the first number is odd, and display the result.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl 12 14
  12 ×  14
   6 ×  28
&gt;  3 ×  56
&gt;  1 × 112

Result is: 56 + 112 = 168

» ./ch-2.pl 25 31
&gt; 25 ×  31
  12 ×  62
   6 × 124
&gt;  3 × 248
&gt;  1 × 496

Result is: 31 + 248 + 496 = 775
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-090-41</id>
    <published>2020-12-13T07:58:40Z</published>
    <updated>2020-12-13T07:58:40Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: GCD Sums and Magic Squares</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9983</id>

    <published>2020-12-06T21:54:04Z</published>
    <updated>2020-12-13T01:23:56Z</updated>

    <summary>These are some answers to the Week 89 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Task 1: GCD Sums You are given a positive integer $N. Write a script to sum GCD of all possible unique pairs...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 89 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: GCD Sums</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to sum GCD of all possible unique pairs between 1 and <code>$N</code>.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 3
Output: 3

gcd(1,2) + gcd(1,3) + gcd(2,3)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 4
Output: 7

gcd(1,2) + gcd(1,3) + gcd(1,4) + gcd(2,3) + gcd(2,4) + gcd(3,4)
</code></pre>

<h3>GCD Sums in Raku</h3>

<p>Raku has the <a href="https://docs.raku.org/routine/gcd">infix gcd</a> operator which computes the GCD for us. Thus, chaining the <a href="https://docs.raku.org/routine/combinations">compinations</a>, <code>gcd</code>, <code>map</code>, and <a href="https://docs.raku.org/routine/sum">sum</a> built-in routines yields a solution fitting in just one code line:</p>

<pre><code>use v6;

say (1..$_).combinations(2).map({$_[0] gcd $_[1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>We could also use the <code>[]</code> reduction metaoparator with the <code>+</code> operator:</p>

<pre><code>say (1..$_).combinations(2).map({[gcd] $_[0,1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>Both solutions lead to the following output</p>

<pre><code>$ raku gcd-sum.raku 10
0
1
3
7
11
20
26
38
50
67
</code></pre>

<h3>GCD Sums in Perl</h3>

<p>We first implement a <code>gcd</code> subroutine that uses the Euclidean algorithm to compute the GCD of two numbers. We then use a doubly nested <code>for</code> loop to generate all pairs of numbers between 1 and the input ceiling parameter:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub gcd {
        my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
        while ($j) {
                ($i, $j) = ($j, $i % $j);
        }
        return $i;
}
my $n = shift;
my $sum = 0;
for my $i (1..$n) {
    for my $j ($i+1..$n) {
        $sum += gcd $i, $j;
    }
}
say $sum;
</code></pre>

<h2>Task 2: Magical Matrix</h2>

<p><em>Write a script to display matrix as below with numbers 1 - 9. Please make sure numbers are used once.</em></p>

<pre><code>[ a b c ]
[ d e f ]
[ g h i ]
</code></pre>

<p><em>So that it satisfies the following:</em></p>

<pre><code>a + b + c = 15
d + e + f = 15
g + h + i = 15
a + d + g = 15
b + e + h = 15
c + f + i = 15
a + e + i = 15
c + e + g = 15
</code></pre>

<p>This is more commonly known as a <em>magic square</em>. A square array of numbers, usually positive integers, is called a <em>magic square</em> if the sums of the numbers in each row, each column, and both main diagonals are the same. Albrecht Dürer&#8217;s famous engraving <em>Melencolia I</em> (1514) includes an order 4 square with magic sum 34.</p>

<p><img alt="Albrecht_Dürer_Melencolia_I.jpg" src="http://blogs.perl.org/users/laurent_r/Albrecht_D%C3%BCrer_Melencolia_I.jpg" width="555" height="578" class="mt-image-none" style="" /></p>

<h3>Magic Square in Raku</h3>

<p>I originally started to write a recursive subroutine to populate the square with all possible combinations of integers between 1 and 9 (or 1 and 126 for order 4 squares. This turned out to be a bit clumsy. I changed my mind and decided to use the <a href="https://docs.raku.org/routine/permutations">permutations</a> built-in routine to generate all possible lists of 9 integers (between 1 and 9) and only after that to transform them into squares of numbers and check whether they form a magic square.</p>

<pre><code>use v6;
constant \SIZE = 3;
constant \MAX = SIZE - 1;
constant \SUM = (([+] 1..SIZE*SIZE)/SIZE).Int;

my ($count-perm, $count-mat) = 0, 0;

sub print-matrix (@matrix) {
    for @matrix -&gt; @row {
        say '[', @row.fmt("%2i").join(" "), ' ]';
    }
    say " ";
}
sub col-sum (@matrix, Int $j) {
    my $sum = 0;
    $sum += @matrix[$_][$j] if defined @matrix[$_][$j] for 0..MAX;
    return $sum;
}
sub cross_sum (@matrix) {
    my $nw2se = 0;
    $nw2se += @matrix[$_][$_] for 0..MAX;
    my $ne2sw = 0;
    $ne2sw += @matrix[$_][MAX-$_] for 0..MAX;
    return $nw2se, $ne2sw;
}
sub is-valid (@matrix) {
    for (0..MAX) -&gt; $k {
        return False if (col-sum @matrix, $k) != SUM;
    }
    return True if SUM == all cross_sum @matrix;
    return False;
}

sub find-matrices {
    my @int-list = 1..9;
    OUT: for @int-list.permutations -&gt; $perm {
        $count-perm++;
        my @matrix = gather {
            for $perm.Array -&gt; $i, $j, $k {
                next OUT unless $i + $j + $k == SUM;
                take [ $i, $j, $k ];
            }
        }
        $count-mat++;
        next unless is-valid @matrix; 
        print-matrix @matrix;
        # last;
    }
}

find-matrices;   
say "Counters: $count-perm $count-mat";
</code></pre>

<p>Note that, for performance improvement, the <code>find-matrices</code> routine skips early on any matrix in which any line sum if not equal to the target sum. This way, instead of having to check 362,880 (9!) matrices, we need to verify only 2,592 of them (less than 1% of the total).</p>

<p>This is the output displayed by this program:</p>

<pre><code>$ raku magic-square2.raku
[ 2  7  6 ]
[ 9  5  1 ]
[ 4  3  8 ]

[ 2  9  4 ]
[ 7  5  3 ]
[ 6  1  8 ]

[ 4  3  8 ]
[ 9  5  1 ]
[ 2  7  6 ]

[ 4  9  2 ]
[ 3  5  7 ]
[ 8  1  6 ]

[ 6  1  8 ]
[ 7  5  3 ]
[ 2  9  4 ]

[ 6  7  2 ]
[ 1  5  9 ]
[ 8  3  4 ]

[ 8  1  6 ]
[ 3  5  7 ]
[ 4  9  2 ]

[ 8  3  4 ]
[ 1  5  9 ]
[ 6  7  2 ]

Counters: 362880 2592
</code></pre>

<p>The implementation above is still way too complicated. It would be better to work all the way with one-dimension arrays, and to transform them into squares at the last moment. I don&#8217;t have time to refactor this program now, but the Perl implementation below uses this much simpler implementation (despite having no <code>permutations</code> built-in).</p>

<h3>Magic Square in Perl</h3>

<p>As noted above, this implementation does all the work on flat arrays of 9 integers, and transforms them into squares only when it is needed at the latest moment for the purpose of printing the squares that have been found to be magic.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant SUM =&gt; 15;

my @in = 1..9;
my @permutations;

sub print_matrix {
    my @matrix = ( [@{$_}[0..2]], [@{$_}[3..5]], [@{$_}[6..8]] );
    for my $row (@matrix)  {
        say "[", (map { sprintf "% 2i", $_ } @$row), " ]"; # for @$row;
    }
    say " ";
}

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}

sub permute {
    my ($in, $left) = @_;
    if (scalar @$left == 0) {
        return 
            # lines
            if sum( @{$in}[0..2]) != SUM
            or sum( @{$in}[3..5]) != SUM
            or sum( @{$in}[6..8]) != SUM
            # columns
            or sum( @{$in}[0, 3, 6]) != SUM
            or sum( @{$in}[1, 4, 7]) != SUM
            or sum( @{$in}[2, 5, 8]) != SUM 
            # diagonals
            or sum( @{$in}[0, 4, 8]) != SUM 
            or sum( @{$in}[2, 4, 6]) != SUM;
        push @permutations, $in;
        return;
    }
    for my $candidate (@$left) {
        my @vals = @$in;
        push @vals, $candidate;
        permute(\@vals, [grep $_ != $candidate, @$left]);
    }
}

permute [], \@in;
print_matrix \$_ for @permutations;
</code></pre>

<p>This displays the following:</p>

<pre><code>$ perl magic-square.pl
[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>

<h2>Perl Weekly Challenge # 89 in Scala</h2>

<p>As I mentioned elsewhere, what I like in Scala is the ability to combine the object-oriented and functional programming paradigms, like Raku and to a lesser degree Perl. Please note that I am a beginner in Scala, don&#8217;t look here for idionmatic Scala or for good practices.</p>

<h3>GCD Sum</h3>

<p>The Scala math <a href="https://www.scala-lang.org/api/2.12.5/scala/math/BigInt.html">BigInt library</a> has a <code>gcd</code> routine, but I decided to implement the <code>gcd</code> function (using the Euclidean algorithm) myself because I wasn&#8217;t keen on using big integers for this task. This is essentially a port to Scala of my GCD program in Perl.</p>

<pre><code>object Main {
  def main(args: Array[String]): Unit = {
    val in: Int = if (args.size == 1) args(0).toInt else 10
    var sum = 0
    for (m &lt;- 1 to in) {
      for (n &lt;- m + 1 to in) {
        sum += gcd(m, n)
      }
    }
    println(s"Sum of GCD to $in is $sum")
  }
  def gcd(a: Int, b: Int): Int = {
    var (i, j) = (a, b)
    while (j &gt; 0) {
      var t = i
      i = j
      j = t % j
    }
    return i
  }
}
</code></pre>

<p>This prints out the following output:</p>

<pre><code>Sum of GCD to 10 is 67
</code></pre>

<h3>Magic Square in Scala</h3>

<p>This is again essentially a port to Scala of my Perl program.</p>

<pre><code>import Array._
object Main {
  def main(args: Array[String]): Unit = {
    var mat = range(1, 10)
    var in = Array.empty[Int]
    permute(in, mat)
  }
  def print_matrix(a: Array[Int]): Unit = {
    println(s"[ ${a(0)} ${a(1)} ${a(2)} ]")
    println(s"[ ${a(3)} ${a(4)} ${a(5)} ]")
    println(s"[ ${a(6)} ${a(7)} ${a(8)} ]")
    println(" ")
  }
  def permute(in: Array[Int], left: Array[Int]): Unit = {
    val sum = 15
    if (left.size == 0) {
      if (
        in.slice(0, 3).sum != sum ||
        in.slice(3, 6).sum != sum ||
        in.slice(6, 9).sum != sum ||
        in(0) + in(3) + in(6) != sum ||
        in(1) + in(4) + in(7) != sum ||
        in(2) + in(5) + in(8) != sum ||
        in(0) + in(4) + in(8) != sum ||
        in(2) + in(4) + in(6) != sum 
      ) {
        return
      }
      print_matrix(in)
      return
    }
    for (candidate &lt;- left) {
      val values: Array[Int] = in.appended(candidate)
      val newleft: Array[Int] = left.filter(_ != candidate)
      permute(values, newleft)
    }
  }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 13, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent of Code Day 12 - sailing to a pause</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_12.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_12.html</id>
    <updated>2020-12-12T22:28:05+00:00</updated>
    <category term="perl"/>
    <summary type="html">This was another fun one. It took me some time to get the logic right (or left?), but in the end I came up with a nice solution. BTW, this will be the last daily blog post, as I'll have to finish ...</summary>
    <content type="html">&lt;p&gt;This was another fun one. It took me some time to get the logic right (or left?), but in the end I came up with a nice solution. &lt;span class="caps"&gt;BTW, &lt;/span&gt;this will be the last daily blog post, as I'll have to finish some work projects, and start with some holiday projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/12"&gt;https://adventofcode.com/2020/day/12&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;my @in  = map { [/^(\w)(\d+)$/] } &amp;lt;&amp;gt;;
my @dir = qw(N E S W);
my $cur = 1;
my $r   = 0;
my $c   = 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We again parse the map into a list of ops and values. Then we set up some things we'll need, like the list of directions and the current heading (&lt;code&gt;$cur&lt;/code&gt;) which is an index into the &lt;code&gt;dir-array&lt;/code&gt;. &lt;code&gt;$r&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; are the row and col where the ship currently is location (I prefer row/col to x/y).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %ops;
%ops = (
    N =&amp;gt; sub { $r -= shift },
    S =&amp;gt; sub { $r += shift },
    E =&amp;gt; sub { $c += shift },
    W =&amp;gt; sub { $c -= shift },
    F =&amp;gt; sub { $ops{ $dir[$cur] }(shift) },
    L =&amp;gt; sub { $cur = ( $cur - $_[0] / 90 ) % 4 },
    R =&amp;gt; sub { $cur = ( $cur + $_[0] / 90 ) % 4 },
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we implement the ops. The first four simple move the ship around. &lt;code&gt;F&lt;/code&gt; (forward) gets the current direction ("E" in the example), and calls the corresponding function. L and R where hard to get right. We calculate the number of turns (1, 2 or 3, depending on the degree value), and add or subtract it from the current index, using &lt;code&gt;mod&lt;/code&gt; to stay inside the array of allowed directions (using negative modulus is always fun!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (@in) {
    my ( $op, $val ) = @$_;
    $ops{$op}($val);
}
say abs( 0 - $r ) + abs( 0 - $c );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we just need to go through the instruction set and call each op; and then calculate the Manhattan distance...&lt;/p&gt;

&lt;p&gt;In my first version I used plain functions instead of the dispatch table, which I liked a bit better, but required me to turn off 'refs' strictures.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Again it took me quite some time to understand the description, but after some scribbling and counting I figured it out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $wr = -1;
my $wc = 10;
my $sr = 0;
my $sc = 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the second part, we "just" need to add a second set of coordinates for the waypoint (&lt;code&gt;$wr, $wc&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %ops;
%ops = (
    N =&amp;gt; sub { $wr -= shift },
    S =&amp;gt; sub { $wr += shift },
    E =&amp;gt; sub { $wc += shift },
    W =&amp;gt; sub { $wc -= shift },
    F =&amp;gt; sub { my $val = shift; $sr += $val * $wr; $sc += $val * $wc },
    R =&amp;gt; sub { for ( 1 .. $_[0] / 90 ) { ( $wr, $wc ) = ( $wc, $wr ); $wc *= -1 } },
    L =&amp;gt; sub { for ( 1 .. $_[0] / 90 ) { ( $wr, $wc ) = ( $wc, $wr ); $wr *= -1 } },
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ops change a bit, mostly moving the waypoint around. &lt;code&gt;F&lt;/code&gt; will move the ship. I used pen &amp;amp; paper to discover that to rotate the waypoint I need to switch row and col and (depending on the direction) change the sign on the row or col (i.e. multiply by -1). To switch row and col, we use a nice Perl trick to switch two values around using fancy list context: ( $a, $b ) = ($b, $a).&lt;/p&gt;

&lt;p&gt;The rest of the code stays the same...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 43:37 / 43:08&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 20406 / 21148&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/12"&gt;https://adventofcode.com/2020/day/12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8070445469008687722</id>
    <published>2020-12-12T19:58:00.000+01:00</published>
    <updated>2020-12-12T19:58:40.612+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxix) 12 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.996' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.996&lt;/strong&gt; on 2020-12-06&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: 0.995 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ROBM/Cache-FastMmap-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::FastMmap&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uses an mmap'ed file to act as a shared memory interprocess cache &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-12&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.51 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9712&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9711 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/libnet-3.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Collection of network protocol modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.12&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 3.11 was 3 years, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Lingua-EN-Inflect-1.905' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Lingua::EN::Inflect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Convert singular to plural. Select "a" or "an". &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.905&lt;/strong&gt; on 2020-12-08&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.904 was 1 year, 7 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-AssetPack-2.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::AssetPack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Compress and convert css, less, sass, javascript and coffeescript files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.10&lt;/strong&gt; on 2020-12-11&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 2.09 was 3 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20201207' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20201207&lt;/strong&gt; on 2020-12-06&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20201202 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/FERKI/Rex-1.13.2' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13.2&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 73&lt;/li&gt;  &lt;li&gt;Previous version: 1.13.1 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0928' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0928&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0927 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Test-WWW-Mechanize-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Testing-specific WWW::Mechanize subclass &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.52 was 2 years, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/Text-Balanced-2.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Balanced&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extract delimited text sequences from strings. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.04&lt;/strong&gt; on 2020-12-11&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.03 was 5 years, 9 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BKB/Text-Fuzzy-0.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Fuzzy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Partial string matching using edit distances &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.29&lt;/strong&gt; on 2020-12-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.28 was 2 years, 2 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8070445469008687722/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxix-12-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8070445469008687722"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8070445469008687722"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxix-12-cpan-great-modules-released.html" title="(cccxix) 12 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5526161168838765877</id>
    <published>2020-12-12T19:00:00.001+01:00</published>
    <updated>2020-12-12T19:00:08.867+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlvi) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/12/12 17:59:34 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Iptables2Dot" target="_blank"&gt;App::Iptables2Dot&lt;/a&gt; - Analyze iptables with GraphViz&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::MakeEPUB" target="_blank"&gt;App::MakeEPUB&lt;/a&gt; - Create an EPUB ebook&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::NDTools" target="_blank"&gt;App::NDTools&lt;/a&gt; - Command line tools for nested structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPANPLUS::Dist::Slackware" target="_blank"&gt;CPANPLUS::Dist::Slackware&lt;/a&gt; - Install Perl distributions on Slackware Linux&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Directory::Organize" target="_blank"&gt;Directory::Organize&lt;/a&gt; - create and find directories interactive&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::PCAP" target="_blank"&gt;File::PCAP&lt;/a&gt; - a pure Perl library to read and write PCAP files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin" target="_blank"&gt;FindBin&lt;/a&gt; - Locate directory of original perl script&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::Notify" target="_blank"&gt;Gtk3::Notify&lt;/a&gt; - Perl interface to libnotify&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; - Get a domain name's public suffix via the Mozilla Public Suffix List&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/pgtop" target="_blank"&gt;pgtop&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::NGrammer" target="_blank"&gt;Text::NGrammer&lt;/a&gt; - Pure Perl extraction of n-grams and skip-grams&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::XSAccessor" target="_blank"&gt;Class::XSAccessor&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=119)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dx" target="_blank"&gt;Data::Dx&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=198)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::PPPort" target="_blank"&gt;Dist::Zilla::Plugin::PPPort&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FCGI" target="_blank"&gt;FCGI&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Path" target="_blank"&gt;File::Path&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurper" target="_blank"&gt;File::Slurper&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HealthCheck" target="_blank"&gt;HealthCheck&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::GoogleMaps::V3" target="_blank"&gt;HTML::GoogleMaps::V3&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::ConcurrencyLimit" target="_blank"&gt;IPC::ConcurrencyLimit&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::PP" target="_blank"&gt;JSON::PP&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdown::Pod" target="_blank"&gt;Markdown::Pod&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markua::Parser" target="_blank"&gt;Markua::Parser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Base::Convert" target="_blank"&gt;Math::Base::Convert&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE::Shared" target="_blank"&gt;MCE::Shared&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=80)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=278)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP" target="_blank"&gt;MOP&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::RecordLocator" target="_blank"&gt;Number::RecordLocator&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=156)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rose::DB" target="_blank"&gt;Rose::DB&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Router::Boom" target="_blank"&gt;Router::Boom&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Router::XS" target="_blank"&gt;Router::XS&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::PPPort" target="_blank"&gt;Test::PPPort&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=123)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny::XS" target="_blank"&gt;Type::Tiny::XS&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Z" target="_blank"&gt;Z&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5526161168838765877/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5526161168838765877"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5526161168838765877"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlvi-metacpan-weekly-report.html" title="(cdxlvi) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): November 2020 Grant Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-report-20-11"/>
  <id>tag:news.perlfoundation.org,2020-12-12:/post/tony-report-20-11</id>
  <published>2020-12-12T13:55:42</published>
  <updated>2020-12-12T13:55:42</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his grant under [Perl 5 Core Maintenance Fund](http://www.perlfoundation.org/perl_5_core_maintenance_fund).
We thank the TPF sponsors to make this grant possible.

Approximately 46 tickets were reviewed, and 9 patches were
applied
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
[Hours]         [Activity]
  2.08          more win32 test noise, fix some, PR 377 for EU::MM,
                File::Path bug report cpan#133671
  1.32          #16825 research
  4.43          #17296 find another issue, work on a test and fix
                #17296 more fixes, make PR #18327
  1.18          go through PRs, checking #17724 (ask sawyerx for a
                comment), #17848 (comment), #17909 (some research), #17999
                review and some testing
  1.70          #17926 research
                #17926 rebase, re-test and apply to blead, perldelta
                updates
  1.54          review notifications mostly #17999
                #17999 comment
                #17999 comment
 10.58          #18005 more commit clean up, start a test run
                #18005 review results, add Test::Harness fix, testing,
                start a developer mode (symlinks enabled) test run
                #18005 diagnose build failure (possibly from rebase), fix
                and testing
                #18005 rebase on recent fixes and testing
                #18005 more testing, push for smoke-me
                #18005 more re-work commits, minor fixes, testing, push
                for smoke-me
                #18005 review smoke results
                #18005 more review smoke results, make PR 18306
                #18005 re-work based on xenu’s comments
                #18005 rebase win32-symlink code, make tests pass pre-
                vista, including fixing a test bug
  0.55          #18094 review and apply to blead
  0.32          #18133 check and apply to blead
  5.61          #18232 review some more, work up a erroneous case and
                comment
                #18232 review, work up a failing test case
                #18232 debugging, testing, comment
                #18232 testing, partly squash and apply to blead
  3.56          review notifications,mostly #18256
                #18256 code review, testing
  0.80          #18262 review and briefly comment
  0.47          #18272 rebase, squash and apply to blead
  0.65          #18279 research and briefly comment
  0.52          #18283 review and apply to blead
  0.67          #18285 review, research and comment
                #18285 comment
  1.63          #18293 debug, work on a fix, add a test, make PR 18307
  0.15          #18297 review and apply to blead
  0.10          #18298 review and comment
  1.35          #18308 review and comment
                #18308 fix an unrelated failure
  1.03          #18322 research and comment
                #18322 comment
  1.22          #18325 review, discussion with khw
  1.08          #18337 revise IO documentation PR based on comments
  0.45          #18339 review, test and apply to blead
  0.12          #18341 check fix was merged and close
  0.13          #18354 review, apply to blead
  0.17          #18359 review and briefly comment
  3.64          #18364 reproduce with gcc, try to figure out why MSVC
                isn’t failing the same way
                #18364 figure it out, discussion with khw
                #18364 testing
  1.93          look over OS X failures, reproduce and diagnose, work on
                an EU::MM PR to fix it #379
                my EU::MM #379: haarg made a better PR, close mine
  0.95          :utf8  rebase
  1.55          :utf8 more rebase
  2.20          check other sysv ipc ops for UTF-8 issues, find one in
                semop (test and fix), another in msgsnd/rcv (work on
                tests)
  2.23          document IO
  1.45          dragonfly changes: review smokes, reproduce freebsd issue
                (fixed in blead), rebase and apply to blead
  1.07          fix msgsnd, fix msgrcv, fix shmwrite
  2.30          fix read on close DATA, look at other test noise
  0.17          list catchup
  1.50          perldelta updates
  0.40          review coverity results
  0.43          review github notifications
  0.45          review notifications
  0.30          review trim discussion
  2.63          track down Fedora sanitize failures, both internal libs
                leaks
  0.82          trim discussion, comment
  0.60          win32-symlink: rebase, split out more pre-vista support
  1.37          work on testing, fixes to the (non-symlink) Win32 build
======
 69.40 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry>
    <title>Advent of Code Day 11 - slow SeatGoL</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_11.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_11.html</id>
    <updated>2020-12-11T19:50:37+00:00</updated>
    <category term="perl"/>
    <summary type="html">Finally, some Game of Life

https://adventofcode.com/2020/day/11

Part 1

Today I needed quite a bit of code, so let's split it up:

my @map = map { chomp; [ split // ] } &amp;lt;&amp;gt;;
my $h   = @map;
my </summary>
    <content type="html">&lt;p&gt;Finally, some &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Game of Life&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/11"&gt;https://adventofcode.com/2020/day/11&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;Today I needed quite a bit of code, so let's split it up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [ split // ] } &amp;lt;&amp;gt;;
my $h   = @map;
my $w   = $map[0]-&amp;gt;@*;
my $occ = 0;
my $max = 4;
my @around =
    ( [ -1, -1 ], [ -1, 0 ], [ -1, 1 ], [ 0, -1 ], [ 0, 1 ], [ 1, -1 ], [ 1, 0 ], [ 1, 1 ] );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After getting the input and storing it into a 2-dimensional list, I set up some other things we'll need: the **h**eight and **w**idth of the map, the number of occupied seats, the maximum number of neighbors and a list of "vectors" to look around (left/up, up, right/up, left, right, left/down, down, right/down) as array index offsets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (1) {
    my @next;
    my $thisocc = 0;
    for ( my $r = 0; $r &amp;lt; $h; $r++ ) {
        for ( my $c = 0; $c &amp;lt; $w; $c++ ) {
            my $new = $next[$r][$c] = gol( \@map, $r, $c );
            $thisocc++ if $new eq '#';
        }
    }
    last if $thisocc == $occ;
    @map = @next;
    $occ = $thisocc;
    say '.';
}
say $occ;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the main loop, which we run until the current number of occupied seats is the same is the previous number (&lt;code&gt;last if $thisocc == $occ;&lt;/code&gt;). Inside the loop, we walk through the rows and cols of the map, and call the &lt;code&gt;gol()&lt;/code&gt; function with the current map and position (see later). &lt;code&gt;gol()&lt;/code&gt; will return the new value for this position, which we store in the &lt;code&gt;new&lt;/code&gt; map (we cannot use the same map). If we get an occupied seat, we count it (&lt;code&gt;$thisocc++ if $new eq '#'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Outside the loop, we check for termination. If we're not done yet, we define the newly generated map as the map to be used in the next iteration, and remember the current occupied count. And we output a ., so we know we're still running (this is a &lt;strong&gt;very slow&lt;/strong&gt; solution, taking ~6 secs. I'm sure you can find faster algorithms on reddit...)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub gol {
    my ( $map, $r, $c ) = @_;

    my $count = look( $map, $r, $c );
    my $old   = $map[$r][$c];
    return '#' if $old eq 'L' &amp;amp;&amp;amp; $count == 0;
    return 'L' if $old eq '#' &amp;amp;&amp;amp; $count &amp;gt;= $max;
    return $old;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gol()&lt;/code&gt; first calls another function, &lt;code&gt;look()&lt;/code&gt;, to figure out how many seats around the current one are occupied. It the uses the old value and this count to figure out the next value and returns it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub look {
    my ( $map, $r, $c ) = @_;
    my $count = 0;
    foreach my $vec (@around) {
        my $m = $r + $vec-&amp;gt;[0];
        my $n = $c + $vec-&amp;gt;[1];
        next     if $m &amp;lt; 0 || $n &amp;lt; 0 || $m &amp;gt;= $h || $n &amp;gt;= $w;
        $count++ if $map[$m][$n] eq '#';
    }
    return $count;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;look()&lt;/code&gt; uses the list of vectors to look around the current position, by calculating &lt;code&gt;$m&lt;/code&gt; and &lt;code&gt;$n&lt;/code&gt;. We skip if &lt;code&gt;$m&lt;/code&gt; or &lt;code&gt;$n&lt;/code&gt; are outside the map. And finally we increment the count if the place we are looking at is occupied (&lt;code&gt;#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Rather simple, but of course it took me some time to get all the parts arranged the right way. I'm quite sure that I have some nearly identical code lying around in last years repo. Maybe it would make sense to prepare a AdventOfCode helper distribution? Or is that cheating?&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;The second part just changes the way consider which seats should be counted. I again implemented a simple brute-force solution (my trademark!). The original code was of course copy/pasted and manically adapted, but after my submission I cleaned up bot solutions and refactored them, so that we only need to change the &lt;code&gt;look()&lt;/code&gt; function for part 2 (and the value of &lt;code&gt;$max&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub look {
    my ( $map, $r, $c ) = @_;
    my $count = 0;
    foreach my $vec (@around) {
        my $tr = $r;
        my $tc = $c;
        while (1) {
            my $m = $tr + $vec-&amp;gt;[0];
            my $n = $tc + $vec-&amp;gt;[1];
            last if $m &amp;lt; 0 || $n &amp;lt; 0 || $m &amp;gt;= $h || $n &amp;gt;= $w;
            my $val = $map[$m][$n];
            $count++ if $val eq '#';
            last unless $val eq '.';
            $tr = $m;
            $tc = $n;
        }
    }
    return $count;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We "only" need to add another loop to look further along the vector. I think this could be refactored even more, because both &lt;code&gt;look()&lt;/code&gt; functions share a great deal of code. Patches welcome...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 29:44 / 10:02&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 17615 / 15517&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/11"&gt;https://adventofcode.com/2020/day/11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Major features from Perl 5.6 to 5.18</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/major-features-from-perl-5-6-to-5-18-1lb3" type="text/html"/>
    <content type="html">&lt;p&gt;I just wanted to drop a list of (mainly high-level) changes from 5.6 to 5.18, in bulk 😄&lt;/p&gt;

&lt;p&gt;I think I've got this list from taking note watching a rjbs presentation + reddit posts/comments.&lt;/p&gt;

&lt;p&gt;For non Perl people, these versions are already old.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#56" class="anchor"&gt;
  &lt;/a&gt;
  5.6
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;unicode !&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#58" class="anchor"&gt;
  &lt;/a&gt;
  5.8
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;new implementation of threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5100" class="anchor"&gt;
  &lt;/a&gt;
  5.10.0
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;use feature&lt;/li&gt;
&lt;li&gt;perl -E&lt;/li&gt;
&lt;li&gt;defined or //=&lt;/li&gt;
&lt;li&gt;named captures&lt;/li&gt;
&lt;li&gt;state vars&lt;/li&gt;
&lt;li&gt;$* and $# deprecated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5101" class="anchor"&gt;
  &lt;/a&gt;
  5.10.1
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;resolve issue 5.10.0 (yes deserve a major feature entry)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#512" class="anchor"&gt;
  &lt;/a&gt;
  5.12
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;change releasing flow&lt;/li&gt;
&lt;li&gt;pkg name version&lt;/li&gt;
&lt;li&gt;pluggable keywords&lt;/li&gt;
&lt;li&gt;version number format&lt;/li&gt;
&lt;li&gt;parent.pm in core&lt;/li&gt;
&lt;li&gt;links in POD L&amp;lt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#514" class="anchor"&gt;
  &lt;/a&gt;
  5.14
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;s//r/r&lt;/li&gt;
&lt;li&gt;block package syntax&lt;/li&gt;
&lt;li&gt;custom ops&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#516" class="anchor"&gt;
  &lt;/a&gt;
  5.16
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;big unicode improvement : e.g. unicode in symbol names&lt;/li&gt;
&lt;li&gt;fc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#518" class="anchor"&gt;
  &lt;/a&gt;
  5.18
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;experimental warnings&lt;/li&gt;
&lt;li&gt;hash randomization&lt;/li&gt;
&lt;li&gt;regex sets&lt;/li&gt;
&lt;li&gt;lexical subs&lt;/li&gt;
&lt;li&gt;qw() without parenthesis fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all folks !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdfsyyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnwvzitp9wf7kj8xh8ja.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdfsyyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnwvzitp9wf7kj8xh8ja.jpg" alt="In Perl We Trust"&gt;&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/major-features-from-perl-5-6-to-5-18-1lb3</id>
    <published>2020-12-11T13:38:55Z</published>
    <updated>2020-12-11T13:38:55Z</updated>
    <category term="perl"/>
    <category term="changelog"/>
  </entry>
  <entry>
    <title>Arbeiten mit Nuclino Teil 3</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-11-nuclino-backup-III" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In den vergangenen beiden Artikeln über unser Nuclino-Backup habe ich erst vorgestellt, wie wir die Backups erstellen und anschließend wie wir das Programm schneller gemacht haben. </div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-11-nuclino-backup-III</id>
    <published>2020-12-11T10:00:00Z</published>
    <updated>2020-12-11T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Advent of Code Day 10 - trillion jolts</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_10.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_10.html</id>
    <updated>2020-12-10T19:58:54+00:00</updated>
    <category term="perl"/>
    <summary type="html">While the first part was ridiculously easy (after stripping away the overly complex "explanation"), I was not in the mood for doing the second part (recursion, memoization, ..) in the morning.
 ...</summary>
    <content type="html">&lt;p&gt;While the first part was ridiculously easy (after stripping away the overly complex "explanation"), I was not in the mood for doing the second part (recursion, memoization, ..) in the morning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/10"&gt;https://adventofcode.com/2020/day/10&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;We first need to sort the adapters by int value (hence the spaceship op &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;). We start with a jolt of 0, and prefill the result hash with a jolt-count for 3 (because the last adapter has a 3 jolt higher rating).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @adapters = sort { $a &amp;lt;=&amp;gt; $b } map { chomp; $_ } &amp;lt;&amp;gt;;

my $jolt  = 0;
my %jolts = ( 3 =&amp;gt; 1 );
for my $a (@adapters) {
    $jolts{ $a - $jolt }++;
    $jolt = $a;
}

say $jolts{1} * $jolts{3};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we just need to go through the sorted adapters, get the joltage difference between the current and the previous adapter (&lt;code&gt;$a - $jolt&lt;/code&gt;) and count the result. When we're done, we multiply the counts.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Hm, "more than a trillion" you say. Seems like a brute force combinatoric attack will not work out. Using some memoization would obviously help. But as I said, I had no time (and no motivation (and no meeting...)), so I stopped thinking about the problem.&lt;/p&gt;

&lt;p&gt;In the evening (I was still to lazy to actually think) I found &lt;a href="https://old.reddit.com/r/adventofcode/comments/kacv5i/2020_day_10_p2_need_some_logic_help_not_specific/gf9nsaf/?context=3"&gt;this excellent hint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which lead me to this solution:&lt;/p&gt;

&lt;p&gt;The main point here is that the input is coming in sets separated by the value 3. So we can break the input down into a bunch of subsets (which will always be consecutive numbers, which the first part showed by only containing jolts of 1 and 3). We now only need to figure out how many combination are possible for each subset, and then multiply these numbers. A quick run through the input revealed a max set size of 5. This seems doable!&lt;/p&gt;

&lt;p&gt;I'm not very good at combinatoric, so I used pen &amp;amp; paper to figure out the number of combinations for various set sizes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;size  combinations
  1      1
  2      1
  3      2
  4      4
  5      7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hm, these numbers look a tiny bit familiar. But before I further investigated them, I implemented the solution (&lt;a href="https://github.com/domm/adventofcode2020/blob/27e1fea82ed98f90c7be00b641f5fb6bdae13ac5/10_2.pl"&gt;original code&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @lu     = ( undef, 1, 1, 2, 4, 7 );
my @adapters = sort { $a &amp;lt;=&amp;gt; $b } 0, map { chomp; $_ } &amp;lt;&amp;gt;;
push( @adapters, $adapters[-1] + 3 );
my @set = 0;
my $res = 1;
my $i   = 1;
for (@adapters) {
    push( @set, $_ );
    if ( ( $adapters[ $i++ ] - $set[-1] ) == 3 ) {
        $res *= $lu[ @set - 1 ];
        @set = $set[-1];
    }
}
say $res;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We again sort the input, adding 0 at the beginning and adding the last adapter (+3) to the end. We add the first adapter to the first set (@set = 0), and init a counter and the result.&lt;/p&gt;

&lt;p&gt;Then we walk the adapters and push the current one onto the current set. If the next adapter (&lt;code&gt;$adapters[$i++]&lt;/code&gt;) has a joltage that's 3 bigger then the current adapter (which is the last element of the current set, &lt;code&gt;$set[-1]&lt;/code&gt;), we get the number of combinations for the current set by looking it up in my handcrafted list (using set size minus 1, because we already pushed the current element onto the set) and multiply them with the result. Then we reset the current set to only contain the current adapter. (If this is a bit unclean, take a look at the original code linked above).&lt;/p&gt;

&lt;p&gt;After finishing the task, I googled the number and first found something called the &lt;a href="https://en.wikipedia.org/wiki/Lazy_caterer%27s_sequence"&gt;lazy caterer's sequence&lt;/a&gt;, but this is the wrong sequence. In fact we're looking at the tribonacci numbers, i.e. Tn = T(n-1) + T(n-2) + T(n-3)&lt;/p&gt;

&lt;p&gt;That was fun!&lt;/p&gt;

&lt;h4&gt;No Space&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;my@t=(0,1,1,2,4,7);my@a=sort{$a&amp;lt;=&amp;gt;$b}0,map{chomp;$_}&amp;lt;&amp;gt;;push(@a,$a[-1]+3);my@s=0;my$r
=1;my$i=1;for(@a){push(@s,$_);if(($a[$i++]-$s[-1])==3){$r*=$t[@s-1];@s=$s[-1]}}say$r&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 06:19 / ~42:00&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 18325 / 20384 (wow, there where 8 hours between me solving part 1 and 2, I've expected a way worse rank)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/10"&gt;https://adventofcode.com/2020/day/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Perl tips I wish I knew as a beginner</title>
    <link rel="alternate" href="https://dev.to/scotticles/perl-tips-i-wish-i-knew-as-a-beginner-26eh" type="text/html"/>
    <content type="html">&lt;p&gt;I think the hard part with Perl and other languages, is setting up your environment. As you do more Perl you realize there are better ways to do things that aren't straight forward when you first began the journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I use Linux and this will be on a Linux environment, BUT with WSL on windows and with homebrew on mac.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#system-perl-and-user-perl" class="anchor"&gt;
  &lt;/a&gt;
  System Perl and User Perl
&lt;/h1&gt;

&lt;p&gt;On Linux, we have a system Perl. It's great to have but we don't want to mess with it. Lets keep the system Perl for the system. We want a user environment and you really must do this, its way better. We have two tools we can pick from that make it easy to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tokuhirom/plenv"&gt;Plenv&lt;/a&gt; and &lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;. &lt;em&gt;I started on Perlbrew and moved over to Plenv.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Plenv allows you to make it so each project you work on has a .plenv file and you can specify the Perl version you want.&lt;/p&gt;

&lt;p&gt;Look at the two links, pick one and set it up, pick a perl version and install it. Verify it works with &lt;code&gt;perl -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You want to install cpanminus.&lt;br&gt;
&lt;code&gt;plenv install-cpanm&lt;/code&gt; &amp;lt;--plenv&lt;br&gt;
&lt;code&gt;cpan App-cpanminus&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You are now off system Perl and on your user Perl, its awesome. Cpanminus is installed and you can now install Perl modules for your project.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-cpanfile" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;a href="https://metacpan.org/pod/distribution/Module-CPANfile/lib/cpanfile.pod"&gt;cpanfile&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In your project you want to make a cpanfile. Cpanfiles contain a list of Perl modules.&lt;/p&gt;

&lt;p&gt;As your project grows, add in the modules to the cpanfile. When you need to distribute it, you can use the below command to install the dependencies. Makes life easier for everyone.&lt;br&gt;
&lt;code&gt;cpanm --installdeps .&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#carton" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Carton"&gt;Carton&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;"Perl module dependency manager (aka Bundler for Perl)"&lt;br&gt;
Carton is awesome, with plenv its even more awesome.&lt;/p&gt;

&lt;p&gt;This is stolen from metacpan pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# On your development environment&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Plack&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.9980&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starman&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.2000&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;snapshot&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sr"&gt;m "add Plack and Starman"&lt;/span&gt;

&lt;span class="c1"&gt;# Other developer's machine, or on a deployment box&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;starman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="nv"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;psgi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#vscode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Before vscode came out, I was living in PHPStorm with a Perl plugin, it worked but it was only okay. Code is awesome with all its plugins, once you get code up, browse the perl plugins. One you will want to have is perltidy and you'll need a &lt;code&gt;.perltidyrc&lt;/code&gt; in your project, you can find examples on the web, but here is Mojolicoius &lt;a href="https://github.com/mojolicious/mojo/blob/master/.perltidyrc"&gt;perltidyrc&lt;/a&gt;. I use that one.&lt;/p&gt;

&lt;p&gt;This should get you started with Perl.&lt;/p&gt;

</content>
    <author>
      <name>Scotticles</name>
    </author>
    <id>https://dev.to/scotticles/perl-tips-i-wish-i-knew-as-a-beginner-26eh</id>
    <published>2020-12-09T23:10:35Z</published>
    <updated>2020-12-09T23:10:35Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Advent of Code Day 9 - while learning</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_09.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_09.html</id>
    <updated>2020-12-09T20:58:36+00:00</updated>
    <category term="perl"/>
    <summary>The main takeaway of this day was that it makes a lot of sense to remember what we learned on previous days. Which I realized the hard way, after wasting 25 minutes on playing around with ...</summary>
    <content type="html">&lt;p&gt;The main takeaway of this day was that it makes a lot of sense to remember what we learned on previous days. Which I realized the hard way, after wasting 25 minutes on playing around with List::Permutor, when in fact this problem was a slightly extended version of &lt;a href="https://adventofcode.com/2020/day/1"&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/9"&gt;https://adventofcode.com/2020/day/9&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;This time the test and live data used different sizes for the "preamble", so I get that value from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl 09_1.pl 25 &amp;lt; 09.data&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I read in the input, removing newlines via chomp. The main loop runs &lt;code&gt;check()&lt;/code&gt; (see below). If the check fails we remove the first element of the input, if not we exit the loop and print the value in the input &lt;strong&gt;after&lt;/strong&gt; the "preamble".&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $size = shift;
my @in   = map { chomp; $_ } &amp;lt;&amp;gt;;

while (1) {
    check() ? shift @in : last;
}
say $in[$size];

sub check {
    my %lu = map { $_, 1 } @in[ 0 .. $size - 1 ];
    for my $a ( keys %lu ) {
        if ( $lu{ $in[$size] - $a } ) {
            return 1;
        }
    }
    return;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now about the check-function. We're again looking for two values in a list that sum up to a specific value, so we can reuse the trick we learned on day 1. I generate the list of "candidates" via an array slice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my %lu = map { $_, 1 } @in[ 0 .. $size - 1 ];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The target value is located after the "preamble", i.e. at &lt;code&gt;$in[$size]&lt;/code&gt;, so we loop through the candidates and see if the lookup hash contains a value at &lt;code&gt;target - current value&lt;/code&gt;. We return true, which will exit the main loop.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;As Part 2 reuses the result from Part 1, but I didn't want to hard-code it, I just added some more code (and I'll skip the old code here, you can view it on &lt;a href="https://github.com/domm/adventofcode2020/blob/main/09_2.pl"&gt;github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Instead of just printing the result, we store it in &lt;code&gt;$target&lt;/code&gt;. I also use a few functions from &lt;a href="https://metacpan.org/pod/List::Util"&gt;List::Util&lt;/a&gt;. And as my algorithm is destructive on the input, I copy the original data into @in2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use List::Util qw (min max sum);
my @in2  = @in;
my $target = $in[$size];

while (1) {
    my @try = @in2;
    my @cand;

    while (1) {
        push( @cand, shift @try );
        my $sum = sum(@cand);

        if ( $sum == $target ) {
            say min(@cand) + max(@cand);
            exit;
        }
        last if $sum &amp;gt; $target;
    }
    shift(@in2);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the outer loop we copy the input again, prepare an array to store the candidates, and (at the end, in the last row) remove the first element of the input.&lt;/p&gt;

&lt;p&gt;In the inner loop, we take the first element from the input, and push it onto the candidates array. The we calc the sum of the candidates, compare it with the target, and if it matches calculate the final result.&lt;/p&gt;

&lt;h4&gt;No Spaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;eval(qq{use$&amp;quot;List::Util&amp;quot;min&amp;quot;,&amp;quot;max&amp;quot;,&amp;quot;sum&amp;quot;});my$s=shift;my@x=map{chomp;$_}&amp;lt;&amp;gt;;my@y=@x
;$b=sub{my%l=map{$_,1}@x[0..$s-1];for(keys%l){if($l{$x[$s]-$_}){return&amp;quot;1&amp;quot;}}};while
(1){&amp;amp;$b?shift@x:last}my$t=$x[$s];while(1){my@t=@y;my@z;while(1){push(@z,shift@t);
my$r=sum(@z);if($r==$t){say(min(@z)+max(@z));exit}if($r&amp;gt;$t){last}}shift(@y)}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cheated a little bit with using eval to load List::Util, but still nice enough.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 37:37 / 14:37&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 13413 / 13173&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/9"&gt;https://adventofcode.com/2020/day/9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Advent of Code Day 8 - running code</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_08.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_08.html</id>
    <updated>2020-12-08T19:59:42+00:00</updated>
    <category term="perl"/>
    <summary type="html">This was a fun day. The first part was rather simple, but when I read the second part I thought that this will get very hard. It wasn't that bad in the end..

https://adventofcode.com/2020/day/8
 ...</summary>
    <content type="html">&lt;p&gt;This was a fun day. The first part was rather simple, but when I read the second part I thought that this will get very hard. It wasn't that bad in the end..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/8"&gt;https://adventofcode.com/2020/day/8&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;First we parse the input into an array containing another array with each op and value. As we need to stop when we've seen a line, we use the index &lt;code&gt;$i&lt;/code&gt; of the code-array and exit the loop via &lt;code&gt;last&lt;/code&gt; if &lt;code&gt;$i&lt;/code&gt; was already seen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @code = map {[split(/ /)]} &amp;lt;&amp;gt;;
my %seen;
my $i   = 0;
my $acc = 0;
while (1) {
    last if $seen{$i}++;

    my ( $op, $val ) = $code[$i]-&amp;gt;@*;
    if ( $op eq 'jmp' ) { $i   += $val; next }
    if ( $op eq 'acc' ) { $acc += $val }
    $i++;
}
say $acc;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To actually "execute" the code, we fetch the op and val of the current line. We jump (via &lt;code&gt;next&lt;/code&gt;) if it's a &lt;code&gt;jmp&lt;/code&gt;, we accumulate if it's &lt;code&gt;acc&lt;/code&gt;; and we increment $i (which will not happen for &lt;code&gt;jmp&lt;/code&gt;, because we already skipped the rest of the block)&lt;/p&gt;

&lt;p&gt;Finally we just output the value of &lt;code&gt;$acc&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Now we need to figure out which of 638 command we need to change to avoid an endless loop and get the "correct" result. Uff...&lt;/p&gt;

&lt;p&gt;But in the end it's quite easy (and of course there are way more elegant solutions to be found on &lt;a href="https://old.reddit.com/r/adventofcode/comments/k8xw8h/2020_day_08_solutions/"&gt;reddit&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I decided to copy the original code into a temporary code array, and then walk through the code, remembering which lines I already changed, and always only changing the first unchanged line. After the one line in the code is changed, I &lt;code&gt;run()&lt;/code&gt; it, and if we get a result back, we exit and print.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @original = &amp;lt;&amp;gt;;
my %tried;
my $acc;
while (1) {
    my @try = @original;
    for ( my $i = 0; $i &amp;lt; @original; $i++ ) {
        my $line = $try[$i];
        next if $line =~ /acc/;
        if ( $tried{$i}++ ) {
            next;
        }
        else {
            $line =~ /nop/ ? $line =~ s/nop/jmp/ : $line =~ s/jmp/nop/;
            $try[$i] = $line;
            last;
        }
    }

    $acc = run(@try);
    last if $acc;
}
say $acc;

sub run {
    my @code = @_;
    my %seen;
    my $i   = 0;
    my $acc = 0;
    while (1) {
        return 0    if $seen{$i}++;
        return $acc if $i &amp;gt;= @code;
        my ( $op, $val ) = split( / /, $code[$i] );

        if ( $op eq 'jmp' ) { $i   += $val; next }
        if ( $op eq 'acc' ) { $acc += $val }
        $i++;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;run()&lt;/code&gt; function is basically the same as the solution for part 1, with the only change that we return 0 if the code looped, or the accumulators value if we reached the end of the code.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 08:12 / 23:06&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 12043 / 10371&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/8"&gt;https://adventofcode.com/2020/day/8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
  <title>Community Leaders and Board Meeting November 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/ommunityeadersandoardeetingovember2020"/>
  <id>tag:news.perlfoundation.org,2020-12-08:/post/ommunityeadersandoardeetingovember2020</id>
  <published>2020-12-08T06:05:13</published>
  <updated>2020-12-08T06:05:13</updated>
  <summary>
  <![CDATA[
     Perl and Raku updates, mentoring, grants, sponsorship progress, conferences, trademarks and more were discussed amongst community leaders at the meeting held in November. The meeting is becoming an invaluable tool for the Board and community to communicate with each other about developments in TPF and the wider Perl community. The Board looks forward to future successful community leader meetings with representatation from a wide cross section of our community. The 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Perl and Raku updates, mentoring, grants, sponsorship progress, conferences, trademarks and more were discussed amongst community leaders at the meeting held in November.  The  meeting is becoming an invaluable tool for the Board and community to communicate with each other about developments in TPF and the wider Perl community.</p>

<p>The Board looks forward to future successful community leader meetings with  representatation from a wide cross section of our community. The next meeting is on Friday 18th December at 1830UTC, via Zoom. We hope to see as many community leaders as possible. If you have anything specific to share, please do let the team know via the Community Leaders Slack Channel and we can add your update to the agenda.</p>

<p>The notes from the Community Leaders meeting, as well as from the Board meeting which followed are all shared below.</p>

<h1>Community Leaders Meeting 20 November</h1>

<h2>Invitees</h2>

<ul>
<li>TPF Board</li>
<li>Nic Evans</li>
<li>Jason C (Grants)</li>
<li>Alex (Sponsorship)</li>
<li>Samantha (CAT)</li>
<li>Perl steering committee member</li>
<li>Raku steering committee member</li>
<li>Nige (Legal &amp; commercial)</li>
<li>Andrew Solomon (New community members)</li>
</ul>

<h2>Attendees</h2>

<ul>
<li>Board: Stuart Mackintosh, Dave Rolsky, Pete Krawczyk, Dan Wright, Allison Randal</li>
<li>Leaders: Nige Hamilton, Alex Beamish, Daniel Sockwell, Samantha McVey, SawyerX, Andrew Solomon </li>
<li>Admin: Nic Evans</li>
<li>Confirmed absence: Mark Keating, Makoto Nozaki</li>
</ul>

<h2>Discussion</h2>

<h3>Perl &amp; Raku mentoring</h3>

<p>Andrew Solomon introduced proposal -</p>

<p>Newcomers think Perl is a sparsely populated community. I have been looking at Python and saw 20k people all signed up, questions being answered quickly. Occured to me we should have similar for Perl. I know we have presence on Facebook, but not very welcoming to discuss tech.
First thought would be good to use Slack but didn't want to just do it, wanted guidance from TPF - so put together proposal for thoughts.</p>

<p>Opinion expressed:
- Possibility to turn it into teaching materials
- Slack vs other services - let's focus on TPF hosted chat service</p>

<p>Action: Document requirement and goals collaboratively and evaluate options</p>

<h3>Legal</h3>

<ul>
<li>Raku trademark registration is done in UK and making progress in US and EU.</li>
<li>The onion logo was discussed, including whether we should continue using it</li>
<li>Stuart pointed out it's a three-way link of marketing, legal and technology</li>
<li>Action: Set up further discussion between Marketing, Legal and other interested parties</li>
</ul>

<h3>Grants</h3>

<ul>
<li>Documentation Standards for the Perl 7 Era grant was completed earlier this month and has been submitted for payment.</li>
<li>No new grants submitted during the November 2020 period. Next call is in January</li>
<li>There was discussion over what to do with the Perl 6 (Now: Raku) Course with Exercises Grant. We expect the first deliverable within the next 3 weeks.</li>
<li>Putting together a report of grants requested and approved over the last 3 years. Hope is to have them by early December.</li>
<li>Planning to start working with GC in 1Q 2021 to propose some revisions to clean up our charter. </li>
</ul>

<h3>Marketing</h3>

<ul>
<li>No update - no meeting in the past month. Marketing committee to meet next week (26 November). Will have update atfer that.</li>
</ul>

<h3>Sponsorship</h3>

<ul>
<li>Draft sponsorship letter and web page all written, awaiting sign off from Board</li>
<li>Discussion
<ul>
<li>How to recognize donors</li>
<li>What donors expect in return</li>
<li>Best way to have ongoing sponsorship - "membersip" or "supporter"</li>
</ul></li>
</ul>

<h3>TPC and Conferences</h3>

<h4>TPC (US - organized by TPF)</h4>

<p>We will decide if we hold the conference in person. Otherwise we need to look at how we do it virtually. We learned a lot in 2020. </p>

<h4>TPC (Europe - not organized by TPF)</h4>

<p>Questions remain over whether there will be a conference in Europe in 2021.</p>

<h4>FOSDEM</h4>

<p>We have applied for a virtual dev room. It will be an alternative to the BoF event we were thinking.</p>

<h4>Other events</h4>

<p>We need to encourage events where posible. If somebody needs help, let us know and we will try to support it.</p>

<h3>Raku</h3>

<ul>
<li>Having first meeting of Raku Steering Council in one week. Main agenda item is Code of Conduct. We have written a draft code of conduct as well as a Code of Conduct incident guide, with some reference to CAT documentation. Have circulated for discussion at first meeting. Will share draft shortly over a week.</li>
<li>We are looking at advent calendar posts for Raku.</li>
<li>Stuart: It's important to have Raku representation at this meeting. </li>
</ul>

<h3>CAT</h3>

<ul>
<li>Policy document needs to be reviewed - a single document which needs to be split into a policy and a charter document, as well as an incident handling document.</li>
<li>Discussion is held in Slack</li>
</ul>

<h3>Perl</h3>

<ul>
<li>Still working on governance and resolved to basic guidelines in operation. </li>
<li>We haven't created a core team but know how to create it. We are waiting to create it, set up a mailing list, then dissolve the governance list which was meant to set up the steering committee. </li>
<li>Stuart: We need to think about enabling Perl to thrive in 50-100 years time.</li>
</ul>

<h3>Infrastructure</h3>

<ul>
<li>We collected passwords we own. It's a good first step and we have a lot to do.</li>
</ul>

<p>&gt; Meeting closed: 19:41 UTC
&gt; Notes taken by: Nic Evans / Stuart Mackintosh</p>

<h1>Board Meeting Notes 20 November 2020</h1>

<h2>Attendees</h2>

<ul>
<li>Stuart, Pete, Dave, Dan, Allison, Nic (admin), Makoto</li>
</ul>

<h2>Meeting topics</h2>

<h3>Advisory board and the board members' retirement process</h3>

<ul>
<li>Advisory board's role was proposed by Stuart</li>
<li><a href="https://www.perlfoundation.org/advisory_board.html">Public doc</a></li>
<li>Separately, each board member will receive a letter at the end of their two-year term to see if they wish to remain. The latter will ask whether they stay on the board and what they want to achieve.</li>
<li>Action: Each board member will review for additional feedback</li>
</ul>

<h3>President's role and Selection</h3>

<ul>
<li>Stuart's two-year term will end in September 2021. </li>
<li>Items discussed:
<ul>
<li>Whether to recruit the next president externally or internally</li>
<li>What the new president's role is, if different from now</li>
<li>The president's role will change over time</li>
</ul></li>
<li>Discuss further at  the next meeting</li>
</ul>

<h2>Recognised resources</h2>

<ul>
<li>The idea of recognised resources was raised and reviewed</li>
<li>Would be good in hands of marketing</li>
<li>Review in January</li>
</ul>

<h2>Board introduction web page</h2>

<ul>
<li>Drafted and under review</li>
</ul>

<h2>Sponsorship letter and web page</h2>

<ul>
<li>The sponsorship letter was drafted and presented</li>
<li>Feedback was given</li>
<li>Idea was raised to link it with the marketing effort</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl-Schulungen 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-07-schulungen-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Nachdem wir uns das Jahr 2020 Zeit genommen haben, um die Perl-Academy etwas umzubauen (mit neuem Design, der Einführung dieses Blogs, mit Gregor als zusätzlicher Trainer, ...), wollen wir heute unseren Plan für 2021 vorstellen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-07-schulungen-2021</id>
    <published>2020-12-07T10:00:00Z</published>
    <updated>2020-12-07T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 089</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/12/06#pwc089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2 id="part-1">Part 1</h2>
<p><em>You are given a positive integer $N. Write a script to sum GCD of all possible unique pairs between 1 and $N.</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given a positive integer $N. Write a script to sum GCD of all possible 
# unique pairs between 1 and $N.
##

sub all_unique_pairs{
    my($n) = @_;
    my %pairs;
    for my $i (1 .. $n){
        for my $j (1 .. $n){
            $pairs{"$i-$j"} = -1 unless $pairs{"$i-$j"} || $pairs{"$j-$i"} || $i == $j; 
        }
    }
    return sort keys %pairs;
}

sub euclid {
    my($a, $b) = @_;
    return ($b) ? euclid($b, $a % $b) : $a;
}

MAIN:{
    my $gcd_sum = 0; 
    my @values =  all_unique_pairs(3);
    for my $pair (@values[0 .. @values - 2]){
        my($i, $j) = split(/-/, $pair);
        $gcd_sum += euclid($i, $j);
        print "gcd($i, $j) + ";  
    }
    my ($i, $j) = split(/-/, $values[-1]); 
    $gcd_sum += euclid($i, $j);
    print "gcd($i, $j) = $gcd_sum\n";  

    $gcd_sum = 0; 
    @values =  all_unique_pairs(4);
    for my $pair (@values[0 .. @values - 2]){
        my($i, $j) = split(/-/, $pair);
        $gcd_sum += euclid($i, $j);
        print "gcd($i, $j) + ";  
    }
    ($i, $j) = split(/-/, $values[-1]); 
    $gcd_sum += euclid($i, $j);
    print "gcd($i, $j) = $gcd_sum\n";  

}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
gcd(1, 2) + gcd(1, 3) + gcd(2, 3) = 3
gcd(1, 2) + gcd(1, 3) + gcd(1, 4) + gcd(2, 3) + gcd(2, 4) + gcd(3, 4) = 7
</code></pre>
<h3 id="notes">Notes</h3>
<p>Sometimes before jumping into my own solutions I do a little research on the topics at hand. In doing so for this I came across this beautifully <a href="https://www.perlmonks.org/?node_id=109887">succinct implementation of Euclid’s algorithm</a>. I decided to use that here for the GCD computation.</p>
<p>Ok, with that sorted out, what is left is to generate all the unique pairs and print the results. I generate the pairs in <code>all_unique_pairs</code> by saving the pairs as hash heys, stringified by joining them with a ‘-’. When printing them out later it is necessary to split on the ‘-’.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given m x n matrix of positive integers. Write a script to print spiral matrix as a list.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# Write a script to display matrix as below with numbers 1 - 9. 
# Please make sure numbers are used once.
##
use boolean;
use Math::GSL::Permutation q/:all/;

sub validate {
    my($a, $b, $c, $d, $e, $f, $g, $h, $i) = @_;
    return false if ($a + $b + $c) != 15;
    return false if ($d + $e + $f) != 15;
    return false if ($g + $h + $i) != 15;
    return false if ($a + $d + $g) != 15;
    return false if ($b + $e + $h) != 15;
    return false if ($c + $f + $i) != 15;
    return false if ($a + $e + $i) != 15;
    return false if ($c + $e + $g) != 15;
    return true;
}

sub print_matrix {
    my($a, $b, $c, $d, $e, $f, $g, $h, $i) = @_;
    print "[ $a $b $c ]\n";
    print "[ $d $e $f ]\n";
    print "[ $g $h $i ]\n";
}    

MAIN:{
    my $permutation = new Math::GSL::Permutation(9);
    while(gsl_permutation_next($permutation-&gt;raw) == 0){
        my @values =  $permutation-&gt;as_list();
        @values = map { $_ + 1 } @values;
        do { 
            print_matrix(@values);
            print "\n";
        }if validate(@values);  
    }
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>The <code>validate</code> function is pretty straight forward, especially so since I intentionally wrote it to be blazingly obvious what is going on!</p>
<p>The real work is in generating the permutations that get checked. For that I used <a href="https://metacpan.org/pod/Math::GSL::Permutation">Math::GSL::Permutation</a> which, as the name implies, is an excellent module which wraps the Gnu Scientific Library. Well, the module is quite solid aside from the documentation which is a bit rough and often requires referring to the GSL documentation on the functions being wrapped.</p>
<p>The main point to know about Math::GSL::Permutation is that it only creates permutations on integers. As Perl programmers we get spoiled by being able to easily manipulate any type of data. If you are interested in permuting lists of arbitrary elements you could use Math::GSL::Permutation to permute the indices, but not the elements themselves.</p>
<p>One final note, having a conditional after the expression is just one of those classic examples of Perl expressiveness, but I seldom see the <code>do/if</code> form. A <code>do/if</code> allows you to have multiple statements, a whole block, execute with the <code>if</code> coming afterwards. Obviously just <em>syntactic sugar</em> for the more common <code>if{}</code> but I prefer it in cases like this where there is no need for an <code>else</code>.</p>
<h2 id="references">References</h2>
<p><a href="https://en.wikipedia.org/wiki/Euclidean_algorithm">Euclid’s Algorithm</a></p>
<p><a href="https://metacpan.org/pod/Math::GSL">Math::GSL</a></p>
<p><a href="https://www.gnu.org/software/gsl/">GSL</a></p>
<p><a href="ftp://ftp.gwdg.de/pub/gnu/www/savannah-checkouts/gnu/gsl/manual/html_node/Permutation-Examples.html">GSL Permutations Example</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc089</id>
    <published>2020-12-06T17:23:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>RT – Action Plan for CPAN Authors</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">CPAN RT is going away.</a> CPAN authors have until the beginning of March to extract any useful information from it.</p>
<p>RT is the “Request Tracker”, a bug tracking system that is written by <a href="https://bestpractical.com/">Best Practical</a>. For almost as long as I can remember, anyone who uploads a module to <a href="https://www.cpan.org/">CPAN</a> gets a free ticket queue for their module at <a href="https://rt.cpan.org/">rt.cpan.org</a>. <a href="https://metacpan.org/">MetaCPAN</a> assumes that’s where people should report bugs in your module and helpfully adds an “issues” link that goes to the appropriate page in RT.</p>
<p>But now that system is going away. It will be switched off on the 1st March 2021. The <a href="https://noc.perl.org/">Perl NOC team</a> is spread pretty thinly and they just don’t have the resources to keep it running.</p>
<p>Gabor has published <a href="https://www.youtube.com/watch?v=5ly28Ew0spY">a video talking about what this means and some of the potential problems</a>. But I thought it would be useful to work on a list of things that CPAN authors should be thinking about over the next three months.</p>
<p>Firstly, and most importantly, you’ll need somewhere new for people to report problems with your modules. For most people, that’ll be simple enough. If you host your code repos somewhere like GitHub, then you could just use the issue trackers that most of those services provide. If you host your own code repos (or don’t have public code repos), then you’ll need to find an alternative solution.</p>
<p>Next you’ll need to tell people where to find your new bug tracker. You do this by adding it to the metadata for your CPAN distribution. If, like most people, you provide a Makefile.PL in your distribution, then you’ll want to add a snippet like this to your code:</p><pre class="urvanov-syntax-highlighter-plain-tag">META_MERGE        =&gt; {
  'meta-spec' =&gt; { version =&gt; 2 },
  resources =&gt; {
    bugtracker =&gt; {
      "web" =&gt; "https://github.com/davorg/moox-role-json_ld/issues"
    }
 },</pre><p>It’s likely that you already have a “resources” key in your data structure (containing, for example, a link to your code repo), in which case you just need to add the “bugtracker” key inside it. When you release this new update to CPAN, the “issues” link will change to point to your new bug tracker.</p>
<p>You then have the problem of dealing with the tickets that are currently in your RT queues. I suggest one or more of the following strategies:</p>
<ol>
<li>Go through the list and fix any that can be easily fixed. I found two like that when looking through my list this morning. If you’re releasing new versions of the modules (to add the new bug tracker information) then you might as well fix a bug or two at the same time.</li>
<li>Look for tickets that can be closed. My list contains some very old tickets. I mean like fifteen years old. If someone had a problem installing one of your modules fifteen years ago and hasn’t followed-up more recently, then there’s a good chance that they no longer care about the solution. What I’ve been doing is to check on <a href="https://www.cpantesters.org/">CPAN Testers</a> to see if anyone else has seen a similar problem. If I see other reports, I know that it’s something that needs to be fixed. If there’s just the one in RT, then I close it with a message saying (paraphrased) “if this is still a problem that you’d like me to investigate, then please open a new ticket at [link to new bug tracker]”.</li>
<li>Then you’re left with the tickets that you’d still like to address at some point. The Perl NOC team say that they’ll probably make a static archive of the old RT tickets available. But it would be good to get those tickets over to your new bug tracker. As I’m using GitHub for my new bug trackers, and that’s currently the most popular solution other than the CPAN RT itself, I’m hoping that someone cleverer than me will write some code that will make moving the tickets easy. But if nothing happens before the end of January, I might have to look into that myself.</li>
</ol>
<p>I’ve got a bit of work to do in this area myself. Although I’ve been using GitHub for all of my CPAN code for a long time, I haven’t been advertising the fact that I’d prefer people to use GitHub for bug reporting too. So I need to update all of my modules with the new bug tracker information included. I’ll do that over the next few weeks.</p>
<p>I have a couple of tools that might help in this process. Firstly, I’ve just added to <a href="https://cpandashboard.com/">CPAN Dashboard</a> a column that links to the module’s bug tracker if one exists. I can use that to know which modules need to be updated.</p>
<p>You could <a href="https://cpandashboard.com/add/">add yourself to CPAN Dashboard</a> if you wanted to get that information for your modules. But if you don’t want to do that, I’ve written a really short program that you can use to find your CPAN distributions that don’t include the bug tracker information.<a href="https://gist.github.com/davorg/faab75c5f40c9a580aa532f441442eb6"> It’s available as a Gist.</a></p>
<p>Have I missed anything? I mean, yes, I know there are a large number of unmaintained CPAN distributions that no-one will get round to updating. But this post was aimed at active CPAN authors. If there’s anything else you think we should be doing, then please let me know in the comments.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">RT – Action Plan for CPAN Authors</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>CPAN RT is going away. CPAN authors have until the beginning of March to extract any useful information from it. RT is the “Request Tracker”, a bug tracking system that is written by Best Practical. For almost as long as I can remember, anyone who uploads a module to CPAN gets a free ticket queue […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">RT – Action Plan for CPAN Authors</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2022</id>
    <published>2020-12-06T12:40:17Z</published>
    <updated>2020-12-06T12:40:17Z</updated>
    <category term="Miscellaneous"/>
    <category term="bugtracker"/>
    <category term="cpan"/>
    <category term="rt"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-25623131984815419</id>
    <published>2020-12-05T21:06:00.000+01:00</published>
    <updated>2020-12-05T21:06:48.080+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxviii) 14 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.83&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 6.82 was 5 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A date and time object for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-04&lt;/li&gt;  &lt;li&gt;Votes: 197&lt;/li&gt;  &lt;li&gt;Previous version: 1.53 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/DBD-CSV-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI driver for CSV files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 4 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.08&lt;/strong&gt; on 2020-12-02&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 3.07 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AUDREYT/Feersum-1.410' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Feersum&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A PSGI engine for Perl based on EV/libev &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.410&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.407 was 1 year, 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2020-11-29&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.73&lt;/strong&gt; on 2020-12-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.72 was 1 year, 8 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.67&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 435&lt;/li&gt;  &lt;li&gt;Previous version: 8.65 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.7000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.7000&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.6006 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.051' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.051&lt;/strong&gt; on 2020-11-29&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 1.050 was 8 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20201202' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20201202&lt;/strong&gt; on 2020-12-02&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20201001 was 2 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Plack-1.0048' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Plack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Superglue for Web frameworks and Web Servers (PSGI toolkit) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.0048&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 220&lt;/li&gt;  &lt;li&gt;Previous version: 1.0047 was 2 years, 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v6.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v6.10.0&lt;/strong&gt; on 2020-12-01&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v6.8.0 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2020-11-30&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.63 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/25623131984815419/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/25623131984815419"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/25623131984815419"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html" title="(cccxviii) 14 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-478013986391213073</id>
    <published>2020-12-05T21:04:00.001+01:00</published>
    <updated>2020-12-05T21:04:11.451+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlv) metacpan weekly report - Plack</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/12/05 20:03:50 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amazon::SNS::V4" target="_blank"&gt;Amazon::SNS::V4&lt;/a&gt; - Amazon Simple Notification Service, V4 Signatures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::PAM" target="_blank"&gt;Authen::PAM&lt;/a&gt; - Frequently-Asked Questions about Authen::PAM.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive" target="_blank"&gt;Data::Recursive&lt;/a&gt; - array and hash merge, deep clone, recursive data compare, done very fast, with C++ API.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Sidef" target="_blank"&gt;Math::Sidef&lt;/a&gt; - Perl interface to Sidef's mathematical library.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Google::Cloud::Auth::ServiceAccount" target="_blank"&gt;WWW::Google::Cloud::Auth::ServiceAccount&lt;/a&gt; - Service account based OAuth authentication for Google Cloud APIs&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::PBKDF2" target="_blank"&gt;Crypt::PBKDF2&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Perl" target="_blank"&gt;Crypt::Perl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=197)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Backtrace" target="_blank"&gt;Devel::Backtrace&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode::Detect" target="_blank"&gt;Encode::Detect&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::SQLite" target="_blank"&gt;Minion::Backend::SQLite&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::ScanDeps" target="_blank"&gt;Module::ScanDeps&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=435)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SFTP" target="_blank"&gt;Net::SFTP&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH::Perl" target="_blank"&gt;Net::SSH::Perl&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Format" target="_blank"&gt;Number::Format&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::WorkUnit" target="_blank"&gt;Parallel::WorkUnit&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+3=220)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::ProcessTable" target="_blank"&gt;Proc::ProcessTable&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ProgressBar" target="_blank"&gt;Term::ProgressBar&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Compile" target="_blank"&gt;Test::Compile&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=103)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig::0.29" target="_blank"&gt;XML::Sig::0.29&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/478013986391213073/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/478013986391213073"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/478013986391213073"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html" title="(cdxlv) metacpan weekly report - Plack"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8710490265656854119</id>
    <published>2020-12-05T20:31:00.002+01:00</published>
    <updated>2020-12-05T20:31:57.021+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-12-05 19:31:10 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65080238" target="_blank"&gt;How can I wrap require and use?&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65095132" target="_blank"&gt;Regular expression to match exactly and only n times&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65058171" target="_blank"&gt;log4perl: How to write ERROR message to file and DEBUG message to stderr?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65062507" target="_blank"&gt;Properly detecting if Perl subroutine argument is array&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65073048" target="_blank"&gt;Regex: capture anything within parenthesis, also nested parenthesis&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65135802" target="_blank"&gt;How to ignore an exit(1) on a perl subroutine - tried eval but didn't work&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65130504" target="_blank"&gt;Can chrome know if there is a window maximized or not in front during selenium automation?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65137327" target="_blank"&gt;Is there a way to read comments/notes of a cell in an excel file with ParseExcel/ParseXLSX?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65074494" target="_blank"&gt;How send and received string, array and hash in perl function&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65074705" target="_blank"&gt;How can I get the local time modification of a file with File::stat in perl?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8710490265656854119/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8710490265656854119"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8710490265656854119"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html" title="(cdlxx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>RT.CPAN.ORG is closing</title>
  <summary type="html"><![CDATA[<p>
<a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">Request Tracker (RT) of CPAN is closing</a>. What is the impact?
<p>
Check <a href="https://cpan.rocks/">CPAN Rocks</a> for the statistics.
<p>
Add yourself to <a href="https://cpandashboard.com/">CPAN Dashboard</a>.
<p>
Check the most recent data from <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>.
<p>
]]></summary>
  <updated>2020-12-05T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/rt-cpan-org-is-closing"/>  <id>https://perlmaven.com/rt-cpan-org-is-closing</id>
  <content type="html"><![CDATA[<p>
<a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">Request Tracker (RT) of CPAN is closing</a>. What is the impact?
<p>
Check <a href="https://cpan.rocks/">CPAN Rocks</a> for the statistics.
<p>
Add yourself to <a href="https://cpandashboard.com/">CPAN Dashboard</a>.
<p>
Check the most recent data from <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Gitlab umziehen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-04-gitlab-umziehen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In verschiedenen Projekten setzen wir ein jeweils selbst gehostetes Gitlab ein. Gitlab bietet viel mehr als nur die Versionskontrolle. Gregor hat vor einiger Zeit schon einmal etwas dazu geschrieben, wie wir bei Perl-Services.de Gitlab benutzen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-04-gitlab-umziehen</id>
    <published>2020-12-04T10:00:00Z</published>
    <updated>2020-12-04T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ColorThemed-0.002">Acme-CPANModules-ColorThemed</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that has color theme support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Getopt-0.002">Acme-CPANModules-Getopt</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that parse command-line options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ModulesThatJustContainData-0.001">Acme-CPANModules-ModulesThatJustContainData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-Marvel-CinematicUniverse-Characters-0.001">Acme-Marvel-CinematicUniverse-Characters</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>example of distributing instance data on CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMOYAMA/Acme-TOMOYAMA-Utils-0.01">Acme-TOMOYAMA-Utils</a></td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>0.01</td>
<td>The great new Acme::TOMOYAMA::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Algorithm-Diff-JSON-1.000">Algorithm-Diff-JSON</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>find the differences between two lists and report on them in JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libavro_c-0.01">Alien-libavro_c</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libavro_c, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libgraphqlparser-0.01">Alien-libgraphqlparser</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libgraphqlparser, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libjansson-0.01">Alien-libjansson</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libjansson, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libmariadbclient-0.01">Alien-libmariadbclient</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libmariadbclient, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-librdkafka-0.01">Alien-librdkafka</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>librdkafka, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libsnappy-0.01">Alien-libsnappy</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libsnappy, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libzookeeper-0.02">Alien-libzookeeper</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.02</td>
<td>libzookeeper, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/Amazon-SNS-V4-1.4">Amazon-SNS-V4</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1.4</td>
<td>Amazon Simple Notification Service, V4 Signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TANIGUCHI/Amon2-Auth-Site-LINE-0.01">Amon2-Auth-Site-LINE</a></td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>0.01</td>
<td>LINE integration for Amon2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Ansible-Util-0.001">Ansible-Util</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Utilities for interacting with Ansible.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-UI-0.01">App-Device-Chip-UI</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Tickit-based UI for Device::Chip drivers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaInstall-0.001">App-GhaInstall</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides the gha-install command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaProve-0.001">App-GhaProve</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides gha-prove app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-GrepUtils-0.001">App-GrepUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to the Unix command 'grep'</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-Tables-CLI-0.003">App-Tables-CLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Manipulate Tables::* modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.01">App-ansicolumn</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>ANSI sequence aware column command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-colortheme-0.001">App-lcpan-CmdBundle-colortheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-lupapona-1">App-lupapona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>a simple static Gemini server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-mokupona-2.01">App-mokupona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>2.01</td>
<td>a feed aggregator for Gopher, Gemini, RSS and Atom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HKOBA/App-oo_modulino_zsh_completion_helper-0.01">App-oo_modulino_zsh_completion_helper</a></td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>0.01</td>
<td>provides zsh completion for OO-Modulinos</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-optex-xform-1.01">App-optex-xform</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>data transform filter module for optex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-phoebe-1.1">App-phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1.1</td>
<td>an app that serves a wiki as a Gemini and web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-LMDB-0.000_01">AtteanX-Store-LMDB</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>LMDB-based RDF store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRIANG/BRIANG-Dist-Perfect-0.01-TRIAL">BRIANG-Dist-Perfect</a></td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>0.01</td>
<td>A perfect distribution for a perfect year. Or perhaps not.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-AppSorted-0.001">Bencher-Scenario-AppSorted</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark sorted vs is-sorted</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-StringSimpleEscape-0.001">Bencher-Scenario-StringSimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark String::SimpleEscape</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/Config-MorePerl-1.2.0">Config-MorePerl</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.2.0</td>
<td>Convenient and flexible config loader in perl format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VANSTYN/DBIx-Class-StateMigrations-0.001">DBIx-Class-StateMigrations</a></td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>0.001</td>
<td>Schema migrations via checksums instead of versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-TCS3472x-0.01">Device-Chip-TCS3472x</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for TCS3472x-family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SHLOMIF/File-ShouldUpdate-0.0.1">File-ShouldUpdate</a></td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>0.0.1</td>
<td>should files be rebuilt?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Genealogy-ObituaryDailyTimes-0.01">Genealogy-ObituaryDailyTimes</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Compare a Gedcom against the Obituary Daily Times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenTable-0.001">Health-BladderDiary-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Linux-Utils-0.001">Linux-Utils</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Miscellaneous utilities for Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-Output-Test-Counter-0.001">Log-ger-Output-Test-Counter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Increase internal counter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseDataDumperCompact-0.001">Log-ger-UseDataDumperCompact</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Dumper::Compact to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRIBUSER/Minio-0.02">Minio</a></td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MONSTAR/Mojolicious-Plugin-MoreHelpers-0.02">Mojolicious-Plugin-MoreHelpers</a></td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>0.02</td>
<td>More helpers lacking in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Net-Camera-Sercomm-ICamera2-0.01">Net-Camera-Sercomm-ICamera2</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>Perl Interface for Sercomm ICamera2 network camera</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-PKCE-0.001">Net-OAuth2Server-PKCE</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A PKCE extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dBase-0.01">Net-SNMP-Mixin-NXOSDot1dBase</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for some Bridge base values from NXOS switches.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dStp-0.01">Net-SNMP-Mixin-NXOSDot1dStp</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1D spanning tree information from Cisco NXOS devices.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1qFdb-0.01">Net-SNMP-Mixin-NXOSDot1qFdb</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1-Q switch forwarding databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZMUGHAL/Orbital-Transfer-0.001">Orbital-Transfer</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>Software project manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Package-Role-ini-0.02">Package-Role-ini</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.02</td>
<td>Perl role for "ini" object the returns a Config::IniFiles object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock-0.01">Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not "return" in "do" block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ProhibitOrReturn-0.01">Perl-Critic-Policy-ProhibitOrReturn</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not use `or return`</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Perl-LineNumber-Comment-0.001">Perl-LineNumber-Comment</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add line number to Perl source as comment</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HMBRAND/PerlIO-via-xz-0.02">PerlIO-via-xz</a></td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>0.02</td>
<td>PerlIO layer for XZ (de)compression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEODESIAN/Playwright-0.001">Playwright</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>Perl client for Playwright</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CRAIGKAI/RT-Extension-ToggleTheme-0.02">RT-Extension-ToggleTheme</a></td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>0.01</td>
<td>RT-Extension-ToggleTheme Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-DzilBuild-0.003">Require-Hook-Source-DzilBuild</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Load module source code from Dist::Zilla build files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-MetaCPAN-0.002">Require-Hook-Source-MetaCPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Load module source code from MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Tables-0.001">Sah-Schemas-Tables</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to the Tables module family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/String-Binary-Interpolation-1.0.0">String-Binary-Interpolation</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v1.0.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/String-SimpleEscape-0.001">String-SimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Simple string escaping &amp; unescaping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-Quotes-JamesFT-0.001">Tables-Quotes-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-WordList-0.001">Tables-WordList</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Table from a WordList module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-ExpectAndCheck-0.01">Test-ExpectAndCheck</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>expect/check-style unit testing with object methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-Future-IO-0.01">Test-Future-IO</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>unit testing on Future::IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/Text-Conceal-0.99">Text-Conceal</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>conceal and recover interface for text processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASB/Tk-Zinc-3.304">Tk-Zinc</a></td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>3.304</td>
<td>a canvas offering groups, tranformations, transparency, color gradient…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-Corncob-0.001">WordList-EN-Corncob</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Corncob word list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-Phrase-EN-Quote-JamesFT-0.001">WordList-Phrase-EN-Quote-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Famous quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DMOL/XS-libpanda-backtrace-1.0.0">XS-libpanda-backtrace</a></td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>v1.0.0</td>
<td>C++ runtime backtraces library for XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Zydeco-Lite-App-0.001">Zydeco-Lite-App</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>use Zydeco::Lite to quickly develop command-line apps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/notice-0.01">notice</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Breaking-Change Acknowledgement Enforcement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOCHSTEN/rdf-ldf-0.251">rdf-ldf</a></td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>0.251</td>
<td>Linked Data Fragments client</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>73</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ColorThemed PERLANCAR 0.002 Modules that has color theme support Acme-CPANModules-Getopt PERLANCAR 0.002 Modules that parse command-line options Acme-CPANModules-ModulesThatJustContainData PERLANCAR 0.001 Modules that just contain data Acme-Marvel-CinematicUniverse-Characters TOBYINK 0.001 example of distributing instance data on CPAN Acme-TOMOYAMA-Utils TOMOYAMA 0.01 The great new Acme::TOMOYAMA::Utils! Algorithm-Diff-JSON DCANTRELL 1.000 find the differences between two lists … <a href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1929</id>
    <published>2020-12-04T09:47:51Z</published>
    <updated>2020-12-04T09:47:51Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>FOSDEM 2021: Call for papers open</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem-2021-call-for-papers"/>
  <id>tag:news.perlfoundation.org,2020-12-04:/post/fosdem-2021-call-for-papers</id>
  <published>2020-12-04T08:45:39</published>
  <updated>2020-12-04T08:45:39</updated>
  <summary>
  <![CDATA[
     About FOSDEM Perl and Raku have taken part in the annual free FOSDEM event for many years and we have now been accepted for a virtual devroom in 2021. There is no registration, but attendees must follow FOSDEM code of conduct and for the first time this year the event will be on-line. We are now calling for papers for talks in our virtual devroom. CfP Deadlines Submission deadline: **Dec 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Hackathons" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>About FOSDEM</h2>

<p>Perl and Raku have taken part in the annual free <a href="https://fosdem.org/2021/">FOSDEM</a> event for many years and we have now been accepted for a virtual devroom in 2021.</p>

<p>There is no registration, but attendees must follow <a href="https://fosdem.org/2021/practical/conduct/">FOSDEM code of conduct</a> and for the first time this year the event will be on-line.</p>

<p>We are now calling for papers (CfP) for talks in our virtual devroom.</p>

<h2>CfP Deadlines</h2>

<ul>
<li>Submission deadline: <strong>Dec 23rd, 2020</strong></li>
<li>Selected talks announced by <strong>Dec 31st, 2020</strong></li>
<li>Conference dates <strong>6 &amp; 7 February 2021</strong> online</li>
<li>Perl &amp; Raku devroom taking place on <strong>Saturday February 2021</strong>.</li>
<li>Talk video submission: <strong>mid-January</strong>.</li>
</ul>

<h2>What kind of talks we're interested in</h2>

<p>The main topic of the room will be "Perl&amp;Raku in a world in flux", and the open call for papers will include the following topics:</p>

<ul>
<li>data science</li>
<li>infrastructure as code</li>
<li>virtualization and containers</li>
<li>development practices</li>
<li>teaching</li>
<li>data munging</li>
<li>data storage</li>
<li>interfacing Perl &amp; Raku to the rest of the world</li>
<li>testing, continuous integration and continuous development best practices</li>
<li>Perl, Raku and other scripting languages, what they can learn from each other</li>
</ul>

<h3>Talk details</h3>

<ul>
<li>The default duration for talks is about 45 minutes including discussion. 
<ul>
<li>Please select the most suitable duration for your talk, excluding Q&amp;A.</li>
</ul></li>
<li>Talks will be pre-recorded in advance, and streamed during the event. This means that you should be ready to submit your recorded talk by mid-January.
<ul>
<li>⚠️ Presentations has to be pre-recorded and submited by mid-January⚠️. Your whole talk needs to be ready by then</li>
</ul></li>
<li>The reference time will be Brussels local lime (CET).</li>
<li>Q/A session will be live, so you need to be present when your presentation is aired to take these questions.</li>
<li>Attendees will be able to chat, and will also have a way to submit questions.</li>
<li>Food and drinks is now allowed during the talks, but you are responsible for cleaning your own space. 
<ul>
<li>If you don't, we'll call your roommates and they will change the password for the WiFi to punish you.</li>
</ul></li>
</ul>

<h2>Submit your talk!</h2>

<p>All submissions for devrooms are made through the FOSDEM <a href="https://penta.fosdem.org/submission/FOSDEM21/">Pentabarf submission site</a> - you need to register, in case you haven't done so already. 
- Select the "Perl and Raku devroom" as the track for your "event", which is FOSDEMspeak for talk. 
- Add all the info requested and whatever you think it's necessary for us to select it for FOSDEM. 
- Please remember to include your time zone in your bio or where you think it's reasonable so that we can schedule your talk accordingly.</p>

<h2>We need volunteers!</h2>

<p>If you want to help with selecting the talks, helping speakers, reviewing talks once they're ready, just let us know!</p>

<h2>Get in touch</h2>

<p>If you have questions, contact:
- JJ Merelo <a href="&#x6D;&#x61;&#x69;&#x6C;&#x74;&#x6F;:&#106;&#x6A;&#x6D;&#x65;&#114;&#101;&#108;&#x6F;&#64;&#x67;&#x6D;&#x61;&#105;l&#x2E;c&#111;m">&#106;&#x6A;&#x6D;&#x65;&#114;&#101;&#108;&#x6F;&#64;&#x67;&#x6D;&#x61;&#105;l&#x2E;c&#111;m</a> 
- Stuart Mackintosh <a href="&#x6D;&#x61;&#x69;l&#116;&#x6F;:&#x73;&#x74;&#117;a&#x72;&#x74;&#64;&#x70;&#101;&#x72;&#x6C;&#x66;&#111;&#x75;&#x6E;&#x64;&#97;&#x74;&#105;&#x6F;&#x6E;&#x2E;&#111;&#x72;&#103;">&#x73;&#x74;&#117;a&#x72;&#x74;&#64;&#x70;&#101;&#x72;&#x6C;&#x66;&#111;&#x75;&#x6E;&#x64;&#97;&#x74;&#105;&#x6F;&#x6E;&#x2E;&#111;&#x72;&#103;</a>.</p>

<p>You can also get in touch with us:</p>

<ul>
<li>via IRC at #raku on Freenode </li>
<li>in our #FOSDEM Slack channel
<ul>
<li>through this share link available for 7 days: https://join.slack.com/share/zt-jv3d9yec-2Ub7~dYc6kHMff2r9jMqWg?cdn_fallback=1</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
</feed>
