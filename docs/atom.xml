<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-03-13T10:20:35Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>#607 - The Perl Planetarium</title>
    <link rel="alternate" href="https://perlweekly.com/archive/607.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In the previous newsletter Mohammad included a blog post of Dave Cross about the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>, but I think it is worth another highlighting. It is an excellent way to follow what's going on in and around Perl on a daily basis. Now also including commits to the source code of Perl and questions on Stack overflow. I've also opened two issues asking Dave to allow the user to filter the messages based on source and to color-code the sources. Something one of you could implement in the front-end.</p>
<p>A couple of days ago I saw <a href="https://www.facebook.com/curtis.poe/posts/pfbid02TKsTS9KQi9TbW7hH2gmUNwm1dDJ387TquNkiUR5CCj3kfdmQM9C7RkHXusmUHN2Jl">a post on Facebook</a> by Curtis Ovid Poe and then <a href="https://www.facebook.com/groups/perlprogrammers/posts/6296612980371437/">Will Braswell reposted it</a>. The rant was on why Perl is dying. Basically Ovid says that Perl lags behind the more popular languages adopting new features. Including features that were available to some other languages 10-20-40 years ago. Predictably some people jumped on blaming the Perl 6 effort. Others pointed out the lack of volunteers. The lack of outreach. The missing modules from the standard libraries.</p>
<p>Some very interesting comment, but you might need to be Facebook account to be able to read them. Sorry for that.</p>
<p>While preparing a blog post I searched GitHub for repositories written in Perl and then it gave me the idea to check out the other languages and got this table on <a href="https://dev.to/szabgab/the-most-popular-programming-languages-on-github-2i6b">The most popular programming languages on GitHub</a>. I posted the link to the Perl programmers group on Facebook. They did not like the numbers.</p>
<p>Here is an idea to make GitHub better for Perl projects: The dependabot helps developers keep their dependencies up-to-date. As far as I can tell it does <a href="https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem">not support Perl.</a>. However, it's <a href="https://github.com/dependabot/">source code is on GitHub</a> so interested parties could probaly add this support. Let me know when it becomes available so I can try it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/607.html</id>
    <published>2023-03-13T10:00:00Z</published>
    <updated>2023-03-13T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75718895</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Perl statement seems executed, but somehow is not</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="conditional-statements"/>
            <category scheme="https://stackoverflow.com/tags" term="optional-parameters"/>
        <author>
            <name>U. Windl</name>
            <uri>https://stackoverflow.com/users/6607497</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75718895/perl-statement-seems-executed-but-somehow-is-not"/>
        <published>2023-03-13T07:10:23Z</published>
        <updated>2023-03-13T09:53:49Z</updated>
        <summary type="html">
            &lt;p&gt;Possibly this is a stupid question, but I fail to see the problem (while assuming there must be one):&lt;/p&gt;
&lt;p&gt;I wrote some code; here's an extract:&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;use Getopt::Std;
my %options;
if (getopts('hty', \%options)) {
    my @opts = split(//, 'hty');

    @options{@opts} = (1, 1, 1)
        if (scalar (grep { defined } @options{@opts}) == 0);
    something()
      if ($options{'h'});
    #...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The intention of the code is to define all three options as set if none of the three options was set.
However the code seems to be executed even of one option was set (&lt;code&gt;-h&lt;/code&gt;), but also the final value is not what I expected.
See this fragment of a debugger session:&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;DB&amp;lt;2&amp;gt; x %options
0 'h'
1 1
####: so `-h` was set
DB&amp;lt;3&amp;gt; n
main::(otptest.pl:298): if (scalar (grep { defined } @options{@opts}) == 0);
DB&amp;lt;3&amp;gt; n
main::(otptest.pl:297): @options{@opts} = (1, 1, 1)
###: surprisingly the assignment seems to be executed as well
DB&amp;lt;3&amp;gt; x %options
0 'y'
1 undef
2 'h'
3 1
4 't'
5 undef
###: However at the end the values are not `1` as expected, but `undef`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously the program logic is broken by that behavior.
Where is the bug?
Could it be a bug in Perl 5.18.2 itself?&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Perl Weekly #607 - The Perl Planetarium</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-607-the-perl-planetarium-4hcd" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/607.html"&gt;Perl Weekly 607&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;In the previous newsletter Mohammad included a blog post of Dave Cross about the &lt;a href="https://perl.theplanetarium.org/"&gt;Perl Planetarium&lt;/a&gt;, but I think it is worth another highlighting. It is an excellent way to follow what's going on in and around Perl on a daily basis. Now also including commits to the source code of Perl and questions on Stack overflow. I've also opened two issues asking Dave to allow the user to filter the messages based on source and to color-code the sources. Something one of you could implement in the front-end.&lt;/p&gt;

&lt;p&gt;A couple of days ago I saw &lt;a href="https://www.facebook.com/curtis.poe/posts/pfbid02TKsTS9KQi9TbW7hH2gmUNwm1dDJ387TquNkiUR5CCj3kfdmQM9C7RkHXusmUHN2Jl"&gt;a post on Facebook&lt;/a&gt; by Curtis Ovid Poe and then &lt;a href="https://www.facebook.com/groups/perlprogrammers/posts/6296612980371437/"&gt;Will Braswell reposted it&lt;/a&gt;. The rant was on why Perl is dying. Basically Ovid says that Perl lags behind the more popular languages adopting new features. Including features that were available to some other languages 10-20-40 years ago. Predictably some people jumped on blaming the Perl 6 effort. Others pointed out the lack of volunteers. The lack of outreach. The missing modules from the standard libraries.&lt;/p&gt;

&lt;p&gt;Some very interesting comment, but you might need to be Facebook account to be able to read them. Sorry for that.&lt;/p&gt;

&lt;p&gt;While preparing a blog post I searched GitHub for repositories written in Perl and then it gave me the idea to check out the other languages and got this table on &lt;a href="https://dev.to/szabgab/the-most-popular-programming-languages-on-github-2i6b"&gt;The most popular programming languages on GitHub&lt;/a&gt;. I posted the link to the Perl programmers group on Facebook. They did not like the numbers.&lt;/p&gt;

&lt;p&gt;Here is an idea to make GitHub better for Perl projects: The dependabot helps developers keep their dependencies up-to-date. As far as I can tell it does &lt;a href="https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem"&gt;not support Perl.&lt;/a&gt;. However, it's &lt;a href="https://github.com/dependabot/"&gt;source code is on GitHub&lt;/a&gt; so interested parties could probaly add this support. Let me know when it becomes available so I can try it.&lt;/p&gt;

&lt;p&gt;Enjoy your week!&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Gabor Szabo.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/tprfmarketing/2023/03/call-for-papers-tprc-2023.html"&gt;Call for Papers. TPRC 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Submission deadline is March 31 Midnight UTC.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://ovid.github.io/articles/the-future-of-perl.html"&gt;The Future of Perl&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/08/windows-paths/"&gt;Windows paths&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/03/regexpassemble---weekly-travelling-in-cpan.html"&gt;Regexp::Assemble - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/11/release-time/"&gt;Release time!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Data::Resolver now includes the new object-oriented interface; Template::Perlish is now at version 1.60. Last, thanks to the infaticable djerius, a lot of bugs were unearthed for App::Easer and are now hopefully fixed.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/yukikimoto/spvm-now-supports-object-oriented-programming-in-perl-5ghp"&gt;SPVM now supports object-oriented programming in Perl&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Yuki has been writing about SPVM for ages, but I have not seen anyone else writing about it. Have you given it a try? What is it? What do you think?&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a"&gt;Perl Interview question and answers 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;On one hand I am glad someone still thinks that Perl interview questions are a good blog post today, on the hand,... well, I am not sure that these question would be that useful and the answers would be acceptable.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/12/romeo-xxd/"&gt;Romeo - xxd&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Stack Overflow
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://stackoverflow.com/questions/75715549/how-do-you-use-globbing-in-perl-for-a-one-liner-with-many-files-avoiding-xargs"&gt;How do you use globbing in perl for a one-liner with many files, avoiding xargs/find/etc&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is an interesting question. I was wondering about this when I was blogging about some Perl one-liner that also used the bash file globbing. How would that work on OS-es that don't support globbing on the command line.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://stackoverflow.com/questions/75705451/perl-exclude-words-with-pattern"&gt;Perl exclude words with pattern&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Perl has a utility to convert a sed command to Perl. This post goes the other way. Answers a Perl-related question using sed. It is sort of funny and sad.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://stackoverflow.com/questions/75711624/unable-to-connect-to-db-after-passing-arguments-getting-error-as-invalid-argume"&gt;Unable to connect to db after passing arguments. Getting error as Invalid argument values&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://stackoverflow.com/questions/75704257/grep-from-a-substring-to-find-the-match-string"&gt;grep from a substring to find the match string&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The user is basically asking how to use grep of Perl.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://stackoverflow.com/questions/75710110/can-i-convert-php-code-to-perl-in-a-semi-automated-way"&gt;Can I Convert PHP Code to Perl in a Semi-Automated Way?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Will someone ask ChatGPT to do it?&lt;/p&gt;




&lt;h2&gt;
  
  
  Perl
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-100.html"&gt;This week in PSC (100)&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/guest-contribution/"&gt;The Weekly Challenge - Guest Contributions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The full report for the weekly challenge will be added to the online version of the Perl weekly later today or tomorrow.&lt;/p&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dlxxv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  The corner of Gabor
&lt;/h2&gt;

&lt;p&gt;A couple of entries sneaked in by Gabor.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/finding-projects-on-github-topics-languages-and-collections-2cii"&gt;Finding projects on GitHub: Topics, Languages, and Collections&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Events
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.papercall.io/tprctor23"&gt;The Perl and Raku Conference 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Toronto, Ontario, Canada from July 11-13, 2023.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://boston-pm.github.io/#schedule"&gt;Boston PM : Corinna, feature class, Object::Pad - Paul 'LeoNerd' Evans (live; with Ovid on tape delay)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tuesday Mar 14th, 2022 06:30 PM Eastern Time (US and Canada)&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/jx8"&gt;Perl to Node Cross-training? Yes Please! UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/4n5"&gt;Bold, beautiful, and… brainy? Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With all the knowledge in your big, beautiful brain, it’s time to join a company that appreciates your breadth of experience. Our client provides online trading services and with offices in Dubai, Malta, and Malaysia, they’ve got the global reach that may provide the challenge you’re looking for. They know that a seasoned Perl pro is just what their team needs, and that’s where you come in!&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/17j"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-607-the-perl-planetarium-4hcd</id>
    <published>2023-03-13T09:25:48Z</published>
    <updated>2023-03-13T09:25:48Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75718470</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">get user input and print into file</title>
            <category scheme="https://stackoverflow.com/tags" term="arrays"/>
            <category scheme="https://stackoverflow.com/tags" term="loops"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>walker</name>
            <uri>https://stackoverflow.com/users/21255401</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75718470/get-user-input-and-print-into-file"/>
        <published>2023-03-13T06:00:41Z</published>
        <updated>2023-03-13T06:00:41Z</updated>
        <summary type="html">
            &lt;p&gt;I would like to add a feature in below code to check if both fruit and info input provided by user in cmd exist in the file. Meanwhile to fullfill 3 requirements below, first and second are completed with code below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the fruit provided in cmd line not exist in file, then add it in with the info provided.&lt;/li&gt;
&lt;li&gt;If the fruit provided in cmd already exist in file, then add in info provided into it. Info 1 is mapping fruit1&lt;/li&gt;
&lt;li&gt;If both fruit and info provided in cmd already exist in file, skip it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cmd: &lt;code&gt;&amp;lt;script&amp;gt; -fruit apple,orange,jackfruit -info &amp;lt;info1&amp;gt;,&amp;lt;info2&amp;gt;,&amp;lt;info3&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   use strict;
    use warnings;
    use Tie::File;
    my $help=0;
    my $info;
    my $fruit;
    use Getopt::Long;

if (! GetOptions(
     &amp;quot;fruit=s&amp;quot; =&amp;gt; \$fruit,
     &amp;quot;info=s&amp;quot; =&amp;gt; \$info,  
)){
  print &amp;quot;\nEntered Arguments are not enough!\nPlease Use Switch '-help' or '-h' For More Information.\n&amp;quot;;
   exit;
}

my $split_info;
my $split_fruit;
my @split_info = split(',', $info);
my @split_fruit = split(',', $fruit);

my %new_data;
@new_data{@split_fruit}=@split_info;


tie my @file, 'Tie::File', &amp;quot;/nfs/site/disks/ipg_da_00003/ip7nm/sungyuan/script/regression_indicator/testing/2022.12.SP1/config.txt&amp;quot; or die $!;

for (0 .. $#file) {
    next if /^\s/;

    if (exists $new_data{$file[$_]}) {
      splice @file, $_ + 1, 0, &amp;quot;\t$new_data{$file[$_]}\n&amp;quot;;
      # Delete our current key/value pair from the hash
      delete $new_data{$file[$_]};
    }
}

# For each key left in the hash...
for (keys %new_data) {
  # Push two new lines into our tied file array
  # (This adds new lines to the end of the file)
  push @file, &amp;quot;$_\n&amp;quot;, &amp;quot;\t$new_data{$_}\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry>
    <title>Romeo - slice</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/13/romeo-slice/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://codeberg.org/polettix/Romeo">Romeo</a> now has a couple of <strong>slicing</strong> features.</p>
</blockquote>

<p>I sometimes have to manipulate a series of records from a database,
usually coming as a JSON-encoded array, where I’m actually only interested
into a subset of the data. This is when <em>slicing</em> comes handy, allowing to
pick only the interesting parts and leave the rest out.</p>

<p>So far I used <a href="https://stedolan.github.io/jq/">jq</a>, which still is an awesome tool for doing a lot of
creative transformations on JSON data. And yet the <em>slicing</em> capabilities
still come handy.</p>

<p>So, for the following examples, let’s assume that our input comes from file
<code class="language-plaintext highlighter-rouge">data.json</code>, with the following data inside:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
   </span><span class="p">{</span><span class="w">
      </span><span class="nl">"foo"</span><span class="p">:</span><span class="w"> </span><span class="s2">"just a string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"goo'''"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bar"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"array"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"one"</span><span class="p">,</span><span class="w"> </span><span class="s2">"two"</span><span class="p">,</span><span class="w"> </span><span class="s2">"three"</span><span class="w"> </span><span class="p">],</span><span class="w">
      </span><span class="nl">"hash"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
         </span><span class="nl">"sub-hash"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"baz"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is important"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"galook"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is not"</span><span class="w">
         </span><span class="p">},</span><span class="w">
         </span><span class="nl">"other-stuff"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">],</span><span class="w">
         </span><span class="nl">"then"</span><span class="p">:</span><span class="w"> </span><span class="s2">"other data"</span><span class="w">
      </span><span class="p">}</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="p">{</span><span class="w">
      </span><span class="nl">"foo"</span><span class="p">:</span><span class="w"> </span><span class="s2">"JUST A STRING"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"goo'''"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BAR"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"array"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"ONE"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TWO"</span><span class="p">,</span><span class="w"> </span><span class="s2">"THREE"</span><span class="w"> </span><span class="p">],</span><span class="w">
      </span><span class="nl">"hash"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
         </span><span class="nl">"sub-hash"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"baz"</span><span class="p">:</span><span class="w"> </span><span class="s2">"THIS IS IMPORTANT"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"galook"</span><span class="p">:</span><span class="w"> </span><span class="s2">"THIS IS NOT"</span><span class="w">
         </span><span class="p">},</span><span class="w">
         </span><span class="nl">"then"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OTHER DATA"</span><span class="w">
      </span><span class="p">}</span><span class="w">
   </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>We have fancy keys with single quotes, as well as some missing data (the
second record misses <code class="language-plaintext highlighter-rouge">other-stuff</code> inside <code class="language-plaintext highlighter-rouge">hash</code>).</p>

<h2 id="starting-simple-the-command-line">Starting simple: the command line</h2>

<p>At the basic level, <code class="language-plaintext highlighter-rouge">romeo slice</code> provides us the possibility to use the
same paths as available in <a href="https://metacpan.org/pod/Template::Perlish">Template::Perlish</a>, which is one of my most
beloved modules. This just works:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json foo hash.then
[
   {
      "foo" : "just a string",
      "hash" : {
         "then" : "other data"
      }
   },
   {
      "foo" : "JUST A STRING",
      "hash" : {
         "then" : "OTHER DATA"
      }
   }
]
</code></pre></div></div>

<p>The data I come across rarely has weird characters inside, so this Just
Works. In the <a href="https://www.perl.org/">Perl</a> spirit of making hard things possible, though, also
complex keys are supported with some help from quoting:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json "\"goo'''\"" hash.'"other-stuff"'
[
   {
      "goo'''" : "bar",
      "hash" : {
         "other-stuff" : [
            1,
            2,
            3
         ]
      }
   },
   {
      "goo'''" : "BAR",
      "hash" : {
         "other-stuff" : null
      }
   }
]
</code></pre></div></div>

<p>The slicing <em>created</em> some inexistent data, which might be useful or not.
It’s possible to skip non-existing data entirely with option <code class="language-plaintext highlighter-rouge">-s</code>/<code class="language-plaintext highlighter-rouge">--skip</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json "\"goo'''\"" hash.'"other-stuff"' --skip
[
   {
      "goo'''" : "bar",
      "hash" : {
         "other-stuff" : [
            1,
            2,
            3
         ]
      }
   },
   {
      "goo'''" : "BAR"
   }
]
</code></pre></div></div>

<h2 id="renaming-stuff">Renaming stuff</h2>

<p>Sometimes we would just like to have a <em>summary</em>, cherry-picking stuff in a
complex data structure and having it all in a plain hash with everything at
the top level.</p>

<p>To help with this, the path definition allows <em>renaming</em>, by supporting a
syntax like <code class="language-plaintext highlighter-rouge">dst:src</code> or “dst=src`, like in the following example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json "just_goo:\"goo'''\"" other:hash.'"sub-hash"'.baz
[
   {
      "just_goo" : "bar",
      "other" : "this is important"
   },
   {
      "just_goo" : "BAR",
      "other" : "THIS IS IMPORTANT"
   }
]
</code></pre></div></div>

<p>As a shorthand, it’s possible to just request the name of the last part of
the path with character <code class="language-plaintext highlighter-rouge">@</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json foo @:hash.'"sub-hash"'.baz
[
   {
      "baz" : "this is important",
      "foo" : "just a string"
   },
   {
      "baz" : "THIS IS IMPORTANT",
      "foo" : "JUST A STRING"
   }
]
</code></pre></div></div>

<p>The <em>destination</em> string is a path on itself, so it’s possible to move stuff
around:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json some.where:foo some.there:hash.'"sub-hash"'.baz
[
   {
      "some" : {
         "there" : "this is important",
         "where" : "just a string"
      }
   },
   {
      "some" : {
         "there" : "THIS IS IMPORTANT",
         "where" : "JUST A STRING"
      }
   }
]
</code></pre></div></div>

<h2 id="moving-on-extracting-the-same-slice-over-and-over">Moving on: extracting the same slice over and over</h2>

<p>If our extraction needs are to be repeated in time, it just makes sense to
save the slice definitions inside a file and reuse it over and over.</p>

<p>As we already saw, each definition is a mapping from a source to a
destination, which can be represented in JSON like this, saved in file
<code class="language-plaintext highlighter-rouge">def01.json</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
    { "dst": ["some", "where"], "src": ["foo"] },
    { "dst": ["some", "there"], "src": ["hash", "sub-hash", "baz"] }
]
</code></pre></div></div>

<p>The nice thing about it is that with the expanded array form we don’t need
the fancy quoting any more and just use the keys.</p>

<p>Here’s the result of applying the slicing, loading it with option
<code class="language-plaintext highlighter-rouge">-d</code>/<code class="language-plaintext highlighter-rouge">--definition</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo slice -i data.json -d def01.json 
[
   {
      "some" : {
         "there" : "this is important",
         "where" : "just a string"
      }
   },
   {
      "some" : {
         "there" : "THIS IS IMPORTANT",
         "where" : "JUST A STRING"
      }
   }
]
</code></pre></div></div>

<p>In case of need, additional definitions can be provided using the option
multiple times, as well as providing direct slicing commands on the command
line like before (e.g. to add more data just for checking).</p>

<h2 id="interactive-selection">Interactive selection</h2>

<p>Slicing also allows interactively selecting the pieces of interest from the
first record, and then applying it to all records. This is done thanks to
<a href="https://metacpan.org/pod/Term::Choose">Term::Choose</a>, which is an amazing piece of code!</p>

<p>In the following <a href="https://asciinema.org/">asciinema</a> recording, after entering interactive mode:</p>

<ul>
  <li>moving is done with up/down keys</li>
  <li>selection of a row is done with the space bar</li>
  <li>completing the selection (including the currently highlighted row) is done
with the enter/return key</li>
</ul>

<script async="" id="asciicast-566840" src="https://asciinema.org/a/566840.js"/>

<h2 id="enough-for-today">Enough for today!</h2>

<p>So… I guess this should be enough for showcasing <a href="https://codeberg.org/polettix/Romeo">Romeo</a>’s sub-command
<code class="language-plaintext highlighter-rouge">slice</code>, see you next time and stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/13/romeo-slice/</id>
    <published>2023-03-13T06:00:00+01:00</published>
    <updated>2023-03-13T06:00:00+01:00</updated>
    <category term="perl"/>
    <category term="romeo"/>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75715549</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">How do you use globbing in perl for a one-liner with many files, avoiding xargs/find/etc</title>
            <category scheme="https://stackoverflow.com/tags" term="shell"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="glob"/>
        <author>
            <name>Joshua Goldberg</name>
            <uri>https://stackoverflow.com/users/411282</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75715549/how-do-you-use-globbing-in-perl-for-a-one-liner-with-many-files-avoiding-xargs"/>
        <published>2023-03-12T18:43:32Z</published>
        <updated>2023-03-13T04:33:44Z</updated>
        <summary type="html">
            &lt;p&gt;When there are too many matching files, shells like &lt;code&gt;bash&lt;/code&gt; break if you include a glob pattern on the commandline like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perl -pi -e 's/hi/bye/' too_many_files*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can work around this with &lt;code&gt;xargs&lt;/code&gt;, gnu &lt;code&gt;parallel&lt;/code&gt;, or &lt;code&gt;find&lt;/code&gt;, but for complex commands, these can be difficult to get right in terms of quoting, and they can also be less efficient than running &lt;code&gt;perl&lt;/code&gt; once.&lt;/p&gt;
&lt;p&gt;Is there a way to use &lt;code&gt;perl&lt;/code&gt;'s built-in globbing support for something like this? (which does not work)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perl -pi -e 's/hi/bye/' 'manyfiles*' # &amp;lt;-- Does not work.
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75705451</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Perl exclude words with pattern</title>
            <category scheme="https://stackoverflow.com/tags" term="bash"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="awk"/>
            <category scheme="https://stackoverflow.com/tags" term="sed"/>
        <author>
            <name>macder</name>
            <uri>https://stackoverflow.com/users/13409869</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75705451/perl-exclude-words-with-pattern"/>
        <published>2023-03-11T13:59:32Z</published>
        <updated>2023-03-12T20:31:27Z</updated>
        <summary type="html">
            &lt;p&gt;I have Filename which contains a lot of strings, but I need to cut only specific names and exclude other garbage from the string&lt;/p&gt;
&lt;p&gt;Example of File:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FAILED, see /release/jenkins/workspace/Build/RELEASE/logs/component.jdfmfh_value_javac10+.log
FAILED, see /release/jenkins/workspace/Build/RELEASE/logs/component.jadxfh_value_javac10+.log
FAILED, see /release/jenkins/workspace/Build/RELEASE/logs/component_value_javac10+.log
FAILED, see /release/jenkins/workspace/Build/RELEASE/logs/component_value_javac10+.log
FAILED, see /release/jenkins/workspace/Build/RELEASE/logs/component.jdfmfh_value_javac10+.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I need to get result like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;component.jdfmfh
component.jadxfh
component
component
component.jdfmfh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wrote small perl expression and got close result, but I don't know how to exclude all lines &lt;code&gt;_value_javac10+.log&lt;/code&gt; from there.&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;perl -pe 's/^.*\/logs\///;' Filename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;P.S. If there's a way to do it through the &lt;code&gt;sed&lt;/code&gt;, that works for me as well&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Perl Interview question and answers 2023</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Collection of resources for anyone preparing for a Perl programming interview. These frequently asked questions and their detailed answers&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/ec4458f6f26a</id>
    <published>2023-03-05T16:23:53Z</published>
    <updated>2023-03-12T14:51:22.968000Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="perl-programming"/>
    <category term="interview-questions"/>
    <category term="perl-interview-questions"/>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75711624</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Unable to connect to db after passing arguments. Getting error as Invalid argument values</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Coder</name>
            <uri>https://stackoverflow.com/users/18501494</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75711624/unable-to-connect-to-db-after-passing-arguments-getting-error-as-invalid-argume"/>
        <published>2023-03-12T07:24:33Z</published>
        <updated>2023-03-12T11:51:35Z</updated>
        <summary type="html">
            &lt;p&gt;After compilation I am getting error as . It is printing user , name and password detail after that getting error as.&lt;/p&gt;
&lt;p&gt;failed: invalid argument value. Cannot connect to db.&lt;/p&gt;
&lt;p&gt;Even after passing the correct argument value it is taking only space and not the details which were passed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w

use warnings;
use strict;

use DBI;

sub routine {
  my (%data) = @_;

  my $user = $data{'db2_user'};

  my $name = $data{'db2_name'};

  my $password= $data{'db2_passwd'};

  print $user. &amp;quot;\n&amp;quot;. $name &amp;quot;\n&amp;quot;. $password. &amp;quot;\n&amp;quot;;

  my $dbh = DBI-&amp;gt;connect(&amp;quot;DBI: DB2: $name&amp;quot;, &amp;quot;$user&amp;quot;, &amp;quot;$password&amp;quot;) 
    or die (&amp;quot;Cannot connect to DB&amp;quot;);

}

# Main function

my $config_file;
my $details_file;

# Check number of argument on command line
if (@ARGV == 2) {
  $config_file=$ARGV[0];
  $details_file=$ARGV[1];
}
else {
  die &amp;quot;Usage

  The script reads two &amp;lt;config file&amp;gt;&amp;quot;;
}

open (my $input_fh, &amp;quot;&amp;lt;&amp;quot;, $details_file)
  or die &amp;quot;Cannot open config file: $!&amp;quot;;

my %data;

while (my $line = &amp;lt;$input_fh&amp;gt;) {
  chomp $line;

  if ($line =~  /^(\w+)\s\*=\s*(.*)$/) {
    $data{$1} = $2;
  }
}

close $input_fh;

routine (%data);

exit 0;
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/351ceb16a6ce2fb54d5a88bd12017b9e4f617466</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/351ceb16a6ce2fb54d5a88bd12017b9e4f617466"/>
    <title>
        sv.h - make unused bit more obvious with a comment.
    </title>
    <updated>2023-03-12T11:24:44Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;sv.h - make unused bit more obvious with a comment.

Dave M complained about the previous version of this,
this changes the line to just be a comment, with a
prefix common to other defines.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>The H Word</title>
    <link rel="alternate" href="https://dev.to/simongreennet/the-h-word-3neh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 207
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-207/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Keyboard Word
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given an array of words.</p>

<p>Write a script to print all the words in the given array that can be types using alphabet on only one row of the keyboard.</p>

<p>Let us assume the keys are arranged as per the standard QWERTY keyboard.</p>

<h3>
  
  
  My solution
</h3>

<p>This is pretty straight forward. Go through the list and find any values that match the regular expression <code>^(?:[qwertyuiop]+|[asdfghjkl]+|[zxcvbnm]+)$</code>. In Python, I use the <a href="https://peps.python.org/pep-0289/">for if</a> method to filter this list. In Perl, I use the <a href="https://perldoc.perl.org/functions/grep">grep</a> method.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py Hello Alaska Dad Peace
<span class="o">(</span><span class="s2">"Alaska"</span>,<span class="s2">"Dad"</span><span class="o">)</span>

<span class="nv">$ </span>./ch-1.py OMG Bye
<span class="o">()</span>
</code></pre>

</div>



<h3>
  
  
  Task 2: H-Index
</h3>

<h3>
  
  
  Task
</h3>

<p>You are given an array of integers containing citations a researcher has received for each paper.</p>

<p>Write a script to compute the researcher’s H-Index. For more information please checkout the <a href="https://en.wikipedia.org/wiki/H-index">wikipedia page</a>.</p>

<p>The H-Index is the largest number h such that h articles have at least h citations each. For example, if an author has five publications, with 9, 7, 6, 2, and 1 citations (ordered from greatest to least), then the author’s h-index is 3, because the author has three publications with 3 or more citations. However, the author does not have four publications with 4 or more citations.</p>

<h3>
  
  
  My solution
</h3>

<p>There are probably better ways of doing this, but I'm just brute forcing this. Like with many of these challenges, the sample size is so small that any improvements aren't going to provide any major gain.</p>

<p>Go from 1 to the length of the list (array in Perl), and check if there are at least that many items that are greater than or equal to that number.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 10 8 5 4 3
4

<span class="nv">$ </span>./ch-2.py 25 8 5 3 3
3
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/the-h-word-3neh</id>
    <published>2023-03-12T09:21:36Z</published>
    <updated>2023-03-12T09:21:36Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Romeo - xxd</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/12/romeo-xxd/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://codeberg.org/polettix/Romeo">Romeo</a> includes a stripped-down version of <a href="https://github.com/vim/vim/tree/master/src/xxd">xxd</a>.</p>
</blockquote>

<p>In <a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Fun with Romeo</a> I introduced… <a href="https://codeberg.org/polettix/Romeo">Romeo</a>, a little utility with a
pot-pourry of commands that can be packed together in a portable <a href="https://codeberg.org/polettix/Romeo/src/branch/main/romeo">bundle</a>.</p>

<p>Among other little utilities, I also included a very minimal subset of the
functionalities of <a href="https://github.com/vim/vim/tree/master/src/xxd">xxd</a>, a fantastic hex dumper that is distributed as an
ancillary program with the editor <a href="https://www.vim.org/">Vim</a>.</p>

<p>I only use it in good ol’ default mode, in <em>plain</em> mode and in <em>reverse
plain</em> mode. So, for good measure, the <code class="language-plaintext highlighter-rouge">xxd</code> sub-command of <a href="https://codeberg.org/polettix/Romeo">Romeo</a> only
supports options <code class="language-plaintext highlighter-rouge">-p</code>/<code class="language-plaintext highlighter-rouge">--plain</code> and <code class="language-plaintext highlighter-rouge">-r</code>/<code class="language-plaintext highlighter-rouge">--revert</code>; all other stuff (mainly
dealing with formatting) is intentionally left out to keep it very simple
and… because I never use(d) them!</p>

<p>A minimal set of examples:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="nb">printf</span> <span class="nv">abcABC</span> <span class="o">|</span> <span class="nv">romeo</span> <span class="nv">xxd</span>
<span class="mo">0000000</span><span class="p">:</span> <span class="mi">6162</span> <span class="mi">6341</span> <span class="mi">4243</span>                           <span class="nv">abcABC</span>

<span class="err">$</span> <span class="nb">printf</span> <span class="nv">abcABC</span> <span class="o">|</span> <span class="nv">romeo</span> <span class="nv">xxd</span> <span class="o">-</span><span class="nv">p</span>
<span class="mi">616263414243</span>

<span class="err">$</span> <span class="nb">printf</span> <span class="nv">abcABC</span> <span class="o">|</span> <span class="nv">romeo</span> <span class="nv">xxd</span> <span class="o">-</span><span class="nv">p</span> <span class="o">|</span> <span class="nv">romeo</span> <span class="nv">xxd</span> <span class="o">-</span><span class="nv">rp</span>
<span class="nv">abcABC</span>
</code></pre></div></div>

<p>It’s meant as a low-level tool, hence it will treat all its input as a
stream of octets and there’s no way of forcing an <em>encoding</em>. YMMV.</p>

<p>I hope you can have <a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Fun with Romeo</a> too, stay save!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/12/romeo-xxd/</id>
    <published>2023-03-12T06:00:00+01:00</published>
    <updated>2023-03-12T06:00:00+01:00</updated>
    <category term="perl"/>
    <category term="romeo"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/04ae22e365c6772adec7c4d5de0fbff3e3f823e0</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/04ae22e365c6772adec7c4d5de0fbff3e3f823e0"/>
    <title>
        locale.c: Split a static function in two
    </title>
    <updated>2023-03-11T23:43:32Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106911?s=30&amp;v=4"/>
    <author>
      <name>khwilliamson</name>
      <uri>https://github.com/khwilliamson</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;locale.c: Split a static function in two

A future commit will want to use just the first part of the function.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2382336803997880397</id>
    <published>2023-03-11T23:20:00.002+01:00</published>
    <updated>2023-03-11T23:20:52.007+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxv) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.78&lt;/strong&gt; on 2023-03-07, with 22 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.77 was 1 month, 18 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.060010" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060010&lt;/strong&gt; on 2023-03-10, with 14 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.060007 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/OLIVER"&gt;OLIVER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETHER/Class-Method-Modifiers-2.15" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Class::Method::Modifiers&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provides Moose-like method modifiers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.15&lt;/strong&gt; on 2023-03-05, with 29 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.15 was  before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.009" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.009&lt;/strong&gt; on 2023-03-09, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.007 was 25 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.1&lt;/strong&gt; on 2023-03-06, with 92 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.16.0 was 6 months, 29 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/TURNSTEP"&gt;TURNSTEP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.14" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.14&lt;/strong&gt; on 2023-03-06, with 31 votes&lt;/li&gt;  &lt;li&gt;Previous version: 5.13 was 2 months, 28 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.9001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.9001&lt;/strong&gt; on 2023-03-07, with 16 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.9000 was 2 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/DCANTRELL"&gt;DCANTRELL&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHANCOCK/Perl-Tidy-20230309" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20230309&lt;/strong&gt; on 2023-03-08, with 132 votes&lt;/li&gt;  &lt;li&gt;Previous version: 20221112 was 3 months, 27 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SHANCOCK"&gt;SHANCOCK&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/FERKI/Rex-1.14.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.14.1&lt;/strong&gt; on 2023-03-05, with 82 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.14.0 was 1 month, 6 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/FERKI"&gt;FERKI&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9695" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9695&lt;/strong&gt; on 2023-03-06, with 28 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.9694 was 3 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test-Simple-1.302193" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302193&lt;/strong&gt; on 2023-03-06, with 182 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.302192 was 1 month, 4 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Harness-1.000151" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000151&lt;/strong&gt; on 2023-03-08, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.000150 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Suite-0.000148" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000148&lt;/strong&gt; on 2023-03-05, with 39 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.000147 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2382336803997880397/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html" title="(cdxxxv) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3970470711935013068</id>
    <published>2023-03-11T23:15:00.000+01:00</published>
    <updated>2023-03-11T23:15:46.573+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlviii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/11 22:14:10 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PerlNitpick" target="_blank"&gt;App::PerlNitpick&lt;/a&gt; - change-suggester about insignificant details.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsOffice::Word::Template" target="_blank"&gt;MsOffice::Word::Template&lt;/a&gt; - generate Microsoft Word documents from Word templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::PiHole" target="_blank"&gt;WWW::PiHole&lt;/a&gt; - Perl interface to Pi-hole&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Combinatorics" target="_blank"&gt;Algorithm::Combinatorics&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Pod" target="_blank"&gt;App::Pod&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=119)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Table" target="_blank"&gt;Data::Table&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::SHA" target="_blank"&gt;Digest::SHA&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CopyFilesFromBuild" target="_blank"&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Pod2Readme" target="_blank"&gt;Dist::Zilla::Plugin::Pod2Readme&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeFromPod&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeMarkdownFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeMarkdownFromPod&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME" target="_blank"&gt;Email::MIME&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faker" target="_blank"&gt;Faker&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIME::Lite" target="_blank"&gt;MIME::Lite&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OAuth2" target="_blank"&gt;Mojolicious::Plugin::OAuth2&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Todoist" target="_blank"&gt;Net::Todoist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=132)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quiq" target="_blank"&gt;Quiq&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Nginx" target="_blank"&gt;Test::Nginx&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword::FromPerl" target="_blank"&gt;XS::Parse::Keyword::FromPerl&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3970470711935013068/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html" title="(dxlviii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6469708589936617524</id>
    <published>2023-03-11T23:13:00.002+01:00</published>
    <updated>2023-03-11T23:13:22.414+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2023-03-11 22:12:37 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75701690" target="_blank"&gt;Is it possible to use Smart::Comments:from&amp;lt;Perl5&amp;gt; in a raku program?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75705451" target="_blank"&gt;Perl exclude words with pattern&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75664984" target="_blank"&gt;Determine width in terminal of asian/japanese characters?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75669950" target="_blank"&gt;collision between objects and addition of onomatopoeias(splat)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75674827" target="_blank"&gt;How can I ask for the username and password only the first time I need it?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6469708589936617524/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6469708589936617524"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6469708589936617524"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxv-stackoverflow-perl-report.html" title="(dlxxv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/10d0401b58a644f4c0e4bd4bd865f8879edbe561</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/10d0401b58a644f4c0e4bd4bd865f8879edbe561"/>
    <title>
        Follow-up to commit 3c104c002976d9f30342f43f227a382f7dcd4466
    </title>
    <updated>2023-03-11T18:31:08Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Follow-up to commit 3c104c002976d9f30342f43f227a382f7dcd4466

Add Yves to the list in perlgov.pod too.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/df9da3a8974d3b082f402042fe817bfdba2bca37</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/df9da3a8974d3b082f402042fe817bfdba2bca37"/>
    <title>
        Fix some typos in comments
    </title>
    <updated>2023-03-11T14:31:55Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Fix some typos in comments&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/3c104c002976d9f30342f43f227a382f7dcd4466</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/3c104c002976d9f30342f43f227a382f7dcd4466"/>
    <title>
        Correct core team list oversight
    </title>
    <updated>2023-03-11T13:37:33Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/93371?s=30&amp;v=4"/>
    <author>
      <name>craigberry</name>
      <uri>https://github.com/craigberry</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Correct core team list oversight

Somehow we missed including Yves in this list, but the quickest
glance at p5p or the git log shows that he&amp;#39;s as hard core as the
core team gets.  He&amp;#39;s recently pointed out that not only is he
active but also wishes to be listed as such.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Release time!</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/11/release-time/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I’m in the middle of a few releases.</p>
</blockquote>

<p>I’ve been somehow <em>active</em> lately on CPAN, yay!</p>

<p><a href="https://metacpan.org/pod/Data::Resolver">Data::Resolver</a> now includes the new object-oriented interface; it’s
working, although not entirely <em>definitive</em> (as everything), as the
functional interface is still implemented on its own. Plans here are to
re-implement it leveraging the object-oriented one, or to deprecate it away.
Time will tell; in the meantime, this will hopefully spur some activity on
<a href="https://metacpan.org/pod/PDF::Collage">PDF::Collage</a>, which is <a href="https://metacpan.org/pod/Data::Resolver">Data::Resolver</a>’s main client.</p>

<p><a href="https://metacpan.org/pod/Template::Perlish">Template::Perlish</a> is now at version <code class="language-plaintext highlighter-rouge">1.60</code>. This is one my favourite
modules of mine, because it does what I need exactly the way I want. I can’t
believe it’s not used by anybody else! Well, I <em>do believe</em> it, as there’s a
plethora of templating modules in CPAN and I’m not the best at marketing.
Still… good job <em>past me</em>, your efforts are quite appreciated here in 2023 😁</p>

<p>Last, thanks to the infaticable <a href="https://github.com/djerius">djerius</a>, a lot of bugs were unearthed
for <a href="https://metacpan.org/pod/App::Easer">App::Easer</a> and are now hopefully fixed. I’ll wait the usual
roundtrip with <a href="https://cpantesters.org/">CPAN Testers</a> to get some feedback all around the
platforms, then I’ll release it; at the moment we’re still at the <a href="https://metacpan.org/release/POLETTIX/App-Easer-2.007-TRIAL">trial
phase</a>.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/11/release-time/</id>
    <published>2023-03-11T06:00:00+01:00</published>
    <updated>2023-03-11T06:00:00+01:00</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Korn Shell, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-03-11T00:00:00Z</published>
    <updated>2023-03-11T00:00:00Z</updated>
  </entry>
  <entry>
    <title>SPVM now supports object-oriented programming in Perl</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-now-supports-object-oriented-programming-in-perl-5ghp" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM"&gt;SPVM&lt;/a&gt; now supports object-oriented programming in Perl.&lt;/p&gt;

&lt;p&gt;One of the goals of SPVM is to realize object-oriented programming in Perl as a statically-typed language.&lt;/p&gt;

&lt;p&gt;To achieve this, it was necessary to understand object-oriented programming in Perl properly, and then to see how it could be realized in a statically-typed language, through a number of implementations.&lt;/p&gt;

&lt;p&gt;The first challenge is that no one knows if it can be done, because no programming language has ever realized Perl's object-oriented programming in a statically-typed language.&lt;/p&gt;

&lt;p&gt;It is a task that we do not even know if we can do.&lt;/p&gt;

&lt;p&gt;We were getting close to Perl's object-oriented way of doing things, but there was a lot of trial and error and backward-compatibility breaking.&lt;/p&gt;

&lt;p&gt;Last Saturday and Sunday, I came up with the final piece that would make SPVM object-oriented in Perl. And that is what I implemented this Monday. Then I applied it to &lt;a href="https://github.com/yuki-kimoto/SPVM-File-Spec"&gt;SPVM::File::Spec&lt;/a&gt; and &lt;a href="https://github.com/yuki-kimoto/SPVM-IO/tree/master/lib/SPVM/IO"&gt;SPVM::IO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please read the source code and you will see that SPVM's object orientation can be described in exactly the same way as Perl's object orientation.&lt;/p&gt;

&lt;h2&gt;
  
  
  Overview of SPVM's object orientation
&lt;/h2&gt;

&lt;p&gt;To understand SPVM's object orientation, &lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/lib/SPVM/Point3D.spvm"&gt;Point3D&lt;/a&gt; and &lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/lib/SPVM/Point.spvm"&gt;Point&lt;/a&gt; are good examples. Class::Accessor(::Fast), Moose/Moo-based implementations, Mojo::Base implementations, and implementations using bless. My personal feeling is that 90% of the time, these are the easiest to port to SPVM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Point {
  # Interfaces
  interface Stringable;
  interface Cloneable;

  # Fields
  has x : rw protected int;
  has y : rw protected int;

  # Class methods
  static method new : Point ($x = 0 : int, $y = 0 : int) {
    my $self = new Point;

    $self-&amp;gt;init($x, $y);

    return $self;
  }

  # Instance methods
  protected method init : Point ($x = 0 : int, $y = 0 : int) {
    $self-&amp;gt;{x} = $x;
    $self-&amp;gt;{y} = $y;
  }

  method clear : void () {
    $self-&amp;gt;{x} = 0;
    $self-&amp;gt;{y} = 0;
  }

  method clone : Point () {
    my $self_clone = Point-&amp;gt;new($self-&amp;gt;x, $self-&amp;gt;y);

    return $self_clone;
  }

  method to_string : string () {
    my $x = $self-&amp;gt;x;
    my $y = $self-&amp;gt;y;

    my $string = "($x,$y)";

    return $string;
  }
}

class Point3D extends Point {

  # Fields
  has z : rw protected int;

  # Class method
  static method new : Point3D ($x = 0 : int, $y = 0 : int, $z = 0 : int) {
    my $self = new Point3D;

    $self-&amp;gt;init($x, $y, $z);

    return $self;
  }

  protected method init : Point3D ($x = 0 : int, $y = 0 : int, $z = 0 : int) {
    $self-&amp;gt;SUPER::init($x, $y);
    $self-&amp;gt;{z} = $z;
  }

  method clear : void () {
    $self-&amp;gt;SUPER::clear;
    $self-&amp;gt;{z} = 0;
  }

  method clone : Point3D () {
    my $self_clone = Point3D-&amp;gt;new($self-&amp;gt;x, $self-&amp;gt;y, $self-&amp;gt;z);

    return $self_clone;
  }

  method to_string : string () {
    my $x = $self-&amp;gt;x;
    my $y = $self-&amp;gt;y;
    my $z = $self-&amp;gt;z;

    my $string = "($x,$y,$z)";

    return $string;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Symbolic Link Support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/yukikimoto/first-release-of-spvmresourcere2-resourcing-the-regular-expression-library-google-re2-2j5a"&gt;As we mentioned last week&lt;/a&gt;, this week &lt;a href="https://github.com/yuki-kimoto/SPVM-Sys/tree/sys"&gt;we are working on a portable, symbolic link implementation&lt;/a&gt; that also works on Windows. You can see our progress here. To implement this, the Perl &lt;a href="https://github.com/Perl/perl5/blob/blead/win32/win32.c"&gt;win32/win32.c&lt;/a&gt; source code would be greatly appreciated.&lt;/p&gt;

&lt;p&gt;Once the symbolic links are working, we can achieve a great deal of portability between Windows/Linux/Mac. I look forward to implementing a browser that works on Windows/Mac/Linux/Android/iPhone/iPad with SPVM on top of this. My goal is to have a working game within 5 years.&lt;/p&gt;

&lt;p&gt;Translated with &lt;a href="http://www.DeepL.com/Translator"&gt;www.DeepL.com/Translator&lt;/a&gt; (free version)&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-now-supports-object-oriented-programming-in-perl-5ghp</id>
    <published>2023-03-10T22:27:15Z</published>
    <updated>2023-03-10T22:27:15Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <title>This week in PSC (100)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-100.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11045</id>
    <published>2023-03-10T22:14:06Z</published>
    <updated>2023-03-10T22:14:54Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>All three of us met, and were joined by Pete Krawczyk who first wanted to discuss some TPRF-related issues.</p>

<p>Following on from this we discussed:</p>

<ul>
<li><p>Zefram's request to back out the strict-vs-VERSION changes. There's some merit here, he sent a PR to undo the whole thing. We feel there's two different issues that need looking at separately. Paul will explain some thoughts in more detail.</p></li>
<li><p>Yves's request to reöpen discussions about "deprecated::" warning categories. There may be benefit here too. Paul will write a followup response.</p></li>
</ul>
]]>
        

    </content>
</entry>
  <entry>
    <title>PWC207 - H-Index</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/10/pwc207-h-index/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/">#207</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of integers containing citations a researcher has
received for each paper.</p>

  <p>Write a script to compute the researcher’s <code class="language-plaintext highlighter-rouge">H-Index</code>. For more information
please checkout the <a href="https://en.wikipedia.org/wiki/H-index">wikipedia page</a>.</p>

  <blockquote>
    <p>The H-Index is the largest number h such that h articles have at least h
citations each. For example, if an author has five publications, with 9,
7, 6, 2, and 1 citations (ordered from greatest to least), then the
author’s h-index is 3, because the author has three publications with 3
or more citations. However, the author does not have four publications
with 4 or more citations.</p>
  </blockquote>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @citations = (10,8,5,4,3)
Output: 4

Because the 4th publication has 4 citations and the 5th has only 3.
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @citations = (25,8,5,3,3)
Output: 3

The H-Index is 3 because the fourth paper has only 3 citations.
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>No questions asked, as the domain makes it pretty clear that we’re talking
“human” numbers, both in terms of size of the input array, as well as each
individual count of citations.</p>

<h1 id="the-solution">The solution</h1>

<p>The text/definition steals us the joy of coming up with a solution, because
it hints about having the array sorteded in <em>descending</em> order.</p>

<p>In fact, the key is that we have to compare a <em>count</em> of elements in a
subset with the values in the subsets. If we start with an array sorted like
above, as we move on we progressively include articles with <em>less</em>
citations, while at the same time increasing the size of the subset. At this
point, it’s just a matter of meeting in the middle.</p>

<blockquote>
  <p>… and, of course, a viable solution will exist to include all top-cited
articles…</p>
</blockquote>

<p>Let’s go <a href="https://www.perl.org/">Perl</a> first:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="nv">say</span> <span class="nv">h_index</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">);</span>

<span class="k">sub </span><span class="nf">h_index</span> <span class="p">(@citations) {</span>
   <span class="nv">@citations</span> <span class="o">=</span> <span class="nb">reverse</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nb">grep</span> <span class="p">{</span> <span class="vg">$_</span> <span class="p">}</span> <span class="nv">@citations</span><span class="p">;</span>
   <span class="vg">$_</span> <span class="o">&lt;</span> <span class="nv">$citations</span><span class="p">[</span><span class="vg">$_</span><span class="p">]</span> <span class="o">||</span> <span class="k">return</span> <span class="vg">$_</span> <span class="k">for</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$#citations</span><span class="p">;</span>
   <span class="k">return</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@citations</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We’re removing articles with <em>no</em> citations at all, because they’re pretty
much useless to calculate the H-Index. Then we sort and reverse, to get our
descending list of counts.</p>

<p>Then we iterate through the whole array. If we find a crossing point, then
we can return; otherwise, <em>every</em> article is part of the H-Index, so we just
return the size of the subset of articles with at least one citation.</p>

<p><a href="https://raku.org/">Raku</a> goes pretty much the same way, making the first preparatory part a
bit more readable for many westerners (at least those who are used to
reading left-to-right):</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { put h-index(@args) }

sub h-index (@citations) {
   @citations = @citations».Int.grep({.so}).sort.reverse;
   $_ &lt; @citations[$_] || return $_ for ^@citations;
   return @citations.elems;
}
</code></pre>

<p>Stay safe folks!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/10/pwc207-h-index/</id>
    <published>2023-03-10T07:00:00+01:00</published>
    <updated>2023-03-10T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Mendapatkan Username Login pada Wordpress versi 4.9.4</title>
    <link rel="alternate" href="https://medium.com/@xHarryxPotter666/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@xHarryxPotter666/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/954/1*POyRpFXOGS0cmL9V8Dy0PQ.png" width="954"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Hai, disini saya akan menjelaskan cara mendapatkan username pada Login wordpress, yangmana cocok sekali apabila digabungkan dengan teknik&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@xHarryxPotter666/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>xHarryxPotter666</name>
    </author>
    <id>https://medium.com/p/6621547dc4bf</id>
    <published>2023-03-09T18:32:41Z</published>
    <updated>2023-03-09T20:06:46.424000Z</updated>
    <category term="wordpress"/>
    <category term="perl"/>
    <category term="vulnerability"/>
    <category term="username"/>
  </entry>
  <entry>
    <title>PWC207 - Keyboard Word</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/09/pwc207-keyboard-word/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/">#207</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of words.</p>

  <p>Write a script to print all the words in the given array that can be types
using alphabet on only one row of the keyboard.</p>

  <p>Let us assume the keys are arranged as below:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Row 1: qwertyuiop
Row 2: asdfghjkl
Row 3: zxcvbnm
</code></pre></div>  </div>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @words = ("Hello","Alaska","Dad","Peace")
Output: ("Alaska","Dad")
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @array = ("OMG","Bye")
Output: ()
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>I’d nitpick that the SHIFT key is usually on the <code class="language-plaintext highlighter-rouge">zxc...</code> (at least on the
keyboard I have in front of me now), so <code class="language-plaintext highlighter-rouge">Alaska</code> is a bit controversial. On
the other hand, it’s not an <em>alphabet</em> key, so it’s debatable.</p>

<h1 id="the-solution">The solution</h1>

<p>We’re encapsulating the single test in a <code class="language-plaintext highlighter-rouge">is-keyboard-word</code> function, that
applies on a single word at a time.</p>

<p>The function has a bit of “preparation” in the <code class="language-plaintext highlighter-rouge">state</code> variables, so that we
can reuse it over and over without having to re-compute everything all the
times.</p>

<p>State variable <code class="language-plaintext highlighter-rouge">@letter-sets</code> contains three sets, one for each group of
letter (i.e. the letters in each keyboard row, according to the spec). Each
set allows telling whether a specific “input” letter belongs to the group of
letters or not.</p>

<p>State variable <code class="language-plaintext highlighter-rouge">%set-ids-for</code> tells us the index of the set in
<code class="language-plaintext highlighter-rouge">@letter-sets</code> where a specific input letter belongs.</p>

<p>When a word comes in, we split (via <code class="language-plaintext highlighter-rouge">comb</code>) it into characters and find out
the set related to the first one (<code class="language-plaintext highlighter-rouge">$set</code>). We then check that all characters
from the splitting belong to the same set. This check might be more
idiomatic, but I find the “extended” form easier to read.</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { @args.grep(&amp;is-keyboard-word).put }

sub is-keyboard-word ($word) {
   state @rows = &lt; qwertyuiop asdfghjkl zxcvbnm &gt;;
   state @letter-sets = @rows.map({ .comb.Set });
   state %set-idx-for =
      @rows.kv
      .map(-&gt; $idx, $row {
         $row.comb.map(-&gt; $char { $char =&gt; $idx }) })
      .flat;

   my @letters = $word.lc.comb;
   my $set-idx = %set-idx-for{@letters[0]};
   my $set = @letter-sets[$set-idx];
   for @letters -&gt; $letter {
      return False if $letter ∉ $set;
   }
   return True;
}
</code></pre>

<p>The <a href="https://www.perl.org/">Perl</a> version is a straight translation:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>
<span class="nb">no</span> <span class="nv">warnings</span> <span class="p">'</span><span class="s1">experimental::signatures</span><span class="p">';</span>

<span class="nv">say</span> <span class="nb">join</span> <span class="p">'</span><span class="s1"> </span><span class="p">',</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">is_keyboard_word</span><span class="p">(</span><span class="vg">$_</span><span class="p">)</span> <span class="p">}</span> <span class="nv">@ARGV</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">is_keyboard_word</span> <span class="p">($word) {</span>
   <span class="nv">state</span> <span class="nv">$rows</span> <span class="o">=</span> <span class="p">[</span><span class="sx">qw&lt; qwertyuiop asdfghjkl zxcvbnm &gt;</span><span class="p">];</span>
   <span class="nv">state</span> <span class="nv">$letter_sets</span> <span class="o">=</span> <span class="p">[</span>
      <span class="nb">map</span> <span class="p">{</span>
         <span class="o">+</span><span class="p">{</span> <span class="nb">map</span> <span class="p">{</span> <span class="vg">$_</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="nb">split</span> <span class="sr">m{}mxs</span> <span class="p">}</span>
      <span class="p">}</span> <span class="nv">$rows</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span>
   <span class="p">];</span>
   <span class="nv">state</span> <span class="nv">$set_idx_for</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nb">map</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$idx</span> <span class="o">=</span> <span class="vg">$_</span><span class="p">;</span>
         <span class="nb">map</span> <span class="p">{</span> <span class="vg">$_</span> <span class="o">=&gt;</span> <span class="nv">$idx</span> <span class="p">}</span> <span class="nb">split</span> <span class="sr">m{}mxs</span><span class="p">,</span> <span class="nv">$rows</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$idx</span><span class="p">];</span>
      <span class="p">}</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$rows</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*</span>
   <span class="p">};</span>
   <span class="k">my</span> <span class="nv">@letters</span> <span class="o">=</span> <span class="nb">split</span> <span class="sr">m{}mxs</span><span class="p">,</span> <span class="nb">lc</span><span class="p">(</span><span class="nv">$word</span><span class="p">);</span>
   <span class="k">my</span> <span class="nv">$set_idx</span> <span class="o">=</span> <span class="nv">$set_idx_for</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$letters</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span>
   <span class="k">my</span> <span class="nv">$set</span> <span class="o">=</span> <span class="nv">$letter_sets</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$set_idx</span><span class="p">];</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$letter</span> <span class="p">(</span><span class="nv">@letters</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">''</span> <span class="k">unless</span> <span class="nb">exists</span><span class="p">(</span><span class="nv">$set</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$letter</span><span class="p">});</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/09/pwc207-keyboard-word/</id>
    <published>2023-03-09T07:00:00+01:00</published>
    <updated>2023-03-09T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>PWC 176: Reversing a number</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-176-reversing-a-number-39gg" type="text/html"/>
    <content type="html">&lt;p&gt;If I know anything about code performance, it's that my intuition about performance is horrible. Going through the backlog of Perl Weekly Challenges that I missed, I found myself spending way too much time thinking about the problem of reversing numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/#TASK2"&gt;Task 2 of Perl Weekly Challenge #176&lt;/a&gt; we are set a reasonably easy task:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a script to find out all Reversible Numbers below 100.&lt;br&gt;
A number is said to be a reversible if sum of the number&lt;br&gt;
and its reverse had only odd digits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A straightforward approach starts with considering the possible pairs of numbers that could work.  A number with all odd digits will be odd.  Therefore it will be a sum of an even number and an odd number.  Adding together a two-digit number and its reverse means that the only candidates are numbers where the first digit is even and second is odd, or vice versa.&lt;/p&gt;

&lt;p&gt;Perl has a string-generating function called &lt;code&gt;glob&lt;/code&gt;.  It's usually used in the context of generating possible file names that match a pattern, but it can also be used in a way that also appears in shells such as &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;ksh&lt;/code&gt;, and &lt;code&gt;zsh&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;a,b&lt;span class="o"&gt;}{&lt;/span&gt;1,2&lt;span class="o"&gt;}&lt;/span&gt;
a1 a2 b1 b2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is, lists of comma-separated values in braces create a cross-product of strings from the lists.  To generate the odd-and-even numbers that we need, we can use &lt;code&gt;glob&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;{1,3,5,7,9}{0,2,4,6,8}&lt;/span&gt;&lt;span class="p"&gt;"),&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;{2,4,6,8}{1,3,5,7,9}&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From that list of candidates, we need to select (think &lt;code&gt;grep&lt;/code&gt;) those that meet the criteria from the problem statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;allOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;revNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@candidate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do then is implement the &lt;code&gt;allOdd&lt;/code&gt; and &lt;code&gt;revNum&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;These sorts of problems where we manipulate the digits in a number have two kinds of solutions:  we can treat the number as a string or an array of characters, and manipulate the characters; or we can treat it as a number and do arithmetic to isolate the digits as integers.&lt;/p&gt;

&lt;p&gt;My intuition, born of experience in C, is that doing math with integers is more efficient than doing string operations.  But is it true in Perl?&lt;/p&gt;

&lt;p&gt;Let's consider two possible implementations of reversing the digits of a number.  The first uses modulo and division operations to reverse the number.  Starting from the list significant digit, keep multiplying by ten and adding more digits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;rev1&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second implementation turns the number into a string and uses the &lt;code&gt;reverse&lt;/code&gt; operator that is built into Perl.  That might give us leading zeroes, which would incorrectly be seen as octal when the number is used in a sum, so we also need to remove leading zeroes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;rev2&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="si"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;"))&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/^0+//&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So which is more efficient?  Perl has a core module for benchmarking blocks of code: &lt;code&gt;use Benchmark qw/cmpthese/;&lt;/code&gt;&lt;br&gt;
The &lt;code&gt;cmpthese&lt;/code&gt; function takes blocks of code and runs them to accumulate CPU time, and then shows the relative performance.&lt;br&gt;
Here's what the benchmarking code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;cmpthese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;numeric&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;rev1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;123400&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="mi"&gt;124500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;string&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;rev2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;123400&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="mi"&gt;124500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's a sample result of running the benchmark:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          Rate numeric  string
numeric 1592/s      --    -53%
string  3394/s    113%      --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string version is nearly twice as fast as the numeric version.  My intuition that my intuition is bad is confirmed.&lt;br&gt;
Why is the string version faster?  Well, it contains no loops because the looping is hidden in the built-in version of &lt;code&gt;reverse&lt;/code&gt;, which is probably well-optimized C code. The numeric Perl version is probably slower because the looping is done in interpreted code, which means every variable reference and every test goes through the byte-code interpreter.&lt;/p&gt;

&lt;p&gt;Conclusion: don't be afraid to treat numbers as strings in Perl, at least not for efficiency reasons.&lt;/p&gt;

&lt;p&gt;Incidentally, my intuition about C programs was much better.  Below is the same pair of functions as a C program, and a quick-and-dirty test of the performance.  The numeric version is about three times faster in my environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
         &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
         &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;rev1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;rev2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123400000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123500000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rev numeric %d %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rev string %d %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-176-reversing-a-number-39gg</id>
    <published>2023-03-08T19:56:31Z</published>
    <updated>2023-03-08T19:56:31Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Call for Papers. TPRC 2023</title>
    <link rel="alternate" href="https://blogs.perl.org/users/tprfmarketing/2023/03/call-for-papers-tprc-2023.html"/>
    <id>tag:blogs.perl.org,2023:/users/tprfmarketing//4235.11043</id>
    <published>2023-03-08T10:03:12Z</published>
    <updated>2023-03-08T10:07:41Z</updated>
    <author>
        <name>TPRF Marketing Committee</name>
        <uri>https://perlfoundation.org/marketing-committee.html</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/tprfmarketing/">
        <![CDATA[<p>Call For Papers is now open! You can submit your talk Ideas at <a href="https://tprc.to/papers">https://tprc.to/papers</a>. Talk submission deadline is <strong>March 31 Midnight UTC</strong>. Talks must be given live and in-person. If you are looking for any talk ideas, try out the conference wiki.</p>

<p>Visit the TPRC 2023 website at <a href="https://tprc.to/">https://tprc.to/</a><br />
Follow us on Twitter: <a href="https://twitter.com/perlconferences">@PerlConferences</a><br />
Like us on Facebook: The Perl Foundation (<a href="https://facebook.com/tpf.perl">@tpf.perl</a>)<br />
Subscribe to the mailing list: <a href="https://tprc.to/subscribe">https://tprc.to/subscribe</a><br />
Post a message to us at <a href="https://tprc.to/tprc-2023-tor/contact-us/">https://tprc.to/tprc-2023-tor/contact-us/</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Regexp::Assemble - Weekly Travelling in CPAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/c_y_fung/2023/03/regexpassemble---weekly-travelling-in-cpan.html"/>
    <id>tag:blogs.perl.org,2023:/users/c_y_fung//3481.11042</id>
    <published>2023-03-07T12:33:28Z</published>
    <updated>2023-03-07T13:03:10Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>It has been on my mind quite a while. Originally it was suggested on Twitter, by Mohammad Anwar, the maintainer of "The Weekly Challenge", that the community should re-publish the CPAN Weekly, which existed before I joined the hacker community. Our plan was having the newsletter began in December 2022. Actually that collided with the Advent Calendar, so, not a good time. Anyway, after many twists and turns, I was busy in late 2022 and early 2023 for job hunting (settled now). Now I try to act as a tour guide and visit some CPAN modules (or distributions) with you in a causal manner.</i></p>

<p align="center">Destination: <a href="https://metacpan.org/pod/Regexp::Assemble">Regexp::Assemble</a></p>

<p><strong>Date of Latest Release: Jun 20, 2017<br />
Distribution: Regexp-Assemble<br />
Module version: 0.38<br />
Main Contributors: David Landgren and Ron Savage(RSAVAGE)<br />
</strong><br />
Regexp::Assemble is used for combining regular expressions.<br />
<tt><br />
my $ra = Regexp::Assemble-&gt;new;<br />
$ra-&gt;add('cat', 'rat');<br />
say $ra-&gt;re;<br />
say $ra-&gt;as_string;<br />
# (?^:[cr]at)<br />
# [cr]at<br />
</tt></p>

The two methods of the module you will probably use most frequently, <tt>as_string</tt> and <tt>re</tt>, have subtle differences:
<pre>my $r = Regexp::Assemble-&gt;new;
my @roman = qw/I II III IV V
               VI VII VIII IX X
               XI XII XIII XIV XV
               XVI XVII XVIII IXX XX/;
$r-&gt;add(@roman);
say "\$r-&gt;re:", "\n", $r-&gt;re;
my $rx = $r-&gt;as_string;
say "\$r-&gt;as_string:", "\n", $r-&gt;as_string;
say "Matched." if "vii" =~ /$rx/i;
say "This won't be printed." if "vii" =~ $r-&gt;re;

# $r-&gt;re:
# (?^:(?:X(?:V(?:I(?:I?I)?)?|I(?:I?I|V)?|X)?|I(?:I?I|X?X|V)?|V(?:I(?:I?I)?)?))
# $r-&gt;as_string:
# (?:X(?:V(?:I(?:I?I)?)?|I(?:I?I|V)?|X)?|I(?:I?I|X?X|V)?|V(?:I(?:I?I)?)?)
# Matched.
</pre>

<p>It is mainly for performance.<br />
<tt><br />
my $rs0 = Regexp::Assemble-&gt;new;<br />
$rs0-&gt;add('[0-9]+');<br />
$rs0-&gt;add('[0-9a-f]+');<br />
$rs0-&gt;add('[0-9A-F]+');<br />
say $rs0-&gt;re;</tt></p><tt>

</tt><p><tt># (?^:(?:[0-9A-F]+|[0-9a-f]+|[0-9]+))<br />
# though you can write [0-9A-Fa-f]+ equivalently.<br />
</tt></p>

<p>It can be quite readable if your words are "similar" enough:<br />
<tt><br />
my $rday = Regexp::Assemble-&gt;new;<br />
$rday-&gt;add('Wednesday');<br />
$rday-&gt;add('Wed');<br />
$rday-&gt;add('We');<br />
$rday-&gt;add('W');<br />
$rday-&gt;add('wednesday');<br />
$rday-&gt;add('WednesdaY');<br />
$rday-&gt;add('Wednesdy');<br />
$rday-&gt;add('Wednseday');<br />
$rday-&gt;add('Wedsenady');<br />
say $rday-&gt;re;<br />
# (?^:(?:W(?:e(?:d(?:n(?:esd(?:a[Yy]|y)|seday)|senady)?)?)?|wednesday))<br />
</tt></p>

<p>Note that do not put slashes on the expressions.<br />
<tt><br />
my $rs = Regexp::Assemble-&gt;new;<br />
$rs-&gt;add('m/[0-9]+/');<br />
$rs-&gt;add('m/[0-9a-f]+/');<br />
$rs-&gt;add('m/[0-9A-F]+/');<br />
say $rs-&gt;re;<br />
say "Great!?" if "A9F" =~ $rs-&gt;re;<br />
say "Mixed feelings." if "m/A9F/" =~ $rs-&gt;re;</tt></p><tt>

</tt><p><tt># (?^:m\/(?:[0-9A-F]+|[0-9a-f]+|[0-9]+)\/)<br />
# Mixed feelings.<br />
</tt></p>

<p>There are some other regular expression combinators on CPAN; one of these is <a href="https://metacpan.org/pod/Regexp::Trie">Regexp::Trie</a>.<br />
It is generally faster than Regexp::Assemble but has fewer features.<br />
Let's have a performance check:</p>

<pre># MATCHING FIRST 20 ROMAN NUMERALS
# -- FROM Weekly Travelling in CPAN, Mar 07 2023
# The first author of the module, David Landgren, 
# has written a general example on matching Roman Numerals:
# <a href="https://github.com/ronsavage/Regexp-Assemble/blob/master/examples/roman">https://github.com/ronsavage/Regexp-Assemble</a><br /># <a href="https://github.com/ronsavage/Regexp-Assemble/blob/master/examples/roman">/blob/master/examples/roman</a>
# The idea of the check script here is modified from that.
use List::Util qw/shuffle sample any/;
use Regexp::Assemble;
use Regexp::Trie;
use feature 'say';

sub repr {
    return sample int 4*rand(), 
        shuffle('I' x (int 4*rand()), 'V', 'X');
}

my $size = 1000;

sub c0 {
    my $count = 0;
    for (1..$size) {
        my $letters = repr();
        $count++ if any {$letters =~ /^$_$/} @roman;
    }
    return $count;
}

my $ra = Regexp::Assemble-&gt;new;
$ra-&gt;anchor_line;
$ra-&gt;add(@roman);
my $ra_computed = $ra-&gt;re;

sub c1 {
    my $count = 0;
    for (1..$size) {
        $count++ if repr() =~ $ra_computed;
    }
    return $count;
}

my $rt = Regexp::Trie-&gt;new;
$rt-&gt;add($_) for @roman;
my $rt_computed = $rt-&gt;regexp;

sub c2 {
    my $count = 0;
    for (1..$size) {
        $count++ if repr() =~ /^$rt_computed$/;
    }
    return $count;
}

say c0()/$size;
say c1()/$size;
say c2()/$size;

use Benchmark q/cmpthese/;
cmpthese(10_000, {
    RAW =&gt; sub {c0}, 
    Assemble =&gt; sub {c1},
    Trie =&gt; sub {c2},  
});


=pod
0.695
0.691
0.698
           Rate      RAW Assemble     Trie
RAW      43.5/s       --     -92%     -93%
Assemble  550/s    1163%       --     -18%
Trie      668/s    1436%      22%       --
</pre>

<p></p>

<p>See <a href="https://metacpan.org/pod/Regexp::Assemble">https://metacpan.org/pod/Regexp::Assemble</a> and <a href="https://github.com/ronsavage/Regexp-Assemble">https://github.com/ronsavage/Regexp-Assemble</a> for more details, features, and some caveats.</p>

<p align="center">THE HIGHLIGHTED PERL MODULE OF WEEK 10 OF 2023: Regexp::Assemble<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 207: Keyboard Word and  H-Index</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-207-keyboard-word-and-h-index.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11041</id>
    <published>2023-03-07T01:35:00Z</published>
    <updated>2023-03-07T01:37:26Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 207 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-207/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on March 12, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Keyboard Word</h2>

<p><em>You are given an array of words.</em></p>

<p><em>Write a script to print all the words in the given array that can be types using alphabet on only one row of the keyboard.</em></p>

<p><em>Let us assume the keys are arranged as below:</em></p>

<pre><code>Row 1: qwertyuiop
Row 2: asdfghjkl
Row 3: zxcvbnm
</code></pre>

<p><em>Example 1</em></p>

<pre><code>Input: @words = ("Hello","Alaska","Dad","Peace")
Output: ("Alaska","Dad")
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = ("OMG","Bye")
Output: ()
</code></pre>

<p>Note that in the examples above, the input words are in title case (initial upper case letter), so we will need to perform a case conversion somewhere If we want to obtain any match.</p>

<h3>Keyboard Word in Raku</h3>

<p>First, we create an array of three hashes to store the letters of each keyboard row.</p>

<p>Then, the <code>find-kb-word</code> subroutine has two nested loops to loop over the input words and the keyboard rows. It then uses an <code>all</code> <a href="vhttps://docs.raku.org/type/Junction.html">junction</a> for each word/row combination to check whether letters of a word all belong to the same key row.</p>

<pre><code>my @rows;
push @rows, %(map { $_ =&gt; True }, $_.comb) 
    for "qwertyuiop", "asdfghjkl", "zxcvbnm";

sub find-kb-word (@in) {
    my @out;
    for @in -&gt; $word {
        for @rows -&gt; %row {
            push @out, $word and next 
                if %row{all $word.lc.comb}:exists;
        }
    }
    return @out;
}
for &lt;Hello Alaska Dad Peace&gt;, &lt;OMG Bye&gt;, 
    &lt;Power Fad Finish Tower Quit True Omit&gt; -&gt; @test {
    say find-kb-word @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./keyboard-words.raku
[Alaska Dad]
[]
[Power Fad Tower Quit True]
</code></pre>

<h3>Keyboard Word in Perl</h3>

<p>This is a port to Perl of the above Raku program. The only significant difference is that, since Perl doesn&#8217;t have junctions, the <code>find_kb_word</code> subroutine uses a <code>grep</code> to find whether all letters of a word belong to the same key row.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @rows;
push @rows, {map {$_ =&gt; 1} split //, $_} 
    for "qwertyuiop", "asdfghjkl", "zxcvbnm";

for my $test ([&lt;Hello Alaska Dad Peace&gt;], [&lt;OMG Bye&gt;], 
    [&lt;Power Fad Finish Tower Quit True Omit&gt;]) {
    say join " ", find_kb_word(@$test);
}

sub find_kb_word {
    my @out;
    for my $word (@_) {
        for my $row (@rows) {
            my $eligible = 1;
            push @out, $word and last 
                unless grep {not exists $row-&gt;{$_}} 
                split //, lc $word;
        }
    }
    return @out ? @out : "()";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./keyboard-words.pl
Alaska Dad
()
Power Fad Tower Quit True
</code></pre>

<h2>Task 2: H-Index</h2>

<p><em>You are given an array of integers containing citations a researcher has received for each paper.</em></p>

<p><em>Write a script to compute the researcher’s H-Index. For more information please checkout the <a href="https://en.wikipedia.org/wiki/H-index">Wikipedia page</a>.</em></p>

<blockquote>
  <p><em>The H-Index is the largest number h such that h articles have at least h citations each. For example, if an author has five publications, with 9, 7, 6, 2, and 1 citations (ordered from greatest to least), then the author’s h-index is 3, because the author has three publications with 3 or more citations. However, the author does not have four publications with 4 or more citations.</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input: @citations = (10,8,5,4,3)
Output: 4

Because the 4th publication has 4 citations and the 5th has only 3.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @citations = (25,8,5,3,3)
Output: 3

The H-Index is 3 because the fourth paper has only 3 citations.
</code></pre>

<h3>H-Index in Raku</h3>

<p>The <code>h-index</code> subroutine first sorts the input data in descending order. It then looks for the first item whole value is less that its index + 1 and returns it.</p>

<pre><code>sub h-index (@citations) {
    my @ordered = @citations.sort.reverse;
    for 0..@ordered.end -&gt; $i {
        return $i if $i+1 &gt; @ordered[$i];
    }
    # If we get here, then all papers qualify
    return @ordered.elems;
}
for &lt;10 8 5 4 3&gt;, &lt;25 8 5 3 3&gt;, &lt;12 10 9 5 11&gt; -&gt; @test {
  say "@test[]".fmt("%-15s =&gt; "), h-index @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./h-index.raku
10 8 5 4 3      =&gt; 4
25 8 5 3 3      =&gt; 3
12 10 9 5 11    =&gt; 5
</code></pre>

<h3>H-Index in Perl</h3>

<p>This is a port to Perl of the above Raku program.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub h_index {
    my @ordered = sort { $b &lt;=&gt; $a } @_;
    for my $i (0..$#ordered) {
        return $i if $i+1 &gt; $ordered[$i];
    }
    # If we get here, then all papers qualify
    return scalar @ordered;
}
for my $test ([&lt;10 8 5 4 3&gt;], [&lt;25 8 5 3 3&gt;], [&lt;12 10 9 5 11&gt;]) {
    printf "%-15s =&gt; %d\n", "@$test", h_index @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl h-index.pl
10 8 5 4 3      =&gt; 4
25 8 5 3 3      =&gt; 3
12 10 9 5 11    =&gt; 5
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on March 19, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly #606 - First Love Perl?</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-606-first-love-perl-1hg4" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/606.html"&gt;Perl Weekly 606&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Do you remember the first programming language you picked up?&lt;/p&gt;

&lt;p&gt;I am sure in the life span of a programmer, one picks more than one programming language but still have special place for one. I remember during my first encounter in the year &lt;strong&gt;1993&lt;/strong&gt;, I was introduced to &lt;strong&gt;COBOL&lt;/strong&gt; as part of the course I joined immediately after getting through &lt;strong&gt;12th or (+2 as some remember)&lt;/strong&gt;. I had only access to PC at the institute and that too 2 times a week for one hour each. Imagine relying on books and nothing else, I was attracted towards many other programming languages. During that period, I picked up &lt;strong&gt;Fortran&lt;/strong&gt; as well and I loved it more than &lt;strong&gt;COBOL&lt;/strong&gt;. When I got bored of &lt;strong&gt;Fortran&lt;/strong&gt;, I went to &lt;strong&gt;Pascal&lt;/strong&gt;. That too didn't last long before I moved to &lt;strong&gt;C&lt;/strong&gt;. I stayed with &lt;strong&gt;C&lt;/strong&gt; longer than any of the programming languages I picked before. I remember when I moved to &lt;strong&gt;Mumbai&lt;/strong&gt; for a better opportunity in the year &lt;strong&gt;1997&lt;/strong&gt;, I hardly got any offer so I took a part-time job to build a desktop application for a small factory using &lt;strong&gt;FoxPRO&lt;/strong&gt;. It was during this period, I got the offer to join a startup looking for fresher willing to learn &lt;strong&gt;Perl&lt;/strong&gt;. It was my first proper job as a programmer. Infact, I was given two choices, &lt;strong&gt;Perl&lt;/strong&gt; or &lt;strong&gt;Java&lt;/strong&gt;. I choose &lt;strong&gt;Perl&lt;/strong&gt; as it was easier to move from &lt;strong&gt;C&lt;/strong&gt;. And here I am today, in the year &lt;strong&gt;2023&lt;/strong&gt;, working as a &lt;strong&gt;Perl Developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Reason I am sharing my story is last week I came across some post on social media talking about (again) &lt;strong&gt;Perl&lt;/strong&gt; is dead or not moving fast enough to keep up with the younger generations. I don't want to repeat what is said in favour or against &lt;strong&gt;Perl&lt;/strong&gt; but it pains to see not many coming forward to stop the lies. I remember when &lt;strong&gt;Perl v5.36&lt;/strong&gt; was released, it made a big impact and everyone started talking about it. I even did daily series on the new features of latest release. I have kept it recorded in the &lt;a href="https://github.com/manwar/perl-cool-snippets"&gt;GitHub repository&lt;/a&gt; for anyone to have a look. In few months time, there is going to be another big release that every &lt;strong&gt;Perl&lt;/strong&gt; fans are looking forward to it. So to all ignorants and haters, &lt;strong&gt;Perl&lt;/strong&gt; is not going anywhere and will remain stronger as ever.&lt;/p&gt;

&lt;p&gt;Just for fun, I asked &lt;strong&gt;ChatGPT&lt;/strong&gt; his views on &lt;strong&gt;Perl&lt;/strong&gt;. I must say it didn't dissappoint me. It tried to be polite and diplomatic in his response. I liked it. Please don't get me wrong, I don't live in the fantasy world. I know the fact, we don't have many new projects being developed in &lt;strong&gt;Perl&lt;/strong&gt;. So what? That doesn't make it any lesser than others. You can try other while still in love with &lt;strong&gt;Perl&lt;/strong&gt;. I am not suggesting you do but if you do then there is nothing wrong in it. I know many experts in &lt;strong&gt;Perl&lt;/strong&gt; equally good in many other languages. You can find them doing &lt;a href="https://theweeklychallenge.org"&gt;weekly challenges&lt;/a&gt; in so many different languages.&lt;/p&gt;

&lt;p&gt;The moral of the story, &lt;strong&gt;Perl&lt;/strong&gt; will remain my first love no matter what. How about you, &lt;strong&gt;Perl&lt;/strong&gt; fans?&lt;/p&gt;

&lt;p&gt;Last but not the least, &lt;strong&gt;Enlightened Perl Organisation (EPO)&lt;/strong&gt; is closing down, &lt;strong&gt;Mark Keating&lt;/strong&gt; made it public the &lt;a href="https://ww2.enlightenedperl.org/2023/02/27/closing-down"&gt;sad news&lt;/a&gt;. I would like to take this opportunity to thank &lt;strong&gt;Mark Keating&lt;/strong&gt; and his entire team for all the hard work and support, specially to the &lt;strong&gt;London Perl Workshop&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Please enjoy the rest of the newsletter.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-099.html"&gt;This week in PSC (099)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another round of update by the Perl Steering Coundil&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://ww2.enlightenedperl.org/2023/02/27/closing-down/"&gt;EPO closing down&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Last week it was made public that the iconic EPO is closing down. Thank you Mark and his entire team for all the hard work and support.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/"&gt;Improvements to Planet Perl and Perlanet&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Planet Perl? Well if you don't know about it then please do checkout the latest work done by Dave to make it even better.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/02/27/simple-avatars/"&gt;Simple avatars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Do you like Avatars? If yes then please do checkout this blog post. It has plenty to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/02/28/terminal-avatars/"&gt;Terminal avatars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Well, having done the image avatars before, it is time to do terminal. Go for it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/01/mobundle-gets-some-love/"&gt;mobundle gets some love&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;mobundle? never heard of it before. time to checkout now.&lt;/p&gt;




&lt;h2&gt;
  
  
  CPAN
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/04/data-resolver-oop-trial/"&gt;Data::Resolver - trial release with OOP interface&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A triak release waiting for you. Please share your feedback with the author.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/05/cpantesters-rock/"&gt;CPAN Tester rock!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CPAN Tester done it again one more time. Wekk done.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207"&gt;The Weekly Challenge - 207&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Keyboard Word" and "H-Index". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-206"&gt;RECAP - The Weekly Challenge - 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Shortest Time" and "Array Pairings" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/paired-time.html"&gt;Paired Time&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The detailed discussion of solutions is always the highlight for me. You don't want to miss it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://barroff.codeberg.page/posts/2023/2023-03-05-challenge-206/"&gt;Perl weekly challenge 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice attractive blog post showing the power of Raku. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/boblied/max-sum-of-minimum-pairs-35i7"&gt;Maximum sum of pair minimums&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Kudos to Bob for taking time to share the optimal solution and discussed it too. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://jacoby.github.io/2023/02/28/partial-content-weekly-challenge-206.html"&gt;Partial Content&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever and smart solution using CPAN. Thanks for sharing the experience with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/02/pwc206-shortest-time/"&gt;PWC206 - Shortest Time&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Having solutions in Perl and Raku side by side is so much fun to see the two different approaches to solve the task. Thnk you for everything.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/03/pwc206-array-pairings/"&gt;PWC206 - Array Pairings&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here is Perl expert getting his hand dirty with Raku. Truly inspirational.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-206/james-smith#readme"&gt;The Weekly Challenge 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you are looking for high performance solutions then this is the place to watch out. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/02/perl-weekly-challenge-206-shortest-time-and-array-pairings.html"&gt;Perl Weekly Challenge 206: Shortest Time and Array Pairings&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Compact solutions in Perl and Raku. Even the hard task looks simple when it comes to Laurent's solution. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/02/27/PerlWeeklyChallenge206.html"&gt;hard times!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A very raw solution in Raku showing the internals. Cool attempt. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/02/27/PWC206/"&gt;Perl Weekly Challenge 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using CPAN, the solutions look sleek and trendy. Well done and thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/206/1"&gt;Weekly challenge 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The task analysis is so fun to read. You learn a lot from the process. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/03/robbie-hatleys-perl-solutions-to-weekly.html"&gt;The Weekly Challenge #206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Handmade crafty solutions this week. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/03/The_Weekly_Challenge_206__Array_Time_.html"&gt;Array Time!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ruby is the pick of the language for the blogging this week. All Ruby fans go for it.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/weekly-challenge-206-2god"&gt;Weekly Challenge 206&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I would recommend you checkout the task analysis and the whole process. Loved it.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/02/27/2023-09-docu-renewed/"&gt;2023.09 Docu Renewed&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/cdxxxiv-16-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dxlvii-metacpan-weekly-report-envassert.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dlxxiv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/owh"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our client is looking for senior Perl developers, Node engineers, and those with mighty Python and SQL skills to lead their team. Cross-trained team members are their sweet spot, and whether you’re cross-trained yourself or are open to the possibility, this may be your perfect role.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/ice"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game and they’re looking for Perl folks with passion, drive, and an appreciation for new experiences along with a strong background in Modern Perl – Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/7sf"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-606-first-love-perl-1hg4</id>
    <published>2023-03-06T20:48:52Z</published>
    <updated>2023-03-06T20:48:52Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>#606 - First Love Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/606.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Do you remember the first programming language you picked up?</p>
<p>I am sure in the life span of a programmer, one picks more than one programming language but still have special place for one. I remember during my first encounter in the year <strong>1993</strong>, I was introduced to <strong>COBOL</strong> as part of the course I joined immediately after getting through <strong>12th or (+2 as some remember)</strong>. I had only access to PC at the institute and that too 2 times a week for one hour each. Imagine relying on books and nothing else, I was attracted towards many other programming languages. During that period, I picked up <strong>Fortran</strong> as well and I loved it more than <strong>COBOL</strong>. When I got bored of <strong>Fortran</strong>, I went to <strong>Pascal</strong>. That too didn't last long before I moved to <strong>C</strong>. I stayed with <strong>C</strong> longer than any of the programming languages I picked before. I remember when I moved to <strong>Mumbai</strong> for a better opportunity in the year <strong>1997</strong>, I hardly got any offer so I took a part-time job to build a desktop application for a small factory using <strong>FoxPRO</strong>. It was during this period, I got the offer to join a startup looking for fresher willing to learn <strong>Perl</strong>. It was my first proper job as a programmer. Infact, I was given two choices, <strong>Perl</strong> or <strong>Java</strong>. I choose <strong>Perl</strong> as it was easier to move from <strong>C</strong>. And here I am today, in the year <strong>2023</strong>, working as a <strong>Perl Developer</strong>.</p>
<p>Reason I am sharing my story is last week I came across some post on social media talking about (again) <strong>Perl</strong> is dead or not moving fast enough to keep up with the younger generations. I don't want to repeat what is said in favour or against <strong>Perl</strong> but it pains to see not many coming forward to stop the lies. I remember when <strong>Perl v5.36</strong> was released, it made a big impact and everyone started talking about it. I even did daily series on the new features of latest release. I have kept it recorded in the <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a> for anyone to have a look. In few months time, there is going to be another big release that every <strong>Perl</strong> fans are looking forward to it. So to all ignorants and haters, <strong>Perl</strong> is not going anywhere and will remain stronger as ever.</p>
<p>Just for fun, I asked <strong>ChatGPT</strong> his views on <strong>Perl</strong>. I must say it didn't dissappoint me. It tried to be polite and diplomatic in his response. I liked it. Please don't get me wrong, I don't live in the fantasy world. I know the fact, we don't have many new projects being developed in <strong>Perl</strong>. So what? That doesn't make it any lesser than others. You can try other while still in love with <strong>Perl</strong>. I am not suggesting you do but if you do then there is nothing wrong in it. I know many experts in <strong>Perl</strong> equally good in many other languages. You can find them doing <a href="https://theweeklychallenge.org">weekly challenges</a> in so many different languages.</p>
<p>The moral of the story, <strong>Perl</strong> will remain my first love no matter what. How about you, <strong>Perl</strong> fans?</p>
<p>Last but not the least, <strong>Enlightened Perl Organisation (EPO)</strong> is closing down, <strong>Mark Keating</strong> made it public the <a href="https://ww2.enlightenedperl.org/2023/02/27/closing-down">sad news</a>. I would like to take this opportunity to thank <strong>Mark Keating</strong> and his entire team for all the hard work and support, specially to the <strong>London Perl Workshop</strong>.</p>
<p>Please enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/606.html</id>
    <published>2023-03-06T10:00:00Z</published>
    <updated>2023-03-06T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 206</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-206/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-206/</id>
    <published>2023-03-06T00:00:00Z</published>
    <updated>2023-03-06T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 207</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-207/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Keyboard Word 10. TASK #2: H-Index HEADLINES  Welcome to the Week #207 of The Weekly Challenge.
E. Alvarez blog post for you to keep you engaged.
First Monday of the month and time to declare next champion. With great pleasure, I announce Solathian as our next champion.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-207/</id>
    <published>2023-03-06T00:00:00Z</published>
    <updated>2023-03-06T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4411934808251231565</id>
    <published>2023-03-05T13:36:00.000+01:00</published>
    <updated>2023-03-05T13:36:30.157+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxiv) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/ack-v3.7.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Ack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A grep-like program for searching source code &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.7.0&lt;/strong&gt; on 2023-02-27, with 127 votes&lt;/li&gt;  &lt;li&gt;Previous version: v3.6.0 was 6 months, 6 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PETDANCE'&gt;PETDANCE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060007&lt;/strong&gt; on 2023-03-03, with 14 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.060005 was 10 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/OLIVER'&gt;OLIVER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/CGI-4.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CGI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handle Common Gateway Interface requests and responses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.56&lt;/strong&gt; on 2023-03-03, with 41 votes&lt;/li&gt;  &lt;li&gt;Previous version: 4.55 was 2 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEEJO'&gt;LEEJO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.36' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.36&lt;/strong&gt; on 2023-03-02, with 44 votes&lt;/li&gt;  &lt;li&gt;Previous version: 4.35 was 8 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RURBAN'&gt;RURBAN&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.91' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.91&lt;/strong&gt; on 2023-03-01, with 17 votes&lt;/li&gt;  &lt;li&gt;Previous version: 6.90 was 2 months, 30 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/SBECK'&gt;SBECK&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2023-03-03, with 29 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 5 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz-2.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to AT&amp;T's GraphViz. Deprecated. See GraphViz2 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.26&lt;/strong&gt; on 2023-03-03, with 14 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.25 was 6 months, 14 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETJ'&gt;ETJ&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.38&lt;/strong&gt; on 2023-03-03, with 22 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.37 was 5 months, 18 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/OALDERS'&gt;OALDERS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.68&lt;/strong&gt; on 2023-02-27, with 160 votes&lt;/li&gt;  &lt;li&gt;Previous version: 6.67 was 8 months, 13 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/OALDERS'&gt;OALDERS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.150' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.150&lt;/strong&gt; on 2023-03-05, with 127 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.148 was 1 month, 29 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PETDANCE'&gt;PETDANCE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001007&lt;/strong&gt; on 2023-03-02, with 18 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.001006 was 5 months, 24 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DCONWAY'&gt;DCONWAY&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.68002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.68002&lt;/strong&gt; on 2023-03-02, with 38 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.68 was 5 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KARASIK'&gt;KARASIK&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9694' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9694&lt;/strong&gt; on 2023-03-03, with 28 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.9692 was 11 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000150' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000150&lt;/strong&gt; on 2023-03-01, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.000148 was 6 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000147' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000147&lt;/strong&gt; on 2023-03-04, with 38 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.000145 was 1 year before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.50&lt;/strong&gt; on 2023-03-01, with 96 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.49 was 1 month, 29 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/HMBRAND'&gt;HMBRAND&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4411934808251231565/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxiv-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4411934808251231565"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4411934808251231565"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxiv-16-great-cpan-modules-released.html" title="(cdxxxiv) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7344849890260351344</id>
    <published>2023-03-05T13:33:00.002+01:00</published>
    <updated>2023-03-05T13:33:56.326+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlvii) metacpan weekly report - Env::Assert</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Env::Assert" target="_blank"&gt;Env::Assert (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/05 12:33:41 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Antsy" target="_blank"&gt;Antsy&lt;/a&gt; - Streaming ANSI escape sequences&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::KDBX" target="_blank"&gt;File::KDBX&lt;/a&gt; - Encrypted database to store secret text and files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::CreatingRhythms" target="_blank"&gt;Music::CreatingRhythms&lt;/a&gt; - Combinatorial algorithms to generate rhythms&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad::Keyword::Accessor" target="_blank"&gt;Object::Pad::Keyword::Accessor&lt;/a&gt; - declare lvalue accessors on Object::Pad classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::PrimaImage" target="_blank"&gt;PDL::PrimaImage&lt;/a&gt; - interface between PDL scalars and Prima images&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Weather::Meteo" target="_blank"&gt;Weather::Meteo&lt;/a&gt; - Interface to https://open-meteo.com for historical weather data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::PiHole" target="_blank"&gt;WWW::PiHole&lt;/a&gt; - Perl interface to Pi-hole&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Shorten" target="_blank"&gt;WWW::Shorten&lt;/a&gt; - Interface to URL shortening sites.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Comment" target="_blank"&gt;Acme::Comment&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien" target="_blank"&gt;Alien&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=273)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::financeta" target="_blank"&gt;App::financeta&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Changes" target="_blank"&gt;Changes&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Compress::Zstd" target="_blank"&gt;Compress::Zstd&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Size" target="_blank"&gt;Devel::Size&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=181)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Assert" target="_blank"&gt;Env::Assert&lt;/a&gt; (+3=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ethereum::RPC::Client" target="_blank"&gt;Ethereum::RPC::Client&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin" target="_blank"&gt;FindBin&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Mason" target="_blank"&gt;HTML::Mason&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=160)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IRC" target="_blank"&gt;Mojo::IRC&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::Check" target="_blank"&gt;Params::Check&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perlanet" target="_blank"&gt;Perlanet&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply::Plugin" target="_blank"&gt;Reply::Plugin&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex::Test::Spec" target="_blank"&gt;Rex::Test::Spec&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sendmail::PMilter" target="_blank"&gt;Sendmail::PMilter&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sentinel" target="_blank"&gt;Sentinel&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Slack::WebHook" target="_blank"&gt;Slack::WebHook&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Spreadsheet::Read" target="_blank"&gt;Spreadsheet::Read&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract::Pg" target="_blank"&gt;SQL::Abstract::Pg&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Util" target="_blank"&gt;String::Util&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Harness" target="_blank"&gt;Test::Harness&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=181)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Thread::GoChannel" target="_blank"&gt;Thread::GoChannel&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Toadfarm" target="_blank"&gt;Toadfarm&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=107)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::API" target="_blank"&gt;Web::API&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Google::Translate" target="_blank"&gt;WWW::Google::Translate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7344849890260351344/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlvii-metacpan-weekly-report-envassert.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7344849890260351344"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7344849890260351344"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlvii-metacpan-weekly-report-envassert.html" title="(dxlvii) metacpan weekly report - Env::Assert"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>This week in PSC (099)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-099.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11039</id>
    <published>2023-03-03T22:21:17Z</published>
    <updated>2023-03-04T20:04:59Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>After missing last week, all three of us attended.</p>

<ul>
<li>Recapped the missing weeks from absences</li>
<li>Smartmatch deprecation seems to be causing some BBC failures due to new warnings, but that&#8217;s to be expected; Philippe to submit patches upstream</li>
<li>Refined the questions surrounding SSL-in-core; Paul to send a follow-up email</li>
<li>RFC0013 needs some core changes to how overload works; best deferred for 5.39 now</li>
<li>Agreed to rename &#8220;RFC&#8221; to &#8220;PPC&#8221; (&#8220;Proposed Perl Change&#8221;)</li>
</ul>
]]>
        

    </content>
</entry>
  <entry>
    <title>Improvements to Planet Perl and Perlanet</title>
    <link rel="alternate" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins.</p>
<p>On Reddit, a few days ago, someone asked <a href="https://www.reddit.com/r/perl/comments/119hu00/perl_rss_feeds/">‘Is there a “Planet Perl” with an RSS feed?’</a> and a few people replied, pointing out the existence of Planet Perl (which is the first Google result for <a href="https://www.google.com/search?q=planet+perl">“Planet Perl”</a>). I’m obviously not marketing that site very well as every time I mention it, I get people (pleasantly) surprised that it exists.</p>
<p>On this occasion, it was <a href="https://www.reddit.com/user/rwp0/">Elvin Aslanov</a> who seemed to discover my site for the first time. And, very soon afterwards, he started sending <a href="https://github.com/davorg/planetperl/pulls">pull requests</a> to add feeds to the site. As a result, we now have three more feeds that are being pulled into the site.</p>
<ul>
<li><a href="https://medium.com/tag/perl">Perl on Medium</a>. I’m slightly embarrassed that I hadn’t thought of this myself. I did, after all, once try to start <a href="https://medium.com/cultured-perl">a Perl publication on Medium</a>. I think I must have decided that there are better sites for technical blogging and blanked it from consideration. Medium’s not the busiest of places for Perl bloggers, but there are a few posts there and they’re mostly from people who are outside of the echo chamber – so getting more eyes on their posts is a good idea.</li>
<li><a href="https://stackoverflow.com/feeds/tag/perl">Perl questions on Stack Overflow</a>. Another one that would have been obvious if I had thought for a second. I’ve been answering questions on SO for years. It’s a good way to get more perspective on how Perl is being used across the industry. Unfortunately, the feed only includes the titles of the posts – you’ll need to click the link to actually see the question.</li>
<li><a href="https://github.com/Perl/perl5/commits/blead.atom">Perl commits on GitHub</a>. I’m interested in hearing how useful people think this is. I worry slightly that there will be times when the number of commits will overwhelm the other feeds. But maybe that’s a good idea. Perhaps it’s good for more people to see just how busy the Perl 5 Porters are. I’m a bit annoyed that the feed puts everything in a fixed-width font, but not (yet) annoyed enough to do anything about it.</li>
</ul>
<p>You might know that Planet Perl is driven by <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>. So adding new feeds is just a case of adding a few lines to <a href="https://github.com/davorg/planetperl/blob/master/perlanetrc">a configuration file</a>. And looking at the pull requests I got from Elvin, showed a potential problem in the way the configuration was laid out. Each feed has three lines of YAML configuration. There’s a title for the feed, a URL for a web page that displays the content of the feed and the URL for the feed itself. They’re called “title”, “web” and “url”. And it’s that last name that’s slightly problematic – it’s just not clear enough. Elvin got “web” and “url” muddled up in one of his PRs and, when I pointed that out to him, he suggested that renaming “url” to “feed” would make things much clearer.</p>
<p>I agreed, and the next day I hacked away for a while before releasing <a href="https://metacpan.org/release/DAVECROSS/Perlanet-v3.0.0/view/lib/Perlanet.pm">version 3.0.0 of Perlanet</a>. In this version, the “url” key is renamed to “feed”. It still accepts the old name (so older config files will still work) but you’ll get a warning if you try to use a config name in the old config.</p>
<p>I didn’t stop there. Last year, I wrote <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">a blog post about producing a docker image that already had Perlanet installed</a> – so that it was quicker to rebuild my various planets every few hours. Since then I’ve been rebuilding <a href="https://hub.docker.com/repository/docker/davorg/perl-perlanet/general">that image</a> every time I updated Perlanet. But it’s been rather a manual process. And because I’m old and decrepit, I can never remember the steps I go through to rebuild it, tag it correctly and push it to the Docker Hub. This means it always takes far longer than it’s supposed to. So this time, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/build">a script to do that for me</a>. And because I now have the kind of mind set that sees GitHub Workflows everywhere I look, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/.github/workflows/publish_image.yml">a Workflow definition that builds and publishes the image</a> any time the Dockerfile changes. I guess the next step will be to write an action that automatically updates the Dockerfile (thereby triggering the rebuild) each time I release a new version of Perlanet.</p>
<p>But that’s a problem for another day. For now, I’m happy with the improvements I’ve made to Planet Perl, Perlanet and the Perlanet Docker infrastructure.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins. On Reddit, a few days ago, someone asked ‘Is there a “Planet Perl” with an RSS feed?’ and a few people replied, pointing out the existence… <a class="more-link" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Continue reading <span class="screen-reader-text">Improvements to Planet Perl and Perlanet</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2097</id>
    <published>2023-03-03T10:16:30Z</published>
    <updated>2023-03-03T10:16:30Z</updated>
    <category term="Programming"/>
    <category term="docker"/>
    <category term="perlanet"/>
    <category term="planet perl"/>
  </entry>
  <entry>
    <title>What is Perl?</title>
    <link rel="alternate" href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1280/1*b0-VWhhifQolimiOjmNsbw.jpeg" width="1280"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Perl is a general-purpose, high-level, interactive, and interpreted programming language created by Larry Wall in 1987, originally&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Nediir?</name>
    </author>
    <id>https://medium.com/p/3cf44720bc32</id>
    <published>2023-03-02T16:10:41Z</published>
    <updated>2023-03-02T16:10:41.209000Z</updated>
    <category term="technology"/>
    <category term="software-development"/>
    <category term="software"/>
    <category term="perl"/>
    <category term="software-engineering"/>
  </entry>
  <entry>
  <title>TPRC 2023 March Newsletter</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-2023-march-newsletter"/>
  <id>tag:news.perlfoundation.org,2023-03-01:/post/tprc-2023-march-newsletter</id>
  <published>2023-03-01T20:06:44</published>
  <updated>2023-03-01T20:06:44</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference 2023 in Toronto, Canada  July 11-13, 2023 is open! Sign up for talks. Book your ticket and hotel. 

The Perl Foundation is delighted to announce that the annual North American Perl and Raku Conference will be held in Toronto, Canada on July 11 to 13, 2023. The venue will be the DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/3fe71fef169a5e9ca9ab275a75baa4eb3d968b24/TPRC.to.512x512.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h1>The Perl and Raku Conference 2023</h1>

<p>The Perl and Raku Foundation is delighted to announce that the annual <strong>North American Perl and Raku Conference</strong> will be held in <strong>Toronto, Canada on July 11 to 13, 2023</strong>. The venue will be the <a href="https://tprc.to/location">DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto</a>. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.</p>

<p>Toronto is Canada's largest city, and the city and surrounding area offers many attractions for a vacation before or after your conference attendance. For our American visitors: you're in luck, three of your dollars are about the same as four of ours.</p>

<p>Call For Papers is now open! You can submit your talk Ideas at https://tprc.to/papers. Talk submission deadline is <strong>March 31 Midnight UTC.</strong> Talks must be given live and in-person. If you are looking for any talk ideas, try out the <a href="https://github.com/perlconference/tprc-2023-tor/wiki/Topics-we-want">conference wiki</a>.</p>

<p>Early bird pricing is available. Purchase your ticket now through April 15th for the low price of $275 USD. You can purchase your tickets now at https://tprc2023.sched.com/tickets.</p>

<p>Visit our website at https://tprc.to/. Information on special hotel rates can be found at https://tprc.to/location/. We've managed to arrange for a really great room rate for the conference days, and there are a few rooms for before and after the conference, in case you'd like to stay longer for a little vacation.</p>

<p>If you are flying, you can book your tickets to YYZ (Pearson, the main airport; many public and private transit options) or YTZ (Billy Bishop, on Toronto Island; 5 minute cab ride); you can also fly into BUF (Buffalo, NY) and drive (2 hours by car) across the border. Just remember to bring your passport.</p>

<h1>Unique to this year / Be Advised</h1>

<ul>
<li>The CFP closes in only 30 days! </li>
<li>The hotel has fewer rooms than prior years, and our price is half of what you can find anywhere close-by. Book your room early!</li>
<li>The hotel’s rooms are almost all King rooms. Contact the hotel directly, and pay an extra $30CAD if you want a room with two Queen beds!</li>
</ul>

<h1>How to reach our organizers</h1>

<ul>
<li>Visit our website: https://tprc.to</li>
<li>Follow us on Twitter: @PerlConferences</li>
<li>Like us on Facebook: The Perl Foundation (@tpf.perl)</li>
<li>Subscribe to the mailing list: https://tprc.to/subscribe</li>
<li>Post a message to us at https://tprc.to/tprc-2023-tor/contact-us/. </li>
</ul>

<p>An organizer will get back to you shortly!</p>

<p>Organizer: Alex Beamish and the Toronto Perl Mongers.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ANSI-Palette">ANSI-Palette</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new ANSI::Palette!</td>
<td>2023-02-19T08:11:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Matrix">Acme-Matrix</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Heavenly digital rain</td>
<td>2023-02-16T16:53:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-newsradio">Acme-MetaSyntactic-newsradio</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Characters from the sitcom Newsradio (1995-1999)</td>
<td>2023-02-18T10:26:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-CPython3">Alien-CPython3</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Python</td>
<td>2023-02-14T09:03:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Deno">Alien-Deno</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Deno</td>
<td>2023-02-14T09:43:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Go">Alien-Go</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Go</td>
<td>2023-02-14T09:22:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-LLVM">Alien-LLVM</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build LLVM</td>
<td>2023-02-14T09:20:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Nodejs">Alien-Nodejs</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Node.js</td>
<td>2023-02-14T09:41:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-OpenJDK">Alien-OpenJDK</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build OpenJDK</td>
<td>2023-02-14T09:06:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Rust">Alien-Rust</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Rust</td>
<td>2023-02-14T09:39:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Zig">Alien-Zig</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Zig</td>
<td>2023-02-14T09:21:35</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-innoextract">Alien-innoextract</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build innoextract</td>
<td>2023-02-16T05:03:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-APA">App-APA</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Access APA News via RSS</td>
<td>2023-02-16T11:39:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-AdditivesUtils">App-AdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:40:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Additives">App-BPOMUtils-Additives</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives in BPOM</td>
<td>2023-02-05T00:05:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-RPO-Checker">App-BPOMUtils-RPO-Checker</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Various checker utilities to help with Processed Food Registration (RPO – Registrasi Pangan Olahan) at BPOM</td>
<td>2023-02-11T04:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table">App-BPOMUtils-Table</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Some utilities providing table data related to BPOM</td>
<td>2023-02-05T00:37:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodAdditive">App-BPOMUtils-Table-FoodAdditive</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List additives in BPOM processed food division</td>
<td>2023-02-13T13:26:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodCategory">App-BPOMUtils-Table-FoodCategory</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food categories in BPOM processed food division</td>
<td>2023-02-13T13:27:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodIngredient">App-BPOMUtils-Table-FoodIngredient</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List ingredients in BPOM processed food division</td>
<td>2023-02-13T13:27:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodType">App-BPOMUtils-Table-FoodType</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food types in BPOM processed food division</td>
<td>2023-02-13T13:27:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-MicrobeInput">App-BPOMUtils-Table-MicrobeInput</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List of microbe specification in BPOM processed food division</td>
<td>2023-02-13T13:27:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-RegCodePrefix">App-BPOMUtils-Table-RegCodePrefix</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List known alphabetical prefixes in BPOM registered product codes</td>
<td>2023-02-13T13:27:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ChemistryUtils">App-ChemistryUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-19T00:05:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FoodAdditivesUtils">App-FoodAdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:42:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-tee">App-Greple-tee</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>module to replace matched text by the external command result</td>
<td>2023-02-19T11:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-HTMLUtils-Grep">App-HTMLUtils-Grep</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Command-line utilities related to grepping HTML files</td>
<td>2023-02-08T14:24:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KBLIUtils">App-KBLIUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-14T13:21:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Toot">App-Toot</a></td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>post a status to Mastodon</td>
<td>2023-02-05T15:50:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-financeta-new">App-financeta-new</a></td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>App::financeta is a Technical Analysis GUI</td>
<td>2023-02-28T03:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lastaccess">App-lastaccess</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリの下のファイルを、最後にアクセスされた順で網羅的に表示する。</td>
<td>2023-02-27T05:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-madeafter">App-madeafter</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>各ファイルの3個の日時情報が、現在から何秒前であるかを、表形式で表示。</td>
<td>2023-02-27T07:47:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-samesize">App-samesize</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリにある全く同じバイトサイズのファイルを一覧にする。MD5ハッシュ値を使うオプションもある。</td>
<td>2023-02-27T06:09:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sponge">App-sponge</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Soak up standard input and write to a file</td>
<td>2023-02-14T08:46:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Assemble">Bencher-Scenario-Regexp-Assemble</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::Assemble</td>
<td>2023-02-05T00:05:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv4">Bencher-Scenario-Regexp-IPv4</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv4</td>
<td>2023-02-12T00:05:47</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv6">Bencher-Scenario-Regexp-IPv6</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv6</td>
<td>2023-02-19T00:06:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Pattern-Git">Bencher-Scenario-Regexp-Pattern-Git</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark patterns in Regexp::Pattern::Git</td>
<td>2023-02-26T00:05:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Blockchain-Contract-Solidity-ABI">Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>Contract ABI utilities</td>
<td>2023-02-02T17:17:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chrome-Policy">Chrome-Policy</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Chrome Policy class</td>
<td>2023-02-04T01:26:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-CryptColumn">DBIx-Class-CryptColumn</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Automatically hash password/passphrase columns</td>
<td>2023-02-08T00:42:46</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-WithClass">DBIx-WithClass</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>DBIx::Class, with more class!</td>
<td>2023-02-12T22:01:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Resolver">Data-Resolver</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>resolve keys to data</td>
<td>2023-02-05T09:58:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-RWP">Dist-Zilla-PluginBundle-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Add [@RWP] plugin bundle into dist.ini</td>
<td>2023-02-04T19:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Assert">Env-Assert</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Ensure that the environment variables match what you need, or abort.</td>
<td>2023-02-15T13:52:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Dot">Env-Dot</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Read environment variables from .env file</td>
<td>2023-02-19T11:46:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Copy-clonefile">File-Copy-clonefile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>call clonefile system call</td>
<td>2023-02-16T17:05:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-IncludesTimeRange">File-Find-IncludesTimeRange</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>Takes a array of time stamped items(largely meant for use with files) returns ones that include the specified time range.</td>
<td>2023-02-27T05:35:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Meta-Cache">File-Meta-Cache</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Cache open file descriptors and stat meta data</td>
<td>2023-02-27T08:03:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Text-CSV">File-Text-CSV</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>Easy access to CSV data files</td>
<td>2023-02-23T13:44:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Hooks">Future-AsyncAwait-Hooks</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>scoped hook blocks that run extra code around await expressions</td>
<td>2023-02-12T00:37:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GetoptLongWrapper">GetoptLongWrapper</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-05T06:47:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graph-Geometric">Graph-Geometric</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>create and work with geometric graphs</td>
<td>2023-02-08T13:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-Magick">Image-Magick</a></td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>objected-oriented Perl interface to ImageMagick. Use it to create, edit, compose, or convert bitmap images from within a Perl script.</td>
<td>2023-02-04T03:49:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Insight-Scriptures">Insight-Scriptures</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Insight::Scriptures!</td>
<td>2023-02-10T23:04:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LWP-UserAgent-msgraph">LWP-UserAgent-msgraph</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td/>
<td>2023-02-16T21:21:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Manipulator">Manipulator</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>manipulate data structs via codeblocks</td>
<td>2023-02-11T17:15:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Formula">Math-Formula</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>Expressions on steriods</td>
<td>2023-02-24T14:21:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mockery">Mockery</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Mock objects for testing purposes</td>
<td>2023-02-11T01:17:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Passphrase">Mojolicious-Plugin-Passphrase</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Securely hash and validate your passwords.</td>
<td>2023-02-12T22:20:19</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-PrometheusTiny">Mojolicious-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>Export metrics using Prometheus::Tiny::Shared</td>
<td>2023-02-05T08:03:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Chain">MooX-Keyword-Chain</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Subroutine chains</td>
<td>2023-02-06T01:48:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Random">MooX-Keyword-Random</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>return a random result!</td>
<td>2023-02-07T17:26:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-T">Music-Chord-Progression-T</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transposed chord progressions</td>
<td>2023-02-02T04:08:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-Transform">Music-Chord-Progression-Transform</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transformed chord progressions</td>
<td>2023-02-02T12:36:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-CreatingRhythms">Music-CreatingRhythms</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Perl from the C code of the book</td>
<td>2023-02-26T16:55:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Netkit">Netkit</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>create netkit labs with code.</td>
<td>2023-02-26T20:21:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NetworkManager-Strict">NetworkManager-Strict</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>NetworkManager strict settings class</td>
<td>2023-02-12T13:56:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDF-Collage">PDF-Collage</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>PDF manipulation with scissors and glue</td>
<td>2023-02-12T18:53:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-7zDownload">RT-Extension-7zDownload</a></td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>RT-Extension-7zDownload Extension</td>
<td>2023-02-21T17:19:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Redis-Cluster-Fast">Redis-Cluster-Fast</a></td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>A fast perl binding for Redis Cluster</td>
<td>2023-02-02T19:14:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-N_Queens">Regexp-N_Queens</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>Abstract</td>
<td>2023-02-17T18:46:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Reply-Plugin-Prompt">Reply-Plugin-Prompt</a></td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>reply plugin for powerlevel10k style prompt</td>
<td>2023-02-26T13:37:11</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SMS-Send-IN-Textlocal">SMS-Send-IN-Textlocal</a></td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>Regional context SMS::Send driver to send messages via Textlocal's India service ( <a href="https://api.textlocal.in/send/" rel="nofollow">https://api.textlocal.in/send/</a> )</td>
<td>2023-02-14T16:07:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Copy">SPVM-File-Copy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Copying and Moving Files</td>
<td>2023-02-09T05:35:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Find">SPVM-File-Find</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-23T02:12:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Glob">SPVM-File-Glob</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>The glob Function</td>
<td>2023-02-16T01:35:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Path">SPVM-File-Path</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Creating and Removing Multi-Level Path</td>
<td>2023-02-15T01:07:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Spec">SPVM-File-Spec</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>foo</td>
<td>2023-02-03T22:32:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Temp">SPVM-File-Temp</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-21T05:37:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-FindBin">SPVM-FindBin</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Locate Directory of Original Program</td>
<td>2023-02-07T01:12:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-RE2">SPVM-Resource-RE2</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Google/RE2 Resources</td>
<td>2023-02-28T00:56:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Array">Sah-Schemas-Array</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Sah schemas related to array type</td>
<td>2023-02-12T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Spreadsheet-Edit">Spreadsheet-Edit</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>Slice and dice spreadsheets, optionally using tied variables.</td>
<td>2023-02-08T02:01:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Middler">Sub-Middler</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Middleware subroutine chaining</td>
<td>2023-02-27T08:32:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sys-GetRandom">Sys-GetRandom</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>Perl interface to getrandom(2)</td>
<td>2023-02-10T00:59:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Chemistry-Element">TableData-Chemistry-Element</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Chemical elements</td>
<td>2023-02-05T09:40:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-BBIA">TableDataBundle-Business-ID-BBIA</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of TableData:: modules related to BBIA (Balai Besar Industri Agro)</td>
<td>2023-02-20T12:01:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Test">TableDataBundle-Test</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of more TableData::Test::* modules for testing</td>
<td>2023-02-11T04:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataRole-Spec-TableDef">TableDataRole-Spec-TableDef</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Role to require methods related to TableDef</td>
<td>2023-02-25T01:28:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-RWP">Task-BeLike-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl modules bundle to install from CPAN</td>
<td>2023-02-12T18:05:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Es">Terse-Es</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Elasticsearch.</td>
<td>2023-02-02T21:50:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-CHI">Terse-Plugin-CHI</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse response cache</td>
<td>2023-02-03T19:28:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-Glitch">Terse-Plugin-Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Terse::Plugin::Glitch!</td>
<td>2023-02-12T06:02:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-UA">Terse-Plugin-UA</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse LWP::UserAgent plugin.</td>
<td>2023-02-01T17:48:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Runtime">Terse-Runtime</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Runtime</td>
<td>2023-02-17T22:52:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Builder-SubtestSelection">Test-Builder-SubtestSelection</a></td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>Select subtests by name or by number</td>
<td>2023-02-23T17:20:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-NoTty">Test-NoTty</a></td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td/>
<td>2023-02-26T10:37:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-cpan-versioning">Test-cpan-versioning</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>Testing how CPAN uploader treats non-standard version</td>
<td>2023-02-10T08:51:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Wrap-NoStrip">Text-Wrap-NoStrip</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Line wrapping without stripping the whitespace</td>
<td>2023-02-18T10:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Thread-GoChannel">Thread-GoChannel</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Fast thread queues with go-like semantics</td>
<td>2023-02-24T16:34:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tie-Indirect">Tie-Indirect</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>tie variables to access data located at run-time.</td>
<td>2023-02-07T23:45:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-PopList">Tk-PopList</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Popping a selection list relative to a widget</td>
<td>2023-02-28T17:37:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Meteo">Weather-Meteo</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>Interface to <a href="https://open-meteo.com" rel="nofollow">https://open-meteo.com</a> for historical weather data</td>
<td>2023-02-28T16:13:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-WeatherKit">Weather-WeatherKit</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Apple WeatherKit REST API client</td>
<td>2023-02-22T00:05:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-IdoitAPI">WebService-IdoitAPI</a></td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>a library to access the i-doit JSON RPC API</td>
<td>2023-02-17T14:37:36</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Workflow-Inotify">Workflow-Inotify</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>Linux::Inotify2 wrapper</td>
<td>2023-02-09T19:50:39</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wrapper-GetoptLong">Wrapper-GetoptLong</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-08T04:50:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XS-Parse-Keyword-FromPerl">XS-Parse-Keyword-FromPerl</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>drive XS::Parse::Keyword directly from Perl</td>
<td>2023-02-16T23:33:53</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>109</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>42</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>9</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>8</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>3</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date ANSI-Palette LNATION The great new ANSI::Palette! 2023-02-19T08:11:12 Acme-Matrix LNATION Heavenly digital rain 2023-02-16T16:53:43 Acme-MetaSyntactic-newsradio PERLANCAR Characters from the sitcom Newsradio (1995-1999) 2023-02-18T10:26:03 Alien-CPython3 ZMUGHAL Find or build Python 2023-02-14T09:03:20 Alien-Deno ZMUGHAL Find or build Deno 2023-02-14T09:43:22 Alien-Go ZMUGHAL Find or build Go 2023-02-14T09:22:54 Alien-LLVM ZMUGHAL Find or build LLVM 2023-02-14T09:20:09 Alien-Nodejs … <a href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2053</id>
    <published>2023-03-01T03:02:34Z</published>
    <updated>2023-03-01T03:02:34Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Programming Language Developer Road Map</title>
    <link rel="alternate" href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Perl Syntax: Master the Perl syntax. Get a basic understanding of Perl’s language features, data types, conditional expressions, loops…</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Azmi ŞAHİN</name>
    </author>
    <id>https://medium.com/p/a6ca0667f189</id>
    <published>2023-02-28T11:33:22Z</published>
    <updated>2023-02-28T11:33:22.017000Z</updated>
    <category term="roadmaps"/>
    <category term="language"/>
    <category term="programming"/>
    <category term="developer"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#605 - Trying to save a disappearing language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/605.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In 1492 the Jews were <a href="https://www.jewishvirtuallibrary.org/the-spanish-expulsion-1492">expelled from Spain</a> and 4 years later also from Portugal. Many of those Jews settled in the Ottoman Empire and kept talking and changing their language. This is what created the language we call 'Judeo-Espanyol' or in its modern name 'Ladino'. For 500 years these people kept speaking and improving their language which is now a mix of medieval Spanish, Portuguese, Catalan, Turkish, Greek, Italian, Hebrew, Arabic, and probably a few other languages. These Jews are usually referred to as the 'Sephardic' Jews because 'Sepharad' means Spain in Hebrew. It was originally written using old Hebrew letters called <a href="https://en.wikipedia.org/wiki/Rashi_script">Rashi</a> and <a href="https://en.wikipedia.org/wiki/Solitreo">Solitreo</a>, but in the last 100 years or so it was switched to Latin letters.</p>
<p>Unfortunately due to various reasons (The modernization of Turkey by Atatürk, the Holocaust, emigration to USA, Israel and elsewhere) the majority of remaining Ladino speakers switched to the local language and today there are only a few ten thousands of native Ladino speakers, most of them above 60.</p>
<p>There are various grass-root projects to revitalize the language. One of them is called <a href="https://kantoniko.com/">Kantoniko</a>. It is a multi-lingual dictionary with sample sentences, audio, poster etc. There are also experiments to use the material for educational purposes for people who would like to learn Ladino. The project has some Open Source code written in Python and JavaScript. There is also a lot of data under various Creative-Commons licenses.</p>
<p>I know Python is not your cup of tea, but the whole project might be interesting to some of you and might take a look at it. I recorded a <a href="https://www.youtube.com/playlist?list=PLw7UYp3N0eUYt8ARGB4DbNffB4MPROFDY">series of videos in English</a> about the site and how to contribute to it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/605.html</id>
    <published>2023-02-27T10:00:00Z</published>
    <updated>2023-02-27T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 205</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-205/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-205/</id>
    <published>2023-02-27T00:00:00Z</published>
    <updated>2023-02-27T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 206</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-206/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Shortest Time 10. TASK #2: Array Pairings HEADLINES  Welcome to the Week #206 of The Weekly Challenge.
We have one more addition to the Team PWC, an experience Perl hacker by the name Avery Adams. Thanks for sharing solutions in Perl.
E. Alvarez is back to blogging again and we have another gem from him.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-206/</id>
    <published>2023-02-27T00:00:00Z</published>
    <updated>2023-02-27T00:00:00Z</updated>
  </entry>
  <entry>
  <title>FOSDEM 2023</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem20233"/>
  <id>tag:news.perlfoundation.org,2023-02-22:/post/fosdem20233</id>
  <published>2023-02-22T22:27:23</published>
  <updated>2023-02-22T22:27:23</updated>
  <summary>
  <![CDATA[
     The Perl Raku Foundation would like to thank all of our community volunteers that helped run the TPRF stand at FOSDEM this year. The stand was successful in spreading interest in the Perl and Raku languages and promoting involvement in our communities. A special thank you to Theo van Hoesel for providing these photos. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/96e0d34e72685ee64272a88d5170ad6e0df7312e/fosdem.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Foundation would like to thank all of our community volunteers that helped run the TPRF stand at FOSDEM this year. The stand was successful in spreading interest in the Perl and Raku languages and promoting involvement in our communities. <p> <img src="_ra-rel-mnt_/simplecas/fetch_content/96e0d34e72685ee64272a88d5170ad6e0df7312e/fosdem.png" style="max-width:100%;" /> <p> <img src="_ra-rel-mnt_/simplecas/fetch_content/b2fdf90fae0d6995fa53948dd8aa627e098ce8bb/fosdem2.png" style="max-width:100%;" /> <p> A special thank you to Theo van Hoesel for providing these photos.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#604 - P in LAMP?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/604.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;Depending who you ask the question, you might get different answer. As I am native &lt;strong&gt;Perl&lt;/strong&gt; speaker, I would say it stands for &lt;strong&gt;Perl&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I first came to know about &lt;strong&gt;LAMP&lt;/strong&gt; in the year &lt;strong&gt;1999&lt;/strong&gt; when I was first introduced to &lt;strong&gt;Perl&lt;/strong&gt;. Although the term was first coined by &lt;strong&gt;Michael Kunze&lt;/strong&gt; in the year &lt;strong&gt;1998&lt;/strong&gt;. During that time, &lt;strong&gt;Perl&lt;/strong&gt; and &lt;strong&gt;PHP&lt;/strong&gt; were the only two contenders. Many years later, &lt;strong&gt;Python&lt;/strong&gt; joined the gang. That makes it good fun discussion on what &lt;strong&gt;P&lt;/strong&gt; stands for in &lt;strong&gt;LAMP&lt;/strong&gt;. Those days, Web Development was mostly around &lt;strong&gt;Perl&lt;/strong&gt; and good old friend &lt;strong&gt;CGI&lt;/strong&gt;. Things have changed for good in all these years. We now have plenty of choices to pick from, like &lt;strong&gt;Catalyst&lt;/strong&gt;, &lt;strong&gt;Mojolicious&lt;/strong&gt;, &lt;strong&gt;Dancer2&lt;/strong&gt; etc etc. Most of my time with &lt;strong&gt;Perl&lt;/strong&gt; spent on Web Development. At one place, we had inhouse Web Framework, which worked like a charm but recently when I moved to &lt;a href="https://www.oleeo.com"&gt;Oleeo&lt;/a&gt;, I got the opportunity to work with &lt;strong&gt;Catalyst&lt;/strong&gt;. I am a big fan of &lt;strong&gt;Dancer2&lt;/strong&gt;, so getting on with &lt;strong&gt;Catalyst&lt;/strong&gt; was a little difficult. Having said, I did find some similarities between the two.&lt;/p&gt;
&lt;p&gt;Going back to the topic, &lt;strong&gt;LAMP&lt;/strong&gt;, I remember a &lt;a href="https://dzone.com/articles/lamp-is-dead-long-live-perl-web-frameworks"&gt;blog post&lt;/a&gt; on the same subject going into fine details and variations. It was fun read.&lt;/p&gt;
&lt;p&gt;I also came across this question, &lt;a href="https://askubuntu.com/questions/736203/why-perl-is-included-into-lamp-server"&gt;Why Perl is included into lamp-server?&lt;/a&gt;. I loved the reply to the question. I never thought about it before. Last but not the least, I let you explore this &lt;a href="https://stackoverflow.com/questions/6446385/what-is-the-significance-of-the-p-in-lamp-why-is-it-php-perl-or-python"&gt;Stackoverflow Q&amp;A&lt;/a&gt; on the similar topic.&lt;/p&gt;
&lt;p&gt;My twins always say "My dad is the best", so I borrow their pet statement and say &lt;strong&gt;"Perl is the best language ever"&lt;/strong&gt;. So go on and play with it.&lt;/p&gt;
&lt;p&gt;Enjoy the rest of the newsletter and please keep supporting us as always.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/604.html</id>
    <published>2023-02-20T10:00:00Z</published>
    <updated>2023-02-20T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Outreachy: Looking for Perl/Raku project mentors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy-participation-2023"/>
  <id>tag:news.perlfoundation.org,2023-02-18:/post/outreachy-participation-2023</id>
  <published>2023-02-18T11:21:53</published>
  <updated>2023-02-18T11:21:53</updated>
  <summary>
  <![CDATA[
     As same as the past years, we are looking to participate in Outreachy May to August internships again this year. At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the Mentor description and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per week during the program period. 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>As same as the past years, we are looking to participate in <a href="https://www.outreachy.org/">Outreachy</a> May to August internships again this year.</p>

<p>At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the <a href="https://www.outreachy.org/mentor/#mentor">Mentor description</a> and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per week during the program period.</p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl and Raku Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>For the internship, Outreachy expressly invites women (both cis and trans), trans men, and genderqueer people to apply. We also expressly invite applications from residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latinx, Native American/American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces under-representation, and systemic bias or discrimination in the technology industry of their country is invited to apply. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>First Perl Program</title>
    <link rel="alternate" href="https://medium.com/@blogshub4/first-perl-program-7bf43e6111b3?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@blogshub4/first-perl-program-7bf43e6111b3?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/933/0*2uMdzaAOl_O9Niji.png" width="933"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Hi guys, in this post we will learn how to develop Perl program, we will create a Perl file and print a statement.&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@blogshub4/first-perl-program-7bf43e6111b3?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Blogshub</name>
    </author>
    <id>https://medium.com/p/7bf43e6111b3</id>
    <published>2023-02-17T06:51:22Z</published>
    <updated>2023-02-17T06:51:58.229000Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Perl and Raku Merchandise</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/freewear"/>
  <id>tag:news.perlfoundation.org,2023-02-15:/post/freewear</id>
  <published>2023-02-15T20:15:42</published>
  <updated>2023-02-15T20:15:42</updated>
  <summary>
  <![CDATA[
     Freewear now has Perl and Raku merch. A donation to TPRF is made for each sale. Please everyone share it out via your favorite channels. https://www.freewear.org/PerlandRaku 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Freewear now has Perl and Raku merch. A donation to TPRF is made for each sale. Please everyone share it out via your favorite channels. https://www.freewear.org/PerlandRaku</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>New release of Plack::App::ServiceStatus</title>
    <link href="http://domm.plix.at/perl/2023_02_plack_app_servicestatus.html"/>
    <id>http://domm.plix.at/perl/2023_02_plack_app_servicestatus.html</id>
    <updated>2023-02-14T19:31:17+00:00</updated>
    <category term="perl"/>
    <summary>A few days ago I released version 0.910 of Plack::App::ServiceStatus, a small Plack app that can be used for health checks and general info about your app and its dependencies. Generate ...</summary>
    <content type="html">&lt;p&gt;A few days ago I released &lt;a href="https://metacpan.org/pod/Plack::App::ServiceStatus"&gt;version 0.910 of Plack::App::ServiceStatus&lt;/a&gt;, a small &lt;a href="https://metacpan.org/pod/Plack"&gt;Plack&lt;/a&gt; app that can be used for health checks and general info about your app and its dependencies.&lt;/p&gt;

&lt;h3&gt;Generate buildinfo.json&lt;/h3&gt;

&lt;p&gt;The new version comes with a small script that you can use to gather some info during the build / deployment of your app, which is stored into a file (&lt;code&gt;buildinfo.json&lt;/code&gt;), which than can be displayed by Plack::App::ServiceStatus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~/$ plack_app_service_status_generate_buildinfo.pl --project path/to/repo --output path/to/deployment/buildinfo.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like to add this line to my build pipelines and/or Makefile.&lt;/p&gt;

&lt;h3&gt;Using Plack::App::ServiceStatus&lt;/h3&gt;

&lt;p&gt;You only need to define the Plack app, passing some static info like &lt;code&gt;app name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;, the new &lt;code&gt;buildinfo&lt;/code&gt; file, and define any checks you want to include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my $status = Plack::App::ServiceStatus-&amp;gt;new(
      app           =&amp;gt; 'your app',
      version       =&amp;gt; Your::App-&amp;gt;VERSION,
      buildinfo     =&amp;gt; 'path/to/buildinfo.json'
      DBIC          =&amp;gt; [ $schema, 'select 1' ],
      Elasticsearch =&amp;gt; $es, # instance of Search::Elasticsearch,
  );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then mount ServiceStatus at some convenient route, eg &lt;code&gt;/_status&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; builder {
    mount &amp;quot;/_status&amp;quot; =&amp;gt; $status-&amp;gt;to_app;
    mount &amp;quot;/&amp;quot;        =&amp;gt; $your_app;
  };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when you call &lt;code&gt;/_status&lt;/code&gt; you'll get some information about your service (uptime etc), it's dependencies (eg if we can ping the database) and &lt;strong&gt;all new&lt;/strong&gt; the buildinfo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; {
    &amp;quot;app&amp;quot; : &amp;quot;Your::App&amp;quot;,
    &amp;quot;buildinfo&amp;quot; : {
      &amp;quot;date&amp;quot; : &amp;quot;2023-02-14T17:02:08Z&amp;quot;,
      &amp;quot;git-branch&amp;quot; : &amp;quot;main&amp;quot;,
      &amp;quot;git-commit&amp;quot; : &amp;quot;e8d434ab8e6ad8e93945d704ba115da149525d01&amp;quot;
    },
    &amp;quot;checks&amp;quot; : [
      {
        &amp;quot;name&amp;quot; : &amp;quot;Your::APP&amp;quot;,
        &amp;quot;status&amp;quot; : &amp;quot;ok&amp;quot;
      },
      {
        &amp;quot;name&amp;quot; : &amp;quot;DBIxConnector&amp;quot;,
        &amp;quot;status&amp;quot; : &amp;quot;ok&amp;quot;
      }
    ],
    &amp;quot;hostname&amp;quot; : &amp;quot;39132fc9cd48&amp;quot;,
    &amp;quot;started_at&amp;quot; : 1676394140,
    &amp;quot;started_at_iso8601&amp;quot; : &amp;quot;2023-02-14T17:02:20Z&amp;quot;,
    &amp;quot;uptime&amp;quot; : 4714,
    &amp;quot;version&amp;quot; : 0.913
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use this endpoint for health checks, general monitoring, showing debug info in a frontend / mobile app, etc. Or just watch it and be happy that everything works!&lt;/p&gt;</content>
    <category term="release"/>
    <category term="Perl"/>
    <category term="OpenSource"/>
  </entry>
</feed>
