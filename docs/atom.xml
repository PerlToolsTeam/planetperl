<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-08-01T12:49:08Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2873449783852866229</id>
    <published>2021-08-01T09:11:00.000+02:00</published>
    <updated>2021-08-01T09:11:36.496+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-2.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40&lt;/strong&gt; on 2021-07-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.38 was 1 year, 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.025&lt;/strong&gt; on 2021-07-30&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.024 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.55&lt;/strong&gt; on 2021-07-29&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 1.53 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.76' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.76&lt;/strong&gt; on 2021-07-27&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.75 was 6 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2021-07-29&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SSIMMS/PDF-API2-2.041' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Facilitates the creation and modification of PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.041&lt;/strong&gt; on 2021-07-28&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.040 was 3 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.054' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.054&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.019 was 3 years, 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302186' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302186&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 170&lt;/li&gt;  &lt;li&gt;Previous version: 1.302185 was 2 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000141' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000141&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000140 was 2 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012004&lt;/strong&gt; on 2021-07-31&lt;/li&gt;  &lt;li&gt;Votes: 127&lt;/li&gt;  &lt;li&gt;Previous version: 1.012003 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2873449783852866229/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2873449783852866229"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2873449783852866229"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclii-10-great-cpan-modules-released.html" title="(ccclii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7029599714201969129</id>
    <published>2021-08-01T08:49:00.001+02:00</published>
    <updated>2021-08-01T08:49:21.221+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxviii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/01 06:48:13 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Backup::Duplicity::YADW" target="_blank"&gt;Backup::Duplicity::YADW&lt;/a&gt; - Yet Another Duplicity Wrapper&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Backup::EZ" target="_blank"&gt;Backup::EZ&lt;/a&gt; - Simple backups based on rsync.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Application::Plugin::TT::Any" target="_blank"&gt;CGI::Application::Plugin::TT::Any&lt;/a&gt; - load CGI::Application::Plugin::TT with any TT-compatible class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Template::Alloy" target="_blank"&gt;Dancer2::Template::Alloy&lt;/a&gt; - Template::Alloy engine for Dancer2&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Docker::CLI::Wrapper" target="_blank"&gt;Docker::CLI::Wrapper&lt;/a&gt; - a wrapper for the CLI of docker and compatible tools.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Collector" target="_blank"&gt;File::Collector&lt;/a&gt; - Base class for custom File::Collector classes for classifying files and calling File::Collector::Processor methods for processing files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lang::Go::Mod" target="_blank"&gt;Lang::Go::Mod&lt;/a&gt; - parse and model go.mod files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::AutoFilter" target="_blank"&gt;Template::AutoFilter&lt;/a&gt; - Template::Toolkit with automatic filtering&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Stash::AutoEscaping" target="_blank"&gt;Template::Stash::AutoEscaping&lt;/a&gt; - escape automatically in Template-Toolkit.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::PO" target="_blank"&gt;Text::PO&lt;/a&gt; - Read and write PO files&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::UpdateCPANfile" target="_blank"&gt;App::UpdateCPANfile&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Rmap" target="_blank"&gt;Data::Rmap&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Traverse" target="_blank"&gt;Data::Traverse&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Walk" target="_blank"&gt;Data::Walk&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Handler" target="_blank"&gt;DBIx::Handler&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME" target="_blank"&gt;Email::MIME&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Stuffer" target="_blank"&gt;Email::Stuffer&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter" target="_blank"&gt;Exporter&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::CBuilder" target="_blank"&gt;ExtUtils::CBuilder&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LinkEmbedder" target="_blank"&gt;LinkEmbedder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mock::MonkeyPatch" target="_blank"&gt;Mock::MonkeyPatch&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=457)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::HTTP::Server" target="_blank"&gt;Net::Async::HTTP::Server&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Format" target="_blank"&gt;Number::Format&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::CSV" target="_blank"&gt;Parse::CSV&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=165)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=380)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlX::Maybe" target="_blank"&gt;PerlX::Maybe&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown" target="_blank"&gt;Pod::Markdown&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promises" target="_blank"&gt;Promises&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=109)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Identify" target="_blank"&gt;Sub::Identify&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Construct" target="_blank"&gt;Syntax::Construct&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Alloy" target="_blank"&gt;Template::Alloy&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny" target="_blank"&gt;Template::Tiny&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=133)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockObject" target="_blank"&gt;Test::MockObject&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Xslate" target="_blank"&gt;Text::Xslate&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/true" target="_blank"&gt;true&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7029599714201969129/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7029599714201969129"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7029599714201969129"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxviii-metacpan-weekly-report.html" title="(cdlxxviii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 123: Ugly Numbers and Square Points</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/07/perl-weekly-challenge-123-ugly-numbers-and-square-points.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10329</id>
    <published>2021-08-01T03:31:57Z</published>
    <updated>2021-08-01T03:34:30Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 123 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-123/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due on August 1, 2021 at 24:00. This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Ugly Numbers</h2>

<p><em>You are given an integer <code>$n</code> >= 1.</em></p>

<p><em>Write a script to find the $nth element of Ugly Numbers.</em></p>

<pre><code>Ugly numbers are those number whose prime factors are 2, 3 or 5. For example, the first 10 Ugly Numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12.
</code></pre>

<p><em>Example</em></p>

<pre><code>Input: $n = 7
Output: 8

Input: $n = 10
Output: 12
</code></pre>

<h3>Ugly Numbers in Raku</h3>

<p>The <code>is-ugly</code> subroutine finds whether its input value is ugly by dividing it by 2, 3 and 5 as long as it can do it evenly. At the end, the number is ugly if the end result is 1.</p>

<p>The program then simply builds an infinite lazy list of ugly numbers. The n<em>th</em> ` ugly number is just the n<em>th</em> number of that list.</p>

<pre><code>use v6;

sub is-ugly (UInt $in is copy where * &gt; 0) {
    for 2, 3, 5 -&gt; $div {
        $in div= $div while $in %% $div;
    }
    return $in == 1;
}
my $ugly-nrs = grep {is-ugly $_}, (1...Inf);
my $n = @*ARGS[0] // 7;
say $ugly-nrs[$n-1];
</code></pre>

<p>Some sample executions:</p>

<pre><code>$ raku ./ugly-nrs.raku
8
-
$ raku ./ugly-nrs.raku 10
12
-
$ raku ./ugly-nrs.raku 100
1536
</code></pre>

<h3>Ugly Numbers in Perl</h3>

<p>The <code>is-ugly</code> subroutine is essentially similar to its counterpart in Raku: it finds whether its input value is ugly by dividing it by 2, 3 and 5 as long as it can do it evenly. At the end, the number is ugly if the end result is 1.</p>

<p>The rest or the program is quite different because there is no lazy list in Perl. So we basically use an infinite loop and test the successive integers for ugliness. The program counts the ugly numbers, and it prints out the number and exits the loop when the target range is reached.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_ugly {
    my $in = shift;
    for my $div (2, 3, 5) {
        $in /= $div while $in % $div == 0;
    }
    return $in == 1;
}

my $n = shift // 7;
my $i = 0;
my $count = 0;
while (1) {
    $count ++;
    $i++ if is_ugly $count;
    say $count and last if $i == $n
}
</code></pre>

<p>Some sample executions:</p>

<pre><code>$ perl ./ugly-nrs.pl
8

$ perl ./ugly-nrs.pl 10
12

$ perl ./ugly-nrs.pl 100
1536
</code></pre>

<h2>Task 2: Square Points</h2>

<p><em>You are given coordinates of four points i.e. (x1, y1), (x2, y2), (x3, y3) and (x4, y4).</em></p>

<p><em>Write a script to find out if the given four points form a square.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: x1 = 10, y1 = 20
       x2 = 20, y2 = 20
       x3 = 20, y3 = 10
       x4 = 10, y4 = 10
Output: 1 as the given coordinates form a square.

Input: x1 = 12, y1 = 24
       x2 = 16, y2 = 10
       x3 = 20, y3 = 12
       x4 = 18, y4 = 16
Output: 0 as the given coordinates doesn't form a square.
</code></pre>

<p>How do we determine whether four points form a square? There is undoubtedly a number of ways to do that, but it seems to me that the easiest is to check whether the four edges of the quadrilateral are equal. The problem, though, is that we can compute 6 distances between four points, 4 or which are the edges, and two the diagonals. But we don&#8217;t know in advance which distance will be the edges and which will be the diagonals. So, essentially, for the six possible distances in a square, we expect four to be equal (the edges) and 2 others with a distance equal to the edge length multiplied by the square root of 2.</p>

<p>This is what we find with the distances computed in the first test case provided with the task:</p>

<pre><code>([x =&gt; 10 y =&gt; 20] [x =&gt; 20 y =&gt; 20]) 10
([x =&gt; 10 y =&gt; 20] [x =&gt; 20 y =&gt; 10]) 14.142135623730951
([x =&gt; 10 y =&gt; 20] [x =&gt; 10 y =&gt; 10]) 10
([x =&gt; 20 y =&gt; 20] [x =&gt; 20 y =&gt; 10]) 10
([x =&gt; 20 y =&gt; 20] [x =&gt; 10 y =&gt; 10]) 14.142135623730951
([x =&gt; 20 y =&gt; 10] [x =&gt; 10 y =&gt; 10]) 10
</code></pre>

<p>It seems likely that having two values for the six distances might be sufficient. But I would rather test that one of the distance values appears four times.</p>

<h3>Square Points in Raku</h3>

<p>People who know me know that I am not really a great fan of object-oriented programming, but, in this case, I found that implementing a very simple <code>Point</code> class made some sense. The <code>dist</code> subroutine takes two <code>Point</code> objects as input parameters. Otherwise, the <code>build4point</code> subroutine creates four points from a list of numeric parameters.</p>

<p>The program computes the six possible distances between the four points, and confirm that the four points form a square if there are four distances that are equal. Note that, for &#8220;oblique&#8221; squares, it might be necessary to round the distances before comparing them, but that might lead to false squares. So there is a trade-off, and I&#8217;m not sure how to handle it. The program below doesn&#8217;t try to handle such specific cases.</p>

<pre><code>use v6;

class Point {
    has $.x;    # abscissa
    has $.y;    # ordinate

    method gist { return "[x =&gt; $!x y =&gt; $!y]"}
}

sub dist (Point $a, Point $b) {
    return sqrt( ($b.x - $a.x)² + ($b.y - $a.y)² );
}

sub build4points (@in) {
    my @points;
    for @in -&gt; $x, $y {
        push @points, Point.new(x =&gt; $x, y =&gt; $y)
    }
    return @points;
}

my @tests = &lt;10 20 20 20 20 10 10 10&gt;, 
            &lt;12 24 16 10 20 12 18 18&gt;;
for @tests -&gt; @test {
    my @p = build4points @test;
    my %dist;
    for (@p).combinations: 2 -&gt; $c {
        %dist{dist($c[0], $c[1])}++;
    }
    # say %dist;
    print @test, " =&gt; ";
    if any(values %dist) == 4 {say 1;} else {say 0}
}
</code></pre>

<p>This program displays the follwing output:</p>

<pre><code>$ raku .:square-points.raku
10 20 20 20 20 10 10 10 =&gt; 1
12 24 16 10 20 12 18 18 =&gt; 0
</code></pre>

<h3>Square Points in Perl</h3>

<p>We are not using OO-programming in Perl, but the algorithm is essentially the same.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

sub dist {
    my ($p1, $p2) = @_;
    sqrt(($p2-&gt;{x} - $p1-&gt;{x}) ** 2 + ($p2-&gt;{y} - $p1-&gt;{y}) ** 2);
}

sub build4points {
    my @i = @_;
    my @p;
    for (1..4) {
        push @p, { x =&gt; shift, y =&gt; shift };
    }
    return @p;
}
my @tests = ( [ qw/10 20 20 20 20 10 10 10/ ],
              [ qw/12 24 16 10 20 12 18 18/ ] );
for my $test (@tests) {
    my @points = build4points(@$test);
    my %dist;
    for my $p ( [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3] ) {
        my $distance =  dist($points[$p-&gt;[0]], $points[$p-&gt;[1]]);
        $dist{$distance}++
    }
    # say Dumper \%dist;
    print "@$test =&gt; ";
    if ( grep { $_ == 4 } values %dist) {
        say 1;
    } else {
        say 0;
    }
}
</code></pre>

<p>This progralm diusplays the following output:</p>

<pre><code>$ perl ./square-points.pl
10 20 20 20 20 10 10 10 =&gt; 1
12 24 16 10 20 12 18 18 =&gt; 0
</code></pre>

<p>## Wrapping up</p>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 8, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy-POD">Acme-PERLANCAR-Dummy-POD</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Dummy distribution for various POD testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ClipboardUtils">App-ClipboardUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to clipboard</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DiffPDFText">App-DiffPDFText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Diff the text of two PDF documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Easer">App-Easer</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Simplify writing (hierarchical) CLI applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleFeaturesUtils">App-ModuleFeaturesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>CLI Utilities related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Phoebe">App-Phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>4.01</td>
<td>4.01</td>
<td>a Gemini-based wiki</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arxiv2bib">App-arxiv2bib</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Extract bibliographic data from the arXiv API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-efm_perl">App-efm_perl</a></td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>0.01</td>
<td>1.0.0</td>
<td>It's new $module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-grep-url">App-grep-url</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Print lines having URL(s) (optionally of certain criteria) in them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-quickabspath">App-quickabspath</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Print the absolute path</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-intrange">App-seq-intrange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Like seq, but accepts intrange specification (e.g. 1,5-10,15)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-numseq">App-seq-numseq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like seq, but accepts numseq specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-List-Utils-MoveElement">Bencher-Scenarios-List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Scenarios to benchmark List::Utils::MoveElement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Book-Collate">Book-Collate</a></td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Tools to Collate and Report Text Documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-Session-Store-Redis-Fast">Catalyst-Plugin-Session-Store-Redis-Fast</a></td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1.000</td>
<td>1.001</td>
<td>lib/Catalyst/Plugin/Session/Store/Redis/Fast.pm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clipboard-Any">Clipboard-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Common interface to clipboard manager functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Messages">Cucumber-Messages</a></td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>17.0.0</td>
<td>17.0.0</td>
<td>A library for (de)serializing Cucumber protocol messages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-ManipX-Almanac">Date-ManipX-Almanac</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_901</td>
<td>0.001_01</td>
<td>Add almanac date/time functionality (sunrise, etc.) to Date::Manip</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-Format-JP">DateTime-Format-JP</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Japanese DateTime Parser and Formatter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Desktop-Open">Desktop-Open</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Open a file or URL in the user's preferred application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Prereqs-From-cpmfile">Dist-Zilla-Plugin-Prereqs-From-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Register prereqs from cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-EA">Evo-EA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Perl extension for evolutionary algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-GA">Evo-GA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.13</td>
<td>Perl extension for genetic algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Immune">Evo-Immune</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for GA for the biological immune system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Inference">Evo-Inference</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for an Inference engine for Evolutionary Algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-MoreUtils">File-Temp-MoreUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Provide more routines related to creating temporary files/dirs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Timer">Future-Timer</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>timer implemented as Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-Hashed">Getopt-EX-Hashed</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9905</td>
<td>Hash store object automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphite-Simple">Graphite-Simple</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IntRange-Iter">IntRange-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Generate a coderef iterator from an int range specification (e.g. '1,5-10,20')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSONSchema-Validator">JSONSchema-Validator</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Validator for JSON Schema Draft4 and OpenAPI Specification 3.0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-Go-Mod">Lang-Go-Mod</a></td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>parse and model go.mod files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Utils-MoveElement">List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Move elements of a list, optionally with XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Cryptarithm">Math-Cryptarithm</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.02</td>
<td>0.02</td>
<td>Solving simple cryptarithm.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-FeaturesUtil-Get">Module-FeaturesUtil-Get</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Get a feature</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-cpmfile">Module-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Parse cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Leds">Mojo-Leds</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>1.02</td>
<td>Leds aka Light Environment (emi) for Development System based on Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-MongoDBv2">Mojolicious-Plugin-MongoDBv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Mongodbv2">Mojolicious-Plugin-Mongodbv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.02</td>
<td>1.00</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Restify-OtherActions">Mojolicious-Plugin-Restify-OtherActions</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Mojolicious plug-in which extends Restify with more actions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Route">Mojolicious-Plugin-Route</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plugin to loader files of routes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-MouseTypeConstraints">MooX-MouseTypeConstraints</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Mouse type constraints for Moo</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Guidonian">Music-Guidonian</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a "Guidonian Hand" melodic phrase generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Magallanes">Net-Magallanes</a></td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>encapsulation of API calls to RIPE Atlas project.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NumSeq-Iter">NumSeq-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Generate a coderef iterator from a number sequence specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Final">Object-Pad-SlotAttr-Final</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare Object::Pad slots readonly after construction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Trigger">Object-Pad-SlotAttr-Trigger</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>invoke an instance method after a :writer accessor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Ozeki-Libs-Rest">Ozeki-Libs-Rest</a></td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>You can use this module to send SMS messages with the Ozeki SMS Gateway using Perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-Args-Common">Perinci-Sub-Args-Common</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A collection of common subroutine argument specifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-PrereqScanner-Scanner-TestNeeds">Perl-PrereqScanner-Scanner-TestNeeds</a></td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>0.001</td>
<td>0.001</td>
<td>scan for modules loaded with Test::Needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/QRCode-Base45">QRCode-Base45</a></td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Base45 encoding used in QR codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-DefHash">Regexp-Pattern-DefHash</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to DefHash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-IntRange">Regexp-Pattern-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-URI">Regexp-Pattern-URI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to URI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2-FFI">SDL2-FFI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.05</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Manual">Sah-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Documentation for Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Bencher">Sah-Schemas-Bencher</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>1.054.0</td>
<td>1.054.1</td>
<td>Sah schemas for Bencher</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-CPANModules">Sah-Schemas-CPANModules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Sah schemas for Acme::CPANModules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-IntRange">Sah-Schemas-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Sah schemas for various integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ModuleFeatures">Sah-Schemas-ModuleFeatures</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-NumSeq">Sah-Schemas-NumSeq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas for number sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Deprecate">Sub-Deprecate</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Assists in providing deprecation notices to subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TCOD">TCOD</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.009</td>
<td>FFI bindings for libtcod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Fixture-Teng">Test-Fixture-Teng</a></td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>load fixture data to storage for Teng</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mojo-Role-Routes">Test-Mojo-Role-Routes</a></td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Write Mojo tests using named routes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-PO">Text-PO</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Read and write PO files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-QuacksLike">Types-QuacksLike</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001001</td>
<td>Check for object providing all methods from a class or role</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-EN-StopWords">WordList-EN-StopWords</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>English stop words</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>34</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-PERLANCAR-Dummy-POD PERLANCAR 0.001 0.005 Dummy distribution for various POD testing App-ClipboardUtils PERLANCAR 0.001 0.001 CLI utilities related to clipboard App-DiffPDFText PERLANCAR 0.001 0.002 Diff the text of two PDF documents App-Easer POLETTIX 0.001 0.002 Simplify writing (hierarchical) CLI applications App-ModuleFeaturesUtils PERLANCAR 0.001 0.003 CLI Utilities related to Module::Features App-Phoebe SCHROEDER … <a href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1949</id>
    <published>2021-08-01T00:01:20Z</published>
    <updated>2021-08-01T00:01:20Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>How deep is a recursion in Perl?</title>
  <summary type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></summary>
  <updated>2021-07-31T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/how-deep-is-the-recursion"/>  <id>https://perlmaven.com/how-deep-is-the-recursion</id>
  <content type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>perlbrew improved</title>
    <link rel="alternate" href="https://dev.to/drhyde/perlbrew-improved-23k9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I like to keep all my builds of perl under the control of <code>perlbrew</code>, so I can easily switch between them. I occasionally need to build a version of perl that hasn't been released yet, and maybe hasn't even been merged into <code>blead</code> (which is what the perl5 project calls the <code>master</code> branch). That's fine, perlbrew can just build from a git checkout. However, you need to give it some extra arguments to avoid confusion (you generally don't want it to build something called 'perl-5.35.3' when that's just the latest version to have been released in the repo, but not what you're actually building) and to help you remember which build is which. So, as is traditional for a Unixy gentleman with a problem to solve, I wrote a small shell script.</p>

<p>Source <a href="https://github.com/DrHyde/configurations/blob/master/bash/dot-bash_functions.d/perlbrew-git-install">this</a> into your shell after loading perlbrew and if you then say <code>perlbrew git-install</code> from the root of a git repository it will build a perl called <code>git-$reponame-$branchname-$commit</code>.</p>

</div>
    </content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/perlbrew-improved-23k9</id>
    <published>2021-07-30T23:03:59Z</published>
    <updated>2021-07-30T23:03:59Z</updated>
    <category term="perl"/>
    <category term="git"/>
    <category term="perlbrew"/>
  </entry>
  <entry>
    <title>Are you using Cache::Memcached and its -&gt;stats method?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lee_j/2021/07/using-cachememcached-and-its--stats-method.html"/>
    <id>tag:blogs.perl.org,2021:/users/lee_j//645.10327</id>
    <published>2021-07-29T14:40:55Z</published>
    <updated>2021-07-29T20:12:16Z</updated>
    <author>
        <name>Lee J</name>
        <uri>http://leejo.github.io</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lee_j/">
        <![CDATA[<p>It's very slow if you have more than a few thousand keys in memcached. Not an unusual use case I think? I've got a fix here, which appears to DTRT: <a href="https://rt.cpan.org/Ticket/Display.html?id=138133">https://rt.cpan.org/Ticket/Display.html?id=138133</a>. Maybe? I didn't spend too long looking at memcached's low level wire protocol.</p>

<p>The patch passes all the module's current tests and works for us. It took our CPU load from being pegged at 75% all of the time to being idle. So, if you're using Cache::Memcached, and the ->stats method (which <a href="https://metacpan.org/pod/Cache::Memcached::Fast#Compatibility-with-Cache::Memcached">isn't in the XS version</a> of the module) then you might want this patch.</p>

<p>On that note - who is maintaining Cache::Memcached? The last release was in 2012. This isn't a high river module, but any app of significant size or age is *probably* using it and if they're using the ->stats method then ... Sure there's the ::Fast version, but I suspect this version is in a lot of places.</p>

<p>So if you know someone who knows someone who can prod the current maintainers then please point them at this post/patch. If you're using Cache::Memcached then perhaps try out this patch as well.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Release 1.56 of perl-workflow, a bug fix release</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-56-of-perl-workflow-a-bug-fix-release-4dj5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>With release 1.55 we unfortunately introduced a minor bug as observed by the <a href="https://www.openxpki.org/">OpenXPKI</a> project.</p>

<p>A <em>workaround</em> was implemented and due to fast feedback we where able to get the issue pin-pointed for correction. The only issue delaying this important bug fix release was summer holidays, but we have just shipped and we are now focusing our attention to our upcoming 2.0 release.</p>

<p>This change in focus will mean that we will only be making bug fix releases to the 1.X branch. Since we are doing <em>trunk</em> based development, the <em>master</em> branch is currently considered unstable, installations and use should be based on official releases.</p>

<p>We still have some way to go before the first pre-release of 2.0 will be uploaded to CPAN, but I am confident that it will be completed within the next weeks, since holiday season is good to open source.</p>

<ul>
<li>The <a href="https://github.com/jonasbn/perl-workflow/milestone/14">2.0 milestone is documented here</a>, as in a list of PRs and issues</li>
<li>And the <a href="https://github.com/jonasbn/perl-workflow/projects/1">2.0 projected road map is documented here</a> as a set of notes and issues.</li>
</ul>

<p>Here follows the change log of release 1.56.</p>

<h2>
  <a href="#change-log">
  </a>
  Change Log
</h2>

<p>The original is <a href="https://github.com/jonasbn/perl-workflow/releases/tag/1.56">available on GitHub</a></p>

<h2>
  <a href="#156-20210728-bug-fix-release-update-recommended">
  </a>
  1.56 2021-07-28 Bug fix release, update recommended
</h2>

<ul>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/139">#139</a> addresses an issue introduced in 1.55, where action configurations would contain unnecessary information</p></li>
<li><p>Elimination of global state, with improved abstraction the complexity could be removed via PR <a href="https://github.com/jonasbn/perl-workflow/pull/140">#140</a></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/141">#141</a> improves test suite, following up on PR <a href="https://github.com/jonasbn/perl-workflow/pull/131">#131</a></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/132">#132</a> follows up on issue <a href="https://github.com/jonasbn/perl-workflow/issues/129">#129</a> by improving documentation on group property of Workflow::Action</p></li>
<li><p>Elimination of warning about undefined value, which surfaced with release 1.55, adressed with PR <a href="https://github.com/jonasbn/perl-workflow/pull/135">#135</a></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/131">#131</a> documents the importance of overriding <code>init</code> for processing of parameters and not using <code>new</code></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/130">#130</a> addresses issue <a href="https://github.com/jonasbn/perl-workflow/issues/129">#129</a>, respects encapsulation by adhering to the API</p></li>
<li><p>Improves some error and log messages via PR <a href="https://github.com/jonasbn/perl-workflow/pull/128">#128</a></p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1-56-of-perl-workflow-a-bug-fix-release-4dj5</id>
    <published>2021-07-29T17:50:24Z</published>
    <updated>2021-07-29T17:50:24Z</updated>
    <category term="perl"/>
    <category term="opensource"/>
    <category term="release"/>
  </entry>
  <entry>
    <title>Zapp: Runbook Automation</title>
    <link rel="alternate" href="https://dev.to/preaction/zapp-runbook-automation-451g" type="text/html"/>
    <content type="html">&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/preaction"&gt;
        preaction
      &lt;/a&gt; / &lt;a href="https://github.com/preaction/Zapp"&gt;
        Zapp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create plans for your Minions to run
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I hate runbooks. I've been an SRE from since we were called webmasters. In all this time, the least helpful part of my job has been the lists of commands to run when there's a problem. Often out-of-date, frequently lacking in context, and altogether useless when production is burning around you and clients are banging on the door. I'm a programmer. I don't perform tedious tasks, I automate them. Why, then, should I like documenting tedious tasks?&lt;/p&gt;

&lt;p&gt;I hate &lt;a href="https://www.jenkins.io"&gt;Jenkins&lt;/a&gt;. No, that's not quite true. I'm disappointed in Jenkins. Parameterized builds could be such a useful tool, but the input form they provide the end-user is ugly at best, incomprehensible at worst. Jenkins's pipeline syntax opens the door to some truly amazing abilities, but there's no way for me to package those abilities in a way I can simply give to someone without training them on how to navigate Jenkins's UI.&lt;/p&gt;

&lt;p&gt;To solve these problems, I wrote &lt;a href="https://metacpan.org/pod/Zapp"&gt;Zapp&lt;/a&gt;. In Zapp, I can create a plan as a series of tasks, like a Jenkins build. Plans can have input fields, like a Jenkins parameterized build. Users can then run the plan and see the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Zapp::Task"&gt;Zapp tasks&lt;/a&gt; can be more than a shell command or script. Zapp tasks have their own configuration, so I can provide a friendly form for the user to control what the task will do. Additionally, tasks output typed data that can be used as input to subsequent tasks. When the task executes, it can render its own output to show the end-user what is happening.&lt;/p&gt;

&lt;p&gt;So, I can create a plan that asks a user to input their credentials.&lt;br&gt;
￼&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdoqYRZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oju8cu23smeu63n50cgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdoqYRZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oju8cu23smeu63n50cgz.png" alt="Zapp form showing two inputs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, the plan can fetch an authentication token using those credentials.&lt;br&gt;
￼&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVEh5UVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lc9csiticip0wwy3k3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVEh5UVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lc9csiticip0wwy3k3r.png" alt="Zapp form for GetOAuth2Token task"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, with this authentication token, I can perform my request.&lt;br&gt;
￼&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7MZIXHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ar28jn017sgj4hso64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7MZIXHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ar28jn017sgj4hso64.png" alt="Zapp form for Request task"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then when I want to run the plan, I can input my credentials and hit a button. &lt;br&gt;
￼&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0hu5Xzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicug5womej7sklgvc4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0hu5Xzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicug5womej7sklgvc4w.png" alt="Zapp form to run the plan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the job runs, it updates the job page. If any errors occur, the job stops and the failing task shows an error message. I can choose to re-play the job, or I can go back and fix whatever problem there is.&lt;/p&gt;

&lt;p&gt;Zapp isn't limited to automating runbooks. Zapp provides webhook triggers to perform plans automatically. Build your software after a commit is pushed to Github, respond to Slack commands, or (when a future version adds scheduled tasks) run a nightly SQL report. Not only are these tasks automated, but they are easy to configure so that users can support themselves.&lt;/p&gt;

&lt;p&gt;Finally, if Zapp can't do what you want, you can write your own task classes to perform tasks, type classes to accept input from users, and trigger classes to run plans automatically in response to events. Zapp is written in modern Perl using the Mojolicious web framework and the Minion task runner.&lt;/p&gt;

&lt;p&gt;With Zapp, I can make tedious support processes into a single web form, or even a single click. As needs change, processes can be tweaked using a friendly UI. And new types of tasks can be created to provide ever more options for your users.&lt;/p&gt;

&lt;p&gt;Zapp is very much Alpha-grade software right now: I use it personally, but there are bugs and missing features yet. The plugin APIs are pretty solid, though, so you can write your own tasks, types, and triggers. There are a lot of features that Minion provides that Zapp does not yet take advantage of, so there's plenty of possibilities for future development. If you have any questions, suggestions, issues, or want to know if Zapp can work for you, feel free to let me know at &lt;a href="mailto:doug@preaction.me"&gt;doug@preaction.me&lt;/a&gt; or on &lt;a href="https://web.libera.chat/#mojo-yancy"&gt;irc.libera.chat in #mojo-yancy&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Doug Bell</name>
    </author>
    <id>https://dev.to/preaction/zapp-runbook-automation-451g</id>
    <published>2021-07-29T00:08:12Z</published>
    <updated>2021-07-29T00:08:12Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
    <title>The Funhouse Mirror of Perl Criticism</title>
    <link rel="alternate" href="https://dev.to/mjgardner/the-funhouse-mirror-of-perl-criticism-42kc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/">Last week’s article</a> got a <a href="https://news.ycombinator.com/item?id=27902296">great response on Hacker News</a>, and this particular comment caught my eye:</p>

<blockquote>
<p>I think this is the real point about Perl code readability: it gives you enough flexibility to do things however you like, and as a result many programmers are faced with a mirror that reflects their own bad practices back at them.</p>

<p><a href="https://news.ycombinator.com/item?id=27905212"><em>orev, Hacker News</em></a></p>
</blockquote>

<p>This is why <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Damian Conway’s <em>Perl Best Practices</em></a> (2005) is one of my favorite books and <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic"><code>perlcritic</code></a>, the code analyzer is one of my favorite tools. (Though the former could do with an update and the latter includes policies that contradict Conway.) Point <code>perlcritic</code> at your code, maybe add some <a href="https://metacpan.org/search?q=Perl%3A%3ACritic%3A%3APolicy">other policies</a> that agree with your house style, and gradually ratchet up the <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#-severity-NAME">severity level</a> from “gentle” to “brutal.” <strong>All kinds of bad <em>juju</em> will come to light</strong> , from <a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitBooleanGrep">wastefully using <code>grep</code></a> to having <a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitManyArgs">too many subroutine arguments</a> to catching <a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProtectPrivateVars">private variable use from other packages</a>. <code>perlcritic</code> offers a useful baseline of conduct and you can always customize <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#CONFIGURATION">its configuration</a> to your own tastes.</p>

<p>The other conformance tool in a Perl developer’s belt is <a href="https://metacpan.org/dist/Perl-Tidy/view/bin/perltidy"><code>perltidy</code></a>, and it too has a <a href="https://metacpan.org/dist/Perl-Tidy/view/bin/perltidy#-pbp,-perl-best-practices">Conway-compatible configuration</a> as well as its default <a href="https://perldoc.perl.org/perlstyle">Perl Style Guide</a> settings. I’ve found that more than anything else, <strong><code>perltidy</code> helps settle arguments</strong> both between developers and between their code in helping to avoid excessive merge conflicts.</p>

<p>But apart from extra tools, Perl the language itself can be bent and even broken to suit just about anyone’s agenda. Those used to more <a href="http://catb.org/jargon/html/B/bondage-and-discipline-language.html">bondage-and-discipline languages</a> <em>(hi, Java!)</em> might feel revulsion at the lengths to which this has sometimes been taken, but per the quote above this is <strong>less an indictment of the language and more of its less methodical programmers</strong>.</p>

<p>Some of this behavior can be rehabilitated with <code>perlcritic</code> and <code>perltidy</code>, but what about other sins attributed to Perl? Here are a few perennial “favorites”:</p>

<h2>
  <a href="#objects-and-objectoriented-programming">
  </a>
  Objects and Object-Oriented Programming
</h2>

<p>Perl has a <a href="https://perldoc.perl.org/perlobj">minimalist object system</a> based on earlier-available language concepts like <a href="https://perldoc.perl.org/perlobj#An-Object-is-Simply-a-Data-Structure">data structures</a> (often hashes, which it <a href="https://www.quirksmode.org/js/associative.html">has in common with JavaScript</a>), <a href="https://perldoc.perl.org/perlobj#A-Class-is-Simply-a-Package">packages</a>, and <a href="https://perldoc.perl.org/perlobj#A-Method-is-Simply-a-Subroutine">subroutines</a>. Since Perl 5’s release in 1994 much verbose OO code has been written using these tools.</p>

<p>The good news is that since 2007 we’ve had a sophisticated metaobject-protocol-based layer on top of them called <a href="https://metacpan.org/pod/Moose">Moose</a>, since 2010 a lightweight but forward-compatible system called <a href="https://metacpan.org/pod/Moo">Moo</a>, and a couple of even tinier options <a href="https://perldoc.perl.org/perlootut#OO-System-Summary">as described in the Perl OO Tutorial</a>. Waiting in the wings is <a href="https://github.com/Ovid/Cor/wiki">Corinna</a>, an effort to bring next-generation object capabilities into the Perl core itself, and <a href="//Object::Pad%20-%20a%20simple%20syntax%20for%20lexical%20slot-based%20objects%20-%20metacpan.org">Object::Pad</a>, a testbed for some of the ideas in Corinna that you can use today in current code. (Really, please try it—the author <a href="https://twitter.com/cpan_pevans/status/1415596477968261121">needs feedback</a>!)</p>

<p>All this is to say that <strong>99% of the time you never need trouble yourself</strong> with <a href="https://perldoc.perl.org/functions/bless"><code>bless</code></a>, constructors, or writing accessors for class or object attributes. Smarter people than me have done the work for you, and you might even find a concept or three that you wish other languages had.</p>

<h2>
  <a href="#contexts">
  </a>
  <a href="https://perldoc.perl.org/perldata#Context">Contexts</a>
</h2>

<p>There are two major ones: list and scalar. Another way to think of it is “plural” vs. “singular” in <strong>English, which is hopefully a thing you’re familiar with</strong> as you’re reading this blog.</p>

<p>Some functions in Perl act differently depending on whether the expected return value is a list or a scalar, and a function will provide a list or scalar context to its arguments. Mostly these act just as you would expect or would like them to, and you can find out how a function behaves by <a href="https://perldoc.perl.org/perlfunc">reading its documentation</a>. Your own functions can <a href="https://perldoc.perl.org/functions/wantarray">behave like this too</a>, but there’s usually no need as “both scalars and lists are automatically interpreted into lists.” Again, Perl’s <a href="https://perldoc.perl.org/perlglossary#dwimmer">DWIMmery</a> at work.</p>

<h2>
  <a href="#subroutine-and-method-arguments">
  </a>
  Subroutine and Method Arguments
</h2>

<p>I’ve <a href="https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/">already written about this</a>. <a href="https://phoenixtrap.com/2021/02/16/better-perl-more-on-signatures-and-types/">Twice</a>. And <a href="https://phoenixtrap.com/2021/02/11/slides-from-tonights-houston-perl-mongers-presentation/">presented</a> about it. <a href="https://phoenixtrap.com/2021/03/03/tuesday-at-boston-pm-perl-subroutine-signatures-and-type-validation/">Twice</a>. The short version: Perl has <a href="https://perldoc.perl.org/perlsub#Signatures">signatures</a>, but they’ve been considered experimental for a while. In the meantime, there are alternatives on <a href="https://www.cpan.org/">CPAN</a>. You can even have type constraints if you want.</p>




<p>I’ll leave you with this: Over the past month, <a href="http://neilb.org/">Neil Bowers</a> of the <a href="https://perldoc.perl.org/perlgov#The-Steering-Council">Perl Steering Council</a> has been collecting <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/06/msg260705.html">quirks</a> like these from Perl developers. <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/07/msg260915.html">The PSC is reviewing</a> this collection for potential documentation fixes, bug fixes, further discussion, etc. I wouldn’t expect to see any fundamental changes to the language out of this effort, but it’s a good sign that potentially confusing features are being addressed.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/the-funhouse-mirror-of-perl-criticism-42kc</id>
    <published>2021-07-27T14:00:00Z</published>
    <updated>2021-07-27T14:00:00Z</updated>
    <category term="perl"/>
    <category term="bestpractices"/>
    <category term="oop"/>
    <category term="signatures"/>
  </entry>
  <entry>
    <title>Weekly Challenge 123</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-123-2flk" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two nice and quick challenge this week. <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/">Tasks</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-123/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-ugly-numbers">
  </a>
  TASK #1 › Ugly Numbers
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given an integer <code>$n</code> &gt;= 1.</p>

<p>Write a script to find the <code>$n</code><sup>th</sup> element of Ugly Numbers.</p>

<p>Ugly numbers are those number whose prime factors are 2, 3 or 5. For example, the first 10 Ugly Numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This was relatively straight forward, although I'm not sure if my method is the most efficient (took 16 seconds to find the 1,000th ugly number).</p>

<p>I determine if a number is ugly by dividing it by 2, 3, 5 as many times as it leaves no remainder. If the resulting number is 1, then it is ugly.</p>

<p>Then it was just a case of wrapping this in a while loop decreasing <code>$n</code> every time a number is ugly.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 7
8

$ ./ch-1.pl 10
12
</code></pre>

</div>



<h2>
  <a href="#task-2-square-points">
  </a>
  TASK #2 › Square Points
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given coordinates of four points i.e. (x1, y1), (x2, y2), (x3, y3) and (x4, y4).</p>

<p>Write a script to find out if the given four points form a square.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Some fundamental maths is involved with this task, namely:</p>

<ul>
<li>The <a href="https://www.purplemath.com/modules/distform.htm">distance between two points</a> can found by calculating the square root of the sum of the squared difference in each of the x and y values.</li>
<li>For an item to be square, each side must be of equal length.</li>
<li>For an item to be square, the distance between points 1 and 3 must be the same as the distance between 2 and 4.</li>
</ul>

<p>For this task I have a subroutine <code>_distance_between</code> that calculates the distance between two points given (x1, y1, x2 and y2). I also have a subroutine <code>_is_square</code> that will return 0 when one of the above conditions is false, or 1 if it appears to be a square.</p>

<p>One thing to note that the points provided must be sequential. You can't go from top left to bottom right. Since the task specifically mentions the order of the points, this shouldn't be an issue.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 10 20 20 20 20 10 10 10
1

$ ./ch-2.pl 12 24 16 10 20 12 18 16
0
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-123-2flk</id>
    <published>2021-07-27T12:23:24Z</published>
    <updated>2021-07-27T12:23:24Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#522 - Promote Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/522.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I am sure many of you are aware of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt;. It all started with GNOME's Women's Summer Outreach Program (WSOP) in 2006. The idea was to encourage women's participation in Open Source projects. In 2009, the GNOME community revived the program to encourage more women to contribute to GNOME and renamed it to GNOME Outreach Program for Women. It became a very popular program in no time and successfully brought in more women into the fold. The program was further expanded with more organisations joining in e.g. Fedora, Mozilla, JBoss, OpenStack, Subversion etc. With the additions, in 2013, the program was renamed to the Free and Open Source Software Outreach Program. At one point, there were 16 organizations involved in this program. In 2015, the program was again renamed to Outreachy.&lt;/p&gt;
&lt;p&gt;Did I mention Perl in the above discussion?&lt;/p&gt;
&lt;p&gt;Well, in 2014, TPF sponsored an internship for Pattawan Kaewduangdee to work on MetaCPAN under the mentorship of Olaf Alders as a part of the Outreach Program for Women. There is another name that caught my eye, Upasana Shukla. I came across &lt;a href="https://upasana.me/2013/05/18/meta-cpan-debian-wikimedia-twisted-dancer-moose/"&gt;a blog post&lt;/a&gt; by Upasana where she mentioned how GNOME's Outreach Program for Women helped her get into the Perl fold. If you look at the &lt;a href="https://www.outreachy.org/alums/2021-05/"&gt;list of interns&lt;/a&gt; from the Indian subcontinent (India, Pakistan, Bangladesh, Nepal, Sri Lanka) it is amazing. In recent years, TPF has sponsored &lt;a href="https://world.openfoodfacts.org"&gt;Open Food Facts&lt;/a&gt; projects for Outreachy. In 2020, Areesha Tariq, from Pakistan successfully got the internship to work on the Open Food Facts project. Please check out this &lt;a href="https://medium.com/@areeshatariq02/get-a-remote-and-paid-internship-my-outreachy-experience-482a6cfc0564"&gt;blog post&lt;/a&gt; by Areesha sharing her experience. It didn't stop there, a few weeks ago, TPF announced another intern, Rosheen Naeem, again from Pakistan, to work on the Open Food Facts project. You should check out her recent &lt;a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4"&gt;blog post&lt;/a&gt; about her journey. It is very inspiring.&lt;/p&gt;
&lt;p&gt;I would like to thank TPF for supporting the Perl projects and Outreachy.&lt;/p&gt;
&lt;p&gt;I can tell you from my own experience, we have great talent in the Indian Subcontinent. I wish more and more organisations would come forward and sponsor interns from these regions. When I started &lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge - Perl &amp; Raku&lt;/a&gt;, (a.k.a Perl Weekly Challenge), I was hoping to tap into the talent pool from this region, specially young college students. As the tagline says "You do not have to be an expert" to take part in the weekly challenge. Although we do have handful of students from Russia in the team. I am glad that, at least, we have built a platform where geeks from around the world come and share their experiences every week. Maybe one day we will have sponsors to help us reach out to young talent and bring new energy into the Perl community. Sometimes I wonder why we have never had a Perl Conference on the Indian subcontinent just like we have here in Europe and America. It shouldn't be too hard to hold one as these days everything is online. We could invite guest speakers from across the globe to address the talent in the region. Is there anyone out there willing to help us orgranise Perl Conference?&lt;/p&gt;
&lt;p&gt;A humble request to all fellow citizens of the United Kingdom, please don't listen to Boris Johnson (Prime Minister of the UK) and keep wearing masks in public and maintain social distancing.&lt;/p&gt;
&lt;p&gt;Enjoy rest of the newsletter until then.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/522.html</id>
    <published>2021-07-26T10:00:00Z</published>
    <updated>2021-07-26T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 122: Average of Stream and Basketball Points</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/07/perl-weekly-challenge-122-average-of-stream-and-basketball-points.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10314</id>
    <published>2021-07-21T02:19:53Z</published>
    <updated>2021-07-26T03:38:35Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 122 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-122/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days, on July 25, 2021 at 24:00. This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Average of Stream</h2>

<p><em>You are given a stream of numbers, <code>@N</code>.</em></p>

<p><em>Write a script to print the average of the stream at every point.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: @N = (10, 20, 30, 40, 50, 60, 70, 80, 90, ...)
Output:      10, 15, 20, 25, 30, 35, 40, 45, 50, ...

Average of first number is 10.
Average of first 2 numbers (10+20)/2 = 15
Average of first 3 numbers (10+20+30)/3 = 20
Average of first 4 numbers (10+20+30+40)/4 = 25 and so on.
</code></pre>

<p>This is often called a <a href="https://en.wikipedia.org/wiki/Moving_average">moving average</a> or a running average, or, more precisely in this case, a cumulative moving average, since we want to compute the mean of all data received so far.</p>

<p>It is of course possible to keep track of all data seen so far and, each time, to recompute the average from the whole dataset using standard formulas. However, if we have the current average and the number of values from which it was computed, it is quite easy to compute the new average with a new value. Suppose that the average of the first five values of a series is 8. This means that the sum <em>s</em> of the first five values was <em>s = 5 x 8</em> = 40. As a new value, say 2, is taken into account, then the new sum is 42, and the new average is <em>42 / 6 = 7</em>. So the rule it to multiply the current average by the current number of values, to add the new value and to divide this new sum by the new number of values, i.e. the current number of values plus 1.</p>

<h3>Average of Stream in Raku</h3>

<p>Implementing the rule described above is fairly straight forward. For our test, we use an infinite (lazy) arithmetic sequence with a common difference of 10 between two consecutive terms.</p>

<pre><code>use v6;

my @n = 10, 20 ... Inf;
my @cum_moving_avg = @n[0];
for 1..^10 -&gt; $i {
    @cum_moving_avg[$i] = (@cum_moving_avg[$i-1] * $i + @n[$i]) / ($i + 1);
}
say ~@cum_moving_avg;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>raku ./mvg_avg.raku
10 15 20 25 30 35 40 45 50 55
</code></pre>

<p>Note that, with an arithmetic sequence as input, the output sequence of moving average values is also an arithmetic sequence.</p>

<h3>Average of Stream in Perl</h3>

<p>This is an implementation of the same rule in Perl. We cannot use an infinite sequence in Perl, so we simply use an arithmetic sequence of 10 terms.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @n = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
my @mvg_avg = ($n[0]);
for my $i (1..9) {
    $mvg_avg[$i] = ($mvg_avg[$i-1] * $i + $n[$i]) / ($i + 1);
}
say "@mvg_avg";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./mvg_mean.pl
10 15 20 25 30 35 40 45 50 55
</code></pre>

<h3>Average of Stream in Scala</h3>

<p>This is a port to Scala of the Raku and PPerl implementations above:</p>

<pre><code>object root extends App {
  val n = Array.range(10, 101, 10) // (10, 20, ... 100)
  val mvg_avg = new Array[Int](10)
  mvg_avg(0) = n(0)
  for (i &lt;- 1 to 9) {
    mvg_avg(i) = (mvg_avg(i - 1) * i + n(i)) / (i + 1)
  }
  println(mvg_avg.mkString(" "))
}
</code></pre>

<p>This program yields the following result:</p>

<pre><code>10 15 20 25 30 35 40 45 50 55
</code></pre>

<h3>Average of Stream in Python</h3>

<p>A port to Python of the Raku and Perl versions above:</p>

<pre><code>n = list(range(10, 100, 10)) # [10, 20 ... 90]
mvg = [n[0]]
for i in range(1, 9):
    mvg.append((mvg[i-1] * i + n[i])  / (i + 1))
print(mvg)
</code></pre>

<p>Output:</p>

<pre><code>$ python3 mvg_mean.py
[10, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0]
</code></pre>

<h3>Average of Stream in C</h3>

<p>Implementation of  essentially the same algorithm in the C programming language. There is a slight change in the management of indices because the arguments passed to a C program start with <code>argv[1}</code> (since <code>argv[0]</code> contains the program name). Another slight change is that this program doesn&#8217;t populate an array of mean values, but prints out the average value as soon as it is found. This should lead to a smaller memory footprint (which may be useful if the stream is very large).</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[]) {
    int avg = atoi(argv[1]);
    printf("%5i  ", avg);
    for (int i = 1; i &lt; argc - 1; i++) {
        avg = (avg * i + atoi(argv[i+1])) / (i + 1);
        printf("%3i ", avg);
    };
    printf("\n");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out 10 20 30 40 50 60 70 80 90 100
10   15  20  25  30  35  40  45  50  55
</code></pre>

<h3>Average of Stream in Awk</h3>

<p>Again some tweaks on the management of indices because of the specific properties and behavior of arrays in awk, but essentially the same algorithm. </p>

<pre><code>{ 
    avg[0] = $1;
    print $1;
    for (i = 1; i &lt; NF; i++) { 
         avg[i] = (avg[i-1] * i + $(i+1)) / (i+1)
         print avg[i]
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ echo '10 20 30 40 50 60 70 80 90 100
    ' | awk -f mvg_mean.awk
10
15
20
25
30
35
40
45
50
55
</code></pre>

<h3>Average of Stream in D</h3>

<p>The D programming language is similar to C or C°°, except that it is supposed to be more secure.</p>

<pre><code>import std.stdio;
import std.math;
import std.conv;

void main(string[] args) {
    int avg = std.conv.to!int(args[1]);
    printf ("%d ", avg);
    for (int i = 1; i &lt; args.length - 1; i++) {
        avg = (avg * i + std.conv.to!int(args[i+1])) / (i + 1);
        printf("%3d ", avg);
    }
    printf("\n");
}
</code></pre>

<p>Output:</p>

<pre><code>$ mvg-mean.amx 10 20 30 40 50 60 70 80 90 100
10  15  20  25  30  35  40  45  5
</code></pre>

<h2>Task 2: Basketball Points</h2>

<p><em>You are given a score <code>$S</code>.</em></p>

<p><em>You can win basketball points e.g. 1 point, 2 points and 3 points.</em></p>

<p><em>Write a script to find out the different ways you can score <code>$S</code>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $S = 4
Output: 1 1 1 1
        1 1 2
        1 2 1
        1 3
        2 1 1
        2 2
        3 1

Input: $S = 5
Output: 1 1 1 1 1
        1 1 1 2
        1 1 2 1
        1 1 3
        1 2 1 1
        1 2 2
        1 3 1
        2 1 1 1
        2 1 2
        2 2 1
        2 3
        3 1 1
        3 2
</code></pre>

<h3>Basketball Points in Raku</h3>

<p>I initially tried to use the <code>|</code> and <code>X</code> operators and the <code>combinations</code>, <code>unique</code> and some other method invocations to try to generate the values with a single expression, but turned out to be more difficult than I expected. So, I gave up and decided to use a good old recursive subroutine (<code>find-dist</code>) to generate all possible solutions leading to the target value:</p>

<pre><code>use v6;

my $target = @*ARGS[0] // 5;
my @vals = 1, 2, 3;

sub find-dist ($sum, @seq) {
    for @vals -&gt; $i {
        my $new-sum = $sum + $i;
        # if $new-sum &gt; $target, then we don't 
        # need to test other values of @vals and
        # can use return directly instead of next 
        # since these values are in ascending order
        return if $new-sum &gt; $target;
        my @new-seq = |@seq, $i;
        if $new-sum == $target {
            say ~@new-seq;
            return;
        } else {
            find-dist($new-sum, @new-seq);
        }
    }
}
find-dist 0, ();
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ raku ./score-dist.raku
1 1 1 1 1
1 1 1 2
1 1 2 1
1 1 3
1 2 1 1
1 2 2
1 3 1
2 1 1 1
2 1 2
2 2 1
2 3
3 1 1
3 2

$ raku ./score-dist.raku 4
1 1 1 1
1 1 2
1 2 1
1 3
2 1 1
2 2
3 1
</code></pre>

<h3>Basketball Points in Perl</h3>

<p>This a port to Perl of the Raku solution using a recursive subroutine:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $target = shift // 5;
my @vals = (1, 2, 3);

sub find_dist  {
    my ($sum, @seq) = @_;
    for my $i (@vals) {
        my $new_sum = $sum + $i;
        # if $new_sum &gt; $target, then we don't 
        # need to test other values of @vals and
        # can use return instead of next 
        # since these values are in ascending order
        return if $new_sum &gt; $target;
        my @new_seq = (@seq, $i);
        if ($new_sum == $target) {
            say ""@new_seq";
            return;
        } else {
            find_dist($new_sum, @new_seq);
        }
    }
}
find_dist 0, ();
</code></pre>

<p>This program generates the following output:</p>

<pre><code>$ perl score-dist.pl
1 1 1 1 1
1 1 1 2
1 1 2 1
1 1 3
1 2 1 1
1 2 2
1 3 1
2 1 1 1
2 1 2
2 2 1
2 3
3 1 1
3 2

$ perl score-dist.pl 4
1 1 1 1
1 1 2
1 2 1
1 3
2 1 1
2 2
3 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 1, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Average of Stream / Basketball Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/25#pwc122" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a stream of numbers, @N. Write a script to print the average of the stream 
at every point.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub moving_average{
    my $n = 0;
    my $sum = 0;
    {
        $n += 1;
        $sum += shift;
        print $sum / $n;
        print ", " if @_;
        redo if @_;
    }
    print "\n";
}


MAIN:{
    my @N;
    for(my $i = 10; $i &lt; 1_000_000; $i += 10){
        push @N, $i;
    }
    moving_average(@N);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, &lt;OUTPUT TRUNCATED&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Typically when one thinks of a &lt;em&gt;stream&lt;/em&gt; the idea is of a virtually endless source of data.
Or, at least, data which is handled as if this were the case. Here the "stream" is 
simulated by a long (one million items) array.&lt;/p&gt;

&lt;p&gt;The computation of the average as the simulated stream is evaluated is done using a &lt;code&gt;redo&lt;/code&gt;
loop. I would think it is fair to say that typically my code is somewhat verbose. I prefer
to be fairly explicit in that way to enhance readability. Here, however, I try to be more
terse. The "stream" is evaluated by shifting values off the array passed to the function.
The array argument is also used to determine if the block should be repeated, and also
to format the output. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a score $S. You can win basketball points e.g. 1 point, 2 points and 3 
points. Write a script to find out the different ways you can score $S.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub basketball_points{
    my($total) = @_;
    my %points;
    my @valid_points;
    $points{"1"} = "1";
    $points{"2"} = "2";
    $points{"3"} = "3";
    while((keys %points) &gt; 0){
        my %updated_points = ();
        for my $points (keys %points){
            my @points = split(/,/, $points);
            for my $point (1 .. 3){
                my $point_sum = unpack("%32I*", pack("I*",  (@points, $point)));
                push @valid_points, [@points, $point] if $point_sum == $total;
                $updated_points{join(",", (@points, $point))} = $point_sum if $point_sum &lt; $total;
            }
        }
        %points = %updated_points;
    }
    return @valid_points;
}

MAIN:{
    my $S;
    $S = 4;
    print "\$S = $S\n";
    my @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
    $S = 5;
    print "\n\$S = $S\n";
    @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
$S = 4
1 3
2 2
3 1
1 2 1
1 1 2
2 1 1
1 1 1 1

$S = 5
3 2
2 3
3 1 1
2 1 2
1 3 1
2 2 1
1 2 2
1 1 3
1 2 1 1
1 1 1 2
1 1 2 1
2 1 1 1
1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here borrows heavily from the solution to the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;triangle problem&lt;/a&gt; from 
Challenge 117. This is a &lt;em&gt;dynamic programming&lt;/em&gt; style solution which builds and updates
lists of potential point sequences. Uniqueness is guaranteed by saving the lists as hash
keys, in a command separated values string format. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-122/"&gt;Challenge 122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.topcoder.com/thrive/articles/Dynamic%20Programming:%20From%20Novice%20to%20Advanced"&gt;Dynamic Programming&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc122</id>
    <published>2021-07-25T18:53:00-04:00</published>
    <updated>2021-07-25T18:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Random Thought: Exposure of Perl in the Academic Circles</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/07/random-thought-exposure-of-perl-in-the-academic-circles.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10317</id>
    <published>2021-07-22T14:10:57Z</published>
    <updated>2021-07-24T22:33:03Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p>Today I have wandered on the famous academic paper archive and suddenly a thought popped into my mind - use Perl as the keyword in searching.</p>

<p>Computer science papers with "Perl" in the title<br />
<a href="https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Perl&terms-0-field=title&classification-computer_science=y">https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Perl&terms-0-field=title&classification-computer_science=y</a> (8*)</p>

<p>Computer science papers with "Lisp" in the title<br />
<a href="https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Lisp&terms-0-field=title&classification-computer_science=y">https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Lisp&terms-0-field=title&classification-computer_science=y</a> (12**)</p>

<p>Computer science papers with "Ruby" in the title<br />
<a href="https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Ruby&terms-0-field=title&classification-computer_science=y">https://arxiv.org/search/advanced?advanced=1&terms-0-operator=AND&terms-0-term=Ruby&terms-0-field=title&classification-computer_science=y</a> (6***)</p>

<p>Computer science papers with "Julia" in the title<br />
<a href="https://arxiv.org/search/advanced?advanced=&terms-0-term=Julia&terms-0-field=title&classification-computer_science=y">https://arxiv.org/search/advanced?advanced=&terms-0-term=Julia&terms-0-field=title&classification-computer_science=y</a> (53 ****)</p>

<p>For Haskell: ~50</p>

<p>For Java: ~249</p>

<p>For Python: ~357</p>

<p>For Perl Data Language (PDL): 0</p>

<p><br />
Besides writing quality software, organizing conference or blogging, Perl programmers with strong academic background might think of taking a new way to share their favorite functionalities in Perl to the world.</p>

<p>Link: <a href="https://arxiv.org/help/submit">arXiv.org submission guidelines</a><br />
----<br />
* 2 results are not relevant to the Perl programming language.<br />
** 1 result is not relevant to the LISP programming language.<br />
*** Similarly, 2 search results are irrelevant.<br />
**** Similarly, 6 search results are irrelevant.</p>

<p>------<br />
<font color="#CCCCCC"><small>P. S.:<br />
Many members in Perl community seem to share a concern of Perl being marginalized. As a newbie programmer and a selfish person, I also want Perl, a programming language I am "investing" in, can gain certain popularity and thus I can use Perl(Perl7?) in local job hunt in the future, hahaha. Therefore I keep an eye for the Perl's popularity discussion.</small></font></p>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2476729360992330013</id>
    <published>2021-07-24T20:46:00.000+02:00</published>
    <updated>2021-07-24T20:46:21.468+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccli) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997006&lt;/strong&gt; on 2021-07-22&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 0.997004 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.047008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.047008&lt;/strong&gt; on 2021-07-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.047007 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.073' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.073&lt;/strong&gt; on 2021-07-18&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 0.072 was 2 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/DBD-SQLite-1.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Self Contained SQLite RDBMS in a DBI Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.68&lt;/strong&gt; on 2021-07-22&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 1.66 was 10 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.11&lt;/strong&gt; on 2021-07-23&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.10 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.33&lt;/strong&gt; on 2021-07-21&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.31 was 11 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210723' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210723&lt;/strong&gt; on 2021-07-23&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210620 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2021-07-21&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::BDD::Cucumber&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Feature-complete Cucumber-style testing in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.81&lt;/strong&gt; on 2021-07-18&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.79 was 3 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2476729360992330013/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccli-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2476729360992330013"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2476729360992330013"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccli-9-great-cpan-modules-released.html" title="(cccli) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2955062829491661195</id>
    <published>2021-07-24T20:42:00.002+02:00</published>
    <updated>2021-07-24T20:42:29.085+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxvii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/07/24 18:42:05 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Iter" target="_blank"&gt;Array::Iter&lt;/a&gt; - Generate a coderef iterator for an array&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::LRU::WithExpires" target="_blank"&gt;Cache::LRU::WithExpires&lt;/a&gt; - can set an expiration for the Cache::LRU&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Migration" target="_blank"&gt;DBIx::Migration&lt;/a&gt; - Seamless DB schema up- and downgrades&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::Codecovbash" target="_blank"&gt;Devel::Cover::Report::Codecovbash&lt;/a&gt; - Generate a JSON file to be uploaded with the codecov bash script.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager::Plot" target="_blank"&gt;Imager::Plot&lt;/a&gt; - Perl extension for generating fancy graphic plots in color.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IntRange::Iter" target="_blank"&gt;IntRange::Iter&lt;/a&gt; - Generate a coderef iterator from an int range specification (e.g. '1,5-10,20')&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/NewFangle" target="_blank"&gt;NewFangle&lt;/a&gt; - Unofficial Perl NewRelic SDK&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Generator" target="_blank"&gt;OpenAPI::Generator&lt;/a&gt; - generate openapi definition&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Configure" target="_blank"&gt;Perl::Configure&lt;/a&gt; - Answer perl's ./Configure questions reproducibly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::PerlQuote" target="_blank"&gt;String::PerlQuote&lt;/a&gt; - Quote a string as Perl does&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads::lite" target="_blank"&gt;threads::lite&lt;/a&gt; - Actor model threading for Perl&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Future" target="_blank"&gt;AnyEvent::Future&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PPI::Dumper" target="_blank"&gt;App::PPI::Dumper&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::IntSpan" target="_blank"&gt;Array::IntSpan&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Handlers" target="_blank"&gt;Attribute::Handlers&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::LRU" target="_blank"&gt;Cache::LRU&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Database" target="_blank"&gt;Dancer2::Plugin::Database&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::SQLite" target="_blank"&gt;DBD::SQLite&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::BaseDir" target="_blank"&gt;File::BaseDir&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GitLab::API::v3" target="_blank"&gt;GitLab::API::v3&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GitLab::API::v4" target="_blank"&gt;GitLab::API::v4&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Boolean" target="_blank"&gt;Keyword::Boolean&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Gen" target="_blank"&gt;List::Gen&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Expression::Evaluator" target="_blank"&gt;Math::Expression::Evaluator&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Polynomial" target="_blank"&gt;Math::Polynomial&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=455)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quote::Ref" target="_blank"&gt;Quote::Ref&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Starch" target="_blank"&gt;Starch&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Reverse" target="_blank"&gt;Template::Reverse&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Regexp" target="_blank"&gt;Test::Regexp&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/w3mir" target="_blank"&gt;w3mir&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2955062829491661195/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2955062829491661195"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2955062829491661195"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxvii-metacpan-weekly-report.html" title="(cdlxxvii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6566187170168544347</id>
    <published>2021-07-24T20:24:00.000+02:00</published>
    <updated>2021-07-24T20:40:47.201+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(d) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-07-24 18:23:16 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68432655" target="_blank"&gt;Match a character only when not in a quoted field or in between 2 quotes&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68459027" target="_blank"&gt;Regex matching characters of one string in another in any order&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/7]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68475818" target="_blank"&gt;How do I convert an array or a list into a hashref?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68504513" target="_blank"&gt;How to turn a string into a modified hex representation?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68486213" target="_blank"&gt;Advice on Perl map function&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68433498" target="_blank"&gt;Proper Way to Provide Variable to Objects below the present calling subroutine?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68454089" target="_blank"&gt;Perl regex /o optimization or bug?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68500372" target="_blank"&gt;in perl, why does sprintf(Dumper \%hash) throw a warning when the hash contains a long string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68492656" target="_blank"&gt;A system call from my Perl script truncates the address&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68442858" target="_blank"&gt;Perl DBI / MS ODBC Driver (LinuxL:RHEL) / SQL-Server: How to insert/update BLOB varbinary(max) data?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6566187170168544347/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/d-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6566187170168544347"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6566187170168544347"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/d-stackoverflow-perl-report.html" title="(d) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Deep recursion on subroutine</title>
  <summary type="html"><![CDATA[<p>
When calling a function in <a href="/pro/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></summary>
  <updated>2021-07-23T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/deep-recursion-on-subroutine"/>  <id>https://perlmaven.com/deep-recursion-on-subroutine</id>
  <content type="html"><![CDATA[<p>
When calling a function in <a href="/pro/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>On the eve of CPAN Testers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/aristotle/2021/07/cpantesters-decline.html"/>
    <id>tag:blogs.perl.org,2021:/users/aristotle//15.10311</id>
    <published>2021-07-15T15:34:44Z</published>
    <updated>2021-07-22T12:26:42Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Essay" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/aristotle/">
        <![CDATA[<p>Have a look at the CPAN Testers reports for two TRIAL releases of the same module, one from 2 days ago, the other a little over 3 years ago:</p>

<ul>
<li><p><a href="http://matrix.cpantesters.org/?dist=Text-Tabs%2BWrap+2021.0712-TRIAL">Matrix for Text-Tabs+Wrap 2021.0712-TRIAL</a></p></li>
<li><p><a href="http://matrix.cpantesters.org/?dist=Text-Tabs%2BWrap+2018.0419-TRIAL">Matrix for Text-Tabs+Wrap 2018.0419-TRIAL</a></p>

<p>Note: the current version of Perl in late April 2018 was 5.26.2, so all reports on more recent perls came in (long) after the initial testing which I’m interested here. The relevant part of the page is therefore the part from 5.26.2 on down.</p></li>
</ul>

<p>Last time, reports started coming in within hours of the release; over 60% of the picture was there within a day; some 85% after 2 days; and the first wave of reports lasted a week.</p>

<p>This time, it took almost a day to even start getting reports, and the diversity has been much lower. 3 days in, reports are still absent for many platforms:</p>

<ul>
<li>None for NetBSD, almost none for OpenBSD.</li>
<li>Only a handful for Solaris (but I’ll admit to small surprise about that one).</li>
<li>Windows is sparse – although coverage is not notably down relative to last time.</li>
<li>Cygwin is entirely absent this time – but not a big difference from the one lone report it had last time.</li>
<li>FreeBSD and Linux are at least healthy – but no longer anywhere near comprehensively covered. (How’s that for something I’d never have expected to see?)</li>
<li>Who’da thunk the best-covered platform would someday be… Darwin?</li>
</ul>

<p>(Also of note is that the only 5.8 tested at all so far is 5.8.9, a maintenance release from long after 5.10.0 with little real-world relevance. Last time 5.8 had good coverage, including the most important releases (5.8.1; 5.8.5; 5.8.8). (Of course, any 5.8 is better than no 5.8 at all.))</p>

<p>Within just a few years, we are severely down on CPAN Testers resources. </p>

<p>And that’s compared to 2018, which already was a long way from any kind of golden age for CPAN Testers.</p>

<p>CPAN Testers is on its way out.</p>

<p>I never bothered with CI for CPAN modules before but now it seems an unavoidable necessity.</p>

<p>(And common CI products have never made broad platform coverage easy…)</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#521 - Floods in Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/521.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>This week we saw the tremendous and devastating power of nature in Europe as well. The Guardian even mentioned the <a href="https://www.theguardian.com/world/2021/jul/16/western-germany-floods-angela-merkel-horror-catastrophe-deaths-missing-search-flooding-belgium">Moselle River at Perl in Germany</a>. The place where Liz and Wendy attempted to re-unite the Perl 5 and Perl 6 communities as well. That was not very successful.</p>
<p>I was wondering what can we do?</p>
<p>I know a few members of the Perl community who are also volunteer firefighters. Some of them might have taken part in the rescue efforts maybe even risking their own lives. That a very generous way of helping others and helping the world when disaster strikes.</p>
<p>I know a few other members of the Perl community who make an effort to reduce their own carbon footprint by traveling by bike and train only. That can help postpone the disasters and if enough people do them might even prevent the disasters.</p>
<p>What do you do? What examples could we follow to help when disaster strikes? What could ew do to try to avoid the disasters in the first place? Write about it in a blog post and send the link to me!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/521.html</id>
    <published>2021-07-19T10:00:00Z</published>
    <updated>2021-07-19T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Regexp::Grammars parse text with markup or markdown</title>
  <summary type="html"><![CDATA[<p>
Parsing text with markup (or markdown) is not easy. It took me several days to wrap my head around this, but eventually I think I've figured it out.
<p>
]]></summary>
  <updated>2021-07-19T06:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/regexp-grammars-parse-text-with-markup"/>  <id>https://perlmaven.com/regexp-grammars-parse-text-with-markup</id>
  <content type="html"><![CDATA[<p>
Parsing text with markup (or markdown) is not easy. It took me several days to wrap my head around this, but eventually I think I've figured it out.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>A Genetic Algorithm solution to the Travelling Salesman Problem</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/18#pwc121" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given integers 0 &amp;lt;= $m &amp;lt;= 255 and 1 &amp;lt;= $n &amp;lt;= 8. Write a script to invert $n bit 
from the end of the binary representation of $m and print the decimal representation of 
the new binary number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub flip_bit_n{
    my($x, $n) = @_;
    my $bits = substr(unpack("B32", pack("N", $x)), 24, 8);
    my @bits = split(//, $bits);
    $bits[@bits - $n] ^= 1;
    my $flipped_decimal = unpack("N", pack("B32", substr("0" x 32 . join("", @bits), -32)));
    return $flipped_decimal;
}

MAIN:{
    my($M, $N);
    $M = 12;
    $N = 3;
    print flip_bit_n($M, $N) . "\n";
    $M = 18;
    $N = 4;
    print flip_bit_n($M, $N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8 
26
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code re-uses much of the code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/11#pwc120"&gt;last week's challenge solution&lt;/a&gt;.
The only difference is that this week we flip the specified nth bit using the XOR 
operator. I think that this may be the first time I have ever used a &lt;code&gt;^=&lt;/code&gt; operation!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a NxN matrix containing the distances between N cities. Write a script to 
find a round trip of minimum length visiting all N cities exactly once and returning to 
the start.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use AI::Genetic;

use constant N =&gt; 7;

my @matrix= ([0, 5, 2, 7],
             [5, 0, 5, 3],
             [3, 1, 0, 6],
             [4, 5, 4, 0]);

sub fitness{
    my($genes) = @_;
    my $cost = 0;
    return -1 if $genes-&gt;[0] != $genes-&gt;[@{$genes} - 1];
    my @path = sort {$a &lt;=&gt; $b} @{$genes}[0 .. @{$genes} - 2];
    for my $i (0 .. (@path - 2)){
        return -1 if $path[$i] == $path[$i + 1];
    }
    for my $i (0 .. @{$genes} - 2){
        $cost += $matrix[$genes-&gt;[$i]][$genes-&gt;[$i + 1]];
    }
    return 1/$cost;
}

sub terminate{
    return true;
}

MAIN:{
    srand(121);
    my $aig = new AI::Genetic(
        -fitness    =&gt; \&amp;fitness,
        -type       =&gt; "rangevector",
        -population =&gt; 500,
        -crossover  =&gt; 0.9,
        -mutation   =&gt; 0.1,
    );
    my $genes = [];
    for (0 .. N + 1){
        push @{$genes}, [0, N];
    }
    @matrix = ();
    for (0 .. N){
        my $row = [];
        for my $i (0 .. N){
            push @{$row}, int(rand(N * 2 + 1));
        }
        push @matrix, $row;
    }
    $aig-&gt;init(
        $genes
    );
    $aig-&gt;evolve("tournamentUniform", 100000);
    my $path = $aig-&gt;getFittest()-&gt;genes();
    print join(",", @{$path}) . "\n";
    my $cost;
    for my $i (0 .. @{$path} - 2){
        $cost += $matrix[$path-&gt;[$i]][$path-&gt;[$i + 1]];
    }
    print "cost: $cost\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3,0,1,2,3
cost: 10
$ perl perl/ch-2.pl
3,1,7,5,4,6,0,2,3
cost: 24
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have used Genetic Algorithm (GA) approaches to a bunch of these challenge problems in the 
past. I will admit that in some cases the GA approach is more for fun than as a good
example of the sorts of problems GA is good for. This time, however, we have a somewhat
classic use case!&lt;/p&gt;

&lt;p&gt;The Travelling Salesman Problem is well known to be NP-Hard and Genetic Algorithms are a
well studied approach to tackling these beasts.&lt;/p&gt;

&lt;p&gt;I first tested this solution with the example in the original problem statement, hardcoded
here in &lt;code&gt;@matrix&lt;/code&gt; and obtained a result which matched the known correct one. Then, testing
with increasingly larger values of &lt;code&gt;N&lt;/code&gt; to generate random matrices I continued to get 
seemingly correct results. I did not verify these by hand. Instead I set a random seed
with &lt;code&gt;srand&lt;/code&gt; and verified that I got the same cost results over several runs. As needed
I would adjust the number of generations in the &lt;code&gt;evolve()&lt;/code&gt; method call upwards until again
getting results which converged on the same cost value.&lt;/p&gt;

&lt;p&gt;For a 20 x 20 matrix I seem to be getting correct results, but runtimes are quite lengthy 
and I ran out of time to test this further. However, I am very confident that a correct 
path is obtainable this way although perhaps some additional slight adjustment of 
parameters is necessary.&lt;/p&gt;

&lt;p&gt;(Hopefully nobody is too terribly confused by this, but please do notice that the size
of the matrix is actually N + 1. That is, in order to obtain a matrix like the one given
in the problem statement you specify an N of 3, although obviously this is a 4 x 4 matrix.
This is just in keeping with the city labels starting with 0.)&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-121/"&gt;Challenge 121&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc121</id>
    <published>2021-07-18T23:36:00-04:00</published>
    <updated>2021-07-18T23:36:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Ann Barcomb study: Survey launch</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/annbarcombstudylaunch"/>
  <id>tag:news.perlfoundation.org,2021-07-15:/post/annbarcombstudylaunch</id>
  <published>2021-07-15T03:49:18</published>
  <updated>2021-07-15T03:49:18</updated>
  <summary>
  <![CDATA[
     Published on behalf of TPF Board.  of the University of Calgary is conducting research to understand episodic, or occasional, participation in the Perl and Raku communities, in collaboration with The Perl Foundation. The results of the research will be provided as a TPF report and will assist the community in improving practices for managing episodic participation to provide insights into what free libre open source software projects could do 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Published on behalf of TPF Board.</p>

<p>(Dr. Ann Barcomb)[https://barcomb.org] of the University of Calgary is conducting research to understand episodic, or occasional, participation in the Perl and Raku communities, in collaboration with The Perl Foundation. The results of the research will be provided as a TPF report and will assist the community in improving practices for managing episodic participation to provide insights into what free / libre / open source software projects could do to become more sustainable.</p>

<p>If you would like to take part in this study, <a href="https://survey.yeticraft.net/index.php/361854?lang=en">click here to access the survey</a>. Based on pilot testing, this survey is expected to take about 15 minutes to complete (there are 41 questions in this survey). Participation in this study is anonymous. By completing the survey, you are agreeing to have your responses included in the study. </p>

<p>We thank Ann for selecting our communities as the subject of this research. We expect that this work will be beneficial to our communities as well as others. And we thank you in advance for contributing to this research. Your input is much appreciated.</p>

<p>The University of Calgary Conjoint Faculties Research Ethics Board has approved this study (REB20-2135).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>perlbrew</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-07-14-perlbrew" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das System-Perl zu verwenden hat viele Nachteile. Diese können behoben werden, wenn man ein eigenes Perl in seinem Benutzerverzeichnis installiert. Mit dem Werkzeug `perlbrew` kannst du mehrere Perl-Installationen nebeneinander auf einem System konfliktfrei betreiben.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-07-14-perlbrew</id>
    <published>2021-07-14T10:00:00Z</published>
    <updated>2021-07-14T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Grant Proposal: Maintaining Perl 5 Core (Dave Mitchell)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_5_dave_mitchell"/>
  <id>tag:news.perlfoundation.org,2021-07-13:/post/grant_proposal_maintaining_perl_5_dave_mitchell</id>
  <published>2021-07-13T22:32:43</published>
  <updated>2021-07-13T22:32:43</updated>
  <summary>
  <![CDATA[
     Synopsis This application is to extend into the future the TPF grant funding I have been receiving over the last ten years or so to maintain the Perl core. I'm one of the main maintainers of the Perl core internals, and new funding will help me to continue working on the core. Project Details This project will cover improvements to the perl core such as: general maintenance, bug fixes, performance 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>This application is to extend into the future the TPF grant funding I have been receiving over the last ten years or so to maintain the Perl core. I'm one of the main maintainers of the Perl core internals, and new funding will help me to continue working on the core.</p>

<h2>Project Details</h2>

<p>This project will cover improvements to the perl core such as: general maintenance, bug fixes, performance issues, new features, investigating smoke failures, helping getting Perl into a releasable state etc. These are all activities I already do.</p>

<h2>Timeline</h2>

<p>There is no particular schedule. I am available to start immediately. As and when I can put hours in, I will charge for those hours. This is the same as the current arrangements.</p>

<h2>Author Information</h2>

<p>Dave Mitchell</p>

<p>I'm a freelance programmer and UNIX sysadmin living in the UK. I have been using Perl since 1993, and have been fixing core Perl 5 bugs since 2001.  I have had commit rights since 2003 and I was responsible for the 5.10.1 and 5.14.4 perl releases. I am known for fixing "hard" things in the Perl core.</p>

<h2>Endorsed By</h2>

<p>Ricardo Signes, Nicolas Rochelemagne</p>

<h2>Amount Requested</h2>

<p>$60 per hour, to a total of $21,000 [I've suggested an amount divisible by 60 to make things easier]. A smaller or larger total amount is acceptable, as I'm assuming that, as before, I will be able to apply for extensions to the grant.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: July 2021 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_july_2021_round"/>
  <id>tag:news.perlfoundation.org,2021-07-13:/post/call_for_grants_july_2021_round</id>
  <published>2021-07-13T22:26:38</published>
  <updated>2021-07-13T22:26:38</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 July 27, 2021, UTC. We will publish the received applications, get community feedback through August 3rd, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 July 27, 2021, UTC. We will publish the received applications, get community feedback through August 3rd, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by August 4th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 (Dave Mitchell): May /June 2021 Report </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2021-may-jun"/>
  <id>tag:news.perlfoundation.org,2021-07-13:/post/dave-report-2021-may-jun</id>
  <published>2021-07-13T03:23:29</published>
  <updated>2021-07-13T03:23:29</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Did very little work in May  2:39 process p5p mailbox   2:39 TOTAL In June I made a start on catching up on many months of unread p5p emails, github notifications etc. SUMMARY:  10:46 process p5p mailbox   10:46 TOTAL There are 28.7 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.</p>

<p>```
Did very little work in May</p>

<pre><code>  2:39 process p5p mailbox  
------
  2:39 TOTAL (HH::MM) 
</code></pre>

<p>```</p>

<p>```
In June I made a start on catching up on many months of unread p5p emails,
github notifications etc.</p>

<p>SUMMARY:
     10:46 process p5p mailbox
    ------
     10:46 TOTAL (HH::MM)</p>

<p>There are 28.7 hours left on the existing grant, (but I've applied
for a new grant).
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#520 - CPAN Bus Factor</title>
    <link rel="alternate" href="https://perlweekly.com/archive/520.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>If, like me, you are a fan of MetaCPAN then you must have noticed the latest changes to the <a href="https://metacpan.org/">MetaCPAN</a> site. It is the introduction of new metric, "CPAN Bus Factor". Don't know what I am talking about? Well then you should read the <a href="https://www.olafalders.com/2021/06/30/cpan-bus-factor/">blog post</a>, which is a collaborative work by Neil Bowers and Olaf Alders.</p>
<p>It reminds me an incident from the past when I received an email from Neil Bowers about one of my CPAN distribution, <a href="https://metacpan.org/pod/IP::Info">IP::Info</a> as he was reviewing CPAN modules for locating an IP address. Later he published his <a href="http://neilb.org/reviews/ip-location.html">report</a> on 8th Aug 2012. You can take a look collection of <a href="http://neilb.org/reviews/">CPAN module reviews</a> by him. If my memory serves, Neil also ran <a href="http://cpan-weekly.org/">CPAN Weekly</a>, for a while. I did join the mailing list and the received CPAN Weekly newsletter talking about a CPAN module and its usage every week. Unfortunately it is no longer active.</p>
<p>A long time ago, I used to be an active CPAN contributor. Unfortunately, because of time constraints, I'm no longer as active as I used to be. I even wrote a two-part blog post on the subject - "How to become a CPAN contributor?" - for perl.com in 2018. You can check out the posts, <a href="https://www.perl.com/article/how-to-become-cpan-contributor/">Part 1</a> and <a href="https://www.perl.com/article/how-to-become-cpan-contributor-part-2/">Part 2</a>, if you are interested.</p>
<p>Why am I talking about CPAN contributions?</p>
<p>A friend of mine and fellow contributor to <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>, Cheok-Yin Fung, wrote a <a href="http://blogs.perl.org/users/c_y_fung/2021/07/how-i-uploaded-a-cpan-module.html">blog</a> about her experience of uploading her first distribution to CPAN. It reminds me of my early days of struggle with CPAN. These days there is a lot of help available on various public platforms. I wish her all the best and welcome to the club of CPAN contributors.</p>
<p>I came across a very interesting <a href="https://medium.com/codex/how-to-create-awesome-pull-requests-b634e7f00e47z">blog post</a> by JJ Merelo talking about Pull Request do's and don'ts. Very helpful advice for anyone looking to contribute to open source projects in general.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/520.html</id>
    <published>2021-07-12T10:00:00Z</published>
    <updated>2021-07-12T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Swapping Bits / Time Angle</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/11#pwc120" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N less than or equal to 255. Write a script to swap the
odd positioned bits with the even positioned bits and print the decimal equivalent of the 
new binary representation.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub swap_bits{
    my($n) = @_;
    my $bits = substr(unpack("B32", pack("N", shift)), 24, 8);
    my @bits = split(//, $bits);
    for(my $i = 0; $i &lt; @bits; $i += 2){
        @bits[$i, $i + 1] = @bits[$i + 1, $i]; 
    }  
    my $swapped_decimal = unpack("N", pack("B32", substr("0" x 32 . join("", @bits), -32)));
    return $swapped_decimal; 
}

MAIN:{
    my $N;
    $N = 101; 
    print swap_bits($N) . "\n";
    $N = 18; 
    print swap_bits($N) . "\n";
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
154
33
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code re-uses much of the code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/04#pwc119"&gt;last week's challenge solution&lt;/a&gt;.
The only difference here is the for loop which swaps the even/odd bits.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given time $T in the format hh:mm. Write a script to find the smaller angle 
formed by the hands of an analog clock at a given time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub clock_angle{
    my($h, $m) = split(/:/, $_[0]);
    my $angle = abs(0.5 * (60 * $h - 11 * $m)); 
    $angle = 360 - $angle if $angle &gt; 180; 
    return $angle;
}

MAIN:{
    my $T;
    $T = "03:10";  
    print clock_angle($T) . "\n";  
    $T = "04:00";  
    print clock_angle($T) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
35
120
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Perhaps not a whole lot going on here: the time is broken into hour and minute parts and
then the angle is computed directly from those values.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-120/"&gt;Challenge 120&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc120</id>
    <published>2021-07-11T17:41:00-04:00</published>
    <updated>2021-07-11T17:41:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Outreachy Internship - Rosheen working on Open Food Facts</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy2021-intro"/>
  <id>tag:news.perlfoundation.org,2021-07-05:/post/outreachy2021-intro</id>
  <published>2021-07-05T12:47:18</published>
  <updated>2021-07-05T12:47:18</updated>
  <summary>
  <![CDATA[
     I am pleased to announce we accepted an intern, Rosheen Naeem, to this year’s Outreachy internship at Open Food Facts. Rosheen will work with Stéphane Gigandet on a project to improve the quality of the Open Food Facts backend to make it more friendly to new developers until August 2021. Rosheen is a software engineer based in Pakistan. She has expertise in web development and technical writing. She brings with 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce we accepted an intern, <a href="https://roshnaeem.github.io/">Rosheen Naeem</a>, to this year’s <a href="https://www.outreachy.org/">Outreachy</a> internship at <a href="https://world.openfoodfacts.org/">Open Food Facts</a>. Rosheen will work with Stéphane Gigandet on a project to improve the quality (templatization, documentation, unit tests etc.) of the Open Food Facts backend (all written in Perl) to make it more friendly to new developers until August 2021.</p>

<p>Rosheen is a software engineer based in Pakistan. She has expertise in web development and technical writing. She brings with herself experience in web development, opensource, game development, and technical course designing. </p>

<p>Rosheen’s contributions can be seen at <a href="https://github.com/openfoodfacts/openfoodfacts-server">openfoodfacts</a> Github repository. Rosheen also published her experience with the Outreachy selection process in her <a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4">Medium article</a>.</p>

<p>Open Food Facts is a free, online and crowdsourced database of food products from around the world. Product data and photos are contributed through the Open Food Facts mobile application or sent by food manufacturers. Open Food Facts then analyze the ingredients, nutrition facts, labels, and packaging of products to compute nutritional or environmental scores such as the Nutri-Score and the Eco-Score.</p>

<p>Please join me in welcoming Rosheen to the Perl &amp; Raku community.</p>

<p>P.S. We also gave <a href="https://docs.google.com/presentation/d/1K1Cvfyl73Agh988wP6UEb5rtibCx6eLZJ8uxseIU_yM/edit?usp=sharing">a talk</a> on our summer activities at the Perl &amp; Raku Conference including Outreachy, Google Season of Docs and Google Summer of Code.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#519 - Crystal conference and course</title>
    <link rel="alternate" href="https://perlweekly.com/archive/519.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I am going to give a presentation at the <a href="https://crystal-lang.org/">Crystal</a> 1.0 <a href="https://crystal-lang.org/conference/">conference</a> alongside Yukihiro 'Matz' Matsumoto and Bruce Perens (just to throw in two names you might be familiar with and to have some honor by association). It is taking place this Thursday. It is my first presentation at an international conference for a long time. Wish me luck!</p>
<p>If you cannot make it to the conference, but you are interested in learning Crystal, I am going to start an experimental programming Crystal course via Zoom. You can <a href="https://code-maven.com/crystal-course">get more information and register here</a></p>
<p>As for Perl, it was a rather quiet week without a lot of posts, but still there is some nice stuff in here</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/519.html</id>
    <published>2021-07-05T10:00:00Z</published>
    <updated>2021-07-05T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Packing and Unpacking from vacation: The Weekly Challenge 119</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/04#pwc119" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive integer $N. Write a script to swap the two nibbles of the binary
representation of the given number and print the decimal number of the new binary 
representation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
sub swap_nibbles{
    my($n) = @_;
    my $bits = substr(unpack("B32", pack("N", shift)), 24, 8);
    my $swapped_bits = substr($bits, 4) . substr($bits, 0, 4);
    my $swapped_decimal = unpack("N", pack("B32", substr("0" x 32 . $swapped_bits, -32)));
    print $swapped_decimal . "\n";
}

MAIN:{
    swap_nibbles(101);
    swap_nibbles(18);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
86
33
</code></pre>

<h3>Notes</h3>

<p>I was on vacation recently and did not have time for the last couple of Weekly Challenges,
but as I <a href="https://www.facebook.com/photo/?fbid=10226433361965004&amp;set=gm.4388858307813590&amp;__cft__[0]=AZW5TWFLh6Dc5ccw-efgja3k-RqUoNArTQPRdvY46jJ_h7E4KV90brWjG2pKr5_nBxteShr0np0cW11bsTAqQePFxe1oK1uFbUzlajGp2Te8hzYJbhPu8J_KjlQm8KWbLaFU_B4V5jEeaPwOeqA7J7sWO-BC4ec2wwDtxVIezClyNF9749gccx9Jk5BwI-9SRYk&amp;__tn__=EH-R">posted a meme about</a>
it is hard to take a break!</p>

<p>(The Perl Programmers Facebook group is a lof of fun. It is kept Private by the group 
owner but joining is easy, anyone is allowed provided they are interested in Perl.)</p>

<p>I was able to get through the first part of this week's challenge with the time I had
after getting back from vacation. As I was unpacking my suitcase, co-incidentally enough,
I noticed that the first task is a great use of 
<a href="https://perldoc.perl.org/functions/unpack">pack and unpack</a>! </p>

<p>I have used these functions several times in the past, for example this writeup from 
<a href="https://adamcrussell.livejournal.com/6526.html">Challenge 020</a> has an example and some
links to others. I must admit that from the earliest days of my Perl experience I have
been fascinated by pack! At first it seemed like a bit of black magic and due to its
versatility, in some ways it still retains this mystique.</p>

<p>In the <code>swap_nibbles</code> function the number is packed into <em>Network Byte Order</em> and that
representation is that unpacked bitwise to get the expected binary representation.
After that the two nibbles are swapped using <code>substr</code> to get each 4 bit slice. The process
is then reversed on the swapped bits to get the result we want.</p>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/">Challenge 119</a></p>

<p><a href="https://www.pcmag.com/encyclopedia/term/byte-order">Network Byte Order</a></p>

<p><a href="https://www.facebook.com/groups/171594046206725">Perl Programmers Facebook Group</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc119</id>
    <published>2021-07-04T12:04:00-04:00</published>
    <updated>2021-07-04T12:04:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
