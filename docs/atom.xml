<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-08-21T12:52:52Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Quater-imaginary Business Date</title>
    <link rel="alternate" href="https://dev.to/simongreennet/quater-imaginary-business-date-58ln" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 178
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-178/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-178/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Quater-imaginary Base
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to convert a given number (base 10) to <a href="https://en.wikipedia.org/wiki/Quater-imaginary_base">quater-imaginary base number</a> and vice-versa.</p>

<h3>
  
  
  My solution
</h3>

<p>For this task, I chose to only do the first half of the challenge, that is take a base 10 numbers and covert it to a base -4 number. The general principle is take the number and divide it by -4, where the remainder makes up the solution. I had a few challenges when the resulting division was a negative number, but believe I've got that sorted.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 4
10300

$ ./ch-1.py 15
10103
</code></pre>

</div>



<h2>
  
  
  Task 2: Business Date
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given <code>$timestamp</code> (date with time) and <code>$duration</code> in hours.</p>

<p>Write a script to find the time that occurs <code>$duration</code> business hours after <code>$timestamp</code>. For the sake of this task, let us assume the working hours is 9am to 6pm, Monday to Friday. Please ignore timezone too.</p>

<h3>
  
  
  My solution
</h3>

<p>Time maths is never easy, at least I don't need to worry about timezones, although that wouldn't really be an issue as most (all?) countries change their clocks outside business hours. The excpetion would be Samoa (and later Tokelau) who <a href="https://www.bbc.com/news/world-asia-16351377">skipped a whole day</a> on Friday 30/12/2011.</p>

<p>There are a couple of ways to tackle this task, and I think the biggest challenge is handling a span that covers a weekend. I may have over complicated my solution, let's see what other Team PWC members come up with.</p>

<p>I start by converting the time input with strptime. For Python, this is part of the <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module, and the <a href="https://metacpan.org/pod/DateTime">DateTime</a> module for Perl. I also convert the hours provided into minutes. I also check that the start time is between 9am and 6pm on a weekday.</p>

<p>Next I wind the clock back to 9am Monday. I add the number of working minutes we wound the clock back to the <code>minutes</code> variable (days x 540, hours after 9am x 60 and minutes). We now know how many minutes after 9am Monday we need to add. I split this into <code>days</code> and <code>minutes</code>.</p>

<p>For every five whole days, we need to take 2 extra days for the weekend. Finally I use date math taken the 9am Monday time, and adding the required number of days and minutes to find the end time.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py "2022-08-01 10:30" 4
2022-08-01 14:30

$ ./ch-2.py "2022-08-01 17:00" 3.5
2022-08-02 11:30
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/quater-imaginary-business-date-58ln</id>
    <published>2022-08-21T11:45:37Z</published>
    <updated>2022-08-21T11:45:37Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8355876702800371113</id>
    <published>2022-08-20T23:58:00.000+02:00</published>
    <updated>2022-08-20T23:58:39.472+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdvi) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.59&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.56 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.055000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055000&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053007 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PABLROD/Chart-Plotly-0.042' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Chart::Plotly&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate html/javascript charts from perl data using javascript library plotly.js &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.042&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.041 was 1 year, 9 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.52 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.802' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.802&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: 0.801 was 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.10&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 5.08 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220820&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220720 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.05 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.04 was 2 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9643' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9643&lt;/strong&gt; on 2022-08-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9638 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ABW/Template-Toolkit-3.101' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Template::Toolkit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comprehensive template processing system &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.101&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 137&lt;/li&gt;  &lt;li&gt;Previous version: 3.100 was 3 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016008&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016007 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8355876702800371113/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html" title="(cdvi) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-08-20T00:00:00Z</published>
    <updated>2022-08-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 177: Damm Algorithm and Palindromic Prime Cyclops</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-177-damm-algorithm-and-palindromic-prime-cyclops.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10872</id>
    <published>2022-08-08T20:21:01Z</published>
    <updated>2022-08-18T19:19:14Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 177 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-177/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 14, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Damm Algorithm</h2>

<p><em>You are given a positive number, <code>$n</code>.</em></p>

<p><em>Write a script to validate the given number against the included check digit.</em></p>

<p><em>Please checkout the <a href="https://en.wikipedia.org/wiki/Damm_algorithm">wikipedia page</a> for information.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $n = 5724
Output: 1 as it is valid number
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $n = 5727
Output: 0 as it is invalid number
</code></pre>

<p>The algorithm is a check digit algorithm named after H. Michael Damm, who presented it in 2004.</p>

<p>The process is quite simple. We&#8217;ll use the quasi-group table provided in the afore-mentioned Wikipedia article:</p>

<pre><code>0 3 1 7 5 9 8 6 4 2
7 0 9 2 1 5 4 8 6 3
4 2 0 6 8 7 1 3 5 9
1 7 5 0 9 8 3 4 2 6
6 1 2 3 0 4 5 9 7 8
3 6 7 4 2 0 9 5 8 1
5 8 6 9 7 2 0 1 3 4
8 9 4 5 3 6 2 0 1 7
9 4 3 8 6 1 7 2 0 5
2 5 8 1 4 3 6 7 9 0
</code></pre>

<h3>Damm Algorithm in Raku</h3>

<p>The process is simple. We start with a temporary value of 0. For each digit in the input number, we look up the table with the temporary variable and the digit, and set the temporary variable to the integer found in the table. At the end, the number is valid is the temporary variable is 0. For our test, we will use the two examples provided in the task specification, and we will test all numbers in the <code>5700..5800</code> range.</p>

<pre><code>my @damm =  &lt; 0 3 1 7 5 9 8 6 4 2 &gt;,
            &lt; 7 0 9 2 1 5 4 8 6 3 &gt;,
            &lt; 4 2 0 6 8 7 1 3 5 9 &gt;,
            &lt; 1 7 5 0 9 8 3 4 2 6 &gt;,
            &lt; 6 1 2 3 0 4 5 9 7 8 &gt;,
            &lt; 3 6 7 4 2 0 9 5 8 1 &gt;,
            &lt; 5 8 6 9 7 2 0 1 3 4 &gt;,
            &lt; 8 9 4 5 3 6 2 0 1 7 &gt;,
            &lt; 9 4 3 8 6 1 7 2 0 5 &gt;,
            &lt; 2 5 8 1 4 3 6 7 9 0 &gt;;

sub is-valid ($n) {
    my $t = 0;
    $t = @damm[$t][$_] for $n.comb;
    return $t == 0;
}

for 5724, 5727 -&gt; $test {
    say $test, is-valid($test) ?? " is valid." !! " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for 5700..5800 -&gt; $i {
    print "$i " if is-valid $i;
}
say "";
</code></pre>

<p>This program displays the following output: </p>

<pre><code>$ raku ./damm-algo.raku
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h3>Damm Algorithm in Perl</h3>

<p>The algorithm for finding the check digit is the same as the one for testing whether a number is valid. So, rather than simply testing the validity directly as we did in Raku, we&#8217;ll write a <code>find_check</code> subroutine to find the check digit. Then, a number will be valid if its check digit is 0. Thus, we sort of get the two functions for the price of one. Besides that, the process is essentially the same as in Raku. Check the Raku section above is you need further explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @damm =  (
[ &lt; 0 3 1 7 5 9 8 6 4 2 &gt; ],
[ &lt; 7 0 9 2 1 5 4 8 6 3 &gt; ],
[ &lt; 4 2 0 6 8 7 1 3 5 9 &gt; ],
[ &lt; 1 7 5 0 9 8 3 4 2 6 &gt; ],
[ &lt; 6 1 2 3 0 4 5 9 7 8 &gt; ],
[ &lt; 3 6 7 4 2 0 9 5 8 1 &gt; ],
[ &lt; 5 8 6 9 7 2 0 1 3 4 &gt; ],
[ &lt; 8 9 4 5 3 6 2 0 1 7 &gt; ],
[ &lt; 9 4 3 8 6 1 7 2 0 5 &gt; ],
[ &lt; 2 5 8 1 4 3 6 7 9 0 &gt; ] );

sub find_check {
    my $n = shift;
    my $t = 0;
    $t = $damm[$t][$_] for split //, $n;
    return $t;
}

sub is_valid {
    my $n = shift;
    return find_check($n) == 0;
}

for my $test (5724, 5727) {
    say $test, is_valid($test) ? " is valid." : " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for my $i (5700..5800) {
    print "$i " if is_valid $i;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./damm-algo.pl
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h3>Damm Algorithm in Other Languages</h3>

<p>We now present the same Damm algorithm in the following 18 guest languages (in alphabetic order):</p>

<ul>
<li>awk</li>
<li>C</li>
<li>D</li>
<li>Dart</li>
<li>Go</li>
<li>Java</li>
<li>JavaScript</li>
<li>Julia</li>
<li>Kotlin</li>
<li>Lua</li>
<li>Nim</li>
<li>Pascal</li>
<li>Python</li>
<li>Ring</li>
<li>Ruby</li>
<li>Rust</li>
<li>Scala</li>
<li>Tcl</li>
</ul>

<p>From now on, for all guest language implementations, the test will consist in listing the valid numbers between 5700 and 5800, a range that includes the two test cases (5724 and 5727) suggested in the task specification.</p>

<h4>Damm Algorithm in awk</h4>

<p>The awk programming language has minimal support for arrays. It doesn&#8217;t seem to support two-dimensional arrays, and iniitializing arrays in a pain in the neck (there may be some way, but the documentation is scarce). So we implement the <code>damm</code> lookup array as an array of strings and initialize it by initializing each item in the array (in the <code>populate_damm</code> function). Then we use the <code>substr</code> built-in function to retrieve the wanted value from the strings.</p>

<pre><code>function is_valid(n) {
    t = 0
    for (j = 1; j &lt;= length(n); j++) {
        t = substr(damm[t],substr(n, j, 1) + 1 ,1)
    }
    return t == 0
}
function populate_damm() {
    damm[0] = "0317598642"
    damm[1] = "7092154863"
    damm[2] = "4206871359"
    damm[3] = "1750983426"
    damm[4] = "6123045978"
    damm[5] = "3674209581"
    damm[6] = "5869720134"
    damm[7] = "8945362017"
    damm[8] = "9438617205"
    damm[9] = "2581436790"
}
BEGIN {
    populate_damm()
    print("Valid numbers between 5700 and 5800 are: ")
    for (i  = 5700; i&lt;= 5800; i++) {
        if (is_valid(i)) {
            printf("%d ", i)
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./damm-algo.awk
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<p>Note that I was thinking about a <em>bc</em> implementation of the Damm algorithm, but I gave up the idea because the situation with arrays (and also documentation) is worse that in awk.</p>

<h4>Damm Algorithm in C</h4>

<p>Not much to say, the code is quite clear. Just note that, in the <code>temp = damm[temp][str[i] - '0'];</code> code line, we need to subtract the Ascii value of 0 (48) from the value in the <code>str</code> integer-to-string conversion in order to get proper subscripts. We will have to do the same in a number of other guest language implementations. </p>

<pre><code>#include &lt;stdio.h&gt;

const char damm[10][10] = {
        {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
        {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
        {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
        {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
        {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
        {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
        {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
        {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
        {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
        {2, 5, 8, 1, 4, 3, 6, 7, 9, 0},
    };

int is_valid(int num) {
    int temp = 0;
    char str[10];
    int len = sprintf(str, "%d", num);   // convert input int to string
    str[len] = '\0';
    for (int i = 0; i &lt; len; i++) {
         temp = damm[temp][str[i] - '0'];
    }
    return temp == 0;
}

int main() {
    printf("%s\n", "Valid numbers between 5700 and 5800 are: ");
    for (int i = 5700; i &lt; 5800; i++) {
        if (is_valid(i)) 
            printf("%d ", i);
    }
    printf("%s\n", "");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in D</h4>

<p>As usual, the D syntax is very similar to the C syntax, but D is just a bit simpler to use than C.</p>

<pre><code>import std.stdio;
import std.conv;

auto damm = [
    [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
    [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
    [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
    [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
    [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
    [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
    [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
    [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
    [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
    [2, 5, 8, 1, 4, 3, 6, 7, 9, 0],
];

bool is_valid (int num) {
    string str = to!string(num, 10);
    int temp = 0;
    foreach (ch; str) {
        temp = damm[temp][ch - '0'];
    }
    return temp == 0;
}

void main() {
    writeln("Valid numbers between 5700 and 5800 are: ");
    for (int i = 5700; i &lt; 5800; i++) {
        if (is_valid(i)) 
            printf("%d ", i);
    }
    writeln("");
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Dart</h4>

<p>Like in awk, I haven&#8217;t found a good way to declare and initialize two-dimensional arrays in Dart, and the documentation is quite sparse. So I used the same solution as in awk: an array of strings.</p>

<pre><code>import "dart:io";

var damm = [ "0317598642",
             "7092154863",
             "4206871359",
             "1750983426",
             "6123045978",
             "3674209581",
             "5869720134",
             "8945362017",
             "9438617205",
             "2581436790" ];

void main() {
    print("Valid numbers between 5700 and 5800 are:");
    for (int i = 5700; i &lt;= 5800; i++ ) {
        if (is_valid(i)) {
            stdout.write("$i ");
        }
    }
    stdout.write("\n");
}
bool is_valid(n) {
    var digits = n.toString().split("");
    int temp = 0;
    var len = digits.length;
    for (int i = 0; i &lt; len; i++) { 
        var row = damm[temp];
        var idx = int.parse(digits[i]);
        temp = int.parse(row[idx]);
    }
    return temp == 0;
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Go</h4>

<pre><code>import (
    "fmt"
    "strconv"
)

var damm = [10][10] int {
    {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
    {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
    {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
    {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
    {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
    {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
    {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
    {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
    {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
    {2, 5, 8, 1, 4, 3, 6, 7, 9, 0},
}

func is_valid(num int) bool {
    var n_str = strconv.Itoa(num)
    var temp = 0
    for _, ch := range n_str {
        temp = damm[temp][ch-'0']
    }
    return temp == 0
}

func main() {
    fmt.Println("Valid numbers between 5700 and 5800 are:")
    for i := 5700; i &lt;= 5800; i++ {
        if is_valid(i) {
            fmt.Printf("%d ", i)
        }
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Java</h4>

<pre><code>public class DammCheckDigit {
    private static final int[][] damm = 
        { {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
          {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
          {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
          {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
          {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
          {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
          {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
          {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
          {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
          {2, 5, 8, 1, 4, 3, 6, 7, 9, 0} };

    private static boolean is_valid(Integer num) {
        char[] n = num.toString().toCharArray();
        int temp = 0;
        for (char ch : n) {
            temp = damm[temp][ch - '0'];
        }
        return temp == 0;
    }

    public static void main(String[] args) {
        System.out.printf("%s", "Valid numbers between 5700 and 5800 are:");
        for(int i = 5700; i &lt;= 5800; i++) {
            if (is_valid(i))  System.out.printf("%d ", i);
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in JavaScript</h4>

<pre><code>damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
         [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
         [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
         [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
         [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
         [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
         [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
         [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
         [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
         [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ];

function is_valid (n) {
    let digits = n.toString().split("")
    var temp = 0
    for (var i = 0; i &lt; digits.length; i++) {
        temp = damm[temp][digits[i]]
    }
    return temp == 0
}

console.log("Valid numbers between 5700 and 5800 are:")
for (var i = 5700; i &lt;= 5800; i++) {
    if (is_valid(i)) {
        process.stdout.write(i + " ")
    }
}
console.log("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Julia</h4>

<p>Julia array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][d - '0' + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>function is_valid(num)
    damm = (
        (0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
        (7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
        (4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
        (1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
        (6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
        (3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
        (5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
        (8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
        (9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
        (2, 5, 8, 1, 4, 3, 6, 7, 9, 0))
    temp = 0
    str = string(num)
    for d in str
        temp = damm[temp + 1][d - '0' + 1]
    end
    return temp == 0
end

println("Valid numbers between 5700 and 5800 are: ")
for i in 5700:5800
    if is_valid(i)
        print("$i ")
    end
end
println("")
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./damm-algo.jl
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Kotlin</h4>

<p>Declaring and initializing a matrix in Kotlin is somewhat painful, but the code is otherwise fairly straight forward.</p>

<pre><code>val damm = arrayOf(
    intArrayOf(0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
    intArrayOf(7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
    intArrayOf(4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
    intArrayOf(1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
    intArrayOf(6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
    intArrayOf(3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
    intArrayOf(5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
    intArrayOf(8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
    intArrayOf(9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
    intArrayOf(2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
)

fun is_valid(num: Int): Boolean {
    val n_str = num.toString()
    var temp = 0
    for (d in n_str) {
        temp = damm[temp][d - '0']
    }
    return temp == 0
}

fun main() {
    println("Valid numbers between 5700 and 5800 are: ")
    for (i in 5700..5800) {
        if (is_valid(i)) print("$i ")
    }
    println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Lua</h4>

<p>Like in Julia, Lua array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][ch + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>local damm = {
    {0,3,1,7,5,9,8,6,4,2},
    {7,0,9,2,1,5,4,8,6,3},
    {4,2,0,6,8,7,1,3,5,9},
    {1,7,5,0,9,8,3,4,2,6},
    {6,1,2,3,0,4,5,9,7,8},
    {3,6,7,4,2,0,9,5,8,1},
    {5,8,6,9,7,2,0,1,3,4},
    {8,9,4,5,3,6,2,0,1,7},
    {9,4,3,8,6,1,7,2,0,5},
    {2,5,8,1,4,3,6,7,9,0}
}
function is_valid(num)
    local n_str = tostring(num)
    local temp = 0
    for ch in n_str:gmatch"." do
        temp = damm[temp + 1][ch + 1]
    end
    return temp == 0
end

print("Valid numbers between 5700 and 5800 are: ")
for i = 5700, 5800 do
    if is_valid(i) then
        io.write(i, " ")
    end
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are: 
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Nim</h4>

<p>Remember that Nim control flow is indentation-based, like Python.</p>

<pre><code>import strutils

let damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
             [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
             [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
             [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
             [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
             [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
             [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
             [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
             [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
             [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ]

proc is_valid(num: int): bool =
  let n_str = intToStr(num)
  var temp = 0
  for i in 0..len(n_str) - 1:
    temp = damm[temp][int(n_str[i]) - 48]
  return temp == 0

echo "Valid numbers between 5700 and 5800 are:"
for i in 5700..5800:
  if is_valid(i):
    stdout.write i, " "
echo ""
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Pascal</h4>

<p>I&#8217;m not particularly fond of Pascal, which I found too verbose (at least, by today&#8217;s criteria), and I&#8217;ve never used it for real-life projects (well, except some quite small Delphi projects a number of decades ago). But, having said that, I must add that Pascal is nonetheless a soft point for me, as it is the first language that I learned in my IS studies (although I had programmed as an autodidact before starting my studies, in Basic, in C, and in the pseudo-assembler of programmable pocket calculators). Pascal is quite clean (perhaps too clean) and it is with Pascal that I first learned the tenets of structured programming.  Other languages that I used at the time and found interesting were Fortran, Ada, Prolog, Caml, and especially Modula-2 (or, was it Modula-3? Quite possibly both, one after the other. I&#8217;m not quite sure). I might try implementations in some of these languages some day, although I have forgotten most about them. Another  language that I also (vaguely) learned at the time of my early studies is Cobol, but I disliked it so much that it is very unlikely that I will ever try to code something in it in the future.</p>

<pre><code>program DammCheckDigit;
uses
  sysutils;

const damm : array[0..9,0..9] of integer =
    ( (0,3,1,7,5,9,8,6,4,2),
      (7,0,9,2,1,5,4,8,6,3),
      (4,2,0,6,8,7,1,3,5,9),
      (1,7,5,0,9,8,3,4,2,6),
      (6,1,2,3,0,4,5,9,7,8),
      (3,6,7,4,2,0,9,5,8,1),
      (5,8,6,9,7,2,0,1,3,4),
      (8,9,4,5,3,6,2,0,1,7),
      (9,4,3,8,6,1,7,2,0,5),
      (2,5,8,1,4,3,6,7,9,0) );

function is_valid(num : integer) : boolean;
var
    temp, i : integer;
    n_str : string;
begin
    n_str := inttostr(num);
    temp := 0;
    for i := 0 to length(n_str) do
    begin
        temp := damm[temp, ord(n_str[i]) - ord ('0')];
    end;
    is_valid := temp=0;
end;

var
    i : integer;
begin
    writeln('Valid numbers between 5700 and 5800 are:');
    for i := 5700 to 5800 do
    begin
        if is_valid(i) then
             write(i, ' ');
    end;
    writeln
end.

{
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797 
}
</code></pre>

<h4>Damm Algorithm in Python</h4>

<pre><code>damm = (
    (0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
    (7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
    (4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
    (1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
    (6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
    (3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
    (5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
    (8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
    (9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
    (2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
)

def is_valid(num: int) -&gt; bool:
  temp = 0
  for d in str(num):
    temp = damm[temp][int(d)] 
  return temp == 0

print("Valid numbers between 5700 and 5800 are:")
for i in range(5700, 5801):
  if is_valid(i):
    print(i, end=' ')
print("")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./damm-algo.py
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Ring</h4>

<p>Like in Julia and Lua, array indices start at 1, not 0, so the crucial code line (<code>temp = damm[temp + 1][ch - '0' + 1]</code>) needs to add 1 to the array subscripts when retrieving values from the <code>damm</code> matrix.</p>

<pre><code>damm = [ [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
         [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
         [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
         [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
         [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
         [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
         [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
         [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
         [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
         [2, 5, 8, 1, 4, 3, 6, 7, 9, 0] ]

see "Valid numbers between 5700 and 5800 are:" + nl
for i = 5700 to 5800
    if is_valid(i)
        see "" + i + " "
    ok
next
see " " + nl

func is_valid(num)
    temp = 0
    n = string(num)
    for ch in n
        temp = damm[temp + 1][ch - '0' + 1]
    next
    return temp = 0
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./damm-algo.ring
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Ruby</h4>

<p>The Ruby implementation is very simple and very concise, thanks to the built-in <code>digits</code> function. Note, however, that this function returns the digits in an inverse order, so we need to reverse it.</p>

<pre><code>def is_valid (n)
    damm = [ [0,3,1,7,5,9,8,6,4,2],
             [7,0,9,2,1,5,4,8,6,3],
             [4,2,0,6,8,7,1,3,5,9],
             [1,7,5,0,9,8,3,4,2,6],
             [6,1,2,3,0,4,5,9,7,8],
             [3,6,7,4,2,0,9,5,8,1],
             [5,8,6,9,7,2,0,1,3,4],
             [8,9,4,5,3,6,2,0,1,7],
             [9,4,3,8,6,1,7,2,0,5],
             [2,5,8,1,4,3,6,7,9,0] ]
    temp = 0
    for ch in n.digits.reverse
        temp = damm[temp][ch]
    end
    return temp == 0
end

puts("Valid numbers between 5700 and 5800 are:")
for i in 5700..5800
    if is_valid(i)
        printf("%d ", i)
    end
end
puts("")
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Rust</h4>

<pre><code>fn is_valid(num: u32) -&gt; bool {
    static DAMM: [[u8; 10]; 10] = [
        [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
        [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
        [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
        [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
        [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
        [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
        [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
        [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
        [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
        [2, 5, 8, 1, 4, 3, 6, 7, 9, 0],
    ];

    let mut temp = 0;
    let n_str = num.to_string();
    let digits = n_str.bytes();
    for i in digits {
        temp = DAMM[temp as usize][i as usize - 48];
    };
    return temp == 0
}

fn main() {
    println!("{}", "Valid numbers between 5700 and 5800 are:");
    for i in 5700..5800 {
        if is_valid(i) {
            print!("{} ", i);
        }
    }
    println!("{}", " ");
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Scala</h4>

<pre><code>object DammCheckDigit extends App {
  var damm =
    Vector(
      Vector(0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
      Vector(7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
      Vector(4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
      Vector(1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
      Vector(6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
      Vector(3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
      Vector(5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
      Vector(8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
      Vector(9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
      Vector(2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
    )

  def is_valid(num: Int): Boolean = {
    val num_str = num.toString.getBytes
    var temp = 0
    for (ch &lt;- num_str) {
      temp = damm(temp)(ch - '0')
    }
    return temp == 0
  }

  println("Valid numbers between 5700 and 5800 are:")
  for (i &lt;- 5700 to 5800) {
    if (is_valid(i)) {
      printf("%d ", i)
    }
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h4>Damm Algorithm in Tcl</h4>

<p>As in awk and Dart, I haven&#8217;t found a good way to declare and initialize two-dimensional arrays in Tcl, and the documentation is quite sparse. So I used the same solution as in awk and Dart for the conversion matrix: an array of strings. My knowledge of Tcl dates from the 1990s and is very rusty, so I initially had an interpreter error on almost every code line. So, be aware that my implementation certainly doesn’t satisfy the best practices of this language.</p>

<pre><code>proc is_valid {n} {
    set damm(0) "0317598642"
    set damm(1) "7092154863"
    set damm(2) "4206871359"
    set damm(3) "1750983426"
    set damm(4) "6123045978"
    set damm(5) "3674209581"
    set damm(6) "5869720134"
    set damm(7) "8945362017"
    set damm(8) "9438617205"
    set damm(9) "2581436790"

    set temp 0
    foreach ch [split $n {}] {
        set row $damm($temp)
        set temp [ string index $row $ch ]
    }
    return [ expr $temp == 0 ? 1 : 0]
}

puts "Valid numbers between 5700 and 5800 are: "
for {set i 5700} {$i &lt;= 5800} {incr i} {
    if [ is_valid $i ] {
        puts -nonewline  "${i} "
    }
}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./damm-algo.tcl
Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h2>Task 2: Palindromic Prime Cyclops</h2>

<p><em>Write a script to generate first 20 Palindromic Prime Cyclops Numbers.</em></p>

<blockquote>
  <p><em>A cyclops number is a number with an odd number of digits that has a zero in the center only.</em></p>
</blockquote>

<p><em>Output</em></p>

<pre><code>101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049,
1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821,
1360631, 1390931, 1490941, 1520251
</code></pre>

<h3>Palindromic Prime Cyclops in Raku</h3>

<p>In order to reduce the pointless computations, we&#8217;ll only test number ranges with an odd number of digits (<code>100..999, 10000..99999, 1000000..9999999</code>). As it turns out, the process is quite fast (about 2.6 seconds), so that performance enhancement wasn&#8217;t really required. I find it nonetheless better to avoid useless computations.</p>

<pre><code>sub is-cyclops ($n) {
    my $length = $n.chars;
    return False if $length %% 2;
    my $mid = ($length - 1) /2;
    return False if substr($n, $mid, 1) != 0;
    return False if $n.comb[0..$mid-1] ~~ /0/;
    return False if $n.comb[$mid+1..$length-1] ~~ /0/;
    return True;
}

my $count = 0;
for |(100..999), |(10000..99999), |(1000000..9999999) -&gt; $i {
    next unless $i eq $i.flip;
    next unless $i.is-prime;
    if is-cyclops $i {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./cyclops.raku
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251

real    0m2,573s
user    0m0,015s
sys     0m0,015s
</code></pre>

<h3>Palindromic Prime Cyclops in Perl</h3>

<p>This is a port to Perl of the Raku program above. Since Perl doesn&#8217;t have a built-in <code>is_prime</code> subroutine, we roll out our own.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub is_cyclops {
    my $n = shift;
    my $len = length $n;
    return 0 if $len % 2 == 0;
    my $mid = ($len - 1) /2;
    return 0 if substr($n, $mid, 1) != 0;
    return 0 if (split //, $n)[0..$mid-1] =~ /0/;
    return 0 if (split //, $n)[$mid+1..$len-1] =~ /0/;
    return 1;
}

sub is_prime {
   my $n = shift;
   return 1 if $n == 2;
   return 0 if $n % 2 == 0;
   return 0 if $n == 1;
   my $p = 3;
   my $sqrt = sqrt $n;
   while ($p &lt;= $sqrt) {
       return 0 if $n % $p == 0;
       $p += 2;
   }
   return 1;
}

my $count = 0;
for my $i (100..999, 10000..99999, 1000000..9999999) {
    next unless $i eq reverse $i;
    next unless is_cyclops $i;
    if (is_prime $i) {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./cyclops.pl
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h3>Palindromic Prime Cyclops in Other Languages</h3>

<p>We now present the same palindromic prime cyclop implementations in the following 8 guest languages:</p>

<ul>
<li>Julia</li>
<li>JavaScript</li>
<li>Kotlin</li>
<li>Lua</li>
<li>Python</li>
<li>Ring</li>
<li>Ruby</li>
<li>Coconut</li>
</ul>

<h4>Palindromic Prime Cyclops in Julia</h4>

<p>I like the concision of Perl and Raku postfix conditionals such as:</p>

<pre><code>return False if substr($n, $mid, 1) != 0;
return False if $n.comb[0..$mid-1] ~~ /0/;
return False if $n.comb[$mid+1..$length-1] ~~ /0/;
return True;
</code></pre>

<p>In most other languages, you would need three code lines for each case, for example in JavaScript:</p>

<pre><code>if (s[mid] != '0') {
    return false
}
if (s.slice(0, mid-1).search('0') &gt;= 0) {
    return false
}
if (s.slice(mid+1).search('0') &gt;= 0) {
    return false
}
return true
</code></pre>

<p>Julia doesn&#8217;t have postfix conditionals, but you can use short-circuit evaluation of the <code>&amp;&amp;</code> and <code>||</code> operators as an alternative to short <code>if</code> statements to reach the same concision.</p>

<p>The short-circuit evaluation, which is common to most imperative programming languages, means that:</p>

<ul>
<li>In the expression a &amp;&amp; b, the subexpression b is only evaluated if a evaluates to true.</li>
<li>In the expression a || b, the subexpression b is only evaluated if a evaluates to false.</li>
</ul>

<p>Instead of <code>if &lt;cond&gt; &lt;statement&gt; end</code>, one can write <code>&lt;cond&gt; &amp;&amp; &lt;statement&gt;</code> (which could be read as: <code>&lt;cond&gt; and then &lt;statement&gt;</code>). Similarly, instead of <code>if ! &lt;cond&gt; &lt;statement&gt; end</code>, one can write <cond> || <statement> (which could be read as: <code>&lt;cond&gt; or else &lt;statement&gt;</code>). This idiomatic alternative to short <code>if</code> statement is frequently used in Julia. Although most languages have the short-circuit behavior of logical operators, not many of them support this construct with an ending statement. Raku and Perl do, but this is not commonly used because the <code>return false if ...</code> is admittedly clearer. In the seven guest languages used here, only Kotlin also supports this construct.</p>

<p>So, in Julia, we will have, for example:</p>

<pre><code>len % 2 == 0 &amp;&amp; return false
...
s[mid] == '0' || return false
</code></pre>

<p>This is our Julia implementation using this concise construct:</p>

<pre><code>using Primes

function is_cyclops(n)
    s = string(n)
    len = length(s)
    len % 2 == 0 &amp;&amp; return false
    mid = Int((len + 1) /2)
    s[mid] == '0' || return false
    if occursin('0', s[1:mid-1]) || occursin('0', s[mid+1:len])
        return false
    end
    return true;
end

count = 0
for i = [101:999; 10000:99999; 1000000:9999999]
    string(i) != reverse(string(i)) &amp;&amp; continue
    is_cyclops(i) || continue
    if isprime(i)
        print("$i ")
        global count += 1
        count &gt;= 20 &amp;&amp; break
    end
end
println("")
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./cyclop.jl
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in JavaScript</h4>

<p>JavaScript doesn&#8217;t have a built-in function for prime numbers (just as almost all other guest languages to follow). So we roll out our own <code>is_prime</code> function (ported from the Perl implementation above).</p>

<p>It also doesn&#8217;t seem possible to combine ranges as we&#8217;ve done previously in other languages, so we use a <code>if ... else if ... else if ...</code> construct to simulate range concatenation.</p>

<pre><code>function is_cyclops (n) {
    let s = n.toString()
    let len = s.length
    if (len % 2 == 0) {
        return false
    }

    let mid = (len - 1) / 2
    if (s[mid] != '0') {
        return false
    }

    if (s.slice(0, mid-1).search('0') &gt;= 0) {
        return false
    }
    if (s.slice(mid+1).search('0') &gt;= 0) {
        return false
    }
    return true
}

function is_prime(n) {
    if (n == 2) {
        return true
    }
    if (n &lt; 2 || n % 2 == 0) {
        return false
    }
    var p = 3
    let sqrt_n = Math.sqrt(n)
    while (p &lt;= sqrt_n) {
        if (n % p == 0) {
            return false
        }
        p += 2
    }
    return true
}

var count = 0
var i = 100
while (count &lt; 20) {
    i++
    if (i == 999) {
        i = 10000
    } else if (i == 99999) {
        i = 1000000
    } else if (i &gt;= 9999999) {
        break
    }
    if (i.toString() != i.toString().split("").reverse().join("")) {
        continue;
    }
    if (! is_cyclops(i)) {
        continue;
    }
    if (is_prime(i)) {
        process.stdout.write(i + " ")
        count++
    }
}
console.log("")
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Kotlin</h4>

<p>I do not know whether the short-circuit evaluation alternative to short <code>if</code> statement described above in the context of the Julia language is as commonly used in Kotlin as it is in Julia, but, since it works in Kotlin, I&#8217;ll use it here. Also note that we need to implement our own <code>is_prime</code> function in Kotlin.</p>

<pre><code>fun is_prime(n: Int): Boolean {
    n == 2 &amp;&amp; return true
    if (n &lt; 2 || n % 2 == 0) {
        return false
    }
    var p = 3
    val sqrt_n : Int = Math.sqrt(n.toDouble()).toInt()
    while (p &lt;= sqrt_n) {
        n % p == 0 &amp;&amp; return false
        p += 2
    }
    return true
}

fun is_cyclops(num: Int): Boolean {
    val s = num.toString()
    val len = s.length
    len % 2 == 0 &amp;&amp; return false
    val mid = ((len - 1) /2).toInt()
    s[mid] == '0' || return false
    if ('0' in s.slice(0 until mid) or '0' in s.slice(mid+1 until len) {
        return false
    }
    return true
}

fun main() {
    var count = 0
    var i = 100
    while (count &lt; 20) {
        i++
        if (i == 999) {
             i = 10000
        } else if (i == 99999) {
            i = 1000000
        } else if (i &gt;= 9999999) {
            break
        }
        if (i.toString() != i.toString().reversed()) {
            continue;
        }
        if (! is_cyclops(i)) {
            continue;
        }
        if (is_prime(i)) {
            print("$i ")
            count++
        }
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>    101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Lua</h4>

<p>Lua doesn&#8217;t have a <code>next</code> or <code>continue</code> statement to  go directly to the next iteration of a loop, because &#8220;the language is designed to be small.&#8221; I&#8217;m not sure it is a very good reason, as, in my humble opinion, this kind of statement is very useful. This is the reason for which we have two <code>goto skip</code> statements in the main part of the program. I know very well what Edsger Dijkstra said in his famous letter to ACM  &#8220;Go To Statement Considered Harmful,&#8221; but Donald Knuth commented that a &#8220;goto forward&#8221; within the same routine wasn&#8217;t that bad. This is the case here. Having said that, I would definitely prefer if Lua had a <code>continue</code> or <code>next</code> statement rather than a <code>goto</code> statement.</p>

<p>We also have to implement a <code>is_prime</code> function here.</p>

<pre><code>local function is_cyclops(num)
    local n_str = tostring(num)
    size = string.len(n_str)
    if size % 2 == 0 then
        return false
    end
    mid = (size + 1) / 2
    if string.sub(n_str, mid, mid ) ~= '0' then
        return false
    end
    if string.sub(n_str, 1, mid-1):find "0" ~= nil then
        return false
    end
    if string.sub(n_str, mid+1, len):find "0" ~= nil then
        return false
    end
    return true
end

local function is_prime(n)
    if n == 2 then
        return true
    end
    if n &lt; 2 or n % 2 == 0 then
        return false
    end
    local p = 3
    sqrt_n = math.sqrt(n)
    while p &lt;= sqrt_n do
        if n % p == 0 then
            return false
        end
        p = p + 2
    end
    return true
end

count = 0
i = 100
while count &lt; 20 do
    i = i + 1
    if i == 999 then
        i = 10000
    elseif i == 99999 then
        i = 1000000
    elseif i &gt;= 9999999 then
        break
    end

    if i ~= tonumber(string.reverse(tostring(i))) then
        goto skip
    end
    if not is_cyclops(i) then
        goto skip
    end
    if is_prime(i) then
        io.write(i, " ")
        count = count + 1
    end
    ::skip::
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Python</h4>

<pre><code>import math
from re import search
from itertools import chain

def is_prime(n):
  if n == 2:
    return True
  if n == 0 or n == 1 or n % 2 == 0:
    return False
  p = 3
  sqrt_n = math.sqrt(n)
  while (p &lt;= sqrt_n):
    if ((n % p) == 0):
      return False
    p += 2
  return True

def is_cyclops (num):
  s = str(num)
  size = len(s)
  if size % 2 == 0:
    return False
  mid = int((size - 1) / 2)
  if s[mid] != '0':
    return False
  if search(r"0", s[0:mid-1]) or search(r"0", s[mid+1:size-1]):
    return False
  return True

count = 0
myrange = chain(range(100, 999), range(10000, 99999), range(1000000, 9999999))
for i in myrange:
  if str(i) != str(i)[::-1]:
    continue
  if not is_cyclops(i):
    continue
  if is_prime(i):
    print(i, end=' ')
    count += 1
    if count &gt;= 20: 
      break

print("")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./cyclop.py
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Ring</h4>

<p>As far as I can tell, Ring also doesn&#8217;t have <code>continue</code> or <code>next</code> statements (and also no <code>last</code> and no <code>break</code>). Or, at least, I couldn&#8217;t find them (or an equivalent) in the documentation. So I had to use nested <code>if</code> statements, something that I don’t like too much. It also appears that there is no built-in function for reversing a string, so I wrote a <code>is_palindrome</code> function. And also a <code>is_prime</code> function. Also note that the equality operator (<code>==</code> in many languages) is spelled with a single equal sign in Ring, so we have for example <code>if n % p = 0</code>. I wonder how the compiler can distinguish it from the assignment operator, there must be some cases that are ambiguous.</p>

<pre><code>i = 100
count = 0
while count &lt; 20
    i++
    if i = 999
        i = 10000
    ok
    if i = 99999
        i = 1000000
    ok
    if is_palindrome(i)
        if is_cyclops(i)
            if is_prime(i)
                count++
                see "" + i + " "
            ok
       ok
   ok
end
see "" + nl

func is_prime (n)
    if n = 2 
        return true
    ok
    if n &lt; 2 or n % 2 = 0
        return false
    ok
    p = 3
    sqrt_n = sqrt(n)
    while p &lt; sqrt_n
        if n % p = 0
            return false
        ok
        p++
    end
    return true

func is_cyclops(n)
    s = "" + n
    size = len(s)
    if size % 2 = 0
        return false
    ok
    mid = ( size + 1) / 2
    if s[mid] != 0
        return false
    ok

    if substr(left(s, mid-1), "0") &gt; 0
        return false
    ok
    if substr(right(s, mid-1), "0") &gt; 0
        return false
    ok
    return true

func is_palindrome(n)
    s = "" + n
    size = len(s)
    for i = 1 to size/2
        if s[i] != s[size - i + 1]
            return false
        ok
    next
    return true
</code></pre>

<p>Output:</p>

<pre><code>$ ring  ./cyclop.ring
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Ruby</h4>

<p>Ruby has a built-in <code>prime</code> function, so we don&#8217;t need to implement it. I found a way to combine ranges, but I must admit that this is copied from a post on Stack Overflow, I would not have found it by myself.</p>

<pre><code>require 'prime'

def is_cyclops (num) 
    s = num.to_s
    len = s.length;
    if len % 2 == 0 then
        return false
    end
    mid = (len - 1) / 2
    if s[mid] != '0' then
        return false
    end
    if s[0..mid-1][/0/] || s[mid+1..len-1][/0/]
        return false
    end 
    return true
end

count = 0;
range = [ 100..999, 10000..99999, 1000000..9999999 ].map { |r| Array(r) }.inject( :+ )
for i in range
    if i.to_s != i.to_s.reverse || ! is_cyclops(i)
        next
    end
    if i.prime?
        printf("%d ", i)
        count += 1;
        if count == 20
            break
        end
    end
end
puts ""
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h4>Palindromic Prime Cyclops in Coconut (a Functional Extension of Python)</h4>

<p><em>This section on Coconut was added on August 18, 2022.</em></p>

<p>Coconut is a variant of Python built for functional programming. It is actually a kind of extension of Python, and Coconut code is in fact compiled to Python code. The documentation is still somewhat limited, but there is a good <a href="https://coconut.readthedocs.io/en/latest/HELP.html#case-study-1-factorial">Coconut Tutorial</a> and a reference <a href="https://coconut.readthedocs.io/en/latest/DOCS.html">Coconut Documentation</a>.</p>

<p>I was interested in trying to use Coconut for this task essentially because of its support to pipeline style programming. Since we&#8217;re looking for the first twenty integers having a certain set of properties (prime, palindromic, with an odd number of digits, with a 0 in the middle and no other 0, etc.), it is appealing to use a pipeline of filters, one for each of these properties, as done in the last (main) section of the code below.</p>

<pre><code>import math
from re import search

def is_prime(n):
    case n:
        match 0:
            return False
        match 1:
            return False
        match 2:
            return True
        match _ is int if n &gt; 2:
            if n % 2 == 0:
                return False
            p = 3
            sqrt_n = math.sqrt(n)
            while (p &lt;= sqrt_n):
                if (n % p) == 0:
                    return False
                p += 2
            return True

def is_cyclops (num):
  s = str(num)
  size = len(s)
  mid = int((size - 1) / 2)
  if s[mid] != '0':
    return False
  if search(r"0", s[0:mid-1]) or search(r"0", s[mid+1:size-1]):
    return False
  return True

range(100, 999) :: range(10000, 99999) :: range(1000000, 9000000) \
|&gt; filter$( -&gt; str(_) == str(_)[::-1]) \    # palindrome
|&gt; filter$( -&gt; len(str(_)) %2 != 0) \       # odd number of digits
|&gt; filter$(is_cyclops) |&gt; filter$(is_prime) \
|&gt;  list |&gt; .$[:20] |&gt; print
</code></pre>

<p>Output:</p>

<pre><code>101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 21, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>RFC: new API for Type::Params</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2022/08/rfc-new-api-for-typeparams.html"/>
    <id>tag:blogs.perl.org,2022:/users/toby_inkster//1019.10875</id>
    <published>2022-08-18T12:27:59Z</published>
    <updated>2022-08-18T12:53:31Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Moose" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Type-Tiny" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="typetiny" label="Type-Tiny" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>Firstly, I'm not planning on breaking compatibility with Type::Params. The new API would live under a different namespace, such as Type::Params2.</p>

<p>The API for Type::Params is currently:</p>
<pre style="background:#ffe; border:1px solid #cc9; font-size:80%; padding: 4px">
use feature 'state';
use Type::Params qw( compile compile_named_oo );
use Types::Standard -types;

sub function_with_positional_parameters {
  state $check = compile( ArrayRef, Int, Int );
  my ( $list, $start, $end ) = $check->( @_ );

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

sub function_with_named_parameters {
  state $check = compile_named_oo( list => ArrayRef, start => Int, end => Int );
  my ( $arg ) = $check->( @_ );

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>Alternatively, there's:</p>
<pre style="background:#ffe; border:1px solid #cc9; font-size:80%; padding: 4px">
use Type::Params qw( wrap_subs compile_named_oo );
use Types::Standard -types;

wrap_subs function_with_positional_parameters => [ ArrayRef, Int, Int ];

sub function_with_positional_parameters {
  my ( $list, $start, $end ) = @_;

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

wrap_subs function_with_named_parameters =>
  compile_named_oo( list => ArrayRef, start => Int, end => Int );

sub function_with_named_parameters {
  my ( $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>My suggested API is:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
use feature 'state';
use Type::Params2;
use Types::Standard -types;

sub function_with_positional_parameters {
  state $check = signature(
    pos => [ ArrayRef, Int, Int ],
  );
  my ( $list, $start, $end ) = $check->( @_ );

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

sub function_with_named_parameters {
  state $check = signature(
    named => [ list => ArrayRef, start => Int, end => Int ],
  );
  my ( $arg ) = $check->( @_ );

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>It would also support the inside-out technique:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
use Type::Params2;
use Types::Standard -types;

signature_for function_with_positional_parameters => (
  pos => [ ArrayRef, Int, Int ],
);

sub function_with_positional_parameters {
  my ( $list, $start, $end ) = @_;

  my @slice = @{$list}[ $start .. $end ];
  return \@slice;
}

signature_for function_with_named_parameters => (
  named => [ list => ArrayRef, start => Int, end => Int ],
);

sub function_with_named_parameters {
  my ( $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>There would be a shortcut for methods:</p>
<pre style="background:#efe; border:1px solid #9c9; font-size:80%; padding: 4px">
signature_for method_with_named_parameters => (
  method => 1,
  named  => [ list => ArrayRef, start => Int, end => Int ],
);

sub method_with_named_parameters {
  my ( $self, $arg ) = @_;

  my @slice = @{$arg->list}[ $arg->start .. $arg->end ];
  return \@slice;
}
</pre>

<p>Comments? Do people think this would be an improvement?</p>]]>
        
    </content>
</entry>
  <entry>
    <title>RFC: new API for Type::Params</title>
    <link rel="alternate" href="https://dev.to/tobyink/rfc-new-api-for-typeparams-39oo" type="text/html"/>
    <content type="html">&lt;p&gt;Firstly, I'm not planning on breaking compatibility with Type::Params. The new API would live under a different namespace, such as Type::Params2.&lt;/p&gt;

&lt;p&gt;The API for Type::Params is currently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="sx"&gt;qw( compile compile_named_oo )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile_named_oo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, there's:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="sx"&gt;qw( wrap_subs compile_named_oo )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;wrap_subs&lt;/span&gt; &lt;span class="s"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;wrap_subs&lt;/span&gt; &lt;span class="s"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;compile_named_oo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My suggested API is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;named&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would also support the inside-out technique:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;signature_for&lt;/span&gt; &lt;span class="s"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_positional_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;signature_for&lt;/span&gt; &lt;span class="s"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;named&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;function_with_named_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There would be a shortcut for methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;signature_for&lt;/span&gt; &lt;span class="s"&gt;method_with_named_parameters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;named&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;ArrayRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;method_with_named_parameters&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comments? Do people think this would be an improvement?&lt;/p&gt;

</content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/rfc-new-api-for-typeparams-39oo</id>
    <published>2022-08-18T08:02:21Z</published>
    <updated>2022-08-18T08:02:21Z</updated>
    <category term="perl"/>
    <category term="rfc"/>
  </entry>
  <entry>
    <title>Make Perl Count Arguments</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/make-perl-count-arguments-3bdj" type="text/html"/>
    <content type="html">&lt;p&gt;Unlike many programming languages, Perl doesn't check that functions are called with the correct number of arguments. This is because Perl subroutines are variadic by default, which makes a lot of programming tasks really easy. The downside is that a lot of the time functions only make sense if they are called with a certain number of arguments.&lt;/p&gt;

&lt;p&gt;Most of the time if a subroutine is called with an incorrect number of arguments it is because the programmer made a simple typo. To make our lives as programmers easier, it would be nice if we could detect this situation and give a clear error message about what went wrong.&lt;/p&gt;

&lt;p&gt;We will explore a solution to this problem.&lt;/p&gt;

&lt;p&gt;WARNING: The examples in this artical call Perl from the command line. If you don't understand Perl command line syntax, only pay attention to what comes after the &lt;code&gt;-E&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;num_diff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called with two arguments our function behaves as expected.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -W -I. -MT -E 'say T::num_diff(7, 17)'
10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;But what if we call &lt;code&gt;num_diff&lt;/code&gt; with more than two arguments?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -W -I. -MT -E 'say T::num_diff(23, 21, 48)'
2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Perl has no issue if we call this function with 3 arguments, and happily returns us the difference between the first two arguments. This is bad! The difference between 3 numbers is certainly not the difference between the first 2.&lt;/p&gt;

&lt;p&gt;A nice way to deal with this problem is to use &lt;a href="https://perldoc.perl.org/perlsub#Signatures"&gt;signatures&lt;/a&gt;, which provides syntax for declaring a subroutines arguments. Lets rewrite &lt;code&gt;num_diff&lt;/code&gt; using signatures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;num_diff&lt;/span&gt;&lt;span class="p"&gt;($n1, $n2) {&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets see what happens when we call &lt;code&gt;num_diff&lt;/code&gt; with more than 2 arguments.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -MT -E 'say T::num_diff(22, 33, 8)'
Too many arguments for subroutine 'T::num_diff' (got 3; expected 2) at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Awesome, our problem is solved! With signatures Perl can count our subroutine arguments and give us error diagnositics when we mess up.&lt;/p&gt;

&lt;p&gt;Unfortunately though there are some downsides to signatures. First off signatures didn't exist until Perl version 5.20, so if you're use an old Perl signatures are not an option. The other downside is that signatures were experimental until Perl version 5.36, which is why the &lt;code&gt;use feature 'signatures'&lt;/code&gt; statement is necessary.&lt;/p&gt;

&lt;p&gt;I have been working on a Perl project that uses Perl version 5.16.3, so I cannot use signatures. To count arguments I wrote a function that I call as the first statement in subroutines that kills the program if it did not receive the correct number of arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Carp&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;confess&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;arg_count_or_die&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;# Carp::Confess unless $num_args is in range $lower-$upper&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$upper&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$num_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$num_args&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$num_args&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$caller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$arg_range_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$upper&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$lower&lt;/span&gt;&lt;span class="s2"&gt; arg&lt;/span&gt;&lt;span class="si"&gt;$plural&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$lower&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;$upper&lt;/span&gt;&lt;span class="s2"&gt; args&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="nv"&gt;confess&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;my-program: internal error: call to '&lt;/span&gt;&lt;span class="si"&gt;$caller&lt;/span&gt;&lt;span class="s2"&gt;' passed &lt;/span&gt;&lt;span class="si"&gt;$num_args&lt;/span&gt;&lt;span class="s2"&gt; arg&lt;/span&gt;&lt;span class="si"&gt;$plural&lt;/span&gt;&lt;span class="s2"&gt; but expects &lt;/span&gt;&lt;span class="si"&gt;$arg_range_msg&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets rewrite &lt;code&gt;num_diff&lt;/code&gt; to use this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;num_diff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nv"&gt;arg_count_or_die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, lets call &lt;code&gt;num_diff&lt;/code&gt; with more than 2 arguments&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -MT -E 'say T::num_diff(22, 33, 8)'
my-program: internal error: call to 'T::num_diff' passed 3 args but expects 2 args at T.pm line 19.
        T::arg_count_or_die(2, 2, 22, 33, 8) called at T.pm line 27
        T::num_diff(22, 33, 8) called at -e line 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can see that by using Carp::Confess we get an excellent error message that shows the call stack that lead to the to our erroneus subroutine call. By prefixing the error message with &lt;code&gt;my-program: internal error&lt;/code&gt;, if this error ever occurs our user knows that they found a bug and can send us the stack trace which will be very useful for debugging.&lt;/p&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/make-perl-count-arguments-3bdj</id>
    <published>2022-08-17T19:28:00Z</published>
    <updated>2022-08-17T19:28:00Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#577 - Optimism and numbers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/577.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>last week Mohammad expressed his optimism about Perl rising again. It's nice to have a gut feeling about that, but I would also like to see the numbers. So I looked at the stats I've been collecting for a while: The number of <a href="https://szabgab.com/cpan-number-of-visits.html">visits to CPAN</a>. More specifically these are the number of "entrances" to MetaCPAN (and in earlier times to SCO as well.) as measured by Google Analytics.</p>
<p>My assumption is that we can measure well the level of Perl usage by the number of visits to <a href="https://metacpan.org/">MetaCPAN</a>.</p>
<p>The number for July 2022 does not indicate any (positive) changes, but it is probably too early to see any effects anyway.</p>
<p>However, looking at the numbers I noticed that there was a nice increase in the activity in 2012. Actually starting in August 2011. This increased activity lasted about a year then the decline continued and by 2014 the activity was below that of the 2011 level.</p>
<p>I could find 2 Perl-related events preceding the increased activity. In May 2011 the release of perl 5.14 and in July the opening of MetaCPAN. Neither seem to explain the change. So I am turning to you:</p>
<p>What other things happened in or out of the Perl community that might explain that sudden increase of visitors to CPAN?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/577.html</id>
    <published>2022-08-15T10:00:00Z</published>
    <updated>2022-08-15T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Random redirect</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-15T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-random-redirect"/>  <id>https://perlmaven.com/dancer2-solution-2-random-redirect</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 177</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-177/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-177/</id>
    <published>2022-08-15T00:00:00Z</published>
    <updated>2022-08-15T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 178</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-178/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Quater-imaginary Base 10. TASK #2: Business Date HEADLINES  Welcome to Week #178 of the weekly challenge.
We have two new members joining the Team PWC last week i.e. AhmetEmre and Aut0exec. Thank you AhmetEmre for solutions in BQN and Aut0exec for solution in Perl.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-178/</id>
    <published>2022-08-15T00:00:00Z</published>
    <updated>2022-08-15T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Cyclops Validation</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/14#pwc177" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to validate the given number 
against the included check digit.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

my @damm_matrix;
$damm_matrix[0] = [0, 7, 4, 1, 6, 3, 5, 8, 9, 2];
$damm_matrix[1] = [3, 0, 2, 7, 1, 6, 8, 9, 4, 5];
$damm_matrix[2] = [1, 9, 0, 5, 2, 7, 6, 4, 3, 8];
$damm_matrix[3] = [7, 2, 6, 0, 3, 4, 9, 5, 8, 1];
$damm_matrix[4] = [5, 1, 8, 9, 0, 2, 7, 3, 6, 4];
$damm_matrix[5] = [9, 5 ,7, 8, 4, 0, 2, 6, 1, 3];
$damm_matrix[6] = [8, 4, 1, 3, 5, 9, 0, 2, 7, 6];
$damm_matrix[7] = [6, 8, 3, 4, 9, 5, 1, 0, 2, 7];
$damm_matrix[8] = [4, 6, 5, 2, 7, 8, 3, 1, 0, 9];
$damm_matrix[9] = [2, 3, 9, 6, 8, 1, 4, 7, 5, 0];

sub damm_validation{
    my($x) = @_;
    my @digits = split(//, $x);
    my $interim_digit = 0;
    while(my $d = shift @digits){
        $interim_digit = $damm_matrix[$d][$interim_digit];
    }
    return boolean($interim_digit == 0);
}

MAIN:{
    print damm_validation(5724) . "\n";
    print damm_validation(5727) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Damm Validation really boils down to a series of table lookups. Once that is determined
we need to encode the table and then perform the lookups in a loop. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 Palindromic Prime Cyclops Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
no warnings q/recursion/;
use Math::Primality qw/is_prime/;

sub n_cyclops_prime_r{
    my($i, $n, $cyclops_primes) = @_;
    return @{$cyclops_primes} if @{$cyclops_primes} == $n;
    push @{$cyclops_primes}, $i if is_prime($i) &amp;&amp; 
                                   length($i) % 2 == 1 &amp;&amp;
                                   join("", reverse(split(//, $i))) == $i &amp;&amp;
                                   (grep {$_ == 0} split(//, $i))   == 1 &amp;&amp; 
                                   do{my @a = split(//, $i);
                                      $a[int(@a / 2)]
                                   } == 0;
    n_cyclops_prime_r(++$i, $n, $cyclops_primes);
}

sub n_cyclops_primes{
    my($n) = @_;
    return n_cyclops_prime_r(1, $n, []);
}

MAIN:{
    print join(", ", n_cyclops_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I recently saw the word &lt;em&gt;whipupitide&lt;/em&gt; used by Dave Jacoby and here is, I think, a good
example of it. We need to determine if a number is prime, palindromic, and cyclops. In 
Perl we can determine all of these conditions very easily. &lt;/p&gt;

&lt;p&gt;Just to add a bit of fun I decided to use a recursive loop. Out of necessity this will 
have a rather deep recursive depth, so we'll need to set &lt;code&gt;no warnings q/recursion/&lt;/code&gt; or 
else perl will complain when we go deeper than 100 steps. We aren't using too much memory
here, but if that were a concern we could do Perl style 
&lt;a href="https://perldoc.perl.org/functions/goto"&gt;tail recursion&lt;/a&gt; with a &lt;code&gt;goto __SUB__&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/"&gt;Challenge 177&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc177</id>
    <published>2022-08-14T17:59:00-04:00</published>
    <updated>2022-08-14T17:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>The Palindromic Prime Cyclops Algorithm</title>
    <link rel="alternate" href="https://dev.to/simongreennet/the-palindromic-prime-cyclops-algorithm-4c0h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 177
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-177/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Damm Algorithm
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive number, <code>$n</code>.</p>

<p>Write a script to validate the given number against the included <a href="https://en.wikipedia.org/wiki/Damm_algorithm">check digit</a>.</p>

<h3>
  
  
  My solution
</h3>

<p>Thanks to the Wikipedia link provided, this proved a pretty straight forward task. Starting with 0, change the row that corresponds with the value of that digit in the current row. Repeat until we have processed all digits. If the last row is 0, it's validated. If it is something else, you've got dodgy data.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 5724
1

<span class="nv">$ </span>./ch-1.py 5727
0
</code></pre>

</div>



<h2>
  
  
  Task 2: Palindromic Prime Cyclops
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 Palindromic Prime Cyclops Numbers.</p>

<p>A cyclops number is a number with an odd number of digits that has a zero in the center only.</p>

<h3>
  
  
  My solution
</h3>

<p>Rather than checking if number is a palindrome with only a 0 in the center, I generate the left side of the number, and then add a zero and the number reversed. This is easier and quicker IMO. YMMV</p>

<p>Then I need to check that the number does not contain any other zeros, and if it is prime.</p>

<p>I then wrap this in a loop that increments the number by one, and continues until we find 20 solution. Finally, I print out the results.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251

<span class="nv">$ </span>./ch-2.pl 
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/the-palindromic-prime-cyclops-algorithm-4c0h</id>
    <published>2022-08-14T09:37:12Z</published>
    <updated>2022-08-14T09:37:12Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #171</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-171/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 171 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-171/</id>
    <published>2022-08-14T00:00:00Z</published>
    <updated>2022-08-14T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4422026552243902575</id>
    <published>2022-08-13T21:58:00.001+02:00</published>
    <updated>2022-08-13T22:12:41.051+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdv) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.53" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.51 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.053007" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.053007&lt;/strong&gt; on 2022-08-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053005 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.3.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.3.0&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: v1.2.1 was 8 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.32&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.30 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.0&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.1 was 5 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSHELOR/Digest-SHA-6.03" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Digest::SHA&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for SHA-1/224/256/384/512 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.03&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 6.02 was 4 years, 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/FFI-Platypus-2.00" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.00&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 1 month, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/IPC-Run-20220807.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IPC::Run&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - system() and background procs w/ piping, redirs, ptys (Unix, Win32) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220807.0&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 20200505.0 was 2 years, 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Memoize-1.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.10&lt;/strong&gt; on 2022-08-11&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.09 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.7" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.7&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.6 was 9 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Object-Pad-0.68" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.66 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OALDERS/Pithub-0.01039" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01039&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01038 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCONWAY/PPR-0.001004" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001004&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.001002 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Proc-Fork-0.807" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Proc::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple, intuitive interface to the fork() system call &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.807&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.05 was 20 years, 4 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.63" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Scalar::List::Utils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.63&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 159&lt;/li&gt;  &lt;li&gt;Previous version: 1.62 was 4 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9638" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9638&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9635 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BIGJ/Test-Warn-0.37" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Warn&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to test methods for warnings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.37&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.36 was 4 years, 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ISHIGAKI/Text-CSV-2.02" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Text::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comma-separated values manipulator (using XS or PurePerl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 70&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 1 year, 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4422026552243902575/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html" title="(cdv) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7159434738311137429</id>
    <published>2022-08-13T21:54:00.000+02:00</published>
    <updated>2022-08-13T21:54:09.924+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxix) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 44&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/08/13 19:53:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlsh" target="_blank"&gt;App::perlsh&lt;/a&gt; - a simple perl REPL based on Lexical::Persistence&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::InflateColumn::TimePiece" target="_blank"&gt;DBIx::Class::InflateColumn::TimePiece&lt;/a&gt; - Auto-create Time::Piece objects from integer columns&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; - Can easy script in Big5, Big5-HKSCS, GBK, Sjis(also CP932), UHC, UTF-8, ...&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Wire10" target="_blank"&gt;Net::Wire10&lt;/a&gt; - Pure Perl driver for MySQL, Sphinx and Drizzle.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Menu::Hierarchical" target="_blank"&gt;Term::Menu::Hierarchical&lt;/a&gt; - Perl extension for creating hierarchical menus&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URN::OASIS::SAML2" target="_blank"&gt;URN::OASIS::SAML2&lt;/a&gt; - Constants for urn:oasis SAML2 implementations&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::ConfigParser" target="_blank"&gt;Apache::ConfigParser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ansiecho" target="_blank"&gt;App::ansiecho&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CBOR::Free" target="_blank"&gt;CBOR::Free&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Mock" target="_blank"&gt;DBD::Mock&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=280)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::ValueWriter::XLSX" target="_blank"&gt;Excel::ValueWriter::XLSX&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus::Lang::Go" target="_blank"&gt;FFI::Platypus::Lang::Go&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Tree" target="_blank"&gt;HTML::Tree&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JIRA::REST" target="_blank"&gt;JIRA::REST&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Persistence" target="_blank"&gt;Lexical::Persistence&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::AnyNum" target="_blank"&gt;Math::AnyNum&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BigInt" target="_blank"&gt;Math::BigInt&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BigRat" target="_blank"&gt;Math::BigRat&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Complex" target="_blank"&gt;Math::Complex&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memoize" target="_blank"&gt;Memoize&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Run3" target="_blank"&gt;Mojo::Run3&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Log::Any" target="_blank"&gt;MooX::Log::Any&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TO_JSON" target="_blank"&gt;MooX::TO_JSON&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TypeTiny" target="_blank"&gt;MooX::TypeTiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mu::Tiny" target="_blank"&gt;Mu::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Spreadsheets" target="_blank"&gt;Net::Google::Spreadsheets&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Protocol::WebSocket::Fast" target="_blank"&gt;Protocol::WebSocket::Fast&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Inspector" target="_blank"&gt;Role::Inspector&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=66)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::MultiSub" target="_blank"&gt;Syntax::Keyword::MultiSub&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=178)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=167)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UniEvent" target="_blank"&gt;UniEvent&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Smart" target="_blank"&gt;XML::Smart&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7159434738311137429/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7159434738311137429"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7159434738311137429"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxix-metacpan-weekly-report.html" title="(dxix) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4959372398246909668</id>
    <published>2022-08-13T21:52:00.001+02:00</published>
    <updated>2022-08-13T21:52:16.091+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlvii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-08-13 19:51:22 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73288514" target="_blank"&gt;Perl installed via conda snakemake shell error: Can't open perl script .. no such file or directory&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73290735" target="_blank"&gt;Installing Perl in VSCode&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73279792" target="_blank"&gt;Perl: Display STDOUT and STDERR in different colors on Windows&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73284616" target="_blank"&gt;Insecure dependency in open while running with -T switch [PERL]&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73336460" target="_blank"&gt;Determining the parts that match a regex in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4959372398246909668/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlvii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4959372398246909668"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4959372398246909668"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlvii-stackoverflow-perl-report.html" title="(dxlvii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Meet The Champion: July 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/meet-the-champion-2022-07/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Get to know about Marton Polgar. Welcome to the monthly series Meet The Champion.
Last month we spoke to PokGoPun, the winner of June 2022.
Today we are talking to Marton Polgar, the winner of July 2022 of The Weekly Challenge. I hope you are going to enjoy the interview.
 Mohammad: Tell us about your technical background?
Marton: I started programming in 2011 in my high school years, as a hobby.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/meet-the-champion-2022-07/</id>
    <published>2022-08-13T00:00:00Z</published>
    <updated>2022-08-13T00:00:00Z</updated>
  </entry>
  <entry>
    <title>CPM0  frl-plugin:perlscript: ERROR: 'times' trapped by operation mask at /usr/lib64/perl5/B.pm line 183.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/kavya/2022/08/cpm0-frl-pluginperlscript-error-times-trapped-by-operation-mask-at-usrlib64perl5bpm-line-183.html"/>
    <id>tag:blogs.perl.org,2022:/users/kavya//4138.10874</id>
    <published>2022-08-11T14:58:17Z</published>
    <updated>2022-08-11T15:05:41Z</updated>
    <author>
        <name>kavya</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/kavya/">
        <![CDATA[<p>Hello ,<br />
When "use DateTime;" library is included in perl file ,getting the error as </p>

<p>"CPM0  frl-plugin:perlscript: ERROR: 'times' trapped by operation mask at /usr/lib64/perl5/B.pm line 183."</p>

<p>Could someone provide some inputs on the same.<br />
Also to which tag does this opcode 'times' belong to ?<br />
example: fork,wait, waitpid will belong to :subprocess </p>

<p>Regards<br />
Kavya</p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Please relicense from "Perl 5" to MIT or Apache 2.0 license</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/08/please-relicense-from-perl-5-to-mit-or-apache-20-license.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10873</id>
    <published>2022-08-11T05:20:46Z</published>
    <updated>2022-08-11T06:17:52Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Following from my <a href="http://blogs.perl.org/users/dean/2022/06/reconsidering-the-licensing-of-perl-code.html">previous post</a>, <strong>I am now actively encouraging everyone to switch licenses to <a href="https://en.wikipedia.org/wiki/MIT_License">MIT</a>/<a href="https://en.wikipedia.org/wiki/ISC_license">ISC</a> license</strong> or <a href="https://en.wikipedia.org/wiki/Apache_License#Version_2.0">Apache 2.0</a>.</p>

<p>My reasoning is that in the vast majority of cases the author and contributors want the software to be used by as many businesses and hobbyists as possible.</p>

<p>Previously I described how the burden of understanding and complying with licenses, including open source licenses, can be an unintended barrier to them using the software.</p>

<p>Perl modules tend to use "Perl 5" combination as the default license i.e. "Licensed under the same terms as Perl itself". And the "Perl 5" license is actually a dual licensing of the problematic <a href="https://en.wikipedia.org/wiki/Artistic_License">Artistic 1.0</a> license and the dated <a href="https://en.wikipedia.org/wiki/GNU_General_Public_License#Version_1">GPL1.0</a> license which also has problems. Both are rarely used outside of Perl and in my view present a barrier to adoption.</p>

<p>Recall I described how permissive ("BSD") and copyleft ("GPL") licenses are functionally identical if no binary is distributed (websites) or for scripted languages that remain in source form. </p>

<p><strong>For these reasons I recommend the widely used and permissive MIT license - or the trimmed down <a href="https://en.wikipedia.org/wiki/ISC_license">ISC license</a>.</strong></p>

<p>Indeed I have been actively working to swap the license on my CPAN modules.</p>

<p>You may consider the longer <a href="https://en.wikipedia.org/wiki/Apache_License">Apache 2.0</a> license attempts to ensure that users do not have to worry about infringing patents by using the software. You may want to make this assurance to users of your software that you won't pursue them for patent royalties - something businesses will be thankful for. Recall that Fedora intends to remove <a href="https://www.theregister.com/2022/07/25/fedora_sours_on_creative_commons/">CC0 licensed software</a> as patent licensing is becoming of more concern.</p>

<p>(I will mention that it does blur contract and copyright clauses, and that in my opinion the MIT license granting "without limitation the rights to use" the software seems to include patents)</p>

<p><strong>How to go about relicensing?</strong></p>

<p>If you are the only author of your code and you authored it on your own computers in your own time, then you can just change the license and upload it to CPAN.</p>

<p>If you wrote the code using a company computer then depending on your employment agreement it may be the property of your employer. Similarly if you wrote it while being paid by an employer, chances are they own that software. In both cases your company should have a process for open sourcing their software including which licenses are permitted. You will have to pursue that process and select a different license. (The good news is that other contributors in the organization don't need to be consulted)</p>

<p>If there are contributors and you own your contributions then you will have to get permission from them. I used git to extract all the committers. Then checked that their contributions where still in the most recent version. </p>

<p>Once you have approval then if you're using Dist::Zilla then simply edit the <em>dist.ini</em> file to set <em>license = MIT</em>, then release to CPAN.</p>

<p>In my efforts so far, I created a github issue explaining the change and tagged all the relevant contributors. Just from this I found about 30% of people responded quickly - the rest I had to chase via email. For changes that predate source control history, I had to chase them via details Contributors files and CPAN release history.</p>

<p>(When contacting contributors, you might also ask them to assign copyrights to you via a <a href="https://en.wikipedia.org/wiki/Contributor_License_Agreement">Contributor License Agreement</a>)</p>]]>
        
    </content>
</entry>
  <entry>
    <title>4 Unrelated Perl Tidbits</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/4-unrelated-perl-tidbits-2766" type="text/html"/>
    <content type="html">&lt;p&gt;I recently acquired a copy of &lt;a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/"&gt;Programming Perl&lt;/a&gt;, often referred to as "The Camel Book" in the Perl community. After reading the first 4 chapters I thought I would share a few Perl tidbits I found interesting.&lt;/p&gt;

&lt;p&gt;&lt;a id="org1d47756"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  While &amp;lt;&amp;gt; is True
&lt;/h1&gt;

&lt;p&gt;Say we have the following file named &lt;code&gt;logos.txt&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Onion
Camel

Raptor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And in the same directory we have the following program named &lt;code&gt;scratch.pl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;logos.txt&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$logo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected our program prints the contents of &lt;code&gt;logos.txt&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl ./scratch.pl
Onion
Camel

Raptor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Something I never really considered though, is why doesn't the loop exit when &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; reads the empty line in &lt;code&gt;logos.txt&lt;/code&gt;? Shouldn't &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; return an empty string which is a false value?&lt;/p&gt;

&lt;p&gt;According to Programming Perl, the reason why the loop doesn't exit is because &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; reads the newline at the end of the line so we actually get &lt;code&gt;"\n"&lt;/code&gt; which is a true value. Turns out this is a fib, and the actual reason is that &lt;code&gt;while (my $logo = &amp;lt;$fh&amp;gt;) ...&lt;/code&gt; expands into &lt;code&gt;while (defined (my $logo = &amp;lt;$fh&amp;gt;)) ...&lt;/code&gt;, and &lt;code&gt;"\n"&lt;/code&gt; is a defined value.&lt;/p&gt;

&lt;p&gt;We can show this by deparsing the code with &lt;a href="https://perldoc.perl.org/B::Deparse"&gt;B::Deparse&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -MO=Deparse,-p,-sCi2 -ne 42
LINE: while (defined(($_ = readline(ARGV)))) {
  '???';
}
-e syntax OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org99a62c3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Heredocs Can Execute Shell Commands
&lt;/h1&gt;

&lt;p&gt;Most Perl programmers know that if you single quote a heredocs terminating string you prevent variable interpolation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt;'EOS';
Hello
$var = 12
EOS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see in the programs output that &lt;code&gt;$var&lt;/code&gt; was not interpolated.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl ./scratch.pl
Hello
$var = 12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;But did you know that if you backquote the terminating string then each line is executed as a shell command?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;EOC&lt;/span&gt;&lt;span class="p"&gt;`;&lt;/span&gt;
&lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;shell&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt;
&lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;also&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;shell&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt;
&lt;span class="nv"&gt;EOC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run this program we can see that the echo commands were executed.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl ./scratch.pl
this is a shell command
this is also a shell command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a id="orgd568d68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  The Comma Operator
&lt;/h1&gt;

&lt;p&gt;I always took commas for granted, never realizing they were actually an operator.&lt;/p&gt;

&lt;p&gt;Did you ever wonder why lists return their last element when evaluated in scalar context? Turns out it is due to the comma operator.&lt;/p&gt;

&lt;p&gt;In scalar context the comma operator "," ignores its first argument, and returns its second element evaluated in scalar context.&lt;/p&gt;

&lt;p&gt;This means that in scalar context the list &lt;code&gt;(11, 22, 33)&lt;/code&gt; will evaluate to 33. The first comma operator will throw away the 11 and then return &lt;code&gt;(22, 33)&lt;/code&gt; evaluated in scalar context, which will be evaluated by throwing away the 22 and returning 33.&lt;/p&gt;

&lt;p&gt;&lt;a id="org644e91b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Auto-Incrementing Strings
&lt;/h1&gt;

&lt;p&gt;In perl you can not only auto-increment numbers, but also strings. To increment a string it must match the regex &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Single alphabet character strings are incremented intuitively.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -E 'my $v = "a"; say ++$v'
b
$ perl -E 'my $v = "B"; say ++$v'
C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What happens though if we increment a non-alphanumeric char. Will it give the next ASCII character? Turns out non-alphanumeric characters are treated as 0's when incrementing. Fortunately if we use &lt;a href="https://perldoc.perl.org/warnings"&gt;warnings&lt;/a&gt; Perl will give us a heads up.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -W -E 'my $v = "-"; say ++$v'
Argument "-" treated as 0 in increment (++) at -e line 1.
1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What happens if we increment &lt;code&gt;z&lt;/code&gt;, which is at the end of the alphabet? Do we wrap back around to &lt;code&gt;a&lt;/code&gt;? This is where things get interesting. Perl increments the string just like you would in a regular number system. Just like &lt;code&gt;9 + 1 = 10&lt;/code&gt; in decimal &lt;code&gt;z + 1 = aa&lt;/code&gt; in … stringimal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -E 'my $v = "z"; say ++$v'
aa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here are some more examples to show you the magic of string auto-incrementing.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -W -E 'my $v1 = "foo"; say ++$v1'
fop
$ perl -W -E 'my $v1 = "az"; say ++$v1'
ba
$ perl -W -E 'my $v1 = "a9"; say ++$v1'
b0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/4-unrelated-perl-tidbits-2766</id>
    <published>2022-08-10T17:18:00Z</published>
    <updated>2022-08-10T17:18:00Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#576 - Perl is on the Rise?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/576.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Personally I have noticed the fresh energy among all <strong>Perl</strong> fans ever since the release of latest <strong>Perl v5.36</strong>. I am telling this based on the amount of positive noise I heard on various public platform. There are still few in the pipeline that would give further push e.g. <strong>Corinna</strong>. If you are interested to know more then please do checkout this <a href="https://github.com/Ovid/Cor/wiki">page</a> maintained by <strong>Curtis Poe</strong>.</p>
<p><a href="https://metacpan.org/recent">MetaCPAN</a> is another place where you can see all the latest cool <strong>Perl</strong> projects. I know plenty of volunteers helping to improve the code base. If you use a distribution and you like it then why not share your experience with the <strong>Perl Community</strong> and submit your proposal to <a href="http://cfp.perladvent.org">Perl Advent Calendar 2022</a>? Or if you have created one then why not share with rest of the world.</p>
<p>If you are new to <strong>Perl</strong> and needs help then please do give us a shout. There are plenty of help available on various public platforms.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/576.html</id>
    <published>2022-08-08T10:00:00Z</published>
    <updated>2022-08-08T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Route-based Multi-Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-08T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-route-based-multicounter"/>  <id>https://perlmaven.com/dancer2-solution-2-route-based-multicounter</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Permuted Reversibly</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/07#pwc176" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the smallest integer x such that x, 2x, 3x, 4x, 5x and 6x are 
permuted multiples of each other.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_permuted{
    my($x, $y) = @_;
    my(@x, @y); 
    map {$x[$_]++} split(//, $x);
    map {$y[$_]++} split(//, $y);
    return false if $#x != $#y;
    my @matched = grep {(!$x[$_] &amp;&amp; !$y[$_]) || ($x[$_] &amp;&amp; $y[$_] &amp;&amp; $x[$_] == $y[$_])} 0 .. @y - 1;
    return true if @matched == @x;
    return false;
}

sub smallest_permuted{
    my $x = 0;
    {
        $x++;
        redo unless is_permuted($x, 2 * $x)     &amp;&amp; is_permuted(2 * $x, 3 * $x) &amp;&amp; 
                    is_permuted(3 * $x, 4 * $x) &amp;&amp; is_permuted(4 * $x, 5 * $x) &amp;&amp; 
                    is_permuted(5 * $x, 6 * $x);
    }
    return $x;
}

MAIN:{
    print smallest_permuted . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
142857
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is to check if any two numbers are permutations of each other by 
counting up the digits for each and comparing the counts. A fun use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;
but I will admit it is a bit unnecessary. I implemented solutions to this problem in 
multiple languages and in doing so just sorted the lists of digits and compared them. Much
easier, but less fun!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find out all Reversible Numbers below 100.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub is_reversible{
    my($x) = @_;
    my @even_digits = grep { $_ % 2 == 0 } split(//, ($x + reverse($x)));
    return @even_digits == 0;
}

sub reversibles_under_n{
    my($n) = @_;
    my @reversibles;
    do{
        $n--;
        unshift @reversibles, $n if is_reversible($n);

    }while($n &gt; 0);
    return @reversibles;
}

MAIN:{
    print join(", ", reversibles_under_n(100)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My favorite use of Perl is to prototype algorithms. I'll get an idea for how to solve a
problem and then quickly prove out the idea in Perl. Once demonstrated to be effective
the same approach can be implemented in another language if required, usually for business
reasons but also sometimes simply for performance.&lt;/p&gt;

&lt;p&gt;The code here is concise, easy to read, and works well. It's also 3 times slower than
a Fortran equivalent.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ time perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90

real    0m0.069s
user    0m0.048s
sys     0m0.020s
-bash-5.0$ time fortran/ch-2     
          10
          12
          14
          16
          18
          21
          23
          25
          27
          30
          32
          34
          36
          41
          43
          45
          50
          52
          54
          61
          63
          70
          72
          81
          90

real    0m0.021s
user    0m0.001s
sys     0m0.016s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, the Fortran took at least 3x longer to write. These are the tradeoffs that get 
considered on a daily basis!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/"&gt;Challenge 176&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc176</id>
    <published>2022-08-07T12:16:00-04:00</published>
    <updated>2022-08-07T12:16:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title># Perl Weekly Challenge 176: Permuted Multiples and Reversible Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/-perl-weekly-challenge-176-permuted-multiples-and-reversible-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10868</id>
    <published>2022-08-02T14:06:47Z</published>
    <updated>2022-08-07T03:08:12Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 176 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-176/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 7, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Permuted Multiples</h2>

<p><em>Write a script to find the smallest positive integer <code>x</code> such that <code>x</code>, <code>2x</code>, <code>3x</code>, <code>4x</code>, <code>5x</code> and <code>6x</code> are permuted multiples of each other.</em></p>

<p><em>For example, the integers 125874 and 251748 are permuted multiples of each other as</em></p>

<pre><code>251784 = 2 x 125874
</code></pre>

<p><em>and also both have the same digits but in different order.</em></p>

<p><em>Output</em></p>

<pre><code>142857
</code></pre>

<p>In Raku, Perl, and some other programming languages, conversions between numbers and strings are simple or even implicit and automatic. This task will be very easy for them. In some other languages, the strong typing system might make it more difficult. In such an event, we may also use a purely arithmetic method to retrieve the individual digits (see for example the C and bc implementations). This may have an impact on my choice of guest languages: I will not try guest languages that are crippled by a type system straitjacket.</p>

<h3>Permuted Multiples in Raku</h3>

<p>We&#8217;re essentially trying to find if the first six integer multiples of an integer are anagrams of each other. One way to go might be to store the individual digits in a hash and check whether we have the same digits. But it&#8217;s not so easy when the input number has twice or several times the same digit. It is usually easier (and probably faster) to reduce the input number to a normalized form (for example with the digits rearranged in ascending order) and to compare the normalized form of the input number with the normalized forms of the multiples. In the program below, the <code>ordered</code> variable is a string in which the digits of the input integer have been rearranged in ascending order. At the end, we only need a string comparison to find out whether the various integers have the same digits.</p>

<pre><code>sub check_multiples ($j) {
    my $ordered = join '', $j.comb.sort;
    for 2..6 -&gt; $k {
        return False if ($k * $j).comb.sort.join ne $ordered;
    }
    return True;
}

.say and last if check_multiples $_ for 1..Inf;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./permuted-multiples.raku
142857

real    0m3,370s
user    0m0,015s
sys     0m0,088s
</code></pre>

<p>We can significantly improve performance by adding one code line at the beginning of the <code>check_multiples</code> subroutine:</p>

<pre><code>sub check_multiples ($j) {
    return False if $j.chars != (6 * $j).chars; 
    my $ordered = join '', $j.comb.sort;
    for 2..6 -&gt; $k {
        return False if ($k * $j).comb.sort.join ne $ordered;
    }
    return True;
}
</code></pre>

<p>By returning early from the subroutine when the length of <code>6 * $j</code> is more than the length of <code>$j</code> we save quite a bit of useless computations. The execution time goes down to 1.390 sec. Another possibility would be to reverse the tests in the <code>for</code> loop, i.e. to go down from 6 to 2. </p>

<h3>Permuted Multiples in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the description in the Raku section above in you need explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub check_multiples {
    my $j = shift;
    my $ordered = join '', sort split //, $j;
    for my $k (2..6) {
        return 0 if $ordered ne join '', sort {$a cmp $b}  split //, ($k * $j);
    }
    return 1;
}

my $i = 1;
while (1) {
    if (check_multiples $i) {
        say $i;
        last;
    }
    $i++;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl  permuted-multiples.pl
142857

real    0m0,604s
user    0m0,546s
sys     0m0,046s
</code></pre>

<p>The Perl code is a bit longer than the Raku code, but the Perl program runs 5,6 times faster.</p>

<h3>Permuted Multiples in Julia</h3>

<p>In Julia, the built-in <code>digits</code> function returns the digits of a number. No need for conversions between integer and string and the other way around, and this leads to a quite concise program.</p>

<pre><code>function check_multiples(n)
    ordered = sort(digits(n))
    for j in 2:6
        if sort(digits(n * j)) != ordered
            return false
        end
    end
    return true
end

i = 1
while true
    if check_multiples(i)
        println(i)
        break
    end
    global i += 1
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia .\permuted-multiples.jl
142857
</code></pre>

<h3>Permuted Multiples in Python</h3>

<pre><code>def check_multiples(n):
  input = [int(c) for c in str(n)]
  input.sort()
  for i in range(2, 7):
    test = [int(c) for c in str(n * i)]
    test.sort()
    if input != test:
      return False
  return True


i = 2
while True:
  if check_multiples(i):
    print(i)
    break
  i += 1
</code></pre>

<p>Output:</p>

<pre><code>$ time python3 ./permuted-multiples.py
142857

real  0m0,745s
user  0m0,640s
sys   0m0,077s
</code></pre>

<h3>Permuted Multiples in awk</h3>

<p>The awk language is relatively slow, so I added a test:</p>

<pre><code>        if (length(test) != len) {
           return 0
        }
</code></pre>

<p>before the inner <code>for</code> loop to immediately go out of the loop and avoid the digit-by-digit comparison if the length of tested number is not the same as the length of the input number.</p>

<pre><code>function check_multiples(n) {
    split(n, ordered, "")
    asort(ordered)
    len = length(ordered)
    for (j = 2; j &lt;= 6; j++) {
        split(n * j, test, "")
        asort(test)
        if (length(test) != len) {
           return 0
        }
        for (k = 1; k &lt;= len; k++) {
            if (ordered[k] != test[k]) {
                return 0
            }
        }
    }
    return 1
} 

BEGIN  {
    i = 1
    while (1) {
        if (check_multiples(i)) {
            print i
            break
        }
    i++
    }
}
</code></pre>

<p>With the performance improvement described above, the runtime is quite good:</p>

<pre><code>$ time awk -f permuted-multiples.awk
142857

real    0m1,498s
user    0m1,343s
sys     0m0,015s
</code></pre>

<p>However, we can improve it by making the test earlier in the <code>check_multiples</code> function:</p>

<pre><code>function check_multiples(n) {
    if (length(n) != length(6 * n)) {
        return 0
    }
    split(n, ordered, "")
    asort(ordered)
    len = length(ordered)
    for (j = 2; j &lt;= 6; j++) {
        split(n * j, test, "")
        asort(test)
        for (k = 1; k &lt;= len; k++) {
            if (ordered[k] != test[k]) {
                return 0
            }
        }
    }
    return 1
}
</code></pre>

<p>With this change, the output is now this:</p>

<pre><code>$ time awk -f permuted-multiples.awk
142857

real    0m0,653s
user    0m0,624s
sys     0m0,031s
</code></pre>

<p>That&#8217;s 2.3 times faster. Not bad.</p>

<h3>Permuted Multiples in C</h3>

<p>The C implementation is quite verbose (and sort of a pain in the neck to get it right) compared to other languages, but I decided not to criticize this aspect any further when I saw the performance (barely more than 1/10 sec. runtime):</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int comp (const void * elem1, const void * elem2) {
    int f = *((int*)elem1);
    int s = *((int*)elem2);
    if (f &gt; s) return  1;
    if (f &lt; s) return -1;
    return 0;
}

int normalize (int num) {
    int n = num;
    int len = n &lt;= 9 ? 1 : floor(log10(n)) + 1;
    int d[len];  // array of digits of input number
    char st[len];
    int i = 0;
    while (n &gt; 0) {
        d[i] = n % 10;
        n /= 10;
        i++;
    }
    qsort (d, sizeof(d)/sizeof(*d), sizeof(*d), comp);
    int norm = 0;
    int j = 1;
    for (int i = len - 1; i &gt;= 0; i--) {
        norm += d[i] * j;
        j *= 10;
    }
    return norm;
}

int permuted_multiples (int n) {
    int norm_in = normalize(n);
    for (int i = 6; i &gt; 2; i--) 
        if (normalize(n * i) != norm_in) return 0;
    return 1;
}

int main () {
    int i = 1;
    while (1) {
        if (permuted_multiples(i)) {
            printf("%d\n", i);
            break;
        }
        i++;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.out
142857

real    0m0,112s
user    0m0,078s
sys     0m0,000s
</code></pre>

<h3>Permuted Multiples in D</h3>

<p>D is similar to C, but with less pointer hassle and more built-in functions, making the syntax simpler:</p>

<pre><code>import std.stdio;
import std.conv, std.array;
import std.algorithm;

int normalize(int num) {
    string n = to!string(num, 10);
    ulong len = n.length;
    string[] d = n.split("");
    d.sort();
    return to!int(d.joiner);
}

bool permuted_multiples (int n) {
    int norm_in = normalize(n);
    for (int i = 6; i &gt; 2; i--) 
        if (normalize(n * i) != norm_in) return false;
    return true;
}

void main() {
    int i = 1;
    while (true) {
        if (permuted_multiples(i)) {
            printf("%d\n", i);
            break;
        }
        i++;
    }
    writeln(" ");
}
</code></pre>

<p>This program also displays 142857 and runs in .44 second (don&#8217;t compare with C, though, the timings are not equivalent for various reasons).</p>

<h2>Task 2: Reversible Numbers</h2>

<p><em>Write a script to find out all Reversible Numbers below 100.</em></p>

<blockquote>
  <p><em>A number is said to be a reversible if sum of the number and its reverse had only odd digits.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>36 is reversible number as 36 + 63 = 99 i.e. all digits are odd.
17 is not reversible as 17 + 71 = 88, none of the digits are odd.
</code></pre>

<p><em>Output:</em></p>

<pre><code>10, 12, 14, 16, 18, 21, 23, 25, 27,
30, 32, 34, 36, 41, 43, 45, 50, 52,
54, 61, 63, 70, 72, 81, 90
</code></pre>

<h3>Reversible Numbers in Raku</h3>

<p>I first thought about using <em>junctions</em> to check whether all of the digits of the resulting number are odd (or, alternatively, whether any of the digits is even), but it rapidly occurred to me that a regex character class with all even digits is sort of equivalent to a junction with even digits, and that a regex solution would be much simpler (and, by the way, that the same solution could also be used in Perl (and possibly some other languages).</p>

<p>This leads to the following very simple code:</p>

<pre><code>print "$_ " unless $_ + .flip ~~ /&lt;[02468]&gt;/ for 1..100;
</code></pre>

<p>Used as a Raku one-liner, we obtain the following output:</p>

<pre><code>$ raku -e 'print "$_ " unless $_ + .flip ~~ /&lt;[02468]&gt;/ for 1..100;'
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Perl</h3>

<p>The Perl solution also uses a regex and an even-digit character class to do the job:</p>

<pre><code>for (1..100) {print "$_ " unless ($_ + reverse $_) =~ /[02468]/}
</code></pre>

<p>Used as a Perl one-liner, we obtain the following output:</p>

<pre><code>$ perl -e 'for (1..100) {print "$_ " unless ($_ + reverse $_) =~ /[02468]/}'
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Julia</h3>

<p>Julia uses the Perl Compatible Regular Expressions (PCRE) library to handle regexes. The <code>occursin</code> function returns a Boolean value telling us whether the regex pattern was found. This is almost as easy as in Raku and Perl</p>

<pre><code>for i in 1:100
    sum = i + parse(Int32, reverse(string(i)))
    if ! occursin(r"[02468]", string(sum))
        print("$i ")
    end
end
println(" ")
</code></pre>

<p>Output:</p>

<pre><code>$ julia .\reversible.jl
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in C</h3>

<p>The C language doesn&#8217;t have a standard string reverse function (although some implementations have it). So, we have to write one. Otherwise, we convert the integer sum to a string (using the <code>sprintf</code> function) and loop through the digits to check whether any of them is even, and return a false value (0) if such is the case.</p>

<pre><code>int reverse(int n) {
    char st[10];
    char r[10];
    int len = sprintf(st, "%d", n);   // convert input int to string
    for (int i = 0; i &lt; len; i++) {
        r[len - i - 1] = st[i];
    }
    r[len] = '\0';
    return atoi(r);
}

int is_reversible(int n) {
    char sum[10];
    int length =  sprintf(sum, "%d", n + reverse(n));
    for (int k = 0; k &lt; length; k++) {
        if (sum[k] % 2 == 0) {
            return 0;
        }
    }
    return 1;
}

int main () {
    for (int i = 1; i &lt; 100; i++) {
        if (is_reversible(i)) {
            printf("%d ", i);
        }
    }
    printf("%s\n", "");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h4>C compared to Perl or Raku</h4>

<p>If you compare this 35-line C solution with the Raku or Perl one-liners shown above, you&#8217;ll probably understand why Raku and Perl are my favorite programming languages. Having said that, I should add that C, which was created in the early 1970s and is still very much in use half a century later, is sort of the mother of all languages (even the Perl interpreter is written mostly in C). And, as seen above in the context of the first task of this challenge, C is very fast.</p>

<p>For those of you old enough to remember the Usenet newsgroups, let me share this pearl of wisdom dating from the late 1990s.</p>

<p><strong>A Tribute to the Beatles &#8220;Let It Be&#8221; (and to Dennis M. Ritchie).</strong></p>

<p><em>To the tune of &#8220;Let It Be&#8221;.</em></p>

<p><em>To listen to it, go <a href="https://www.youtube.com/watch?v=wJ81MZUlrDo">there</a>.</em></p>

<blockquote>
  <p>When I find my code in tons of trouble,
Friends and colleagues come to me,
Speaking words of wisdom:
Write in C.</p>

<p>As the deadline fast approaches,
And bugs are all that I can see,
Somewhere, someone whispers:
Write in C.</p>

<p>Write in C, write in C,
Write in C, oh, write in C.
LOGO&#8217;s dead and buried,
Write in C.</p>
</blockquote>

<h3>Reversible Numbers in D</h3>

<p>The D programming language boasts to combine the performance and safety of compiled languages (such as C or C++) with the expressive power of modern dynamic and functional programming languages. The syntax is relatively close to C, but the program is notably shorter than its C counterpart. Here, we have methods to reverse a string (<code>retro</code>) and to easily convert integers to strings or strings to integers. As with our C implementation, we loop through the digits to check whether any of them is even, and return <code>false</code>  if such is the case.</p>

<pre><code>import std.stdio;
import std.conv, std.range;

bool is_reversible(int n) {
    string s = to!string(n, 10);
    string rev = s.retro.text;
    string sum = to!string(n + to!int(rev), 10);
    for (int k = 0; k &lt; sum.length; k++) {
        if (sum[k] % 2 == 0) {
            return false;
        }
    }
    return true;
}

void main() {
    for (int i = 1; i &lt; 100; i++) {
        if (is_reversible(i)) {
            printf("%d ", i);
        }
    }
    writeln(" ");
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in bc</h3>

<p>bc stands for &#8220;basic calculator&#8221; and was initially written almost half a century ago. As a (programmable) calculator, bc can run mathematical or arithmetic scripts, but it has no string manipulation features. So we use only arithmetical tools here. </p>

<pre><code>define reverse (n) {
    sum = 0
    j = 10 ^ (length(n) - 1)
    while (n &gt; 0) {
        sum += (n % 10) * j
        n = n/10
        j /= 10
    }
    return (sum )
}

define is_reversible(m) {
    sum = m + reverse(m)
    while (sum &gt; 0) {
        k = sum % 10
        if (k % 2 == 0) { 
            return 0 
        }
        sum /= 10
    }
    return 1
}

for (i = 1; i &lt;= 100; i++) {
    # print i, " "
    if (is_reversible(i)) {
        print i, " "
    }
}
quit
</code></pre>

<p>Output:</p>

<pre><code>$ bc -q reversible.bc
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72\
81 90
</code></pre>

<h3>Reversible Numbers in awk</h3>

<p>Compared to bc, awk has some limited string manipulation features (such as <code>substr</code>) that we put to good use here. awk also has some regex capabilities, but they’re associated with standard input (e.g. files) reading and did not seem to be usable in our context. So, our program is essentially based on arithmetic loops.</p>

<pre><code>function is_reversible(n) {
    len = length(n)
    m = ""
    for (j = len; j != 0; j--) {
        m = m substr(n, j, 1)
    }
    sum = m + n
    len = length(sum)
    for (k = 1; k &lt;= len; k++) {
        if ((substr(sum, k, 1) % 2) == 0) {
            return 0
        }
    }
    return 1
}

BEGIN {
    for (i = 1; i &lt;= 200; i++) {
        if (is_reversible(i)) {
            printf("%d ", i)
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./reversible.awk
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Python</h3>

<p>In Python, we use the features provided by the <code>re</code> regex library, leading to a fairly concise program.</p>

<pre><code>from re import search
pattern = r"[02468]"
for i in range(1, 100):
    tested = str(i + int(str(i)[::-1]))
    if not search(pattern, tested):
        print(i, end=' ')
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./reversible.py
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Ruby</h3>

<p>I really like Ruby&#8217;s ability to chain method invocations as in <code>sum = n + n.to_s.reverse.to_i</code>, which makes it possible to convert an integer to a string, to revert the string, to convert the resulting string back to an integer and finally finally to add it to another number, all in one short code line. We&#8217;ve done similar chained data conversions in Perl, Raku and Julia, but there is a number of mainstream programming languages which can&#8217;t do that (mostly because their built-in methods or functions often have side effects and are intrinsically not pure.</p>

<pre><code>def is_reversible(n)
    sum = n + n.to_s.reverse.to_i
    while (sum &gt; 0) 
        k = sum % 10
        if k % 2 == 0 
          return false 
        end
        sum /= 10
    end
    return true
end

for i in 1..100
    if is_reversible(i)
        printf("%d ", i)
    end
end
puts("")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Scala</h3>

<p>Scala also provides the pleasant possibility to chain method invocations (as in <code>var sum = n + n.toString.reverse.toInt</code>). So, our Scala program looks quite similar to our Ruby implementation.</p>

<pre><code>object reversible extends App {
  def is_reversible(n: Int): Boolean = {
    var sum = n + n.toString.reverse.toInt
    while (sum &gt; 0) {
      val k = sum % 10
      if (k % 2 == 0) {
        return false
      }
      sum /= 10
    }
    return true
  }

  for (i &lt;- 1 to 100) {
    if (is_reversible(i)) {
      printf("%d ", i)
    }
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Ring</h3>

<pre><code>for i = 1 to 100
    if is_reversible(i)
        see "" + i + " "
    ok
next

func reverse(num)
    n = "" + num
    rev = ""
    for i = len(n) to 1 step -1
        rev +=  n[i]
    next
    return number(rev)

func is_reversible (m)
    sum = m + reverse(m)
    st = "" + sum
    for i = 1 to (len(st))
        if st[i] % 2 = 0
            return false
        ok
    next
    return true
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./reversible.ring
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in JavaScript</h3>

<pre><code>function is_reversible (n) {
    var digits = n.toString().split("")
    let reverse_digits = digits.reverse()
    let reverse_n = parseInt(reverse_digits.join(""));
    var sum = n + reverse_n
    while (sum &gt; 0) {
        let k = sum % 10
        if (k % 2 == 0) { 
          return false 
        }
        sum = Math.floor(sum / 10)
    }
    return true    
}

for (var i = 1; i &lt;= 100; i++) {
    if (is_reversible(i)) {
        process.stdout.write(i + " ")
    } 
}
process.stdout.write(" \n")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Nim</h3>

<p>I tried to use the <code>split</code> function with an empty string as a delimiter, but Nim&#8217;s <code>split</code> function apparently does not accept an empty string. Looking for a solution on the Internet, I found on <a href="https://stackoverflow.com/questions/50853426/how-do-i-convert-a-string-into-a-sequence-of-characters-in-nim">this Stack Overflow page</a> that a Nim string is a sequence of chars, so that a simple cast (e.g. <code>@(intToStr(n)</code>) will split the string into individual chars.</p>

<pre><code>import strutils
import algorithm 

proc is_reversible(n: int): bool =
  # A Nim string is a sequence of chars, so that a cast will 
  # split the string into individual chars
  let rev = parseInt(join(@(intToStr(n)).reversed(), ""))
  var sum = n + rev
  while sum &gt; 0:
    let k = sum mod 10
    if (k mod 2 == 0):
      return false
    sum = (sum / 10).int
  return true    


for i in 1..100:
  if is_reversible(i):
    stdout.write i, " "
echo ""
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Dart</h3>

<pre><code>import "dart:io";

void main() {
    for (int i = 0; i &lt;= 100; i++ ) {
        if (is_reversible(i)) {
            stdout.write("$i ");
        }
    }
}

bool is_reversible(n) {
    var rev = int.parse(n.toString().split("").reversed.join(""));
    var digits = (n + rev).toString().split("");
    int len = digits.length;
    for (int i = 0; i &lt; len; i++) {
        if (int.parse(digits[i]) % 2 == 0) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Kotlin</h3>

<pre><code>fun is_reversible(n: Int): Boolean {
    val sum = n + n.toString().reversed().toInt()
    val sumstr = sum.toString()
    for (i in 1..sumstr.length) {
        if (sumstr[i-1].toInt() % 2 == 0) {
            return false
        }
    }
    return true
}

fun main() {
    for (i in 1..100) {
        if (is_reversible(i)) {
            print("$i ")
        }
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Java</h3>

<p>My Java implementation of the reversible numbers task is faithful to Java&#8217;s reputation of being very verbose.</p>

<pre><code>public class ReversibleNumbers {

    public static int reverse(int n) {
        String n_str = String.valueOf(n);
        String rev = "";
        char ch;
        for (int i = 0; i &lt; n_str.length(); i++) {
            ch = n_str.charAt(i);   //extracts each character
            rev = ch + rev;         //adds each character in front of the existing string
        }
        return Integer.parseInt(rev);
    }

    public static boolean isReversible(int n) {
        int sum = n + reverse(n);
        char[] digits = String.valueOf(sum).toCharArray();
        for (int i = 0; i &lt; digits.length; i++) {
            if ((digits[i] - '0') % 2 == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        for (int i = 1; i &lt;= 100; i++) {
            if (isReversible(i)) {
                System.out.printf("%d ", i);
            }
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Lua</h3>

<pre><code>local function is_reversible(n)
    rev = tonumber(string.reverse(tostring(n)))
    sum = rev + n
    while sum &gt; 0 do
        if sum % 2 == 0 then
            return false
        end
        sum = math.floor(sum / 10)
    end
    return true
end

for i = 1, 100 do
    if is_reversible(i) then
        io.write(i, " ")
    end
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Go</h3>

<p>For some reason, programming languages maintained by groups of dedicated open-source users, such as Raku, Perl, Julia, Nim, JavaScript, Scala, Kotlin, and Lua, have an off-the-shelf <code>reverse</code> function or method, whereas programming languages maintained by very big corporations, such as Java or Go, don&#8217;t have it, in spite of their huge financial resources. It appears that the open-source model is more efficient. IT managers should think about it: the best programming languages might not be what they think.</p>

<pre><code>package main

import (
    "fmt"
    "strconv"
)

func reverse(n int) int {
    n_str := strconv.Itoa(n)
    rev := ""
    for _, v := range n_str {
        rev = string(v) + rev
    }
    rev_num, _ := strconv.Atoi(rev)
    return rev_num
}

func is_reversible(n int) bool {
    sum := n + reverse(n)
    sum_str := strconv.Itoa(sum)
    for i := 0; i &lt; len(sum_str); i++ {
        if sum_str[i] % 2 == 0 {
            return false
        }
    }
    return true
}

func main() {
    for i := 1; i &lt;= 100; i++ {
        if is_reversible(i) {
            fmt.Printf("%d ", i)
        }
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 14, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6899272257092785905</id>
    <published>2022-08-06T23:15:00.001+02:00</published>
    <updated>2022-08-06T23:15:34.297+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdiv) 14 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.51&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.51 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.053005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.053005&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052010 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.96' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.96&lt;/strong&gt; on 2022-07-31&lt;/li&gt;  &lt;li&gt;Votes: 170&lt;/li&gt;  &lt;li&gt;Previous version: 0.95 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJNAPIORK/Catalyst-View-TT-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::View::TT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Template View Class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 2 years, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.19&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 3.18 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.09&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 97&lt;/li&gt;  &lt;li&gt;Previous version: 4.07 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.11&lt;/strong&gt; on 2022-07-31&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 4.10 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.09&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 3 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RKITOVER/Net-SSH2-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::SSH2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Support for the SSH 2 protocol via libssh2. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 1 year, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/Pithub-0.01038' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01038&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01037 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001002&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.000028 was 2 years, 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9635' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9635&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9630 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016007&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016006 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARKOV/XML-Compile-SOAP-3.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::Compile::SOAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SOAP version 1.1 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.28&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 3.27 was 1 year, 3 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6899272257092785905/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdiv-14-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6899272257092785905"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6899272257092785905"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdiv-14-great-cpan-modules-released.html" title="(cdiv) 14 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Wie erstellt man eine User Story Map?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Die Methode des User Story Mappings soll den am Prozess der  Softwareerstellung beteiligten Personen helfen, für den Anwender hilfreiche Software zu erstellen und dabei den Überblick über das große Ganze zu behalten. Wie wird nun ein solches User Story Mapping durchgeführt?</div>
    </content>
    <id>https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map</id>
    <published>2022-08-05T10:00:00Z</published>
    <updated>2022-08-05T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-08-03:/post/maintaining_perl_dave_mitchell_july_2022</id>
  <published>2022-08-03T21:15:22</published>
  <updated>2022-08-03T21:15:22</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during July covered by my TPF perl core maintenance grant.  3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz  3:28 Format in fill-mode has inconsistent behaviour  4:58 Goto xsub forces scalar context  0:57 Returning undef returns a weird hash reference  0:37 Segmentation fault with use re 'eval'  0:20 fix build warning  39:28 make stack reference counted  6:11 process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes: </p>

<p>This is my monthly report on work done during July covered by my TPF perl
core maintenance grant.
<code>
      3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz (Issue #19939)
      3:28 Format in fill-mode has inconsistent behaviour (Issue #19985)
      4:58 Goto xsub forces scalar context (#19188)
      0:57 Returning undef returns a weird hash reference (Issue #19996)
      0:37 Segmentation fault with use re 'eval' (Issue #19390)
      0:20 fix build warning
     39:28 make stack reference counted
      6:11 process p5p mailbox
      1:16 segfault on goto &amp;xs_sub when calling sub is replaced (Issue #19936)
    ------
     61:12 TOTAL (HH::MM)
</code>
I worked on quite a few tickets last month, but the most important thing I
did was to continue work on making the stack reference counted (work I
started near the end of June).</p>

<p>This is still very much a work in progress and I have nothing visible
(i.e. pushed) to show for it yet, but what I have done so far is:</p>

<p>1) Put wrappers around 254 pp functions.</p>

<p>This changes the definitions of pp function from e.g.:
<code>
    PP(pp_subst)
    {
        ...
    }
</code>
to
<code>
    PP_wrapped(pp_subst, ((PL_op-&amp;gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0)
    {
        ...
    }
</code>
which on normal builds has no effect, but on builds with <code>PERL_RC_STACK</code>
defined, it expands to something like:
```
    OP*
    Perl_pp_subst(aTHX) {
        return
            Perl_pp_wrap(my_perl, S_norcs_pp_subst,
                ((PL_op-&gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0);
    }</p>

<pre><code>STATIC OP*
S_norcs_pp_subst(pTHX)
{
    ...
}
</code></pre>

<p><code>``
</code>pp_wrap()<code>is responsible for pushing a (non-reference-counted) copy
of the current stack frame onto the end of the stack, then calling the
original pp function</code>S_norcs_pp_subst()`, which doesn't know about
reference-counted arguments, then shifting down and bumping the reference
count of everything that it returns on the stack.</p>

<p>The two numeric arguments for <code>pp_wrap</code> are how many arguments that op
expects on the stack, or for list ops, how many (mark-delineated) lists it
expects. Often these are just constants, but for some, like <code>pp_subst</code>, it
varies depending on flags.</p>

<p>2) Of the remaining 56 pp functions, some didn't need wrapping (like
<code>pp_pushmark</code>), while others required special handling - like most of the
<code>pp_enterfoo</code> and <code>pp_leavefoo</code> functions. For example most leavefoo ops in
void context just abandon any arguments left on the stack:
<code>
    PL_stack_sp = PL_stack_base + cx-&amp;gt;blk_oldsp;
</code>
For a reference-counted stack, this means that all those SVs leak. So I've
replaced all such occurrences with an inline function call:
<code>
    rpp_pop_to(PL_stack_base + cx-&amp;gt;blk_oldsp);
</code>
which on normal builds just resets <code>PL_stack_sp</code>, while on <code>PERL_RC_STACK</code>
builds, it will decrement the reference count of all those abandoned stack
items first.</p>

<p>I have almost finished doing (2) - just a handful of ops still need going
over on a line-by-line basis (in particular <code>pp_goto()</code>, which I've been
leaving to absolutely last).</p>

<p>None of the changes I've done so far actually do reference-counting yet: <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc currently have any <code>SvREFCNT_dec()</code>s etc
commented out. The idea is that I can initially add all these
modifications to the core while perl still works, Then once all that work
is done I should be able to make changes in a small number of places - <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc - and the whole of the perl core should
become reference-count-aware at once. This means that initially the core
will be merely mostly broken rather than completely broken, and it should
be easier to fix up those remaining bits which need it.</p>

<p>Then later on, things can be made more efficient again, e.g. by removing
the wrapper functions from common ops and make them directly
reference-count aware instead.</p>

<p>PS - for the avoidance of doubt, even with all these changes, unless the
core is built with <code>PERL_RC_STACK</code> defined, none of these changes take
affect yet.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grants: July 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-08-01:/post/grants_july_2022_votes</id>
  <published>2022-08-01T21:06:12</published>
  <updated>2022-08-01T21:06:12</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted: Grant Proposal: Google TensorFlow API Bindings for Perl VOTING RESULTS: Approved. 3 YES votes 0 NO votes, 3 ABSTAIN We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022">Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</a> (USD 8,800)</h4>

<p>VOTING RESULTS: Approved. 3 YES votes (12 points), 0 NO votes, 3 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#575 - Backward compatibility</title>
    <link rel="alternate" href="https://perlweekly.com/archive/575.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>One of the ongoing discussions in the Perl community is the question of backward compatibility. One group of people say it is (one of) the most important traits of Perl that you can run very old code on a very new version of Perl. The other side mostly say that there are very few cases when this is actually needed and the change in the version of Perl is just one aspect of upgrades people need to handle.</p>
<p>Then comes the case, like the introduction of th $00 variable in Perl 5.32 that breaks the code of people who used that variable for their own purposes. This is not the first case where a change in perl (or for that matter in a CPAN module) breaks some working code. Neither will be the last.</p>
<p>So the question isn't IF there can be changes breaking backward compatibility, but how we deal with them? Do the authors give proper warning? Are there tools to find pieces of code that will be impacted? (e.g. a Perl Critic rule). Are there instructions how to fix the code that will be broken?</p>
<p>On the other side of the coin, how can a user - a user of Perl or a CPAN module - ensure that changes in any of the dependencies won't impact their product or service? How can they notice any impact before it reaches the production system? Possibly even before it reaches the development machines forcing the whole team to stop working.</p>
<p>Hint: write and run automated tests!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/575.html</id>
    <published>2022-08-01T10:00:00Z</published>
    <updated>2022-08-01T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Tar-Size">Alien-Tar-Size</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libFLAC">Alien-libFLAC</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>find or build and install libFLAC with development dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-SNMP-TrapReceiver">AnyEvent-SNMP-TrapReceiver</a></td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>0.15</td>
<td>0.16</td>
<td>SNMP trap receiver by help of AnyEvent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Changelord">App-Changelord</a></td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>v0.0.1</td>
<td>0.0.2</td>
<td>cli-based changelog manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Git-Perl">App-Git-Perl</a></td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>v0.1.0</td>
<td>v0.1.15</td>
<td>adds custom git command "git perl" to make it easier to monitor latest changes in perl modules, and make you collaborate faster.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-JYJ">App-JYJ</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Convert JSON to YAML to JSON to…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KamstrupKemSplit">App-KamstrupKemSplit</a></td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Helper functions for the Kamstrup KEM file splitter application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-MHFS">App-MHFS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.4.0</td>
<td>v0.4.1</td>
<td>A Media HTTP File Server. Stream your own music and video library via your browser and standard media players.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diff2vba">App-diff2vba</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.99</td>
<td>generate VBA patch script from diff output</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Util-Shuffle">Array-Util-Shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Shuffle an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Author-Daemon-DockerMetaBundle">Author-Daemon-DockerMetaBundle</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
<td>1</td>
<td>A meta bundle that is used in the creation of a docker image.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-PERLANCAR-Tree-Examples">Bencher-Scenario-PERLANCAR-Tree-Examples</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.031</td>
<td>0.031</td>
<td>Benchmark PERLANCAR::Tree::Examples</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-shuffle">Bencher-Scenario-shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark various algorithms &amp; implementation of shuffle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Array-Sample-WeightedRandom">Bencher-Scenarios-Array-Sample-WeightedRandom</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Array::Sample::WeightedRandom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-ControllerPerContext">CatalystX-ControllerPerContext</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-RequestModel">CatalystX-RequestModel</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Digest-BLAKE3">Digest-BLAKE3</a></td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Perl extension for the BLAKE3 hash function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Authors">Dist-Zilla-Plugin-Authors</a></td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Build AUTHORS file from Git history</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-PruneAliases">Dist-Zilla-Plugin-PruneAliases</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Prune macOS aliases from your dist</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Earth">Earth</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>FP Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hashest">Hashest</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.3.1</td>
<td>v0.5.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-GIF-Encoder-PP">Image-GIF-Encoder-PP</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Pure perl GIF encoding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-WireGuard">Linux-WireGuard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_90</td>
<td>0.03</td>
<td>WireGuard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-Wireguard">Linux-Wireguard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wireguard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MHFS-XS">MHFS-XS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.2</td>
<td>XS extension module for Media HTTP File Server, for server side media encoding.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mac-Alias">Mac-Alias</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Read or create macOS alias files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mars">Mars</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>OO Framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Abacus">Math-Abacus</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.04</td>
<td>A toy model of Chinese abacus</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Notation-PostfixInfix">Math-Notation-PostfixInfix</a></td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>v2022.035.1</td>
<td>v2022.035.1</td>
<td>Perl extension for Math Postfix and Infix Notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-LibNFS">Net-LibNFS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>User-land NFS in Perl via libnfs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Touchstone">PDL-IO-Touchstone</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Dancer2">Perl-Critic-Dancer2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.4000</td>
<td>0.4100</td>
<td>A collection of handy perlcritic modules for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PlayStation-MemoryCard">PlayStation-MemoryCard</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.0</td>
<td>Utilities for working with PlayStation memory card and save files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-CopySubjectButton">RT-Extension-CopySubjectButton</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>RT-Extension-CopySubjectButton Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-From-String">Regexp-From-String</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Convert '/…/' or 'qr(…)' into Regexp object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rofi-Script">Rofi-Script</a></td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>0.001</td>
<td>1.221970</td>
<td>perl interface to the rofi menu</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Cwd">SPVM-Cwd</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>get pathname of current working directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-MD5">SPVM-Digest-MD5</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.06</td>
<td>SPVM interface to the MD5 Algorithm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-SHA">SPVM-Digest-SHA</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>SPVM extension for SHA-1/224/256/384/512</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Errno">SPVM-Errno</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Error Number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-PSchemas-Re">Sah-PSchemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression (parameterized) schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Fzf">Search-Fzf</a></td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ported Fzf using perl. </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Software-Copyright">Software-Copyright</a></td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Copyright class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/StandupGenerator">StandupGenerator</a></td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Package to create and manage daily standup files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Storable-Improved">Storable-Improved</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Storable improved with core flaws mitigated</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Login-Button">Tags-HTML-Login-Button</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for login button.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-Graille">Term-Graille</a></td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>0.03</td>
<td>0.071</td>
<td>Terminal Graphics using Braille</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-DBIC-Pg">Test-DBIC-Pg</a></td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>0.99_01</td>
<td>0.99_01</td>
<td>Connect to and deploy a DBIx::Class::Schema on Postgres</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-JSON-Type">Test-JSON-Type</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Test JSON data with types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-Bash">Test-More-Bash</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>Write Perl tests in Bash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-YAMLScript">Test-More-YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.5</td>
<td>Write Perl tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-YAFT">Test-YAFT</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Yet another testing framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Try-ALRM">Try-ALRM</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.1</td>
<td>0.6</td>
<td>Provides alarm semantics similar to Try::Catch.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Twitter-ID">Twitter-ID</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Parse the date from a Twitter Snowflake ID</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Library-Compiler">Type-Library-Compiler</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>compile a bunch of type constraints into a library with no non-core dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client">UID2-Client</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Perl Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client-XS">UID2-Client-XS</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Client for Perl (binding to the UID2 C++ library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-PackageURL">URI-PackageURL</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.02</td>
<td>Perl extension for Package URL (aka "purl")</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URN-OASIS-SAML2">URN-OASIS-SAML2</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Constants for urn:oasis SAML2 implementations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-Atom">WebFetch-Input-Atom</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from Atom feeds</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-RSS">WebFetch-Input-RSS</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from RSS feed</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TT">WebFetch-Output-TT</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch via the Perl Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TWiki">WebFetch-Output-TWiki</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch into a TWiki web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLScript">YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.16</td>
<td>YAML as a Programming Language</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLTest">YAMLTest</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.4</td>
<td>Write tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtin-compat">builtin-compat</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001002</td>
<td>Provide builtin functions for older perl versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins">builtins</a></td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>0.000002</td>
<td>0.000005</td>
<td>Install all the new builtins from the builtin namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins-compat">builtins-compat</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.004</td>
<td>install all the new builtins from the builtin namespace (Perl 5.36+), and try our best on older versions of Perl</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Alien-Tar-Size GAHAYES v0.1.0 v0.2.0 tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package Alien-libFLAC GAHAYES v0.1.0 v0.2.0 find or build and install libFLAC with development dependencies AnyEvent-SNMP-TrapReceiver NABOJ 0.15 0.16 SNMP trap receiver by help of AnyEvent App-Changelord YANICK v0.0.1 0.0.2 cli-based … <a href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1994</id>
    <published>2022-08-01T00:37:54Z</published>
    <updated>2022-08-01T00:37:54Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Dancer2: Exercise 2 - Multi-Counter, Random redirection</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-exercise-2"/>  <id>https://perlmaven.com/dancer2-exercise-2</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Sunday Was Perfectly Totient</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/30#pwc175" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to list the last sunday of every month in the given year.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Time::Piece; 

sub last_sunday_month{
    my($month, $year) = @_;
    $month = "0$month" if $month &lt; 10;
    my $sunday;
    my $t = Time::Piece-&gt;strptime("$month", "%m");   
    for my $day (20 .. $t-&gt;month_last_day()){
        $t = Time::Piece-&gt;strptime("$day $month $year", "%d %m %Y");
        $sunday = "$year-$month-$day" if $t-&gt;wday == 1;
    }  
    return $sunday;  
}

sub last_sunday{
    my($year) = @_;
    my @sundays; 
    for my $month (1 .. 12){
        push @sundays, last_sunday_month($month, $year);  
    }
    return @sundays;   
}

MAIN:{
    print join("\n", last_sunday(2022)) . "\n"; 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;When dealing with dates in Perl you have a ton of options, including implementing 
everything on your own. I usually use the &lt;code&gt;Time::Piece&lt;/code&gt; module. Here you can see why I 
find it so convenient. With &lt;code&gt;strptime&lt;/code&gt; you can create a new object from any conceivable
date string, for setting the upper bounds on iterating over the days of a month we can use
&lt;code&gt;month_last_day&lt;/code&gt;, and there are many other convenient functions like this.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 20 Perfect Totient Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant EPSILON =&gt; 1e-7;   

sub distinct_prime_factors{
    my $x = shift(@_); 
    my %factors;    
    for(my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        $factors{$y} = undef;
        redo;
    }
    return keys %factors;  
}

sub n_perfect_totients{
    my($n) = @_; 
    my $x = 1;
    my @perfect_totients;
    {
        $x++;
        my $totient = $x;
        my @totients;
        map {$totient *= (1 - (1 / $_))} distinct_prime_factors($x);   
        push @totients, $totient; 
        while(abs($totient - 1) &gt; EPSILON){
            map {$totient *= (1 - (1 / $_))} distinct_prime_factors($totient);   
            push @totients, $totient; 
        }  
        push @perfect_totients, $x if unpack("%32I*", pack("I*", @totients)) == $x;
        redo if @perfect_totients &lt; $n;
    }
    return @perfect_totients;
}

MAIN:{
    print join(", ", n_perfect_totients(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code may look deceptively simple. In writing it I ended up hitting a few blockers
that weren't obvious at first. The simplest one was my own misreading of how to compute
totients using prime factors. We must use &lt;em&gt;unique prime factors&lt;/em&gt;. To handle this I 
modified my prime factorization code to use a hash and by returning the keys we can get 
only the unique values. Next, while Perl is usually pretty good about floating point 
issues, in this case it was necessary to implement a standard &lt;em&gt;epsilon comparison&lt;/em&gt; to 
check that the computed totient was equal to 1. &lt;/p&gt;

&lt;p&gt;Actually, maybe I should say that such an &lt;em&gt;epsilon comparison&lt;/em&gt; is &lt;em&gt;always&lt;/em&gt; advised but 
in many cases Perl can let you get away without one. Convenient for simple calculations
but not a best practice!&lt;/p&gt;

&lt;p&gt;For doing serious numerical computing in Perl the best choice is of course to &lt;code&gt;use PDL&lt;/code&gt;!   &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Time::Piece"&gt;Time::Piece&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.planetmath.org/PerfectTotientNumber"&gt;Perfect Totient Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/"&gt;Challenge 175&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc175</id>
    <published>2022-07-30T12:08:00-04:00</published>
    <updated>2022-07-30T12:08:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#574 - Perl Community</title>
    <link rel="alternate" href="https://perlweekly.com/archive/574.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The community spirit among Perl fans is always the highlight of any event. I am sure you have experience it too. Little while ago, there was discussion to give new life to <strong>Perl Advent Calendar</strong>. Many volunteers came forward to help the project, like, <strong>Adam Russell</strong>. As we are getting close to the next edition, <strong>Olaf Alders</strong> and <strong>Julien Fiegehenn</strong> came together and kickstarted the project with a big push. I noticed in the recent weeks, lots of activities on <a href="https://github.com/perladvent/Perl-Advent">GitHub repository</a>, thanks to all the volunteers. <strong>Olaf Alders</strong> made an official call for papers in the <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">blog post</a>. I request all <strong>Perl</strong> fans to submit proposal. If you need any help submitting an article, then please do <a href="https://github.com/perladvent/Perl-Advent/blob/main/FAQ-submit.mkdn">checkout the page</a> for guidance. I would encourage first timer to come forward and share their experience with <strong>CPAN</strong> distributions. I am sure, everyone has few favourite distributions or their own creations that they want to talk about and share with the community. There are plenty of help available, if you need, so just give us a shout.</p>
<p>Talking about revival, recently I spoke about <strong>CPAN Weekly</strong>, creation of <strong>Neil Bowers</strong>. I shared my intention of getting it back up. In no time, I got plenty of offer. One of them was <strong>Cheok-Yin Fung</strong>. She even shared the initial draft that I am currently reviewing. Thank you, <strong>Cheok-Yin</strong> for the help. The plan is to launch it on the birthday of <strong>Perl</strong> i.e. 18th Dec. I will share more about it soon. Wish me luck.</p>
<p>Maintaining <strong>CPAN</strong> distribution is a big responsibility. I have seen regular release of <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, thanks to <strong>Julien Fiegehenn</strong> for all the care and love. You can find the details in the <a href="https://twitter.com/simbabque/status/1549670503719153664">Twitter thread</a>. I know it takes a lot of efforts to keep the distribution live and active as I too have the responsibilities of handful of distributions. Having said, credit must be given to all the contributors who provide patches.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/574.html</id>
    <published>2022-07-25T10:00:00Z</published>
    <updated>2022-07-25T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Permutations Ranked in Disarray on Mars</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/24#pwc174" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>Write a script to generate the first 19 Disarium Numbers.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use POSIX;

sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        return @disariums if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
}

MAIN:{
    print join(", ", disarium_n(19)) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

<h3>Notes</h3>

<p>I gave myself a <em>writing prompt</em> for this exercise: only use map. This turned out to
present a small issue and that is, how do we terminate out of a <code>map</code> early? This comes up
because we do not need to examine all numbers in the large range of <code>0 .. INT_MAX / 100</code>.
Once we find the 19 numbers we require we should just stop looking. <code>last</code> will not work
from within a <code>map</code> it turns out. In this case a <code>return</code> works well. But suppose we did
not want to <code>return</code> out of the subroutine entirely? Well, I have tested it out and it 
turns out that <code>goto</code> will work fine from within a <code>map</code> block as well!</p>

<p>That code would look something like this, where the <code>CONTINUE</code> block would have some more
code for doing whatever else was left to do. </p>

<pre><code class="perl">
sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        goto CONTINUE if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
    CONTINUE:{
        ##
        # more to do before we return
        ##
    }
    return @disariums;
}
</code></pre>

<h2>Part 2</h2>

<p><em>You are given a list of integers with no duplicates, e.g. [0, 1, 2]. Write two functions, 
permutation2rank() which will take the list and determine its rank (starting at 0) in the 
set of possible permutations arranged in lexicographic order, and rank2permutation() which 
will take the list and a rank number and produce just that permutation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
package PermutationRanking{
    use Mars::Class;
    use List::Permutor;

    attr q/list/;
    attr q/permutations/;
    attr q/permutations_sorted/;
    attr q/permutations_ranked/;

    sub BUILD{
        my $self = shift;
        my @permutations;
        my %permutations_ranked;
        my $permutor = new List::Permutor(@{$self-&gt;list()});
        while(my @set = $permutor-&gt;next()) {
            push @permutations, join(":", @set);
        }
        my @permutations_sorted = sort @permutations;
        my $rank = 0;
        for my $p (@permutations_sorted){
            $permutations_ranked{$p} = $rank;
            $rank++;
        }
        @permutations_sorted = map {[split(/:/, $_)]} @permutations_sorted;
        $self-&gt;permutations_sorted(\@permutations_sorted);
        $self-&gt;permutations_ranked(\%permutations_ranked);
    }

    sub permutation2rank{
        my($self, $list) = @_;
        return $self-&gt;permutations_ranked()-&gt;{join(":", @{$list})};
    }

    sub rank2permutation{
        my($self, $n) = @_;
        return "[" . join(", ", @{$self-&gt;permutations_sorted()-&gt;[$n]}) . "]";
    }
}

package main{
    my $ranker = new PermutationRanking(list =&gt; [0, 1, 2]);
    print "[1, 0, 2] has rank " . $ranker-&gt;permutation2rank([1, 0, 2]) . "\n";
    print "[" . join(", ", @{$ranker-&gt;list()}) . "]"  . " has permutation at rank 1 --&gt; " . $ranker-&gt;rank2permutation(1) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 0, 2] has rank 2
[0, 1, 2] has permutation at rank 1 --&gt; [0, 2, 1]
</code></pre>

<h3>Notes</h3>

<p>I've been enjoying trying out Al Newkirk's Mars OOP framework. When it comes to Object 
Oriented code in Perl I've usually just gone with the default syntax or <code>Class::Struct</code>.
I am far from a curmudgeon when it comes to OOP though, as I have a lot of experience
using Java and C++. What I like about Mars is that it reminds me of the best parts of
<code>Class::Struct</code> as well as the best parts of how Java does OOP. The code above, by its
nature does not require all the features of Mars as here we don't need much in the way 
of Roles or Interfaces.</p>

<p>Perhaps guided by my desire to try out Mars more I have taken a definitively OOP approach
to this problem. From the problem statement the intent may have been to have two 
independent functions. This code has two methods which depend on the constructor (defined
within <code>sub BUILD</code>) to have populated the internal class variables needed.</p>

<p>There is a small trick here that the sorting is to be by <em>lexicograohic order</em>, which 
conveniently is the default for Perl's default <code>sort</code>. That doesn't really buy us any
algorithmic improvement in performance, in fact it hurts it! Other approaches exist for 
this problem which avoid producing all permutations of the list.</p>

<h2>References</h2>

<p><a href="https://oeis.org/A032799">Disarium Numbers</a></p>

<p><a href="https://metacpan.org/pod/Mars">Mars</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge 174</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc174</id>
    <published>2022-07-24T19:34:00-04:00</published>
    <updated>2022-07-24T19:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
