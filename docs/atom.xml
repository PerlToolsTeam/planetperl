<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-07-03T14:44:04Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Essence of Perl Text Processing - Perl Book</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/07/essence-of-perl-text-processing---perl-book.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10283</id>
    <published>2021-07-02T09:30:33Z</published>
    <updated>2021-07-02T09:43:04Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        <uri>http://d.hatena.ne.jp/perlcodesample</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I published "Essence of Perl Text Processing" in Japan. This is 2021 new Perl Book(Both Normal Book and EBook).</p>

<p><a href="https://translate.google.com/translate?sl=ja&tl=en&u=https://www.perlri.com/book/perl_text_essense"><img src="https://m.media-amazon.com/images/I/51WLsR3FMTS.jpg"></a></p>

<p><a href="https://translate.google.com/translate?sl=ja&tl=en&u=https://www.perlri.com/book/perl_text_essense">Essence of Perl Text Processing</a></p>

<p>Mascot character is called Mojigaeru(This means String Frag).</p>

<p>"Kaeru(Gaeru/変える)" also means "replace" in Japanese. This expresses Perl is good at string searching and replacing.</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 119: Swap Nibbles and Sequence without 1-on-1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/07/perl-weekly-challenge-119-swap-nibbles-and-sequence-without-1-on-1.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10282</id>
    <published>2021-07-02T03:08:55Z</published>
    <updated>2021-07-02T03:10:27Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 119 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-119/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days, on Independence Day (July 4, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Swap Nibbles</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to swap the two nibbles of the binary representation of the given number and print the decimal number of the new binary representation.</em></p>

<pre><code>A nibble is a four-bit aggregation, or half an octet.
</code></pre>

<p><em>To keep the task simple, we only allow integer less than or equal to 255.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 101
Output: 86

Binary representation of decimal 101 is 1100101 or as 2 nibbles (0110)(0101).
The swapped nibbles would be (0101)(0110) same as decimal 86.

Input: $N = 18
Output: 33

Binary representation of decimal 18 is 10010 or as 2 nibbles (0001)(0010).
The swapped nibbles would be (0010)(0001) same as decimal 33.
</code></pre>

<h3>Swap Nibbles in Raku</h3>

<p>Raku has a built-in <a href="https://docs.raku.org/routine/base">base</a> method to convert a number to a string representation in a given base, and a <a href="https://docs.raku.org/routine/parse-base">parse-base</a> method to perform the reverse operation. I thought it might be clever to use base 4 rather than base 2 to get directly two nibbles, but it turns out that it doesn&#8217;t make things any simpler than using a binary representation (as done in the Perl representation below). Note that we use the <code>fmt("%04s")</code> method invocation to pad the base-4 string representation with leading 0&#8217;s making the swap of the two nibbles very easy with a regex.</p>

<pre><code>use v6;

for 254, 101, 18 -&gt; $n {
    my $b4 = $n.base(4).fmt("%04s");
    # say $n.base(2).fmt("%08s");
    $b4 ~~ s/(\d**2)(\d**2)/$1$0/;
    # say $b4.parse-base(4).base(2).fmt("%08s");
    say "$n -&gt; ", $b4.parse-base(4);
}
</code></pre>

<p>With the built-in test cases, this script displays the following output:</p>

<pre><code>$ raku ./swap-nibbles.raku
254 -&gt; 239
101 -&gt; 86
18 -&gt; 33
</code></pre>

<h3>Swap Nibbles in Perl</h3>

<p>In Perl, we use the built-in <code>sprintf</code> function to convert a number to a binary string representation. And since there is no built-in function to perform the reverse operation, we roll out our own <code>bin2dec</code> subroutine. Otherwise, the Perl implementation is essentially similar to the Raku implementation.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

sub bin2dec {
    my $bin = shift;
    my $sum = 0;
    for my $i (split //, $bin) {
        $sum = $sum * 2 + $i;
    }
    return $sum;
}

for my $test (254, 101, 18) {
    my $b2 = sprintf "%08b", $test;
    $b2 =~ s/(\d{4})(\d{4})/$2$1/;
    say bin2dec $b2;;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  swap-nibbles.pl
239
86
33
</code></pre>

<h2>Task 2: Sequence without 1-on-1</h2>

<p><em>Write a script to generate sequence starting at 1. Consider the increasing sequence of integers which contain only 1’s, 2’s and 3’s, and do not have any doublets of 1’s like below. Please accept a positive integer <code>$N</code> and print the <code>$N</code>th term in the generated sequence.</em></p>

<pre><code>1, 2, 3, 12, 13, 21, 22, 23, 31, 32, 33, 121, 122, 123, 131, …
</code></pre>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5
Output: 13

Input: $N = 10
Output: 32

Input: $N = 60
Output: 2223
</code></pre>

<h3>Sequence without 1-on-1 in Raku</h3>

<p>In Raku, we just build an infinite lazy list representing this sequence. Since it&#8217;s a lazy list, Raku will generate only the sequence numbers needed by the program. We convert a list of consecutive integers into base-4 representations and filter out numbers containing 0&#8217;s or consecutive 1&#8217;s. Note that when we need the <em>n</em>th term of the series, we have to use index <code>n - 1</code>.</p>

<pre><code>use v6;

my $seq-no_1 = grep { not /11 | 0 / }, map { $_.base(4) },
    1..Inf;
say $seq-no_1[$_ - 1] for 5, 10, 60;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>raku ./seq_123.raku
13
32
2223
</code></pre>

<h3>Sequence without 1-on-1 in Perl</h3>

<p>If we wanted to use the same principle in Perl, since we don&#8217;t have lazy lists, we would have to select a large enough maximum value. For example:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @seq = grep { not /11/ } grep /^[1-3]+$/, 1..5000;
say $seq[$_ + 1] for (5, 10, 60);
</code></pre>

<p>This would display the following correct output:</p>

<pre><code>$ perl seq_123.pl
22
121
2232
</code></pre>

<p>But this approach is not very satisfactory because we don&#8217;t know how to select a large enough value. If the selected value is too small, the program will fail, and it it is very large we might be doing a lot of useless computation.</p>

<p>The alternative is to build the successive terms of the sequence. We use the <code>incr</code> subroutine to implement the unusual counting rules. And call it as many times as needed to get the proper result:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub incr {
    my @num = @{$_[0]};
    my $i = $#num;
    while ($i &gt;= 0) {
        if ($num[$i] &lt; 3) {
            $num[$i] ++;
            return \@num;
        } else {
            $num[$i] = 1;
            $i --;
        }
    }
    return [ 1, @num ];
}

for my $i (5, 10, 60) {
    my $res =  [0];
    for (1..$i) {
        $res = incr $res;
        $res = incr $res while (join "", @$res) =~ /11/;
    }
    say @$res;
}
</code></pre>

<p>This yields the same output as before:</p>

<pre><code>$ perl seq_123_2.pl
13
32
2223
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on July 11, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jun 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/07/01/list-of-new-cpan-distributions-jun-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-OrganizingCPAN">Acme-CPANModules-OrganizingCPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Efforts to organize CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomData">Acme-CPANModules-RandomData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Generating random person (name, title, age, etc)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomPassword">Acme-CPANModules-RandomPassword</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Generating random passwords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomPerson">Acme-CPANModules-RandomPerson</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Generating random person (name, title, age, etc)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-ELLEDNERA-Utils">Acme-ELLEDNERA-Utils</a></td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Done for the sake of learning <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;"/></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-boboiboy">Acme-MetaSyntactic-boboiboy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>The BoboiBoy theme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-ozark">Acme-MetaSyntactic-ozark</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>The Ozark theme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy">Acme-PERLANCAR-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Dummy distribution for various testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-Negative">Acme-Version-Negative</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0</td>
<td/>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-Regress">Acme-Version-Regress</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>5.00</td>
<td>3.00</td>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-utf8">Acme-Version-utf8</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td/>
<td/>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Extract-Libarchive">Alien-Build-Plugin-Extract-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Alien::Build plugin to extract a tarball using libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SNMP-MIBDEV">Alien-SNMP-MIBDEV</a></td>
<td><a href="https://metacpan.org/author/INPHOBIA">INPHOBIA</a></td>
<td>2.000000</td>
<td>2.000000</td>
<td>Build and install Net-SNMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Wslay">Alien-Wslay</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install Wslay</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Amp-Client">Amp-Client</a></td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-6">App-Bin4TSV-6</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.090</td>
<td>0.090</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-8">App-Bin4TSV-8</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.101</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-9">App-Bin4TSV-9</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.110</td>
<td>0.111</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Dex">App-Dex</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.002000</td>
<td>0.002000</td>
<td>Directory Execute</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-EPAN">App-EPAN</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Exclusive Perl Archive Nook</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-IODCounterSimpleUtils">App-IODCounterSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities for IOD::Counter::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PMVersionsUtils">App-PMVersionsUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to PMVersions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-SQLiteCounterSimpleUtils">App-SQLiteCounterSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>CLI utilities for SQLite::Counter::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-SQLiteKeyValueStoreSimpleUtils">App-SQLiteKeyValueStoreSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities for SQLite::KeyValueStore::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Stow-Check">App-Stow-Check</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Distribution for stow-check script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arraydata">App-arraydata</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Show content of ArrayData modules (plus a few other things)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-colgrep">App-colgrep</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-colsummary">App-colsummary</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.058</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-crosstable">App-crosstable</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.110</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-csel">App-csel</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-digitdemog">App-digitdemog</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.050</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-expandtab">App-expandtab</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.010</td>
<td>0.020</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-freq">App-freq</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-podman">App-podman</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>a terminal document viewer for POD and other syntaxes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sdview">App-sdview</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a terminal document viewer for POD and other syntaxes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tabledata">App-tabledata</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Show content of TableData modules (plus a few other things)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-traveller">App-traveller</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.01</td>
<td>a webserver that serves Traveller RPG maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-venn">App-venn</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-zoo">App-zoo</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>print bar, usually</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Unwrap">Archive-Libarchive-Unwrap</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unwrap files with multiple compression / encoding formats</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Astro-FITS-CFITSIO-FileName">Astro-FITS-CFITSIO-FileName</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.05</td>
<td>parse and generate CFITSIO extended file names.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Perl-Startup">Bencher-Scenario-Perl-Startup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.051</td>
<td>0.051</td>
<td>Benchmark startup time of perls</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSS-Struct-Output-Structure">CSS-Struct-Output-Structure</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Indent printing 'CSS::Struct' structure to CSS code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-PrometheusTiny">Catalyst-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.006</td>
<td>Prometheus metrics for Catalyst</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cfwp-fio">Cfwp-fio</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.4</td>
<td>0.04</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cfwp-zoo">Cfwp-zoo</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.1</td>
<td>0.01</td>
<td>print bar, usually</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ColorTheme-Search-Light">ColorTheme-Search-Light</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Light theme for text viewer/search application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Compress-LZString">Compress-LZString</a></td>
<td><a href="https://metacpan.org/author/POPP">POPP</a></td>
<td>1.44</td>
<td>1.4401</td>
<td>LZ-based compression library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-PrometheusTiny">Dancer2-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Prometheus metrics for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DataStructure">DataStructure</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Collection of useful data-structures in pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deanonymize">Devel-Deanonymize</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>A tool do make anonymous sub visible to Devel::Cover</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-MAX44009">Device-Chip-MAX44009</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>chip driver for MAX44009</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-OPT3001">Device-Chip-OPT3001</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for OPT3001</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-ASDAGO">Dist-Zilla-PluginBundle-Author-ASDAGO</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.001</td>
<td>ASDAGO's Dist::Zilla plugin bundle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-VNEALV">Dist-Zilla-PluginBundle-Author-VNEALV</a></td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A plugin bundle for distributions config as common dist.ini by VNEALV</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-H3">Geo-H3</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.03</td>
<td>0.06</td>
<td>H3 Geospatial Hexagon Indexing System</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-H3-FFI">Geo-H3-FFI</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.02</td>
<td>0.06</td>
<td>Perl FFI binding to H3 library functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graph-Undirected-Hamiltonicity">Graph-Undirected-Hamiltonicity</a></td>
<td><a href="https://metacpan.org/author/ASHWIN">ASHWIN</a></td>
<td>0.1</td>
<td>0.1</td>
<td>decide whether a given Graph::Undirected contains a Hamiltonian Cycle.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hustle-Table">Hustle-Table</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1</td>
<td>v0.2.2</td>
<td>Fast dynamic dispatching to subroutines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IOD-Counter-Simple">IOD-Counter-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A simple counter using IOD/INI file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Imager-IMBarcode-JP">Imager-IMBarcode-JP</a></td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Japan's Intelligent Mail Barcode Generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Schema-Modern">JSON-Schema-Modern</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.512</td>
<td>0.513</td>
<td>Validate data against a schema</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LINE-Notify-Simple">LINE-Notify-Simple</a></td>
<td><a href="https://metacpan.org/author/HOLLY">HOLLY</a></td>
<td>1.0</td>
<td>1.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Util-Find">List-Util-Find</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>List utilities related to finding items</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Features-Dummy">Module-Features-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Dummy feature set, for testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Obrazi">Mojolicious-Plugin-Obrazi</a></td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>0.11</td>
<td>0.12</td>
<td>a gallery generator command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Spotify">Net-Async-Spotify</a></td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Interaction with spotify.com API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Payment-CCAvenue-NonSeamless">Net-Payment-CCAvenue-NonSeamless</a></td>
<td><a href="https://metacpan.org/author/SHARDIWAL">SHARDIWAL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Processing orders using CCAvenue billing page!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-WebSocket-EVx">Net-WebSocket-EVx</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.12</td>
<td>0.18</td>
<td>Perl wrapper around Wslay websocket library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLS">PLS</a></td>
<td><a href="https://metacpan.org/author/MREISNER">MREISNER</a></td>
<td>0.1</td>
<td>0.8</td>
<td>Perl Language Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-Redirect">Plack-App-Redirect</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plack application for redirection.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-TrafficAdvice">Plack-Middleware-TrafficAdvice</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>handle requests for /.well-known/traffic-advice</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-PseudoPod-Book">Pod-PseudoPod-Book</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210620.2051</td>
<td>1.20210620.2051</td>
<td>manages books written in the Pod::PseudoPod format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-PseudoPod-DOM">Pod-PseudoPod-DOM</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210620.2004</td>
<td>1.20210620.2040</td>
<td>an object model for Pod::PseudoPod documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Simple-Words">Pod-Simple-Words</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.07</td>
<td>0.07</td>
<td>Parse words and locations from a POD document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Promise-Me">Promise-Me</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Fork Based Promise with Asynchronous Execution, Async, Await and Shared Data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Require-Util">Require-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to require()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2">SDL2</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQLite-Counter-Simple">SQLite-Counter-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>A simple counter using SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQLite-KeyValueStore-Simple">SQLite-KeyValueStore-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A simple key-value store using SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ArrayData">Sah-Schemas-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-TableData">Sah-Schemas-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Script-Singleton">Script-Singleton</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ensure only a single instance of a script can run</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Trim-NonRegex">String-Trim-NonRegex</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>String trimming functions that do not use regex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Trim-Regex">String-Trim-Regex</a></td>
<td><a href="https://metacpan.org/author/MBURGER">MBURGER</a></td>
<td>20210604</td>
<td>20210604</td>
<td>Trims the spaces off the leading / trailing string.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Keyword-Combine-Keys">Syntax-Keyword-Combine-Keys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.09</td>
<td>The great new Syntax::Keyword::Combine::Keys!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Locale-US-State">TableData-Locale-US-State</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20200531.0.1</td>
<td>20200531.0.1</td>
<td>US states</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Quote-JamesFT">TableData-Quote-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Adjective">TableDataBundle-Lingua-Word-EN-Adjective</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English adjectives</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Adverb">TableDataBundle-Lingua-Word-EN-Adverb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English adverbs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Noun">TableDataBundle-Lingua-Word-EN-Noun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English nouns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-GradientIndicator">Tags-HTML-GradientIndicator</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Tags helper for gradient evaluation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-HumanComputerWords">Text-HumanComputerWords</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.04</td>
<td>0.04</td>
<td>Split human and computer words in a naturalish manner</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Wrap-OO">Text-Wrap-OO</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.002</td>
<td>an object oriented interface to Text::Wrap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Time-Local-More">Time-Local-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>More functions for producing Unix epoch timestamp or localtime/gmtime tuple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ToolSet-Math">ToolSet-Math</a></td>
<td><a href="https://metacpan.org/author/GLAI">GLAI</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Bring in common math functions and constants.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Multi">Tree-Multi</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210528</td>
<td>20210629</td>
<td>Multi-way tree in Pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Serial">Tree-Serial</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Perl module for deserializing lists of strings into tree-like structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Term">Tree-Term</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210629</td>
<td>20210631</td>
<td>Create a parse tree from an array of terms representing an expression.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Tie-Aggregate">Type-Tie-Aggregate</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.001</td>
<td>like Type::Tie, but slower and more flexible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cfwp-fio">cfwp-fio</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.1</td>
<td>v0.0.3</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/custom-failures-x-alias">custom-failures-x-alias</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>export aliases for custom::failures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mb-Encode">mb-Encode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>provides MBCS encoder and decoder</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perleasyfail">perleasyfail</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000001</td>
<td>0.000002</td>
<td>A collection of cases where core Perl fails its "easy things should be easy" mantra (plus their remedies)</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>104</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>41</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>31</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>11</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>4</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>3</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>2</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/INPHOBIA">INPHOBIA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GLAI">GLAI</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/SHARDIWAL">SHARDIWAL</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MBURGER">MBURGER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/MREISNER">MREISNER</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/HOLLY">HOLLY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/ASHWIN">ASHWIN</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/POPP">POPP</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-OrganizingCPAN PERLANCAR 0.001 0.001 Efforts to organize CPAN Acme-CPANModules-RandomData PERLANCAR 0.001 0.002 Generating random person (name, title, age, etc) Acme-CPANModules-RandomPassword PERLANCAR 0.001 0.001 Generating random passwords Acme-CPANModules-RandomPerson PERLANCAR 0.001 0.001 Generating random person (name, title, age, etc) Acme-ELLEDNERA-Utils ELLEDNERA 0.01 0.04 Done for the sake of learning 🙂 Acme-MetaSyntactic-boboiboy PERLANCAR … <a href="https://perlancar.wordpress.com/2021/07/01/list-of-new-cpan-distributions-jun-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jun 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1947</id>
    <published>2021-07-01T01:24:22Z</published>
    <updated>2021-07-01T01:24:22Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>CPAN Bus Factor</title>
    <link rel="alternate" href="http://blogs.perl.org/users/olaf_alders/2021/06/cpan-bus-factor.html"/>
    <id>tag:blogs.perl.org,2021:/users/olaf_alders//280.10280</id>
    <published>2021-07-01T00:43:59Z</published>
    <updated>2021-07-01T00:48:35Z</updated>
    <author>
        <name>Olaf Alders</name>
        <uri>http://www.wundercounter.com</uri>
    </author>
    <category term="cpan" label="CPAN" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="metacpan" label="MetaCPAN" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/olaf_alders/">
        <![CDATA[<p>Perhaps you've noticed a new metric when browsing MetaCPAN?</p>

<p><a href="http://blogs.perl.org/users/olaf_alders/assets_c/2021/06/moose-4678.html" onclick="window.open('http://blogs.perl.org/users/olaf_alders/assets_c/2021/06/moose-4678.html','popup','width=1292,height=1404,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/olaf_alders/assets_c/2021/06/moose-thumb-600x652-4678.png" width="600" height="652" alt="moose.png" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></a></p>

<p>What is "bus factor"?</p>

<p><a href="https://en.wikipedia.org/wiki/Bus_factor">Wikipedia</a> defines "bus factor" as </p>

<blockquote>a measurement of the risk resulting from information and capabilities not being shared among team members, derived from the phrase "in case they get hit by a bus."</blockquote>

<p>For CPAN our definition is "a measurement of how risky it might be to start relying on a CPAN module, which might not be actively maintained".</p>

<p>Read <a href="https://www.olafalders.com/2021/06/30/cpan-bus-factor/">the full post</a>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Gradual method renaming in Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil" type="text/html"/>
    <content type="html">&lt;p&gt;We have a huge codebase of over 700,000 lines of Perl spread across a couple dozen &lt;a href="https://www.git-scm.com/"&gt;Git&lt;/a&gt; repositories at &lt;a href="https://www.hostgator.com/"&gt;work&lt;/a&gt;. Sometimes &lt;a href="https://www.refactoring.com/"&gt;refactoring&lt;/a&gt; is easy if the classes and methods involved are confined to one of those repos, but last week we wanted to rename a method that was potentially used across many of them without having to QA and launch so many changes. After getting some help from &lt;a href="https://grinnz.net/"&gt;Dan Book&lt;/a&gt; and &lt;a href="https://www.simcop2387.info/"&gt;Ryan Voots&lt;/a&gt; on the &lt;a href="https://web.libera.chat/#perl"&gt;#perl libera.chat IRC channel&lt;/a&gt;, I arrived at the following solution.&lt;/p&gt;

&lt;p&gt;First, if all you want to do is alias the new method call to the old while making the least amount of changes, you can just do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;*new_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;old_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes advantage of Perl’s &lt;a href="https://perldoc.pl/perldata#Typeglobs-and-Filehandles"&gt;typeglobs&lt;/a&gt; by assigning to the new method’s name in the symbol table a &lt;a href="https://perldoc.pl/perlref"&gt;reference&lt;/a&gt; (indicated by the &lt;code&gt;\&lt;/code&gt; character) to the old method. &lt;a href="https://perldoc.pl/perlobj#A-Method-is-Simply-a-Subroutine"&gt;Methods are just subroutines&lt;/a&gt; in Perl, and although you don’t need the &lt;code&gt;&amp;amp;&lt;/code&gt; character when calling one, you do need it if you’re passing a subroutine as an argument or creating a reference, as we’re doing above.&lt;/p&gt;

&lt;p&gt;I wanted to do a bit more, though. First, I wanted to log the calls to the old method name so that I could track just how widely it’s used and have a head start on renaming it elsewhere in our codebase. Also, I didn’t want to fill our logs with those calls—we have enough noise in there already. And lastly, I wanted future calls to go directly to the new method name without adding another stack frame when using &lt;code&gt;caller&lt;/code&gt; or &lt;a href="https://perldoc.pl/Carp"&gt;Carp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, here’s the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;old_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;old_method is deprecated&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redefine&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;*old_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;goto&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# code from old_method goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Old (and not-so-old) hands at programming are probably leaping out of their seats right now yelling, “YOU’RE USING GOTO! GOTO IS &lt;a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf"&gt;CONSIDERED HARMFUL&lt;/a&gt;!” And they’re right, but this isn’t Dijkstra’s goto. From the Perl manual:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;. In fact, it isn’t a goto in the normal sense at all, and doesn’t have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by &lt;a href="https://perldoc.pl/functions/local"&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;) and immediately calls in its place the named subroutine using the current value of &lt;a href="https://perldoc.pl/perlvar#%40_"&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;[…]&lt;/em&gt; After the &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;, not even &lt;a href="https://perldoc.pl/functions/caller"&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; will be able to tell that this routine was called first.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href="https://perldoc.pl/perlfunc"&gt;perlfunc&lt;/a&gt; manual page&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Computer scientists call this &lt;em&gt;tail call elimination&lt;/em&gt;. The bottom line is that this achieves our third goal above: immediately jumping to the new method as if it were originally called.&lt;/p&gt;

&lt;p&gt;The other tricky bit is in the line before, when we’re redefining &lt;code&gt;old_method&lt;/code&gt; to point to &lt;code&gt;new_method&lt;/code&gt; while we’re still inside &lt;code&gt;old_method&lt;/code&gt;. (Yes, you can do this.) If you’re running under &lt;code&gt;use warnings&lt;/code&gt; (and we are, and &lt;a href="https://perlmaven.com/always-use-warnings"&gt;you should&lt;/a&gt;), you first need to disable &lt;a href="https://perldoc.pl/perldiag#Subroutine-%25s-redefined"&gt;that warning&lt;/a&gt;. Later calls to &lt;code&gt;old_method&lt;/code&gt; will go straight to &lt;code&gt;new_method&lt;/code&gt; without logging anything.&lt;/p&gt;

&lt;p&gt;And that’s it. The next step after launching this change is to add a story to our &lt;a href="https://www.scaledagileframework.com/team-backlog/"&gt;backlog&lt;/a&gt; to monitor our logs for calls to the old method, and gradually refactor our other repositories. Then we can finally remove the old method wrapper.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil</id>
    <published>2021-06-29T14:00:00Z</published>
    <updated>2021-06-29T14:00:00Z</updated>
    <category term="oop"/>
    <category term="perl"/>
    <category term="refactoring"/>
  </entry>
  <entry>
    <title>Weekly Challenge 119</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-119-79j" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-119/sgreen">My solutions</a></p>

<p>Two quick fire tasks this week.</p>

<h2>
  <a href="#task-1-swap-nibbles">
  </a>
  TASK #1 › Swap Nibbles
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code>.</p>

<p>Write a script to swap the two <a href="https://en.wikipedia.org/wiki/Nibble">nibble</a> of the binary representation of the given number and print the decimal number of the new binary representation. A nibble is a four-bit aggregation, or half an octet.</p>

<p>To keep the task simple, we only allow integer less than or equal to 255.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Rather than turning the number into a binary representation, perform some swapping and then turning it back into a decimal number, I took a more mathematical approach with binary arithmetic.</p>

<p>We take the first nibble and downshift it four place with <code>$number &gt;&gt; 4</code>. We use <a href="https://perldoc.perl.org/perlop#Bitwise-And">bitwise arithmetic</a> to get the second nibble, and multiple that by 16 to make it the first.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 101
86

$ ./ch-1.pl 18
33
</code></pre>

</div>



<h2>
  <a href="#task-2-sequence-without-1on1">
  </a>
  TASK #2 › Sequence without 1-on-1
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Write a script to generate sequence starting at 1. Consider the increasing sequence of integers which contain only 1’s, 2’s and 3’s, and do not have any doublets of 1’s like below. Please accept a positive integer <code>$N</code> and print the $Nth term in the generated sequence.</p>

<p>1, 2, 3, 12, 13, 21, 22, 23, 31, 32, 33, 121, 122, 123, 131, …</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>For this task, I assign the input number as <code>$counter</code>. I then have a while loop that runs while $counter != 0 and increases the number. I subtract 1 from the $counter if the number only contains 1, 2 and 3s <code>$number =~ /^[123]*$/</code> and the number doesn't have double 1s <code>index( $number, '11' ) == -1</code>.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 5
13

$ ./ch-2.pl 10
32

$ ./ch-2.pl 60
2223
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-119-79j</id>
    <published>2021-06-29T07:43:54Z</published>
    <updated>2021-06-29T07:43:54Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#518 - Becoming book author?</title>
    <link rel="alternate" href="http://perlweekly.com/archive/518.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I recently came across a <a href="https://davecross.substack.com/p/the-story-of-ebooks-and-me">blog post</a> by Dave Cross where he shared the story of how he got into publishing ebooks. I highly recommend you read his blog post, I find it inspirational, personally. I always wanted to write a technical book on a subject related to Perl. I have high regard for those who are professional authors e.g. Curtis Poe, brian d foy, Gabor Szabo, Dave Cross and many more. Ever since I started the weekly challenge, I became more involved in writing technical blogs. Soon I realised it is not the same as writing a technical book. But the urge inside me to become an author didn't die forever. With Dave's recent blog post fanning the idea once again, I became charged one more time but this time I am seriously thinking about it. I have a topic that I wanted to explore for some time. I discussed it with Gabor and Dave and got very positive responses. So it is official I am now working on my first book, soon to be published by Dave Cross. Fingers crossed. Life is so beautiful when you have friends like Gabor and Dave who always encourage and guide you.</p>
<p>There is another story that I would like to share. Andrew Shitov reached out to me few days ago to ask if I was interested in sharing my Raku story at the upcoming <a href="https://conf.raku.org/">The Raku Conference</a>. I have accepted his offer and am working on my presentation. I haven't submitted my talk yet but will do so soon. Do you have a Raku story to share? If yes, then please do submit your talk before the deadline.</p>
<p>One last story for the week and then I will go away. Many of you know that I have been running the Perl Weekly Challenge for more than 2 years now. It started as a weekly challenge aimed for Perl and Raku community but soon it spread out to other languages. As of today, we now have received contributions in over 50 different languages. Latest addition is the <a href="https://code-maven.com/crystal-binary-palindrom">Crystal programming language</a> by none other than Gabor Szabo himself. A long time ago, someone (I don't remember who), suggested that I should register a generic domain instead of perlweeklychallenge.org. I didn't waste any time and registered the new domain theweeklychallenge.org. Having registered the new domain, I didn't have the courage and expertise to switch over the actively used live site to another domain. I asked about this on Facebook and guess what? Dave Cross came up with step-by-step guide explaining how to do the domain switch. I was still very nervous to take the risk. Then came the final blow with Gabor asking the same question: why don't I move domain to a generic domain. To cut a long story short, Gabor and I spent an hour or so yesterday (Sunday afternoon) and got the domain switched over. So we now have new domain the weekly challenge: <a href="https://theweeklychallenge.org">theweeklychallenge.org</a>. Thank you Gabor and Dave for all the support and guidance.</p>
<p>Enjoy the rest of the newsletter</p></div>
    </content>
    <id>http://perlweekly.com/archive/518.html</id>
    <published>2021-06-28T10:00:00Z</published>
    <updated>2021-06-28T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): May 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_may_2021"/>
  <id>tag:news.perlfoundation.org,2021-06-27:/post/maintaining_perl_may_2021</id>
  <published>2021-06-27T14:04:00</published>
  <updated>2021-06-27T14:04:00</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 36 tickets were reviewed, and 6 patches were applied  0.55 research, comment on https topic in PSC #021 2021-05-21  0.67 #15608 research and comment  0.93 #18660 review suggested test code, research  0.15 #18670 re-check, apply to blead  10.57 #18703 try to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.
```
Approximately 36 tickets were reviewed, and 6 patches were
applied</p>

<p>[Hours]         [Activity]
  0.55          research, comment on https topic in PSC  #021 2021-05-21
  0.67          #15608 research and comment
  0.93          #18660 review suggested test code, research
  0.15          #18670 re-check, apply to blead
 10.57          #18703 try to setup a nixos test environment
                #18703 try to reproduce, reproduce and some debugging,
                think about solutions
                #18703 work on a fix, testing
                #18703 debug some not understood behaviour
                #18703 dig into Configure
                #18703 testing, track down intermittent failure, work on
                updating changes
                #18703 more changes, testing
                #18703 make PRs #18790 and #18791, comment on #18703
  1.60          #18710 review
                #18710 comment
  1.17          #18734 review, research and comment
  1.80          #18739 work on a fix, strange build issues (resolved) and
                push for CI
  0.33          #18748 review and close
  0.05          #18749 apply to blead
  0.38          #18752 review and comment
  0.33          #18785 review and comment
  8.40          #18788 reproduce, try to debug
                #18788 research and comment
                #18788 report #136523 against IO::Async::File, apply
                supplied alt patch against tree, look for similar bugs
                #18788 PR #395 against EU::MM, more look for similar bugs
                #18788 make PR #18798
                #18788 fix File::Copy too, perldelta updates
  0.32          #18789 review and comment
  0.18          #18790 recheck and apply to blead
  0.45          #18798 re-check, testing and apply to blead
  0.37          #18819 apply to blead (disable msvc100 CI), open ticket to
                track the original problem
  1.70          :utf8 code re-check
  2.30          :utf8 debugging and fix, more testing
  1.23          :utf8 debugging, find a related bug and fix (but a test
                fails, probably broken test)
  1.78          :utf8 more code review
  3.45          :utf8 more review
                :utf8 more review
  2.40          :utf8 test for possible bug, debugging
  1.23          cleanup old tonyc/ and smoke-me/tonyc branches (preserved
                what I want to keep in tonycoz mirror)
  1.02          COP memory savings
  1.97          list catch up, debug and comment on submitted security
                issue
  1.50          more Data::Alias, testing with usedtrace, consider how to
                fix, email
  1.85          more Data::Alias, testing, research, discussion with xmath
  1.35          more look at SvPV_shrink_to_cur()
  0.28          more quirks email
  0.22          msvc100: research and comment
  1.22          neilb quirks email
  3.15          review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
  1.40          review github notifications, work up change to remove
                msvc100 from CI, more github notifications while the push
                CIs, look at SvPV_shrink_to_cur()’s interaction with CoW
  0.18          review PSC notes</p>

<h1>  1.65          review rfc docs</h1>

<p>58.13 hours total
 ```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Promotion: Knight's Challenge</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/06/promotion-knights-challenge.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10276</id>
    <published>2021-06-26T00:43:11Z</published>
    <updated>2021-06-27T12:26:24Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<div style="text-align:center"><img alt="knight.png" src="http://blogs.perl.org/users/c_y_fung/knight.png" class="mt-image-center" style="text-align: center;" width="321" height="339" />(image from wikipedia)<br /></div>
<b>PROMOTION:</b><br /><p></p><p>A coding puzzle for “<a href="https://perlweeklychallenge.org/">The Weekly Challenge ‐ Perl &amp; Raku</a>” I made has been released <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-118/">this week</a>!<br /></p><p></p><p>You have 46- hours to play with it if you align with official deadline. It probably spends you 2~5 hours in this weekend. Beware! Doing the bonus part may spend you a block of extra 2 hours or more.<br /></p><p>I wish more people will participate and show different approaches to the task. (And, may the participant give me some feedback as a puzzle creator?)<br /></p><p>One may have advantage if s/he has played chess.<br /></p><p>As the puzzle creator, of course I had a sketch of a solution in my mind.</p><p>Yesterday I solved (== coded) the puzzle and is blogging about it this morning. [Spoiler Alert] If you are interested in my solution... <a href="https://github.com/E7-87-83/perlweeklychallenge-club/blob/newt/challenge-118/cheok-yin-fung/perl/">source code</a> , <a href="https://e7-87-83.github.io/coding/challenge_118.html">blogpost</a><br /></p><p><b>Miscellaneous:</b><br /></p><p><a href="https://e7-87-83.github.io/coding/blog.html">My blog</a> is moved to GitHub, mainly because I think soon or later I will blog on other programming languages or issues. At this moment, it has a few posts. :o)<br /></p><p><br /></p>]]>
        <![CDATA[<br />]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7719629425611848491</id>
    <published>2021-06-26T17:15:00.000+02:00</published>
    <updated>2021-06-26T17:15:17.101+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlvii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.41&lt;/strong&gt; on 2021-06-22&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.41 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Config-INI-0.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::INI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple .ini-file format &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.027&lt;/strong&gt; on 2021-06-23&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.025 was 6 years, 7 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/Data-Dump-1.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Dump&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pretty printing of data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.25&lt;/strong&gt; on 2021-06-26&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 6 years, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Sender-1.500' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Sender&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a library for sending email &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.500&lt;/strong&gt; on 2021-06-21&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.300036 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-06-22&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.46 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210620' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210620&lt;/strong&gt; on 2021-06-20&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210521 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.41&lt;/strong&gt; on 2021-06-20&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.40 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20210625' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20210625&lt;/strong&gt; on 2021-06-24&lt;/li&gt;  &lt;li&gt;Votes: 121&lt;/li&gt;  &lt;li&gt;Previous version: 20210402 was 2 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JSIRACUSA/Rose-DB-Object-0.820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Rose::DB::Object&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible, high performance object-relational mapper (ORM). &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.820&lt;/strong&gt; on 2021-06-26&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.819 was 1 year, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9007&lt;/strong&gt; on 2021-06-25&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9006 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/INGY/XXX-0.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XXX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - See Your Data in the Nude &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.38&lt;/strong&gt; on 2021-06-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.37 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7719629425611848491/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvii-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7719629425611848491"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7719629425611848491"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvii-11-great-cpan-modules-released.html" title="(cccxlvii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5600202925050189554</id>
    <published>2021-06-26T17:12:00.001+02:00</published>
    <updated>2021-06-26T17:12:17.067+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxiii) metacpan weekly report - Object::Pad</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/26 15:11:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::DreamyImage" target="_blank"&gt;Acme::DreamyImage&lt;/a&gt; - Dreamy image generator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sdview" target="_blank"&gt;App::sdview&lt;/a&gt; - a terminal document viewer for POD and other syntaxes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bencher::Scenarios::StringFunctions" target="_blank"&gt;Bencher::Scenarios::StringFunctions&lt;/a&gt; - Benchmark string functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Go::Tokenize" target="_blank"&gt;Go::Tokenize&lt;/a&gt; - Tokenize Go&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::AsyncAwait" target="_blank"&gt;Promise::AsyncAwait&lt;/a&gt; - Async/await with promises&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::Me" target="_blank"&gt;Promise::Me&lt;/a&gt; - Fork Based Promise with Asynchronous Execution, Async, Await and Shared Data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Registry" target="_blank"&gt;Win32::Registry&lt;/a&gt; - Accessing the Windows registry&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::this" target="_blank"&gt;Acme::this&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::EUMM::Upgrade" target="_blank"&gt;App::EUMM::Upgrade&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Perl" target="_blank"&gt;Crypt::Perl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump" target="_blank"&gt;Data::Dump&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Formula" target="_blank"&gt;Data::Formula&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::GUID" target="_blank"&gt;Data::GUID&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=276)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Simple" target="_blank"&gt;DBIx::Simple&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Inflator" target="_blank"&gt;Hash::Inflator&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::All" target="_blank"&gt;IO::All&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Declare" target="_blank"&gt;Keyword::Declare&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::mysql" target="_blank"&gt;Mojo::mysql&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::I18N" target="_blank"&gt;Mojolicious::Plugin::I18N&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MongoDB" target="_blank"&gt;MongoDB&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+2=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=378)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Translator" target="_blank"&gt;SQL::Translator&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=132)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XXX" target="_blank"&gt;XXX&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5600202925050189554/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5600202925050189554"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5600202925050189554"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxiii-metacpan-weekly-report.html" title="(cdlxxiii) metacpan weekly report - Object::Pad"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6872107796343371163</id>
    <published>2021-06-26T17:06:00.002+02:00</published>
    <updated>2021-06-26T17:11:04.670+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-06-26 15:05:49 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68097093" target="_blank"&gt;In Perl, what's the underlying difference between a hash and a blessed reference?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68119351" target="_blank"&gt;Not a HASH reference in Perl&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68055101" target="_blank"&gt;Can anybody explain why this Perl one-liner of fibonacci is working?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68064042" target="_blank"&gt;How to sum up all value returned by an array of threads in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68078699" target="_blank"&gt;How to set TTL on outgoing packets in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68141141" target="_blank"&gt;perl regex unexpected behaviour of /m modifier&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68086921" target="_blank"&gt;What does "!$@" mean in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68061590" target="_blank"&gt;Check whether a file's content is changed or not using Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68101795" target="_blank"&gt;Use perl WWW:Mechanize on MacOS Big Sur&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68118177" target="_blank"&gt;Reading gzip line from line on a mac&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6872107796343371163/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxcvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6872107796343371163"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6872107796343371163"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxcvi-stackoverflow-perl-report.html" title="(cdxcvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 118: Binary Palindrome</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/06/perl-weekly-challenge-118-binary-palindrome.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10273</id>
    <published>2021-06-24T03:11:16Z</published>
    <updated>2021-06-24T03:13:26Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 118 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-118/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of  days (June 27, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Binary Palindrome</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to find out if the binary representation of the given integer is Palindrome. Print 1 if it is otherwise 0.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5
Output: 1 as binary representation of 5 is 101 which is Palindrome.

Input: $N = 4
Output: 0 as binary representation of 4 is 100 which is NOT Palindrome.
</code></pre>

<h3>Binary Palindrome in Raku</h3>

<p>In Raku, the <a href="https://docs.raku.org/routine/base">base</a> method converts the invocant number to a string representation of the number in the given base. So we need to compare compare the binary representation of the number to its reverse string (using the <a href="https://docs.raku.org/routine/flip">flip</a> routine). The code for doing that is a simple Raku one-liner. The <code>+</code> sign is used to <em>numify</em> Boolean values returned by the comparison (i.e. convert <code>True</code>and <code>False</code> values to 1 and 0, respectively).</p>

<pre><code>use v6;

for 1..12 -&gt; $test {
    say "$test -&gt; ", + ($test.base(2) eq $test.base(2).flip);
}
</code></pre>

<p>This is the output with the 12 test cases:</p>

<pre><code>$ raku ./bin-palindrome.raku
1 -&gt; 1
2 -&gt; 0
3 -&gt; 1
4 -&gt; 0
5 -&gt; 1
6 -&gt; 0
7 -&gt; 1
8 -&gt; 0
9 -&gt; 1
10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
</code></pre>

<h3>Binary Palindrome in Perl</h3>

<p>The Perl implementation is quite similar to the Raku implementation, except that we use the <code>sprintf</code> built-in function to convert the number to a binary representation of the input number.</p>

<pre><code>use strict;
use warnings;
use feature "say";

for my $test (1..12) {
    my $bin_num = sprintf "%b", $test;
    say "$test -&gt; ", $bin_num eq reverse ($bin_num) ? 1 : 0;
}
</code></pre>

<p>This is the output with the 12 test cases:</p>

<pre><code>$ perl ./bin-palindrome.pl
1 -&gt; 1
2 -&gt; 0
3 -&gt; 1
4 -&gt; 0
5 -&gt; 1
6 -&gt; 0
7 -&gt; 1
8 -&gt; 0
9 -&gt; 1
10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
</code></pre>

<h2>Task 2: Adventure of Knight</h2>

<p><em>A knight is restricted to move on an 8×8 chessboard. The knight is denoted by N and its way of movement is the same as what it is defined in Chess.</em> </p>

<p><code>*</code> represents an empty square. <code>x</code> represents a square with treasure.</p>

<pre><code>The Knight’s movement is unique. It may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L).
</code></pre>

<p><em>There are 6 squares with treasures.</em></p>

<p><em>Write a script to find the path such that Knight can capture all treasures. The Knight can start from the top-left square.</em></p>

<pre><code>  a b c d e f g h
8 N * * * * * * * 8
7 * * * * * * * * 7
6 * * * * x * * * 6
5 * * * * * * * * 5
4 * * x * * * * * 4
3 * x * * * * * * 3
2 x x * * * * * * 2
1 * x * * * * * * 1
  a b c d e f g h
</code></pre>

<p><em>BONUS: If you believe that your algorithm can output one of the shortest possible path.</em></p>

<p>I have secured a Raku program solving the <a href="https://en.wikipedia.org/wiki/Knight's_tour">knight&#8217;s tour problem</a>, using <a href="https://en.wikipedia.org/wiki/Knight%27s_tour#Warnsdorff's_rule">Warnsdorff&#8217;s rule</a>. Since this program guarantees that the knight visits every square exactly once, we&#8217;re guaranteed to find all treasures in a relatively limited number of moves. But it is rather unlikely to find the shortest possible path. I&#8217;ll try to look for an optimal path, but this appears to require an entirely different algorithm. I&#8217;m very busy this week: I have meetings late on Thursday and Friday evenings and I have a fully booked weekend, with at best a couple of hours free on Saturday night. In short, I&#8217;m really not sure that I&#8217;ll be able to complete task 2 in time. This is the reason I decided to publish this blog post with solutions to only task 1. I&#8217;ll update this post if I succeed to complete task 2 in due time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Independence Day, i.e. July 4, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 118</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-118-4hg9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-118/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-118/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-binary-palindrome">
  </a>
  TASK #1 › Binary Palindrome
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code>.</p>

<p>Write a script to find out if the binary representation of the given integer is Palindrome. Print <code>1</code> if it is otherwise <code>0</code>.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Compared to the second task, this is pretty straight forward. Convert the integer into a binary representation using <code>sprintf '%b'</code>, and then compare this string to the reversed string.</p>

<p>The only thing up for debate is whether an even number (the last bit is 0) could be considered a palindrome if it was left padded by one or more zeros. For example, the binary value for 6 (110) could be written as 0110 which is palindromic. For the purpose of this task, I'm not doing that.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 5
1

$ ./ch-1.pl 4
</code></pre>

</div>



<h2>
  <a href="#task-2-adventure-of-knight">
  </a>
  TASK #2 › Adventure of Knight
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>A knight is restricted to move on an 8×8 chessboard. The knight is denoted by N and its way of movement is the same as what it is defined in Chess. * represents an empty square. x represents a square with treasure.</p>

<p>The Knight’s movement is unique. It may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L).</p>

<p>There are 6 squares with treasures.</p>

<p>Write a script to find the path such that Knight can capture all treasures. The Knight can start from the top-left square.</p>

<p>BONUS: If you believe that your algorithm can output one of the shortest possible path.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This is by far the most amount of code I've written for a challenge, beating my previous code for the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-076/#TASK2">word search</a> task in week 076. I guess I'll find out once I've submitted my pull request if I'm on the mark or over engineered it. It would be a lot smaller if I wasn't trying to get the bonus points :)</p>

<p>The first thing what is the input. Rather than parsing a file for <code>*</code> and <code>x</code>, I specify the treasure spots in chess notation (a1 = bottom left, f8 = top right). While the task specifies six pieces of treasure, you can specify as many or as few as required.</p>

<p>Then the task is broken up into these sub tasks:</p>

<ul>
<li>The <code>_input_to_targets</code> subroutine converts the chess notation into cell positions (a1 = 0,0, a8 = 0,7). It also adds a8 as the starting position, and checks that there are no duplicates.</li>
<li>The next thing to do is find all the intermediate moves (if any) between every two points. For six pieces of treasure (7 points including the knight's origin), there are 42 (6 × 7) combinations. Thankfully we only need to calculate half of them, as the other half are just the reverse order. This is done in the <code>_get_intermediate_moves</code> subroutine.</li>
<li>The way this subroutine works is it starts with the starting point. It then adds a move in each of the eight directions the knight can move, providing the it is still within the bounds of the board and the cell it lands on has not already been seen. If none of these result in hitting the target, these moves have another move added to them. We continue this until we hit the target. We now know the shortest path between all points of interest on the board.</li>
<li>The next task is to figure out all the permutations of the order to reach the treasure. I don't like using modules that aren't part of core Perl, so I rolled my own <code>_get_permutation</code> function that was copied from the second task of week 109. For six pieces of treasure, there are 720 (6!) possible permutations, since we must always start at the top left position.</li>
<li>For each permutation of moves we need to find the number of moves required to collect all the treasure. This is done by using the intermediate moves between two pieces of treasure, and the cell itself. If this is the shortest path or the first permutation, we store the moves in the <code>@least_moves</code> array.</li>
<li>Finally we display the results. For this I convert the grid position to chess notation with the <code>_cn</code> function. If the cell has a piece of treasure, then I put asterisks around the cell.</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl e6 d4 c3 a2 b2 b1
The shortest path is 12 steps
*a8* » c7 » *e6* » *d4* » b5 » *c3* » *a2* » c3 » *b1* » c3 » d1 » *b2*
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-118-4hg9</id>
    <published>2021-06-23T16:52:38Z</published>
    <updated>2021-06-23T16:52:38Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Bericht vom Deutschen Perl-/Raku-Workshop 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Der Deutsche Perl-/Raku-Workshop ("German Perl Workshop", GPW) ist eine Institution in der Perl-Community: Seit 1999 gibt es diese Konferenz rund um Perl (und seit ein paar Jahren Raku). Damit ist der GPW eine der ältesten Perl-Veranstaltungen überhaupt.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021</id>
    <published>2021-06-23T10:00:00Z</published>
    <updated>2021-06-23T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Deprecating 32-bit perl</title>
    <link rel="alternate" href="https://dev.to/drhyde/deprecating-32-bit-perl-3512" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I announced recently that for one of my perl modules, <a href="https://metacpan.org/dist/Number-Phone">Number::Phone</a>, I would be dropping support for 32-bit versions of perl. On the mailing list that I have for users I heard nary a peep, but when I announced it in public groups I got some pushback, so I thought it would be a good idea to explain why I'm doing this, and also why I don't think it's a problem.</p>

<p>So first, why? It's quite simple really. Bundled with Number::Phone is a lot of data. The 25MB (compressed) distribution tarball expands to 123MB, of which 98MB is one single data file. Disk space is cheap this century, so I didn't worry about this for ages, until one of the users asked if I could split that data file out into a separate optional add-on, as it was taking most of the space in his Docker containers, and was a substantial financial cost for him. Splitting it out would require a long deprecation cycle, so as a temporary work-around I have provided <a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.7003/source/README.md">a build-time option</a> to leave out that file when you install the module and save disk space in exchange for reduced functionality. But I really want to provide full functionality and save disk space.</p>

<p>The large file is a <a href="https://metacpan.org/dist/DBM-Deep">DBM::Deep</a> database. DBM::Deep is a fantastic tool, it provides an on-disk representation of an arbitrary data structure of arrays, dictionaries and scalars. You can access all the data completely transparently, and it eats hardly any memory. You can even add, edit and delete bits of the structure. An on-disk data structure that requires minimal memory is exactly what I wanted. However, editability comes with costs. In particular it costs lots of disk space. Not only do you have to allow space for data structures to grow (at minimum this requires space for extra pointers to data that would be added at the end of the file), to edit in a reasonable time also means that you have to potentially store the same data a great many times if the same value appears in multiple places.</p>

<p>But I don't need editability. It's enough that I can create a database once, and the users only need to be able to read it. So I created a replacement. <a href="https://metacpan.org/pod/Data::CompactReadonly">Data::CompactReadonly</a> stores in 6.1MB what DBM::Deep needs 98MB for. Database creation is slower and requires more memory than with DBM::Deep, but I don't care about that. Database access for users requires no more memory than DBM::Deep if you accept it being about half the speed, or if you can accept it using a bit of memory it is four times faster than DBM::Deep. And that's an early version, I've put some work into optimisation, but I'm sure I can wring some more performance out.</p>

<p>I didn't want to just write something for use by Number::Phone though, I wanted a general-purpose tool. To be general-purpose it has to support 64-bit values, and because I am lazy the current version <em>requires</em> 64-bit integers. I may find the tuits to get rid of that requirement at some point, but I'm not going to put much effort into that, because ...</p>

<p>... I doubt I have any 32-bit users. Perl has supported 64-bit architectures since <a href="https://metacpan.org/release/RGARCIA/perl-5.6.2/view/INSTALL#64-bit-support.">at least 2003</a>, and also supports 64-bit integers on many platforms that only have 32-bit pointers. I gave a 2 year deprecation warning, so by the time I release a version that requires 64-bit integers they will have been available on all reasonable platforms and many thoroughly unreasonable ones for just a few months short of <em>twenty years</em>. It hasn't been possible to even buy reasonable server-grade 32-bit hardware for a decade or more and even unreasonable hobbyist servers like the common cheap ARM boxes can run a perl with 64-bit integers.</p>

<p>So there you are, that's why I'm deprecating 32-bit perl, and why I don't think anyone will notice when I stop supporting it.</p>

</div>
    </content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/deprecating-32-bit-perl-3512</id>
    <published>2021-06-22T22:45:38Z</published>
    <updated>2021-06-22T22:45:38Z</updated>
    <category term="perl"/>
    <category term="32bit"/>
    <category term="deprecation"/>
  </entry>
  <entry>
    <title>Perl can escape the Lisp Curse</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-can-escape-the-lisp-curse-3o77" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Ten years ago Rudolf Winestock wrote <a href="http://winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a>, an essay that “attempt[ed] to reconcile the power of the <a href="https://lisp-lang.org/">Lisp programming language</a> with the inability of the Lisp community to reproduce their pre-<a href="http://c2.com/cgi/wiki?AiWinter">AI Winter</a> achievements.”</p>

<p>His conclusion? The <strong>power and expressiveness</strong> of Lisp have conspired to keep its developers individually productive, but <strong>collectively unable to organize their work</strong> into complete, standardized, well-documented, ‑tested, and ‑maintained packages that they could coalesce into interoperable and widely-adopted solutions. Everything from object systems to types to asynchronous non-blocking programming and concurrency is up for grabs and has multiple competing implementations.</p>

<p>These social effects have <strong>doomed Lisp to also-ran status</strong> in an industry where “employers much prefer that workers be fungible, rather than maximally productive.” Free tooling support has lagged; although <a href="http://www.gnu.org/software/emacs/">Emacs</a> can be hacked endlessly to do anything, there is no out-of-the-box integrated development environment or batteries-included defaults to <strong>immediately ease new programmers into their job</strong>.</p>

<p>Does this all sound familiar to Perl developers?</p>

<p>Perl is <strong>renowned for its expressive capabilities</strong> , enshrined in the <a href="https://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it">TIMTOWTDI</a> (There Is More Than One Way To Do It) design principle. Stories abound of the productivity achieved by Perl programmers stitching together modules from <a href="https://www.cpan.org/">CPAN</a> with their own code. Select an <a href="https://metacpan.org/pod/Moose">object</a> <a href="https://metacpan.org/pod/Moo">system</a> (or <a href="https://perldoc.pl/perlobj">don’t</a>), maybe throw in an <a href="https://metacpan.org/pod/Syntax::Keyword::Try">exception</a> <a href="https://metacpan.org/pod/Try::Tiny">handler</a> (or <a href="https://perldoc.pl/functions/eval">don’t</a>), and you too can have a codebase that fellow developers critique for not following their favored techniques. Meanwhile, <strong>managers are struggling to fill the rest of the team</strong> with new programmers looking for IDE support and finding only a grab-bag of <a href="https://www.vim.org/">Vim</a> extensions.</p>

<p>But there’s hope.</p>

<p>Perl has started <strong><a href="https://perldoc.pl/perlsyn#Try-Catch-Exception-Handling">incorporating</a> <a href="https://github.com/Ovid/Cor/wiki">features</a> expected of modern programming languages</strong> into its core while <a href="https://metacpan.org/pod/XS::Parse::Keyword">making room</a> for further experimentation via CPAN. The <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (from Microsoft of all places!) has <a href="https://metacpan.org/pod/Perl::LanguageServer">enabled Perl IDE features</a> in text editors to <strong>boost productivity for new and experienced developers</strong> alike. And there’s a <a href="https://github.com/Perl/RFCs/blob/master/docs/process.md">pilot Request For Comment process</a> for further improvements.</p>

<p>These efforts point to a future where <strong>Perl’s expressive strength is married with sensible defaults and features</strong> <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260068.html">without breaking backward compatibility</a>. Maybe the curse can be overcome.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-can-escape-the-lisp-curse-3o77</id>
    <published>2021-06-22T14:00:00Z</published>
    <updated>2021-06-22T14:00:00Z</updated>
    <category term="perl"/>
    <category term="lisp"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>#517 - Commitment and habit</title>
    <link rel="alternate" href="http://perlweekly.com/archive/517.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Flavio Poletti has just completed one year of blogging. Mohammad S. Anwar has been editing the Perl Weekly for more than three years and running the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a> for more than two years.</p>
<p>I am not sure what the secret is, but something about creating a commitment, even if it is an artificial commitment that then you need to stick to. I am sure both of them had times when they thought of sleeping in and not doing the work that day or that week. After all, this is not their paid job, but the commitment kept them going. With time it became easier to do the task and the whole thing became a habit. I wish more people found the strength to do something like this.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/517.html</id>
    <published>2021-06-21T10:00:00Z</published>
    <updated>2021-06-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A List with One Missing Line and Too Many Lines to List: The Weekly Challenge 117</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given text file with rows numbered 1-15 in random order but there is a catch one 
row in missing in the file.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub find_missing{
    my(@numbers) = sort {$a &lt;=&gt; $b} @_;
    for(my $i=0; $i&lt; @numbers - 1; $i++){
        return $numbers[$i] + 1 if $numbers[$i] != $numbers[$i + 1] - 1;   
    }  
}

MAIN:{
    my @line_numbers; 
    while(&lt;DATA&gt;){
        chomp;
        m/([0-9]+),.*/;
        push @line_numbers, $1;
    }
    my $missing = find_missing(@line_numbers);
    print "$missing\n"; 
}

__DATA__
11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My approach here is likely the most common one for this problem I would think. We get a 
list of all the numbers and then iterate through the list to determine which one is 
missing. This code assumes the conditions of the problem hold, that there is always one
missing number.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given size of a triangle. Write a script to find all possible paths from top to 
the bottom right corner. In each step, we can either move horizontally to the right (H), 
or move downwards to the left (L) or right (R).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant FINAL =&gt; "end"; 
use constant DEADEND =&gt; "-1"; 
use constant TRIANGLE_TOP =&gt; q|/\\| ;
use constant TRIANGLE_BOTTOM =&gt; q|/__\\|;

sub find_paths{
    my($n) = @_;
    my %paths;
    my @complete_paths;
    my @vertices; 
    for my $i (0 .. $n){
        for my $j (0 .. $i){
            push @vertices, "$i-$j";
        }
    }
    $paths{""}=["0-0",["0-0"]];    
    my %updated_paths;
    while((keys %paths) &gt; 0){
        %updated_paths = ();
        for my $path (keys %paths){
            my @exists;
            my @visited; 
            my $current = $paths{$path}-&gt;[0];  
            my $visited = $paths{$path}-&gt;[1];
            my @ij = split(/\-/, $current);  
            my($left, $horizontal, $right) = (($ij[0] + 1) . "-" . $ij[1], $ij[0] . "-" . ($ij[1] + 1), ($ij[0] + 1) . "-" . ($ij[1] + 1));
            @exists = grep {$_ eq $left} @vertices;
            @visited = grep {$_ eq $left} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_left = [@{$visited}, $left];
               if($left eq "$n-$n"){
                   push @complete_paths, $path . "L"; 
               }
               else{
                   $updated_paths{$path . "L"} = [$left, $visited_left];     
               }
            }          
            @exists = grep {$_ eq $horizontal} @vertices;
            @visited = grep {$_ eq $horizontal} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_horizontal = [@{$visited}, $horizontal];
               if($horizontal eq "$n-$n"){
                   push @complete_paths, $path . "H"; 
               }
               else{
                   $updated_paths{$path . "H"} = [$horizontal, $visited_horizontal];     
               }
            }           
            @exists = grep {$_ eq $right} @vertices;
            @visited = grep {$_ eq $right} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_right = [@{$visited}, $right];
               if($right eq "$n-$n"){
                   push @complete_paths, $path . "R"; 
               }
               else{
                   $updated_paths{$path . "R"} = [$right, $visited_right];     
               }
            }           
        }  
        %paths = %updated_paths;  
    }   
    return @complete_paths; 
}

sub print_triangle{
    my($n) = @_;
    my $top = TRIANGLE_TOP . "  ";
    for my $i (1 .. $n ){
        print " ";
        print "  " x ($n - $i);
        print $top x $i  ;
        print "\n";
        print "  " x ($n - $i );
        print TRIANGLE_BOTTOM x ($i );
        print "\n";
    }
}

MAIN:{
    my($N);
    $N = 1;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 2;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 3;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 4;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 /\  
/__\
R LH 
   /\  
  /__\
 /\  /\  
/__\/__\
RR LRH RLH LHR LLHH LHLH 
     /\  
    /__\
   /\  /\  
  /__\/__\
 /\  /\  /\  
/__\/__\/__\
RRR LHRR RLHR LRRH RRLH RLRH LRHR LLHRH LLRHH RLHLH LHRLH RLLHH LHLRH LLHHR LHLHR LRLHH LRHLH LHLHLH LHLLHH LLHLHH LLLHHH LLHHLH 
       /\  
      /__\
     /\  /\  
    /__\/__\
   /\  /\  /\  
  /__\/__\/__\
 /\  /\  /\  /\  
/__\/__\/__\/__\

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Here we see a great example of &lt;em&gt;combinatorial explosion&lt;/em&gt;! As the triangle size grows the 
number of possible pathways increases extremely quickly. The number of possible paths when
&lt;code&gt;$N = 10&lt;/code&gt; is 1,037,718. My code finds all of those in about 40 seconds when run on a 2019
MacBook Pro. Performance on more modest hardware is still reasonable.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;$N = 20&lt;/code&gt; the complete number of paths is so large that maintaining a list of paths 
in memory will cause the Perl interpreter to run out of memory and crash. It is simply
not possible to list them all!&lt;/p&gt;

&lt;p&gt;Interestingly it turns out that the original author of the challenge thought simply
&lt;a href="https://twitter.com/e_choroba/status/1406747854983602179?s=20"&gt;counting the paths&lt;/a&gt; would
be sufficient, but the problem was edited to instead list the paths. I have to say that
listing them all, along with my own optional variation of drawing the triangles was fun.
The only downside was a bit of initial surprise, and then realization, about just how 
large the number of paths grows.&lt;/p&gt;

&lt;p&gt;It turns out that this task is a slightly disguised description of what is known as a
&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;. The
possible number of paths, the count that is, can be obtained directly from a closed form
approach. No need to actually traverse the paths!&lt;/p&gt;

&lt;p&gt;What I did here was to effectively do a breadth first traversal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A hash is kept of all paths. Keys are the paths themselves and values are an array 
reference containing the current position and all previously visited nodes on that path.
&lt;/li&gt;
&lt;li&gt;Each path is examined and updated to move to the next position proved that next position
exists and has not yet been visited. (See more on visited positions next).
&lt;/li&gt;
&lt;li&gt;The hash of paths is refreshed by moving paths that are completed to an array. Also, 
this code allows for catching paths which deadend (i.e. end up in a corner which is 
impossible to get out of without backtracking over a visited node). Without horizontal 
leftward movements this is not really possible however. Some CPU cycles can be saved by
eliminating these checks, but I decided to leave them in anyway. Please do note the 
unnecessary extra work, however!
&lt;/li&gt;
&lt;li&gt;The traversal ends when all paths have been exhausted, the loop ends, and the paths are
returned.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-117/"&gt;Challenge 117&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc117</id>
    <published>2021-06-20T23:38:00-04:00</published>
    <updated>2021-06-20T23:38:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Recursion in Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></summary>
  <updated>2021-06-20T10:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/recursion"/>  <id>https://perlmaven.com/recursion</id>
  <content type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5091723297877540193</id>
    <published>2021-06-19T18:36:00.000+02:00</published>
    <updated>2021-06-19T18:36:43.208+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlvi) 25 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Cmd-0.334' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - write command line apps with less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.334&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.333 was 3 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997004&lt;/strong&gt; on 2021-06-13&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 0.997003 was 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Uni-9.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Uni&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - command-line utility to find or display Unicode characters &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.005&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 9.004 was 11 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.020&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.017 was 7 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-Plugin-PodWeaver-4.009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::PodWeaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave your Pod together from configuration and Dist::Zilla &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.009&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.008 was 5 years, 1 month, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Sender-1.300036' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Sender&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a library for sending email &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.300036&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.300035 was 8 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.20&lt;/strong&gt; on 2021-06-18&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.17 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.55&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.54 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/MIME-Lite-3.033' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MIME::Lite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy-dandy MIME mailing class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.033&lt;/strong&gt; on 2021-06-12&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 3.031 was 1 year, 7 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.5' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.5&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.4 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.006&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.005 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.04&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.03 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.01&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.00 was 3 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.051' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.051&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.050 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.025&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.024 was 2 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.018&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 4.017 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/POE-Component-IRC-6.93' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;POE::Component::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A fully event-driven IRC client module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.93&lt;/strong&gt; on 2021-06-15&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.92 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.62&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.61 was 1 month, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.713&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 7.712 was 2 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Sub-Exporter-0.988' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Exporter&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a sophisticated exporter for custom-built routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.988&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.987 was 7 years, 8 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.028&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.027 was 2 years, 9 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/Text-CSV-2.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comma-separated values manipulator (using XS or PurePerl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.01&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 69&lt;/li&gt;  &lt;li&gt;Previous version: 2.00 was 2 years, 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Throwable-0.201' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Throwable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a role for classes that can be thrown &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.201&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.200013 was 5 years, 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Toadfarm-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Toadfarm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - One Mojolicious app to rule them all &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 1 year, 8 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.074&lt;/strong&gt; on 2021-06-18&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.073 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5091723297877540193/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvi-25-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5091723297877540193"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5091723297877540193"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvi-25-great-cpan-modules-released.html" title="(cccxlvi) 25 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5740516172480212572</id>
    <published>2021-06-19T18:31:00.006+02:00</published>
    <updated>2021-06-19T18:32:36.961+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxii) metacpan weekly report - Object::Pad </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad"&gt;Object::Pad&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/19 16:31:02 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::TopoSort" target="_blank"&gt;DBIx::Class::TopoSort&lt;/a&gt; - The addition of topological sorting to DBIx::Class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PERLANCAR::Parse::Arithmetic" target="_blank"&gt;PERLANCAR::Parse::Arithmetic&lt;/a&gt; - Parse arithmetic expmatchsion&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::TrafficAdvice" target="_blank"&gt;Plack::Middleware::TrafficAdvice&lt;/a&gt; - handle requests for /.well-known/traffic-advice&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=256)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Netdisco" target="_blank"&gt;App::Netdisco&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Core" target="_blank"&gt;autobox::Core&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beam::Wire" target="_blank"&gt;Beam::Wire&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::RPC::Client" target="_blank"&gt;Bitcoin::RPC::Client&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Eksblowfish" target="_blank"&gt;Crypt::Eksblowfish&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Types" target="_blank"&gt;Data::Types&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Hash::Utils" target="_blank"&gt;Deep::Hash::Utils&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gimp" target="_blank"&gt;Gimp&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Fold" target="_blank"&gt;Hash::Fold&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Merge::Simple" target="_blank"&gt;Hash::Merge::Simple&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Path" target="_blank"&gt;Hash::Path&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=453)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MongoDB" target="_blank"&gt;MongoDB&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+3=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Table" target="_blank"&gt;PDF::Table&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Deflater" target="_blank"&gt;Plack::Middleware::Deflater&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Induce" target="_blank"&gt;Scalar::Induce&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Util::Numeric" target="_blank"&gt;Scalar::Util::Numeric&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Selenium::Remote::Driver" target="_blank"&gt;Selenium::Remote::Driver&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Compile" target="_blank"&gt;Test::Compile&lt;/a&gt; (+2=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Shortcut" target="_blank"&gt;Win32::Shortcut&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5740516172480212572/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5740516172480212572"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5740516172480212572"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxii-metacpan-weekly-report.html" title="(cdlxxii) metacpan weekly report - Object::Pad "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grants: May 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_may_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-06-18:/post/grants_may_2021_votes</id>
  <published>2021-06-18T22:25:45</published>
  <updated>2021-06-18T22:25:45</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted: Grant Proposal: Raku Dispatch and Compiler Improvements VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN Grant Proposal: Persistent Data Structures for Raku VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN The Grants Committee is excited to see work begin on these. We accept proposals throughout the year; our 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">Grant Proposal: Raku Dispatch and Compiler Improvements</a> (USD 12,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (27 points), 0 NO votes, 3 ABSTAIN</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Grant Proposal: Persistent Data Structures for Raku</a> (USD 7,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (26 points), 0 NO votes, 3 ABSTAIN</p>

<p>The Grants Committee is excited to see work begin on these.</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Parse paragraphs with Regexp::Grammars</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></summary>
  <updated>2021-06-17T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/regexp-grammars-parse-paragraphs"/>  <id>https://perlmaven.com/regexp-grammars-parse-paragraphs</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#516 - Conference in the Cloud</title>
    <link rel="alternate" href="http://perlweekly.com/archive/516.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The highlight of last week was the Conference in the Cloud. It gave us the opportunity to meet and greet Perl and Raku fans from across the globe. On top of that, we got loads of quality talks by experts. Before I talk about anything else, let me thank and congratulate all the organisers and volunteers for such a successful event. I am personally impressed with the video quality of the live and recorded talks.</p>
<p>For me, I find the timing little bit odd as I am in the UK. The day started at 6:30pm British Summer Time, which is not ideal. At the end of a full day at $work, there is hardly any energy left to attend the talks live. But the best part wasthat the recorded talks were available on YouTube immediately. I find it convenient, as I can watch at my own time. Also I can fast-forward if I want to.</p>
<p>Please find below my personal favourites in no particular order.</p>
<p>1. <a href="https://www.youtube.com/watch?v=fKqxdTbGxYY">perlimports or "Where did that symbol come from?" by Olaf Alders</a></p>
<p>2. <a href="https://www.youtube.com/watch?v=aDUxaBsDcDg">Local dev setup for a complex app using docker-compose by Thomas Klausner</a></p>
<p>3. <a href="https://www.youtube.com/watch?v=go7Ru3QQYYs">Introduction to Perl Data Types by William N. Braswell, Jr.</a></p>
<p>4. <a href="https://www.youtube.com/watch?v=FO5ift28RyE">Rummaging in the clOOset by Curtis Poe</a></p>
<p>5. <a href="https://www.youtube.com/watch?v=kxMfnk3fQlY">Life after Perl (and Raku) by Peter Sergeant</a></p>
<p>6. <a href="https://www.youtube.com/watch?v=FlGpiS39NMY">What's new in Perl? by Ricardo Signes</a></p>
<p>7. <a href="https://www.youtube.com/watch?v=Kc_bP73xNyM">Perl's Amazing Time Machine by Paul Evans</a></p>
<p>8. <a href="https://www.youtube.com/watch?v=ZY8HrAL755M">Valiant - Heroic validations for Moo and DBIC classes by John Napiorkowski</a></p>
<p>9. <a href="https://www.youtube.com/watch?v=y2_bqfLUHDM">Our shared vision of Perl by Andrew Solomon</a></p>
<p>10. <a href="https://www.youtube.com/watch?v=En49kYRDbsg">Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion by Zaki Mughal</a></p>
<p>There are plenty more to watch later. You can find the complete list <a href="https://www.youtube.com/c/YAPCNA/videos">here</a>.</p>
<p>Enjoy the rest of the newsletter and please stay safe.</p></div>
    </content>
    <id>http://perlweekly.com/archive/516.html</id>
    <published>2021-06-14T10:00:00Z</published>
    <updated>2021-06-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Create a lexical warning that can be turned on and off with the "warnings" pragma.</title>
  <summary type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></summary>
  <updated>2021-06-14T08:10:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/create-warning"/>  <id>https://perlmaven.com/create-warning</id>
  <content type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Evolving a Sequence with a Functional Genome: The Weekly Challenge 116</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/13#pwc116" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to split the given number such that the 
difference between two consecutive numbers is always 1, and it shouldn't have a leading 0.
Print the given number if it impossible to split the number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use AI::Genetic;

use constant THRESHOLD =&gt; 0;
use constant NUMBERS   =&gt; "1234";

sub no_op{
    my($x) = @_;
    return (caller(0))[3] if !defined($x);
    return $x;
}

sub get_1{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 1);
}

sub get_2{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 2);
}

sub get_3{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 3);
}

sub get_4{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 4);
}

sub fitness{
    my($genes) = @_;
    my $s = NUMBERS;
    my $fitness = -1 * (length($s) -1);
    my @operands;
    for my $gene (@{$genes}){
        if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
            push @operands, $gene-&gt;($s);
            return -1 * NUMBERS if length($s) &lt; $i;
            $s = substr($s, $i) if length($s) &gt;= $i;
        }
    }
    $s = NUMBERS;
    for(my $i = 0; $i &lt; @operands - 1; $i++){
        if($operands[$i] == ($operands[$i + 1] - 1)){
            $fitness++;
            my $chars = length($operands[$i]);
            $s = substr($s, $chars);
        }
    }
    if($operands[@operands - 1] &amp;&amp; $operands[@operands - 2]){
    if($operands[@operands - 1] == ($operands[@operands - 2] + 1)){
        my $chars = length($operands[@operands - 1]);
        $s = substr($s, $chars);
    }
    }
    $fitness *= length($s);
    return $fitness;
}

sub terminate{
    my($aig) = @_;
    my $top_individual = $aig-&gt;getFittest();
    if($top_individual-&gt;score == THRESHOLD){
        my $genes = $top_individual-&gt;genes();
        my $s = NUMBERS;
        my @operands;
        for my $gene (@{$genes}){
            if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
                push @operands, $gene-&gt;($s);
                $s = substr($s, $i);
            }
        }
        print join(",", @operands) . "\n";
        return true;
    }
    print NUMBERS . "\n";
    return true;
}

MAIN:{
    my $aig = new AI::Genetic(
        -fitness    =&gt; \&amp;fitness,
        -type       =&gt; "listvector",
        -population =&gt; 50000,
        -crossover  =&gt; 0.9,
        -mutation   =&gt; 0.1,
        -terminate  =&gt; \&amp;terminate,
    );
    my $genes = [];
    for (0 .. 7){
        push @{$genes}, [\&amp;get_1, \&amp;get_2, \&amp;get_3, \&amp;get_4, \&amp;no_op],
    }
    $aig-&gt;init(
        $genes
    );
    $aig-&gt;evolve("tournamentUniform", 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1,2,3,4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is slightly similar to the 
&lt;a href="https://adamcrussell.livejournal.com/15036.html"&gt;Only 100, please&lt;/a&gt; task from Challenge
044. In that previous task we are given a string of numbers and asked to split the string
with only + or - operations to arrive at a value of 100. Here we must similarly split
the string of numbers, but the criteria is different. Here we need to assemble the string
into numbers that differ only by 1, if possible.&lt;/p&gt;

&lt;p&gt;As done in that previous challenge we use a not so brutish, yet forceful, approach 
using &lt;a href="https://metacpan.org/pod/AI::Genetic"&gt;AI::Genetic&lt;/a&gt;. In this way our program learns
the best way to achieve our goal given a fitness function which allows it to evaluate
different splitting patterns and smartly choose the next attempt.&lt;/p&gt;

&lt;p&gt;While avoiding evaluating a great many possible combinations, I must admit to a certain 
brutishness here in that I did not spend much time tuning the parameters used. Also, 
the &lt;code&gt;get_&lt;/code&gt; functions will not scale very well for very long strings. It would be possible
to generate these functions in a loop using a functional programming style currying 
approach dependent on the length of the input string. Imagine an input of 1 followed by 
999 0s, then a 1 followed by 998 0s and final 1. This use of AI::Genetic would certainly 
work with such an input given proper &lt;code&gt;get_&lt;/code&gt; functions, very many of which would be quickly
be lost in the evolutionary dust, so to speak.&lt;/p&gt;

&lt;p&gt;The use of function references for the genes is not something I am aware of outside of my
own usage. I like to call this a &lt;em&gt;Functional Genome&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to find out if the given number $N is 
such that sum of squares of all digits is a perfect square. Print 1 if it is otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;

sub sum_squares{
    my($n) = @_;
    my @digits = split(//, $n);
    my $sum = 0;
    map { $sum += ($_ ** 2) } @digits;
    return (ceil(sqrt($sum)) == floor(sqrt($sum)));
}

MAIN:{
    my($N);
    $N = 34;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 50;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 52;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This task is well suited for Perl. We can make quick work of what might be a heavier lift
in other languages by &lt;code&gt;split&lt;/code&gt;-ting the number into individual digits and then using a 
&lt;code&gt;map&lt;/code&gt; to perform the summing of the squares. The &lt;a href="https://perldoc.perl.org/POSIX"&gt;POSIX&lt;/a&gt;
module provides convenient &lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt; functions for checking to see if the result
is a perfect square.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-116/"&gt;Challenge 116&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-044/"&gt;Challenge 044 | Only 100, please&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc116</id>
    <published>2021-06-13T21:17:00-04:00</published>
    <updated>2021-06-13T21:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#515 - Events and blog posts</title>
    <link rel="alternate" href="http://perlweekly.com/archive/515.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>As I can see <a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the cloud</a> starts tomorrow. I am a bit confused as don't remember a lot of promotion of the event.</p>
<p>Some people complain that the content created by the Perl Weekly Challenge has flooded the Perl Weekly Newsletter. I'd say if there was more Perl content outside of the PWC that we can share then we could consider reducing the amount of space the PWC takes up.</p>
<p>BTW that reminds me, I think the <a href="https://perlweekly.com/events.html">events</a> page and the events section at the bottom of the newsletter is shrinkig as the event organizers rarely send updates. I guess having these links did not bring them visitors.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/515.html</id>
    <published>2021-06-07T10:00:00Z</published>
    <updated>2021-06-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 115</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/05#pwc115" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of strings. Write a script to find out if the given strings can be
chained to form a circle. Print 1 if found otherwise 0. A string $S can be put before 
another string $T in circle if the last character of $S is same as first character of $T.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub build_graph{
    my @words;
    my %first_letter_name;
    my $graph = new Graph();
    while(my $s = &lt;DATA&gt;){
        chomp($s);
        my $first_letter = substr($s, 0, 1);
        if($first_letter_name{$first_letter}){
            push @{$first_letter_name{$first_letter}}, $s;
        }
        else{
            $first_letter_name{$first_letter} = [$s];
        }
        push @words, $s;
    }
    for my $word (@words){
        $graph-&gt;add_vertex($word) if !$graph-&gt;has_vertex($word);
        my $child_nodes = $first_letter_name{substr($word, -1)};
        for my $n (@{$child_nodes}){
            $graph-&gt;add_vertex($n) if !$graph-&gt;has_vertex($n);
            $graph-&gt;add_weighted_edge($word, $n, (-1 * length($n))) if !$graph-&gt;has_edge($word, $n);
            $graph-&gt;delete_edge($word, $n) if $graph-&gt;has_a_cycle();
        }
    }
    return $graph;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ ]" if @a == 1;
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]" if @a &gt; 1;
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = build_graph();
    my @cc = $graph-&gt;weakly_connected_components();
    print "1\n" if @cc == 1;
    print "0\n" if @cc != 1;
    display_graph($graph);
}

__DATA__
ab
bea
cd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
+----+     +-----+
| ab | ==&gt; | bea |
+----+     +-----+
+----+
| cd | ==&gt;
+----+
$ perl perl/ch-1.pl
1
+-----+     +-----+     +----+
| dea | ==&gt; | abc | ==&gt; | cd |
+-----+     +-----+     +----+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is very similar to the 
&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt; task from Challenge
025. This task is actually a part of that previous challenge in that here we do not need
to compute the longest possible chain of strings; we just need to confirm that the chain
exists.&lt;/p&gt;

&lt;p&gt;The approach here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read in the words and construct the directed graph
&lt;/li&gt;
&lt;li&gt;check to see that the number of &lt;em&gt;connected components&lt;/em&gt; is one. If so, print 1. Otherwise
print 0.
&lt;/li&gt;
&lt;li&gt;display the graph (an optional data visualization step)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function used to determine the number of connected components is 
&lt;code&gt;weakly_connected_components()&lt;/code&gt;. This is because the chain is constructed as a directed
graph and the idea of a connected component is defined for undirected graphs. Weakly
connected components are determined by whether or not the nodes are connected if we ignore
the direction of the edges. This is what we want for our use case here, as opposed to
&lt;em&gt;strongly connected components&lt;/em&gt;. To determine strongly connected components we would
need bi-directional edges for each link in the chain. No need to overcomplicate this with
extra edges...the desired result is obtained just fine as is!&lt;/p&gt;

&lt;p&gt;In the example output the first run shows two connected components, therefor no chain
exists. In the second output the chain is shown, there is one connected component.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of positive integers (0-9), single digit. Write a script to find the
largest multiple of 2 that can be formed from the list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub largest_multiple_2{
    my @numbers = @_;
    return unless grep { $_ % 2 == 0 } @numbers;
    my @sorted = sort {$b &lt;=&gt; $a} @numbers;
    if(@sorted &gt;= 2){
        my $ultima = @sorted[@sorted - 1];
        if($ultima % 2 != 0){
            my $swap_index = -1;
            for(my $i = @sorted - 2; $i &gt;= 0; $i--){
                $swap_index = $i if $sorted[$i] % 2 == 0;
                last if $swap_index &gt; 0;
            }
            $sorted[@sorted - 1] = $sorted[$swap_index];
            $sorted[$swap_index] = $ultima;
        }
    }
    return join("", @sorted);
}

MAIN:{
    my @N;
    @N = (1, 0, 2, 6);
    print largest_multiple_2(@N) . "\n";
    @N = (1, 4, 2, 8);
    print largest_multiple_2(@N) . "\n";
    @N = (4, 1, 7, 6);
    print largest_multiple_2(@N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6210
8412
7614
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Suppose we did not have the "multiple of 2" restriction and instead had to arrange a list
of numbers to have maximal value when concatenated together. The solution, then, would be
to sort the numbers in descending order and concatenate the digits in this sorted order.&lt;/p&gt;

&lt;p&gt;Here we can still use that same logic but more care is needed. &lt;/p&gt;

&lt;p&gt;First, let's remind ourselves that we can check to see if any number is a multiple of 2 by
checking if it's rightmost digit is a multiple of 2 (including 0).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to make sure we have at least one digit which is a multiple of 2. If not, then
there is no need to continue.
&lt;/li&gt;
&lt;li&gt;Sort the numbers, but then inspect the final digit in descending order. Is it a multiple
of 2? If so, then we are done!
&lt;/li&gt;
&lt;li&gt;If the final digit is not a multiple of 2 then search the sorted list starting from the
final digit and working "upwards". We had previously made sure we had at least one 
multiple of 2 so we are certain to find one. When we find it we need to swap it with the 
final digit to insure that the entire number itself is a multiple of 2.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115/"&gt;Challenge 115&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/WeaklyConnectedComponent.html"&gt;Weakly Connected Component&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc115</id>
    <published>2021-06-05T23:34:00-04:00</published>
    <updated>2021-06-05T23:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
