<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-25T16:40:34Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76055472</id>
        <re:rank scheme="https://stackoverflow.com">-1</re:rank>
        <title type="text">Issue with Perl Scripts / XML [closed]</title>
            <category scheme="https://stackoverflow.com/tags" term="xml"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>JeyJim</name>
            <uri>https://stackoverflow.com/users/1633936</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76055472/issue-with-perl-scripts-xml"/>
        <published>2023-04-19T14:03:49Z</published>
        <updated>2023-04-25T14:34:20Z</updated>
        <summary type="html">
            &lt;p&gt;I'm fairly new at Perl / XML and i got assign the task to migrate from one server to another some of the perl functionality that we use in our application, i was able to migrate part of it (create and excel file) but i can't get the part to actually parse an excel file done...&lt;br /&gt;
I keep getting this error no matter what modules i installed in my perl/site/lib folder..&lt;/p&gt;
&lt;p&gt;Software error:
not well-formed (invalid token) at line 1, column 3, byte 3 at C:/Strawberry/perl/site/lib/XML/Parser.pm line 187.
at C:\inetpub\wwwroot\cgi-bin\carestreamhealth\importParts_test2test.pl line 255.&lt;/p&gt;
&lt;p&gt;I'm at a lost on why this is not working, we have a current instance with the same scripts but running different perl (Active State) and it does work.. Problem with that is that we need to migrate to a windows server 2019 and we are not allow to install active state, we need to use strawberry perl 5.32.1&lt;/p&gt;
&lt;p&gt;any help will be appreciate it&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76100953</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Handling CRLF in substitution and split in Perl</title>
            <category scheme="https://stackoverflow.com/tags" term="csv"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="text"/>
            <category scheme="https://stackoverflow.com/tags" term="newline"/>
        <author>
            <name>Thomas</name>
            <uri>https://stackoverflow.com/users/11148823</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76100953/handling-crlf-in-substitution-and-split-in-perl"/>
        <published>2023-04-25T12:03:20Z</published>
        <updated>2023-04-25T13:52:56Z</updated>
        <summary type="html">
            &lt;p&gt;I need to process many files (with CRLF line endings) that look like that:&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;$ cat -v file1.txt
1$XXX$ZZZ$$$$$$$$^M
2$AAA$BBB$$$$$$$$^M

$ cat -v file2.txt
1$4668$$$^M
2$46$$$^M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drop the last &lt;code&gt;$&lt;/code&gt; sign,&lt;/li&gt;
&lt;li&gt;change &lt;code&gt;$&lt;/code&gt; to &lt;code&gt;,&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;enclose each field in double quote,&lt;/li&gt;
&lt;li&gt;rename the files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Desired output:&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;$ cat -v newname1.csv
&amp;quot;1&amp;quot;,&amp;quot;XXX&amp;quot;,&amp;quot;ZZZ&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;^M
&amp;quot;2&amp;quot;,&amp;quot;AAA&amp;quot;,&amp;quot;BBB&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;^M

$ cat -v newname2.csv
&amp;quot;1&amp;quot;,&amp;quot;4668&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;^M
&amp;quot;2&amp;quot;,&amp;quot;46&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;^M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My try is as follows:&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;

my %inputs = qw(
  file1 file1.txt
  file2 file2.txt
);

my %outputs = qw(
  file1 newname1.csv
  file2 newname2.csv
);

for my $key (keys %inputs) {
  
  open my $in, '&amp;lt;', $inputs{$key} or die $!;
  open my $out, '&amp;gt;', $outputs{$key} or die $!;
  
  while(&amp;lt;$in&amp;gt;) {
    local $, = ',';
    local $\ = &amp;quot;\n&amp;quot;;
    s/\$$//;
    my @row = split /\$/;
    print $out map qq(&amp;quot;$_&amp;quot;), @row;
  }
  
  close $in or die $!;
  close $out or die $!;
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;$ cat -v newname1.csv
&amp;quot;1&amp;quot;,&amp;quot;XXX&amp;quot;,&amp;quot;ZZZ&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;^M
&amp;quot;^M
&amp;quot;2&amp;quot;,&amp;quot;AAA&amp;quot;,&amp;quot;BBB&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;^M
&amp;quot;^M

$ cat -v newname2.csv
&amp;quot;1&amp;quot;,&amp;quot;4668&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;^M
&amp;quot;^M
&amp;quot;2&amp;quot;,&amp;quot;46&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;^M
&amp;quot;^M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I guess the issue is due to CRLF line endings. I tried:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to change &lt;code&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;&amp;lt;:crlf&amp;quot;&lt;/code&gt; to open my files,&lt;/li&gt;
&lt;li&gt;many regex (e.g. &lt;code&gt;\$\r\n&lt;/code&gt;, which gives the same output, or &lt;code&gt;\$\R&lt;/code&gt;, which removes all the empty trailing columns).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How can I fix my code? (This is my 1st time with Perl.)&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <author>
      <name>/u/iamalnewkirk</name>
      <uri>https://www.reddit.com/user/iamalnewkirk</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://metacpan.org/release/AWNCORP/Venus-2.50"&gt;New in Venus release 2.50&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#work&lt;/p&gt; &lt;p&gt;Easily fork and manage forked processes.&lt;/p&gt; &lt;p&gt;``` use Venus &amp;#39;work&amp;#39;;&lt;/p&gt; &lt;p&gt;my $parent = work sub { warn time while sleep 1; };&lt;/p&gt; &lt;p&gt;sleep 5; $parent-&amp;gt;killall(&amp;#39;int&amp;#39;); ```&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#{check,assert}&lt;/p&gt; &lt;p&gt;Easily validate values using type expressions.&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;check&amp;#39;;&lt;/p&gt; &lt;p&gt;my $check = check(rand, &amp;#39;float&amp;#39;);&lt;/p&gt; &lt;h1&gt;true&lt;/h1&gt; &lt;p&gt;my $check = check([&amp;#39;random&amp;#39;, rand], &amp;#39;tuple[string, float]&amp;#39;);&lt;/p&gt; &lt;h1&gt;true&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#unpack&lt;/p&gt; &lt;p&gt;Easily unpack and validate positional arguments.&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;unpack&amp;#39;;&lt;/p&gt; &lt;p&gt;my $unpack = unpack rand, time;&lt;/p&gt; &lt;h1&gt;$unpack-&amp;gt;checks(&amp;#39;number&amp;#39;);&lt;/h1&gt; &lt;h1&gt;false&lt;/h1&gt; &lt;h1&gt;$unpack-&amp;gt;checks(&amp;#39;float&amp;#39;);&lt;/h1&gt; &lt;h1&gt;false&lt;/h1&gt; &lt;h1&gt;$unpack-&amp;gt;checks(&amp;#39;float&amp;#39;, &amp;#39;number&amp;#39;);&lt;/h1&gt; &lt;h1&gt;true&lt;/h1&gt; &lt;h1&gt;my ($float, $number) = $unpack-&amp;gt;types(&amp;#39;float&amp;#39;, &amp;#39;number&amp;#39;);&lt;/h1&gt; &lt;h1&gt;($rand, $time)&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Export {json,yaml,perl} utility functions&lt;/p&gt; &lt;p&gt;Easily encode and decode JSON, YAML, and Perl values.&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;json&amp;#39;;&lt;/p&gt; &lt;p&gt;my $decode = json &amp;#39;decode&amp;#39;, &amp;#39;{&amp;quot;codename&amp;quot;:[&amp;quot;Ready&amp;quot;,&amp;quot;Robot&amp;quot;],&amp;quot;stable&amp;quot;:true}&amp;#39;;&lt;/p&gt; &lt;h1&gt;{ codename =&amp;gt; [&amp;quot;Ready&amp;quot;, &amp;quot;Robot&amp;quot;], stable =&amp;gt; 1 }&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/iamalnewkirk"&gt; /u/iamalnewkirk &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12yj1jn/new_in_venus_250/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12yj1jn/new_in_venus_250/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12yj1jn</id>
    <link href="https://www.reddit.com/r/perl/comments/12yj1jn/new_in_venus_250/"/>
    <updated>2023-04-25T13:12:27+00:00</updated>
    <published>2023-04-25T13:12:27+00:00</published>
    <title>New in Venus 2.50</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76092519</id>
        <re:rank scheme="https://stackoverflow.com">2</re:rank>
        <title type="text">Suppress / catch / trap error message on failed fork open() in Perl</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>DevSolar</name>
            <uri>https://stackoverflow.com/users/60281</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76092519/suppress-catch-trap-error-message-on-failed-fork-open-in-perl"/>
        <published>2023-04-24T13:38:48Z</published>
        <updated>2023-04-25T07:33:43Z</updated>
        <summary type="html">
            &lt;p&gt;Consider:&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;

my $command = &amp;quot;nosuchcommand&amp;quot;

my $rc = open( my $fh, &amp;quot;-|&amp;quot;, &amp;quot;$command&amp;quot; );

if ( ! defined( $rc ) )
{
    print &amp;quot;My own error message\n&amp;quot;;
}
else
{
    system( &amp;quot;ps -p $rc&amp;quot; );
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expected output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My own error message
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observed output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Can't exec &amp;quot;nosuchcommand&amp;quot;: No such file or directory at ./mcre line 8.
My own error message
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How can I catch / trap / suppress the error message generated by Perl on a failing open-pipe&lt;/strong&gt; (in favor of my own error handling)?&lt;/p&gt;
&lt;p&gt;Further observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If I &lt;code&gt;open( my $fh, &amp;quot;-|&amp;quot;, &amp;quot;$command 2&amp;gt;&amp;amp;1&amp;quot; );&lt;/code&gt;, I get the expected output. But in case of &lt;strong&gt;success&lt;/strong&gt; of &lt;code&gt;$command&lt;/code&gt;, I would get the &lt;code&gt;STDERR&lt;/code&gt; of &lt;code&gt;$command&lt;/code&gt; mixed into &lt;code&gt;STDOUT&lt;/code&gt;, and I don't want that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If I &lt;code&gt;open( my $fh, &amp;quot;-|&amp;quot;, &amp;quot;$command 2&amp;gt;/dev/null&amp;quot; );&lt;/code&gt;, I get this:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    PID TTY          TIME CMD
  15143 pts/0    00:00:00 sh &amp;lt;defunct&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the &lt;em&gt;specific&lt;/em&gt; redirecion of &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; (instead of &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;) changed the return value of &lt;code&gt;open&lt;/code&gt;... this was somewhat surprising, but is not the core of my question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On IPC::Run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This has been suggested in two answers by now. I understand that it might be the &amp;quot;correct&amp;quot; answer in the general case, but would &lt;em&gt;really&lt;/em&gt; prefer not to (as &lt;code&gt;IPC::Run&lt;/code&gt; is not an option for me on one very significant target platform that comes without it and does not offer an easy way to install it).&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76048997</id>
        <re:rank scheme="https://stackoverflow.com">2</re:rank>
        <title type="text">Replace next line after match in perl</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Zilore Mumba</name>
            <uri>https://stackoverflow.com/users/2856552</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76048997/replace-next-line-after-match-in-perl"/>
        <published>2023-04-18T21:01:26Z</published>
        <updated>2023-04-24T19:27:36Z</updated>
        <summary type="html">
            &lt;p&gt;All the searches I have made give me answers in sed or awk, but I want the pure perl solution.
I the text below I want to modify the next line after a match.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opts@FieldTitle = &amp;quot;mcape&amp;quot;
opts@MainTitle  = &amp;quot;MCAPE: NODA~C~Valid:&amp;quot; + dystr(it) + &amp;quot;/&amp;quot; + mnstr(it) + &amp;quot;/&amp;quot; + yrstr(it) + &amp;quot;Issued:&amp;quot; + dystr(0) + &amp;quot;/&amp;quot; + mnstr(0) + &amp;quot;/&amp;quot; + yrstr(0)
opts@ContourParameters = (/ 500., 3000., 250./)

opts@FieldTitle = &amp;quot;mcin&amp;quot;
opts@MainTitle  = &amp;quot;MCIN: NODA~C~Valid:&amp;quot; + dystr(it) + &amp;quot;/&amp;quot; + mnstr(it) + &amp;quot;/&amp;quot; + yrstr(it) + &amp;quot;Issued:&amp;quot; + dystr(0) + &amp;quot;/&amp;quot; + mnstr(0) + &amp;quot;/&amp;quot; + yrstr(0)
opts@ContourParameters = (/ 0., 125., 25./)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I read the whole file at once with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@scrptlines=&amp;lt;$NCLSCRPT&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I have other replacements to make with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foreach $scrptlines (@scrptlines){
$scrptlines =~ s/DATADir =.*/DATADir = &amp;quot;$INPUT_DIR[$kk]\/&amp;quot;/g; #e.g.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I come to the above lines, I have tried&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if($scrptlines =~ m/opts\@FieldTitle = &amp;quot;mcape&amp;quot;/){
next unless($scrptlines =~ m/opts\@MainTitle/);
$scrptlines =~ s/opts\@MainTitle  =.*/opts\@MainTitle  = &amp;quot;MCIN: NODA~C~Valid:&amp;quot; + dystr(it) + &amp;quot;\/&amp;quot; + mnstr(it) + &amp;quot;\/&amp;quot; + yrstr(it) + &amp;quot;Issued:&amp;quot; + dystr(0) + &amp;quot;\/&amp;quot; + mnstr(0) + &amp;quot;\/&amp;quot; + yrstr(0)/;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then tried&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    if($scrptlines =~ m/opts\@FieldTitle = &amp;quot;mcape&amp;quot;/){
$scrptlines =~/opts@FieldTitle = &amp;quot;mcape&amp;quot;/{n;s\/opts\@MainTitle  =.*/opts@MainTitle  = &amp;quot;MCIN: NODA~C~Valid:&amp;quot; + dystr(it) + &amp;quot;\/&amp;quot; + mnstr(it) + &amp;quot;\/&amp;quot; + yrstr(it) + &amp;quot;Issued:&amp;quot; + dystr(0) + &amp;quot;\/&amp;quot; + mnstr(0) + &amp;quot;\/&amp;quot; + yrstr(0)/};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both don't work, plus other tries I made.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75983186</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Install &amp; update a Perl module as "universal" (x86_64, arm64)?</title>
            <category scheme="https://stackoverflow.com/tags" term="macos"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="x86-64"/>
            <category scheme="https://stackoverflow.com/tags" term="cpan"/>
            <category scheme="https://stackoverflow.com/tags" term="apple-silicon"/>
        <author>
            <name>l --marc l</name>
            <uri>https://stackoverflow.com/users/3103448</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75983186/install-update-a-perl-module-as-universal-x86-64-arm64"/>
        <published>2023-04-11T06:59:38Z</published>
        <updated>2023-04-24T18:19:42Z</updated>
        <summary type="html">
            &lt;p&gt;Is is possible to install and update Perl (CPAN) modules with universal (x86_64, arm64) architecture support? If yes, then how?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;background&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On an arm-based macOS computer, a Perl CPAN module can be installed for exactly one designated architecture as follows:&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;sudo cpan -i Encode
### equivalent since `-arm64` is the native processor in this situation:
sudo arch -arm64 cpan -i Encode

file /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle
# /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle:
#     Mach-O 64-bit bundle arm64

sudo arch -x86_64 cpan -i Encode

file /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle
# /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle:
#     Mach-O 64-bit bundle x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice, however,  &lt;code&gt;perl&lt;/code&gt; itself is a &amp;quot;universal binary&amp;quot;:&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;file /usr/bin/perl

# /usr/bin/perl: Mach-O universal binary with 2 architectures: 
#    [x86_64:Mach-O 64-bit executable x86_64] 
#    [arm64e:Mach-O 64-bit executable arm64e]
# /usr/bin/perl (for architecture x86_64):  
#     Mach-O 64-bit executable x86_64
# /usr/bin/perl (for architecture arm64e):  
#     Mach-O 64-bit executable arm64e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The XOR of either one architecture or the other presents a conflict when native and non-native applications share the same Perl dependency.&lt;/em&gt; For example, &lt;a href="https://wiki.gnucash.org/wiki/Online_Quotes#Installing_Finance::Quote_on_macOS" rel="nofollow noreferrer"&gt;GnuCash Finance::Quote&lt;/a&gt; &lt;em&gt;does not&lt;/em&gt; run on natively on Arm while &lt;a href="https://www.tug.org/mactex/" rel="nofollow noreferrer"&gt;MacTeX LaTeX Live Update&lt;/a&gt; can run natively on either Intel or Arm processors. Both applications use the &lt;a href="https://metacpan.org/pod/Encode" rel="nofollow noreferrer"&gt;Pearl Encode module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The application log error message will be one of the following if the required architecture version is not found:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;'/Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64'))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;'/Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64'))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;Note: A workaround for running the applications is to install the common Perl module dependancy for the &lt;code&gt;x86_64&lt;/code&gt; architecture, and then run the universal capable application in Rosetta2 (x86_64) mode.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Additional Findings&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;cc option '-bundle'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cc -bundle&lt;/code&gt; was found in the saved install log.&lt;/p&gt;
&lt;pre class="lang-text prettyprint-override"&gt;&lt;code&gt;rm -f blib/arch/auto/Encode/Encode.bundle
cc  -bundle -undefined dynamic_lookup  Encode.o def_t.o encengine.o  -o blib/arch/auto/Encode/Encode.bundle 
chmod 755 blib/arch/auto/Encode/Encode.bundle
…
Manifying 18 pod documents
Files found in blib/arch: installing files in blib/lib into architecture dependent library tree
Installing /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;man cc&lt;/code&gt; and &lt;code&gt;cc --help&lt;/code&gt; do not provide any developer information about a &lt;code&gt;-bundle&lt;/code&gt; option for the cc clang LLVM compiler. So, it's not clear what &lt;code&gt;-bundle&lt;/code&gt; is actually doing, or how a Perl novice might use this piece of information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lipo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It would appear that the &amp;quot;safest way to build Universal binaries is to compile the modules separately and then use &lt;code&gt;lipo&lt;/code&gt; to merge the resulting &lt;code&gt;.bundle&lt;/code&gt; files.&amp;quot; See: &lt;a href="https://metacpan.org/dist/ExtUtils-FakeConfig/source/lib/Config_u.pm" rel="nofollow noreferrer"&gt;meta::cpan Config_u.pm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Apple article &lt;a href="https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary" rel="nofollow noreferrer"&gt;&amp;quot;Building a Universal macOS Binary&amp;quot;&lt;/a&gt; provides a such multi-step example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following example shows a makefile that compiles a single-source file twice—once for each architecture. It then creates a universal binary by merging the resulting executable files together with the &lt;code&gt;lipo&lt;/code&gt; tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="lang-makefile prettyprint-override"&gt;&lt;code&gt;x86_app: main.c
    $(CC) main.c -o x86_app -target x86_64-apple-macos10.12
arm_app: main.c
    $(CC) main.c -o arm_app -target arm64-apple-macos11
universal_app: x86_app arm_app
    lipo -create -output universal_app x86_app arm_app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lipo&lt;/code&gt; requires the individual architecture files as inputs to &lt;code&gt;-create&lt;/code&gt; the universal file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;file Encode.bundle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A search and review for all &lt;code&gt;Encode.bundle&lt;/code&gt; files found a mixture of universal and non-universal binaries.&lt;/p&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;find / -name &amp;quot;Encode.bundle&amp;quot;

file /Applications/FreeCAD_0.20.app/Contents/Resources/lib/perl5/5.32/core_perl/auto/Encode/Encode.bundle
file /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle
file /System/Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle
file /System/Library/Perl/5.34/darwin-thread-multi-2level/auto/Encode/Encode.bundle
file /Users/USERNAME/.cpan/build/Encode-3.19-0/blib/arch/auto/Encode/Encode.bundle

# /Applications/FreeCAD_0.20.app/…/core_perl/auto/Encode/Encode.bundle: 
#     Mach-O 64-bit bundle x86_64

# /Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle: 
#     Mach-O 64-bit bundle x86_64

# /System/Library/Perl/5.30/darwin-thread-multi-2level/auto/Encode/Encode.bundle: 
#     Mach-O universal binary with 2 architectures: 
#         [x86_64:Mach-O 64-bit bundle x86_64] 
#         [arm64e:Mach-O 64-bit bundle arm64e]

# /System/Library/Perl/5.34/darwin-thread-multi-2level/auto/Encode/Encode.bundle:
#     Mach-O universal binary with 2 architectures: 
#         [x86_64:Mach-O 64-bit bundle x86_64]
#         [arm64e:Mach-O 64-bit bundle arm64e]

# /Users/USERNAME/.cpan/build/Encode-3.19-0/blib/arch/auto/Encode/Encode.bundle: 
#     Mach-O 64-bit bundle x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;observations:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;file /System/Library/Perl/…Encode.bundle&lt;/code&gt; shows that universal binary use does indeed exist for Pearl.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file /Library/Perl/…Encode.bundle&lt;/code&gt; indicate that a user install and/or update may be masking the universal &lt;code&gt;/System/Library/Perl/…Encode.bundle&lt;/code&gt; from shared application use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;objectives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally, an overall solution would:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;be generally enough to not require modification of each individual module which gets added.&lt;/li&gt;
&lt;li&gt;work for both an initial module installation and any subsequent updates.&lt;/li&gt;
&lt;li&gt;does not create dependency conflicts with in the Perl installation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;possible approaches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whether implicitly or expressly invoked, &lt;code&gt;lipo&lt;/code&gt; appear to be needed to create the univeral binary.&lt;/p&gt;
&lt;p&gt;Just thinking out-loud about some approach directions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;modify the Perl make file? (how would one safely do this? is this a practical approach?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create an updated version of &lt;a href="https://metacpan.org/pod/Config_u" rel="nofollow noreferrer"&gt;Config_u&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="lang-sh prettyprint-override"&gt;&lt;code&gt;perl -MConfig_u Makefile.PL
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;have parallel &lt;code&gt;/Perl/arm64/…&lt;/code&gt; and &lt;code&gt;/Perl/x86_64/…&lt;/code&gt; trees which are then &lt;code&gt;lipo&lt;/code&gt; merged into some &lt;code&gt;/Perl/some_universal_version/…&lt;/code&gt; via a script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Could this be a easy as &lt;code&gt;sudo arch -x86_64 -arm64 -arm64e cpan -i Encode&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        </summary>
    </entry>
  <entry>
    <title>Perl Weekly #613 - CPAN Dashboard</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-613-cpan-dashboard-4knm" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/613.html"&gt;Perl Weekly 613&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;On the &lt;a href="https://cpan-digger.perlmaven.com/"&gt;CPAN Digger&lt;/a&gt; one of the links I display is the link to the &lt;a href="https://cpandashboard.com/"&gt;CPAN Dashboard&lt;/a&gt; of each author. Assuming they have configured it. Every time I look at the CPAN Digger I feel surprised that so few of the CPAN authors have set up the Dashboard. Even among the active ones.&lt;/p&gt;

&lt;p&gt;If you are a CPAN author, tell me, is it because you don't know about the dashboard, you don't know how to set it up, or that it does not provide you enough value? The first we solved now. For the second, there is a &lt;a href="https://cpandashboard.com/add/"&gt;page&lt;/a&gt; explaining it. In case you don't feel its value, let me know what would be interesting to you in such a dashboard?&lt;/p&gt;

&lt;p&gt;On Wednesday we are celebrating the 75th &lt;a href="https://en.wikipedia.org/wiki/Independence_Day_(Israel)"&gt;Independence Day of Israel&lt;/a&gt; which is preceded by two memorial days. As someone eloquently put it: Jews have two memorial days &lt;a href="https://en.wikipedia.org/wiki/Yom_HaZikaron"&gt;Yom HaZikaron&lt;/a&gt; (Memorial Day for the Fallen Soldiers of the Wars of Israel and Victims of Actions of Terrorism) to remind us of the cost of having Israel and &lt;a href="https://en.wikipedia.org/wiki/Yom_HaShoah"&gt;Yom HaShhoah&lt;/a&gt; (Holocaust Memorial Day) to remind us the cost of not. The memorial days are hard, but the Independence day is a huge event celebrating having our own country again after 2000 years of not having it.&lt;/p&gt;

&lt;p&gt;Enjoy your Week!&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Gabor Szabo.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://tprc2023.sched.com/"&gt;The Perl and Raku Conference 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The Schedule of the conference is now available.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9"&gt;Open Source Development Course for Perl developers - 2023.01&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-104.html"&gt;This week in PSC (104)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://two-wrongs.com/why-perl"&gt;Why Perl?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This post by Chris from Stockholm, Sweden, dated more than a month into the future tries to sell you Perl. The columns in the table: Ubiquity, Scales up, Compatibility, Shell scripts, Extensible&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/22/mojolicious-removing-session/"&gt;Removing a session in Mojolicious&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The server can ask the browser to remove the session, by getting rid of the cookie. On the other hand, if for some reason the browser is not collaborating (e.g. refusing to delete the session cookie), then the session will stick up to the expiration time.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"&gt;RSRU Release 3.2 - A static catalogue website and blog builder written in Perl&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"&gt;Quick tip: run local perl code using podman to run a perl docker container&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You could use it to generate a web site using GitHub Actions and host it on GitHub pages. Who will write the tutorial for that? (Side note, I don't see any tests in that repository.)&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214"&gt;The Weekly Challenge - 214&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks "Rank Score" and "Collect Points". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-213"&gt;RECAP - The Weekly Challenge - 213&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Fun Sort" and "Shortest Route" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/fun-route.html"&gt;Fun Route&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes as simple as grep can be very effective as shown by Arne. Nice work, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-213-the-simple-and-the-hard-17o3"&gt;The Simple and the Hard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I respect the honesty about the help with ChatGPT. As always the case, you still need human to get the final working code. Thanks for sharing the experience with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/20/pwc213-fun-sort/"&gt;PWC213 - Fun Sort&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Two different approaches, one for Perl and another for Raku. The end result looks so simple.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/21/pwc213-shortest-route/"&gt;PWC213 - Shortest Route&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Dijkstra’s algorithm explained in plain english. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-213/james-smith#readme"&gt;Another one rides the bus!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As always we got the most efficient solutions using the power of Perl. There is so much to learn every week. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-213-fun-sort.html"&gt;Perl Weekly Challenge 213: Fun Sort&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Cool attempt to use special comparison subroutine and that too in both Perl and Raku. Very smart, well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/04/17/PerlWeeklyChallenge213.html"&gt;from here to there!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice little one-liner in Raku and a very brave attempt to deal with shortest route task. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/04/17/PWC213/"&gt;Perl Weekly Challenge 213&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Perfect use case for one-liner and we do get one, thank you Luis.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-213/matthias-muth#readme"&gt;Wow: Another oneliner! But also a complete BFS...!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A thorough discussion about the shortest route task. You really don't want to skip, highly recommended.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/213/2"&gt;Evens go first and untangling the route&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice demo of the complicated task as well as detailed analysis. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/04/robbie-hatleys-perl-solutions-to-weekly_23.html"&gt;The Weekly Challenge #213&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Well documented and explained solutions. Nice and easy to follow too. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/04/The_Weekly_Challenge_213__Shortest_Fun.html"&gt;Shortest Fun&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Showing off the power of Raku language is discussed in the blog. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/sorting-routes-595b"&gt;Sorting Routes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Like always we have bonus Python solution as well as Perl. Using all the tricks in the book to get the result. Well done.&lt;/p&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  Events
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://tprc2023.sched.com/"&gt;The Perl and Raku Conference 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;July 11-13, 2023, Toronto, Canada&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/6ej"&gt;Perl to Node Cross-training? Yes Please! UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/plp"&gt;Bold, beautiful, and… brainy? Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With all the knowledge in your big, beautiful brain, it’s time to join a company that appreciates your breadth of experience. Our client provides online trading services and with offices in Dubai, Malta, and Malaysia, they’ve got the global reach that may provide the challenge you’re looking for. They know that a seasoned Perl pro is just what their team needs as they expand.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/62p"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-613-cpan-dashboard-4knm</id>
    <published>2023-04-24T05:54:15Z</published>
    <updated>2023-04-24T05:54:15Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Tracciatore - starting point</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/24/tracciatore-starting-point/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://codeberg.org/polettix/tracciatore">Tracciatore</a> is available and can be used as a template/starting point.</p>
</blockquote>

<p>I’m slowly advancing in the data collection <em>thinghie</em> (last time I wrote
about it in <a href="/ETOOBUSY/2023/04/15/data-collection-update/">Data collection update</a>).</p>

<p>The code I wrote so far is available in <a href="https://codeberg.org/polettix/tracciatore">tracciatore</a>.</p>

<p>It’s mostly <em>boilerplate</em> at the moment, not because it does not have
anything, but because there’s the authentication apparatus, being able to
rely upon Postgresql and SQLite depending on the environment, and so on. For
this reason, the status as of <a href="https://codeberg.org/polettix/tracciatore/src/tag/skf-candidate">skf-candidate</a> can be of more general
interest, as it contains this scaffolding which might be adapted to other
purposes with minimal changes (mainly in the naming of things).</p>

<p>As the tag suggests, I’m planning on turning this into a proper minting
module for <a href="https://etoobusy.polettix.it/2020/06/22/skfold-simple-files/">skfold</a> (much like <a href="/ETOOBUSY/2022/06/24/skfold-module-mojo/">A skfold module for Mojolicious applications</a>).</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/24/tracciatore-starting-point/</id>
    <published>2023-04-24T06:00:00+02:00</published>
    <updated>2023-04-24T06:00:00+02:00</updated>
    <category term="web"/>
    <category term="perl"/>
    <category term="tracking"/>
  </entry>
  <entry>
    <title>PWC 213 A fun sort and a run short</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-213-a-fun-sort-and-a-run-short-41d5" type="text/html"/>
    <content type="html">&lt;p&gt;Week 213 (!) of the &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/"&gt;Perl Weekly Challenge&lt;/a&gt; poses two problems that are good exercises in Perl programming.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1: Fun Sort
&lt;/h2&gt;

&lt;p&gt;This sort is fun in the sense that it's pretty easy to do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given a list of positive integers.&lt;br&gt;
Write a script to sort the all even integers first, &lt;br&gt;
then all odds in ascending order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are three approaches:  (1) sort the whole list with a comparison function that moves all the evens to the front of the list; (2) first separate the odds and evens, sort each group, and then combine the groups; or (3) first sort the whole list, then divide into evens and odds.&lt;/p&gt;

&lt;p&gt;My preference is to do it in one sort, but it might be more efficient to partition the list first and do two smaller sorts. The sort efficiency is probably &lt;em&gt;O(n log(n))&lt;/em&gt;.  Sorting two lists of size &lt;em&gt;n/2&lt;/em&gt; will have fewer operations. For instance, if &lt;em&gt;n&lt;/em&gt;=50, 50log(50) =~ 196, but 2*(25log(25)) =~ 161.  This isn't going to be significant until &lt;em&gt;n&lt;/em&gt; gets very large.&lt;/p&gt;

&lt;h3&gt;
  
  
  One sort to rule them all
&lt;/h3&gt;

&lt;p&gt;In Perl, &lt;code&gt;sort&lt;/code&gt; is builtin, and operates by applying a comparison function between pairs of elements, denoted &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;. The comparison function needs to return one of three values: less than 0 if &lt;code&gt;$a&lt;/code&gt; sorts below &lt;code&gt;$b&lt;/code&gt;; 0 if &lt;code&gt;$a&lt;/code&gt; == &lt;code&gt;$b&lt;/code&gt;; or greater than 0 if &lt;code&gt;$a&lt;/code&gt; sorts above &lt;code&gt;$b&lt;/code&gt;.  Perl has a three-way comparison operator that does this for numbers, the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operator. A very basic numeric sort supplies the comparison function as the first argument to &lt;code&gt;sort&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to be able to determine odd and even.  Mathematically, it's the modulo operator.  &lt;code&gt;n mod 2&lt;/code&gt; is 0 for an even number and 1 for an odd number.  Programmatically, it's the least significant bit of an integer. &lt;code&gt;n&amp;amp;1&lt;/code&gt; will be 0 for an even number and 1 for an odd number.&lt;/p&gt;

&lt;p&gt;We need a comparison which has two conditions:  first, any even number sorts below any odd number; otherwise, sort numerically.  This is expressed with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The check for even and odd will push the even numbers below the odd numbers because the conditions evaluate like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;a&amp;amp;1&lt;/th&gt;
&lt;th&gt;b&amp;amp;1&lt;/th&gt;
&lt;th&gt;a&amp;amp;1 &amp;lt;=&amp;gt; b&amp;amp;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;even&lt;/td&gt;
&lt;td&gt;even&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;even&lt;/td&gt;
&lt;td&gt;odd&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;odd&lt;/td&gt;
&lt;td&gt;even&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;odd&lt;/td&gt;
&lt;td&gt;odd&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If that is enough to determine an order, the &lt;code&gt;||&lt;/code&gt; operator will not even evaluate its right side, but if both numbers are odd or both even, then the second comparison will determine the order.&lt;/p&gt;

&lt;h3&gt;
  
  
  Divide and conquer
&lt;/h3&gt;

&lt;p&gt;The second approach is to partition the list into odds and evens before sorting.  The easiest way to select a subset of a list is to use &lt;code&gt;grep&lt;/code&gt;.  We already know how to determine odd and even: &lt;em&gt;n&amp;amp;1&lt;/em&gt; will give us either a 0 or a 1, which are conviently equivalent to &lt;em&gt;false&lt;/em&gt; and &lt;em&gt;true&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would be fun (and this is Fun Sort, after all) to do it with one pass.  We can do that by using the 0 or 1 as index to an array of lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;# [0] is evens, [1] is odds&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$group&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would be programmer-efficient, but somewhat less fun, to use a library module that already does list partitioning.  That would be the &lt;code&gt;part&lt;/code&gt; function from &lt;code&gt;List::MoreUtils&lt;/code&gt;.  The whole &lt;a href="https://metacpan.org/pod/List::MoreUtils"&gt;List::MoreUtils&lt;/a&gt; module is pretty fun, actually, full of useful functions that you didn't know you needed and won't have to write yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;funSort_partB&lt;/span&gt;&lt;span class="err"&gt;(@&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;MoreUtils&lt;/span&gt; &lt;span class="sx"&gt;qw/part/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$sub&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$sub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$sub&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;part&lt;/code&gt; will return a list of array references.  If there are no even numbers or no odd numbers, one of the partitions may be empty, in which case &lt;code&gt;part&lt;/code&gt; has an &lt;em&gt;undef&lt;/em&gt; element, not an empty list. Hence, the &lt;code&gt;next&lt;/code&gt; statement.  If we pass that point, then &lt;em&gt;$sub&lt;/em&gt; is an array reference, and &lt;code&gt;$sub-&amp;gt;@*&lt;/code&gt; is the de-reference; that is, the list of array elements.  The result of the sort gets pushed to the end of the &lt;code&gt;@sorted&lt;/code&gt; array -- recall that multiple elements can be pushed at once.&lt;/p&gt;

&lt;h3&gt;
  
  
  Conquer and divide
&lt;/h3&gt;

&lt;p&gt;The final approach is to do a simple numeric sort, then partition the resulting sorted list.  We've already lined up all the pieces we need from the first two approaches.  We can use &lt;code&gt;List::Util::part&lt;/code&gt; after the sort, and then the only missing piece is how to flatten lists of lists into one.&lt;br&gt;
One way is by de-referencing the lists and using a loop to push the elements, as we did in the function above.  The other, less fun, way is to reach for another library function.  How about &lt;em&gt;List::Flatten::flat&lt;/em&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;funSort_part&lt;/span&gt;&lt;span class="err"&gt;(@&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;MoreUtils&lt;/span&gt; &lt;span class="sx"&gt;qw/part/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Flatten&lt;/span&gt; &lt;span class="sx"&gt;qw/flat/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;flat&lt;/span&gt; &lt;span class="nv"&gt;part&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perl is still fun, though. Here we've chained several array operations to avoid having to write loops.  From right to left,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;sort&lt;/em&gt; is a simple numeric sort&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;part&lt;/em&gt; separates into even and odd&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;flat&lt;/em&gt; joins the array references into one list&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;grep&lt;/em&gt; takes care of the problem that one of the sub-lists might be empty&lt;/li&gt;
&lt;li&gt;wrapping the whole thing in square brackets creates a new array reference that can be returned&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The complete code solution is on &lt;a href="https://github.com/boblied/perlweeklychallenge-club/blob/master/challenge-213/bob-lied/perl/ch-1.pl"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 2: Shortest route
&lt;/h2&gt;

&lt;p&gt;Our problem states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given a list of bidirectional routes defining a network&lt;br&gt;
of nodes, as well as source and destination node numbers.&lt;br&gt;
Write a script to find the route from source to destination&lt;br&gt;
that passes through fewest nodes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and it offers as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: @routes = ([1,2,3], [4,5,6], [3,8,9], [7,8])
       $source = 1
       $destination = 7
Output: (1,2,3,8,7)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because of the way the problem is presented, I thought first of intersection of sets, but that's a red herring. If we put all the nodes together and draw edges between them, we'll see that the routes are just subsets of a bigger graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiD0MaIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vt0yuxm3vaw3twacbib.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiD0MaIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vt0yuxm3vaw3twacbib.jpg" alt="Union of the routes forms a graph" width="422" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if that's what we have, then this is a classic computer science algorithm problem:  shortest path in an undirected graph.  There's an intuitive solution for it, breadth-first search.  It involves going one step out from the start node to all of its neighbers, and then going one step to each of their neighbors, and so on until the destination node is found (or not).&lt;/p&gt;

&lt;p&gt;It's not a terribly hard algorithm, but not one I can trivially construct from scratch.  Although Google is your friend here, I took the opportunity for nostalgia.  There's still a copy of Sedgewick's "Algorithms" on my shelf.  It's the 2nd edition from 1988, helpfully presenting the algorithms in Pascal, which was probably a good idea at the time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight pascal"&gt;&lt;code&gt;&lt;span class="k"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;listbfs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxV&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;procedure&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;repeat&lt;/span&gt;
      &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;^.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
          &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;^.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;^.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;^.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="n"&gt;queueempty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;queueinitialize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that was amusing, but we have Perl.&lt;/p&gt;

&lt;p&gt;The trick to graph algorithms is finding the right data structure to represent the graph. I decided to make a little &lt;em&gt;Moo&lt;/em&gt; class for the graph, where the graph is represented as a collection of nodes in a hash. Each  node has an associated list (array reference) of nearest neighbors.  The graph is built up from  methods that add nodes and edges.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;addNode&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;addEdge&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;v1&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;v2&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$neighbors&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$v2&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$v2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$neighbors&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the graph from the example, we're going to end up with an adjacency list that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;adj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iterating over the routes in the input will build up the graph using the object methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Graph&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$route&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$segments&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@$route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@$route&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@$route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$v2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To move across pairs of nodes in a route, I used an idiom to shift the the first element (&lt;code&gt;$v1&lt;/code&gt;), and then continue to shift a second element (&lt;code&gt;$v2&lt;/code&gt;) until the array is used up.  There's a function &lt;code&gt;slide&lt;/code&gt; in the &lt;em&gt;List::MoreUtils&lt;/em&gt; module that embodies this algorithm that I could have used.&lt;/p&gt;

&lt;p&gt;Notice also that the &lt;code&gt;addEdge&lt;/code&gt; method returns a reference to the object, which allows me to chain method calls.  Since the graph is bi-directional, I want to add an edge from &lt;code&gt;$v1&lt;/code&gt; to &lt;code&gt;$v2&lt;/code&gt; and vice versa.  The chaining idiom makes it (in my opinion) readable to express that.&lt;/p&gt;

&lt;p&gt;Once the nodes and edges are available in the graph, we can use the breadth-first search algorithm as the function to find a route.  The algorithm uses an array as a queue (which Perl makes easy to do with its push and shift functions).  As each node is encountered, its neighbors are put on the queue for checking later. Once we stumble over the destination node, we're done.&lt;/p&gt;

&lt;p&gt;The main complication in the breadth-first algorithm is that we don't want to get stuck in a loop, so we keep a list of nodes that have already been processed.  I use a hash, &lt;code&gt;%seen&lt;/code&gt;, for this purpose because it has fast look-up for node names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;self&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;destination&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$source&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$destination&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Breadth-first search&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$source&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%seen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@queue&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neighbor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$seen&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$neighbors&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$neighbor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$destination&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;@path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$neighbor&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$neighbor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$seen&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I return an empty list to indicate "not found".  The challenge asks us to report -1 for that, but that's easily done in the calling code.  Consistently returning a list simplifies the testing code. The complete code solution is on &lt;a href="https://github.com/boblied/perlweeklychallenge-club/blob/master/challenge-213/bob-lied/perl/ch-2.pl"&gt;Github&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-213-a-fun-sort-and-a-run-short-41d5</id>
    <published>2023-04-24T02:13:36Z</published>
    <updated>2023-04-24T02:13:36Z</updated>
    <category term="perl"/>
    <category term="pwc"/>
    <category term="perlweeklychalleng"/>
  </entry>
  <entry>
    <author>
      <name>/u/ghiste</name>
      <uri>https://www.reddit.com/user/ghiste</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi,&lt;/p&gt; &lt;p&gt;is &lt;a href="https://metacpan.org/dist/Net-DBus/view/lib/Net/DBus/Tutorial/ExportingObjects.pod"&gt;https://metacpan.org/dist/Net-DBus/view/lib/Net/DBus/Tutorial/ExportingObjects.pod&lt;/a&gt; still the way to implement a dbus-service in perl?&lt;/p&gt; &lt;p&gt;I ask because I cannot find any examples and this seems to be almost 20 years old...&lt;/p&gt; &lt;p&gt;Many thanks!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/ghiste"&gt; /u/ghiste &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12wwxwy/implementing_a_dbusservice/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12wwxwy/implementing_a_dbusservice/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12wwxwy</id>
    <link href="https://www.reddit.com/r/perl/comments/12wwxwy/implementing_a_dbusservice/"/>
    <updated>2023-04-24T00:49:50+00:00</updated>
    <published>2023-04-24T00:49:50+00:00</published>
    <title>implementing a dbus-service</title>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/4ddebfb8085bf6bee593c51c87c2ebf3c3ab40f1</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/4ddebfb8085bf6bee593c51c87c2ebf3c3ab40f1"/>
    <title>
        Import perl5361delta.pod
    </title>
    <updated>2023-04-23T15:53:14Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Import perl5361delta.pod&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/80dd7d12cd5a63ed7d3debba97a6270d8bee49db</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/80dd7d12cd5a63ed7d3debba97a6270d8bee49db"/>
    <title>
        Update Module-CoreList with data for 5.36.1
    </title>
    <updated>2023-04-23T15:49:36Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Update Module-CoreList with data for 5.36.1&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/f697403705516c0f4fb724da1c3a1aefd36695be</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/f697403705516c0f4fb724da1c3a1aefd36695be"/>
    <title>
        Tick off release
    </title>
    <updated>2023-04-23T15:32:29Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Tick off release&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/de4f07d22e3f5e8e876e1a1bd778ecde3474f452</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/de4f07d22e3f5e8e876e1a1bd778ecde3474f452"/>
    <title>
        Add epigraph for 5.36.1
    </title>
    <updated>2023-04-23T15:29:52Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Add epigraph for 5.36.1&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/71c8bee6cd0e754396aabbfed533c17a4db15572</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/71c8bee6cd0e754396aabbfed533c17a4db15572"/>
    <title>
        5.36.1 today
    </title>
    <updated>2023-04-23T14:11:38Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;5.36.1 today&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #213 - The Simple and the Hard</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-213---the-simple-and-the-hard.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11081</id>
    <published>2023-04-23T07:45:17Z</published>
    <updated>2023-04-23T08:08:23Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="sortdijkstrarouteschatgptai" label="#sort #dijkstra #routes #chatgpt #ai" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Hey everybody, back this week with a couple really interesting weekly challenge tasks. The first one is extremely simple, like one-liner simple, and the second one is quite complex and nearly 90 lines long.</p>

<h4>Challenge #1 - Fun Sort</h4>

<p>This was fun, it's in the name. This challenge took me about 5 minutes. Sort the input, split into even and odd arrays and put them together to print out. Pretty self-explanatory.</p>

<pre><code>#!/usr/bin/perl
use strict;
use v5.24;

my (@even, @odd);
$_ % 2 ? push @odd, $_ : push @even, $_ for sort @ARGV;
say @even, @odd;
</code></pre>

<h4>Challenge #2 - Not Fun Dijkstra</h4>

<p>I still don't know how Dijkstra came up with his algorithm after 20 minutes of thinking and it took me hours to understand it, but I'm glad he did. I had never heard of Dijkstra's algorithm, so originally I had no idea how to solve this challenge. To give me a starting point, I asked ChatGPT what it thought, and it said "Use Dijkstra's algorithm" and gave me an implementation to play with. As before, I wrote this code by hand, but it helped me a lot with the algorithmic design. Also, the AI seemed to fail badly when I asked it for additional error-checking if there was no route, so I designed and wrote that part entirely on my own.</p>

<p>If you haven't checked out the ways AI can assist your workflow and productivity, I highly recommend it. There are valid concerns about it, obviously, and I would never recommend copying and pasting code from it without understanding what it's doing, but it can help you understand a complex algorithm and how you would implement it.</p>

<p>Essentially, the theory behind Dijkstra's algorithm is not to traverse recursively, but to always follow whatever the shortest untraveled route attached to the source is. If you're always following whatever the shortest route is, the first route that reaches the destination will be the shortest route to the destination. Then you maintain a list of arrows (a hash of each node in our case) pointing backwards to the source node along that shortest route.</p>

<p>Here's the code:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;
use List::Util 'min';

my @routes = ([1, 2, 6], [5, 6, 7]);
my $source = 1;
my $destination = 7;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1, 2, 3], [4, 5, 6]);
$source = 2;
$destination = 5;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1,2,3], [4,5,6], [3,8,9], [7,8]);
$source = 1;
$destination = 7;

print_dijkstra(\@routes, $source, $destination);

sub print_dijkstra {
    my $result = dijkstra(@_);
    if ($result == -1) {
        say -1;
    } else {
        my @route = @{$result};
        for (@route) {
            $_ != $route[$#route] ? print "$_, " : print "$_\n"
        }
    }
}

sub dijkstra {
    my ($routeref, $source, $destination) = @_;
    my @routes = @{$routeref};

    my %adjacency;
    for my $route (@routes) {
        my @nodes = @$route;
        for my $i (0 .. $#nodes - 1) {
            push @{$adjacency{$nodes[$i]}}, $nodes[$i + 1];
            push @{$adjacency{$nodes[$i + 1]}}, $nodes[$i];
        }
    }

    my %distance;
    my %visited;
    my %previous;
    $distance{$source} = 0;

    my %new_visits;
    while (keys %visited != keys %adjacency) {
        my $node = min(grep {!defined $visited{$_}} keys %distance);
        $visited{$node} = 1;

        for my $adjacent (@{$adjacency{$node}}) {
            my $total_distance = $distance{$node} + 1;
            if (!defined $distance{$adjacent} || $total_distance &lt; $distance{$adjacent}) {
                $distance{$adjacent} = $total_distance;
                $previous{$adjacent} = $node;
            }
        }

        if (%visited == %new_visits &amp;&amp; !$visited{$destination}) {
            return -1;
        } elsif ($visited{$destination}) {
            last;
        }
        %new_visits = %visited;
    }

    my @route;
    my $node = $destination;
    while ($node != $source) {
        unshift @route, $node;
        $node = $previous{$node};
    }
    unshift @route, $source;

    return \@route;
}
</code></pre>

<p>The first iteration through, the second example ended up in an endless loop because it kept trying to reach the separate set of nodes and couldn't. Because of that, I had to write the no route code properly, which essentially checks whether we're making any progress through the route or not. If not and we've reached a dead-end, we return a -1 and leave. However, the third example shows that we also need to handle the case where there are nodes that can't be reached but we have visited the destination, so that's included in the no route code.</p>

<h4>Conclusion</h4>

<p>This week we had a very simple challenge and a tough one. I had fun with the first one (albeit briefly) and I learned a lot from the second one, including the power of AI. It's a very powerful tool to have on hand. Have a good week and if I have time next week I'll see you then with the next challenge!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Sorting Routes</title>
    <link rel="alternate" href="https://dev.to/simongreennet/sorting-routes-595b" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 213
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-213/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Fun Sort
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive integers.</p>

<p>Write a script to sort the all even integers first then all odds in ascending order</p>

<h3>
  
  
  My solution
</h3>

<p>This is relatively straight forward. A less experienced developer might sort all the even numbers first and then all the odd numbers, and that would (IMHO) be a perfectly acceptable solution for this task.</p>

<p>However, we know that both Perl and Python allow us to use a custom sorting method. In Perl, this is expressed as <code>{ $a % 2 &lt;=&gt; $b % 2 || $a &lt;=&gt; $b }</code>. <code>$a</code> and <code>$b</code> are global variables that the <a href="https://perldoc.perl.org/functions/sort">sort</a> function uses to achieve this. <code>&lt;=&gt;</code> provides a numerical comparison between two values, returning <code>1</code> if <code>$b</code> is greater, <code>-1</code> if <code>$a</code> is greater, or <code>0</code> if they are the same.</p>

<p>Python is a little more straight forward with it's lambda function. The syntax used here is <code>array.sort(key=lambda x: (x % 2, x))</code>, which means we first search by evenness (evens first), and then numerically.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 1 2 3 4 5 6
2, 4, 6, 1, 3, 5

<span class="nv">$ </span>./ch-1.py 1 2
2, 1

<span class="nv">$ </span>./ch-1.py 1
1

</code></pre>

</div>



<h2>
  
  
  Task 2: Shortest Route
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of bidirectional routes defining a network of nodes, as well as source and destination node numbers.</p>

<p>Write a script to find the route from source to destination that passes through fewest nodes.</p>

<h3>
  
  
  My solution
</h3>

<p>This task on the other hand is much more complex. I have submitted only a Python solution. A Perl solution would simply be a transliteration of it.</p>

<p>To begin with I parse the input. The first value is a JSON string converted into a list of lists, while the second and third values represent the start and end numbers.</p>

<p>I then loop through each number in the node until I find the starting points, there may be more than one. For each starting point, I call the recursive function <code>find_routers</code> with the original list, the starting point, and the end value.</p>

<p>The <code>find_routers</code> recursive function has the original list of nodes, a list of nodes/position pairs of routes we've visited, and the target number. For the current node, I go backwards from the current number, and then go forwards. For each new number, I call the <code>find_pairs</code> function to see any connected nodes that we have not already seen. For each occurrence of this, I call the recursive function again, updating the second value with what node/position pairs we have already seen.</p>

<p>The return of this function is a list of node/number pairs. We keep a track of the solution of the shortest one found so far, and update it if the current one is shorter.</p>

<p>If there is no solution, I print <code>-1</code> and exit. The last step is to convert the list of node/position pairs into a list of numbers, and display the new list.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,6], [5,6,7]]"</span> 1 7
1,2,6,7

<span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,3], [4,5,6]]"</span> 2 5
<span class="nt">-1</span>

<span class="nv">$ </span>./ch-2.py <span class="s2">"[[1,2,3], [4,5,6], [3,8,9], [7,8]]"</span> 1 7
1,2,3,8,7

<span class="nv">$ </span>./ch-2.py <span class="s1">'[[1,2,3,4,5,6,7], [7,1], [9,1]]'</span> 6 9
6,7,1,9
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/sorting-routes-595b</id>
    <published>2023-04-23T07:51:49Z</published>
    <updated>2023-04-23T07:51:49Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <author>
      <name>/u/singe</name>
      <uri>https://www.reddit.com/user/singe</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Containerisation is useful for packaging code and for creating predictable dev/prod environments. &lt;/p&gt; &lt;p&gt;Building on an old (pre-pandemic) post by our friend &lt;a href="/u/szabgab"&gt;/u/szabgab&lt;/a&gt; (&lt;a href="https://perlmaven.com/getting-started-with-perl-on-docker"&gt;https://perlmaven.com/getting-started-with-perl-on-docker&lt;/a&gt;), you can use &lt;em&gt;podman&lt;/em&gt; (which does not require root permission) to run your local code instead of docker (which requires root).&lt;/p&gt; &lt;p&gt;&lt;a href="https://docs.podman.io/en/latest/"&gt;https://docs.podman.io/en/latest/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Debian 11 (and derivatives such as Ubuntu 22.04) has podman in its packages. The version of podman is not the latest, but it will work with docker containers.&lt;/p&gt; &lt;p&gt;Install podman the usual Debian way. &lt;/p&gt; &lt;p&gt;You will need to create the file &lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/.config/containers/registries.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The file should contain something like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[registries.search] registries = [&amp;quot;registry.access.redhat.com&amp;quot;, &amp;quot;quay.io&amp;quot; , &amp;quot;docker.io&amp;quot;] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Pull the perl container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman pull docker.io/amd64/perl &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;List the image ID for the container:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman images &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run some local perl code (replace the variables below):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;podman run -v `pwd`:/opt $IMAGEID perl /opt/$MYCODEFILE &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Enjoy using podman with a perl. And thanks to Gabor as always. ^_^&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/singe"&gt; /u/singe &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12vv8g4</id>
    <link href="https://www.reddit.com/r/perl/comments/12vv8g4/quick_tip_run_local_perl_code_using_podman_to_run/"/>
    <updated>2023-04-23T04:15:44+00:00</updated>
    <published>2023-04-23T04:15:44+00:00</published>
    <title>Quick tip: run local perl code using podman to run a perl docker container</title>
  </entry>
  <entry>
    <title>Ahoy is an amazing YouTuber</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/23/ahoy-amazing-youtuber/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://www.youtube.com/watch?v=i4EFkspO5p4">This video</a> from YouTuber <a href="https://www.youtube.com/@XboxAhoy">Ahoy</a> is amazing.</p>
</blockquote>

<p>I sometimes end my delirant ramblings here with <em>have fun!</em> or something
like this.</p>

<p><a href="https://www.youtube.com/watch?v=i4EFkspO5p4">This video</a> is one of the most perfect interpretations of having fun.
<a href="https://www.youtube.com/@XboxAhoy">Ahoy</a> re-creates a digital image from the eighties starting from a photo,
because the digital version is lost for good. I can only wonder how much
time it took to do that, while collecting pieces on the way to produce an
amazing video with the usual amazing comment.</p>

<p>Kudos!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/23/ahoy-amazing-youtuber/</id>
    <published>2023-04-23T06:00:00+02:00</published>
    <updated>2023-04-23T06:00:00+02:00</updated>
    <category term="passion"/>
    <category term="youtube"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #213 - The Simple and the Hard</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-213-the-simple-and-the-hard-17o3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hey everybody, back this week with a couple really interesting weekly challenge tasks. The first one is extremely simple, like one-liner simple, and the second one is quite complex and nearly 90 lines long.</p>

<h4>
  
  
  Challenge #1 - Fun Sort
</h4>

<p>This was fun, it's in the name. This challenge took me about 5 minutes. Sort the input, split into even and odd arrays and put them together to print out. Pretty self-explanatory.</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl
use strict;
use v5.24;

my (@even, @odd);
$_ % 2 ? push @odd, $_ : push @even, $_ for sort @ARGV;
say @even, @odd;
</code></pre>

</div>
<h4>
  
  
  Challenge #2 - Not Fun Dijkstra
</h4>

<p>I still don't know how Dijkstra came up with his algorithm after 20 minutes of thinking and it took me hours to understand it, but I'm glad he did. I had never heard of Dijkstra's algorithm, so originally I had no idea how to solve this challenge. To give me a starting point, I asked ChatGPT what it thought, and it said "Use Dijkstra's algorithm" and gave me an implementation to play with. As before, I wrote this code by hand, but it helped me a lot with the algorithmic design. Also, the AI seemed to fail badly when I asked it for additional error-checking if there was no route, so I designed and wrote that part entirely on my own.</p>

<p>If you haven't checked out the ways AI can assist your workflow and productivity, I highly recommend it. There are valid concerns about it, obviously, and I would never recommend copying and pasting code from it without understanding what it's doing, but it can help you understand a complex algorithm and how you would implement it.</p>

<p>Essentially, the theory behind Dijkstra's algorithm is not to traverse recursively, but to always follow whatever the shortest untraveled route attached to the source is. If you're always following whatever the shortest route is, the first route that reaches the destination will be the shortest route to the destination. Then you maintain a list of arrows (a hash of each node in our case) pointing backwards to the source node along that shortest route.</p>

<p>Here's the code:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;
use List::Util 'min';

my @routes = ([1, 2, 6], [5, 6, 7]);
my $source = 1;
my $destination = 7;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1, 2, 3], [4, 5, 6]);
$source = 2;
$destination = 5;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1,2,3], [4,5,6], [3,8,9], [7,8]);
$source = 1;
$destination = 7;

print_dijkstra(\@routes, $source, $destination);

sub print_dijkstra {
    my $result = dijkstra(@_);
    if ($result == -1) {
        say -1;
    } else {
        my @route = @{$result};
        for (@route) {
            $_ != $route[$#route] ? print "$_, " : print "$_\n"
        }
    }
}

sub dijkstra {
    my ($routeref, $source, $destination) = @_;
    my @routes = @{$routeref};

    my %adjacency;
    for my $route (@routes) {
        my @nodes = @$route;
        for my $i (0 .. $#nodes - 1) {
            push @{$adjacency{$nodes[$i]}}, $nodes[$i + 1];
            push @{$adjacency{$nodes[$i + 1]}}, $nodes[$i];
        }
    }

    my %distance;
    my %visited;
    my %previous;
    $distance{$source} = 0;

    my %new_visits;
    while (keys %visited != keys %adjacency) {
        my $node = min(grep {!defined $visited{$_}} keys %distance);
        $visited{$node} = 1;

        for my $adjacent (@{$adjacency{$node}}) {
            my $total_distance = $distance{$node} + 1;
            if (!defined $distance{$adjacent} || $total_distance &lt; $distance{$adjacent}) {
                $distance{$adjacent} = $total_distance;
                $previous{$adjacent} = $node;
            }
        }

        if (%visited == %new_visits &amp;&amp; !$visited{$destination}) {
            return -1;
        } elsif ($visited{$destination}) {
            last;
        }
        %new_visits = %visited;
    }

    my @route;
    my $node = $destination;
    while ($node != $source) {
        unshift @route, $node;
        $node = $previous{$node};
    }
    unshift @route, $source;

    return \@route;
}
</code></pre>

</div>

<p>The first iteration through, the second example ended up in an endless loop because it kept trying to reach the separate set of nodes and couldn't. Because of that, I had to write the no route code properly, which essentially checks whether we're making any progress through the route or not. If not and we've reached a dead-end, we return a -1 and leave. However, the third example shows that we also need to handle the case where there are nodes that can't be reached but we have visited the destination, so that's included in the no route code.</p>

<h4>
  
  
  Conclusion
</h4>

<p>This week we had a very simple challenge and a tough one. I had fun with the first one (albeit briefly) and I learned a lot from the second one, including the power of AI. It's a very powerful tool to have on hand. Have a good week and if I have time next week I'll see you then with the next challenge!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-213-the-simple-and-the-hard-17o3</id>
    <published>2023-04-23T03:10:35Z</published>
    <updated>2023-04-23T03:10:35Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="dijkstra"/>
    <category term="chatgpt"/>
  </entry>
  <entry>
    <author>
      <name>/u/niceperl</name>
      <uri>https://www.reddit.com/user/niceperl</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/niceperl"&gt; /u/niceperl &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12vhaxt/cdxli_10_great_cpan_modules_released_last_week/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12vhaxt</id>
    <link href="https://www.reddit.com/r/perl/comments/12vhaxt/cdxli_10_great_cpan_modules_released_last_week/"/>
    <updated>2023-04-22T19:57:47+00:00</updated>
    <published>2023-04-22T19:57:47+00:00</published>
    <title>(cdxli) 10 great CPAN modules released last week</title>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8746119144817944657</id>
    <published>2023-04-22T21:56:00.000+02:00</published>
    <updated>2023-04-22T21:56:56.827+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxli) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002003&lt;/strong&gt; on 2023-04-19, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002002 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Module-Build-Tiny-0.043' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.043&lt;/strong&gt; on 2023-04-19, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.039 was 8 years, 6 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230420&lt;/strong&gt; on 2023-04-20, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230320 was 30 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAREKR/Pod-Parser-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Parser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Modules for parsing/translating POD format documents
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2023-04-22, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.65 was 11 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAREKR'&gt;MAREKR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 62 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 23 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.971002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971002&lt;/strong&gt; on 2023-04-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9705 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;v9.2.0&lt;/strong&gt; on 2023-04-17, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: v9.0.0 was 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DANBERR'&gt;DANBERR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-22, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8746119144817944657/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html" title="(cdxli) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7735320647946670040</id>
    <published>2023-04-22T21:52:00.001+02:00</published>
    <updated>2023-04-22T21:52:55.784+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliii) metacpan weekly report - Getopt::Long &amp; Dash</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 75&lt;/p&gt;
&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Getopt::Long"&gt;Getopt::Long&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&amp;amp;&lt;b&gt; &lt;a href="https://metacpan.org/module/Dash"&gt;Dash&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/22 19:49:48 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Modify" target="_blank"&gt;Env::Modify&lt;/a&gt; - affect Perl %ENV from subshell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Win32::Service" target="_blank"&gt;POE::Component::Win32::Service&lt;/a&gt; - A POE component that provides non-blocking access to Win32::Service.
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Rest::Client::Builder" target="_blank"&gt;Rest::Client::Builder&lt;/a&gt; - Base class to build simple object-oriented REST clients&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword::Win32" target="_blank"&gt;Term::ReadPassword::Win32&lt;/a&gt; - Asking the user for a password (for Win32)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Win32::PEPM" target="_blank"&gt;Acme::Win32::PEPM&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=159)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Devel" target="_blank"&gt;Catalyst::Devel&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+2=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Perl::Releases" target="_blank"&gt;CPAN::Perl::Releases&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses::UI" target="_blank"&gt;Curses::UI&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+3=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env" target="_blank"&gt;Env&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Event" target="_blank"&gt;Event&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Fennec" target="_blank"&gt;Fennec&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Super" target="_blank"&gt;Forks::Super&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Frost" target="_blank"&gt;Frost&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Gepok" target="_blank"&gt;Gepok&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+3=117)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=63)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Request::FromCurl" target="_blank"&gt;HTTP::Request::FromCurl&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::CPP" target="_blank"&gt;Inline::CPP&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jmx4perl" target="_blank"&gt;jmx4perl&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::projectroot" target="_blank"&gt;lib::projectroot&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=162)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=102)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=97)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::LvalueAttribute" target="_blank"&gt;MooX::LvalueAttribute&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Fastly" target="_blank"&gt;Net::Fastly&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN2" target="_blank"&gt;OrePAN2&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Piper" target="_blank"&gt;Piper&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sepia" target="_blank"&gt;Sepia&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ProgressBar" target="_blank"&gt;String::ProgressBar&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tangram" target="_blank"&gt;Tangram&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::File" target="_blank"&gt;Test::File&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=183)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/TUWF" target="_blank"&gt;TUWF&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32" target="_blank"&gt;Win32&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Daemon" target="_blank"&gt;Win32::Daemon&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Exe" target="_blank"&gt;Win32::Exe&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Mechanize::NotepadPlusPlus" target="_blank"&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::OLE" target="_blank"&gt;Win32::OLE&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Packer" target="_blank"&gt;Win32::Packer&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Pipe" target="_blank"&gt;Win32::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::ShellQuote" target="_blank"&gt;Win32::ShellQuote&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7735320647946670040/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html" title="(dliii) metacpan weekly report - Getopt::Long &amp; Dash"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8619909316773646777</id>
    <published>2023-04-22T21:48:00.000+02:00</published>
    <updated>2023-04-22T21:48:13.429+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;
Build date: 2023-04-22 19:47:15 GMT&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76030424" target="_blank"&gt;How do I quote the special character + and a one-letter-plus-two-digit string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76027200" target="_blank"&gt;How can I refer to blessed block of code using reference to the object?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76052075" target="_blank"&gt;Difference between calling named anonymous function and regular subroutine&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76048997" target="_blank"&gt;Replace next line after match in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76060678" target="_blank"&gt;Perl - Unexpected behavior: Iterating thru an array "foreach $r (@a)" if iterator $r is changed via regex - the array elements themselves are changed&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8619909316773646777/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html" title="(dlxxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/ThranPoster</name>
      <uri>https://www.reddit.com/user/ThranPoster</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"&gt; &lt;img src="https://external-preview.redd.it/ZQrXOCeeephqfF_6G9l0jDCzAgwoz7LJhUQvNbFOWd8.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=b6f0c78851765a4d2298ed003566481fc9fe48d2" alt="RSRU Release 3.2 - A static catalogue website and blog builder written in Perl" title="RSRU Release 3.2 - A static catalogue website and blog builder written in Perl" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/ThranPoster"&gt; /u/ThranPoster &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://github.com/lordfeck/rsru"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12veimc</id>
    <media:thumbnail url="https://external-preview.redd.it/ZQrXOCeeephqfF_6G9l0jDCzAgwoz7LJhUQvNbFOWd8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b6f0c78851765a4d2298ed003566481fc9fe48d2"/>
    <link href="https://www.reddit.com/r/perl/comments/12veimc/rsru_release_32_a_static_catalogue_website_and/"/>
    <updated>2023-04-22T18:21:30+00:00</updated>
    <published>2023-04-22T18:21:30+00:00</published>
    <title>RSRU Release 3.2 - A static catalogue website and blog builder written in Perl</title>
  </entry>
  <entry>
    <title>Removing a session in Mojolicious</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/22/mojolicious-removing-session/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Just a note about removing sessions in <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>.</p>
</blockquote>

<p>When I wrote <a href="/ETOOBUSY/2023/04/17/no-back-button/">No back button after logout</a>, I forgot to take note of an
interesting fact about removing a session in <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>.</p>

<p>The fact is: you don’t control it from the server side.</p>

<p>I mean, the server can <em>ask</em> the browser to remove the session, by getting
rid of the cookie. On the other hand, if for some reason the browser is not
collaborating (e.g. refusing to delete the session cookie), then the session
will stick up to the expiration time.</p>

<p>This is <em>hardly</em> unexpected in a system that stores sessions completely on
the client side. Still, it surprised me the first time I saw this in action,
so it might surprise others (or me in a few months since now).</p>

<p>If you’re wondering <em>how</em> I was biten by this particular set of teeth, it
suffices to say that <a href="https://curl.se/">curl</a> has <em>two</em> options for dealing with a so-called
<em>cookie jar</em>:</p>

<ul>
  <li>option <code class="language-plaintext highlighter-rouge">-c</code> is the read-write alternative, which complies with what the
server asks to do, and…</li>
  <li>option <code class="language-plaintext highlighter-rouge">-b</code> is the read-only alternative, which disregards requests to do
anything with the cookie, including deletion.</li>
</ul>

<p>So there you go, another way to blow your foot!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/22/mojolicious-removing-session/</id>
    <published>2023-04-22T06:00:00+02:00</published>
    <updated>2023-04-22T06:00:00+02:00</updated>
    <category term="mojolicious"/>
    <category term="web"/>
  </entry>
  <entry>
    <title> This week in PSC (104)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-104.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11080</id>
    <published>2023-04-21T21:09:01Z</published>
    <updated>2023-04-21T21:09:57Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>All three of us met, having skipped last week.</p>

<p>There wasn't much to talk about because code freeze ahead of 5.38 is in
effect, so there isn't much going on.</p>

<ul>
<li><p>We talked further about the upcoming deprecations scheduled for
5.38.0 (smartmatch, tick-as-package-separator), and concluded that
we remain committed to keeping them deprecated on the current
schedule.</p></li>
<li><p>Next week's meeting will be in person in the French city of Lyon.</p></li>
</ul>
]]>
        

    </content>
</entry>
  <entry>
    <title>PWC213 - Shortest Route</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/21/pwc213-shortest-route/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">#213</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of bidirectional routes defining a network of nodes,
as well as source and destination node numbers.</p>

  <p>Write a script to find the route from source to destination that passes
through fewest nodes.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,6], [5,6,7])
       $source = 1
       $destination = 7

Output: (1,2,6,7)

Source (1) is part of route [1,2,6] so the journey looks like 1 -&gt; 2 -&gt; 6
then jump to route [5,6,7] and takes the route 6 -&gt; 7.
So the final route is (1,2,6,7)
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,3], [4,5,6])
       $source = 2
       $destination = 5

Output: -1
</code></pre></div>  </div>

  <p><strong>Example 3:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @routes = ([1,2,3], [4,5,6], [3,8,9], [7,8])
       $source = 1
       $destination = 7
Output: (1,2,3,8,7)

Source (1) is part of route [1,2,3] so the journey looks like 1 -&gt; 2 -&gt; 3
then jump to route [3,8,9] and takes the route 3 -&gt; 8
then jump to route [7,8] and takes the route 8 -&gt; 7
So the final route is (1,2,3,8,7)
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>None, but maybe a curiosity –why are all those called <em>routes</em>?</p>

<h1 id="the-solution">The solution</h1>

<p>Doing a lot of recreational programming made me code ready-made versions of
popular algorithms.</p>

<p>For the <a href="https://www.perl.org/">Perl</a> solution, we’ll leverage the venerable A*. I know, there’s
no good candidate for the heuristic in this case, so it’s basically
Dijkstra’s algorithm.</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">use</span> <span class="nn">Data::</span><span class="nv">Dumper</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@routes</span> <span class="o">=</span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]);</span>
<span class="k">my</span> <span class="nv">$source</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$destination</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$route</span> <span class="o">=</span> <span class="nv">shortest_route</span><span class="p">(</span><span class="o">\</span><span class="nv">@routes</span><span class="p">,</span> <span class="nv">$source</span><span class="p">,</span> <span class="nv">$destination</span><span class="p">)</span> <span class="sr">//</span> <span class="o">[]</span><span class="p">;</span>
<span class="p">{</span> <span class="nb">local</span> <span class="vg">$"</span> <span class="o">=</span> <span class="p">'</span><span class="s1">,</span><span class="p">';</span> <span class="nv">say</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span> <span class="p">?</span> <span class="p">"</span><span class="s2">(</span><span class="si">$route</span><span class="s2">-&gt;@*)</span><span class="p">"</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">shortest_route</span> <span class="p">($routes, $src, $dst) {</span>
   <span class="k">my</span> <span class="nv">$graph</span> <span class="o">=</span> <span class="nv">routes_to_graph</span><span class="p">(</span><span class="nv">$routes</span><span class="p">);</span>
   <span class="k">return</span> <span class="nb">scalar</span> <span class="nv">astar</span><span class="p">(</span>
      <span class="s">start</span> <span class="o">=&gt;</span> <span class="nv">$src</span><span class="p">,</span>
      <span class="s">goal</span>  <span class="o">=&gt;</span> <span class="nv">$dst</span><span class="p">,</span>
      <span class="s">distance</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">},</span>
      <span class="s">successors</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($v) {</span> <span class="nb">keys</span> <span class="nv">$graph</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$v</span><span class="p">}</span><span class="o">-&gt;%*</span> <span class="p">},</span>
      <span class="s">identifier</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($v) {</span> <span class="nv">$v</span> <span class="p">},</span>
   <span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">routes_to_graph</span> <span class="p">($routes) {</span>
   <span class="k">my</span> <span class="nv">%adjacents_for</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$route</span> <span class="p">(</span><span class="nv">$routes</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$prev</span> <span class="o">=</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
         <span class="k">my</span> <span class="nv">$curr</span> <span class="o">=</span> <span class="nv">$route</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
         <span class="nv">$adjacents_for</span><span class="p">{</span><span class="nv">$prev</span><span class="p">}{</span><span class="nv">$curr</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$adjacents_for</span><span class="p">{</span><span class="nv">$curr</span><span class="p">}{</span><span class="nv">$prev</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
         <span class="nv">$prev</span> <span class="o">=</span> <span class="nv">$curr</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="o">\</span><span class="nv">%adjacents_for</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">astar</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">%args</span> <span class="o">=</span> <span class="p">(</span><span class="err">@</span><span class="nv">_</span> <span class="o">&amp;&amp;</span> <span class="nb">ref</span><span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="p">?</span> <span class="nv">%</span><span class="p">{</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span> <span class="p">:</span> <span class="nv">@_</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@reqs</span> <span class="o">=</span> <span class="sx">qw&lt; start goal distance successors &gt;</span><span class="p">;</span>
   <span class="nb">exists</span><span class="p">(</span><span class="nv">$args</span><span class="p">{</span><span class="vg">$_</span><span class="p">})</span> <span class="o">||</span> <span class="nb">die</span> <span class="p">"</span><span class="s2">missing parameter '</span><span class="si">$_</span><span class="s2">'</span><span class="p">"</span> <span class="k">for</span> <span class="nv">@reqs</span><span class="p">;</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$start</span><span class="p">,</span> <span class="nv">$goal</span><span class="p">,</span> <span class="nv">$dist</span><span class="p">,</span> <span class="nv">$succs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@args</span><span class="p">{</span><span class="nv">@reqs</span><span class="p">};</span>
   <span class="k">my</span> <span class="nv">$h</span>     <span class="o">=</span> <span class="nv">$args</span><span class="p">{</span><span class="nv">heuristic</span><span class="p">}</span>  <span class="o">||</span> <span class="nv">$dist</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$id_of</span> <span class="o">=</span> <span class="nv">$args</span><span class="p">{</span><span class="nv">identifier</span><span class="p">}</span> <span class="o">||</span> <span class="k">sub </span><span class="p">{</span> <span class="k">return</span> <span class="p">"</span><span class="si">$_</span><span class="s2">[0]</span><span class="p">"</span> <span class="p">};</span>

   <span class="k">my</span> <span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$gid</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$start</span><span class="p">),</span> <span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$goal</span><span class="p">));</span>
   <span class="k">my</span> <span class="nv">%node_for</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$id</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s">value</span> <span class="o">=&gt;</span> <span class="nv">$start</span><span class="p">,</span> <span class="s">g</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">});</span>
   <span class="k">my</span> <span class="nv">$queue</span> <span class="o">=</span> <span class="nb">bless</span> <span class="p">['</span><span class="s1">-</span><span class="p">',</span> <span class="p">{</span><span class="s">id</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">,</span> <span class="s">f</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">}],</span> <span class="nv">__PACKAGE__</span><span class="p">;</span>

   <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_is_empty</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$cid</span> <span class="o">=</span> <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_dequeue</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">id</span><span class="p">};</span>
      <span class="k">my</span> <span class="nv">$cx</span>  <span class="o">=</span> <span class="nv">$node_for</span><span class="p">{</span><span class="nv">$cid</span><span class="p">};</span>
      <span class="k">next</span> <span class="k">if</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">visited</span><span class="p">}</span><span class="o">++</span><span class="p">;</span>

      <span class="k">my</span> <span class="nv">$cv</span> <span class="o">=</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">value</span><span class="p">};</span>
      <span class="k">return</span> <span class="nv">__unroll</span><span class="p">(</span><span class="nv">$cx</span><span class="p">,</span> <span class="o">\</span><span class="nv">%node_for</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$cid</span> <span class="ow">eq</span> <span class="nv">$gid</span><span class="p">;</span>

      <span class="k">for</span> <span class="k">my</span> <span class="nv">$sv</span> <span class="p">(</span><span class="nv">$succs</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$cv</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$sid</span> <span class="o">=</span> <span class="nv">$id_of</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sv</span><span class="p">);</span>
         <span class="k">my</span> <span class="nv">$sx</span> <span class="o">=</span> <span class="nv">$node_for</span><span class="p">{</span><span class="nv">$sid</span><span class="p">}</span> <span class="o">||=</span> <span class="p">{</span><span class="s">value</span> <span class="o">=&gt;</span> <span class="nv">$sv</span><span class="p">};</span>
         <span class="k">next</span> <span class="k">if</span> <span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">visited</span><span class="p">};</span>
         <span class="k">my</span> <span class="nv">$g</span> <span class="o">=</span> <span class="nv">$cx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">}</span> <span class="o">+</span> <span class="nv">$dist</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$cv</span><span class="p">,</span> <span class="nv">$sv</span><span class="p">);</span>
         <span class="k">next</span> <span class="k">if</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">})</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$g</span> <span class="o">&gt;=</span> <span class="nv">$sx</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">g</span><span class="p">});</span>
         <span class="nv">@</span><span class="p">{</span><span class="nv">$sx</span><span class="p">}{</span><span class="sx">qw&lt; p g &gt;</span><span class="p">}</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$cid</span><span class="p">,</span> <span class="nv">$g</span><span class="p">);</span>    <span class="c1"># p: id of best "previous"</span>
         <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nv">_enqueue</span><span class="p">({</span><span class="s">id</span> <span class="o">=&gt;</span> <span class="nv">$sid</span><span class="p">,</span> <span class="s">f</span> <span class="o">=&gt;</span> <span class="nv">$g</span> <span class="o">+</span> <span class="nv">$h</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sv</span><span class="p">,</span> <span class="nv">$goal</span><span class="p">)});</span>
      <span class="p">}</span> <span class="c1">## end for my $sv ($succs-&gt;($cv...))</span>
   <span class="p">}</span> <span class="c1">## end while (!$queue-&gt;_is_empty)</span>

   <span class="k">return</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub astar</span>

<span class="k">sub </span><span class="nf">_dequeue</span> <span class="p">{</span>                              <span class="c1"># includes "sink"</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$k</span><span class="p">,</span> <span class="nv">$self</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="nv">_</span><span class="p">);</span>
   <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$#$self</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="nb">splice</span> <span class="nv">@$self</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">pop</span> <span class="nv">@$self</span><span class="p">)</span> <span class="p">:</span> <span class="nb">pop</span> <span class="nv">@$self</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">((</span><span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="nv">$k</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nv">$#$self</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nv">$j</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$#$self</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span><span class="p">]{</span><span class="nv">f</span><span class="p">});</span>
      <span class="k">last</span> <span class="k">if</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$j</span><span class="p">]{</span><span class="nv">f</span><span class="p">};</span>
      <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$k</span><span class="p">],</span> <span class="nv">$k</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$k</span><span class="p">,</span> <span class="nv">$j</span><span class="p">],</span> <span class="nv">$j</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">$r</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub _dequeue</span>

<span class="k">sub </span><span class="nf">_enqueue</span> <span class="p">{</span>                              <span class="c1"># includes "swim"</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
   <span class="nb">push</span> <span class="nv">@$self</span><span class="p">,</span> <span class="nv">$node</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$k</span> <span class="o">=</span> <span class="nv">$#$self</span><span class="p">;</span>
   <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$self</span><span class="p">}[</span><span class="nv">$k</span> <span class="sr">/ 2, $k], $k) = (@{$self}[$k, $k /</span> <span class="mi">2</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="nv">$k</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
     <span class="k">while</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span><span class="p">]{</span><span class="nv">f</span><span class="p">}</span> <span class="o">&lt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$k</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]{</span><span class="nv">f</span><span class="p">});</span>
<span class="p">}</span> <span class="c1">## end sub _enqueue</span>

<span class="k">sub </span><span class="nf">_is_empty</span> <span class="p">{</span> <span class="k">return</span> <span class="o">!</span><span class="nv">$#</span><span class="p">{</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">__unroll</span> <span class="p">{</span>    <span class="c1"># unroll the path from start to goal</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$node</span><span class="p">,</span> <span class="nv">$node_for</span><span class="p">,</span> <span class="nv">@path</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="vg">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]{</span><span class="nv">value</span><span class="p">});</span>
   <span class="k">while</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="k">my</span> <span class="nv">$p</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">p</span><span class="p">}))</span> <span class="p">{</span>
      <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$node_for</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$p</span><span class="p">};</span>
      <span class="nb">unshift</span> <span class="nv">@path</span><span class="p">,</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">value</span><span class="p">};</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nb">wantarray</span> <span class="p">?</span> <span class="nv">@path</span> <span class="p">:</span> <span class="o">\</span><span class="nv">@path</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub __unroll</span>
</code></pre></div></div>

<p>For the <a href="https://raku.org/">Raku</a> solution, then, we’re using Dijkstra’s algorithm:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;

sub MAIN {
   my @routes = [1,2,3], [4,5,6], [3,8,9], [7,8];
   my $source = 1;
   my $destination = 6;
   my $route = shortest-route(@routes, $source, $destination) // -1;
   say $route;
}

class Dijkstra { ... }
class PriorityQueue { ... }

sub shortest-route (@routes, $src, $dst) {
   my $graph = routes-to-graph(@routes);
   my $d = Dijkstra.new(
      distance =&gt; { $graph{$^a}{$^b} },
      successors =&gt; { $graph{$^a}.keys },
      start =&gt; $src,
      goals =&gt; [ $dst ],
   );
   return $d.path-to($dst);
}

sub routes-to-graph (@routes) {
   my %adjacents_for;
   for @routes -&gt; $route {
      my $prev = $route[0];
      for (1 ..^ @$route) -&gt; $i {
         my $curr = $route[$i];
         %adjacents_for{$prev}{$curr} = %adjacents_for{$curr}{$prev} = 1;
         $prev = $curr;
      }
   }
   return %adjacents_for;
}

class Dijkstra {
   has %!thread-to is built; # thread to a destination
   has $!start     is built;     # starting node
   has &amp;!id-of     is built;     # turn a node into an identifier

   method new (:&amp;distance!, :&amp;successors!, :$start!, :@goals,
         :$more-goals is copy, :&amp;id-of = -&gt; $n { $n.Str }) {
      my %is-goal = @goals.map: { &amp;id-of($_) =&gt; 1 };
      $more-goals //= (sub ($id) { %is-goal{$id}:delete; %is-goal.elems })
         if %is-goal.elems;
      my $id = &amp;id-of($start);
      my $queue = PriorityQueue.new(
         before =&gt; sub ($a, $b) { $a&lt;d&gt; &lt; $b&lt;d&gt; },
         id-of  =&gt; sub ($n) { $n&lt;id&gt; },
         items  =&gt; [{v =&gt; $start, id =&gt; $id, d =&gt; 0},],
      );
      my %thr-to = $id =&gt; {d =&gt; 0, p =&gt; Nil, pid =&gt; $id};
      while ! $queue.is-empty {
         my ($ug, $uid, $ud) = $queue.dequeue&lt;v id d&gt;;
         for &amp;successors($ug) -&gt; $vg {
            my ($vid, $alt) = &amp;id-of($vg), $ud + &amp;distance($ug, $vg);
            next if ($queue.contains-id($vid)
               ?? ($alt &gt;= (%thr-to{$vid}&lt;d&gt; //= $alt + 1))
               !! (%thr-to{$vid}:exists));
            $queue.enqueue({v =&gt; $vg, id =&gt; $vid, d =&gt; $alt});
            %thr-to{$vid} = {d =&gt; $alt, p =&gt; $ug, pid =&gt; $uid};
         }
      }
      self.bless(thread-to =&gt; %thr-to, :&amp;id-of, :$start);
   }

   method path-to ($v is copy) {
      my $vid = &amp;!id-of($v);
      my $thr = %!thread-to{$vid} or return;
      my @retval;
      while defined $v {
         @retval.unshift: $v;
         ($v, $vid) = $thr&lt;p pid&gt;;
         $thr = %!thread-to{$vid};
      }
      return @retval;
   }
   method distance-to ($v) { (%!thread-to{&amp;!id-of($v)} // {})&lt;d&gt; }
}

class PriorityQueue {
   has @!items;
   has %!pos-of;
   has %!item-of;
   has &amp;!before;
   has &amp;!id-of;

   submethod BUILD (
      :&amp;!before = {$^a &lt; $^b},
      :&amp;!id-of  = {~$^a},
      :@items
   ) {
      @!items = '-';
      self.enqueue($_) for @items;
   }

   method contains ($obj --&gt; Bool) { self.contains-id(&amp;!id-of($obj)) }
   method contains-id ($id --&gt; Bool) { %!item-of{$id}:exists }
   method dequeue { self!remove-kth(1) }
   method elems { @!items.end }
   # method enqueue ($obj) &lt;-- see below
   method is-empty { @!items.elems == 1 }
   method item-of ($id) { %!item-of{$id}:exists ?? %!item-of{$id} !! Any }
   method remove ($obj) { self.remove-id(&amp;!id-of($obj)) }
   method remove-id ($id) { self!remove-kth(%!pos-of{$id}) }
   method size  { @!items.end }
   method top { @!items.end ?? @!items[1] !! Any }
   method top-id { @!items.end ?? &amp;!id-of(@!items[1]) !! Any }

   method enqueue ($obj) {
      my $id = &amp;!id-of($obj);
      %!item-of{$id} = $obj; # keep track of this item
      @!items[my $k = %!pos-of{$id} ||= @!items.end + 1] = $obj;
      self!adjust($k);
      return $id;
   }
   method !adjust ($k is copy) { # assumption: $k &lt;= @!items.end
      $k = self!swap(($k / 2).Int, $k)
         while ($k &gt; 1) &amp;&amp; &amp;!before(@!items[$k], @!items[$k / 2]);
      while (my $j = $k * 2) &lt;= @!items.end {
         ++$j if ($j &lt; @!items.end) &amp;&amp; &amp;!before(@!items[$j+1], @!items[$j]);
         last if &amp;!before(@!items[$k], @!items[$j]); # parent is OK
         $k = self!swap($j, $k);
      }
      return self;
   }
   method !remove-kth (Int:D $k where 0 &lt; $k &lt;= @!items.end) {
      self!swap($k, @!items.end);
      my $r = @!items.pop;
      self!adjust($k) if $k &lt;= @!items.end; # no adjust for last element
      my $id = &amp;!id-of($r);
      %!item-of{$id}:delete;
      %!pos-of{$id}:delete;
      return $r;
   }
   method !swap ($i, $j) {
      my ($I, $J) = @!items[$i, $j] = @!items[$j, $i];
      %!pos-of{&amp;!id-of($I)} = $i;
      %!pos-of{&amp;!id-of($J)} = $j;
      return $i;
   }
}
</code></pre>

<p>Stay safe and minimal!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/21/pwc213-shortest-route/</id>
    <published>2023-04-21T06:00:00+02:00</published>
    <updated>2023-04-21T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>PWC213 - Fun Sort</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/20/pwc213-fun-sort/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-213/">#213</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of positive integers.</p>

  <p>Write a script to sort the all even integers first then all odds in
ascending order.</p>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1,2)
Output: (2,1)
</code></pre></div>  </div>

  <p><strong>Example 3</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1)
Output: (1)
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>I guess the output should be a single list with the described order, so it
will be what I’ll assume.</p>

<h1 id="the-solution">The solution</h1>

<p>For the <a href="https://raku.org/">Raku</a> solution, I opted for splitting the input list first, then
sorting the two lists separately:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { say fun-sort(@args ?? @args !! [1 .. 6]) }

sub fun-sort (@input) {
   my (@even, @odd);
   for @input -&gt; $v {
      if $v %% 2 { @even.push: $v.Int }
      else       { @odd.push: $v.Int  }
   }
   return (@even.sort, @odd.sort).flat;
}
</code></pre>

<p>In the <a href="https://www.perl.org/">Perl</a> variant, though, I decided to sort first, then sweep through
the array from begin to end, moving odd elements to the end. At each
iteration, either we move one position ahead, or we move the last position
to consider one step behind, so we will anyway only consider each element
once. This approach preserves the ordering or odd items, so we’re done.</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="nv">say</span> <span class="p">'</span><span class="s1">(</span><span class="p">',</span> <span class="nb">join</span><span class="p">('</span><span class="s1">,</span><span class="p">',</span> <span class="nv">fun_sort</span><span class="p">(</span><span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="mi">6</span><span class="p">))),</span> <span class="p">'</span><span class="s1">)</span><span class="p">';</span>

<span class="k">sub </span><span class="nf">fun_sort</span> <span class="p">(@input) {</span>
   <span class="nv">@input</span> <span class="o">=</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nv">@input</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$stop</span> <span class="o">=</span> <span class="nv">$#input</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="nv">$start</span> <span class="o">&lt;=</span> <span class="nv">$stop</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="p">[</span><span class="nv">$start</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># move odds at the end</span>
         <span class="nb">push</span> <span class="nv">@input</span><span class="p">,</span> <span class="nb">splice</span> <span class="nv">@input</span><span class="p">,</span> <span class="nv">$start</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
         <span class="o">--</span><span class="nv">$stop</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="o">++</span><span class="nv">$start</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">@input</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Stay safe and have fun… sorting!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/20/pwc213-fun-sort/</id>
    <published>2023-04-20T06:00:00+02:00</published>
    <updated>2023-04-20T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Open Source Development Course for Perl developers - 2023.01</title>
    <link rel="alternate" href="https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>What happens in life is that we learn until the end. For me, it's time to learn how to use tools supporting Open Source projects. For years, I mostly worked alone. And mostly in closed projects. I've been developing an Open Source project for some time now. In order to properly cooperate with other programmers, I started an interesting course "Open Source Development Course for Perl developers - 2023.01" implemented as part of the code-maven.com project. </p>

</div>
    </content>
    <author>
      <name>Jarosław Danielski</name>
    </author>
    <id>https://dev.to/jdanproject/open-source-development-course-for-perl-developers-202301-39i9</id>
    <published>2023-04-19T19:46:56Z</published>
    <updated>2023-04-19T19:46:56Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 213: Fun Sort</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-213-fun-sort.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11078</id>
    <published>2023-04-18T00:02:02Z</published>
    <updated>2023-04-18T00:06:19Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 213 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-213/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 23, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fun Sort</h2>

<p><em>You are given a list of positive integers.</em></p>

<p><em>Write a script to sort the all even integers first then all odds in ascending order.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1,2)
Output: (2,1)
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1)
Output: (1)
</code></pre>

<h3>Fun Sort in Raku</h3>

<p>In theory, this task should ideally use a special comparison subroutine to be used with <code>sort</code> that leads to the desired sorting order. </p>

<p>It is, however, simpler to separate even and odd numbers into two lists (for example using <code>grep</code>), sort the lists and then reassemble the lists in the proper order.</p>

<pre><code>sub fun-sort (@in) {
    return (@in.grep({$_ %% 2}).sort, 
            @in.grep({$_ % 2}).sort).flat;
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say fun-sort @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<p>For the fun of it, or perhaps for the sake of trying to be pedantic <code>;-)</code> , let&#8217;s see how we can do the same using a special comparison subroutine. Note that <code>Less</code> and <code>More</code> (and also <code>Same</code>) are special values provided by the <a href="https://docs.raku.org/type/Order.html">Order</a> <code>enum</code> and are respectively equal to -1 and 1 (and 0). When the <code>fun-cmp</code> subroutine returns <code>Less</code> (i.e. -1), then the <code>sort</code> routine knows that the first parameter (<code>$a</code> in this case) should be ordered before the second one (<code>$b</code>). Conversely, the first parameter should be ordered after the second one if the comparison subroutine returns <code>More</code>. When both parameters are even, or both are odd, we just use the <code>&lt;=&gt;</code> numeric comparison operator (which also returns <code>Less</code>, <code>More</code>, or <code>Same</code> to the <code>sort</code> function).</p>

<pre><code>sub fun-cmp ($a, $b) { 
    if $a %% 2 {
        return $a &lt;=&gt; $b if $b %% 2;
        return Less;
    } else {
        return $a &lt;=&gt; $b unless $b %% 2;
        return More;
  }
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say sort &amp;fun-cmp, @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort2.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<h3>Fun Sort in Perl</h3>

<p>This is a port to Perl of the first Raku program above, splitting the input into two lists (even and odd numbers), sorting them separately and reassembling the sorted sub-lists at the end.</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    return (sort { $a &lt;=&gt; $b } grep { $_ % 2 == 0 } @_),
           (sort { $a &lt;=&gt; $b } grep { $_ % 2 != 0 } @_);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fun-sort.pl
2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Note that we could also first sort the input and then split the result into even and odd numbers and finally rearrange them:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    my @sorted = sort { $a &lt;=&gt; $b } @_;
    return (grep { $_ % 2 == 0 } @sorted), 
           (grep { $_ % 2 != 0 } @sorted);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the same output as before:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Finally, just as in Raku, we can also be pedantic in Perl and write a special comparison subroutine:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_cmp { 
    if ($a % 2 == 0) {
        return $a &lt;=&gt; $b unless $b % 2;
        return -1;
    } else {
        return $a &lt;=&gt; $b if $b % 2;
        return 1;
  }
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", sort { fun_cmp } @$test;
}
</code></pre>

<p>This program displays again the same output:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<h2>Task 2: Shortest Route</h2>

<p>This second task will be handled later, if I find the time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 30, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>A Simple Guide to Extract GPS Information from GoPro Photos and Videos</title>
    <link rel="alternate" href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1727/1*zNI5ysYb953nYHc4HfHWaA.png" width="1727"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Many people have a consumer grade camera like GoPro, these cameras are nice and resistant to create action videos and shots in the water&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>John R. Ballesteros</name>
    </author>
    <id>https://medium.com/p/cf6edf6dc601</id>
    <published>2023-04-16T22:20:32Z</published>
    <updated>2023-04-16T22:24:38.457000Z</updated>
    <category term="gps"/>
    <category term="gis"/>
    <category term="gopro"/>
    <category term="geotag"/>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7604825972187342661</id>
    <published>2023-04-15T23:51:00.000+02:00</published>
    <updated>2023-04-15T23:51:07.712+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxl) 5 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-3.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.02&lt;/strong&gt; on 2023-04-12, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.00 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-10, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.001008&lt;/strong&gt; on 2023-04-11, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.001007 was 1 month, 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DCONWAY'&gt;DCONWAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9705' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9705&lt;/strong&gt; on 2023-04-13, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9703 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.031' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.031&lt;/strong&gt; on 2023-04-12, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.030 was 3 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RJBS'&gt;RJBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7604825972187342661/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7604825972187342661"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxl-5-great-cpan-modules-released-last.html" title="(cdxl) 5 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-329016586609546432</id>
    <published>2023-04-15T23:49:00.001+02:00</published>
    <updated>2023-04-15T23:49:18.704+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlii) metacpan weekly report - Web::PerlDistSite</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 86&lt;/p&gt;
&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/15 21:48:06 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dochazka::REST" target="_blank"&gt;App::Dochazka::REST&lt;/a&gt; - Dochazka REST server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CVS" target="_blank"&gt;Crypt::CVS&lt;/a&gt; - Substitution cipher for CVS passwords&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Role::CryptedPassword" target="_blank"&gt;MooX::Role::CryptedPassword&lt;/a&gt; - Password attribute from a encrypted file.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::WSDL" target="_blank"&gt;SOAP::WSDL&lt;/a&gt; - SOAP with WSDL support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mock::Net::Server::Mail" target="_blank"&gt;Test::Mock::Net::Server::Mail&lt;/a&gt; - mock SMTP server for use in tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Handle::FileWriteRotate" target="_blank"&gt;Tie::Handle::FileWriteRotate&lt;/a&gt; - Filehandle tie to write to autorotated file with File::Write::Rotate&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tuple::Munge" target="_blank"&gt;Tuple::Munge&lt;/a&gt; - manipulate Perl's tuple object representations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::REST::Apid" target="_blank"&gt;WWW::REST::Apid&lt;/a&gt; - Generic REST API Daemon&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::TensorFlow::Libtensorflow" target="_blank"&gt;AI::TensorFlow::Libtensorflow&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Antsy" target="_blank"&gt;Antsy&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Adenosine" target="_blank"&gt;App::Adenosine&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=46)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Netdisco" target="_blank"&gt;App::Netdisco&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Rad" target="_blank"&gt;App::Rad&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=155)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI::Driver::Redis" target="_blank"&gt;CHI::Driver::Redis&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=77)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::CBC" target="_blank"&gt;Crypt::CBC&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::FileHandle" target="_blank"&gt;Crypt::FileHandle&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=49)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Generic" target="_blank"&gt;Daemon::Generic&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=133)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::MessagePack" target="_blank"&gt;Data::MessagePack&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dezi" target="_blank"&gt;Dezi&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::xxHash" target="_blank"&gt;Digest::xxHash&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ETL::Pipeline::3.10" target="_blank"&gt;ETL::Pipeline::3.10&lt;/a&gt; (+1=0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=45)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=61)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Write::Rotate" target="_blank"&gt;File::Write::Rotate&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Furl" target="_blank"&gt;Furl&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Parser::XS" target="_blank"&gt;HTTP::Parser::XS&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=107)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Compress" target="_blank"&gt;IO::Compress&lt;/a&gt; (+1=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::Socks" target="_blank"&gt;IO::Socket::Socks&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Ion" target="_blank"&gt;Ion&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Jifty" target="_blank"&gt;Jifty&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Util::MaybeXS" target="_blank"&gt;List::Util::MaybeXS&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::Protocol::AnyEvent::http" target="_blank"&gt;LWP::Protocol::AnyEvent::http&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=95)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MLPerl" target="_blank"&gt;MLPerl&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=31)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=482)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::CHI" target="_blank"&gt;Mojolicious::Plugin::CHI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=296)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=19)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=408)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=37)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=230)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=66)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=62)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Encoder" target="_blank"&gt;Sereal::Encoder&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::Lite" target="_blank"&gt;SOAP::Lite&lt;/a&gt; (+1=21)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::ByExample" target="_blank"&gt;Sort::ByExample&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=113)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable" target="_blank"&gt;Storable&lt;/a&gt; (+1=52)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ShellUI" target="_blank"&gt;Term::ShellUI&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twiggy" target="_blank"&gt;Twiggy&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::PerlDistSite" target="_blank"&gt;Web::PerlDistSite&lt;/a&gt; (+2=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Wurm" target="_blank"&gt;Wurm&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::Tiny" target="_blank"&gt;YAML::Tiny&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/329016586609546432/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/329016586609546432"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlii-metacpan-weekly-report.html" title="(dlii) metacpan weekly report - Web::PerlDistSite"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 212: Jumping Letters</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11073</id>
    <published>2023-04-11T02:36:04Z</published>
    <updated>2023-04-14T00:12:52Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic, i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<h3>Jumping Letters in Raku</h3>

<p>The <a href="https://docs.raku.org/routine/ord.html">ord</a> routine translates a letter into its ASCII code (well, really, it&#8217;s a Unicode code point, but it is equivalent for our purpose here with values less than 128). The <a href="https://docs.raku.org/routine/chr.html">chr</a> performs the inverse operation. So we can simply convert each letter of the input, add the relevant jump value and convert the result back to a letter. One little complication is that we need to subtract 26 from the code point if it gets beyond the upper case and lower case letter ranges after having added the jump value. </p>

<pre><code>sub jump-letter ($letter, $val) {
    my $new_ascii = $letter.ord + $val;
    return ($new_ascii - 26).chr if $new_ascii &gt; 'z'.ord;
    return ($new_ascii - 26).chr if $letter le 'Z'
        and $new_ascii &gt; 'Z'.ord;
    return $new_ascii.chr;
}
my @test = "Perl", &lt;2 22 19 9&gt;;
for ("Perl", &lt;2 22 19 9&gt;), ("Raku", &lt;24 4 7 17&gt;) -&gt; @test {
    printf "%-10s =&gt; ", "@test[0]";
    for @test[0].comb Z @test[1].Array -&gt; $a {
        print jump-letter $a[0], $a[1];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./jumping-letters.raku
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h3>Jumping Letters in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the previous section if you need some explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub jump_letter  {
    my ($letter, $val) = @_;
    my $new_ascii = ord($letter) + $val;
    return chr($new_ascii - 26) if $new_ascii &gt; ord 'z';
    return chr($new_ascii - 26) if $letter le 'Z'
        and $new_ascii &gt; ord 'Z';
    return chr $new_ascii;
}

for my $test (["Perl", [&lt;2 22 19 9&gt;]], ["Raku", [&lt;24 4 7 17&gt;]]) {
    printf "%-10s =&gt; ", "$test-&gt;[0]";
    my @letters = split //, $test-&gt;[0];
    for my $i (0..$#letters) {
        print jump_letter $letters[$i], $test-&gt;[1][$i];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./jumping-letters.pl
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 2
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, I think that example 3 above is wrong. I believe that <code>size</code> should probably be 3 for the example to make sense.</p>

<p><em>Update:</em> this error in the task specifications has now been fixed.</p>

<p>Second, even though I started working on this second task (and think I probably have a working solution in Raku), I have no time today to complete this task, and probably won&#8217;t have time for several days. I still wanted to make my solutions to task 1 available today. I&#8217;ll hopefully write a new blog post or update this one later on.</p>

<p><em>Update:</em> I have now written a <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html">second blog post</a> dated April 13, 2023, providing solutions to this task 2 of the challenge.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 212: Rearrange Groups</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-rearrange-groups.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11076</id>
    <published>2023-04-14T00:02:28Z</published>
    <updated>2023-04-14T00:07:23Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<p>This task was the subject of <a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html">this post</a> published on April 10, 2023.</p>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 3
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, there was initially an error in Example 3 above of the task specification (<code>$size</code> was 2 instead of 3, and that did not fit with the suggested output), but this has been fixed now.</p>

<p>Next, I first thought of sorting the input list of integers and, assuming for example a group size of 3, to try sequences of 3 successive integers in the list. But then I thought that it would be easier to store the input in a Raku <a href="https://docs.raku.org/type/Bag.html">Bag</a> and to remove items used to construct groups as we go. As this turned out to be quite simple, I decided, as you will see, to use the same method in Perl, simulating bags with hashes.</p>

<h3>Rearrange Groups in Raku</h3>

<p>First, note that <code>bags</code> are immutable in Raku. This means that you cannot change the inner items of the bag (or add or remove items), but this does not preclude you from <em>re-assigning</em> bags, as we do in the last statement of the <code>while</code> loop in the code below.</p>

<p>Using bags means that we can use operators with set theory semantics, such as the infix <code>(&lt;=)</code> or infix <code>⊆</code> <a href="https://docs.raku.org/language/operators.html#infix_(&lt;=">is a subset of or equal to</a>,<em>infix</em>⊆), or the infix <code>(-)</code>, infix <code>∖</code> <a href="https://docs.raku.org/language/operators.html#infix_(-">set difference</a>,<em>infix</em>%E2%88%96), operators.</p>

<p>In the <code>rearrange</code> subroutine, the <code>while</code> loop runs as long as there are some items left in the bag. The loop looks for the smallest item in the bag, construct a sequence (<code>$list</code>) of <code>$size</code> successive items. If <code>$list</code> is a subset of (or equal to) the bag, we store the <code>$list</code> into the <code>@result</code> and remove the items of the <code>$list</code> from the bag. If <code>$list</code> is not part of the bag, then we failed and return -1. If we get normally out of the loop (because the bag is now empty), then we succeeded to build equal groups of items and can return the <code>@result</code>.</p>

<pre><code>sub rearrange (@in, $size) {
    my @result;
    return -1 unless @in.elems %% $size; 
    my $bag  = @in.Bag;
    while ($bag) {
        my $min = $bag.min.key;
        my @list = $min..^($min + $size);
        return -1 unless @list ⊆ $bag;
        push @result, @list;
        $bag = $bag (-) @list;  # set difference
    }
    return @result;
}

for ((1,2,3,5,1,2,7,6,3), 3), ((1,2,3), 2), ((1,2,3), 3),
    ((1,2,4,3,5,3), 3), ((1,5,2,6,4,7), 3),
    ((1,5,2,6,4,7), 2) -&gt; @test {
    say @test;
    say rearrange(|@test), "\n"; 
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./rearrange-groups.raku
((1 2 3 5 1 2 7 6 3) 3)
[[1 2 3] [1 2 3] [5 6 7]]

((1 2 3) 2)
-1

((1 2 3) 3)
[[1 2 3]]

((1 2 4 3 5 3) 3)
[[1 2 3] [3 4 5]]

((1 5 2 6 4 7) 3)
-1

((1 5 2 6 4 7) 2)
[[1 2] [4 5] [6 7]]
</code></pre>

<h3>Rearrange Groups in Perl</h3>

<p>I initially thought of using a different technique for solving the task in Perl, since there is no built-in <code>bag</code> data structure in Perl, but then I found that it was quite easy to simulate a <code>bag</code> with a hash containing an histogram of the input values. So this program essentially works the same as the Raku implementation (read the previous section if you need explanations). The <code>for</code> loop checks that all the values of <code>$list</code> exist in the bag and remove these items from the bag.</p>

<pre><code>use warnings;
use feature "say";

sub rearrange {
    my @in = @{$_[0]};
    my $size = $_[1];
    my @result;
    return "-1" if @in % $size; 
    my %bag;
    $bag{$_}++ for @in;
    while (%bag) {
        my $min = (sort { $a &lt;=&gt; $b } keys %bag)[0];
        my @list = $min..($min + $size -1);
        for my $item (@list) {
            return "-1" unless exists $bag{$item};
            $bag{$item}--;
            delete $bag{$item} if $bag{$item} == 0;
        }
        push @result, \@list;
    }
    return @result;
}

for my $test( [[1,2,3,5,1,2,7,6,3], 3],
              [[1,2,3], 2], [[1,2,3], 3],
              [[1,2,4,3,5,3], 3],
              [[1,5,2,6,4,7], 3],
              [[1,5,2,6,4,7], 2] )
              {
    say "(@{$test-&gt;[0]})", " ", "($test-&gt;[1])";
    my @result = rearrange(@$test);
    if ($result[0] == "-1") {
        say -1;
    } else {
        say map { "[@$_] " } @result;
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./rearrange-groups.pl
(1 2 3 5 1 2 7 6 3) (3)
[1 2 3] [1 2 3] [5 6 7]

(1 2 3) (2)
-1

(1 2 3) (3)
[1 2 3]

(1 2 4 3 5 3) (3)
[1 2 3] [3 4 5]

(1 5 2 6 4 7) (3)
-1

(1 5 2 6 4 7) (2)
[1 2] [4 5] [6 7]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8の文字列を1行ずつ読み取り、各文字をU+(16進数)の形式などに変換して、1行ずつ出力する。</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>コマンドの出力結果を、Gitのレポジトリの中のファイルに保管する。</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を行列状に示す。</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>指定ディレクトリのファイル全て(直下のみでない)に対して、最後に変更された順で網羅的に表示する。</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>– new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for … <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Regex in python vs in perl</title>
    <link rel="alternate" href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/2600/0*vZMKz-sHEUjwbgNS" width="3024"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Regular expressions (regex) are a powerful tool for manipulating and searching text data. A regular expression is a sequence of characters&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Maxwell Langford</name>
    </author>
    <id>https://medium.com/p/693f5a98ba90</id>
    <published>2023-03-29T17:06:53Z</published>
    <updated>2023-03-29T17:06:53.762000Z</updated>
    <category term="perl"/>
    <category term="regex-in-python"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Hack The Box Nunchucks Writeup</title>
    <link rel="alternate" href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1942/0*PEFYPGl9fZPn2zZb.png" width="1942"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Nunchucks is an easy Linux box created by TheCyberGeek on Hack The Box and I intend to hack it. Hello world, welcome to Haxez in this post&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Haxez - Hacking Made Easy</name>
    </author>
    <id>https://medium.com/p/f6eef36a8363</id>
    <published>2023-03-26T13:01:25Z</published>
    <updated>2023-03-26T15:49:30.057000Z</updated>
    <category term="nunchuck"/>
    <category term="perl"/>
    <category term="ssti"/>
    <category term="hacking"/>
    <category term="hack-the-box-writeup"/>
  </entry>
</feed>
