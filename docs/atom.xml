<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-09-29T20:46:22Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
  <title>Dancer2: Solution 3 - Simple Single-user TODO list AP</title>
  <summary type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2</a> video course.
<p>
]]></summary>
  <updated>2022-09-27T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-3-simple-todo-api"/>  <id>https://perlmaven.com/dancer2-solution-3-simple-todo-api</id>
  <content type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2</a> video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-09-27T00:00:00Z</published>
    <updated>2022-09-27T00:00:00Z</updated>
  </entry>
  <entry>
    <title>#583 - Sponsoring Perl and other Open Source work</title>
    <link rel="alternate" href="https://perlweekly.com/archive/583.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Happy New Year - Shana Tova - to all the Jews around the world!</p>
<p>A couple of days ago Ed Freyfogle wrote us pointig to their post on <a href="https://blog.opencagedata.com/post/sponsoring-metacpan">sponsoring MetaCPAN</a>. I love this on so many levels. First of all, of course the fact that they sponsor some Perl-related activity. They also blog about it. They also send us a heads up to be included here in the Perl Weekly. I hope many more small and large companies, and also individuals will follow them.</p>
<p>Dean Hamstead also sent us an email linking to the new <a href="https://the-perl-store.creator-spring.com/">Perl Store</a>, that was also announced on <a href="https://news.perlfoundation.org/post/tpf-merch-store">The Perl Foundation blog</a>. Buying a T-shirt or some other swag will both help you with clothing and help TPF financially. Nice initiative!</p>
<p>Finally, I managed to set up my <a href="https://github.com/sponsors/szabgab/">GitHub sponsors profile</a>. So now, if you'd like to support my Perl and in more general Open Source work (articles, code, and videos) you can do so via GitHub as well. It would be awesome to get a few of you start supporting me via GitHub in the next couple of days. That will help things get rolling there and I would be able to see how the system really works.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/583.html</id>
    <published>2022-09-26T10:00:00Z</published>
    <updated>2022-09-26T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Take part in Hacktoberfest - register between 26 September and 31 October</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/hactoberfest-2022"/>
  <id>tag:news.perlfoundation.org,2022-09-26:/post/hactoberfest-2022</id>
  <published>2022-09-26T07:20:01</published>
  <updated>2022-09-26T07:20:01</updated>
  <summary>
  <![CDATA[
     Support perl during October's Hacktoberfest. Running for the last nine years, this annual event is contributed to by thousands of coders and non coders world wide. However small or large, your input will make a difference. Take a look at the Hacktoberfest website and get involved. You can also read about it on the Perl Blogs site. 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Support perl during October's Hacktoberfest. Running for the last nine years, this annual event is contributed to by thousands of coders and non coders world wide. However small or large, your input will make a difference.</p>

<p>Take a look at the <a href="https://hacktoberfest.com/participation/">Hacktoberfest website</a> and get involved. You can also read about it on the <a href="http://blogs.perl.org/users/itcharlie/2022/09/hacktoberfest-2022-is-near.html">Perl Blogs site</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #177</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-177/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 177 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-177/</id>
    <published>2022-09-26T00:00:00Z</published>
    <updated>2022-09-26T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 183</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-183/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-183/</id>
    <published>2022-09-26T00:00:00Z</published>
    <updated>2022-09-26T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 184</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-184/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Sequence Number 10. TASK #2: Split Array HEADLINES  Welcome to the Week #184 of The Weekly Challenge.
Today, we are giving away Token #7 to Peter Campbell Smith for the book, Learning Perl Exercises by brian d foy. I will share the details with you in a separate email.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-184/</id>
    <published>2022-09-26T00:00:00Z</published>
    <updated>2022-09-26T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 182:  Unique Array and Date Difference</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/09/perl-weekly-challenge-182-unique-array-and-date-difference.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10905</id>
    <published>2022-09-25T22:52:30Z</published>
    <updated>2022-09-25T22:54:53Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 183 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-183/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Unique Array</h2>

<p><em>You are given list of arrayrefs.</em></p>

<p><em>Write a script to remove the duplicate arrayrefs from the given list.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = ([1,2], [3,4], [5,6], [1,2])
Output: ([1,2], [3,4], [5,6])
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = ([9,1], [3,7], [2,5], [2,5])
Output: ([9, 1], [3,7], [2,5])
</code></pre>

<h3>Unique Array in Raku</h3>

<p>The Raku solution is essentially a one-liner (more than one line because of the tests). We convert the sub-arrays into strings and use the <a href="https://docs.raku.org/routine/unique">unique</a> built-in routine to remove duplicates.</p>

<pre><code>for ([1,2], [3,4], [5,6], [1,2]), 
    ([9,1], [3,7], [2,5], [2,5]) -&gt; @test {
    @test&gt;&gt;.map({"[$^a, $^b]"}).flat.unique.say;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./unique-arrays.raku
([1, 2] [3, 4] [5, 6])
([9, 1] [3, 7] [2, 5])
</code></pre>

<h3>Unique Array in Perl</h3>

<p>In Perl, we use the <code>%unique</code> hash to remove duplicates. </p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ( [[1,2], [3,4], [5,6], [1,2]], 
               [[9,1], [3,7], [2,5], [2,5]] ) {
    my %unique = map { $_ =&gt; 1 } map { "[@$_]"} @$test;
    say join ", ",  keys %unique;
}
</code></pre>

<p>Note that, since this is not requested in the task specification, we&#8217;re not trying to keep the order of the input. It would be easy to keep the input order with an additional array.</p>

<p>This program displays the following output:</p>

<pre><code>$ perl ./unique-arrays.pl
[3 4], [5 6], [1 2]
[3 7], [2 5], [9 1]
</code></pre>

<h2>Task 2: Date Difference</h2>

<p><em>You are given two dates, <code>$date1</code> and <code>$date2</code> in the format YYYY-MM-DD.</em></p>

<p><em>Write a script to find the difference between the given dates in terms on years and days only.</em></p>

<pre><code>Example 1

    Input: $date1 = '2019-02-10'
           $date2 = '2022-11-01'
    Output: 3 years 264 days

Example 2

    Input: $date1 = '2020-09-15'
           $date2 = '2022-03-29'
    Output: 1 year 195 days

Example 3

    Input: $date1 = '2019-12-31'
           $date2 = '2020-01-01'
    Output: 1 day

Example 4

    Input: $date1 = '2019-12-01'
           $date2 = '2019-12-31'
    Output: 30 days

Example 5

    Input: $date1 = '2019-12-31'
           $date2 = '2020-12-31'
    Output: 1 year

Example 6

    Input: $date1 = '2019-12-31'
           $date2 = '2021-12-31'
    Output: 2 years

Example 7

    Input: $date1 = '2020-09-15'
           $date2 = '2021-09-16'
    Output: 1 year 1 day

Example 8

    Input: $date1 = '2019-09-15'
           $date2 = '2021-09-16'
    Output: 2 years 1 day
</code></pre>

<h3>Date Difference in Raku</h3>

<pre><code>for ('2019-02-10', '2022-11-01'), 
    ('2020-09-15', '2022-03-29'),
    ('2019-12-31', '2020-01-01'),
    ('2019-12-01', '2019-12-31'),
    ('2019-12-31', '2020-12-31'),
    ('2019-12-31', '2021-12-31'),
    ('2020-09-15', '2020-09-16'),
    ('2019-09-15', '2021-09-16') -&gt; @test {
    my @dates = map {Date.new($_) }, sort @test;
    my $delta-y = @dates[1].year - @dates[0].year;
    my ($y, $m, $d) = @dates[0].year, @dates[0].month.fmt("%02d"), 
        @dates[0].day.fmt("%02d");
    $delta-y -= 1 if "$m$d" &gt; join "", @dates[1].month.fmt("%02d"), 
        @dates[1].day.fmt("%02d");
    $y += $delta-y;
    my $new-date = Date.new("$y-$m-$d");
    my $delta-d = @dates[1] - $new-date;
    say "@dates[]: $delta-y year(s) {$delta-d.fmt("%3d")} day(s)";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./date-diff.raku
2019-02-10 2022-11-01: 3 year(s) 264 day(s)
2020-09-15 2022-03-29: 1 year(s) 195 day(s)
2019-12-31 2020-01-01: 0 year(s)   1 day(s)
2019-12-01 2019-12-31: 0 year(s)  30 day(s)
2019-12-31 2020-12-31: 1 year(s)   0 day(s)
2019-12-31 2021-12-31: 2 year(s)   0 day(s)
2020-09-15 2020-09-16: 0 year(s)   1 day(s)
2019-09-15 2021-09-16: 2 year(s)   1 day(s)
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on October 2, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Unique Differences</title>
    <link rel="alternate" href="https://dev.to/simongreennet/unique-differences-1cci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 183
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-183/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-183/sgreen">My solutions</a></p>

<p>Back after a short break :)</p>

<h2>
  
  
  Task 1: Unique Array
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given list of arrayrefs.</p>

<p>Write a script to remove the duplicate arrayrefs from the given list.</p>

<h3>
  
  
  My solutions
</h3>

<p>The logic in the Python and Perl solutions is basically the same. For each item in the outer list, see if it has appeared earlier in the list. In Python comparing two lists works as expected. I don't believe there is a way to do this in Perl, so I wrote an function called <code>same_array</code> to see if two arrays are the same.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py <span class="s2">"[[1,2], [3,4], [5,6], [1,2]]"</span>
<span class="o">[</span>1, 2], <span class="o">[</span>3, 4], <span class="o">[</span>5, 6]

<span class="nv">$ </span>./ch-1.py <span class="s2">"[[9,1], [3,7], [2,5], [2,5]]"</span>
<span class="o">[</span>9, 1], <span class="o">[</span>3, 7], <span class="o">[</span>2, 5]
</code></pre>

</div>



<h2>
  
  
  Task 2: Date Difference
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given two dates, <code>$date1</code> and <code>$date2</code> in the format <code>YYYY-MM-DD</code>.</p>

<p>Write a script to find the difference between the given dates in terms on years and days only.</p>

<h3>
  
  
  My solutions
</h3>

<p>This is a little tricky. Date math is never fun. So off the bat, I'll note this is not time zone aware. That really would only be an issue for the few countries that <a href="https://www.bbc.com/news/world-asia-16351377">skipped a day</a> in December 2011.</p>

<p>The basic logic goes as follows:</p>

<ol>
<li>Make sure that <code>date2</code> is later than <code>date1</code>. The challenge does not mention in what order the date is specified.</li>
<li>Subtract the difference in the calendar years between date2 and date1, and store it as <code>years</code>.</li>
<li>If date2 is earlier in the year than date1, then subtract 1 from the <code>years</code> value.</li>
<li>Calculate the number of days between <code>date2 - $years year(s)</code> and <code>date1</code>. For Python, this is done using the <a href="https://github.com/jmcantrell/python-dateutils">dateutils</a> module. In Perl, I use the <a href="https://metacpan.org/pod/Date::Calc">Date::Calc</a> module.</li>
<li>Print the result. I'm having a bit of a brain fart on how to do this the correct way. I'm sure after I submit my pull request, I'll figure this out :)</li>
</ol>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 2019-02-10 2022-11-01
3 years 264 days

<span class="nv">$ </span>./ch-2.py 2020-09-15 2022-03-29
1 year 195 days

<span class="nv">$ </span>./ch-2.py 2019-12-31 2020-01-01
1 day

<span class="nv">$ </span>./ch-2.py 2019-12-31 2019-12-01
30 days
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/unique-differences-1cci</id>
    <published>2022-09-25T12:27:33Z</published>
    <updated>2022-09-25T12:27:33Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Enable GitHub Actions for CI on Math::Polynomial::Chebyshev</title>
  <summary type="html"><![CDATA[<p>
When looking at the <a href="https://metacpan.org/recent">recent uploads to CPAN</a> I bumped into the <a href="https://metacpan.org/dist/Math-Polynomial-Chebyshev">Math-Polynomial-Chebyshev</a>
and noticed it does not have any CI system enabled. So I guess I could contribute to this package a bit by adding GitHub Actions to it.
<p>
]]></summary>
  <updated>2022-09-25T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/enable-github-actions-on-chebyshev"/>  <id>https://perlmaven.com/enable-github-actions-on-chebyshev</id>
  <content type="html"><![CDATA[<p>
When looking at the <a href="https://metacpan.org/recent">recent uploads to CPAN</a> I bumped into the <a href="https://metacpan.org/dist/Math-Polynomial-Chebyshev">Math-Polynomial-Chebyshev</a>
and noticed it does not have any CI system enabled. So I guess I could contribute to this package a bit by adding GitHub Actions to it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6944466192663698713</id>
    <published>2022-09-24T23:04:00.000+02:00</published>
    <updated>2022-09-24T23:04:20.003+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxi) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.70&lt;/strong&gt; on 2022-09-23&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.68 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.071' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.071&lt;/strong&gt; on 2022-09-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.070 was 4 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.057001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.057001&lt;/strong&gt; on 2022-09-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.055001 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.54&lt;/strong&gt; on 2022-09-24&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.53 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-CheckLib-0.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::CheckLib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Check that a library is available for FFI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.30&lt;/strong&gt; on 2022-09-22&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.29 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.59&lt;/strong&gt; on 2022-09-23&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 0.58 was 4 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NINE/Inline-Python-0.57' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Inline::Python&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl subs and classes in Python. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.57&lt;/strong&gt; on 2022-09-18&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.56 was 5 years, 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220920' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220920&lt;/strong&gt; on 2022-09-21&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220820 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/Pithub-0.01040' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01040&lt;/strong&gt; on 2022-09-23&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01039 was 1 month, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OVID/Test-Most-0.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Most&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Most commonly needed test functions and features. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.38&lt;/strong&gt; on 2022-09-24&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 0.37 was 2 years, 5 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.000000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000000&lt;/strong&gt; on 2022-09-23&lt;/li&gt;  &lt;li&gt;Votes: 132&lt;/li&gt;  &lt;li&gt;Previous version: 1.016010 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VPIT/Variable-Magic-0.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Variable::Magic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Associate user-defined magic to variables from Perl. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.63&lt;/strong&gt; on 2022-09-20&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.62 was 4 years, 10 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6944466192663698713/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdxi-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6944466192663698713"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6944466192663698713"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdxi-12-great-cpan-modules-released.html" title="(cdxi) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6145778478516961973</id>
    <published>2022-09-24T23:01:00.002+02:00</published>
    <updated>2022-09-24T23:01:43.022+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxiv) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 34&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/09/24 21:01:22 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pwhich" target="_blank"&gt;App::pwhich&lt;/a&gt; - Perl-only `which`&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Pluggable" target="_blank"&gt;Keyword::Pluggable&lt;/a&gt; - define new keywords in pure Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::HAProxy" target="_blank"&gt;Net::HAProxy&lt;/a&gt; - control HAProxy through a socket&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Natural" target="_blank"&gt;DateTime::Format::Natural&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Mint" target="_blank"&gt;DBIx::Mint&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest" target="_blank"&gt;Digest&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::MD5" target="_blank"&gt;Digest::MD5&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::SHA" target="_blank"&gt;Digest::SHA&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faster::Maths" target="_blank"&gt;Faster::Maths&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Which" target="_blank"&gt;File::Which&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin" target="_blank"&gt;FindBin&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GD" target="_blank"&gt;GD&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::CPAN::Patch" target="_blank"&gt;Git::CPAN::Patch&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GitLab::API::v4" target="_blank"&gt;GitLab::API::v4&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::ExifTool" target="_blank"&gt;Image::ExifTool&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::All" target="_blank"&gt;IO::All&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jenkins::API" target="_blank"&gt;Jenkins::API&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Simple" target="_blank"&gt;Keyword::Simple&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Sender::Easy" target="_blank"&gt;Mail::Sender::Easy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::WithCSRFProtection" target="_blank"&gt;Mojolicious::Plugin::WithCSRFProtection&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=293)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=322)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=228)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ProgressBar" target="_blank"&gt;Term::ProgressBar&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockTime" target="_blank"&gt;Test::MockTime&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=132)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::XSH2" target="_blank"&gt;XML::XSH2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6145778478516961973/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6145778478516961973"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6145778478516961973"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxiv-metacpan-weekly-report.html" title="(dxxiv) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8170136656955668621</id>
    <published>2022-09-24T23:00:00.003+02:00</published>
    <updated>2022-09-24T23:00:27.891+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-09-24 20:59:55 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73777502" target="_blank"&gt;cross-platform techniques to determine screen dimensions&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73780731" target="_blank"&gt;How to detect XSS Reflect with Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73777132" target="_blank"&gt;Perl regex capture each character as one group&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73779289" target="_blank"&gt;Perl :: Translate String "yyyy.mm.dd.hh.mm.ss" into DateTime object?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73792519" target="_blank"&gt;How can I regexp capture the string between 2 specific sets of double underscores?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8170136656955668621/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dlii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8170136656955668621"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8170136656955668621"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dlii-stackoverflow-perl-report.html" title="(dlii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>course change for Kephra</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2022/09/course-change-for-kephra.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10904</id>
    <published>2022-09-25T22:46:55Z</published>
    <updated>2022-09-24T15:45:22Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Kephra" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl 5" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="WxPerl" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>Kephra, an editor for programming (mostly Perl) written in WxPerl is my main project since I stumbled into the Perl community. Most people I know already heard of it - but I want to write  about a new development that might be helpful for some, which might consider to use it even if it has a very limited feature set (forth rewrite baby!).</p>]]>
        <![CDATA[<p><br />
It was silent for some time - because being my main project - I tried to cram all my other ideas, mainly KBOS into it which bogged progress down. Maybe there will be an Object System just for Kephra, solving some issues I saw nowhere else dressed. But for now I'm surprised how much progress is possible, If you just focus on churning out features.</p>

<p>I took stage sed (which is the bare minimal editor I once wrote as proof of concept) and just started to adding features and fixing issues. Sed stands for Single document EDitor and that is all what next release will bring. Am I serious ? and why should you care? Well I'm German - we never joke and it has strengths in its editing capability which sound like - 'duh its an editor - but if you see how many so called Editors and IDE neglect this area while focusing on the big guns like refactoring, debugging and git integration.</p>

<p>But what do I mean with editing is the ability to navigate and shape text as easily as possible. For illustration lets consider the following scenario:</p>

<p>I want to add a sub to a class which is somewhat similar to another already existing. So i skip the subs down in the file by hitting thee times &lt;Ctrl&gt;+&lt;PgDown&gt; and were thereat the start of the sub. To select it its enough to hit &lt;Ctrl&gt;+&lt;Shift&gt;+&lt;Down&gt; twice and we have both blocks which selected - &lt;Ctrl>+&lt;C&gt; obviously copies the selection.  Now we have to go back where we were editing - &lt;Ctrl&gt;+&lt;E&gt; - done. And then &lt;Ctrl&gt;+&lt;V&gt; - the sub is pasted and we can start to take what we need from it. The first two line we can discard - &lt;Ctrl&gt;+&lt;X&gt; twice. Yes its the normal cut command but if nothing is selected it cuts the current line, because 1) why waste precious key space (I'm looking at you nano) and 2) as programmers we think in line of code anyway and 3) it's not like we overloaded the command with something radically different. Then the next 3 lines have to move to the end -  but to select them from start to end are too much key strokes. So lets just move the cursor into the first line, press &lt;Shift&gt; and &lt;Down&gt; twice. It is enough the selection spans on arbitrary positions over the 3 lines in question. Now hit &lt;Alt&gt; and lets got for a ride Move the line with cursor (&lt;Up&gt; and &lt;Down&gt;) but also &lt;Left&gt; and &lt;Right&gt; the indent and dedent - which is especially handy if you move single lines (which doesn't even needs selection). </p>

<p>Some of the other  very simple but deeply practical features are doubling text and rectangular selection to editing several lines at ones. And its the many little  details like a search bar that can not cover text like a search dialog. which can be easily extended into replace bar and back. A block comment functions which comments all selected lines with '#~ ' so it doesn't  interfere with special comment (which you can still use with another command) and the space at the end of '#~' is also important so you can still read the commented code easily. Its not rocket science but lot of work and eye for details.</p>

<p>Good - now you know what I mean by editing. More features to come and the next stage (1.n releases) will have more than one doc, a little project handling and a config dialog. But let's not get ahead of ourselves again. Kephra is meant to be easy to use, configurable   hackable, but for deep feature sets you need integrate specialized tools.</p>]]>
    </content>
</entry>
  <entry>
  <title>Perl documentation audit project featured at conference</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl-doc-audit-featured-at-conference"/>
  <id>tag:news.perlfoundation.org,2022-09-24:/post/perl-doc-audit-featured-at-conference</id>
  <published>2022-09-24T07:08:00</published>
  <updated>2022-09-24T07:08:00</updated>
  <summary>
  <![CDATA[
     Khawar Latif presented the findings of his Google Season of Docs perl documentation audit at the IEEE ProComm 2022 and the conference paper, Documentation in Open-Source Organizations: Content Audit and Gap Analysis for Perl, is now published at IEEExplore. Khawar said: “Thanks to Jason McIntosh, Makoto Nozaki and Dan Book for their support, and everyone who helped with the project. I hope this helps Perl and Open Source organizations in 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Projects" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Khawar Latif presented the findings of his Google Season of Docs perl documentation audit at the <a href="https://attend.ieee.org/procomm-2022/schedule/">IEEE ProComm 2022</a> and the conference paper, Documentation in Open-Source Organizations: Content Audit and Gap Analysis for Perl, is now published at<a href="https://ieeexplore.ieee.org/abstract/document/9881679"> IEEExplore</a>.</p>

<p>Khawar said: “Thanks to Jason McIntosh, Makoto Nozaki and Dan Book for their support, and everyone who helped with the project. I hope this helps Perl and Open Source organizations in general.”</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>My Perl Weekly Challenge</title>
    <link rel="alternate" href="http://blogs.perl.org/users/al_newkirk/2022/09/my-perl-weekly-challenge.html"/>
    <id>tag:blogs.perl.org,2022:/users/al_newkirk//829.10902</id>
    <published>2022-09-23T18:58:40Z</published>
    <updated>2022-09-23T18:59:47Z</updated>
    <author>
        <name>awncorp</name>
        
    </author>
    <category term="functional" label="functional" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="objectoriented" label="object-oriented" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl5" label="perl5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="signatures" label="signatures" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/al_newkirk/">
        <![CDATA[<h2>Really, how hard could it be?</h2>

<p>All this talk about <a href="https://dev.to/iamalnewkirk/types-objects-and-systems-oh-my-27hk">types, objects, and systems</a>, got me to thinking, <em>"what would it take to create a 100% backwards-compatible pure Perl proof-of-concept for optionally typable subroutine signatures"</em>. I mean really, how hard could it be? So I started sketching out some ideas and here's what I came up with:</p>

<pre><code>use typing;

sub greet :Function(string, number) :Return() {
  my ($name, $count) = &amp;_;

  print "Hi $name, you have $count messages waiting ...\n";
}
</code></pre>

<p>This final sketch felt very Perlish and I had an inkling that I might be able to tie all the concepts being used together, and I did. It actually works, and it's fast. Let's break down what's actually happening here.</p>

<pre><code>use typing;
</code></pre>

<p>I don't particularly like or care about the name, I had to call it something, the code is about resolving types, so I called it <em>"typing"</em>. When you import the package the framework installs two magic symbols. Oh, yes, btw, once I made it all work, I decided to extend it so that any type or object system could hook into it to allow the resolution of their own types using this system, so yes, it's a framework.</p>

<pre><code>sub greet :Function(string, number) :Return();
</code></pre>

<p>The <em>"greet"</em> subroutine is just a plain ole subroutine. No source filter, no Perl keyword API, no XS, no high-magic. Here we're using old school "attributes" to annotate the subroutine and denote whether it's a function or method, and whether it has a return value or not.</p>

<pre><code>sub greet :Method(object, string) :Return(object);
</code></pre>

<p>Declaring a subroutine as a method doesn't do anything special. No automagic unpacking, no implied/inferred first argument. The same is true for the <em>"return"</em> declaration. In fact, the annotations aren't involved in the execution of your program unless to you use the magic <em>"unpacker"</em> function.</p>

<pre><code># use this ...
my ($name, $count) = &amp;_;

# instead of this ...
my ($name, $count) = @_;
</code></pre>

<p>This works due to a little-known Perl trick that only the most neck-beardiest of Perl hackers understand, and me, which is what happens when you call a subroutine using the ampersand without any arguments, i.e. you can operate on the caller's argument list. By naming the function <code>_</code>, and requiring the use of the ampersand, we've created a cute little synonym for the <code>@_</code> variable.</p>

<pre><code>sub greet :Function(string, number) :Return() {
  my ($name, $count) = &amp;_;
  # ...
}
</code></pre>

<p>Here's what's happening. The <em>"unpacker"</em> function gets the typed argument list for the calling subroutine, i.e. it gets its signature, then it iterates over the arguments calling the configured validator for each type expression specified at each position in the argument list.</p>

<pre><code>greet() # error
greet({}) # error
greet('bob') # error
greet('bob', 2) # sweet :)
</code></pre>

<p>But what happens if you provide more arguments than the signature has type expressions for? The system is designed to use the last type specified to validate all out-of-bounds arguments, which means <code>greet('bob', 2..10)</code> works and passes the type checks, but <code>greet('bob', 2, 'bob', 2)</code> doesn't because the second <code>'bob'</code> isn't a number. Make sense? Right, but what about the framework bit? First, let's see what it looks like to hook into the framework as a one-off:</p>

<pre><code>use typing;

typing::set_spaces('main', 'main');

sub main::string::make {
  # must return (value, valid?, explanation)
  ($_[0], 1, '')
}

sub greet :Function(string) {
  my ($name) = &amp;_;
  print "Hi $name\n";
}
</code></pre>

<p>This example is one of the simplest hooks. The <code>set_spaces</code> function says, the caller is the "main" package, and we should look for types under the <em>"main"</em> namespace by prefixing the type name with <em>"main"</em> and looking for a subroutine called "make". The <em>"make"</em> subroutine must return a list in the form of <code>(value, valid?, explanation)</code>. This approach expects each type to correspond to a package (with a <em>"make"</em> routine), but maybe you like the type library/registry approach. Another way to hook into the system is to bring your own resolver:</p>

<pre><code>use typing;

typing::set_resolver('main', ['main', 'resolver']);

sub resolver {
  # accepts (package, type-expr, value)
  # returns (value, valid?, explanation)
  # maybe you'll do something like $registry-&gt;get(type-expr)-&gt;validate(value)
  ($_[0], 1, '')
}

sub greet :Function(string) {
  my ($name) = &amp;_;
  print "Hi $name\n";
}
</code></pre>

<p>This example uses the <code>set_resolver</code> function and says, the caller is the <em>"main"</em> package, and we should resolve <strong>all</strong> types in the <em>"main"</em> package using the <code>main::resolver</code> subroutine. The resolver must return a list in the form of <code>(value, valid?, explanation)</code>. But wait, there's more, ... we can use the framework's API to get the subroutine metadata to further automate our programs, for example:</p>

<pre><code>use typing;

typing::retrieve('main', 'method', 'greet')
# [
#   'MyApp::Object',
#   'string',
#   'number'
# ]

typing::retrieve('main', 'return', 'greet')
# [
#   'MyApp::Object'
# ]

sub greet :Function(MyApp::Object, string, number) :Return(MyApp::Object) {
  # ...
}
</code></pre>

<p>I'm supposed to be working on a completely different project right now, but this idea captivated me and so I lost a couple of days of productivity. Maybe others will find this idea interesting. <a href="https://github.com/awncorp/typing">If you're interested in the source code for this concept you can find it here!</a></p>

<h2>Sources</h2>

<p><strong>Type libraries</strong></p>

<p><a href="https://metacpan.org/pod/MooseX::Types">MooseX::Types</a></p>

<p><a href="https://metacpan.org/pod/Type::Tiny">Type::Tiny</a></p>

<p><a href="https://metacpan.org/pod/Specio">Specio</a></p>

<p><strong>Subroutine signatures</strong></p>

<p><a href="https://metacpan.org/pod/Function::Parameters">Function::Parameters</a></p>

<p><a href="https://metacpan.org/pod/Method::Signatures">Method::Signatures</a></p>

<p><a href="https://metacpan.org/pod/routines">registry/routines</a></p>

<h2>End Quote</h2>

<p>"Software is like art and the only justification you need for creating it is, 'because I felt like it'" - Andy Wardley</p>

<h2>Authors</h2>

<p>Awncorp, <code>awncorp@cpan.org</code></p>
]]>
        

    </content>
</entry>
  <entry>
    <title> TPF launches merch store for Perl 5</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/09/tpf-launches-merch-store-for-perl-5.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10903</id>
    <published>2022-09-23T17:40:37Z</published>
    <updated>2022-09-23T17:44:14Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <category term="merch" label="merch" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="swag" label="swag" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="tpf" label="tpf" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>TPF has launched an <a href="https://news.perlfoundation.org/post/tpf-merch-store">online store</a> with Perl merchandise (swag) celebrating the Perl 5.36 release. The marketing committee plan to do a custom celebratory collection for each release of Perl with revenue from each sale goes to TPF's Perl fund.</p>

<p>The store includes long- and short-sleeved t-shirts, sweatshirts, hoodies and stickers - all featuring a new Raptor image for the 5.36 release.</p>

<p><img alt="800.jpg" src="http://blogs.perl.org/users/dean/800.jpg" width="400" height="400" class="mt-image-none" style="" /><img alt="a800.jpg" src="http://blogs.perl.org/users/dean/a800.jpg" width="400" height="400" class="mt-image-none" style="" /></p>

<p>From: <a href="https://news.perlfoundation.org/post/tpf-merch-store">https://news.perlfoundation.org/post/tpf-merch-store</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>My Perl Weekly Challenge</title>
    <link rel="alternate" href="https://dev.to/iamalnewkirk/my-perl-weekly-challenge-3dan" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Really, how hard could it be?
&lt;/h2&gt;

&lt;p&gt;All this talk about &lt;a href="https://dev.to/iamalnewkirk/types-objects-and-systems-oh-my-27hk"&gt;types, objects, and systems&lt;/a&gt;, got me to thinking, &lt;em&gt;"what would it take to create a 100% backwards-compatible pure Perl proof-of-concept for optionally typable subroutine signatures"&lt;/em&gt;. I mean really, how hard could it be? So I started sketching out some ideas and here's what I came up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;:Function(string, number) :Return() {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;, you have &lt;/span&gt;&lt;span class="si"&gt;$count&lt;/span&gt;&lt;span class="s2"&gt; messages waiting ...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This final sketch felt very Perlish and I had an inkling that I might be able to tie all the concepts being used together, and I did. It actually works, and it's fast. Let's break down what's actually happening here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't particularly like or care about the name, I had to call it something, the code is about resolving types, so I called it &lt;em&gt;"typing"&lt;/em&gt;. When you import the package the framework installs two magic symbols. Oh, yes, btw, once I made it all work, I decided to extend it so that any type or object system could hook into it to allow the resolution of their own types using this system, so yes, it's a framework.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;Function&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;number&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;"greet"&lt;/em&gt; subroutine is just a plain ole subroutine. No source filter, no Perl keyword API, no XS, no high-magic. Here we're using old school "attributes" to annotate the subroutine and denote whether it's a function or method, and whether it has a return value or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;Method&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;object&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;Return&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;object&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Declaring a subroutine as a method doesn't do anything special. No automagic unpacking, no implied/inferred first argument. The same is true for the &lt;em&gt;"return"&lt;/em&gt; declaration. In fact, the annotations aren't involved in the execution of your program unless to you use the magic &lt;em&gt;"unpacker"&lt;/em&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# use this ...&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# instead of this ...&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works due to a little-known Perl trick that only the most neck-beardiest of Perl hackers understand, and me, which is what happens when you call a subroutine using the ampersand without any arguments, i.e. you can operate on the caller's argument list. By naming the function &lt;code&gt;_&lt;/code&gt;, and requiring the use of the ampersand, we've created a cute little synonym for the &lt;code&gt;@_&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;:Function(string, number) :Return() {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what's happening. The &lt;em&gt;"unpacker"&lt;/em&gt; function gets the typed argument list for the calling subroutine, i.e. it gets its signature, then it iterates over the arguments calling the configured validator for each type expression specified at each position in the argument list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="nv"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="nv"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="nv"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# sweet :)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what happens if you provide more arguments than the signature has type expressions for? The system is designed to use the last type specified to validate all out-of-bounds arguments, which means &lt;code&gt;greet('bob', 2..10)&lt;/code&gt; works and passes the type checks, but &lt;code&gt;greet('bob', 2, 'bob', 2)&lt;/code&gt; doesn't because the second &lt;code&gt;'bob'&lt;/code&gt; isn't a number. Make sense? Right, but what about the framework bit? First, let's see what it looks like to hook into the framework as a one-off:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nn"&gt;typing::&lt;/span&gt;&lt;span class="nv"&gt;set_spaces&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;::string::make {&lt;/span&gt;
  &lt;span class="c1"&gt;# must return (value, valid?, explanation)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'')&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;:Function(string) {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example is one of the simplest hooks. The &lt;code&gt;set_spaces&lt;/code&gt; function says, the caller is the "main" package, and we should look for types under the &lt;em&gt;"main"&lt;/em&gt; namespace by prefixing the type name with &lt;em&gt;"main"&lt;/em&gt; and looking for a subroutine called "make". The &lt;em&gt;"make"&lt;/em&gt; subroutine must return a list in the form of &lt;code&gt;(value, valid?, explanation)&lt;/code&gt;. This approach expects each type to correspond to a package (with a &lt;em&gt;"make"&lt;/em&gt; routine), but maybe you like the type library/registry approach. Another way to hook into the system is to bring your own resolver:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nn"&gt;typing::&lt;/span&gt;&lt;span class="nv"&gt;set_resolver&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;']);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;resolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# accepts (package, type-expr, value)&lt;/span&gt;
  &lt;span class="c1"&gt;# returns (value, valid?, explanation)&lt;/span&gt;
  &lt;span class="c1"&gt;# maybe you'll do something like $registry-&amp;gt;get(type-expr)-&amp;gt;validate(value)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'')&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;:Function(string) {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example uses the &lt;code&gt;set_resolver&lt;/code&gt; function and says, the caller is the &lt;em&gt;"main"&lt;/em&gt; package, and we should resolve &lt;strong&gt;all&lt;/strong&gt; types in the &lt;em&gt;"main"&lt;/em&gt; package using the &lt;code&gt;main::resolver&lt;/code&gt; subroutine. The resolver must return a list in the form of &lt;code&gt;(value, valid?, explanation)&lt;/code&gt;. But wait, there's more, ... we can use the framework's API to get the subroutine metadata to further automate our programs, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nn"&gt;typing::&lt;/span&gt;&lt;span class="nv"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;
&lt;span class="c1"&gt;# [&lt;/span&gt;
&lt;span class="c1"&gt;#   'MyApp::Object',&lt;/span&gt;
&lt;span class="c1"&gt;#   'string',&lt;/span&gt;
&lt;span class="c1"&gt;#   'number'&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;

&lt;span class="nn"&gt;typing::&lt;/span&gt;&lt;span class="nv"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;return&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;
&lt;span class="c1"&gt;# [&lt;/span&gt;
&lt;span class="c1"&gt;#   'MyApp::Object'&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;:Function(MyApp::Object, string, number) :Return(MyApp::Object) {&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm supposed to be working on a completely different project right now, but this idea captivated me and so I lost a couple of days of productivity. Maybe others will find this idea interesting. &lt;a href="https://github.com/awncorp/typing"&gt;If you're interested in the source code for this concept you can find it here!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Sources
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Type libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/MooseX::Types"&gt;MooseX::Types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Specio"&gt;Specio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subroutine signatures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Method::Signatures"&gt;Method::Signatures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/routines"&gt;registry/routines&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  End Quote
&lt;/h2&gt;

&lt;p&gt;"Software is like art and the only justification you need for creating it is, 'because I felt like it'" - Andy Wardley&lt;/p&gt;

&lt;h2&gt;
  
  
  Authors
&lt;/h2&gt;

&lt;p&gt;Awncorp, &lt;code&gt;awncorp@cpan.org&lt;/code&gt;&lt;/p&gt;

</content>
    <author>
      <name>Al Newkirk</name>
    </author>
    <id>https://dev.to/iamalnewkirk/my-perl-weekly-challenge-3dan</id>
    <published>2022-09-23T13:49:15Z</published>
    <updated>2022-09-23T13:49:15Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="functional"/>
    <category term="programming"/>
  </entry>
  <entry>
  <title>Dancer2: Exercise 3 - Simple Single-user TODO list AP</title>
  <summary type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2 video course</a>.
<p>
]]></summary>
  <updated>2022-09-23T11:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-exercise-3"/>  <id>https://perlmaven.com/dancer2-exercise-3</id>
  <content type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2 video course</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>TPF launches merch store</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tpf-merch-store"/>
  <id>tag:news.perlfoundation.org,2022-09-23:/post/tpf-merch-store</id>
  <published>2022-09-23T05:47:56</published>
  <updated>2022-09-23T05:47:56</updated>
  <summary>
  <![CDATA[
     TPF has launched an online store with Perl merchandise celebrating the Perl 5.36 release. The marketing committee plan to do a custom celebratory collection for each release of Perl with revenue from each sale going to TPF's Perl fund. The store includes long- and short-sleeved t-shirts, sweatshirts, hoodies and stickers all featuring a new Raptor image for the 5.36 release. **Please share the link via your socials! https://the-perl-store.creator-spring.com/** 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/15bf3bcaf1d1e4e46d0d712e647df3ada69d41a6/Raptor5.36.jpg" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPF has launched an <a href="https://the-perl-store.creator-spring.com/">online store</a> with Perl merchandise (swag) celebrating the Perl 5.36 release. The marketing committee plan to do a custom celebratory collection for each release of Perl with revenue from each sale going to TPF's Perl fund.</p>

<p>The store includes long- and short-sleeved t-shirts, sweatshirts, hoodies and stickers - all featuring a new Raptor image for the 5.36 release.</p>

<p><strong>Please share the link via your socials! https://the-perl-store.creator-spring.com/</strong>
<img src="_ra-rel-mnt_/simplecas/fetch_content/15bf3bcaf1d1e4e46d0d712e647df3ada69d41a6/Raptor5.36.jpg" style="max-width:100%;" /></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Class::Plain - Class Syntax for Hash-Based Perl OO</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/09/classplain---a-class-syntax-for-the-hash-based-perl-oo.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10901</id>
    <published>2022-09-23T03:08:14Z</published>
    <updated>2022-09-23T03:45:32Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p><a href="https://metacpan.org/pod/Class::Plain">Class::Plain</a> provides a class syntax for the hash-based Perl OO.</p>

<h2>Usage</h2>

<pre>
use Class::Plain;
 
class Point {
  field x;
  field y;
   
  method new : common {
    my $self = $class->SUPER::new(@_);
     
    $self->{x} //= 0;
    $self->{y} //= 0;
     
    return $self;
  }
   
  method move {
    my ($x, $y) = @_;
     
    $self->{x} += $x;
    $self->{y} += $y;
  }
   
  method describe {
    print "A point at ($self->{x}, $self->{y})\n";
  }
}
 
my $point = Point->new(x => 5, y => 10);
$point->describe;
</pre>

<p><b>Inheritance:</b></p>

<pre>
class Point3D : isa(Point) {
  field z;
   
  method new : common {
    my $self = $class->SUPER::new(@_);
     
    $self->{z} //= 0;
     
    return $self;
  }
   
  method move {
    my ($x, $y, $z) = @_;
     
    $self->SUPER::move($x, $y);
    $self->{z} += $z;
  }
   
  method describe {
    print "A point at ($self->{x}, $self->{y}, $self->{z})\n";
  }
}
 
my $point3d = Point3D->new(x => 5, y => 10, z => 15);
$point3d->describe;
</pre>

<p>See also the <a href="https://metacpan.org/pod/Class::Plain">Class::Plain document</a> and  the <a href="https://metacpan.org/pod/Class::Plain::Document::Cookbook">cookbook</a>.</p>

<h2>Comment of First Release</h2>

<p><a href="https://metacpan.org/pod/Class::Plain">Class::Plain</a> was released at 2022-09-22. </p>

<p>I'm strongly interested in Perl OO. I study <a href="https://github.com/Ovid/Corinna">Corinna</a> and <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> now.</p>

<p>A few weaks ago, I wondered "These class syntax can be applied to the traditional Perl hash-based OO modules. The syntax  can be used with the all existing modules".</p>

<p>I remembered many OO modules. Net::FTP, IO::Socket::INET, IO::Socket::IP, LWP::UserAgent, HTTP::Tiny, XML::Simple, Data::Page, CGI, Digest::MD5, Digest::SHA, Mojolicious, Catalyst, DBIx::Class etc .</p>

<p>And the existing modules for OO. Moo/Moose, Mojo::Base, Class::Accessor, Class::Accessor::Fast.</p>

<p>"Is my assumption correct?" I tried to create a module it was called <a href="https://metacpan.org/pod/Class::Plain">Class::Plain</a>.</p>

<p>I copied <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a>, and reduced the code except for the class, field, method keywords, and the internal data structure is changed from lexical variables to a hash reference(This contains a little lie because the hash reference is created dynamically).</p>

<p>And I completed the implementation of <a href="https://metacpan.org/pod/Class::Plain">Class::Plain</a> and released it to CPAN.</p>

<p>Comments are welcome!</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Class::Plain - Class Syntax for Hash-Based Perl OO</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/classplain-class-syntax-for-hash-based-perl-oo-4j6a" type="text/html"/>
    <content type="html">&lt;p&gt;Class::Plain was released at 2022-09-22.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Class::Plain;

class Point {
  field x;
  field y;

  method new : common {
    my $self = $class-&amp;gt;SUPER::new(@_);

    $self-&amp;gt;{x} //= 0;
    $self-&amp;gt;{y} //= 0;

    return $self;
  }

  method move {
    my ($x, $y) = @_;

    $self-&amp;gt;{x} += $x;
    $self-&amp;gt;{y} += $y;
  }

  method describe {
    print "A point at ($self-&amp;gt;{x}, $self-&amp;gt;{y})\n";
  }
}

my $point = Point-&amp;gt;new(x =&amp;gt; 5, y =&amp;gt; 10);
$point-&amp;gt;describe;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inheritance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Point3D : isa(Point) {
  field z;

  method new : common {
    my $self = $class-&amp;gt;SUPER::new(@_);

    $self-&amp;gt;{z} //= 0;

    return $self;
  }

  method move {
    my ($x, $y, $z) = @_;

    $self-&amp;gt;SUPER::move($x, $y);
    $self-&amp;gt;{z} += $z;
  }

  method describe {
    print "A point at ($self-&amp;gt;{x}, $self-&amp;gt;{y}, $self-&amp;gt;{z})\n";
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm strongly interested in Perl OO. I study Corinna and Object::Pad now.&lt;/p&gt;

&lt;p&gt;A few weaks ago, I wondered "These class syntax can be applied to the traditional Perl hash-based OO modules. The syntax can be used with the all existing modules".&lt;/p&gt;

&lt;p&gt;I remembered many OO modules. Net::FTP, IO::Socket::INET, IO::Socket::IP, LWP::UserAgent, HTTP::Tiny, XML::Simple, Data::Page, CGI, Digest::MD5, Digest::SHA, Mojolicious, Catalyst, DBIx::Class etc .&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blogs.perl.org/users/yuki_kimoto/2022/09/classplain---a-class-syntax-for-the-hash-based-perl-oo.html"&gt;Class::Plain - Class Syntax for Hash-Based Perl OO&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/classplain-class-syntax-for-hash-based-perl-oo-4j6a</id>
    <published>2022-09-22T22:56:07Z</published>
    <updated>2022-09-22T22:56:07Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Thank you Japan Perl Association</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/thank-you-jpa"/>
  <id>tag:news.perlfoundation.org,2022-09-22:/post/thank-you-jpa</id>
  <published>2022-09-22T11:27:49</published>
  <updated>2022-09-22T11:27:49</updated>
  <summary>
  <![CDATA[
     Japan Perl Association came up with an innovative idea to raise money for The Perl Foundation from their annual event, YAPC::Japan. To promote the online 2022 YAPC::Japan conference, the organizers chose to donate to TPF 5 yen per tweet that included #yapcjapan, and 300 yen per blog. Contributors raised 15,630 yen What a great way to raise money and also to raise awareness of their event. We understand JPA is 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Japan Perl Association (JPA) came up with an innovative idea to raise money for The Perl Foundation from their annual event, YAPC::Japan.</p>

<p>To promote the online <a href="https://yapcjapan.org/2022online/">2022 YAPC::Japan conference</a>, the organizers chose to donate to TPF 5 yen per tweet that included #yapcjapan, and 300 yen per blog. Contributors raised 15,630 yen (just over US$100). What a great way to raise money and also to raise awareness of their event.</p>

<p>We understand JPA is planning an in person conference in Kyoto March 2023. Watch this space.</p>

<p>Thank you Japan Perl Association!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Named Subroutine Arguments in Perl</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/named-subroutine-arguments-in-perl-2a3h" type="text/html"/>
    <content type="html">&lt;p&gt;Naming your subroutine arguments has benefits around increasing the readability of your code. Lets look at an example of code that can benefit from named arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;safe_open&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$die_on_failure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$die_on_failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error: failed to open '&lt;/span&gt;&lt;span class="si"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;': $!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following examples we can see that the third argument allows us to control if we should kill the program if the file cannot be opened:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;safe_open&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/file/that/doesnt/exist&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# error: failed to open '/file/that/doesnt/exist': No such file or directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;safe_open&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/file/that/doesnt/exist&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# print() on closed filehandle $fh at ./scratch.pl line 22.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine if somebody who has never worked with this code before comes across these calls to &lt;code&gt;&amp;amp;safe_open&lt;/code&gt;. It will be impossible for them to know what the third argument stands for unless they go and look at the actual code of the subroutine.&lt;/p&gt;

&lt;p&gt;To make it easier for people to understand the meaning of the arguments, we can name them!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;safe_open&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'',&lt;/span&gt;
        &lt;span class="s"&gt;MODE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'',&lt;/span&gt;
        &lt;span class="s"&gt;DIE_ON_FAILURE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error: missing FILE arg in call to &amp;amp;safe_open&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error: missing MODE arg in call to &amp;amp;safe_open&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;DIE_ON_FAILURE&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error: failed to open '&lt;/span&gt;&lt;span class="si"&gt;$args&lt;/span&gt;&lt;span class="s2"&gt;{FILE}': $!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets look at some examples of calling this subroutine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;safe_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/file/that/doesnt/exist&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;MODE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;DIE_ON_FAILURE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# error: failed to open '/file/that/doesnt/exist': No such file or directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;safe_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/file/that/doesnt/exist&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;MODE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# error: failed to open '/file/that/doesnt/exist': No such file or directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;safe_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;DIE_ON_FAILURE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/file/that/doesnt/exist&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;MODE&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# print() on closed filehandle $fh at ./scratch.pl line 25.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few things to note from these examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The arguments must be explicitly named using &lt;code&gt;ARG =&amp;gt; value&lt;/code&gt; syntax.&lt;/li&gt;
&lt;li&gt;  The argument order does not matter.&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;DIE_ON_FAILURE&lt;/code&gt; argument is optional and defaults to true.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;code&gt;&amp;amp;safe_open&lt;/code&gt; subroutine has these features because of the strategy used for constructing the &lt;code&gt;%args&lt;/code&gt; hash.&lt;/p&gt;

&lt;p&gt;The reason the argument order doesn't matter is because hashes are unordered and in the end we are constructing a hash out of the argument list.&lt;/p&gt;

&lt;p&gt;An array can be used to construct a hash as long as it has an even number of elements. We leverage this to use the &lt;code&gt;@_&lt;/code&gt; array to construct the &lt;code&gt;%args&lt;/code&gt; hash. Here is an example of this behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;hash{'foo'} = &lt;/span&gt;&lt;span class="si"&gt;$hash&lt;/span&gt;&lt;span class="s2"&gt;{'foo'}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;hash{'bar'} = &lt;/span&gt;&lt;span class="si"&gt;$hash&lt;/span&gt;&lt;span class="s2"&gt;{'bar'}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# $hash{'foo'} = 12&lt;/span&gt;
&lt;span class="c1"&gt;# $hash{'bar'} = 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are able to give default argument values because of the fact that, if a hash definition defines the same key multiple times, then the last definition is used. If the user leaves off an argument, then it is not redefined and stays set to the default. Consider this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;FOO&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;FOO&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;hash{'FOO'} = &lt;/span&gt;&lt;span class="si"&gt;$hash&lt;/span&gt;&lt;span class="s2"&gt;{'FOO'}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# OUTPUT:&lt;/span&gt;
&lt;span class="c1"&gt;# $hash{'FOO'} = 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="orgae697ad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Synopsis
&lt;/h1&gt;

&lt;p&gt;We can use the subroutines argument array (&lt;code&gt;@_&lt;/code&gt;) to construct a hash, which can give us significant benefits in terms of code readability. By constructing a hash from the argument array, all calls to the subroutine must explicitly name their arguments the argument order becomes irrelevant, and arguments can be given default values.&lt;/p&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/named-subroutine-arguments-in-perl-2a3h</id>
    <published>2022-09-22T01:13:39Z</published>
    <updated>2022-09-22T01:13:39Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) August 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_august_2022"/>
  <id>tag:news.perlfoundation.org,2022-09-21:/post/maintaining_perl_tonyc_august_2022</id>
  <published>2022-09-21T09:59:07</published>
  <updated>2022-09-21T09:59:07</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/08/01 Monday  0.17 #20005 review fixes  1.45 #19943 review, try to break and approve  0.72 #20008 review  1.17 #19964 work on ppport updates  3.51 2022/08/02 Tuesday  1.18 #19964 more ppport  1.33 #19964 more ppport  1.22 #19888 look at CI testing upstream blead modules on old  perls  3.73 2022/08/03 Wednesday  2.52 #19888 more module CI testing  1.85 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/08/01      Monday
 0.17           #20005 review fixes
 1.45           #19943 review, try to break and approve
 0.72           #20008 review</p>

<h1> 1.17           #19964 work on ppport updates</h1>

<p>3.51</p>

<p>2022/08/02      Tuesday
 1.18           #19964 more ppport
 1.33           #19964 more ppport
 1.22           #19888 look at CI testing upstream blead modules on old</p>

<h1>                perls</h1>

<p>3.73</p>

<p>2022/08/03      Wednesday
 2.52           #19888 more module CI testing
 1.85           #19888 more module CI testing, try to test with threaded</p>

<h1>                perls</h1>

<p>4.37</p>

<p>2022/08/04      Thursday
 1.23           #19931 research</p>

<h1> 1.37           #19888 module CI testing working, start on cleanup</h1>

<p>2.60</p>

<p>2022/08/08      Monday
 0.93           #19946 research and comment
 0.20           #20064 review and approve
 0.47           #20055 review and comments
 0.75           #20033 review, research and comment
 0.47           #19993 consider possible other optimizations
 0.18           #20005 review and comment
 1.18           #19888 squash some commits and push for CI, work on</p>

<h1>                integrating working workflow into the base testsuite.yml</h1>

<p>4.18</p>

<p>2022/08/09      Tuesday
 0.27           review github notifications
 1.15           #20060 try a fix, testing, comment
 0.10           #20033 follow-up comment
 0.02           #20055 review latest changes and approve
 2.10           #19888 yaml struggle time, get it working, porting fixes,</p>

<h1>                rebase and cleanup, push for (hopefully) final CI</h1>

<p>3.64</p>

<p>2022/08/10      Wednesday
 0.45           review github notifications
 0.40           #19888 review CI results and open PR #20006
 0.27           #20068 review and comment
 0.67           #20052 review and brief comments
 0.45           #20044 review and approve
 0.12           #20074 follow-up
 0.12           #20068 follow-up, check if some of the code is warning (it
                wasn’t)
 1.48           look into many warnings generated on cygwin, debug</p>

<h1>                initialization crash</h1>

<p>3.96</p>

<p>2022/08/11      Thursday
 2.87           more cygwin, debugging, make a reproducer, test code
                supplied by khw, report to cygwin mailing list, test
                another candidate
 0.10           #20079 review discussion
 0.55           #20074 update commit messages, testing, comment
 0.28           #20068 review latest changes and approve
 0.07           #20076 review latest changes and approve</p>

<h1> 0.38           #20052 more review and comment</h1>

<p>4.25</p>

<p>2022/08/12      Friday
 0.08           cygwin: follow-up response to list
 0.88           #20074 review comments and make changes to reflect some of</p>

<h1>                them</h1>

<p>0.96</p>

<p>2022/08/15      Monday
 0.67           testing, respond to message from bram about deps I added
                to win32/Makefile long ago
 1.22           #19851 testing
 1.98           #19851 only one error, look into it, work on a fix,</p>

<h1>                testing, push for CI</h1>

<p>3.87</p>

<p>2022/08/16      Tuesday
 0.67           #20033 review and comment
 0.47           #20060 try to track down cause of failing test
 1.42           #20060 more track down, find cause, re-work test, testing,
                push for CI</p>

<h1> 0.08           #19851 check CI results, open PR #20094</h1>

<p>2.64</p>

<p>2022/08/17      Wednesday
 0.15           #20060 check CI results, open PR #20103
 0.62           #20100 review, research and comment
 0.72           #20037 comment
 0.15           #20102 review and approve
 1.87           review class feature code, add a couple of assertion</p>

<h1>                failures to the discussions</h1>

<p>3.51</p>

<p>2022/08/18      Thursday
 1.88           #20103 respond to comment, add tests
 0.48           #20111 review and approve</p>

<h1> 1.13           more review class feature code</h1>

<p>3.49</p>

<p>2022/08/22      Monday
 0.88           github notifications
 1.42           #20103 research, work on changes, testing
 0.52           #20103 cleanup, push to update PR, comment</p>

<h1> 1.48           #19857 work on a fix</h1>

<p>4.30</p>

<p>2022/08/23      Tuesday
 0.23           github notifications
 0.25           #20133 review
 0.97           #20133 more review, try to understand the problem,
                testing, approve
 1.40           #19857 work on a possible fix, fixes assert, but sub not</p>

<h1>                found at eval runtime</h1>

<p>2.85</p>

<p>2022/08/24      Wednesday
 0.27           github notifications
 0.72           #20033 review, testing, comment
 0.42           #20144 review discussion, research and comment</p>

<h1> 1.67           #19857 debugging, testing, comment</h1>

<p>3.08</p>

<p>2022/08/25      Thursday
 0.40           #20144 follow-up
 0.28           #20037 consider whether recursion can break this
 0.53           #20033 review latest changes and apply to blead
 0.55           #20144 try to reproduce undefined symbol error, reproduce
 0.58           #20144 track down cause and comment</p>

<h1> 0.88           #19857 testing, work on commit message</h1>

<p>3.22</p>

<p>2022/08/28      Sunday</p>

<h1> 0.13           #20169 review and approve</h1>

<p>0.13</p>

<p>2022/08/29      Monday
 0.68           class feature code: open leonerd/perl5/issues/21
 0.18           github notifications
 1.17           #19857 refactor, push for CI
 0.63           #20177 review and comments
 1.32           #20143 review, try to demonstrate a problem on Win32,</p>

<h1>                build error with vs2022, build ok with 2019</h1>

<p>3.98</p>

<p>2022/08/30      Tuesday
 1.00           #20143 testing
 0.50           #20143 comment, try to reproduce build failure with
                updated vs2022 and fail
 0.95           #20185 review, realise related issue and create issue</p>

<h1>                20189</h1>

<p>2.45</p>

<p>2022/08/31      Wednesday
 0.30           #20103 apply to blead, perldelta
 0.10           #20074 apply to blead (I don’t think it needs it’s own
                perldelta)
 0.20           look into build warning and fix
 0.10           #19857 check CI results, make PR #20199
 0.20           #20186 research, comment
 0.27           #20185 review and approve
 0.08           #20183 briefly comment
 0.67           #20181 review and approve</p>

<h1> 1.05           #20179 review, testing, debugging and comment</h1>

<p>2.97</p>

<p>Which I calculate is 67.69 hours.</p>

<p>Approximately 35 tickets were reviewed or worked on, and 3 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Read section of a file</title>
  <summary type="html"><![CDATA[<p>
I was working on an example script that used a lot of calls to <span class="inline_code">seek</span>, but I kept bumping into bugs. I thought it might be a
useful debugging tool to be able to read and print any section of a file given the location of the first byte and the number of bytes.
<p>
So here is a quick script I put together.
<p>
]]></summary>
  <updated>2022-09-20T10:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/read-section-of-a-file"/>  <id>https://perlmaven.com/read-section-of-a-file</id>
  <content type="html"><![CDATA[<p>
I was working on an example script that used a lot of calls to <span class="inline_code">seek</span>, but I kept bumping into bugs. I thought it might be a
useful debugging tool to be able to read and print any section of a file given the location of the first byte and the number of bytes.
<p>
So here is a quick script I put together.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Types, Objects, and Systems, Oh my!</title>
    <link rel="alternate" href="https://dev.to/iamalnewkirk/types-objects-and-systems-oh-my-27hk" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Inextricably bound
&lt;/h2&gt;

&lt;p&gt;Perl isn't a strongly typed language, and its built-in types are limited and not generally accessible to the engineer, however, Perl supports various classes of data and in recent years has flirted with various ways of enabling runtime type checking.&lt;/p&gt;

&lt;p&gt;In a strongly typed language the tl;dr; case for declaring data types is memory management, compile-time code optimization, and correctness. To this day I'm both impressed and horrified by the number of errors caught when I implement some kind of type checking in my programs. When it comes to runtime type checking we're only concerned with enforcing correctness.&lt;/p&gt;

&lt;p&gt;Types, values, objects, signatures, and the systems that tie these all together, are all inextricably bound. They are necessarily interdependent in order to present/provide a cohesive and consistent system. Peeling back the layers a bit, types are merely classifications of data. Any given piece of data can be classified as belonging to a particular type whether implicit or explicit.&lt;/p&gt;

&lt;p&gt;Types are instantiated (i.e. have concrete representations, i.e. instances) whenever data is created and/or declared as conforming to the type's criteria.  Runtime types are arbitrary. A value of &lt;code&gt;1&lt;/code&gt; can be said to be of type number where the value &lt;code&gt;"1"&lt;/code&gt; can be said to be of the type string. Also in Perl, an object is a specific kind of reference; a reference tied to a particular namespace.&lt;/p&gt;

&lt;h2&gt;
  
  
  Runtime type libraries
&lt;/h2&gt;

&lt;p&gt;Currently, as per the CPAN, there are a few different ways to declare and use runtime type checking in your application. The three most popular libraries, in no particular order, are, &lt;a href="https://metacpan.org/pod/MooseX::Types"&gt;MooseX::Types&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Specio"&gt;Specio&lt;/a&gt;. All of these type libraries have Moo/se compatibility as their stated goal.&lt;/p&gt;

&lt;p&gt;MooseX::Types (2009) was designed to address the Moose global registry (and type conflict) problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MooseX::&lt;/span&gt;&lt;span class="nv"&gt;Types&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s"&gt;declare&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PositiveInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NegativeInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MooseX::Types::&lt;/span&gt;&lt;span class="nv"&gt;Moose&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;subtype&lt;/span&gt; &lt;span class="nv"&gt;PositiveInt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not larger than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;subtype&lt;/span&gt; &lt;span class="nv"&gt;NegativeInt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not smaller than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type::Tiny (2013), inspired by MooseX::Types, was designed to have a small footprint, a single non-core dependency, a set of "core" types as a standard library, and to have first-class support for use with Moo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Library&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Utils&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Types::Standard&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;declare&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PositiveInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not larger than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;declare&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NegativeInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not smaller than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specio (2013) is meant to be a replacement for Moose's built-in types, MooseX::Types, and the Moose global registry (and type conflict) problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Specio::&lt;/span&gt;&lt;span class="nv"&gt;Declare&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Specio::Library::&lt;/span&gt;&lt;span class="nv"&gt;Builtins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PositiveInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
  &lt;span class="s"&gt;where&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;message_generator&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not larger than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NegativeInt&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
  &lt;span class="s"&gt;where&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;message_generator&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Int is not smaller than 0&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What these libraries have in common is the concept of declaring custom types using a DSL and organizing and exporting types from one or more registries.  They also (in practice) produce registries that act as exporters that litter the calling package with use-once functions which require namespace::autoclean to get rid of. To be fair, both Type-Tiny and Specio have object-oriented interfaces that allow you to build types and registries without using the DSL.&lt;/p&gt;

&lt;h2&gt;
  
  
  Introducing Venus::Assert
&lt;/h2&gt;

&lt;p&gt;Meet Venus::Assert, a simple data type assertion class that could serve as the foundation for a future object-oriented type assertion and coercion system for Perl 5.&lt;/p&gt;

&lt;p&gt;Venus, the non-core object-oriented standard library, by necessity needs to be able to distinguish between different types of data. It's how the library is capable of distinguishing between the number &lt;code&gt;1&lt;/code&gt;, the string &lt;code&gt;1&lt;/code&gt;, and the conventional boolean &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Venus::Assert wraps that know-how in an intuitive utility class that behaves in the tradition of its siblings and provides the foundations for a future Venus-based unified type checking system.&lt;/p&gt;

&lt;p&gt;Because Venus::Assert is a Venus utility class it can, without any additional code, complexity, or effort, throw itself, catch itself, try itself, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throws itself&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;PositiveNum&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Catches itself&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NegativeNum&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tries itself&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$tryable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;PositiveNum&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;try&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Venus::Assert doesn't have a DSL, doesn't support or encourage type registries, doesn't concern itself with inlining, and doesn't declare parent types to be extended. Venus::Assert instances are simple code-convertible objects built on Venus::Match for powerful object-oriented case/switch operations. Code-convertible custom types can be declared as plain ole packages which conform to a particular interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MyApp::Type::&lt;/span&gt;&lt;span class="nv"&gt;PositiveNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Venus::Assert&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;conditions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Extending custom types with proper names and explanations (on failure) by doing something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MyApp::Type::&lt;/span&gt;&lt;span class="nv"&gt;PositiveNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Venus::Assert&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Type assertion (%s) failed, expects a number &amp;gt; 0, received (%s)&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;conditions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Types::Standard via Venus::Assert
&lt;/h2&gt;

&lt;p&gt;We could easily use Venus::Assert to approximate 90% of what the Type::Tiny Types::Standard library does, with a few lines of code. For example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;on_none&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Bool&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;boolean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Maybe[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;maybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;maybe&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Undef&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;undef&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Defined&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;ref&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Str&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Num&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ClassName&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;package&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;constraints&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;where&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Space&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;loaded&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ref[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;reference&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ScalarRef[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;scalar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ArrayRef[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HashRef[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CodeRef&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;RegexpRef&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;regexp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GlobRef&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;ref&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GLOB&lt;/span&gt;&lt;span class="p"&gt;'})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Object&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tuple[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;InstanceOf[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ConsumerOf[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;consumes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HasMethods[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;StrMatch[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;deduce&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Enum[a]&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Venus::&lt;/span&gt;&lt;span class="nv"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  The state of the art
&lt;/h2&gt;

&lt;p&gt;Again, types, objects, signatures, and systems, are inextricably bound which means that a good system will provide both architecture and abstractions to support interoperability, or at least declare its way as the one true way. What we have today is an assortment of libraries that tackle a particular aspect of the "runtime type checking" system. Your mileage may vary with regard to interoperability.&lt;/p&gt;

&lt;p&gt;Moo/se allows you to type constrain class attributes using MooseX::Types, Type::Tiny, and/or Specio, etc. Moose (last time I check) uses a single global type registry and isn't designed to play nice with others. Moo, to its credit, provides a simple system-agnostic interface, i.e. accepts code-convertible values, which Type::Tiny takes full advantage of. Type::Tiny goes through some pains (IMHO) to make itself Moose-aware and interoperable. None of these libraries prescribed a methodology for reusing the declared types in function/method signatures. Method::Signatures provides function and method signatures but only supports Moose types (as per its global registry).  Function::Parameters goes a bit further and does provide an abstraction for hooking into the type resolution mechanism as well as the ability to use local functions in signature type notations.&lt;/p&gt;

&lt;p&gt;The Perl "signatures" feature provided bare-bones untyped/untypable signatures, and is little more than syntactic sugar for argument unpacking. The registry/routines pragmas attempt to bring together Function::Parameters and Type::Tiny to provide a unified system for runtime type checking. All of the type libraries support parameterized type declarations, and yet none of the signature pragmas/parsers do.&lt;/p&gt;

&lt;h2&gt;
  
  
  The future, hopefully
&lt;/h2&gt;

&lt;p&gt;To have proper compile-time types (which are extendable), they need to be built into the language, in which case you'll likely end up with something like Raku.&lt;/p&gt;

&lt;p&gt;To have proper runtime types which feel natural and legit in Perl 5 we need to nail the interoperability problem, and to do that we need to devise a standard that allows systems to cooperate.&lt;/p&gt;

&lt;p&gt;We need package fields, objects, properties, values, and subroutine signatures to be capable of using the same vocabulary and type notation to declare type constraints, thus recognizing and accepting the same types and data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's an idea&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A type is simply a package with "check" and "make" routines&lt;/li&gt;
&lt;li&gt;The "check" routine accepts any value and returns a tuple, i.e. (valid?, explanation)&lt;/li&gt;
&lt;li&gt;The "make" routine accepts any value and returns the value (possibly modified) and the result of the "check" routine, i.e. a tuple of (value, valid?, explanation)&lt;/li&gt;
&lt;li&gt;A "types" statement, appends the currently scoped &lt;code&gt;@TYPES&lt;/code&gt; global, allowing the use of shortnames when referring to types&lt;/li&gt;
&lt;li&gt;The "type" function accepts a string-based type expression, and any value, resolving the type expression and executing the type's "make" function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Declare custom type&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MyApp::Type::&lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;check&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a string&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Resolve custom type&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;materialized&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;types&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyApp::Type&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;String&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Governance rules and notation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No parameterized types&lt;/li&gt;
&lt;li&gt;Type resolution fallback to some "core" namespace if local &lt;code&gt;@TYPES&lt;/code&gt; global is empty&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Sources
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Object-systems&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Type libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/MooseX::Types"&gt;MooseX::Types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Specio"&gt;Specio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Type::Library"&gt;Type::Library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Types::Standard"&gt;Types::Standard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subroutine signatures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Method::Signatures"&gt;Method::Signatures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/routines"&gt;registry/routines&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  End Quote
&lt;/h2&gt;

&lt;p&gt;"Check yo' self before you wreck yo' self" - Ice Cube&lt;/p&gt;

&lt;h2&gt;
  
  
  Authors
&lt;/h2&gt;

&lt;p&gt;Awncorp, &lt;code&gt;awncorp@cpan.org&lt;/code&gt;&lt;/p&gt;

</content>
    <author>
      <name>Al Newkirk</name>
    </author>
    <id>https://dev.to/iamalnewkirk/types-objects-and-systems-oh-my-27hk</id>
    <published>2022-09-19T20:12:22Z</published>
    <updated>2022-09-19T20:12:22Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="programming"/>
    <category term="tooling"/>
  </entry>
  <entry>
    <title>Things I learned at PGDay Austria</title>
    <link href="http://domm.plix.at/perl/2022_09_things_i_learned_at_pgday.html"/>
    <id>http://domm.plix.at/perl/2022_09_things_i_learned_at_pgday.html</id>
    <updated>2022-09-19T16:42:27+00:00</updated>
    <category term="perl"/>
    <summary type="html">On Friday 16th the third PGDay Austria took place in Vienna. PGday is a single day PostgreSQL conference with a German and an English track. As I'm using Postgres as my preferred database engine, and </summary>
    <content type="html">&lt;p&gt;On Friday 16th the third &lt;a href="https://pgday.at"&gt;&lt;span class="caps"&gt;PGD&lt;/span&gt;ay Austria&lt;/a&gt; took place in Vienna. PGday is a single day PostgreSQL conference with a German and an English track. As I'm using Postgres as my preferred database engine, and also on our &lt;a href="https://balloon-events.com/"&gt;most recent project&lt;/a&gt; I decided (on rather short notice) to attend.&lt;/p&gt;

&lt;p&gt;Here's what I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everybody suffers from the &lt;a href="https://pgday.at/talks/solving-the-knapsack-problem/"&gt;knapsack problem&lt;/a&gt;, even if you don't know what it is&lt;ul&gt;
&lt;li&gt;Francesco Tisiot used this problem (i.e. packing stuff into your backpack) to give a nice introduction to recursive queries&lt;/li&gt;
&lt;li&gt;He has been "fighting against the Excel lobby" for too long (I hear you!)&lt;/li&gt;
&lt;li&gt;Besides the hand-drawn images I found it amusing how the font size of the &lt;span class="caps"&gt;SQL &lt;/span&gt;got smaller during the talk&lt;/li&gt;
&lt;li&gt;Postgres 14 has a few nice optimisations (&lt;code&gt;SEARCH&lt;/code&gt;, &lt;code&gt;CYCLE&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are a lot of &lt;a href="https://pgday.at/talks/sinnvolle-postgresql-extensions/"&gt;useful Postgres extensions&lt;/a&gt; already in contrib (so no need to install extra stuff)&lt;ul&gt;
&lt;li&gt;Even after 20 years of giving talks, Hans-Jürgen Schönig is not safe from projector problems. But having some experience makes it less stressful for the speaker and fun for the audience...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pg_stat_statements&lt;/code&gt; is a must-have&lt;/li&gt;
&lt;li&gt;"The reason for performance problems is always a query" (so logging query stats helps!)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;citext&lt;/code&gt; for case insensitive searches with very little overhead. But: "a little overhead is still better than no result"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pg_trgrm&lt;/code&gt; for similarity matching using trigrams. Can also be indexed (&lt;code&gt;... USING GIST(col gist_trgm_ops)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy from program&lt;/code&gt; seems nice (though dangerous)&lt;/li&gt;
&lt;li&gt;More to check out: &lt;code&gt;pgstattuple&lt;/code&gt;, &lt;code&gt;pg_qualstats&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is a lot of Open Data available&lt;ul&gt;
&lt;li&gt;Unfortunately a lot if it is in not very usable formats, lacking docs, or can currently only be understood by humans&lt;/li&gt;
&lt;li&gt;Karen Jex is working on a way to &lt;a href="https://pgday.at/talks/unlocking-open-data/"&gt;Unlock Open Data using an Open Source Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There is a site called &lt;a href="https://findaphd.com"&gt;findaphd.com&lt;/a&gt; (not I have anything to do with academia)&lt;/li&gt;
&lt;li&gt;It's pity we have to spend so much time on figuring out what each open data set means. If only the authors would have spend a little more time to properly document / annotate the data...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One can use &lt;a href="https://pgday.at/talks/pg-hint-plan/"&gt;pg_hint_plan&lt;/a&gt; for further insights into and hints to the query planer&lt;ul&gt;
&lt;li&gt;I haven't had any need for that yet.&lt;/li&gt;
&lt;li&gt;But it's nice that you can use unicode characters for table aliases: &lt;code&gt;select 🍎.name,🍌.price from apple as 🍎 left join banana as 🍌 ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Postgres has a some / a lot &lt;a href="https://pgday.at/talks/postgres-pitfalls/"&gt;pitfalls&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;schema public&lt;/code&gt; is quite public, so (for postgres &amp;lt; 15) do &lt;code&gt;revoke all on schema public from public;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;hba&lt;/code&gt; in &lt;code&gt;pg_hba.conf&lt;/code&gt; stands for Host Based Access (I was wondering about that for a long time, but always to lazy to look it up..)&lt;/li&gt;
&lt;li&gt;better use &lt;code&gt;scram-sha-256&lt;/code&gt; than &lt;code&gt;md5&lt;/code&gt; in that file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigserial&lt;/code&gt; probably makes more sense than &lt;code&gt;serial&lt;/code&gt; (IIRC we were using &lt;code&gt;bigserial&lt;/code&gt; in a rather old project, but I stopped using it for recent ones, no idea why..)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://pgday.at/talks/strategies-for-optimizing-materialized-views/"&gt;Strategies for optimizing materialized views for speed and timeliness&lt;/a&gt; seem to mostly apply to &lt;a href="https://www.timescale.com/"&gt;TimescaleDB&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;which looks interesting and I wanted to check it out for some time now&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REFRESH MATERIALIZED VIEW CONCURRENTLY&lt;/code&gt; will probably still be useful.&lt;/li&gt;
&lt;li&gt;Another interesting extension: &lt;code&gt;pg_cron&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I did not find the keynotes especially interesting&lt;ul&gt;
&lt;li&gt;They where mostly sponsor presentations, not the weird masterpieces of talks I'm used to from Perl conferences.&lt;/li&gt;
&lt;li&gt;But still, fair enough to give the sponsors some time to present themselves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I did not like the hat in the goodie bag (seems a bit wasteful, and the design will prevent any non-ironic use)&lt;/li&gt;
&lt;li&gt;Besides that it was another very nice conference!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to the orgas, speakers, sponsors and attendees!&lt;/p&gt;</content>
    <category term="event"/>
    <category term="PostgreSQL"/>
  </entry>
  <entry>
  <title>Dancer2: Before and After Hooks</title>
  <summary type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2 video course</a>.
<p>
]]></summary>
  <updated>2022-09-19T10:27:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hooks"/>  <id>https://perlmaven.com/dancer2-hooks</id>
  <content type="html"><![CDATA[<p>
Part of the <a href="/dancer">Dancer2 video course</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#582 - Grandfather’s Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/582.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;Few months ago, there was a blog post &lt;a href="https://stackoverflow.blog/2022/07/06/why-perl-is-still-relevant-in-2022"&gt;Why Perl is still relevant in 2022&lt;/a&gt; created a lot of noise among the &lt;strong&gt;Perl&lt;/strong&gt; community. The author clearly missed the point. If you check the comments section, you can see how, White Camel Awardee, &lt;strong&gt;Dave Cross&lt;/strong&gt; and few others responed to the post.&lt;/p&gt;
&lt;p&gt;I was pleasantly surprised when I found out that &lt;strong&gt;Dave&lt;/strong&gt; came up with perfect response to the other blog post with this &lt;a href="https://stackoverflow.blog/2022/09/08/this-is-not-your-grandfathers-perl"&gt;This is not your grandfather’s Perl&lt;/a&gt;. It has already created positive noise. If you want to take a closer look at the recent changes to the latest release of &lt;/strong&gt;Perl v5.36&lt;/strong&gt; then please do checkout the &lt;a href="https://github.com/manwar/perl-cool-snippets"&gt;GitHub repository&lt;/a&gt; sharing the changes with example. By the way, it is not just limited to &lt;strong&gt;v5.36&lt;/strong&gt;. You will find plenty more to keep you busy.&lt;/p&gt;
&lt;p&gt;Talking about &lt;strong&gt;Perl&lt;/strong&gt;, we got another gem from &lt;strong&gt;Curtis Poe&lt;/strong&gt; sharing the &lt;a href="https://ovid.github.io/articles/current-corinna-status.html"&gt;Current Corinna Status&lt;/a&gt;. If you can't wait for &lt;strong&gt;Corinna&lt;/strong&gt;, I would suggest you take a look at &lt;strong&gt;CPAN&lt;/strong&gt; module &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt; by &lt;strong&gt;Paul Evans&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Last but not the least, today, &lt;strong&gt;Monday 19 September&lt;/strong&gt;, the date of &lt;strong&gt;Her Majesty Queen Elizabeth II's State Funeral&lt;/strong&gt; declared as National Bank Holiday. Please checkout the rest of the newsletter.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/582.html</id>
    <published>2022-09-19T10:00:00Z</published>
    <updated>2022-09-19T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Deepest Common Index</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/09/18#pwc182" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers. Write a script to find the index of the first biggest 
number in the list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36; 
use strict;
use warnings;

sub index_biggest{
    my(@numbers) = @_;
    my @sorted = sort {$b &lt;=&gt; $a} @numbers; 
    map { return $_ if $numbers[$_] == $sorted[0] } 0 .. @numbers - 1; 
}

MAIN:{
    my @n;
    @n = (5, 2, 9, 1, 7, 6);
    print index_biggest(@n) . "\n";  
    @n = (4, 2, 3, 1, 5, 0);  
    print index_biggest(@n) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Essentially this solution is two lines, and could even have been a one liner. All that is 
required is to &lt;code&gt;sort&lt;/code&gt; the array of numbers and then determine the index of the first 
occurrence of the largest value from the original list. Finding the index of the first
occurrence can be done using a &lt;code&gt;map&lt;/code&gt; with a &lt;code&gt;return&lt;/code&gt; to short circuit the search as soon
as the value is found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Given a list of absolute Linux file paths, determine the deepest path to the directory 
that contains all of them.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub deepest_path{
    my(@paths) = @_;
    my @sub_paths = map { [split(/\//, $_)] } @paths; 
    my @path_lengths_sorted = sort { $a &lt;=&gt; $b } map { 0 + @{$_} } @sub_paths;    
    my $deepest_path = q//; 
    for my $i (0 .. $path_lengths_sorted[0] - 1){
        my @column =  map { $_-&gt;[$i] } @sub_paths;
        my %h;
        map { $h{$_} = undef } @column;
        $deepest_path .= (keys %h)[0] . q#/# if 1 == keys %h;  
    }  
    chop $deepest_path;
    return $deepest_path;  
}

MAIN:{
    my $data = do{
        local $/;
        &amp;lt;DATA&amp;gt;; 
    };
    my @paths = split(/\n/, $data);  
    print deepest_path(@paths) . "\n"; 
}

__DATA__
/a/b/c/1/x.pl
/a/b/c/d/e/2/x.pl
/a/b/c/d/3/x.pl
/a/b/c/4/x.pl
/a/b/c/d/5/x.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
/a/b/c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is fairly straightforward but I will admit that it may look more complex
than it truly is if you simply glance at the code.&lt;/p&gt;

&lt;p&gt;To summarize what is going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We read in the file paths, one path (string) per line.
&lt;/li&gt;
&lt;li&gt;The paths are sent to &lt;code&gt;deepest_path()&lt;/code&gt; where we create a 2d array. Each array element
is an array reference of file sub paths. For example here &lt;code&gt;$sub_paths[0]&lt;/code&gt; is 
&lt;code&gt;[a, b, c, 1, x.pl]&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;We sort the lengths of all the sub path array references to know how far we must search.
We need only look as far as the shortest path after all.
&lt;/li&gt;
&lt;li&gt;At each iteration we take column wise slices.
&lt;/li&gt;
&lt;li&gt;For each column wise slice we check if all the sub paths are equal. We do this but 
putting all the sub path values into a hash as keys. If we have only one key value when 
done we know all the values are equal.
&lt;/li&gt;
&lt;li&gt;As long as tall the sub paths are equal we accumulate it in &lt;code&gt;$deepest_path&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$deepest_path&lt;/code&gt; is returned when we are doing examining all sub paths. (We &lt;code&gt;chop&lt;/code&gt; the 
trailing &lt;code&gt;/&lt;/code&gt;). Done!
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-182/"&gt;Challenge 182&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc182</id>
    <published>2022-09-18T20:17:00-04:00</published>
    <updated>2022-09-18T20:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #176</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-176/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 176 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-176/</id>
    <published>2022-09-19T00:00:00Z</published>
    <updated>2022-09-19T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-48001363750799679</id>
    <published>2022-09-17T22:22:00.000+02:00</published>
    <updated>2022-09-17T22:22:29.894+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdx) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ZMUGHAL/Devel-IPerl-0.012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::IPerl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl language kernel for Jupyter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.012&lt;/strong&gt; on 2022-09-14&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.011 was 8 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.004002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004002&lt;/strong&gt; on 2022-09-16&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.004001 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.37&lt;/strong&gt; on 2022-09-15&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.36 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/JSON-MaybeXS-1.004004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::MaybeXS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Use Cpanel::JSON::XS with a fallback to JSON::XS and JSON::PP &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004004&lt;/strong&gt; on 2022-09-17&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 1.004003 was 1 year, 10 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.27&lt;/strong&gt; on 2022-09-12&lt;/li&gt;  &lt;li&gt;Votes: 475&lt;/li&gt;  &lt;li&gt;Previous version: 9.26 was 3 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.06&lt;/strong&gt; on 2022-09-11&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.05 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Regexp-Grammars-1.058' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Regexp::Grammars&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Add grammatical parsing features to Perl 5.10 regexes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.058&lt;/strong&gt; on 2022-09-15&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.057 was 2 years, 3 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Starman-0.4016' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Starman&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - High-performance preforking PSGI/Plack web server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.4016&lt;/strong&gt; on 2022-09-13&lt;/li&gt;  &lt;li&gt;Votes: 111&lt;/li&gt;  &lt;li&gt;Previous version: 0.4015 was 3 years, 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/INGY/YAML-LibYAML-0.85' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::LibYAML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl YAML Serialization using XS and libyaml &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.85&lt;/strong&gt; on 2022-09-12&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 0.84 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/48001363750799679/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdx-9-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/48001363750799679"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/48001363750799679"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdx-9-great-cpan-modules-released-last.html" title="(cdx) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1878507273652340887</id>
    <published>2022-09-17T22:20:00.000+02:00</published>
    <updated>2022-09-17T22:20:24.060+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxiii) metacpan weekly report - app::paperback</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 33&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/09/17 20:19:14 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Inabajun::Utils" target="_blank"&gt;Acme::Inabajun::Utils&lt;/a&gt; - The great new Acme::Inabajun::Utils!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::Libtensorflow" target="_blank"&gt;Alien::Libtensorflow&lt;/a&gt; - Alien for Libtensorflow machine learning library C API&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::bookmarks" target="_blank"&gt;App::bookmarks&lt;/a&gt; - Export browser bookmarks as plain text.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Greple::subst" target="_blank"&gt;App::Greple::subst&lt;/a&gt; - Greple module for text search and substitution&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Greple::update" target="_blank"&gt;App::Greple::update&lt;/a&gt; - Greple module to update file content&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::GUI::Harmonograph" target="_blank"&gt;App::GUI::Harmonograph&lt;/a&gt; - sculpting beautiful circular drawings&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Darkpan" target="_blank"&gt;Mojo::Darkpan&lt;/a&gt; - A Mojolicious web service frontend leveraging OrePAN2&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Android::Build" target="_blank"&gt;Android::Build&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/API::Google" target="_blank"&gt;API::Google&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::plenv" target="_blank"&gt;App::plenv&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::ULID" target="_blank"&gt;Data::ULID&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Validate::IP" target="_blank"&gt;Data::Validate::IP&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Connector" target="_blank"&gt;DBIx::Connector&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::reCAPTCHA::v3" target="_blank"&gt;Google::reCAPTCHA::v3&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch::FileRotate" target="_blank"&gt;Log::Dispatch::FileRotate&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mite" target="_blank"&gt;Mite&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=475)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Drive" target="_blank"&gt;Net::Google::Drive&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/next::XS" target="_blank"&gt;next::XS&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Tiny" target="_blank"&gt;PDF::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE" target="_blank"&gt;POE&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Grammars" target="_blank"&gt;Regexp::Grammars&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Twiddle" target="_blank"&gt;Term::Twiddle&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::VTerm" target="_blank"&gt;Term::VTerm&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ZooKeeper" target="_blank"&gt;ZooKeeper&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1878507273652340887/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1878507273652340887"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1878507273652340887"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxiii-metacpan-weekly-report.html" title="(dxxiii) metacpan weekly report - app::paperback"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#581 - What to write about?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/581.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>People often tell me that they don't know what to write about or that they are too new to Perl to blog about anything. Let's see.</p>
<p>Last week I posted this article about <a href="https://perlmaven.com/ansi-command-line-colors-with-perl">ANSI command line colors with Perl</a>. It hardly has anything to do with Perl, but I needed it and it can be a useful to others as well. Actually it originated from a discussion I had with my son who is using Python. So first I wrote the article <a href="https://code-maven.com/ansi-command-line-colors-with-python">ANSI colors using Python</a> and only after that I converted it to Perl.</p>
<p>It did not require any deep knowledge, definitely not that of Python or Perl.</p>
<p>So if you would like to try writing articles, there are plenty of such small subjects one can cover.</p>
<p>After including the link in the previous edition of the Perl Weekly, Thomas Köhler contacted me saying that he would do it differently and then he posted a short article showing how would he use <a href="http://gott-gehabt.de/800_wer_wir_sind/thomas/Homepage/Computer/perl/ansi-colors.html">ANSI colors in Perl</a> including a link back to the original article.</p>
<p>This is excellent.</p>
<p>So here is a suggestion: If you don't have an idea for an article, pick one of the <a href="https://perlmaven.com/">Perl Maven</a> posts and write a different solution or extend the subject and send a link to us, the editors of the Perl Weekly.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/581.html</id>
    <published>2022-09-12T10:00:00Z</published>
    <updated>2022-09-12T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>These Sentences Are Getting Hot</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/09/11#pwc181" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a paragraph. Write a script to order each sentence alphanumerically and 
print the whole paragraph.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub sort_paragraph{
    my($paragraph) = @_;
    my @sentences = split(/\./, $paragraph); 
    for(my $i = 0; $i &lt; @sentences; $i++){
        $sentences[$i] = join(" ", sort {uc($a) cmp uc($b)} split(/\s/, $sentences[$i]));
    }
    return join(".", @sentences);
}

MAIN:{
    my $paragraph = do{
        local $/;
        &amp;lt;DATA&amp;gt;;
    };
    print sort_paragraph($paragraph);
}

__DATA__
All he could think about was how it would all end. There was
still a bit of uncertainty in the equation, but the basics
were there for anyone to see. No matter how much he tried to
see the positive, it wasn't anywhere to be seen. The end was
coming and it wasn't going to be pretty.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
about All all could end he how it think was would. a anyone basics bit but equation, for in of see still the the There there to uncertainty was were. anywhere be he how it matter much No positive, see seen the to to tried wasn't. and be coming end going it pretty The to was wasn't&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code is fairly compact but not at all obfuscated, I would argue. First we take in the
paragraph all at once. Then we split into sentences and begin the sorting.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; is a little complicated looking at first because we want the words to be sorted 
irrespective of letter case. One way to handle that is to compare only all uppercase 
versions of the words. Lowercase would work too, of course!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given file with daily temperature record in random order. Write a script to find 
out days hotter than previous day.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use DBI;
use Text::CSV;
use Time::Piece;

sub hotter_than_previous{
    my($data) = @_;
    my @hotter;
    my $csv_parser = Text::CSV-&gt;new();
    my $dbh = DBI-&gt;connect(q/dbi:CSV:/, undef, undef, undef);
    $dbh-&gt;do(q/CREATE TABLE hotter_than_previous_a(day INTEGER, temperature INTEGER)/);
    $dbh-&gt;do(q/CREATE TABLE hotter_than_previous_b(day INTEGER, temperature INTEGER)/);
    for my $line (@{$data}){
        $line =~ tr/ //d;
        $csv_parser-&gt;parse($line);
        my($day, $temperature) = $csv_parser-&gt;fields();
        $day = Time::Piece-&gt;strptime($day, q/%Y-%m-%d/);
        $dbh-&gt;do(q/INSERT INTO hotter_than_previous_a VALUES(/ . $day-&gt;epoch . qq/, $temperature)/);
        $dbh-&gt;do(q/INSERT INTO hotter_than_previous_b VALUES(/ . $day-&gt;epoch . qq/, $temperature)/);
    }
    my $statement = $dbh-&gt;prepare(q/SELECT day FROM hotter_than_previous_a A INNER JOIN  
                                    hotter_than_previous_b B WHERE (A.day - B.day = 86400)                            
                                    AND A.temperature &gt; B.temperature/);
    $statement-&gt;execute();
    while(my $row = $statement-&gt;fetchrow_hashref()){
        push @hotter, $row-&gt;{day};
    }
    @hotter = map {Time::Piece-&gt;strptime($_, q/%s/)-&gt;strftime(q/%Y-%m-%d/)} sort @hotter;
    unlink(q/hotter_than_previous_a/);
    unlink(q/hotter_than_previous_b/);
    return @hotter;
}

MAIN:{
    my $data = do{
        local $/;
        &amp;lt;DATA&amp;gt;; 
    };
    my @hotter = hotter_than_previous([split(/\n/, $data)]);
    say join(qq/\n/, @hotter);
}

__DATA__
2022-08-01, 20
2022-08-09, 10
2022-08-03, 19
2022-08-06, 24
2022-08-05, 22
2022-08-10, 28
2022-08-07, 20
2022-08-04, 18
2022-08-08, 21
2022-08-02, 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;To be clear up front, this is an intentionally over engineered solution! I have been 
intrigued by the idea of DBD::CSV since I first heard of it but never had a reason to use 
it. So I invented a reason! &lt;/p&gt;

&lt;p&gt;DBD::CSV provides a SQL interface to CSV data. That is, it allows you to write SQL queries
against CSV data as if they were a more ordinary relational database. Very cool! Instead
of solving this problem in Perl I am actually implementing the solution in SQL. Perl is
providing the implementation of the SQL Engine and the quasi-database for the CSV data.&lt;/p&gt;

&lt;p&gt;DBD::CSV is quite powerful but is not completely on par feature wise with what you'd get
if you were using an ordinary database. Not all SQL data types are supported, for example.
Work arounds can be constructed to do everything that we want and these sorts of trade 
offs are to be expected. To store the dates we use &lt;code&gt;Time::Piece&lt;/code&gt; to compute UNIX epoch
times which are stored as INTEGERs. Also, DBD::CSV expects data from files and so we can't
use the data directly in memory, it has to be written to a file first. Actually, we find 
out that we need to create two tables! Each hold exact copies of the same data.&lt;/p&gt;

&lt;p&gt;The creation of two tables is due to a quirk of the underlying SQL Engine SQL::Statement.
SQL::Statement will throw an error when doing a join on the same table. The way one would
do this ordinarily is something like 
&lt;code&gt;SELECT day FROM hotter_than_previous A, hotter_than_previous B ...&lt;/code&gt;. That join allows SQL 
to iterate over all pairs of dates but this throws an error when done with SQL::Statement. 
To work around this we instead we create two tables which works.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-181/"&gt;Challenge 181&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc181</id>
    <published>2022-09-11T08:45:00-04:00</published>
    <updated>2022-09-11T08:45:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#580 - Perl Mentor</title>
    <link rel="alternate" href="https://perlweekly.com/archive/580.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Good luck to all parents with school going kids in England, as today is the day one after a long summer vacation. I am one of them, fortunately or unfortunately. Be strong and you will get through this phase of life too.</p>
<p>Parents are the best mentor for their kids, in my humble opinion. During my early days, I didn't know the importance of mentor. Having met some great mentor in real life in the recent times, I can say it is great service. In 2018, I gave a short talk on <a href="https://act.yapc.eu/lpw2018/talk/7543">The power of mentoring</a>, at London Perl Workshop. A work colleague who does <strong>mentoring</strong> as part of his role, is by far the best mentor, I have met so far. I learn something new every day from him by just joining him on daily standup. Although my contribution to the standup is nothing but it feels nice to see young blood with so much energy. I wish I had mentor like him when I started.</p>
<p>I remember there was an initiative started on private <a href="https://www.facebook.com/groups/perlprogrammers">Facebook group</a> to encourage and help newbie. Unfortunately nothing happened although we had loads of mentor in the group.</p>
<p>Is it easy to be a mentor?</p>
<p>You would think so but I can tell you it is not. You have to have patience first thing first. I have seen how difficult it is to be a mentor. I would like to share a sweet moment with you. A month ago, a young blood interested to learn <strong>Perl</strong> reached out to me on <strong>Facebook</strong>. At times, I wonder how did he find out about me. His question was, how do I execute <strong>Hello World</strong> script, he has already created. He was using VSCode editor. I am not a big fan of VSCode editor but in the current role, I got the opportunity to use it. Having said, I still use <strong>vim</strong> for everything else. Back to the story, we started talking on <strong>Facebook</strong> messenger. I find it hard to convey message on messenger. So I requested him to join on <strong>Team video call</strong>. It took <strong>2 minutes</strong> call to resolve the issue. While there, I showed him few other things beyond, <strong>hello world</strong>. I am sure, he would carry on exploring the language further.</p>
<p>Is it mostly about <strong>Perl</strong>?</p>
<p>In my personal experience, no. I was once contacted by a member of <strong>Team PWC</strong> with regard to the <strong>git related issues</strong> as he couldn't submit his contribution to the weekly challenge. So there again, we jumped on <strong>Team video call</strong> and in no time, he was good to go. Just to be explicit here, he was not a newbie but an experienced techie with way more than experience than me. It feels great to help. It is not one-way traffic as when I get stuck, I know who to contact. Luckily I get instant help too, so far. Few months ago, when I used to do <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube video</a>, I had trouble with <strong>OBS Studio</strong>. I asked for help on <strong>Twitter</strong>. You wouldn't believe, I had more help than I expected from <strong>Olaf Alders</strong>, <strong>Lance Wicks</strong> and <strong>Julien Fiegehenn</strong>. I now have working environment back, although I am not doing live video any more because of lack of time.</p>
<p>For those, need help can reach out to me on <a href="https://twitter.com/cpan_author">Twitter</a> and <a href="https://www.facebook.com/mohammad.s.anwar">Facebook</a>. I must make this clear, I will not do your course work. I am available for anyone anytime as I literally spend <strong>12-14 hours</strong> in front of machine every day.</p>
<p>Have a great week and enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/580.html</id>
    <published>2022-09-05T10:00:00Z</published>
    <updated>2022-09-05T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>First Uniquely Trimmed Index</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/09/04#pwc180" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a string, $s. Write a script to find out the first unique character in the 
given string and print its index (0-based).</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub index_first_unique{
    my($s) = @_;
    my @s = split(//, $s);
    map {my $i = $_; my $c = $s[$i]; return $_ if 1 == grep {$c eq $_ } @s } 0 .. @s - 1;
}

MAIN:{
    say index_first_unique(q/Perl Weekly Challenge/);
    say index_first_unique(q/Long Live Perl/);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0
1
</code></pre>

<h3>Notes</h3>

<p>I use the small trick of return-ing early out of a <code>map</code>. Since we only want the first 
unique index there is no need to consider other characters in the string and we can do 
this short circuiting to bail early.</p>

<h2>Part 2</h2>

<p><em>You are given list of numbers, @n and an integer $i. Write a script to trim the given 
list when an element is less than or equal to the given integer.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub trimmer{
    my($i) = @_;
    return sub{
        my($x) = @_;
        return $x if $x &gt; $i;
    }
}

sub trim_list_r{
    my($n, $trimmer, $trimmed) = @_;
    $trimmed = [] unless $trimmed;
    return @$trimmed if @$n == 0;
    my $x = pop @$n;
    $x = $trimmer-&gt;($x);
    unshift @$trimmed, $x if $x;
    trim_list_r($n, $trimmer, $trimmed);
}

sub trim_list{
    my($n, $i) = @_;
    my $trimmer = trimmer($i);
    return trim_list_r($n, $trimmer);
}

MAIN:{
    my(@n, $i);
    $i = 3;
    @n = (1, 4, 2, 3, 5);
    say join(", ", trim_list(\@n, $i));
    $i = 4;
    @n = (9, 0, 6, 2, 3, 8, 5);
    say join(", ", trim_list(\@n, $i));
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
4, 5
9, 6, 8, 5
</code></pre>

<h3>Notes</h3>

<p>After using <code>map</code> and <code>grep</code> in the first part this week's challenge I decided to try out
something else for this problem. <code>grep</code> would certainly be a perfect fit for this! 
Instead, though, I do the following:</p>

<ul>
<li>Create an anonymous subroutine closure around <code>$i</code> to perform the comparison. The 
subroutine is referenced in the variable <code>$trimmer</code>.
</li>
<li>This subroutine reference is then passed to a recursive function along with the list.
</li>
<li>The recursive function accumulates numbers meeting the criteria in an array reference
<code>$trimmed</code>. <code>unshift</code> is used to maintain the original ordering. I could have also, for
example, processed the list of numbers in reverse and using <code>push</code>. I haven't used 
<code>unshift</code> in a long time so this seemed more fun.
</li>
<li><code>$trimmed</code> is returned to when the list of numbers to be reviewed is exhausted.
</li>
</ul>

<p>This works quite well, especially for something so intentionally over engineered. If you
end up trying this yourself be careful with the size of the list used with the recursion.
For processing long lists in this way you'll either need to set <code>no warnings 'recusion</code> 
or, preferably, <code>goto __SUB__</code> in order to take advantage of Perl style tail recursion.</p>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-180/">Challenge 180</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc180</id>
    <published>2022-09-04T11:57:00-04:00</published>
    <updated>2022-09-04T11:57:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Distribution auf Dist::Zilla umstellen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In diesem Artikel zeige ich dir, wie du eine bestehende Distribution mit möglichst wenig Aufwand auf Dist::Zilla umstellen kannst.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen</id>
    <published>2022-09-02T10:00:00Z</published>
    <updated>2022-09-02T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Aug 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Octopart">API-Octopart</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Simple inteface for querying part status across vendors at octopart.com.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WordListBundle-Proverbs">Acme-CPANModules-WordListBundle-Proverbs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>All proverbs WordList modules (in all languages)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-Reachable-Tiny">Algorithm-Graphs-Reachable-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Compute rechable nodes in a graph.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostAllowList">Alien-Build-Plugin-Fetch-HostAllowList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Require that Alien::Build based aliens only fetch from an allow list of hosts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostBlockList">Alien-Build-Plugin-Fetch-HostBlockList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Reject any Alien::Build fetch requests going to hosts in the block list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Libdogecoin">Alien-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>v0.1.1</td>
<td>v0.1.1.1</td>
<td>Discover or download and install libdogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FontUtils">App-FontUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Command-line utilities related fonts and font files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Games-Keno">App-Games-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-InvestSim">App-InvestSim</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>v0.8.0</td>
<td>v1.0.1</td>
<td>Simulateur d'investissement locatif</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Keno">App-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Perl-Module-Examples">App-Perl-Module-Examples</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tool for creating examples from Perl module POD documentation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Schema-Deploy">App-Schema-Deploy</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for Schema deploy.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Data-Walk-More">Bencher-Scenarios-Data-Walk-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Data::Walk::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bundle-DadaMail-IncludedInDistribution">Bundle-DadaMail-IncludedInDistribution</a></td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>CPAN Bundle of modules used in Dada Mail that are included within the distribution.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cache-CodeBlock">Cache-CodeBlock</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>caching via a code block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Fork">Check-Fork</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Check fork functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Socket">Check-Socket</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Check socket functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chemistry-File-CML">Chemistry-File-CML</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.10</td>
<td>0.11</td>
<td>CML reader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ControlBreak">ControlBreak</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1.00</td>
<td>v0.22.243</td>
<td>Compare values during iteration to detect changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CryptoTron-AddrTools">CryptoTron-AddrTools</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Test-Release-Automation">Cucumber-Test-Release-Automation</a></td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>0.0.0</td>
<td>v0.0.39</td>
<td>Dummy project for testing release automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Phone">Data-Sah-FilterBundle-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-BQ">Date-Holidays-BQ</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Bonaire's official holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-US">Date-Holidays-US</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Date::Holidays Adapter for US Federal holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-MAT-Tool-Future">Devel-MAT-Tool-Future</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>analyse Future logic</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/English-Name">English-Name</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>${^ENGLISH_NAME} for magic variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Feature-Compat-Class">Feature-Compat-Class</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>make class syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Libdogecoin">Finance-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20220814.2215</td>
<td>1.20220815.1712</td>
<td>Use the libdogecoin shared library from Perl!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-XS">Future-XS</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>experimental XS implementation of Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Glitch">Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.06</td>
<td>The great new Glitch!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTTP-Curl">HTTP-Curl</a></td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1.03</td>
<td>1.04</td>
<td>HTTP interface for Net::Curl (clone HTTP::Any::Curl)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HV-Monitor">HV-Monitor</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>A generalized module for gathering stats for a hypervisor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hydrogen">Hydrogen</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.015</td>
<td>utilities for the simplest elements of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iss-Ah-Predictor">Iss-Ah-Predictor</a></td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>ISS AH Predictor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Permutation">Math-Permutation</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.01</td>
<td>pure Perl implementation of functions related to the permutations </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Access">Mojolicious-Plugin-Access</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Mojolicious::Plugin::Access Control remote ip access your App</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mooish-AttributeBuilder">Mooish-AttributeBuilder</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>build Mooish attribute definitions with less boilerplate</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-HTTP2">Net-HTTP2</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>HTTP/2 in Perl, simplified.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MBE">Net-MBE</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.2.0</td>
<td>0.2.2</td>
<td>Perl library to access Mailboxes Etc (MBE) online webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Wait">Net-Wait</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wait on startup until the specified ports are listening</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Optimization-NSGAII">Optimization-NSGAII</a></td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>non dominant sorting genetic algorithm for multi-objective optimization</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad">Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Always make the package/Object::Pad class explicit.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero">Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Don't use numeric variable names with leading zeroes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PickLE">PickLE</a></td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>An electronic component pick list application and file parser library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-GitHubPages-Faux">Plack-App-GitHubPages-Faux</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.02</td>
<td>0.02</td>
<td>PSGI app to test your GitHub Pages site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Re">Sah-Schemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ScalarTypes-NumericTypes">ScalarTypes-NumericTypes</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.11</td>
<td>Perl extension for identifyling special types of numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Schema-Abstract">Schema-Abstract</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Abstract class for Schema modules.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Locale-JP-City">TableDataBundle-Locale-JP-City</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of TableData:: modules that contain list of cities in Japan</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-ANSIColor-Concise">Term-ANSIColor-Concise</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>2.00_03</td>
<td>2.01</td>
<td>Produce ANSI terminal sequence by concise notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terminal-Control">Terminal-Control</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Perl extension for terminal control</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Pod-CoverageChange">Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>0.002</td>
<td>0.003</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Sah-Filter">Test-Sah-Filter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Test Data::Sah::Filter::* modules in distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Voo">Voo</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>42.42</td>
<td>42.43</td>
<td>Run functions at compile time, not runtime!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-eBay">WebService-eBay</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Interface with the eBay API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXML-xmlsec">XML-LibXML-xmlsec</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>0.01</td>
<td>0.03</td>
<td>XML signing/encription using xmlsec library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXMLSec">XML-LibXMLSec</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>0.010</td>
<td>0.010</td>
<td>bindings to some of xmlsec1</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-XPath-Helper-String">XML-XPath-Helper-String</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.01</td>
<td>Helper functions for xpath expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/app-paperback">app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0</td>
<td>1.11</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-Test-Pod-CoverageChange">perl-Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-app-paperback">perl-app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0.33</td>
<td>0.33</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>61</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>38</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Octopart EWHEELER 1.001 1.001 Simple inteface for querying part status across vendors at octopart.com. Acme-CPANModules-WordListBundle-Proverbs PERLANCAR 0.001 0.001 All proverbs WordList modules (in all languages) Algorithm-Graphs-Reachable-Tiny AAHAZRED 0.01 0.03 Compute rechable nodes in a graph. Alien-Build-Plugin-Fetch-HostAllowList PLICEASE 0.01 0.01 Require that Alien::Build based aliens only fetch from an allow list … <a href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Aug 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1996</id>
    <published>2022-09-01T03:01:03Z</published>
    <updated>2022-09-01T03:01:03Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
