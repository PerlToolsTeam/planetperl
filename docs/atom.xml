<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-02-08T02:05:46Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 98: Read N-Characters and Search Insert Position</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/02/perl-weekly-challenge-98-read-n-characters-and-search-insert-position.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10080</id>
    <published>2021-02-08T05:18:29Z</published>
    <updated>2021-02-08T05:20:40Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 98 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Read N-characters</h2>

<p><em>You are given file <code>$FILE</code>.</em></p>

<p><em>Create subroutine <code>readN($FILE, $number)</code> that returns the first n-characters and moves the pointer to the (n+1)th character.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: Suppose the file (input.txt) contains "1234567890"
Output:
    print readN("input.txt", 4); # returns "1234"
    print readN("input.txt", 4); # returns "5678"
    print readN("input.txt", 4); # returns "90"
</code></pre>

<h3>Read N-charaters in Raku</h3>

<p>This is my first attempt:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // "I_have_a_dream.txt";

given $input.IO.open {
    for 0..2 -&gt; $num {
        my $n = (1..10).pick;
        say "Taking $n characters: ", .readchars: $n;
    }
}
</code></pre>

<p>Using Martin Luther King's 1963 famous "I have a dream" speech at the Lincoln Memorial in Washington as an input file, I obtain the following output:</p>

<pre><code>$ raku read_n_chars.raku
Taking 3 characters: I a
Taking 3 characters: m h
Taking 4 characters: appy

$ raku read_n_chars.raku
Taking 3 characters: I a
Taking 5 characters: m hap
Taking 9 characters: py to joi
</code></pre>

<p>However, my understanding of the challenge is that, maybe, Mohammad S. Anwar wanted us to implement an iterator, rather than using a Raku built-in subroutines implementing such iterators.</p>

<p>To do that, I wrote a <code>create-iter</code> subroutine iterating over the file contents:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // "I_have_a_dream.txt";

sub create-iter ($file-in) {
    my $counter = 0;
    my $content = $file-in.IO.slurp;
    return sub (Int $length) {
        my $out = substr $content, $counter, $length;
        $counter += $length;
        return $out;
    }
}
my &amp;iterator = create-iter $input;       
for 0..2 -&gt; $num {
    my $n = (1..10).pick;
    say "Taking $n characters: ", &amp;iterator($n);
}
</code></pre>

<p>Example output:</p>

<pre><code>$ raku read_n_chars2.raku
Taking 8 characters: I am hap
Taking 6 characters: py to
Taking 9 characters: join with
</code></pre>

<h3>Read N-characters in Perl</h3>

<p>This is a Perl implementation of the first Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my $input = shift // "I_have_a_dream.txt";
open my $IN, "&lt;", $input or die "Cannot open $input $!";
for my $n (4..7) {
    say "Taking $n characters: ", map getc $IN, 1..$n;
}
</code></pre>

<p>Example output:</p>

<pre><code>$ perl read_n_chars1.pl
Taking 4 characters: I am
Taking 5 characters:  happ
Taking 6 characters: y to j
Taking 7 characters: oin wit
</code></pre>

<p>And here is a solution implementing an iterator:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub create_iter {
    my $input = shift;
    my $counter = 0;
    open my $IN, '&lt;', $input or die "Couldn't open $input $!";
    local $/ = undef;   # enabling "slurping mode"
    my $content = &lt;$IN&gt;; # slurping the file
    return sub {
        my $length = shift;
        my $out = substr $content, $counter, $length;
        $counter += $length;
        return $out;
    }
}
my $in = shift // "I_have_a_dream.txt";
my $iterator = create_iter $in;       
for my $n (3..5) {
    say "Taking $n characters: ", $iterator-&gt;($n);
}
</code></pre>

<h2>Task 21: Search Insert Position</h2>

<p><em>You are given a sorted array of distinct integers <code>@N</code> and a target <code>$N</code>.</em></p>

<p><em>Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @N = (1, 2, 3, 4) and $N = 3
Output: 2 since the target 3 is in the array at the index 2.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @N = (1, 3, 5, 7) and $N = 6
Output: 3 since the target 6 is missing and should be placed at the index 3.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @N = (12, 14, 16, 18) and $N = 10
Output: 0 since the target 10 is missing and should be placed at the index 0.
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @N = (11, 13, 15, 17) and $N = 19
Output: 4 since the target 19 is missing and should be placed at the index 4.
</code></pre>

<h3>Search Insert Position in Raku</h3>

<p>This is a simple implementation in Raku:</p>

<pre><code>use v6;

my @tests = [3,  &lt; 1  2  3  4&gt;],
            [6,  &lt; 1  3  5  7&gt;],
            [10, &lt;12 14 16 18&gt;],
            [19, &lt;11 13 15 17&gt;];
for @tests -&gt; $test {
    say $test.gist.fmt("%-20s:\t"), find_insert-pos ($test);
}
sub find_insert-pos ($test) {
    my $target = $test[0];
    my @array = |$test[1];
    for 0..@array.end -&gt; $i {
        return $i if @array[$i] &gt;= $target;
    }
    return @array.end + 1;
}
</code></pre>

<p>Output:</p>

<pre><code>$ raku search_insert_pos.raku
[3 (1 2 3 4)]       :   2
[6 (1 3 5 7)]       :   3
[10 (12 14 16 18)]  :   0
[19 (11 13 15 17)]  :   4
</code></pre>

<p>This implementation is somewhat inefficient when the input data is large. I made a better binary search implementation, but I am so late that I can't really present it.</p>

<h3>Search Insert Position in Perl</h3>

<p>Sorry, I made the program, but I am too late to present it.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, February 14, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl 7: A Modest Proposal</title>
    <link rel="alternate" href="https://dev.to/grinnz/perl-7-a-modest-proposal-434m" type="text/html"/>
    <content type="html">&lt;p&gt;My previous two blog posts (&lt;a href="http://blogs.perl.org/users/grinnz/2020/07/perl-7-a-risk-benefit-analysis.html"&gt;Perl 7: A Risk-Benefit Analysis&lt;/a&gt; and &lt;a href="http://blogs.perl.org/users/grinnz/2020/08/perl-7-by-default.html"&gt;Perl 7 By Default&lt;/a&gt;) explored the reasons that a Perl 7 with incompatible interpreter defaults would be a mistake. Subsequently, Perl experienced a &lt;a href="https://perl7faq.grinnz.com/#what-happened-to-the-announced-plans-for-perl-7"&gt;crisis of governance authority&lt;/a&gt; as several core developers also expressed this view. So I will not be further discussing the idea of changing defaults in Perl major versions. But, as I had stated in conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I believe making good use of a new major version is extremely important to portraying the continued and forward development of Perl to the wider programming community. A major version with major features can be a significant boon to jumpstart the stagnating perception of Perl and bring it in line with the reality of its development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So then, what should we do? I have some suggestions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stable-signatures" class="anchor"&gt;
  &lt;/a&gt;
  Stable signatures
&lt;/h2&gt;

&lt;p&gt;The widely lauded &lt;a href="https://perldoc.perl.org/feature#The-'signatures'-feature"&gt;signatures feature&lt;/a&gt; is currently still experimental to facilitate experimentation with &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2019/11/msg256677.html"&gt;several more important features&lt;/a&gt; that are needed for it to be considered feature-complete. However, at this point the basic design is well tested and stabilized, and has been unchanged for the requisite &lt;a href="https://perldoc.perl.org/perlpolicy#experimental"&gt;two stable releases&lt;/a&gt;. I propose that in Perl 7, the signatures feature be declared stable as-is, added to the &lt;code&gt;:7.0&lt;/code&gt; feature bundle, and these further additions to be developed as a separate initiative. The new additions could trigger distinct experimental warnings until stabilized, or be added under one or more new experimental features as appropriate. (Stabilization of the signatures feature has now been &lt;a href="https://github.com/Perl/perl5/issues/18537"&gt;proposed&lt;/a&gt; by Paul Evans.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-misfeatures" class="anchor"&gt;
  &lt;/a&gt;
  Remove misfeatures
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/feature#The-'indirect'-feature"&gt;indirect&lt;/a&gt;, &lt;a href="https://github.com/Perl/perl5/pull/17808"&gt;multidimensional&lt;/a&gt;, and &lt;a href="https://github.com/Perl/perl5/pull/18073"&gt;bareword_filehandles&lt;/a&gt; features being added in Perl 5.34 (well, indirect is already in Perl 5.32) are "negative" features; the behavior has existed in Perl for quite a while, but the presence of the named features allow disabling them lexically. These misfeatures are not considered best practice and lead to confusing issues, and the ability to disable them, or at least complain loudly upon encountering their use, has been available from CPAN modules for some time; a modern feature bundle should disrecommend their use. I propose removing these three features from the &lt;code&gt;:7.0&lt;/code&gt; feature bundle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-warnings" class="anchor"&gt;
  &lt;/a&gt;
  Apply warnings
&lt;/h2&gt;

&lt;p&gt;Since &lt;code&gt;v5.12&lt;/code&gt; or &lt;code&gt;5.012&lt;/code&gt;, the &lt;a href="https://perldoc.perl.org/functions/use"&gt;use VERSION&lt;/a&gt; keyword has enabled strict alongside the appropriate feature bundle. I propose that Perl 7 finally has this also do the equivalent of &lt;code&gt;use warnings&lt;/code&gt;, coinciding with an easy to remember major version in &lt;code&gt;use v7&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-utf8" class="anchor"&gt;
  &lt;/a&gt;
  Apply utf8
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/utf8"&gt;utf8 pragma&lt;/a&gt; declares that the current source file is encoded in UTF-8 rather than the native single-byte encoding (usually ISO-8859-1). (This is unrelated to functions in that namespace such as &lt;code&gt;utf8::decode&lt;/code&gt; as well as other UTF-8 related behavior like that provided by the &lt;a href="https://perldoc.perl.org/open"&gt;open pragma&lt;/a&gt;.) Zefram &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2017/10/msg246838.html"&gt;previously proposed&lt;/a&gt; that this pragma be gradually made default and thus a no-op, to better match the expectations of modern programming. Along with and in anticipation of this step, I propose that Perl 7 has &lt;code&gt;use v7&lt;/code&gt; also do the equivalent of &lt;code&gt;use utf8&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-together" class="anchor"&gt;
  &lt;/a&gt;
  All Together
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Declare 'signatures' feature stable as is&lt;/li&gt;
&lt;li&gt;Add 'signatures' feature to :7.0 feature bundle&lt;/li&gt;
&lt;li&gt;Remove 'indirect', 'multidimensional', and 'bareword_filehandles' negative features from :7.0 feature bundle&lt;/li&gt;
&lt;li&gt;Apply effect of 'use warnings' with 'use v7' or higher&lt;/li&gt;
&lt;li&gt;Apply effect of 'use utf8' with 'use v7' or higher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.32;
use warnings;
use utf8;
use experimental 'signatures';
no feature qw(indirect multidimensional bareword_filehandles);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;New, modern code will simply be able to write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v7;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -Mstrict -Mwarnings -Mutf8 -Mexperimental=signatures
    -M-feature=indirect,multidimensional,bareword_filehandles
    -E'sub dumphex ($str) { printf "%vX", $str } dumphex "☃"'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Modern oneliners will be able to get the same effect from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -M7 -E'sub dumphex ($str) { printf "%vX", $str } dumphex "☃"'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looking-to-the-future" class="anchor"&gt;
  &lt;/a&gt;
  Looking to the Future
&lt;/h2&gt;

&lt;p&gt;We must consider not only what Perl 7 should be, but what Perl should be beyond this milestone. Following from the above proposal for what Perl 7 and &lt;code&gt;use v7&lt;/code&gt; could entail, this naturally leads to a flexible, powerful, and considerate method of promoting stable features and a modern programming environment.&lt;/p&gt;

&lt;p&gt;Past &lt;a href="https://perldoc.perl.org/feature#FEATURE-BUNDLES"&gt;feature bundles&lt;/a&gt; have been changed rather rarely but at seemingly random versions which are difficult to recall even for the most attentive Perl hacker. Since the introduction of feature bundles in Perl 5.10, they have only changed in 5.12, 5.16, 5.24, and 5.28. Thus my final proposal is that we no longer change feature bundles in arbitrary releases, but only in (true) major versions, which provide significantly more memorable junction points and opportunity for advertisement of these important features.&lt;/p&gt;

&lt;p&gt;There are several features currently in the experimental, design, or CPAN prototyping phase that portend to further improve the modern Perl experience, many of which Paul Evans discussed in his &lt;a href="https://video.fosdem.org/2021/"&gt;FOSDEM 2021 talk&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://perldoc.perl.org/feature#The-'isa'-feature"&gt;isa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2019/11/msg256677.html"&gt;signatures improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Perl/perl5/issues/18504"&gt;try/catch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257494.html"&gt;match/case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Cor OO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any of these features which are not stable and ready for inclusion in a &lt;code&gt;v7&lt;/code&gt; feature bundle, as well as any that are built in the meantime, can be revisited for &lt;code&gt;v8&lt;/code&gt;. Each successive major version bundle can continue to promote the best practices of Perl features and help users evolve their usage of modern Perl with a clear, simple declaration. And most importantly, each major version including 7 can be scheduled once a sufficiently exciting new modern feature set is stable and ready to &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Perl 7 is dead. Long live Perl 7.&lt;/p&gt;

</content>
    <author>
      <name>Dan Book</name>
    </author>
    <id>https://dev.to/grinnz/perl-7-a-modest-proposal-434m</id>
    <published>2021-02-08T02:02:57Z</published>
    <updated>2021-02-08T02:02:57Z</updated>
    <category term="perl"/>
    <category term="perl7"/>
  </entry>
  <entry>
    <title>Who you gonna call? Perl client and website for Google Civic Information API</title>
    <link rel="alternate" href="http://blogs.perl.org/users/1nickt/2021/02/who-you-gonna-call-perl-client-and-website-for-google-civic-information-api.html"/>
    <id>tag:blogs.perl.org,2021:/users/1nickt//3033.10079</id>
    <published>2021-02-07T20:48:25Z</published>
    <updated>2021-02-07T21:02:42Z</updated>
    <author>
        <name>1nickt</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/1nickt/">
        <![CDATA[<p>I recently became aware of a very cool service provided by the Google. The <a href="https://developers.google.com/civic-information">Civic Information API</a> provides contact information for all elected representatives (from head of state down to municipal official) for any US address.</p>

<p>I wrote the Perl client for the API, published as <a href="https://metacpan.org/release/Net-Google-CivicInformation">Net::Google::CivicInformation</a>. Get a free API token and you're up and running.</p>

<p>This was a satisfying project because I can imagine people finding actual value in the product. I'm all for being vocal with our government! I decided to take it a step further and created a webservice interfacing to the API. It's written in <a href="https://metacpan.org/pod/Dancer2">Dancer2</a> and the source code is <a href="https://github.com/1nickt/ContactMyReps">on Github</a> (at the urging of ++GabSzab who pointed out that there are few examples of Dancer2 apps for developers to study.)</p>

<p>The site is online now at <a href="https://contactmyreps.com/">https://contactmyreps.com</a>. Please give it a try. Feedback welcome!</p>

<p><a href="http://blogs.perl.org/users/1nickt/assets_c/2021/02/cmr-4609.html" onclick="window.open('http://blogs.perl.org/users/1nickt/assets_c/2021/02/cmr-4609.html','popup','width=1236,height=1604,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/1nickt/assets_c/2021/02/cmr-thumb-400x519-4609.png" width="400" height="519" alt="cmr.png" class="mt-image-none" style="" /></a></p>]]>
        
    </content>
</entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 4</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></summary>
  <updated>2021-02-07T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl-4"/>  <id>https://perlmaven.com/exploring-bdd-in-perl-4</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 098</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/02/06#pwc098" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given file &lt;code&gt;$FILE&lt;/code&gt;. Create subroutine &lt;code&gt;readN($FILE, $number)&lt;/code&gt; returns the first n-characters and moves the pointer to the (n+1)th character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub read_maker0{
    my $n = 0;
    return sub{
        my($file, $x) = @_;
        my $chars;
        open(FILE, $file);
        unless(seek(FILE, $n, 0)){
            close(FILE);
        }
        read(FILE, $chars, $x);
        $n = $n + $x;
        return $chars;
    }
}

sub read_maker1{
    my ($file) = @_;
    my $n = 0;
    open(FILE, $file);
    return sub{
        my($x) = @_;
        my $chars;
        my $read = read(FILE, $chars, $x);
        $n = $n + $x;
        unless(seek(FILE, $n, 0)){
            close(FILE);
        }
        return $chars;
    }
}

MAIN:{
    my($FILE, $number) = ("ch-1.dat", 4);
    my($read_n, $chars);
    $read_n = read_maker0();
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    
    
    $read_n = read_maker1($FILE);
    $chars = $read_n-&gt;($number);
    print "$chars\n";
    $chars = $read_n-&gt;($number);
    print "$chars\n";
    $chars = $read_n-&gt;($number);
    print "$chars\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1234
5678
90

1234
5678
90
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I actually did this two different ways. The first follows the letter of the challenge as to the parameters of the &lt;code&gt;read_n&lt;/code&gt; function and the second differs, only passing in &lt;code&gt;$number&lt;/code&gt; and does not include the filename.&lt;/p&gt;
&lt;p&gt;Before I get into the differences it makes sense to point out how &lt;code&gt;read_maker0()&lt;/code&gt; works. What is does is create a closure over the value &lt;code&gt;$n&lt;/code&gt; which will hold the current position in the file. Think of the variable &lt;code&gt;$n&lt;/code&gt; created in &lt;code&gt;read_maker0()&lt;/code&gt; as &lt;em&gt;captured&lt;/em&gt; inside the function that is being returned. This process is called &lt;em&gt;currying&lt;/em&gt; and it’s a neat trick. I’ve used it in the past for these challenges, the first being way back in &lt;a href="https://adamcrussell.livejournal.com/948.html"&gt;Challenge 003&lt;/a&gt;! In this way &lt;code&gt;read_maker0()&lt;/code&gt; is creating the function which we are referring to by the scalar &lt;code&gt;$read_n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After each &lt;a href="https://perldoc.perl.org/functions/read"&gt;read&lt;/a&gt; &lt;code&gt;$n&lt;/code&gt; is incremented and used to &lt;a href="https://perldoc.perl.org/functions/seek"&gt;seek&lt;/a&gt; to the next position. I should note that this is not really necessary here since the value of &lt;code&gt;$number&lt;/code&gt; is never changed. In this case the &lt;code&gt;read&lt;/code&gt; alone will advance the file position as necessary. However, by including &lt;code&gt;seek&lt;/code&gt; the solution is more general. We would be able to move around the file however we want, backwards and forwards, with &lt;code&gt;seek&lt;/code&gt; if we wanted to.&lt;/p&gt;
&lt;p&gt;So we see that we can capture &lt;code&gt;$n&lt;/code&gt; and use it to store the file position between function calls. The challenge states that we are to called &lt;code&gt;read_n&lt;/code&gt; with two parameters, the filename and the number of characters to read. As you can see, we do not need to keep sending the filename with each function call. The filename can also be a part of the closure!&lt;/p&gt;
&lt;p&gt;That is the difference between &lt;code&gt;read_maker0()&lt;/code&gt; and &lt;code&gt;read_maker1()&lt;/code&gt;. The first returns a &lt;code&gt;read_n&lt;/code&gt; function that matches the challenge specification of taking a filename and a number of characters to read. &lt;code&gt;read_maker1()&lt;/code&gt; returns a function that only takes the number of characters to read, the function itself has a stored value for the file handle we want.&lt;/p&gt;
&lt;p&gt;One small final thing to mention: anyone unfamiliar with &lt;code&gt;read&lt;/code&gt; might notice that there is no checking to see if we attempt to read past the end of the file. That is because &lt;code&gt;read&lt;/code&gt; will read all the characters it can and if it hits the end of the file it will stop. The return value from &lt;code&gt;read&lt;/code&gt; is the number of characters successfully read. While we do not check that value in this code, if we did we would see that in this example the final read would return 2, which is clear in the output shown.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a sorted array of distinct integers &lt;code&gt;@N&lt;/code&gt; and a target `$N``. Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub find_insert{
    my($list, $n) = @_;
    if($n &lt; $list-&gt;[0]){
        unshift @{$list}, $n;
        return 0;
    }
    if($n &gt; $list-&gt;[@{$list} - 1]){
        push @{$list}, $n;
        return @{$list} - 1;
    }
    for(my $i = 0; $i &lt; (@{$list} - 1); $i++){
        return $i if $n == $list-&gt;[$i];
        if($n &gt; $list-&gt;[$i] &amp;&amp; $n &lt; $list-&gt;[$i + 1]){
            splice(@{$list}, $i, 2, ($list-&gt;[$i], $n, $list-&gt;[$i + 1]));
            return $i + 1;
        }
    }
}


MAIN:{
    my(@N, $N, $i);
    @N = (1, 2, 3, 4);
    $N = 3;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (1, 3, 5, 7);
    $N = 6;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (12, 14, 16, 18);
    $N = 10;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (11, 13, 15, 17);
    $N = 19;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
0
4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While somewhat convoluted sounding at first this part of Challenge 098 ended up being fairly straightforward, especially when using &lt;a href="https://perldoc.perl.org/functions/splice"&gt;splice&lt;/a&gt; to do any array insertions. Probably there are more “fun” ways to have done this but the intuitive way here has an almost comforting look to it. Reminds me of university computer lab exercises!&lt;/p&gt;
&lt;p&gt;Anyway, the approach here is to consider the possible cases. &lt;code&gt;find_insert&lt;/code&gt; starts off by checking to see if &lt;code&gt;$n&lt;/code&gt; would belong at the very start or end of the array. If neither of those cases hold we loop over the array looking for where &lt;code&gt;$n&lt;/code&gt; might be. If found in the array we return with the index, else we insert with &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The challenge never asks to see the modified array so I suppose it is possible to merely return where &lt;code&gt;$n&lt;/code&gt; belongs without actually inserting it but that didn’t seem quite as sporting.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098/"&gt;Challenge 098&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.perlmonks.net/?node_id=594140"&gt;Perlmonks article on currying&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc098</id>
    <published>2021-02-06T21:34:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-9060466932145771050</id>
    <published>2021-01-27T20:01:00.007-08:00</published>
    <updated>2021-02-06T17:25:52.116-08:00</updated>
    <title type="text">perl.com hijacked </title>
    <content type="html">&lt;p&gt;&amp;nbsp;The perl.com domain was hijacked this morning, and is currently pointing to a parking site.&amp;nbsp; Work is ongoing to attempt to recover it.&lt;/p&gt;&lt;p&gt;&amp;nbsp;We encourage you NOT to visit the domain, as there are some signals that it may be related to sites that have distributed malware in the past.&lt;/p&gt;&lt;p&gt;&amp;nbsp; Some users may have it selected as their CPAN mirror.&amp;nbsp; To update your mirror in CPAN.pm use &lt;span style="font-family: courier;"&gt;o conf urllist http://www.cpan.org/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;# perl -MCPAN -eshell&lt;br /&gt;cpan shell -- CPAN exploration and modules installation (v2.20)&lt;br /&gt;Enter 'h' for help.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;cpan[1]&amp;gt; o conf urllist http://www.cpan.org/&lt;br /&gt;Please use 'o conf commit' to make the config permanent!&lt;br /&gt;cpan[2]&amp;gt; o conf commit&lt;br /&gt;commit: wrote '/root/.cpan/CPAN/MyConfig.pm'&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;Update 2021-01-28:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px;"&gt;&lt;div style="text-align: left;"&gt;Work is underway to attempt to recover the domain.&amp;nbsp; If you're looking for the content, you can visit &lt;a href="https://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Update 2021-01-30:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px;"&gt;&lt;div&gt;&lt;div style="text-align: left;"&gt;Network Solutions is working with Tom Christiansen, the rightful registrant, on the recovery of the Perl.com domain. There is no estimated timeline for its recovery but the process is underway. The Perl.com site is temporarily at &lt;a href="http://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;. Anyone using a perl.com host for their CPAN mirror should use &lt;a href="http://www.cpan.org"&gt;www.cpan.org&lt;/a&gt; instead. Please direct all inquiries to brian d foy (brian.d.foy@gmail.com).&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br /&gt;Update 2021-02-01:&lt;div&gt;&lt;br /&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;We have contacted Network Solutions and verified that cpan.org is in the right hands and secured.&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Update 2021-02-02:&lt;div&gt;&lt;br /&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px;"&gt;&lt;div style="text-align: left;"&gt;Verisign has restored the proper nameservers (*.&lt;a href="http://bitnames.com/"&gt;bitnames.com&lt;/a&gt;) for &lt;a href="http://perl.com/"&gt;perl.com&lt;/a&gt;. You should see addresses in 151.101/16. If you still see something different, please leave a comment in &lt;a href="https://www.blogger.com/#"&gt;GitHub issue&lt;/a&gt; &lt;a href="https://www.blogger.com/#"&gt;#313&lt;/a&gt;. Some providers or services may have sinkholed or blocked Perl.com; if you are still seeing that, please let us know.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Update 2021-02-05:&lt;blockquote&gt;&lt;div&gt;Network Solutions has recovered the domain and your whois output should reflect that. If you notice that your firewalls or other security layers still mark perl.com as compromised, please leave us a note at &lt;a href="https://github.com/tpf/perldotcom/issues/313"&gt;https://github.com/tpf/perldotcom/issues/313&lt;/a&gt;.&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/01/perlcom-hijacked.html" title="perl.com hijacked "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7467983954613616612</id>
    <published>2021-02-06T20:43:00.000+01:00</published>
    <updated>2021-02-06T20:43:31.353+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxvii) 13 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.91' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.91&lt;/strong&gt; on 2021-01-31&lt;/li&gt;  &lt;li&gt;Votes: 166&lt;/li&gt;  &lt;li&gt;Previous version: 0.90 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CJFIELDS/BioPerl-1.7.8' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;BioPerl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl modules for biology &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.7.8&lt;/strong&gt; on 2021-02-03&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 1.7.7 was 1 year, 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSAVAGE/Config-Tiny-2.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write .ini style files with as little code as possible &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.26&lt;/strong&gt; on 2021-02-01&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 2.24 was 1 year, 7 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/DBIx-DataModel-3.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::DataModel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - UML-based Object-Relational Mapping (ORM) framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.01&lt;/strong&gt; on 2021-02-02&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.0 was 2 years, 11 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2021-02-02&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 2 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2021-02-05&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/IO-Interactive-1.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Interactive&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Utilities for interactive I/O &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.023&lt;/strong&gt; on 2021-02-03&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.022 was 4 years, 4 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GNUSTAVO/JIRA-REST-0.021' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JIRA::REST&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Thin wrapper around Jira's REST API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.021&lt;/strong&gt; on 2021-02-06&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.020 was 1 year, 3 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.24&lt;/strong&gt; on 2021-02-06&lt;/li&gt;  &lt;li&gt;Votes: 66&lt;/li&gt;  &lt;li&gt;Previous version: 4.23 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.73&lt;/strong&gt; on 2021-02-06&lt;/li&gt;  &lt;li&gt;Votes: 444&lt;/li&gt;  &lt;li&gt;Previous version: 8.72 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.7001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.7001&lt;/strong&gt; on 2021-02-04&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 3.7000 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.118' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.118&lt;/strong&gt; on 2021-02-05&lt;/li&gt;  &lt;li&gt;Votes: 159&lt;/li&gt;  &lt;li&gt;Previous version: 0.116 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0931' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0931&lt;/strong&gt; on 2021-02-06&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0930 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7467983954613616612/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxvii-13-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7467983954613616612"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7467983954613616612"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxvii-13-cpan-great-modules-released.html" title="(cccxxvii) 13 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7020472769636040761</id>
    <published>2021-02-06T20:41:00.001+01:00</published>
    <updated>2021-02-06T20:41:17.120+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdliii) metacpan weekly report - Acme::ConspiracyTheory::Random</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 74&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Acme::ConspiracyTheory::Random" target="_blank"&gt;Acme::ConspiracyTheory::Random (+5)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/02/06 19:40:42 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; - make try/catch syntax available&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libalarm" target="_blank"&gt;libalarm&lt;/a&gt; - Module handling tying of %SIG for alarm extensions.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::RDAP" target="_blank"&gt;Net::RDAP&lt;/a&gt; - an interface to the Registration Data Access Protocol (RDAP).&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Imposition" target="_blank"&gt;PDF::Imposition&lt;/a&gt; - Perl module to manage the PDF imposition&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Random::Any" target="_blank"&gt;Random::Any&lt;/a&gt; - Try to use Data::Entropy::Algorithms::rand(), fallback on builtin rand()&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SNMP" target="_blank"&gt;SNMP&lt;/a&gt; - The Perl5 'SNMP' Extension Module for the Net-SNMP SNMP package.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Tree" target="_blank"&gt;SQL::Tree&lt;/a&gt; - Generate a trigger-based SQL tree implementation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Plugin::XML::Feed" target="_blank"&gt;Template::Plugin::XML::Feed&lt;/a&gt; - Plugin interface to XML::Feed&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::ConspiracyTheory::Random" target="_blank"&gt;Acme::ConspiracyTheory::Random&lt;/a&gt; (+5=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CSVUtils" target="_blank"&gt;App::CSVUtils&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ModuleBuildTiny" target="_blank"&gt;App::ModuleBuildTiny&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Lambda" target="_blank"&gt;AWS::Lambda&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Lint" target="_blank"&gt;B::Lint&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BioPerl" target="_blank"&gt;BioPerl&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cisco::SNMP" target="_blank"&gt;Cisco::SNMP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor" target="_blank"&gt;Class::Accessor&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses" target="_blank"&gt;Curses&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump::Color" target="_blank"&gt;Data::Dump::Color&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover" target="_blank"&gt;Devel::Cover&lt;/a&gt; (+1=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::Coveralls" target="_blank"&gt;Devel::Cover::Report::Coveralls&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Stuffer" target="_blank"&gt;Email::Stuffer&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graphics::Framebuffer" target="_blank"&gt;Graphics::Framebuffer&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=100)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jifty" target="_blank"&gt;Jifty&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Simple" target="_blank"&gt;Keyword::Simple&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::MoreUtils" target="_blank"&gt;List::MoreUtils&lt;/a&gt; (+2=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Maketext" target="_blank"&gt;Locale::Maketext&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::SpamAssassin" target="_blank"&gt;Mail::SpamAssassin&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=444)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Model" target="_blank"&gt;Mojolicious::Plugin::Model&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::CA" target="_blank"&gt;Mozilla::CA&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SNMP" target="_blank"&gt;Net::SNMP&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SNMPTrapd" target="_blank"&gt;Net::SNMPTrapd&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Client" target="_blank"&gt;OpenAPI::Client&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR" target="_blank"&gt;PAR&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=159)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=369)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Lint" target="_blank"&gt;Perl::Lint&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Version" target="_blank"&gt;Perl::Version&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=221)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RBAC::Tiny" target="_blank"&gt;RBAC::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/re::engine::RE2" target="_blank"&gt;re::engine::RE2&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=75)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scientist" target="_blank"&gt;Scientist&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SNMP::Info" target="_blank"&gt;SNMP::Info&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Retry" target="_blank"&gt;Sub::Retry&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::SigAction" target="_blank"&gt;Sys::SigAction&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny" target="_blank"&gt;Template::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::BDD::Cucumber" target="_blank"&gt;Test::BDD::Cucumber&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Class" target="_blank"&gt;Test::Class&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Class::Most" target="_blank"&gt;Test::Class::Most&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::File" target="_blank"&gt;Test::File&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LWP::UserAgent" target="_blank"&gt;Test::LWP::UserAgent&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mojo::Role::Selenium" target="_blank"&gt;Test::Mojo::Role::Selenium&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Pod" target="_blank"&gt;Test::Pod&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Pod::Coverage" target="_blank"&gt;Test::Pod::Coverage&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Stringprep" target="_blank"&gt;Unicode::Stringprep&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::MyXML" target="_blank"&gt;XML::MyXML&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=64)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7020472769636040761/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7020472769636040761"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7020472769636040761"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdliii-metacpan-weekly-report.html" title="(cdliii) metacpan weekly report - Acme::ConspiracyTheory::Random"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 3</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></summary>
  <updated>2021-02-06T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl-3"/>  <id>https://perlmaven.com/exploring-bdd-in-perl-3</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 2</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></summary>
  <updated>2021-02-06T10:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl-2"/>  <id>https://perlmaven.com/exploring-bdd-in-perl-2</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>CPAN-News Januar 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-06-cpannews-januar-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Der Januar ist rum, Zeit mal nachzuschauen was wir im Januar so alles auf CPAN geladen haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-06-cpannews-januar-2021</id>
    <published>2021-02-06T10:00:00Z</published>
    <updated>2021-02-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 098</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-098-235h" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#weekly-challenge-098" class="anchor"&gt;
  &lt;/a&gt;
  Weekly Challenge 098
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098/"&gt;Tasks&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-read-ncharacters" class="anchor"&gt;
  &lt;/a&gt;
  TASK #1 › Read N-characters
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given file &lt;code&gt;$FILE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create subroutine &lt;code&gt;readN($FILE, $number)&lt;/code&gt; returns the first n-characters and moves the pointer to the &lt;code&gt;(n+1)th&lt;/code&gt; character&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution" class="anchor"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;I have to say I'm surprised that this is the first task given it is more complex (IMO) than the second task. Perl - like most modern languages - is UTF-8 aware. This makes it easier to read characters rather than bytes. But then maybe I'm over thinking this task and it is expected that only English is used.&lt;/p&gt;

&lt;p&gt;This task is also complicated as the &lt;code&gt;readN&lt;/code&gt; function takes a file name, and not a file handle. To get around this, I use the &lt;a href="https://perldoc.perl.org/functions/state"&gt;state&lt;/a&gt; function to contain a mapping of file names to file handles, and open a new file handle if it doesn't already exist.&lt;/p&gt;

&lt;p&gt;For the reading of the characters, the &lt;a href="https://perldoc.perl.org/functions/read"&gt;read&lt;/a&gt; function allows us to read the next &lt;code&gt;$n&lt;/code&gt; characters (not bytes) into a scalar, which I then print.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;For these examples, input.txt contains &lt;code&gt;1324567890&lt;/code&gt;, and hello.txt contains &lt;code&gt;tēnā koe i tēnei ata&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl input.txt 4 4 4
1234
5678
90

» ./ch-1.pl hello.txt 5 5 5
tēnā 
koe i
 tēne
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-search-insert-position" class="anchor"&gt;
  &lt;/a&gt;
  TASK #2 › Search Insert Position
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given a sorted array of distinct integers &lt;code&gt;@N&lt;/code&gt; and a target &lt;code&gt;$N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;If this was something I was going to use at work, I'd use &lt;a href="https://metacpan.org/pod/List::MoreUtils#firstidx-BLOCK-LIST"&gt;firstidx&lt;/a&gt; from the List::MoreUtils module. However, I have a policy of not using non-core modules when it comes to Team PWC challenges.&lt;/p&gt;

&lt;p&gt;For this task I loop over the array in while / &lt;a href="https://perldoc.perl.org/functions/each"&gt;each&lt;/a&gt; loop. This gives me both of &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$value&lt;/code&gt; while iterating over an array, and saves me having to manually doing this. Using each on arrays was introduced in Perl 5.12.&lt;/p&gt;

&lt;p&gt;If a value is greater or equal to the target, I print the index of that value. If no value is found (i.e. the target is greater than the last value), I print the number of input values. This would be the index position of the next value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl "(1, 2, 3, 4)" 3
2

» ./ch-2.pl "(1, 3, 5, 7)" 6
3

» ./ch-2.pl "(12, 14, 16, 18)" 10
0

» ./ch-2.pl "(11, 13, 15, 17)" 19
4
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-098-235h</id>
    <published>2021-02-06T08:07:07Z</published>
    <updated>2021-02-06T08:07:07Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>5 Ways You Can Embrace the Magic of Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/5-ways-you-can-embrace-the-magic-of-perl-1j11" type="text/html"/>
    <content type="html">&lt;p&gt;Perl is said (sometimes frustratingly) to be a do-what-I-mean programming language.  Many of its statements and constructions are &lt;a href="https://perldoc.pl/perlintro#Safety-net"&gt;designed to be forgiving&lt;/a&gt; or have &lt;a href="http://wall.org/~larry/natural.html"&gt;analogies to natural languages&lt;/a&gt;. Still others are said to be "magic," behaving differently depending on how they're used. Adept use of Perl asks you to not only &lt;em&gt;understand&lt;/em&gt; this magic, but to &lt;em&gt;embrace&lt;/em&gt; it and the expressiveness it enables. Here, then, are five ways you can bring some magic to your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perlvar#%24_"&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Perl has many &lt;a href="https://perldoc.pl/perlvar#SPECIAL-VARIABLES"&gt;special variables&lt;/a&gt;, and first among them (literally, it's the first documented) is &lt;a href="https://perldoc.pl/perlvar#%24_"&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;. Also spelled &lt;code&gt;$ARG&lt;/code&gt; if you &lt;code&gt;use&lt;/code&gt; the &lt;a href="https://perldoc.perl.org/English"&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt; module, the documentation describes it as "the default input and pattern-matching space." Many, many functions and statements will assume it as &lt;strong&gt;the default or implicit argument&lt;/strong&gt;; you can find the full list in the &lt;a href="https://perldoc.pl/perlvar#%24_"&gt;documentation&lt;/a&gt;. Here's an example that uses it implicitly to output the numbers from 1 to 10:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where some languages require an iterator variable in a &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt; loop, in the absence of one Perl assigns it to &lt;code&gt;$_&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#statement-modifiers" class="anchor"&gt;
  &lt;/a&gt;
  Statement modifiers
&lt;/h2&gt;

&lt;p&gt;We then use our second trick; where some other languages require a block to enclose every loop or conditional (whether denoted by braces &lt;code&gt;{&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; or indentation), Perl allows you to put said looping or conditional statement &lt;a href="https://perldoc.pl/perlsyn#Statement-Modifiers"&gt;after a single other statement&lt;/a&gt;, in this case the &lt;a href="https://perldoc.perl.org/functions/say"&gt;&lt;code&gt;say&lt;/code&gt;&lt;/a&gt; which prints its argument(s) followed by a newline.&lt;/p&gt;

&lt;p&gt;However, above we have &lt;em&gt;no&lt;/em&gt; arguments passed to &lt;code&gt;say&lt;/code&gt; and so once again the default &lt;code&gt;$_&lt;/code&gt; is used, now containing a number from 1 to 10 which is then printed out. It's a very powerful and expressive idiom, enabling both the writer and reader of code to concentrate on the important thing that's happening. &lt;strong&gt;It's also entirely optional.&lt;/strong&gt; You can just as easily type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But where's the magic in that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#magic-variables-and-raw-use-english-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Magic variables and &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;use English&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We mentioned the &lt;code&gt;$_&lt;/code&gt; variable above, and that it could also be spelled &lt;code&gt;$ARG&lt;/code&gt; if you add &lt;code&gt;use English&lt;/code&gt; to your code. It can be hard to read code with large amounts of punctuation, though, and even harder to remember what each variable does. Thankfully the &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt; module provides aliases, and the &lt;a href="https://perldoc.pl/perlvar#SPECIAL-VARIABLES"&gt;perlvar&lt;/a&gt; man page lists them in order. It's much easier to read and write things like &lt;a href="https://perldoc.pl/perlvar#%24LIST_SEPARATOR"&gt;&lt;code&gt;$LIST_SEPARATOR&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/perlvar#%24PROCESS_ID"&gt;&lt;code&gt;$PROCESS_ID&lt;/code&gt;&lt;/a&gt;, or &lt;a href="https://perldoc.pl/perlvar#%24MATCH"&gt;&lt;code&gt;$MATCH&lt;/code&gt;&lt;/a&gt; rather than &lt;code&gt;$"&lt;/code&gt;, &lt;code&gt;$$&lt;/code&gt;, and &lt;code&gt;$&amp;amp;&lt;/code&gt;, and goes a long way towards reducing Perl's reputation as a write-only language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-and-scalar-contexts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perldata#Context"&gt;List and scalar contexts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Like natural languages, Perl has a concept of "context" in which words mean different things depending on their surroundings. In Perl's case, expressions may behave differently depending on whether they expect to produce a list of values or a single value, called a &lt;a href="https://perldoc.perl.org/perldata#Scalar-values"&gt;&lt;em&gt;scalar&lt;/em&gt;&lt;/a&gt;. Here's a trivial example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# list context, @foo contains the list&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# scalar context, $bar contains 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the first line, we assign the list of numbers &lt;code&gt;(1, 2, 3)&lt;/code&gt; to the array &lt;code&gt;@foo&lt;/code&gt;. But in the second line, we're assigning to the scalar variable &lt;code&gt;$bar&lt;/code&gt;, which now contains the last item in the list.&lt;/p&gt;

&lt;p&gt;Here's another example, using the &lt;a href="https://perldoc.perl.org/functions/reverse"&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;one&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reverse&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# @bar contains ('three', 'two', 'one')&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reverse&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# $baz contains 'eerhtowteno'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In list context, &lt;code&gt;reverse&lt;/code&gt; takes its arguments and returns them in the opposite order. But in scalar context, it &lt;em&gt;concatenates&lt;/em&gt; all of the arguments together and returns a string with the &lt;em&gt;characters&lt;/em&gt; in opposite order.&lt;/p&gt;

&lt;p&gt;In general, "there is no general rule for deducing a function's behavior in scalar context from its behavior in list context." &lt;em&gt;&lt;a href="https://perl.plover.com/context.html"&gt;(Dominus 1998)&lt;/a&gt;&lt;/em&gt; You'll just have to &lt;a href="https://perldoc.perl.org/perlfunc"&gt;look up the function&lt;/a&gt; to determine what it does, though in general, it does what you want, but if you want to force scalar context use the &lt;a href="https://perldoc.perl.org/perlfunc"&gt;&lt;code&gt;scalar&lt;/code&gt;&lt;/a&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aab&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bbc&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="sr"&gt;/aa/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# returns a list (2), counting the number of matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hash-slices" class="anchor"&gt;
  &lt;/a&gt;
  Hash &lt;a href="https://perldoc.pl/perldata#Slices"&gt;slices&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One of Perl's three built-in data types is the hash, also known as an associative array. It's an unordered collection of scalars indexed by string, rather than the numbers used by normal arrays. It's a useful construct, and you can develop &lt;a href="https://perldoc.pl/perldsc"&gt;complicated data structures&lt;/a&gt; using just scalars, arrays, and hashes. What's not widely known is that you can access several elements of of a hash using a hash slice, using syntax that's similar to array slices. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$who&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@ENV&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HOME&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It works the other way, too: you can assign to a slice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@colors&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;'}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff0000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00ff00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0000ff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I use this a lot when assigning arguments received from functions or methods (see &lt;a href="https://phoenixtrap.com/index.php/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation"&gt;my previous article on subroutine signatures&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for postfix dereferencing&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(Str Int)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;

    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example above, &lt;code&gt;$check-&amp;gt;(@_)&lt;/code&gt; returns the type-checked arguments to the &lt;code&gt;foo()&lt;/code&gt; function courtesy of &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt;' &lt;code&gt;compile_named()&lt;/code&gt; function. It's returned as a hash reference, and since hashes are unordered, we specify the order in which we want the values by dereferencing and then slicing the resulting hash. The &lt;a href="https://perldoc.pl/perlref#Postfix-Reference-Slicing"&gt;postfix dereferencing syntax&lt;/a&gt; was added in Perl 5.20 and made a default feature in 5.24, and reduces the number of nested brackets and braces we have to deal with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article has given you a taste of some of the magic available in the Perl language. It's these sort of features that make programming in it a bit more joyful. As always, &lt;a href="https://perldoc.pl/"&gt;check the documentation&lt;/a&gt; for complete information on these and other topics, or look for answers and ask questions on &lt;a href="https://www.perlmonks.org/"&gt;PerlMonks&lt;/a&gt; or &lt;a href="https://stackoverflow.com/questions/tagged/perl"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/5-ways-you-can-embrace-the-magic-of-perl-1j11</id>
    <published>2021-02-05T20:19:11Z</published>
    <updated>2021-02-05T20:19:11Z</updated>
    <category term="perl"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Shuffling my playlist with Perl and quantum mechanics </title>
    <link rel="alternate" href="https://dev.to/brtastic/shuffling-my-playlist-with-perl-and-quantum-mechanics-4e0f" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;There are handful of reasons one might want to set up their own radio. A common playlist for a group of friends is one of them. Another one is having a fine-grained control over the logic behind the shuffling mechanism. Thankfully, setting up your own radio is easy now with &lt;a href="https://metacpan.org/pod/Audio%3A%3AStreamGenerator"&gt;Audio::StreamGenerator&lt;/a&gt; Perl module - and you get to utilize all the other great modules written for the language.&lt;/p&gt;

&lt;p&gt;The module I'm using for shuffling is not great at all in terms of popularity, but it is my own creation and I'm having a lot of fun replacing some tedious random number generation and array operations with it. The module takes some general laws of quantum physics - the phenomenon of a state of superposition, to be exact - and applies them to Perl variables. I'm not a physicist at all so don't expect it to be very accurate - the goal here is to allow for some very neat operations right in the code.&lt;/p&gt;

&lt;p&gt;The normal usage of the module is creating a superposition of values - an object that tries to act as if it had all these values at once, like an array on steroids - and then collapsing it to get one of the states randomly. It makes choosing a random element out of a group of elements very easy, and is more declarative way of doing it, rather than imperative. Of course, it is one of the less exciting features of the module - I will talk about more exciting stuff a bit later.&lt;/p&gt;

&lt;p&gt;The module is called &lt;a href="https://metacpan.org/pod/Quantum%3A%3ASuperpositions%3A%3ALazy"&gt;Quantum::Superpositions::Lazy&lt;/a&gt; (that's a fairly long name, so we'll call it by its alias - Q::S::L) and is more or less a rewrite of a very old &lt;a href="https://metacpan.org/pod/Quantum%3A%3ASuperpositions"&gt;Quantum::Superpositions&lt;/a&gt; module by Damian Conway - a famous Perl programmer. I decided to develop a new module not only because the old one was no longer developed, but also because it was lacking some crucial features that I was interested in, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It was not able assign to weights to states - all states had the same chance of occuring.&lt;/li&gt;
&lt;li&gt;It always kept all states and performed all the operations right away. Hence the &lt;em&gt;::Lazy&lt;/em&gt; part of my module, as it tries to perform operations as late as possible.&lt;/li&gt;
&lt;li&gt;It contained a lot of black magic, and was (in my opinion) a bit hard to handle due to that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-a-playlist" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a playlist
&lt;/h1&gt;

&lt;p&gt;A playlist will be just a filesystem directory with subdirectories categorizing the tracks, which are simply stored as &lt;em&gt;mp3&lt;/em&gt; files. Each category (or genre) will have a different chance of getting selected for the next song. To keep randomness in check, the same track from a category cannot be played before all tracks from the same category were played. This creates a rare situation where a track can be played twice in a row if it is selected as the last one and then the first one from a category - fixing it would require an additional condition, but the situation should be rare enough that we're not going to worry about it.&lt;/p&gt;

&lt;p&gt;Since categories will be played based on a fixed chance - no matter how many songs are in them - the playlist must be hand crafted to meet one's needs. Assigning a high chance to a small category will cause the songs from it to have a very high chance of getting selected. Lets look at an example:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;playlist
| - category_a
    | - song_1
    | - song_2
| - category_b
    | - song_3
    | - song_4
    | - song_5
    | - song_6
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we set weight of &lt;em&gt;category_a&lt;/em&gt; to be &lt;code&gt;10&lt;/code&gt; and the weight of &lt;em&gt;category_b&lt;/em&gt; to &lt;code&gt;5&lt;/code&gt;, the chances of songs playing will be as follows:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;weight sum: 15

category_a, songs: 2, weight: 10
    song chance: (10 / 15) / 2 * 100% = 33.(3)%
category_a, songs: 4, weight: 5
    song chance: (5 / 15) / 4 * 100% = 8.(3)%
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Each individual song from &lt;em&gt;category_a&lt;/em&gt; will be played four times as often as each individual song from &lt;em&gt;category_b&lt;/em&gt;, but a careless programmer may have thought that they will only be twice as frequent. All in all, categories will be played exactly how was specified, but one will feel that they listen to only two songs most of the time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quantumlike-shuffling" class="anchor"&gt;
  &lt;/a&gt;
  Quantum-like shuffling
&lt;/h1&gt;

&lt;p&gt;Now that we have a plan for a playlist, it is time to write code that will shuffle it. For this short presentation, we will only implement the &lt;code&gt;get_next_file&lt;/code&gt; function, which will return the name of a file that got selected. If you want to see the code in full or without my interruptions, please refer to &lt;a href="https://github.com/brtastic/perl-radio/blob/master/radio.pl"&gt;the file in my Github repository&lt;/a&gt;. Code between the repository and this article may differ a little, since I try to make it more readable here.&lt;/p&gt;

&lt;p&gt;Lets start with pragmas, imports and common variables that are required:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Q::S::&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="sx"&gt;qw(:all)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Path::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# current directory&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# configuration&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;genres&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;category_a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;category_b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The function will keep some state with the &lt;code&gt;state&lt;/code&gt; Perl keyword, which causes a variable to only be initiazed on the first function call and to keep the state throughout the calls. We also define a superposition with &lt;code&gt;my $shuffle&lt;/code&gt; and then call &lt;code&gt;-&amp;gt;collapse&lt;/code&gt; on it to get a single state randomly. Before returning the result, we also push the randomed state to the &lt;code&gt;$last&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_next_file&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# only initialized once&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$shuffle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$shuffle&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@$last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$choice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$choice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now to implement the &lt;code&gt;...&lt;/code&gt; part, we need to create a superposition that will read all the categories and tracks in each of them. We will use the category (genre) config defined above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$genre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;%*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@all_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$current&lt;/span&gt;&lt;span class="s2"&gt;/radio/&lt;/span&gt;&lt;span class="si"&gt;$genre&lt;/span&gt;&lt;span class="s2"&gt;/*.mp3&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$last_files&lt;/code&gt; is a superposition that will be used to obtain a list of songs that have not yet been played this turn. &lt;code&gt;@all_files&lt;/code&gt; should contain a list of all the &lt;em&gt;mp3&lt;/em&gt; files within the category. We can now create a narrowed list of files for the category:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@all_files&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;fetch_matches&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;every_state&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Okay, this one is much more complex, so lets spend a little while here.&lt;/p&gt;

&lt;p&gt;In the inner block, we compare two superpositions with &lt;code&gt;ne&lt;/code&gt;, which in Perl means not equal when comparing as strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This causes every state of &lt;code&gt;$pos&lt;/code&gt; to be compared with &lt;code&gt;ne&lt;/code&gt; against every state of &lt;code&gt;$last_files&lt;/code&gt;. If &lt;code&gt;$pos&lt;/code&gt; contains &lt;code&gt;[track1, track2, track3]&lt;/code&gt; and &lt;code&gt;$last_files&lt;/code&gt; contain &lt;code&gt;[track1, track3]&lt;/code&gt;, then the following comparisons will be performed:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;track1 ne track1
track1 ne track3
track2 ne track1
track2 ne track3
track3 ne track1
track3 ne track3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, to obtain a result from these comparisons, we need to join them somehow. I call this a reduction strategy, and there are currently three of them - &lt;em&gt;"any"&lt;/em&gt;, &lt;em&gt;"all"&lt;/em&gt; and &lt;em&gt;"one"&lt;/em&gt;. By default, &lt;em&gt;"any"&lt;/em&gt; strategy is used, which would create the following operation:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;track1 ne track1 ||
track1 ne track3 ||
track2 ne track1 ||
track2 ne track3 ||
track3 ne track1 ||
track3 ne track3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Can you see the problem here?&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;ne&lt;/code&gt; with &lt;em&gt;"any"&lt;/em&gt; strategy is often a mistake. It will work if both superpositions have a single element, but if we have two in either of them, it will always be true that one is not equal to the other. &lt;code&gt;track1 ne track3&lt;/code&gt; is enough to cause the entire operation to return true, even though an &lt;code&gt;eq&lt;/code&gt; operation (which is the opposite of &lt;code&gt;ne&lt;/code&gt;) will also return true. I'm considering introducing an exception to the &lt;em&gt;"any by default"&lt;/em&gt; rule in the module, but for now I have decided to keep it as it is.&lt;/p&gt;

&lt;p&gt;Thankfully we can control the reduction strategy by wrapping the operation in a function call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;every_state&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now &lt;em&gt;"all"&lt;/em&gt; strategy will be used, which will produce the following operation, which is correct:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;track1 ne track1 &amp;amp;&amp;amp;
track1 ne track3 &amp;amp;&amp;amp;
track2 ne track1 &amp;amp;&amp;amp;
track2 ne track3 &amp;amp;&amp;amp;
track3 ne track1 &amp;amp;&amp;amp;
track3 ne track3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, lets move on to the next wrapper, which is &lt;code&gt;fetch_states&lt;/code&gt;. Normally, &lt;code&gt;ne&lt;/code&gt; operation between two superpositions would return a boolean value. In this case we don't want a boolean value, but we'd rather like to know which states from the first superposition meet the &lt;code&gt;ne&lt;/code&gt; condition.&lt;/p&gt;

&lt;p&gt;This is exactly what &lt;code&gt;fetch_states&lt;/code&gt; is doing. A return value of it is a new superposition filled with states that matched. For a state to be included, it requires to meet the condition like the above, but a bit different:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;track1 will be included if:
    track1 ne track1 &amp;amp;&amp;amp;
    track1 ne track3

track2 will be included if:
    track2 ne track1 &amp;amp;&amp;amp;
    track2 ne track3

track3 will be included if:
    track3 ne track1 &amp;amp;&amp;amp;
    track3 ne track3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;From this example, only &lt;code&gt;track2&lt;/code&gt; will be included, which is what was expected.&lt;/p&gt;

&lt;p&gt;With that out of the way, lets come back to the creation of &lt;code&gt;$shuffle&lt;/code&gt; superposition. At this stage, it should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$genre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;%*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@all_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$current&lt;/span&gt;&lt;span class="s2"&gt;/radio/&lt;/span&gt;&lt;span class="si"&gt;$genre&lt;/span&gt;&lt;span class="s2"&gt;/*.mp3&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@all_files&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;fetch_matches&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;every_state&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;$last_files&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$pos&lt;/code&gt; superposition for the current genre is more or less ready to be added to &lt;code&gt;@arr&lt;/code&gt; which holds the states of the entire superposition, but we must first take care of clearing &lt;code&gt;$last&lt;/code&gt; of files if all tracks were already played. This code will take care of that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$pos&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;states&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@all_files&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;every_state&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="ow"&gt;ne&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-&amp;gt;states&lt;/code&gt; method returns a complete list of states for the superposition. If this is empty, we create it anew from the files found and remove all the files in this category from the last played files.&lt;/p&gt;

&lt;p&gt;The last step is to populate the &lt;code&gt;@arr&lt;/code&gt; array, and create a new superposition out of it outside the loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nv"&gt;$genre&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$pos&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;superpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Populating &lt;code&gt;@arr&lt;/code&gt; is done with an array reference, which contains two elements. The first one is the weight of the state, and the second one is value, in this case the superposition we just created. The module is smart enough to collapse positions recursively, so collapsing the parent superposition will also collapse the nested superpositions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With relatively short code we have achieved, in my opinion, quite a complex shuffling mechanism which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pure randomness within categories&lt;/li&gt;
&lt;li&gt;categories selected according to their weight&lt;/li&gt;
&lt;li&gt;playback history and avoiding duplications until all tracks are played&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Capabilities of the module does not end here. It contains a built in statistics module, which can provide information on most probable states, median state and even expected deviation (if the data is numeric). It can also mutate superpositions with mathematical operations, string operations and even a custom, user-specified function. I am also actively developing it, so it should get better with every release.&lt;/p&gt;

&lt;p&gt;(this article is also available on &lt;a href="https://brtastic.xyz/blog/article/shuffling-playlist"&gt;my personal blog&lt;/a&gt;)&lt;/p&gt;

</content>
    <author>
      <name>brtastic</name>
    </author>
    <id>https://dev.to/brtastic/shuffling-my-playlist-with-perl-and-quantum-mechanics-4e0f</id>
    <published>2021-02-05T09:40:24Z</published>
    <updated>2021-02-05T09:40:24Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="music"/>
  </entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 1</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></summary>
  <updated>2021-02-04T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl-1"/>  <id>https://perlmaven.com/exploring-bdd-in-perl-1</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></summary>
  <updated>2021-02-04T20:29:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl"/>  <id>https://perlmaven.com/exploring-bdd-in-perl</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
Live stream via <a href="https://www.twitch.tv/szabgab">Twitch</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>I found the truth about GameStop, Qanon, the Biden adminstration, and the British Royal Family</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/02/i-found-the-truth-about-gamestop-qanon-the-biden-adminstration-and-the-british-royal-family.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10071</id>
    <published>2021-02-01T13:53:59Z</published>
    <updated>2021-02-04T09:12:25Z</updated>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    <category term="randomconspiracytheorygenerator" label="random conspiracy theory generator" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<blockquote>
The British Royal Family and GameStop have been in a secret war with each other for hundreds of years. Nobody knows why. GameStop has included it in their manifesto and the Royals is always untrustworthy. They leave clues to mock us! GAMESTOP HAS INCLUDED IT IN THEIR MANIFESTO! MOCK! MOCK!
</blockquote>

<p>There is more:</p>

<blockquote>
Q found out that reincarnation is true and he has been imprisoned in The Pentagon. Qanon are protecting this secret. The Biden administration knows the truth but Qanon have paid them off with a warehouse full of holy water. The Wikipedia entry for The Pentagon keeps getting edited by the Biden administration and Qanon even admit it. They leave clues to mock us.
</blockquote>

<p>You too can find out the truth about what's REALLY going on <a href="https://metacpan.org/release/Acme-ConspiracyTheory-Random">here</a> or <a href="https://www.lemoda.net/games/consp/">here</a></p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Sicherheit für Perl-Anwendungen: fail2ban</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Ist eine Webanwendung öffentlich erreichbar, wird es nicht lange dauern und irgendwelche Bots versuchen sich anzumelden. Oder es werden wild irgendwelche URLs aufgerufen. Auch wenn die Anmeldeversuche wahrscheinlich scheitern, geht die Bot-Aktivität zu Lasten der Webanwendung. Und mit genügend versuchen klappt es vielleicht doch mal, dass sich jemand Unbefugtes anmeldet.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban</id>
    <published>2021-02-03T10:00:00Z</published>
    <updated>2021-02-03T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 98</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/02/perl-weekly-challenge-98.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10073</id>
    <published>2021-02-02T19:47:38Z</published>
    <updated>2021-02-02T20:24:17Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <category term="pwc" label="PWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-098/james-smith/perl">Github</a></p>

<h3>Challenge 1</h3>

<p>You are given file <tt>$FILE</tt>.</p>

<p>Create subroutine <tt>readN($FILE, $number)</tt> returns the first <em>n</em>-characters and moves the pointer to the (<em>n</em>+1)th character.</p>

<h4>Solution</h4>

<p>Rather than turning this into an object which was the first idea - I decided to keep the code clean by making it a function call, and to also make it work with multiple file handles open simultaneously. </p>

<p>To achieve this without an object - we will need to use a global hash to contain the opened file handles - so that when we re-call the function we don't re-open the file.</p>

<p><em>Aside - note if we were only reading these files once in a while - an alternative approach would be to keep an array of file-positions rather than file-handles, and then at each invocation - re-open the file - seek to the location and return the bytes before closing it again - this would cut down the resources associated with the script.</em></p>

<p>We could use a <tt>state</tt> variable declaration here {but that would mean that we couldn't add extra code to be able to clean up data later}.</p>

<p>In our function we use one of the "lower-level" file functions, read, which reads a given number of bytes into a scalar variable - note it has to be initialised before the function call.</p>

<p>If read returns "false" then that means that there was no content in the file at that point.</p>

<pre><code>
sub readN {
  my( $fn, $bytes ) = @_;

<p>  ## Create a file handle if we don't already have one<br />
  unless( exists $handles{$fn} ) {<br />
    open $handles{$fn}, '<', $fn;<br />
  }</p>

<p>  ## Create a buffer for the return value<br />
  my $t = '';</p>

<p>  ## Use "read" to read the $bytes bytes - these are put into 2nd parameter<br />
  ## If read returns undef it means it has reached the end of the file...<br />
  warn "Reached end of file $fn\n" unless read ${$handles{$fn}}, $t, $bytes;</p>

<p>  ## Return string<br />
  return $t;<br />
}<br />
</code></pre></p>

<p>The additional cleanup code is used to forcibly close the file handles before the end of the script - this is why we could not rely on using <strong>state</strong> variables.</p>

<pre><code>
sub cleanup {
  ## For neatness close all handles
  ## delete returns the value of the has deleted
  ## if filenames are passed then only those are cleaned up
  close delete $handles{$_} foreach @_ ? grep { exists $handles{$_} } @_ : keys %handles;
}

<p>sub show_open {<br />
  ## Return a list of open filenames<br />
  return keys %handles;<br />
}<br />
</code></pre></p>

<h3>Challenge 2</h3>

<p>You are given a sorted array of distinct integers <tt>@N</tt> and a target <tt>$N</tt>.</p>

<p>Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.</p>

<h4>Solution</h4>

<p>This is a much simpler problem than the previous one - we have to find the index of the number (or where to insert it)</p>

<p>Once we know where that is we check to see if we need to insert or not (using the 4 parameter version of <tt>splice</tt>) and to return the value.</p>

<pre><code>
sub insert_pos {
  my( $t, $l, $val ) = (0,@_);

<p>  ## Repeat unless we have got to end of list or the new entry is greater than val<br />
  $t++ while $t < @{$l} && $l->[$t] < $val;</p>

<p>  ## If we are after the end of the list (to avoid warning) OR<br />
  ## If we haven't found the entry then we use splice to insert it<br />
  splice @{$l},$t,0,$val if $t == @{$l} || $l->[$t] != $val;</p>

<p>    ## Warn to show splice has worked...<br />
    warn ">> $t ( @{$l} )\n"; ## Demonstrate splice</p>

<p>  ## Return the index of the number!<br />
  return $t;<br />
}<br />
</code></pre></p>

<p>If we aren't interested in doing the actual insert into the list then we can avoid the splice and so the code reduces to this.</p>

<pre><code>
sub insert_pos {
  my( $t, $l, $val ) = (0,@_);
  $t++ while $t < @{$l} && $l->[$t] < $val;
  return $t;
}
</code></pre>

<p>You could easily run this code with simpler function...</p>

<pre><code>
sub insert_pos {
  my( $l, $val ) = @_;
  return scalar grep { $_ < $val } @{$l};
}
</code></pre>

<p>But using our own loop is "optimal" if the number being inserted is near the start of the list - as the numbers increase numerically then we only need to check up to (or as far) as the number itself rather than the whole list. {you could use firstidx from List::MoreUtils}</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Monthly Report - January</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/02/monthly-report---january-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10072</id>
    <published>2021-02-02T10:52:29Z</published>
    <updated>2021-02-02T19:33:33Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-01.jpg"/></p>

<p><strong>Let's look at the brighter side ...</strong></p>

<p>Did you have chance to read my <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">annual report</a>?</p>

<p>I have been doing monthly report for many years now. </p>

<p><strong>Why? What is the point?</strong></p>

<p>Well, let me answer the first question, <strong>Why?</strong> To be honest with you, I do it to keep myself motivated. I need some kind of (self) motivation to carry on what I do on a daily basis. Now to answer the second question, <strong>What is the point?</strong> It helps me to keep track and follow the progress.</p>

<p>Above all, it gives me immense pleasure when I see <strong>Perl</strong> being discussed in a positive lights. As you all know, I am running <a href="https://perlweeklychallenge.org/">The Weekly Challenge - Perl & Raku</a> for nearly <strong>2 years</strong> now. To be precise, on <strong>25th March, 2021</strong>, we would celebrate our second anniversary. There is something else that is keeping me busy right now. Any guesses? In two weeks time, we would complete <strong>100th</strong> week of the weekly challenge. It is no small feat by any means. I never thought in my dreams that we woud come this far. Thanks to each and every members of <strong>Team PWC</strong>. I literally mean each and everyone. </p>

<p><strong>Is there anything new in the year 2021?</strong></p>

<p>The short answer is "<strong>Yes</strong>".</p>

<p>The new project <a href="https://github.com/manwar/design-patterns">Design Patterns using Modern Perl</a> is my new love interest. In fact, I was supposed to do this during the <strong>Christmas</strong> break last year but I couldn't do it because I was too busy working with <a href="https://perlweeklychallenge.org/blog/advent-calendar-2020/">Advent Calendar 2020</a>. I have received many encouraging messages so far for my new love. </p>

<p>One of my favourite <strong>CPAN</strong> module <a href="https://github.com/manwar/Map-Tube">Map::Tube</a>, released in <strong>Oct, 2010</strong>, recieved <strong>5 stars</strong> in <strong>GitHub</strong> and <strong>5 PAUSE</strong> users marked it favourites on <a href="https://metacpan.org/release/Map-Tube">MetaCPAN</a> as of today.</p>

<p>To beat one of my own work, in just fews days, <a href="https://github.com/manwar/design-patterns">Design Patterns using Modern Perl</a> already became <strong>#1</strong> with <strong>12 stars</strong> as of today.It is not finished yet as there are plenty more to be done. This is how my <strong>GitHub</strong> dashboard looks like:</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-dashboard.png"/></p>

<p><strong>Is everything going as per the plan?</strong></p>

<p>No, there are couple of side projects currently on hold for many reasons. Apology to <strong>brian d foy</strong> and <strong>Gabor Szabo</strong> for the delay. I will be back soon, promise, a gentleman promise. I don't want to embarass myself giving further details.</p>

<p>Last but not least, I would like to thank <strong>Kivanc Yazan</strong>, for the kind words in the <a href="https://kyzn.org/posts/prc-2020-report/">Pull Request Club 2020 Report</a>.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>4 Pull Requests</strong> submitted in the month of <strong>January 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-01.png"/></p>

<p><strong>2351 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-01.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>1031 commits</strong> recorded in the month of <strong>January 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-01.png"/></p>

<p>Overall <strong>1031 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-01.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>January 2021</strong>:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-094">Challenge #094</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-095">Challenge #095</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-096">Challenge #096</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097">Challenge #097</a></li>
</ul>

<p>And RECAPS are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-093">RECAP Challenge #093</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-094">RECAP Challenge #094</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-095">RECAP Challenge #095</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-096">RECAP Challenge #096</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of vides available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, sorry :-(</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-12">Niels van Dijke</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/release/Rex-Hook-File-Impostor">Rex::Hook::File::Impostor</a> by Ferenc Erki. I submitted <a href="https://github.com/ferki/Rex-Hook-File-Impostor/pull/4">one</a> Pull Request.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-01.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">Annual Report - 2020</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of <strong>The Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/494.html">Issue #494</a> and <a href="http://perlweekly.com/archive/496.html">Issue #496</a>. With this, I have now edited <strong>70 editions</strong> of Perl Weekly newsletter.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>January 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by thier generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-01.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Release 1.51 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/perl-workflow-release-1-51-4ieo" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Yet another <a href="http://jonasbn.github.io/perl-workflow/">perl-workflow</a> has been uploaded to CPAN.</p>

<p>The change log is included in this post, but I just want to highlight a few things from this release.</p>

<p>The most important change was the fixing of a very old <a href="https://en.wikipedia.org/wiki/Heisenbug"><em>heisenbug</em></a>. The bug was finally located by Erik Huelsmann and was not even in Workflow but in the dependency <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>.</p>

<p><a href="https://github.com/ap/Class-Observable/issues/1">An issue</a> has been raised for <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>.</p>

<p>However we have implemented a new handling observability, so <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a> has been factored out and is no longer a dependency of the Worflow distribution.</p>

<p>The issue was the implementation of <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>, using <em>stringified</em> versions of data structures, which would become addresses and this not being properly cleaned up. Perhaps a Perl::Critic policy should be created to warn about this - it might however be hard to spot if cleanup is in place, the use of adresses for keys should however be doable quite easily, but that is completely different discussion.</p>

<p>Another significant change is to the actual change log. Inpired by <a href="https://metacpan.org/pod/Nmap::Parser">Nmap::Parser</a> the change log (<code>Changes</code>) has changed format for plain text to Markdown. This is so much more readable and handling links and code snippets etc. is so much simpler (and prettier).</p>

<p>With a history spanning 43 release and 17 years of development, there might be a few additional things that need to be <em>marked down</em>, but in general it looks very good and in renders nicely on GitHub and <a href="https://metacpan.org/source/JONASBN/Workflow-1.51/Changes.md">MetaCPAN</a></p>

<p>This release is headlined like this:</p>

<blockquote>
<p>1.51 2021-01-31 Bug fix release, update recommended</p>
</blockquote>

<p>And as you can see we aim to adhere to the release documentation I have outlined and recommended in an earlier post: <a href="https://dev.to/jonasbn/why-and-how-should-you-write-a-good-change-log-4kp0">"Blog post: Why and How Should You Write a Good Change Log "</a> here on <strong>dev.to</strong>.</p>

<p>This does however mean that we have a minor regression on MetaCPAN, where a preview of the latest release is no longer rendered.</p>

<p>This is believed to be due to that MetaCPAN only can handle this for change logs adhering to the <a href="https://metacpan.org/release/CPAN-Changes">CPAN::Changes</a> <a href="https://metacpan.org/pod/distribution/CPAN-Changes/lib/CPAN/Changes/Spec.pod">specification</a>, which also provides the addition ability to test your change log via <a href="https://metacpan.org/pod/Test::CPAN::Changes">Test::CPAN::Changes</a> - all great and very nice, but we really like Markdown.</p>

<p>This is however a minor regression that we can live with, since it does not influence the Workflow distribution directly. My proposed changelog format does not conflict directly with the <a href="https://metacpan.org/pod/distribution/CPAN-Changes/lib/CPAN/Changes/Spec.pod">CPAN::Changes specification</a>, the specification does not support the benefits I suggest either, so perhaps it is better to make a new tester for my proposed format and perhaps even look into getting Markdown more generally supported on MetaCPAN eliminating our little regression.</p>

<h2>
  <a href="#change-log-for-perlworkflow-151" class="anchor">
  </a>
  Change log for perl-workflow 1.51
</h2>

<ul>
<li><p>Addressed bug/issue <a href="https://github.com/jonasbn/perl-workflow/issues/10">#10</a> of failing observers test, ref PR <a href="https://github.com/jonasbn/perl-workflow/pull/61">#61</a>. Documentation also updated accordingly via PR <a href="https://github.com/jonasbn/perl-workflow/pull/66">#66</a></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/86">#86</a> reverts fix to issue <a href="https://github.com/jonasbn/perl-workflow/issues/10">#10</a> introduced in release 1.49</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/85">#85</a> addressing bug with use of database fields in persister</p></li>
<li><p>Adressed bug/issue <a href="https://github.com/jonasbn/perl-workflow/issues/72">#72</a> (<em>reopened</em>) and <a href="https://github.com/jonasbn/perl-workflow/issues/73">#73</a> via PR <a href="https://github.com/jonasbn/perl-workflow/pull/74">#74</a></p></li>
<li>
<p>Improved test coverage, addressing issue <a href="https://github.com/jonasbn/perl-workflow/issues/36">#36</a> (<em>not closed</em>), ref PRs:</p>

<ul>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/80">#80</a></li>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/81">#81</a></li>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/91">#91</a></li>
</ul>


</li>
<li><p>Cleaned POD formatting, PR <a href="https://github.com/jonasbn/perl-workflow/pull/83">#83</a></p></li>
<li><p>Removed SVN/CVS legacy tags and adjusted shebang lines, PR <a href="https://github.com/jonasbn/perl-workflow/pull/82">#82</a></p></li>
<li><p>Change log converted from plain text to Markdown, PR <a href="https://github.com/jonasbn/perl-workflow/pull/76">#76</a></p></li>
<li><p>Added missing contributor Mohammad S Anwar to ACKNOWLEDGEMENT section, contribtution was included in release 1.49</p></li>
<li><p><a href="https://github.com/jonasbn/perl-workflow/pull/70">#70</a>, corrections to documentation on persisters</p></li>
<li><p><a href="https://github.com/jonasbn/perl-workflow/pull/71">#71</a> added a missing point to the change log for release 1.50</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/65">#65</a>, converting two older text files to Markdown. Documentation rewrite is being considered and improvements and additions will be made in this area in the future</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/67">#67</a> converting tabs to spaces</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/perl-workflow-release-1-51-4ieo</id>
    <published>2021-02-02T18:47:46Z</published>
    <updated>2021-02-02T18:47:46Z</updated>
    <category term="opensource"/>
    <category term="perl"/>
    <category term="release"/>
  </entry>
  <entry>
  <title>Grant Proposal: Maintaining Perl</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl"/>
  <id>tag:news.perlfoundation.org,2021-02-02:/post/grant_proposal_maintaining_perl</id>
  <published>2021-02-02T17:03:22</published>
  <updated>2021-02-02T17:03:22</updated>
  <summary>
  <![CDATA[
     Name Anthony Cook TonyC on irc.perl.org Synopsis Free up one of the Perl core's contributors to work non-stop on making Perl better. Project Details This grant provides the Perl Steering Committee with a development resource to target as they will, while still providing for more general bug fixes and other improvements to the perl core. Deliverables I propose to follow the same model as my current Perl 5 Core Maintenance 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>(note: I missed this somehow, and it should have been posted a while ago. Sorry - cromedome)</p>

<h2>Name</h2>

<p>Anthony (Tony) Cook - TonyC on irc.perl.org</p>

<h2>Synopsis</h2>

<p>Free up one of the Perl core's contributors to work non-stop on making
Perl better.</p>

<h2>Project Details</h2>

<p>This grant provides the Perl Steering Committee with a development
resource to target as they will, while still providing for more
general bug fixes and other improvements to the perl core.</p>

<h2>Deliverables</h2>

<p>I propose to follow the same model as my current Perl 5 Core
Maintenance Fund grant.</p>

<p>I intend to devote around 400 hours (about 20 hours a week) over the
next 20 weeks to work on improving the core, paid by the hour at the
same below-commercial rate as previously.  Some weeks I may be able to
more than 20 hours, if acceptable this will consume more hours and end
the grant earlier.</p>

<p>I expect to post a weekly summary on the p5p mailing list detailing
activity for the week, allowing the grant managers and active core
developers to verify that the claimed hours tally with actual
activity, and thus allow early flagging of any concerns.  This isn't
required by the fund rules, but it will help me keep on track for the
monthly reports.</p>

<p>Once per calendar month I would claim an amount equal to $50 x hours
worked. I would issue a report similar to the weekly ones, but
summarising the whole month. The report would need to be signed off by
one of the grant managers before I get paid. Note that this means I am
paid entirely in arrears.</p>

<p>Also, (the "nuclear option"), the grant managers would be allowed, at
any time, to inform the board that in their opinion the project is
failing, and that the TPF board may then, after allowing me to present
my side of things, to decide whether to terminate the project at that
point (i.e. to not pay me for any hours worked after I was first
informed that a manager had "raised the alarm").</p>

<p>As with my Perl 5 Core Maintenance Fund, I expect I'll apply to extend
this grant.</p>

<h2>Project Details</h2>

<p>I think that the work that I would do to improve Perl would mostly
fall into one of four main classes: code reviews, bug fixing, helping
other contributors, and adding features - with bug fixes the most
prominent and adding features the least.</p>

<p>I'll also accept specific direction from the Perl Steering Committee
for specific work to be done.</p>

<p>Ideally this would be done with some consultation with myself, so a
large complex task involving parts of the core I'm unfamiliar with
isn't assigned (or is assigned with reasonable expectations on time).
Of course, if too many tasks are negotiated into non-existence, the
grant can be terminated.</p>

<p>In general I'd work on:</p>

<ul>
<li>Reviews of patches submitted to github as pull requests.</li>
</ul>

<p>This will improve my core knowledge, and provide more timely feedback
to non-committers using their time to help perl.</p>

<p>Metric: number and complexity of patches applied or commented on.</p>

<ul>
<li>Fixing bugs I select from the perl github issues list.</li>
</ul>

<p>While I wouldn't necessarily be working on the the harder bugs that
Dave targets, this would help bring the total bug count down, and
reduce the noise in the issue list.</p>

<p>Metric: number and complexity of issues fixed.</p>

<ul>
<li>Fixing systemic issues in perl, such as the mis-use of I32 and U32 in the perl core.</li>
</ul>

<p>Metric: complexity of issue solved.</p>

<ul>
<li>Contributing to discussion on the perl5-porters mailing list and in #p5p on IRC.</li>
</ul>

<p>For the grant, I'm specifically not proposing to:</p>

<ol>
<li><p>Be a release manager.  This doesn't prevent me volunteering to act as a release manager, but that wouldn't be counted towards this grant.</p></li>
<li><p>Act as language designer - I don't feel that I'm good at this.</p></li>
</ol>

<h2>Project Schedule</h2>

<p>I expect that I can deliver 400 hours of work in approximately 20
weeks.</p>

<p>I am available to start work on this project immediately.</p>

<h2>Bio</h2>

<p>I'm a freelance programmer living in Australia.</p>

<p>I've been irregularly contributing to perl since 2008, a committer
since 2010 and have participated with the Perl 5 Core Maintenance Fund
since 2013.</p>

<p>My contributions have varied from build system fixes, to UTF-8
handling, to portability fixes.</p>

<p>I've been programming in C for 30 years and in perl for 25.</p>

<h2>Endorsed By</h2>

<p>Karl Williamson, Sawyer X, Ricardo Signes</p>

<h2>Amount Requested</h2>

<p>$20,000 (USD)</p>

<h2>Suggestions for Grant Managers</h2>

<p>SawyerX (core team), Ricardo Signes (grants committee)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/rx9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/rx9</id>
    <published>2021-02-01T10:00:49Z</published>
    <updated>2021-02-01T10:00:49Z</updated>
  </entry>
  <entry>
    <title>Big Dividends, Bigger Opportunity! Perl role with multiple location options</title>
    <link rel="alternate" href="https://job.perl.careers/b5a" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Leisure travel might be on hiatus, but if wanderlust has you eager to be somewhere else, why not consider working in a new country? Perl developers, pack your bags: your next big adventure awaits. Our client is looking for Perl developers who are comfortable with Moose and PSGI/Plack, and have a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/b5a</id>
    <published>2021-02-01T10:00:48Z</published>
    <updated>2021-02-01T10:00:48Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/rlz" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. If you’ve got mad Perl skills and a hankering to mine the sandbox of data waiting for you, grab your shovel and pail and drop us an email!</div>
    </content>
    <id>https://job.perl.careers/rlz</id>
    <published>2021-02-01T10:00:47Z</published>
    <updated>2021-02-01T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Guten Tag, Senior Perl Developers! Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/j6m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Bricks-and-mortar malls may be passé but having a real-time office to come to when the pandemic ends is a major perk. While work for this client is currently 100% remote, their main office is in St. Ingbert, Germany with a satellite office in Munich. The ideal candidate should be confident using Modern Perl, in particular happy with DBIx::Class and Moose/Moo.</div>
    </content>
    <id>https://job.perl.careers/j6m</id>
    <published>2021-02-01T10:00:46Z</published>
    <updated>2021-02-01T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/hu4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites, including Forbes, Wall Street Journal, CNN Business, and The Washington Post. This dynamic team is looking for a senior Perl programmer with a strong understanding of Go.</div>
    </content>
    <id>https://job.perl.careers/hu4</id>
    <published>2021-02-01T10:00:45Z</published>
    <updated>2021-02-01T10:00:45Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. The private ticket will be cheaper (EUR 30). People who register in time and transfer the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-02-01T10:00:44Z</published>
    <updated>2021-02-01T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 25, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-02-01T10:00:43Z</published>
    <updated>2021-02-01T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 24, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-02-01T10:00:42Z</published>
    <updated>2021-02-01T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Regular Expression: Master Manipulator of Text</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 4, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-02-01T10:00:41Z</published>
    <updated>2021-02-01T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 10, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-02-01T10:00:40Z</published>
    <updated>2021-02-01T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2021.01</title>
    <link rel="alternate" href="https://szabgab.com/report-2021-01.html" type="text/html"/>
    <id>https://szabgab.com/report-2021-01.html</id>
    <published>2021-02-01T10:00:39Z</published>
    <updated>2021-02-01T10:00:39Z</updated>
  </entry>
  <entry>
    <title>What to do now?</title>
    <link rel="alternate" href="https://szabgab.com/what-to-do-now.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just trying to figure out priorities.</div>
    </content>
    <id>https://szabgab.com/what-to-do-now.html</id>
    <published>2021-02-01T10:00:38Z</published>
    <updated>2021-02-01T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Courses</title>
    <link rel="alternate" href="https://courses.code-maven.com/p/perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">There are currently 4 Perl courses you can get one-by-one, all of them in a single bundle using a one-time payment or a monthly subscription.</div>
    </content>
    <id>https://courses.code-maven.com/p/perl</id>
    <published>2021-02-01T10:00:37Z</published>
    <updated>2021-02-01T10:00:37Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-02-01T10:00:36Z</published>
    <updated>2021-02-01T10:00:36Z</updated>
  </entry>
  <entry>
    <title>2020 Predictions Reviewed</title>
    <link rel="alternate" href="https://blog.urth.org/2021/01/29/2020-predictions-reviewed/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It might not be as interesting as predicticng the Coronavirus or as volatile as US politics, but I'd love to see your predictions for Perl 7, Raku, Go, and Rust. I had some other, more political ideas, but I think I'll leave them out now.</div>
    </content>
    <id>https://blog.urth.org/2021/01/29/2020-predictions-reviewed/</id>
    <published>2021-02-01T10:00:35Z</published>
    <updated>2021-02-01T10:00:35Z</updated>
  </entry>
  <entry>
    <title>How to replace a column in a CSV file using Perl</title>
    <link rel="alternate" href="https://perlmaven.com/replace-a-column-in-a-csv-file" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It is quite simple using Test::CSV, but if your file is simple you can also solve this by using split and join.</div>
    </content>
    <id>https://perlmaven.com/replace-a-column-in-a-csv-file</id>
    <published>2021-02-01T10:00:34Z</published>
    <updated>2021-02-01T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/01/25/PWC097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis shared solutions with examples which is always handy.</div>
    </content>
    <id>https://wlmb.github.io/2021/01/25/PWC097/</id>
    <published>2021-02-01T10:00:33Z</published>
    <updated>2021-02-01T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 097</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-097-3ag8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon made the tasks look simple by breaking them into smaller tasks.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-097-3ag8</id>
    <published>2021-02-01T10:00:32Z</published>
    <updated>2021-02-01T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Caesar Substrings</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_97__Caesar_Substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger built a hash map for Caesar Cipher task. His olution to the binary substrings task is very clever too.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_97__Caesar_Substrings.html</id>
    <published>2021-02-01T10:00:31Z</published>
    <updated>2021-02-01T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: flipping and swapping</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/01/25/PerlWeeklyChallenge97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca kept the Caesar Cipher task simple and easy to follow.</div>
    </content>
    <id>https://fluca1978.github.io/2021/01/25/PerlWeeklyChallenge97.html</id>
    <published>2021-02-01T10:00:30Z</published>
    <updated>2021-02-01T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Caesar Cipher and Binary Substrings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-97-caesar-cypher-and-binary-substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent's blog is, as always, full of magic - whether it is Perl or Raku.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-97-caesar-cypher-and-binary-substrings.html</id>
    <published>2021-02-01T10:00:29Z</published>
    <updated>2021-02-01T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/01/30/perl-weekly-challenge-097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lance is back after short break with a blog post promoting TDD. Must Read.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/01/30/perl-weekly-challenge-097/</id>
    <published>2021-02-01T10:00:28Z</published>
    <updated>2021-02-01T10:00:28Z</updated>
  </entry>
  <entry>
    <title>PWC097 - Binary Substrings</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/28/pwc097-binary-substrings/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio kept the binary substrings solution simple using just a for loop.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/28/pwc097-binary-substrings/</id>
    <published>2021-02-01T10:00:27Z</published>
    <updated>2021-02-01T10:00:27Z</updated>
  </entry>
  <entry>
    <title>PWC097 - Caesar Cipher</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/27/pwc097-caesar-cipher/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio is not scared of an eval-based solution. Must Read.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/27/pwc097-caesar-cipher/</id>
    <published>2021-02-01T10:00:26Z</published>
    <updated>2021-02-01T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 97</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James's one liner for Caesar Cipher task is impressive. Even the binary substrings solution is very clever.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html</id>
    <published>2021-02-01T10:00:25Z</published>
    <updated>2021-02-01T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Binary Substrings and Caesar ciphers: Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/01/25/binary-substrings-and-caesar-cyphers-perl-weekly-challenge-97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave made use of Levenshtein Distance to deal with the binary substrings task.</div>
    </content>
    <id>https://jacoby.github.io/2021/01/25/binary-substrings-and-caesar-cyphers-perl-weekly-challenge-97.html</id>
    <published>2021-02-01T10:00:24Z</published>
    <updated>2021-02-01T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Et tu Brute? Mit dem Ausflippen?</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/29/et-tu-brute-mit-dem-ausflippen/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin is testing our German in his blog post. A very enjoyable read, highly recommended.</div>
    </content>
    <id>https://colincrain.com/2021/01/29/et-tu-brute-mit-dem-ausflippen/</id>
    <published>2021-02-01T10:00:23Z</published>
    <updated>2021-02-01T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Caesarean Substrings with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/caesarean-substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne also used a bitwise operator to solve the binary substrings task. He also shared Perl solutions.</div>
    </content>
    <id>https://raku-musings.com/caesarean-substrings.html</id>
    <published>2021-02-01T10:00:22Z</published>
    <updated>2021-02-01T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Binary Substrings</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-binary-substrings/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool solution to the Binary substrings task. Must read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-binary-substrings/</id>
    <published>2021-02-01T10:00:21Z</published>
    <updated>2021-02-01T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Ceasar Cipher</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-ceasar-cipher/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail not only sharing Perl solutions but many more. Highly Recommended.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-ceasar-cipher/</id>
    <published>2021-02-01T10:00:20Z</published>
    <updated>2021-02-01T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/31" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam made use of a bitwisw operator to solve the binary substrings task. You don't want to miss it.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/31</id>
    <published>2021-02-01T10:00:19Z</published>
    <updated>2021-02-01T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron's blog is the best source for Raku magic.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-097/</id>
    <published>2021-02-01T10:00:18Z</published>
    <updated>2021-02-01T10:00:18Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 097</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-097" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Caesar Cipher" and "Binary Substrings" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-097</id>
    <published>2021-02-01T10:00:17Z</published>
    <updated>2021-02-01T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 098</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with a couple of fun tasks "Read N-characters" and "Search Insert Position". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-098</id>
    <published>2021-02-01T10:00:16Z</published>
    <updated>2021-02-01T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for December 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/dave-report-2020-december" type="text/html"/>
    <id>https://news.perlfoundation.org/post/dave-report-2020-december</id>
    <published>2021-02-01T10:00:15Z</published>
    <updated>2021-02-01T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal: Raku CI integration bot</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot</id>
    <published>2021-02-01T10:00:14Z</published>
    <updated>2021-02-01T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal Recap: January 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021</id>
    <published>2021-02-01T10:00:13Z</published>
    <updated>2021-02-01T10:00:13Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/24 - Brute-force for a Traveling-Salesman-like problem</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/31/aoc2016-24-tsp-brutal/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">On with Advent of Code puzzle 24 from 2016: a brute-force approach to a problem similar to the Traveling Salesman Problem.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/31/aoc2016-24-tsp-brutal/</id>
    <published>2021-02-01T10:00:12Z</published>
    <updated>2021-02-01T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Iterator-based implementation of Permutations</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/30/permutations-iterator/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An iterator-based implementation of Permutations with Heap's Algorithm. You saw it coming.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/30/permutations-iterator/</id>
    <published>2021-02-01T10:00:11Z</published>
    <updated>2021-02-01T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Permutations with Heap's Algorithm</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/29/permutations-algorithm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">All permutations over N objects can be generated by Heap's Algorithm.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/29/permutations-algorithm/</id>
    <published>2021-02-01T10:00:10Z</published>
    <updated>2021-02-01T10:00:10Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Dynamic Josephus</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/26/aoc2016-19-dynamic-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I was very happy to get past puzzle 19 from the 2016 edition of Advent of Code, but let's admit two facts: I didn't demonstrate that the heuristic is actually a rule; This wouldn't help in some other general case.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/26/aoc2016-19-dynamic-josephus/</id>
    <published>2021-02-01T10:00:09Z</published>
    <updated>2021-02-01T10:00:09Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Halving Josephus</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/25/aoc2016-19-halving-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Realizing the folly of their present-exchange rules, the Elves agree to instead steal presents from the Elf directly across the circle. If two Elves are across the circle, the one on the left (from the perspective of the stealer) is stolen from. The other rules remain unchanged: Elves with no presents are removed from the circle entirely, and the other elves move in slightly to keep the circle evenly spaced.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/25/aoc2016-19-halving-josephus/</id>
    <published>2021-02-01T10:00:08Z</published>
    <updated>2021-02-01T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Perl - mockgen helper perl script</title>
    <link rel="alternate" href="https://dev.to/takakd/mockgen-helper-perl-script-1g5l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A simple wrapper script, but IMHO even in such simple scripts it would be better to include the safety boilerplate. If for no other reason then to have better copy-paste templates for other people.</div>
    </content>
    <id>https://dev.to/takakd/mockgen-helper-perl-script-1g5l</id>
    <published>2021-02-01T10:00:07Z</published>
    <updated>2021-02-01T10:00:07Z</updated>
  </entry>
  <entry>
    <title>The Trouble with Reference Counting</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/the-trouble-with-reference-counting/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl uses a simple form of garbage collection (GC) called reference counting. Every variable created by a Perl program has a refcnt associated with it. If the program creates a reference to the variable, Perl increments its refcnt. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values' refcnt are either decremented or they're reclaimed as well if no other references to them remain.</div>
    </content>
    <id>https://perldotcom.perl.org/article/the-trouble-with-reference-counting/</id>
    <published>2021-02-01T10:00:06Z</published>
    <updated>2021-02-01T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Better Perl with subroutine signatures and type validation</title>
    <link rel="alternate" href="https://phoenixtrap.com/index.php/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Though they are still marked as 'experimental', function signatures have been around for more than 6 years now! To comment visit the <a href="https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck">dev.to</a> copy of the article or <a href="https://www.reddit.com/r/perl/comments/l6gdub/better_perl_with_subroutine_signatures_and_type/">reddit</a></div>
    </content>
    <id>https://phoenixtrap.com/index.php/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/</id>
    <published>2021-02-01T10:00:05Z</published>
    <updated>2021-02-01T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Release 1.50 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Workflow - A Simple, flexible system to implement workflows. Written in Perl.</div>
    </content>
    <id>https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h</id>
    <published>2021-02-01T10:00:04Z</published>
    <updated>2021-02-01T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.300005 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/01/dancer2-0300005-released.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A bunch of small new features, enhancements, and bug fixes. The announcement even mentions my little contribution, setting up GitHub Actions for Continuous Integration.</div>
    </content>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/01/dancer2-0300005-released.html</id>
    <published>2021-02-01T10:00:03Z</published>
    <updated>2021-02-01T10:00:03Z</updated>
  </entry>
  <entry>
    <title>perl.com hijacked</title>
    <link rel="alternate" href="https://log.perl.org/2021/01/perlcom-hijacked.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The perl.com domain was hijacked. Work is underway to attempt to recover the domain to Tom Christiansen, the rightful registrant.  If you're looking for the content, you can visit <a href="https://perldotcom.perl.org/">perldotcom.perl.org</a> which is a <a href="https://www.reddit.com/r/perl/comments/l7bwn5/perldotcomperlorg_is_a_temporary_host_for_perlcom/">temporary host</a>. <a href="https://www.reddit.com/r/perl/comments/l73998/perlcom_a_1994_domain_has_been_stolen_by_busy/">report</a> and <a href="https://www.reddit.com/r/perl/comments/l6d8ws/perlcom_unfriendly_domain_take_over/">discuss</a> and also on <a href="https://news.ycombinator.com/item?id=25940240">Hacker news</a>.</div>
    </content>
    <id>https://log.perl.org/2021/01/perlcom-hijacked.html</id>
    <published>2021-02-01T10:00:02Z</published>
    <updated>2021-02-01T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Optimize GitHub Actions for Perl</title>
    <link rel="alternate" href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">If you use GitHub Actions for your CI/CD you know it doesn't treat Perl as a first class citizen. &lt;a href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition"&gt;This tutorial-style post&lt;/a&gt; can help you learn how to deploy a prebuilt Perl environment into GitHub Actions, simplifying and speeding up your CI/CD.</content>
    <id>https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition</id>
    <published>2021-02-01T10:00:01Z</published>
    <updated>2021-02-01T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#497 - perl.com was hijacked</title>
    <link rel="alternate" href="http://perlweekly.com/archive/497.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>The big news of the week is that perl.com was hijacked. According to what I have read the solution seem to be already on its way to recover the domain. If you are using a perl.com host for your CPAN mirror you should use www.cpan.org instead (See <a href="https://log.perl.org/2021/01/perlcom-hijacked.html">this post</a>.) You can also find the content of <a href="https://perldotcom.perl.org/">perl.com on perldotcom.perl.org</a>. Ask brian d foy (brian.d.foy@gmail.com) for further details. (See also <a href="https://www.reddit.com/r/perl/comments/l8x21u/the_state_of_perlcom/">on Reddit</a>.)</p>
<p>I'd like to thank all the people who answered my call 2 weeks ago and started to <a href="https://www.patreon.com/manwar">support Manwar</a>. He went from 21 to 30 patrons. Let's do another round of this! If you have been reading the Perl weekly and would like to show you appretiation to Mohammad who is the most prolific co-editor of the newsletter, then the easiest way to do so is to sign up to his <a href="https://www.patreon.com/manwar">Patreon account</a> and buy him a coffee every month.</p>
<p>In other news <a href="https://www.reddit.com/r/perl/comments/l457ay/perl_5340_will_be_released_in_may/">Perl 5.34 will be released</a> in May.</p>
<p>Finally, remember, I've opened the <a href="https://courses.code-maven.com/">Code Maven school</a> where I already have 4 Perl courses, 3 Python courses besides the Go, Docker, and Git courses. Check them out and let me know what you are missing from there.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/497.html</id>
    <published>2021-02-01T10:00:00Z</published>
    <updated>2021-02-01T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ContainingJustData-0.002">Acme-CPANModules-ContainingJustData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-PERLANCAR-Forked-0.002">Acme-CPANModules-PERLANCAR-Forked</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of my modules which are forked from others</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-UUID-0.001">Acme-CPANModules-UUID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that can generate immutable universally unique identifier (UUIDs)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-ConspiracyTheory-Random-0.001">Acme-ConspiracyTheory-Random</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>random theories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Acme-STEVEB-0.43">Acme-STEVEB</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.43</td>
<td>One line description</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NMELNICK/AnyEvent-Discord-0.1">AnyEvent-Discord</a></td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>0.1</td>
<td>Provides an AnyEvent interface to the Discord bot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JDEGUEST/Apache2-SSI-v0.1.0">Apache2-SSI</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>Apache2 Server Side Include</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-sensor-0.01">App-Device-Chip-sensor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Base class to build Device::Chip::Sensor-based applications on</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JV/App-Dusage-2.00">App-Dusage</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>2.00</td>
<td>provide disk usage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-xp-0.01">App-Greple-xp</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>extended pattern module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-idxdb-0.001">App-idxdb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Import data from IDX and perform queries on them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-borderstyle-0.001">App-lcpan-CmdBundle-borderstyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-streamfinder-0.001">App-streamfinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI for StreamFinder, a module to fetch actual raw streamable URLs from video &amp; podcasts sites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OELE/Audio-StreamGenerator-0.01">Audio-StreamGenerator</a></td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>0.01</td>
<td>create a 'radio' stream by mixing ('cross fading') multiple audio sources (files or anything that can be converted to PCM audio) and sending it to a streaming server (like Icecast)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ATRODO/Audio-TinySoundFont-0.10">Audio-TinySoundFont</a></td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>0.10</td>
<td>Interface to TinySoundFont, a "SoundFont2 synthesizer library in a single C/C++ file"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-Mcl-0.210170">Bio-MUST-Tools-Mcl</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210170</td>
<td>Scripts for processing MCL clusters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-TreeParsing-0.210200">Bio-MUST-Tools-TreeParsing</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210200</td>
<td>Scripts for parsing trees</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/CSS-Struct-Output-Indent-ANSIColor-0.01">CSS-Struct-Output-Indent-ANSIColor</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Indent printing 'CSS::Struct' structure to CSS code with ansi color output.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/CSS-Tidy-0.00_01">CSS-Tidy</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>reformat CSS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JJNAPIORK/CatalystX-Errors-0.001001">CatalystX-Errors</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>Default Web HTTP Error Pages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ColorTheme-Distinct-WhiteBG-0.001">ColorTheme-Distinct-WhiteBG</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Pick some distinct colors (that are suitable for white background) for you</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Crayon-0.01">Crayon</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>CSS Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-Verify-TRIAL-0.24">Crypt-OpenSSL-Verify-TRIAL</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.20</td>
<td>OpenSSL Verify certificate verification in XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PAWELKROL/D64-Disk-Layout-0.01">D64-Disk-Layout</a></td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>0.01</td>
<td>Handling entire Commodore (D64/D71/D81) disk image data in pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Constraints-NumberPhone-0.04">Data-FormValidator-Constraints-NumberPhone</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.04</td>
<td>Data constraints, using Number::Phone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Filters-WikiTrim-0.03">Data-FormValidator-Filters-WikiTrim</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>Trim filter for wikitext fields</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-URI-0.03">Data-FormValidator-URI</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>URI constraint/filter for Data::FormValidator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Data-Prepare-0.001">Data-Prepare</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>prepare CSV (etc) data for automatic processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BSHIELDS/Data-QuickMemoPlus-Reader-0.01">Data-QuickMemoPlus-Reader</a></td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>0.01</td>
<td>Extract text from QuickMemo+ LQM export files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-EnsureMinimumPerl-0.01">Dist-Zilla-Plugin-EnsureMinimumPerl</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Ensure that you have specified a minimum version of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-GitHub-RequireGreenBuild-0.01">Dist-Zilla-Plugin-GitHub-RequireGreenBuild</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Require a successful GitHub Actions workflow run</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/Dist-Zilla-Plugin-SyncCPANfile-0.01">Dist-Zilla-Plugin-SyncCPANfile</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Sync a cpanfile with the prereqs listed in dist.ini</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-Author-DOMM-0.906">Dist-Zilla-PluginBundle-Author-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.906</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-DOMM-0.900">Dist-Zilla-PluginBundle-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.900</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AMICELI/Fancazzista-Scrap-0.01">Fancazzista-Scrap</a></td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>0.01</td>
<td>Scrap websites and reddit posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Feature-Compat-Try-0.01">Feature-Compat-Try</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>make try/catch syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/File-FormatIdentification-RandomSampling-0.005">File-FormatIdentification-RandomSampling</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.005</td>
<td>methods to identify content of device o media files using random sampling</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Future-IO-Impl-UV-0.01">Future-IO-Impl-UV</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>implement Future::IO using UV</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LORENZO/Games-Dice-Roller-0.01">Games-Dice-Roller</a></td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>0.01</td>
<td>a full featured dice roller system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMERELO/GitHub-Actions-0.0.3">GitHub-Actions</a></td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>0.0.3</td>
<td>Work in GitHub Actions using Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Html2-0.05">Gtk2-Html2</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.05</td>
<td>DEPRECATED Perl bindings for the GtkHtml2 Html display widget</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Recent-0.052">Gtk2-Recent</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.052</td>
<td>(DEPRECATED) Perl wrapper to the recent files spec Gtk</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Calendar-0.00_01">HTML-Make-Calendar</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Make an HTML calendar</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Page-0.00_01">HTML-Make-Page</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Automate making HTML &lt;head&gt; and &lt;body&gt;</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Image-PNG-Util-0.00_01">Image-PNG-Util</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>manipulate the image data part of PNGs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/JSON-Server-0.00_01">JSON-Server</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>JSON-only server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RCOSCALI/JSON_minify-1.0">JSON_minify</a></td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1.0</td>
<td>minify a JSON and also remove comments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Raisin-1.00">Kelp-Module-Raisin</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Raisin integration with Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Sereal-1.00">Kelp-Module-Sereal</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Sereal encoder / decoder for Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Lingua-String-0.01">Lingua-String</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Class to contain a string in many different languages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AFAN/Loctools-Markdown-0.9-TRIAL">Loctools-Markdown</a></td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>0.9</td>
<td>Localization-focused Markdown parser/generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-List-More-Patch-Hide-0.001">Module-List-More-Patch-Hide</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Hide some modules from Module::List::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JHTHORSEN/Mojo-UserAgent-SecureServer-0.01">Mojo-UserAgent-SecureServer</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>Secure application server for Mojo::UserAgent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojolicious-Matterbridge-0.01">Mojolicious-Matterbridge</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>a simplistic module to connect to chat servers via matterbridge</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Mojolicious-Plugin-Component-0.01">Mojolicious-Plugin-Component</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Module-based Component Renderer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AJNN/Neo4j-Types-1.00">Neo4j-Types</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>Common Neo4j type system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FSM/Net-OBS-Client-0.0.5">Net-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>v0.0.5</td>
<td>simple OBS API calls</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/OTRS-OPM-Validate-0.01">OTRS-OPM-Validate</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Validate .opm files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VERMAUDH/Pod-Modifier-1">Pod-Modifier</a></td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
<td>Modify/ add to an existing POD dynamically</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Pulsar-WebSocket-Client-0.01">Pulsar-WebSocket-Client</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>Perl client for Apache Pulsar WebSocket API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-BorderStyle-0.001">Sah-Schemas-BorderStyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-ColorTheme-0.001">Sah-Schemas-ColorTheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Simd-Avx512-20210121">Simd-Avx512</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210121</td>
<td>Simd::Avx512 – Emulate SIMD instructions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-VideoTag-0.0100">Statocles-Plugin-VideoTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Change video file anchors to video elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAMTAUXE/Store-Directories-0.1">Store-Directories</a></td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>0.1</td>
<td>Manage a key/value store of directories with controls for</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Finally-0.01">Syntax-Keyword-Finally</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>add FINALLY phaser block syntax to perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Trans-0.00_01">Table-Trans</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Translations-0.00_01">Table-Translations</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-Lookup-0.001">TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SNEZ/Task-OpenTracing-v0.0.1">Task-OpenTracing</a></td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>v0.0.1</td>
<td>install all the OpenTracing modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GUGOD/Task-PerlCriticAllPolicies-0.01">Task-PerlCriticAllPolicies</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>0.01</td>
<td>A Task for installing all Perl::Critic policies at once.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Template-Plugin-StripComments-1.02">Template-Plugin-StripComments</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1.02</td>
<td>Template Toolkit filter to strip comment blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Text-BibTeX-Validate-0.1.0">Text-BibTeX-Validate</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>validator for BibTeX format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Text-LooksLike-0.00_01">Text-LooksLike</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>make guesses about snippets of text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ELIONORA/Text-Unmunch-0.1">Text-Unmunch</a></td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/USCIS-Case-0.01">USCIS-Case</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to check USCIS case status. More features would be added in the future.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Random-PERLANCAR-0.002">UUID-Random-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Another implementation of UUID::Random</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Tiny-Patch-UseMRS-0.001">UUID-Tiny-Patch-UseMRS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Make UUID::Tiny use Math::Random::Secure's rand()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenChart-0.001">WHO-GrowthReference-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create WHO growth chart ()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenTable-0.001">WHO-GrowthReference-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add WHO reference fields to table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/WebService-Postex-0.001">WebService-Postex</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Postex WebService implemenation in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBIB/Wireguard-WGmeta-0.0.6">Wireguard-WGmeta</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.6</td>
<td>An approach to add metadata to the main Wireguard config</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-ColorName-WWW-0.003">WordList-EN-ColorName-WWW</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Color names from Graphics::ColorNames::WWW</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ID-ColorName-HTML_ID-0.002">WordList-ID-ColorName-HTML_ID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of color names from Graphics::ColorNames::HTML_ID</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>84</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>48</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ContainingJustData PERLANCAR 0.002 Modules that just contain data Acme-CPANModules-PERLANCAR-Forked PERLANCAR 0.002 List of my modules which are forked from others Acme-CPANModules-UUID PERLANCAR 0.001 Modules that can generate immutable universally unique identifier (UUIDs) Acme-ConspiracyTheory-Random TOBYINK 0.001 random theories Acme-STEVEB STEVEB 0.43 One line description AnyEvent-Discord NMELNICK 0.1 Provides an AnyEvent interface to … <a href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1935</id>
    <published>2021-02-01T00:53:24Z</published>
    <updated>2021-02-01T00:53:24Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>TPF Meeting Minutes for December 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/meeting-2020-12"/>
  <id>tag:news.perlfoundation.org,2021-01-31:/post/meeting-2020-12</id>
  <published>2021-01-31T11:27:49</published>
  <updated>2021-01-31T11:27:49</updated>
  <summary>
  <![CDATA[
     TPF Board members and the community leaders meet every month and here are the minutes from the December 2020 meeting. Part 1 Community Attendees Board: Dave Rolsky, Stuart Mackintosh, Ricardo Signes, Curtis Poe, Dan Wright Community leaders: Todd Rinaldo, JJ Merelo, Daniel Sockwell, Jason Crome, Andrew Solomon, Mark Keating, Alex Beamish, Nigel Hamilton Admin: Nic Evans Main session Marketing, Mark Keating Had conversations with Gary Beckwith. He has lots to 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>TPF Board members and the community leaders meet every month and here are the minutes from the December 2020 meeting.</p>

<h1>Part 1 - Community</h1>

<h2>Attendees</h2>

<ul>
<li>Board: Dave Rolsky, Stuart Mackintosh, Ricardo Signes, Curtis Poe, Dan Wright</li>
<li>Community leaders: Todd Rinaldo, JJ Merelo, Daniel Sockwell, Jason Crome, Andrew Solomon, Mark Keating, Alex Beamish,  Nigel Hamilton</li>
<li>Admin: Nic Evans</li>
</ul>

<h2>Main session</h2>

<h3>Marketing, Mark Keating</h3>

<ul>
<li>Had conversations with Gary Beckwith. He has lots to contribute regarding surveys. Need a quick survey ref TPF name - we need people's feedback in their own words, and he helps us achieve that.</li>
<li>Supporting projects and the languages and supporting community projects are the key things people are interested in. Going to get a survey out over Christmas.</li>
<li>Stuart: we need to ensure Nigel's perspective is considered in terms of trademark and branding.</li>
<li>Need a brand that is identifiable to us and then we can move on in terms of sites that are recognised as Perl resources.</li>
<li>When we do bring new people in we need to share the right resources with them (Recognised resources)</li>
<li>Some overlap between marketing and sponsorship - would like to get a meeting with the sponsorship team to talk about working together.</li>
<li>Nige: we were trying to tackle the "Perl is dead" theme and did the Raku advent calendar</li>
</ul>

<h3>Compliance / OpenChain / SPDX, Stuart Mackintosh</h3>

<ul>
<li>Ability to determine your licence position, technical project Stuart is keen to drive forward - if we can bring this structure into Perl / CPAN, that puts perl at the front of the line of professional software languages. Keen to get people's views/thoughts. Continue conversation offline</li>
<li>Curtis: I would argue it is a good theory but my clients don't care - it's not a good thing they don't care.</li>
<li>Stuart: It's about the ability to be auditable. By bringing in SPDX it helps auditability.</li>
<li>Dave: At ActiveState we have customers who really do care about this and there is a lot of interest. I could perhaps get time to do some work on it myself because it would be beneficial for us. A lot of companies care.</li>
<li>Stuart: Oracle v Google legal news - The outcome of this will that corporates have to know where the licence is and it can be audited. Something to watch. Project I am working with is funded by Linux Foundation.</li>
</ul>

<h3>TPC Conferences, Todd Rinaldo</h3>

<ul>
<li>Houston conference being moved to June 2022, Contract to be signed and deposit to be paid. </li>
<li>Board to confirm approval</li>
<li>Todd: should TPC Board member sign this? -&gt; Discussion with Board to follow.</li>
<li>We need to communicate there will be no in person conference - planning repeat of last years. Beginning planning in next month or so (after Christmas)</li>
<li>Stuart advised Todd to look at FOSDEM</li>
<li>Stuart: we all need to look at how we can amplify messages - all get involved in sharing news - make sure information gets out.</li>
<li>Mark: needs to get to all different groups outside of our own, via LinkedIn, FaceBook, Twitter</li>
<li>Stuart: need to consider structure</li>
<li>Mark: Need a channel where we say about sharing messages - act on good faith</li>
</ul>

<h3>FOSDEM, JJ Merelo</h3>

<ul>
<li>There are 6 references to Perl dev room in Twitter - we are failing - we are missing</li>
<li>It is important to submit talks.</li>
<li>Urged people to attend FOSDEM, to submit talks</li>
<li>As it is online we have a unique opportunity for all international coders to get involved and share passion about Perl and Raku</li>
<li>Currently have just 2 submissions - both are Raku. Need to get Perl speakers.</li>
<li>Stuart: FOSDEM will be very different - there is just one week to submit a paper - you don't need to have written it - just need a title and how long you need to reserve your slot. Then have one month to record slot and send to FOSDEM to publish - live QA after then hallway track.</li>
<li>Stuart will get something together to explain what people need to so - look at existing call for papers and edit, or do a new article</li>
<li>Stuart and JJ are official Perl/Raku coordinators so get to choose the papers. We can also help people work way around FOSDEM and processes and putting together a talk.</li>
<li>We have one day - would be great to have it packed full of Perl and Raku content.</li>
</ul>

<h3>Grants, Jason Crome</h3>

<ul>
<li>Most recent grant period - November - no grant submissions</li>
<li>Stats for last three years:
<ul>
<li>2018 - $32.5k proposed, $27.5k granted (approx, same below)</li>
<li>2019 - $23.5k proposed, $13.5k granted</li>
<li>2020 - $45.5k proposed, $12k granted</li>
</ul></li>
<li>Most recently completed was Jason Mackintosh </li>
<li>This year was highest of the last three years grant requests. Summary of activity to be published on TPF Blog </li>
<li>I think $20,000 a year is a good amount, ideally $25k - if looking to increase activity.</li>
<li>May need to update Charter of Grants committee to better reflect what we do. 
<ul>
<li>Will be a focus of the grants committee for 2021</li>
</ul></li>
<li>Stuart to take amount to agree for grants to the Board.</li>
</ul>

<h3>Newcomers, Andrew Solomon</h3>

<ul>
<li>We have no place for newbies to engage with experienced coders - we are looking at what we can do. </li>
<li>I have been talking to Gary to find out who the newbies are, what they need to get support, what level they are at within Perl, what chat technology they use, etc. </li>
<li>Once a survey drafted, who needs to approve it? When can it go out?</li>
<li>Stuart: no reason it cannot be done - asked Board if needed a formal approach</li>
<li>Dave: Beyond the survey we need to think about two other things:
<ol>
<li>What sort of of commitment are we making in terms of technology - is there a financial consideration; </li>
<li>How do me manage moderation?</li>
</ol></li>
<li>Stuart to share survey with Board for feedback.</li>
</ul>

<h3>Sponsorship, Alex Beamish</h3>

<ul>
<li>Been crafting message for corporates</li>
<li>Not paid attention to personal donations - need conversation with Mark about that - an interesting angle. Been concentrating on corporations.</li>
<li>Not sure we have infrastructure to do same as Python to have a major push.</li>
<li>Want to use 2021 to really push sponsorship</li>
<li>Dave: I have a lot of experience with individual fundraising so can help the sponsorship committee</li>
<li>Andrew: happy to help through Geekuni in a similar way as Python</li>
<li>Stuart: Does Board need to consider if there should be a target for sponsorship each year.</li>
</ul>

<h3>Legal update, Nigel Hamilton</h3>

<ul>
<li>Been looking at Raku trademark guidelines</li>
<li>EU trademark application - refused late November. Not sure if we had correspondence. Digging deeper with lawyers involved and following up in next few days.</li>
<li>UK trademark is fine - and currently in application in US.</li>
<li>Brexit not an issue with trademark.</li>
</ul>

<h3>Raku update, Daniel Sockwell</h3>

<ul>
<li>Had Raku Steering Council and agreed code of conduct - needs some revisions before submitting publicly to Raku community as a whole.</li>
<li>Agreed to meet roughly monthly. Next meeting early January 2021</li>
<li>Been doing Raku Advent Calendar - JJ has really spearheaded this. Been successful looking at Wordpress stats. We did lose viewers with shift from Perl 6 to Raku advent calendar, but this year we are 30% above we were were at end of December last year.</li>
<li>Coding challenge going on - has drawn a number of people from outside of the Raku community to try out raku.</li>
<li><p>Had successful outreach. </p></li>
<li><p>Stuart: what does Raku community need from Perl Foundation?</p></li>
<li>Daniel - As of now we are continuing to benefit from support of trademark work and grants committee. I will raise it at next steering council meeting.</li>
</ul>

<h3>Perl Governance,  Rik Signes</h3>

<ul>
<li>Voting underway for last 16 days. We haven't had all votes yet. </li>
<li>As far as language track - little has happened on mailing list</li>
</ul>

<h3>Perl infrastructure, Rik Signes</h3>

<ul>
<li>Infrastructure groups starting to become more active again.</li>
<li>Looking to set up some compute for hosting things.   (That is, cloud hosting for software, like Digital Ocean, Linode, and Azure, all of whom Rik has approached.)</li>
<li>What are we going to do and what are going to back burn.</li>
<li>Need to look at rt.cpan.org - one of our members thinks they can do something.</li>
<li>Discussion around dromedary.  "dromedary" is a very powerful server used by some of the Perl 5 developers for testing and other development work.  What will it be?</li>
<li><p>Depends on what people want. We'll be following up in January.</p></li>
<li><p>Dan: we like CPAN mirror and want to keep it - is it going to be a problem</p></li>
<li>Rik: people will still be able to mirror CPAN.</li>
</ul>

<h3>End of year message from Stuart</h3>

<ul>
<li>What is most important to you? I'd like to hear what you would like to be included in that message? Suggestions?</li>
<li>Stuart to write blog and publish</li>
</ul>

<h3>2021 meeting schedule planning and publication plan</h3>

<ul>
<li>Need to schedule next 12 months.</li>
<li>All OK with the time we currently hold it.</li>
<li>Nic to do calendar and share with Board for approval before publishing - publish full schedule on Perl Foundation website.</li>
</ul>

<h1>Part 2 - Board</h1>

<h2>Attendees</h2>

<ul>
<li>Stuart Mackintosh</li>
<li>Dan Wright</li>
<li>Curtis Poe</li>
<li>Dave Rolsky</li>
<li>Makoto Nozaki</li>
<li>Rik Signes</li>
<li>Nic Evans (Admin)</li>
</ul>

<h2>Main session</h2>

<h3>Grants</h3>

<ul>
<li>Need value proposition / business case</li>
<li>Budget</li>
<li>Guidance - is there a threshold, should smaller grants be easier to get than bigger grants. Tiered approach.</li>
<li>Level of grants versus income needs to be considered.</li>
<li>Need to look at value proposition and business case - what's the ROI. Can't just say it will be a great bit of code - need to say what value it will bring, how it will be used.</li>
<li>Perhaps need more dialogue with Jason to understand better </li>
<li>Should we only look at grants that benefit the perl community or look at grants that support a general problem that needs to be solved. Non-technical people could submit applications for grants to be used to solve a problem and our community use the grant to fix it.</li>
<li>Setting budget seems to be right thing to do - Look at $25k as starting point for 2021 - we can't give them autonomy then not give them a decent sized budget (Awarded in the financial year, not necessarily paid).</li>
<li>Outside of vote we need to look at how grants are reviewed, business cases etc.</li>
</ul>

<h3>Sponsorship target</h3>

<ul>
<li>Inform Alex of sponsorship target $200k</li>
</ul>

<h3>Contracts / Authority to sign, Todd Rinaldo</h3>

<ul>
<li>Has concerns about signing contracts under TPF name as not a Board member. Concerned about legal exposure. Should a member of the Board sign conference contracts?</li>
<li>ACTION: Insurance review to ensure we are covered in the activities we carry out</li>
<li>Board happy to sign contract for Houston 2022  - need Todd to send through.</li>
</ul>

<h3>Advisory board</h3>

<ul>
<li>Mailing list  - no obligations. Need to get going with building it - Web content is published: https://www.perlfoundation.org/advisory_board.html</li>
</ul>

<h3>Procedure for purchasing infrastructure items</h3>

<ul>
<li>Rik unsure of how to purchase items/services.</li>
<li>Small items can be purchased and claim back costs. Alternatively credit card is possible</li>
</ul>

<h3>Thanks to Dan for service to the Board</h3>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/31#pwc097" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given string &lt;code&gt;$S&lt;/code&gt; containing alphabets A..Z only and a number &lt;code&gt;$N&lt;/code&gt;. Write a script to encrypt the given string &lt;code&gt;$S&lt;/code&gt; using Caesar Cipher with left shift of size &lt;code&gt;$N&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub caesar_cypher{
    my($s, $n) = @_;
    my @cypher = map { unless(ord($_) == ord(' ')){
                           my $x = ((ord($_) - $n) &lt; ord('A')?(ord($_) - $n + 26):(ord($_) - $n)); 
                           chr($x);
                       }
                       else{
                           $_
                       }
                 } split(//, $s);
    return join("", @cypher);
}

MAIN:{
    my($S, $N);
    $S = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
    $N = 3;
    print "$S\n";
    print caesar_cypher($S, $N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The basic approach here is pretty much the straightforward one: use the ascii values for the characters and subtract &lt;code&gt;$n&lt;/code&gt;. In Perl we use the &lt;a href="https://perldoc.perl.org/functions/ord"&gt;ord&lt;/a&gt; function to do this and the &lt;a href="https://perldoc.perl.org/functions/chr"&gt;chr&lt;/a&gt; to go in the other direction, ascii value to character. The only thing we really need to be careful of is if subtracting &lt;code&gt;$n&lt;/code&gt; takes us outside the ascii range for upper case letters, then we need to add 26 to get back in range.&lt;/p&gt;
&lt;p&gt;Certain style instructions have been burned into my brain over the years and I find them almost impossible to deviate from. The one that applies here is &lt;em&gt;Whenever possible do not use numeric literals. They are often poorly documented and become “magic numbers”, and make code readability and future debugging unnecessarily difficult.&lt;/em&gt; So it is in that spirit that I write, for example, &lt;code&gt;ord(' ')&lt;/code&gt; instead of just &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary string &lt;code&gt;$B&lt;/code&gt; and an integer &lt;code&gt;$S&lt;/code&gt;. Write a script to split the binary string &lt;code&gt;$B&lt;/code&gt; of size &lt;code&gt;$S&lt;/code&gt; and then find the minimum number of flips required to make it all the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use feature "bitwise";

sub substrings{
    my($d, $s) = @_;
    my @substrings;
    for(my $i = 0; $i &lt; length($d); $i+=$s){
        push @substrings, substr($d, $i, $s);
    }    
    return @substrings;
}

sub min_flips{
    my($d, $s) = @_;
    my @flips;
    my @substrings = substrings($d, $s);
    for my $digits (@substrings){
        my $flip_count = 0;
        map { $flip_count += unpack("%32b*", $digits ^. $_) } @substrings;
        push @flips, $flip_count;
    }
    return [sort {$a &lt;=&gt; $b} @flips]-&gt;[0];
}

MAIN:{
    my($B, $S);
    $B = "101100101";
    $S = 3;
    print min_flips($B, $S) . " flips\n";
    $B = "10110111";
    $S = 4;
    print min_flips($B, $S) . " flips\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1 flips
2 flips
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;substrings&lt;/code&gt; function is just a convenient wrapper around the code necessary to break the string into the right sized chunks. The assumption is that the string is evenly divisible into chunks of size &lt;code&gt;$s&lt;/code&gt;. If we were not making this assumption we would need to add some &lt;em&gt;zero padding&lt;/em&gt; for any unevenly sized substring.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;use feature "bitwise";&lt;/code&gt; is present the &lt;code&gt;^.&lt;/code&gt; is defined and the operands to &lt;code&gt;^.&lt;/code&gt; are taken to be bit strings and the result is itself a bit string.&lt;code&gt;min_flips&lt;/code&gt; does a bitwise xor operation, pairwise comparing each substring in a &lt;code&gt;map&lt;/code&gt;. Since xor is 1 only when the bits are different the result is a bit string of set bits, the ones needed to be flipped. &lt;code&gt;unpack&lt;/code&gt; is used to sum these, and the result added &lt;code&gt;$flip_count&lt;/code&gt; which is then pushed into an array. The minimum number of flips is determined by the smallest number in that array. The bitwise feature was introduced in Perl 5.22 and graduated from experimental status in Perl 5.28.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.asciitable.com"&gt;ASCII Table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/XOR.html"&gt;xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlop#Bitwise-Or-and-Exclusive-Or"&gt;Perl’s xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/feature#The-%27bitwise%27-feature"&gt;bitwise feature&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc097</id>
    <published>2021-01-31T11:11:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5805788118497084055</id>
    <published>2021-01-30T16:11:00.000+01:00</published>
    <updated>2021-01-30T16:11:10.093+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxvi) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997002&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.997000 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.89&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 166&lt;/li&gt;  &lt;li&gt;Previous version: 0.89 was 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.009&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.008 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.300005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.300005&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 0.300004 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.47&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.46 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9717' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9717&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.9716 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.03&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 4.02 was 1 year, 11 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.06&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.05 was 6 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.13&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.10 was 3 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210123' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210123&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210120 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.72&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 443&lt;/li&gt;  &lt;li&gt;Previous version: 8.71 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-3.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.41&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 3.40 was 3 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Role-Tiny-2.002004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Role::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Roles: a nouvelle cuisine portion size slice of Moose &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002004&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 62&lt;/li&gt;  &lt;li&gt;Previous version: 2.002003 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0930' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0930&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0929 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.34 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 5.06 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5805788118497084055/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html" title="(cccxxvi) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4665405017904009112</id>
    <published>2021-01-30T16:08:00.001+01:00</published>
    <updated>2021-01-30T16:08:06.158+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 63&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/perl"&gt;perl&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/30 15:07:03 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Art::World" target="_blank"&gt;Art::World&lt;/a&gt; - Agents interactions modeling  ð¨&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coy" target="_blank"&gt;Coy&lt;/a&gt; - Like Carp only prettier&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID::NCName" target="_blank"&gt;Data::UUID::NCName&lt;/a&gt; - Make valid NCName tokens which are also UUIDs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::OnlineDDL" target="_blank"&gt;DBIx::OnlineDDL&lt;/a&gt; - Run DDL on online databases safely&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::installdeps" target="_blank"&gt;Dist::Zilla::App::Command::installdeps&lt;/a&gt; - Install author dependencies for a Dist::Zilla dist&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONLD" target="_blank"&gt;JSONLD&lt;/a&gt; - A toolkit for transforming JSON-LD data.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl::Mojo" target="_blank"&gt;RxPerl::Mojo&lt;/a&gt; - Mojo::IOLoop adapter for RxPerl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; - Google API Discovery and SDK&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::ImageMagick" target="_blank"&gt;Alien::ImageMagick&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::DBI" target="_blank"&gt;AnyEvent::DBI&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::WebDriver" target="_blank"&gt;AnyEvent::WebDriver&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Context" target="_blank"&gt;App::Context&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=166)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Browser::Start" target="_blank"&gt;Browser::Start&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::DOES" target="_blank"&gt;Class::DOES&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Load" target="_blank"&gt;Class::Load&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro::Mysql" target="_blank"&gt;Coro::Mysql&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::GUID" target="_blank"&gt;Data::GUID&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive::Encode" target="_blank"&gt;Data::Recursive::Encode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=199)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Journal" target="_blank"&gt;DBIx::Class::Journal&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::DataModel" target="_blank"&gt;DBIx::DataModel&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL" target="_blank"&gt;GraphQL&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::AllUtils" target="_blank"&gt;List::AllUtils&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Slice" target="_blank"&gt;List::Slice&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::SomeUtils" target="_blank"&gt;List::SomeUtils&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch" target="_blank"&gt;Log::Dispatch&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Meerkat" target="_blank"&gt;Meerkat&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Menlo" target="_blank"&gt;Menlo&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=443)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+3=368)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl7::Handy" target="_blank"&gt;Perl7::Handy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Session::Token" target="_blank"&gt;Session::Token&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Most" target="_blank"&gt;Test::Most&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Spec" target="_blank"&gt;Test::Spec&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unaccent::PurePerl" target="_blank"&gt;Text::Unaccent::PurePerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::LineBreak" target="_blank"&gt;Unicode::LineBreak&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Tussle" target="_blank"&gt;Unicode::Tussle&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4665405017904009112/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html" title="(cdlii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5721119042696929826</id>
    <published>2021-01-30T16:05:00.001+01:00</published>
    <updated>2021-01-30T16:05:57.226+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-01-30 15:05:16 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957561" target="_blank"&gt;Perl - evaluation order of list elements, with assignment inside the list&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65886868" target="_blank"&gt;Efficiently counting tokens column-wise in Bash/Awk/Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65949533" target="_blank"&gt;Insert linebreak in a file after a string&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65864154" target="_blank"&gt;How to save the white spaces in emptied columns while reading a file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65918624" target="_blank"&gt;Remove special character while reading file in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65931084" target="_blank"&gt;Why does the package qualification of symbols result in less memory used, even if the symbols are imported locally?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957545" target="_blank"&gt;How to do `defined` with a hash slice&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65887741" target="_blank"&gt;Converting CSV file to XML with Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65910258" target="_blank"&gt;How to join lines in between 2 conditions&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65919825" target="_blank"&gt;perl die if a variable is set to undef, correct?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5721119042696929826/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html" title="(cdlxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Perl.com registry attack</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl.com-registry-attack"/>
  <id>tag:news.perlfoundation.org,2021-01-30:/post/perl.com-registry-attack</id>
  <published>2021-01-30T14:01:50</published>
  <updated>2021-01-30T14:01:50</updated>
  <summary>
  <![CDATA[
     The community-managed Perl.com domain has been subject to a registry attack. Up to date information is available on the The Perl NOC blog here and also The Perl Foundation twitter feed here. 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The community-managed Perl.com domain has been subject to a registry attack. </p>

<p>Up to date information is available on the <a href="https://log.perl.org/2021/01/perlcom-hijacked.html">The Perl NOC  blog here</a> and also The Perl Foundation <a href="https://twitter.com/perlfoundation">twitter feed here</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal Recap: January 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposals_recap_jan_2021</id>
  <published>2021-01-28T22:38:01</published>
  <updated>2021-01-28T22:38:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee has received the following grant proposals for the January 2021 round: Raku CI integration bot Maintaining Perl Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities. Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has received the following grant proposals for the January 2021 round:
* <a href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot">Raku CI integration bot</a>
* <a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl">Maintaining Perl</a></p>

<p>Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities.</p>

<p>Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal: Raku CI integration bot</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposal_raku_ci_integration_bot</id>
  <published>2021-01-28T22:29:18</published>
  <updated>2021-01-28T22:29:18</updated>
  <summary>
  <![CDATA[
     Synopsis Implement a software, named Raku CI Bot which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects. Author Patrick Böker Why The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems: Imposing limits on CPU or wallclock time Not supporting all needed platforms Unreliability Usability The proposed software 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Implement a software, named Raku CI Bot (RCB), which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects.</p>

<h2>Author</h2>

<p>Patrick Böker</p>

<h2>Why</h2>

<p>The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems:</p>

<ul>
<li>Imposing limits on CPU or wallclock time</li>
<li>Not supporting all needed platforms</li>
<li>Unreliability</li>
<li>Usability </li>
</ul>

<p>The proposed software is designed to solve these problems:
* By polling GitHub and the CI platforms in addition to listening to a hook, changes a guaranteed to not get lost.
* By interfacing with both AzureCI and Open Build Service, we get access to a very wide range of platforms.
* By implementing several command words usable in PR comments, a <a href="https://github.com/Raku/problem-solving/pull/219/files">PR-only workflow</a> becomes a lot easier to adhere to.
* By persisting sources, build logs and artifacts test failures are easier to diagnose.</p>

<h2>Milestones</h2>

<ul>
<li>Setup
<ul>
<li>Set up a stack with Cro and Postgres and put it in a container.</li>
<li>Get it up and running on a publicly accessible temporary test server.</li>
</ul></li>
<li>Pan out the core model and class interfaces</li>
<li>Extend <a href="https://github.com/fayland/perl6-WebService-GitHub">WebService::GitHub</a> to cover the <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/checks">Checks</a>, <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls">Pulls</a> and <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#commits">Commits</a> APIs.</li>
<li>A <code>Webservice::OBS</code> module providing access to the relevant bits of the OBS API.</li>
<li>A <code>Webservice::AzurePipelines</code> module providing access to the <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/?view=azure-devops-rest-6.0">Build</a> API.</li>
<li>Implement the core model including tests and DB serialization</li>
<li>Implement logic to listen to GitHub hooks and poll filling a persisted work queue.</li>
<li>Azure CI:
<ul>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a <a href="https://docs.microsoft.com/en-us/azure/devops/service-hooks/services/webhooks?view=azure-devops">platform hook</a></li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>Implement logic to report a test status back to GitHub.</li>
<li>OBS CI:
<ul>
<li>Set up an OBS project to build Rakudo. This can build on the previous work of niner.</li>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a platform hook (I probably have to implement the notification part on the OBS site as well, as OBS seems to provide no hooks for build completion.)</li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>A website
<ul>
<li>Basic setup</li>
<li>An index that lists build jobs</li>
<li>Build job page
<ul>
<li>Build state and result</li>
<li>Build logs</li>
<li>Source and artifact downloads</li>
<li>Link to previous tests (in case of re-runs)</li>
<li>Link to AzureCI, OBS, GitHub</li>
</ul></li>
<li>Add some styling</li>
</ul></li>
</ul>

<h2>Communication</h2>

<p>I plan to write status update posts whenever there is relevant progress. I estimate there will be 4 - 8 posts overall. The posts will be published <a href="https://dev.to/patrickbkr/">here</a>. I intend the posts to have a focus on explaining the software so the posts can double as documentation.</p>

<h2>Schedule</h2>

<p>I estimate the project to be about 80 hours of work. I can allocate <em>at least</em> 8 hours per week to work on this. This would mean I finish the project in two and a half months. These are estimates and unforseen difficulties can push the timeline.</p>

<h2>Requested amount</h2>

<p>I request $4000 USD.</p>

<p>82 h * 40 € = 3,280 € ~= $4000</p>

<h2>Biography</h2>

<p>I have been involved in Raku development since 2018 with a focus on integration and tooling. I:</p>

<ul>
<li>Designed and implemented Rakudos relocatability functionality</li>
<li>Set up automated building of precompiled relocatable packages for Windows, Linux and MacOS. First on CircleCI then on AzureCI.</li>
<li>Migrated the core projects CI infrastructure to AzureCI (shutdown of Travis, CircleCI and AppVeyor is still to be done)</li>
<li>Gave the rakudo.org website an overhaul</li>
<li>Took over the rakubrew project (then named Rakudobrew) refactored it largely and implemented many new features, among them
<ul>
<li>Windows support</li>
<li>Utilizing the precompiled archives served on rakudo.org</li>
<li>A new website</li>
<li>Installation via a self-contained executable</li>
</ul></li>
<li>Fixed many, many papercut bugs in a wide range of modules, documentation and some in the compiler stack itself</li>
<li>Have utilized Raku in my dayjob in multiple medium sized projects</li>
<li>Wrote a small program in Perl which remotely monitors a MediaWiki website for changes, runs a validator and feeds the validation results back to the site. The functionality is in several aspects similar to the proposed project.</li>
</ul>

<h2>Open questions</h2>

<p>Will we be able to persist the sources and artifacts of every build job in the long run? Depending on how many platforms we want to test on the build artifacts for a single test run could end up in the range of half a gigabyte. Some clever compression might prove to be helpful here.</p>

<h2>Implementation details</h2>

<p>RCB acts as an intermediate between changes in GitHub and the CI services. Initially supported CI services will be Azure and Open Build Service (OBS).</p>

<p>RCB will monitor GitHub for three event types:</p>

<ul>
<li>Commits to a master branch</li>
<li>A new PR or a commit in a PR</li>
<li>A comment in a PR which includes a command word</li>
</ul>

<p>A change typically triggers a CI run. The following steps happen:
- RCB retrieves the sources off of GitHub and creates a source tarball compatible with our source release files.
- RCB triggers CI services to test this source tarball.
- The CIs finish their test and report back to RCB.
- RCB retrieves and saves build logs from the CI backends. This is especially important for re-tests, because on some CI platforms doing a re-test makes the original build log inaccessible.
- RCB retrieves and saves build artifacts from the CI backends.
- RCB reports the results back to GitHub as Status notifications.</p>

<h2>Comment triggers</h2>

<p>In addition to commit and PR events RCB will scan PR comments for command words.
- <code>{merge on success}</code> will cause RCB to automatically merge the PR should the CI tests be successful. If the tests are unsuccessful RCB will add a comment stating that automatic merging did not happen.
  There will be a check for the permissions of the person writing the comment whether the person has merge permissions.
- <code>{re-test}</code> will cause RCB to run the CI for the respective PR again.</p>

<h2>Flapper detection</h2>

<p>RCB will scan failed CI build logs for known flappers. If a flapper is identified as the only failure the test is re-run automatically once.</p>

<h2>Branch matching</h2>

<p>When preparing a CI run for a PR in either the <code>rakudo/rakudo</code>, <code>Raku/nqp</code> or <code>MoarVM/MoarVM</code> repo, RCB will check if a PR with a matching name exists in any of the other repos and use that PR instead of the master branch for testing.</p>

<p>If no such PR is found, RCB will follow a commit matching logic.
- Commits in <code>rakudo/rakudo</code> will use the NQP version given in <code>tools/templates/NQP_REVISION</code> and MoarVM commit given in NQPs <code>tools/templates/MOAR_REVISION</code>.
- Commits in <code>Raku/nqp</code> will use the MoarVM commit given in <code>tools/templates/MOAR_REVISION</code> and Rakudo master.
- Commits in <code>MoarVM/MoarVM</code> will use NQP master and Rakudo master.</p>

<p>This commit matching logic is already in use in the Azure CI pipeline. (The branch matching logic isn't though.)</p>

<h2>Website</h2>

<p>RCB will serve a website that provides a list of all CI runs. Each run will provide the following information:
- Link to the GitHub page that triggered the run
- The build source archive
- Links to previous runs for the same source
- For each CI backend
    - Link to the respective CI page
    - The build log
    - The build artifacts
- A button to retrigger the CI run</p>

<h2>Third party API triggers</h2>

<p>RCB will interface with several third party APIs that provide push triggers. Namely GitHub, OBS and Azure. Push triggers have proven to not be entirely reliable in the past. As a counter measure RCB will not only listen to the push triggers, but also poll the external APIs periodically. This way RCB will be:
- Responsive (reaction time of a few seconds) by directly reacting to push triggers.
- Reliable by internally keeping a list of all events in the third party and keeping that list in sync by polling.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>User Story Mapping Teil 1</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In der agilen Software-Entwicklung wird oft die formale Korrektheit von User Storys über ihren eigentlichen Zweck gestellt: Die Beteiligten erzählen einander Geschichten aus Anwendersicht. Während der Umsetzung der Software verlieren Beteiligte zudem oft den Blick »auf’s große Ganze«. Die Methode »User Story Mapping« möchte helfen, diese Probleme zu beheben und durch die enstehende Software das Leben der Anwender verbessern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1</id>
    <published>2021-01-28T10:00:00Z</published>
    <updated>2021-01-28T10:00:00Z</updated>
  </entry>
  <entry>
    <title>The Trouble with Reference Counting</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/the-trouble-with-reference-counting/" type="text/html"/>
    <content type="html">

&lt;p&gt;Perl uses a simple form of garbage collection (GC) called &lt;a href="https://en.wikipedia.org/wiki/Reference_counting"&gt;reference counting&lt;/a&gt;. Every variable created by a Perl program has a &lt;a href="https://perldoc.perl.org/perlguts#Reference-Counts-and-Mortality"&gt;refcnt&lt;/a&gt; associated with it. If the program creates a reference to the variable, Perl increments its &lt;code&gt;refcnt&lt;/code&gt;. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; are either decremented or they&amp;rsquo;re reclaimed as well if no other references to them remain.&lt;/p&gt;

&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;

&lt;p&gt;Reference counting has some nice properties. As GC is deterministic, it is usually not a cause of variable program performance from run-to-run. Whenever Perl leaves a subroutine or a block, it will check for variables to reclaim. This spreads the cost of GC over program runtime, keeping Perl responsive.&lt;/p&gt;

&lt;p&gt;Another benefit of timely reclamation is it minimizes memory fragmentation as variables created in the same scope tend to be reclaimed at the same time, allowing Perl to more efficiently reuse the memory (it exhibits good &lt;a href="https://en.wikipedia.org/wiki/Locality_of_reference#Spatial_and_temporal_locality_usage"&gt;spatial locality of reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Predictable and timely GC provides a useful mechanism for destructors. A popular example is that &amp;ldquo;lexical&amp;rdquo; filehandles are automatically closed when they go out scope; Perl programs do not need to call &lt;a href="https://perldoc.perl.org/functions/close"&gt;close&lt;/a&gt; on filehandles themselves, and because the filehandle is closed immediately, there is no risk of contention from a new filehandle being opened on the same file before the original is reclaimed.&lt;/p&gt;

&lt;h2 id="how-expensive-is-reference-counting"&gt;How expensive is reference counting?&lt;/h2&gt;

&lt;p&gt;Different reference counting operations have different costs. Consider the following Perl subroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update_customer&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($customer, $values) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s called with two arguments; a customer object and a hashref of values. The &lt;code&gt;my&lt;/code&gt; declaration causes Perl to add the lexical variables &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; to the savestack (here it performs an optimization, adding them as one group entry instead of two). Each variable is initialized with a &lt;code&gt;refcnt&lt;/code&gt; of 1. Each argument is then assigned to its corresponding lexical variable which increments the &lt;code&gt;refcnt&lt;/code&gt; of the reference&amp;rsquo;s corresponding value. This is cheap as the Perl interpreter just increments the value&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; in its header struct.&lt;/p&gt;

&lt;p&gt;When the subroutine returns a scope exit occurs, and &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; must be reclaimed. Their group is popped off the savestack. Perl fetches the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt;, saves it to a local variable, and tests it to see if it is greater than 1. As the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt; is 1, it must be reclaimed. Here Perl performs another optimization, essentially doing &lt;code&gt;undef $customer&lt;/code&gt; leaving it ready to be reused next time the subroutine is called. As &lt;code&gt;$customer&lt;/code&gt; is a reference, the referenced customer object&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; must also be fetched and tested. In this case it&amp;rsquo;s greater than 1, so Perl decrements the local &lt;code&gt;refcnt&lt;/code&gt; and stores it back in the customer object&amp;rsquo;s header struct. Perl then performs the same decrement routine for &lt;code&gt;$values&lt;/code&gt;. Decrement&amp;rsquo;s multiple steps causes it to be slightly more expensive than increment, but scope management pushing and popping the savestack is relatively expensive.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t have any data on how long each operation takes, or estimates of how long Perl spends on reference counting activities during the course of a program. Nor is such data available for other reference counting dynamic languages like Python and PHP. Some research has shown that reference counting increases GC runtime by 30% compared to tracing&lt;sup&gt;1, 2&lt;/sup&gt;, but it&amp;rsquo;s not clear how representative that is of Perl&amp;rsquo;s optimized routines.&lt;/p&gt;

&lt;h2 id="drawbacks"&gt;Drawbacks&lt;/h2&gt;

&lt;p&gt;Reference counting scales linearly insofar as every variable created increases the GC overhead. In programming we can usually do better than that, for example by using tricks like minimizing the number of function calls via batch processing.&lt;/p&gt;

&lt;p&gt;Only objects that have a &lt;a href="https://perldoc.perl.org/perlobj#Destructors"&gt;DESTROY&lt;/a&gt; method need timely reclamation, yet Perl  treats &lt;em&gt;every&lt;/em&gt; variable like it needs it, incrementing and decrementing reference counts live. Whenever Perl exits a block it must check for and clean up any unreferenced variables.&lt;/p&gt;

&lt;p&gt;Reference counting usually spreads the cost of GC over runtime, however deterministic and timely reclamation means that the potential cost of any given scope exit is unbounded. Imagine Perl returning from a subroutine which reclaims the final reference to a &lt;em&gt;huge&lt;/em&gt; graph of data, triggering an avalanche of reclamations. Perl &lt;em&gt;has&lt;/em&gt; to clean it all up immediately; a tracing GC could choose not to.&lt;/p&gt;

&lt;p&gt;Reference counts increase memory use a little as every variable has a &lt;code&gt;refcnt&lt;/code&gt; integer associated with it. Compared to tracing schemes, reference counting actually saves memory by not requiring a larger heap to avoid thrashing&lt;sup&gt;3&lt;/sup&gt;. However circular references can increase memory use a lot via memory leaks (if detected the developer can &lt;a href="https://metacpan.org/pod/Scalar::Util#weaken"&gt;weaken&lt;/a&gt; the reference to fix this).&lt;/p&gt;

&lt;p&gt;Reference counts can trigger unneeded &lt;a href="https://en.wikipedia.org/wiki/Copy-on-write"&gt;Copy-On-Write&lt;/a&gt;. Imagine a sub-process loops through a data set it inherited from its parent: &lt;code&gt;for my $foo (@foos) { ... }&lt;/code&gt;. This temporarily increments each element&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt;, triggering a memory copy. This isn&amp;rsquo;t quite as calamitous as it sounds as each variable&amp;rsquo;s header struct  is 16 bytes. Since a page is usually 4KB, only one copy is needed per 296 objects (assuming they&amp;rsquo;re contiguous). The copy can also be avoided by not creating the lexical reference by accessing each member directly: &lt;code&gt;for my $i (0..$#foos) { $foos[$i] ... }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Speculating a little, reference counting may increase cache misses as the frequent changes in counts displace valuable data.&lt;/p&gt;

&lt;h2 id="opportunity"&gt;Opportunity?&lt;/h2&gt;

&lt;p&gt;At first glance it seems like Perl can save runtime by switching to a tracing GC scheme and not checking or updating reference counts, but periodically reclaiming unused variables. Observe that most variables are &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)"&gt;short-lived&lt;/a&gt;; therefore the cost of tracing should scale better than linearly (as only long-lived variables are traceable).&lt;/p&gt;

&lt;p&gt;However to avoid breaking a lot of code, Perl would still need to honor timely reclamation of objects with &lt;code&gt;DESTROY&lt;/code&gt; methods. Perhaps it could follow a hybrid model, reference counting only those objects that need it, but that would reduce the performance benefits of tracing GC, and it complexifies the interpreter adding conditional branches for reference-counted variables. As objects may gain or lose a&lt;code&gt;DESTROY&lt;/code&gt; method during runtime, the interpreter would also need to be able to add and remove variables from the reference counting scheme dynamically.&lt;/p&gt;

&lt;p&gt;A further wrinkle is that references to objects with &lt;code&gt;DESTROY&lt;/code&gt; methods must &lt;em&gt;also&lt;/em&gt; be reference counted (and references to those references and so on). Imagine an array of database handles: the array itself must be reference counted so that when it is reclaimed, Perl can decrement the database handles&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; and possibly reclaim them as well.&lt;/p&gt;

&lt;p&gt;A more promising line of inquiry may be to review Perl&amp;rsquo;s reference counting code for further optimization opportunities. Common techniques for improving reference counting are well known&lt;sup&gt;4&lt;/sup&gt; and research has shown that the aforementioned 30% runtime gap can be closed&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Before starting that effort, we should collect data on how much time Perl is spending on GC. Two Perl core developers, Todd Rinaldo and Tony Cook have told me they think Perl spends very little time on GC relative to other operations like memory allocation, IO and so on. If 2% of the runtime is spent on GC, reducing it by 30% is nothing to brag about. It may be the case that for Perl at least, better opportunities lie elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to Tony Cook, Dave Mitchell and Todd Rinaldo for their insights on Perl&amp;rsquo;s GC behavior.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/1005686.1005693"&gt;Myths and Realities: The Performance Impact of Garbage Collection&lt;/a&gt;, Blackburn, Cheng &amp;amp; McKinley 2004.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/2258996.2259008"&gt;Down for the Count? Getting Reference Counting Back in the Ring&lt;/a&gt;, Shahriyar, Blackburn &amp;amp; Frampton 2012.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/rej/gcbook/"&gt;Garbage Collection: Algorithms For Automatic Dynamic Memory Management&lt;/a&gt;, Jones &amp;amp; Lins 1999 pp 43.&lt;/li&gt;
&lt;li&gt;Ibid. pp 44-74.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <id>https://perldotcom.perl.org/article/the-trouble-with-reference-counting/</id>
    <published>2021-01-25T12:05:23Z</published>
    <updated>2021-01-25T12:05:23Z</updated>
  </entry>
  <entry>
    <title>&lt;p&gt;Perl Weekly Challenge 096&lt;/p&gt;</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/24#pwc096" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a string $S. Write a script to reverse the order of words in the given string.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub reverse_words{
    my($words) = @_; 
    if(@{$words}){
        my $word = $words-&gt;[0];
        my $a = reverse_words([@{$words}[1 .. (@{$words} - 1)]]);
        $a-&gt;[@{$a}] = $word;
        return $a;
    }
    return [];
}

MAIN:{
    my($S, $reversed);
    $S = "The Weekly Challenge";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
    
    $S = "    Perl and   Raku are  part of the same family  ";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Challenge Weekly The
family same the of part are Raku and Perl 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My solution is done using recursion with the self-imposed restrictions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do not use the &lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;only access array elements in an ordinary way, without using any functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than being a bit over engineered it works as required!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given two strings $S1 and $S2. Write a script to find out the minimum operations required to convert $S1 into $S2. The operations can be insert, remove or replace a character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Memoize;
memoize("edit_distance");

sub edit_distance{
    my($s, $t) = @_;
    if(length($s) == 0){
        return length($t);
    }
    if(length($t) == 0){
        return length($s);
    }
    my($s0, $t0) = (substr($s, 0, 1), substr($t, 0, 1));
    if($s0 eq $t0){
        return edit_distance(substr($s, 1), substr($t, 1));
    }
    my @sorted_distances = sort {$a &lt;=&gt; $b} (
        edit_distance($s, substr($t, 1)),
        edit_distance(substr($s, 1), $t),
        edit_distance(substr($s, 1), substr($t, 1)),
    );
    return 1 + $sorted_distances[0];
}

MAIN:{
    my $distance;
    
    $distance = edit_distance("kitten", "sitting");
    print "$distance\n";

    $distance = edit_distance("sunday", "monday");
    print "$distance\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code is a pretty faithful Perl translation of the algorithm presented in Haskell in the &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance#Computing_Levenshtein_distance"&gt;Wikipedia article&lt;/a&gt; for &lt;em&gt;Levenshtein_distance&lt;/em&gt;. Like the code for Part 1 of this weeks Challenge this is a recursive procedure.&lt;/p&gt;
&lt;p&gt;As noted in that article this algorithm is inefficient in that substrings are checked repeatedly. This code can be made more efficient by the use of &lt;em&gt;Memoization&lt;/em&gt; so that the results for each substring are saved and re-used. In the interest of improving performance &lt;code&gt;Memoize&lt;/code&gt; is used with the &lt;code&gt;edit_distance&lt;/code&gt; function. While the code is now more efficient it really doesn’t have much effect on execution time for these short test strings. However, the code is now ready to handle much more significant sized strings.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/Memoize"&gt;Memoization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc096</id>
    <published>2021-01-24T01:26:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Geodaten in Bildern und Videos können viel über Nutzer verraten</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Am vorvergangenen Wochenende (9./10. Januar 2021) gab es relativ viel Wirbel um die Plattform Parler, die offensichtlich als Twitterersatz für hauptsächlich amerikanische "Konservative" diente. Amazon Web Services (AWS) kündigte Parler alle Services, da dort jede Menge Hass verbreitet wurde. Bevor alles abgeschaltet war, wurden wohl alle öffentlich verfügbaren Daten über ein API heruntergeladen. Ein paar der Fehler, die bei dem API gemacht wurden, werde ich kurz in der Schulung im März erläutern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif</id>
    <published>2021-01-19T10:00:00Z</published>
    <updated>2021-01-19T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 095</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/17#pwc095" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a number $N. Write a script to figure out if the given number is a Palindrome. Print 1 if true, otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub is_palindrome{
    my($n) = @_;
    return false if $n &lt; 0;
    my @digits = split(//, $n);
    if(@digits % 2 == 0){
        do{
            my $a = shift @digits;
            my $b = pop @digits;
            return false if $a != $b;
        }while(@digits);
        return true;
    }
    while(@digits != 1){
        my $a = shift @digits;
        my $b = pop @digits;
        return false if $a != $b;
    };
    return true;
}

MAIN:{
    print is_palindrome(1221);
    print "\n";
    print is_palindrome(-101);
    print "\n";
    print is_palindrome(90);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;One assumption is made and that is that the input is a valid integer.&lt;/p&gt;
&lt;p&gt;My approach here is straightforward iteration and matches what one might do manually: work inwards from both ends and if at any point there is not a match of the two elements being compared then return false. If we make it all the way to the middle then return true. Here the middle is either an empty array, in the case of an even number of elements or, in the case of an odd number of elements, an array of length 1.&lt;/p&gt;
&lt;p&gt;The case of a single digit has no special handling, if the number has an odd number of digits but that odd number happens to be 1 then the loop is not entered and we just return true.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to demonstrate Stack operations.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Stack;

my $stack = new Stack();
$stack-&gt;push(2);
$stack-&gt;push(-1);
$stack-&gt;push(0);
$stack-&gt;pop;       
print $stack-&gt;top . "\n"; 
$stack-&gt;push(0);
print $stack-&gt;min . "\n"; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Stack module used is of my own making. The next listing is that code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Stack{
    use boolean;
    use Class::Struct;

    struct(
        data =&gt; q/@/
    );

    sub push{
        my($self, $n) = @_;
        push @{$self-&gt;data()}, $n;
    }

    sub pop{
        my($self, $n) = @_;
        pop @{$self-&gt;data()};
    }

    sub top{
        my($self, $n) = @_;
        @{$self-&gt;data()}[@{$self-&gt;data()} - 1];
    }
    
    sub min{
        my($self, $n) = @_;
        my @sorted = sort {$a &lt;=&gt; $b} @{$self-&gt;data()};
        return $sorted[0];
    }
    true;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -Iperl perl/ch-2.pl
-1
-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Like &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10"&gt;last week’s LinkedList module&lt;/a&gt; I use &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt; to create the Stack module.&lt;/p&gt;
&lt;p&gt;Class::Struct creates accessors for all the class variables automatically. In this way, by calling &lt;code&gt;$self-&amp;gt;data()&lt;/code&gt;, we get a reference to the internal array &lt;code&gt;data&lt;/code&gt; and perform the required Stack operations.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc095</id>
    <published>2021-01-17T14:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Extracting the list of O'Reilly Animals</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/extracting-the-list-of-o-reilly-animals/" type="text/html"/>
    <content type="html">

&lt;p&gt;Now I want to grab the entire list of O&amp;rsquo;Reilly cover animals, and &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; is going to help me do that.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly Media, who publishes most of my books, is distinctively known
by the animals it chooses for their covers. Edie Freedman explains how she came up with the well-known design in &lt;a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/"&gt;A short history of the O’Reilly animals&lt;/a&gt;. I think I first saw this design on the cover of &lt;a href="https://shop.oreilly.com/product/9781565922259.do"&gt;sed &amp;amp; awk&lt;/a&gt;; those Slender Lorises (Lori?) are a bit creepy, but not creepy enough to keep me away from the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perldotcom.perl.org/images/extracting-the-list-of-o-reilly-animals/sed.jpeg" alt="sed &amp;amp; awk" /&gt;&lt;/p&gt;

&lt;p&gt;Not that a Perler should talk since Larry Wall choose a camel: it&amp;rsquo;s ugly but it gets the job done under tough conditions. And, for &lt;a href="https://www.intermediateperl.com"&gt;own of my own books&lt;/a&gt;, the alpaca is a bit cuter, but they are nasty beasts as well.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly &lt;a href="https://www.oreilly.com/animals.csp"&gt;lists almost all of the animals&lt;/a&gt; from their covers, even if &amp;ldquo;animals&amp;rdquo; is a bit of a loose term that encompasses &amp;ldquo;Catholic Priests&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/0636920021872.do"&gt;Ethics of Big Data&lt;/a&gt;&lt;/em&gt;) or &amp;ldquo;Soldiers or rangers, with rifles&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/9780596007164.do"&gt;SELinux&lt;/a&gt;&lt;/em&gt;). You can page through that list 20 results at a time, or search it. But, as with most lists I see online, I want to grab the entire list at once. Show me a paginated resources and I&amp;rsquo;ll show you the program I automated to unpaginate it.&lt;/p&gt;

&lt;p&gt;Scraping a bunch of pages is no problem for Perl, especially with &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; (as I write about in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). I whipped up a quick script and soon had &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;all of the animals in a JSON file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing particularly fancy in my programming, although I do use &lt;a href="https://docs.mojolicious.org/Mojo/Promise"&gt;Mojo::Promise&lt;/a&gt; so I can make the requests concurrently. That wasn&amp;rsquo;t something that I cared that much about, but I had just answered &lt;a href="https://stackoverflow.com/q/64597755/2766176"&gt;a StackOverflow question about Promises&lt;/a&gt; so it was on my mind. I set up all of the web requests but don&amp;rsquo;t run them right away. Once I have all of them, I run them at once through the &lt;code&gt;all()&lt;/code&gt; Promise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.26&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; experimental &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::JSON &lt;span style="color:#e6db74"&gt;qw(encode_json)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Promise;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::UserAgent;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Util &lt;span style="color:#e6db74"&gt;qw(dumper)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://www.oreilly.com/animals.csp&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total );

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ua &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Mojo::UserAgent&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;# We need to get the first request to get the total number of&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# requests. Note that that number is actually larger than the&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# number of results there will be, by about 80.&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $first_page_tx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) {
		push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*;&lt;/span&gt;
		&lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_pagination( $tx );
		},
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { die &lt;span style="color:#e6db74"&gt;&amp;#34;Initial fetch failed!&amp;#34;&lt;/span&gt; }
	)&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @requests &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
	map {
		&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $page &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_;
		$ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; form &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#39;x-o&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $page } )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;,
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { warn &lt;span style="color:#e6db74"&gt;&amp;#34;Something is wrong&amp;#34;&lt;/span&gt; }
			);
		}
	map {
		$_ &lt;span style="color:#f92672"&gt;*&lt;/span&gt; $interval
		}
	&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;..&lt;/span&gt; ($total &lt;span style="color:#f92672"&gt;/&lt;/span&gt; $interval)
	;

Mojo::Promise&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;all( @requests )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_pagination&lt;/span&gt; ( $tx ) {
	&lt;span style="color:#75715e"&gt;# 1141 to 1160 of 1244&lt;/span&gt;
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $tx
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;span.cs-prevnext&amp;#39;&lt;/span&gt; )
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=~&lt;/span&gt;&lt;span style="color:#e6db74"&gt; /
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;		(\d+) \h+ to \h+ (\d+) \h+ of \h+ (\d+) /x&lt;/span&gt;;
	}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_page&lt;/span&gt; ( $tx ) {
&lt;span style="color:#75715e"&gt;=pod
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;div class=&amp;#34;animal-row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;a class=&amp;#34;book&amp;#34; href=&amp;#34;...&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;img class=&amp;#34;book-cvr&amp;#34; src=&amp;#34;...&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;p class=&amp;#34;book-title&amp;#34;&amp;gt;Perl 6 and Parrot Essentials&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;p class=&amp;#34;animal-name&amp;#34;&amp;gt;Aoudad, aka Barbary sheep&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;=cut&lt;/span&gt;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; eval {
		$tx
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find( &lt;span style="color:#e6db74"&gt;&amp;#39;div.animal-row&amp;#39;&lt;/span&gt; )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
				&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %h;
				$h{link}      &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;a.book&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;href&amp;#39;&lt;/span&gt; );
				$h{cover_src} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;img.book-cvr&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;src&amp;#39;&lt;/span&gt; );
				$h{title}     &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.book-title&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				$h{animal}    &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.animal-name&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%h;
				} )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;to_array
		} &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
			warn &lt;span style="color:#e6db74"&gt;&amp;#34;Could not process a request!\n&amp;#34;&lt;/span&gt;;
			&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;
			};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those concurrent requests make this program much faster than it would be if I did them individually one after the other, although it can really hammer a server if I&amp;rsquo;m not careful. Most of the web request time is simply waiting and I get all of those requests to wait at the same time. Now, this isn&amp;rsquo;t really parallelism because once one request has something to do, such as reading the data, the other requests still need to wait their turn. Perhaps I&amp;rsquo;ll rewrite this program later to use &lt;a href="https://docs.mojolicious.org/Minion"&gt;Minion&lt;/a&gt;, the Mojo-based job queue that can do things in different processes.&lt;/p&gt;

&lt;p&gt;The rest of the program is data extraction. In &lt;code&gt;parse_page&lt;/code&gt;, I have various &lt;a href="https://docs.mojolicious.org/Mojo/DOM/CSS"&gt;CSS Selectors&lt;/a&gt; to extract all of the &lt;code&gt;div.animal-row&lt;/code&gt; and turn each animal into a hash (again, I have lots of examples in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). Each Promise adds its results to the &lt;code&gt;@grand&lt;/code&gt; array. At the end, I turn that into a JSON file, which I&amp;rsquo;ve also uploaded as a &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As someone who has been doing this sort of extraction for quite a while, I&amp;rsquo;m always quite pleased how easy Mojolicious makes this. Everything I need is already there, uses the same idioms, and works together nicely. I get the page and select some elements. A long time ago, I would have had long series of substitutions, regexes, and other low-level text processing. Perl&amp;rsquo;s certainly good at text processing, but that doesn&amp;rsquo;t mean I want to work at that level in every program. Do something powerful a couple times and it doesn&amp;rsquo;t seem so cool anymore, although the next step for Mojolicious might be &lt;em&gt;Minority Report&lt;/em&gt;-style pre-fetching where it knows what I want before I do.&lt;/p&gt;

&lt;h2 id="a-nifty-trick"&gt;A nifty trick&lt;/h2&gt;

&lt;p&gt;I do use a few interesting tricks just because I do. Lately in these sorts of programs I&amp;rsquo;m collecting things into a data structure then presenting it at the end. Typically that means I do the setup at the top of the program file and the output at the end.  However, after I&amp;rsquo;ve defined the &lt;code&gt;@grand&lt;/code&gt; variable, I immediately define an &lt;code&gt;END&lt;/code&gt; block to specify what to do with &lt;code&gt;@grand&lt;/code&gt; once everything else has happened:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That keeps the details of the data structure together. The entire point of the program is to get those data out to the JSON file.&lt;/p&gt;

&lt;p&gt;I could have just as easily kept that together with a normal Perl subroutine, but &lt;code&gt;END&lt;/code&gt; is a subroutine that I don&amp;rsquo;t need to call explicitly. This is merely something I&amp;rsquo;ve been doing lately and I might change my mind later.&lt;/p&gt;

&lt;h2 id="a-little-safari"&gt;A little safari&lt;/h2&gt;

&lt;p&gt;And I leave you with a little safari for your own amusement. My animals are the Llama, Alpaca, Vicuñas, Camel, and Hamadryas Butterfly. Search the O&amp;rsquo;Reilly list (or my JSON) to find those titles. Some of them are missing and some have surprising results.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perldotcom.perl.org/images/extracting-the-list-of-o-reilly-animals/learning_perl.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Here are some interesting &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; commands to play with the &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;Animals JSON file&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all the title
$ jq -r '.[].title' &amp;lt; animals.json | sort | head -10
.NET &amp;amp; XML
.NET Compact Framework Pocket Guide
.NET Framework Essentials
.NET Gotchas
.NET Windows Forms in a Nutshell
20 Recipes for Programming MVC 3
20 Recipes for Programming PhoneGap
21 Recipes for Mining Twitter
25 Recipes for Getting Started with R
50 Tips and Tricks for MongoDB Develope

# tab-separated list of animals and titles
$ jq -r '.[] | &amp;quot;\(.animal) =&amp;gt; \(.title)&amp;quot;' &amp;lt; animals.json | sort
12-Wired Bird of Paradise	Mobile Design and Development
3-Banded Armadillo	Windows PowerShell for Developers
Aardvark	Jakarta Commons Cookbook
Aardwolf	Clojure Cookbook
Addax, aka Screwhorn Antelope	Ubuntu: Up and Running
Adjutant (Storks)	Social eCommerce
Aegina Citrea, narcomedusae, jellyfish	BioBuilder
African Civet	JRuby Cookbook
African Crowned Crane aka Grey Crowned Crane	C# 5.0 Pocket Reference
African Crowned Crane aka Grey Crowned Crane	Programming C# 3.0

# find a title by exact match of animal
$ jq -r '.[] | select(.animal==&amp;quot;Llama&amp;quot;) | .title' &amp;lt; animals.json
Randal Schwartz on Learning Perl

# find a title with a regex match against the animal
$ jq -r '.[] | select(.animal|test(&amp;quot;ama&amp;quot;)) | .title' &amp;lt; animals.json | sort
Access Cookbook
Access Database Design &amp;amp; Programming
ActionScript for Flash MX Pocket Reference
ActionScript for Flash MX: The Definitive Guide
Ajax on Java
Appcelerator Titanium: Up and Running
Embedding Perl in HTML with Mason
Fluent Python
Identity, Authentication, and Access Management in OpenStack
Introduction to Machine Learning with Python
Learning Perl 6
PDF Explained
Randal Schwartz on Learning Perl
SQL Pocket Guide
SQL Tuning
Solaris 8 Administrator's Guide
The Little Book on CoffeeScript
Writing Game Center Apps in iOS

# find an animal with a regex match against the title
$ jq -r '.[] | select(.title|test(&amp;quot;Perl&amp;quot;)) | .animal' &amp;lt; animals.json | sort
Alpaca
Aoudad, aka Barbary sheep
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary, Head
Badger
Bighorn Sheep
Black Leopard
Blesbok (African antelope)
Camel, aka Dromedary
Cheetah
Emu, large and fluffy
Emu, young
Fan-footed Gecko, aka Wall Gecko
Flying Dragon (lizard)
Flying Dragon (lizard)
Greater Honeyguide
Green Monkey 1 (adult holding a baby)
Hamadryas Baboon
Hamadryas Butterfly
Llama
Mouse
North American Bullfrog
Proboscis Monkey
Red Colobus Monkey
Sea Otter
Staghound
Tadpole of a Greenfrog (sketch)
Thread-winged Lacewing, aka Antlion
White-tailed Eagle
Wolf
&lt;/code&gt;&lt;/pre&gt;
</content>
    <id>https://perldotcom.perl.org/article/extracting-the-list-of-o-reilly-animals/</id>
    <published>2021-01-11T18:02:50Z</published>
    <updated>2021-01-11T18:02:50Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
