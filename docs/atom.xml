<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-05-02T10:47:29Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
  <title>Community Affairs Team Transparency Report Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-report-updates0"/>
  <id>tag:news.perlfoundation.org,2021-05-02:/post/cat-transparency-report-updates0</id>
  <published>2021-05-02T02:45:44</published>
  <updated>2021-05-02T02:45:44</updated>
  <summary>
  <![CDATA[
     The CAT would like to make some corrections, as well as address some of the comments and questions we received to the initial transparency report. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process. The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT would like to make some corrections, as well as address some of the comments and questions we received to the <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">initial transparency report</a>. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process.</p>

<p>The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore will be known as the Subject throughout this document. The other individual mentioned in the previous transparency report is not mentioned except under the Corrections section.</p>

<p>There have been questions and concerns raised by members of the community regarding TPF CAT’s process in handling the incidents in question and our authority to sanction someone in response. We believe that this is within our authority for several reasons.</p>

<p>First, while TPF has never published a “year round” Standards of Conduct document, all TPF conferences have had a Standards of Conduct document (or equivalent) since YAPC in 2012 (Madison). The exact content of that document has varied over the years, though it’s been in something close to its current form for quite a number of years. The Subject has attended many of these conferences, and has agreed to these Standards of Conduct in the past as a matter of attending.</p>

<p>Second, the investigations we conducted and the sanctions we imposed in response are based on reports of harmful behavior by the Subject in multiple forums across a number of years. A subset of these were investigated in detail and reported on as investigation #1 and #2. While there are other reports, the results of both investigations combined were enough to take action.</p>

<p>Third, while some of the most recent behavior did not occur at a TPF event or in a TPF-controlled online space, we believe that the purpose of the CAT is primarily to protect people from harm in the spaces we do control. If someone demonstrates through their behavior that they are overwhelmingly likely to cause harm to the community in our events and spaces, we believe it is within our authority to impose sanctions on them because of that behavior in order to prevent future harm.</p>

<p>However, we do have a significant correction we want to make to the previous report in regards to authority. The initial report stated: “The CAT has instructed the Subject to leave and cease participation...” and went on to mention various online spaces that TPF <em>does not</em> control. This was not intended to be an instruction to take technical measures, but a request for the Subject to cease participation, and was done to prevent any further harm from occurring. However, we recognize that this was poorly worded, and we never intended to assert any control over these spaces. We recognize that these spaces are operated independently by various communities and each community must decide for themselves how to manage their community. The initial report further stated the CAT “may: explicitly extend the scope of the ban, take further technical measures”. TPF recognizes that this is out of scope.</p>

<p>In addition, there are a number of other corrections and clarifications we would like to make.</p>

<h2>Corrections</h2>

<ol>
<li>The ban from attending TPF conferences, events, and using TPF online chat platforms (Slack) stands. However:
<ol>
<li>This is modified to a minimum duration of 1 year.</li>
<li>The length of the ban is modified because having a year round Standards of Conduct is new, as is the CAT. Given all this, we felt it was fairer to start with a more limited sanction.</li>
<li>For the ban to be lifted, the Subject must agree to not repeat their past unacceptable behavior and agree to abide by the Standards of Conduct going forward.</li>
<li>Unacceptable behavior within that 1 year period could lead to an extension or modification of the length or the terms of the ban. This includes interactions between the Subject and others in the Perl and Raku communities, even outside of TPF events and online platforms.</li>
<li>For examples of unacceptable behavior, please see the current <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Standards of Conduct for the 2021 Conference in the Cloud</a>.</li>
</ol></li>
<li>The initial transparency report stated that warning would be issued to the second individual investigated as part of “investigation #1”.
<ol>
<li>The CAT apologizes and recognizes that this individual should not have been mentioned in the transparency report.</li>
<li>After reconsideration, it was decided that the warning is not appropriate based on the evidence in “investigation #1” and therefore will not be issued.</li>
<li>The CAT had a conversation with the second individual to discuss this.</li>
</ol></li>
<li>The CAT acknowledges it should have delayed the publication of the transparency report to give the Subject more time to respond.
<ol>
<li>The Subject disagrees with the extent of CAT’s assertion that the events of investigation #1 and #2 are part of a pattern of bad behavior.</li>
<li>The Subject disagrees with the level of harm this pattern of bad behavior causes the community.</li>
<li>The Subject is willing to leave or step down from their responsibilities within various online spaces, communities, and subcommunities if asked by the leaders or committees responsible for those online spaces, communities, or subcommunities.</li>
<li>The Subject does not commit to leaving other online spaces, communities, or subcommunities, except those which they have since been banned from.</li>
<li>The Subject accepts the ban on attending TPF conferences and events.</li>
</ol></li>
</ol>

<h2>Clarifications and responses to specific questions</h2>

<p>The CAT would like to address a few of the questions and comments it received on the last transparency report:</p>

<ol>
<li>The CAT wants to be clear that the behavior from investigation #1 alone would not have resulted in the CAT’s decision.
<ol>
<li>The events of “investigation #1” and “investigation #2” were investigated as a pattern of behavior which extends beyond the events of either investigation.</li>
<li>The CAT found that there was a pattern of bad behavior.</li>
</ol></li>
<li>Regarding the event from “investigation #2”: whether the Subject willingly left or was given an ultimatum did not have any bearing on the CAT’s decision.</li>
<li>The community member who was harmed in investigation #1 is a different person than the community member harmed in investigation #2.</li>
<li>The second investigation was opened due to reports that there was a pattern of bad behavior. Aside from that, the investigations are not related.</li>
<li>Discriminatory statements need not be intended to attack nor directed at a specific person to cause harm.</li>
<li>As part of investigation #2, the CAT talked to multiple people who attended the event.</li>
<li>The CAT has subsequently provided a more detailed transparency report to the board of directors whilst respecting privacy of the subjects.
<ol>
<li>This more detailed version does not share the names of any parties of the investigations, but was deemed too detailed for public release.</li>
</ol></li>
</ol>

<h2>Conclusion</h2>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

<p>If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 110: Valid Phone Numbers and Transposed File</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-110-valid-phone-numbers-and-transposed-file.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10201</id>
    <published>2021-05-01T21:59:17Z</published>
    <updated>2021-05-01T22:01:49Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 110 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (May 2, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Valid Phone Numbers</h2>

<p><em>You are given a text file.</em></p>

<p><em>Write a script to display all valid phone numbers in the given text file.</em></p>

<p><em>Acceptable Phone Number Formats:</em></p>

<pre><code>+nn  nnnnnnnnnn
(nn) nnnnnnnnnn
nnnn nnnnnnnnnn
</code></pre>

<p><em>Input File:</em></p>

<pre><code>0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
  00 1148820341
</code></pre>

<p><em>Output</em></p>

<pre><code>0044 1148820341
 +44 1148820341
(44) 1148820341
</code></pre>

<p>This is obviously typically a job for regular expressions (or regexes). I will not even try to consider a language or solution not using regular expressions. I will not use a separate text file but simulate it with an array of strings or some other means.</p>

<h3>Valid Phone Numbers in Raku</h3>

<p>Please remember that Raku&#8217;s regexes are trying to renew the subject and have some differences with the traditional Perl or Perl-compatible regexes. Among other things, spaces are usually not relevant in a regex pattern (unless you use an option to force it).</p>

<pre><code>use v6;

my @tests = " 0044 1148820341 42 ", "  +44 1148820342 abc", 
            " 44-11-4882-0343 ", " (44) 1148820344  ", " 00 1148820345";

my $ten-dgts = rx/\d ** 10/;
for @tests -&gt; $str {
    say ~$0 if $str ~~ / ( [ \d ** 4 || '+' \d\d || \( \d\d \) ] \s+ &lt;$ten-dgts&gt; ) /;
}
</code></pre>

<p>To make things clearer, the regex above could be rewritten more clearly as:</p>

<pre><code>(                 # Capture content within  poarens
  [               # group items within the [] alternative
    \d ** 4 ||    # Four digits or...
    '+' \d\d ||   # + sign and 2 digits, or ..
    \( \d\d \) ]  # two digits within parentheses
  ]               # end of the alternative
  \s+             # spaces
  &lt;$ten-dgts&gt;     # Ten-digits regex
)                 # end of capture
</code></pre>

<p>The above program displays the following output</p>

<pre><code>$ perl phone.pl
0044 1148820341
+44 1148820342
(44) 1148820344
(39) 1148820344
</code></pre>

<h3>Valid Phone Numbers in Perl</h3>

<p>This is a port to Perl of the above Raku program. Note that we have included a test case in which thee are two phone numbers in the same input line.</p>

<pre><code>use strict;
use warnings;
use feature "say";

# simulate a text file with an array of strings
my @tests = (" 0044 1148820341 42 ", "  +44 1148820342 abc", 
            " 44-11-4882-0343 ", " (44) 1148820344 foo (39) 1148820345", " 00 1148820346");

for my $str (@tests) {
    say $1 while $str =~ / ( (?: \d {4} | \+ \d\d | \( \d\d \)  ) \s+ \d{10} ) /gx;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl phone.pl
0044 1148820341
+44 1148820342
(44) 1148820344
(39) 1148820345
</code></pre>

<h3>Valid Phone Numbers in Other Languages</h3>

<h4>Phone Numbers in Scala</h4>

<p>We need to import the <code>cala.util.matching.Regex</code> core Scala package. Note that every backslash appears twice in the pattern of the program below. This is because in Java and Scala, a single backslash is an escape character in a string literal, not a regular character that shows up in the string. So instead of ‘\’, you need to write ‘\’ to get a single backslash in the string.</p>

<pre><code>import scala.util.matching.Regex

object phoneNumber extends App {
  val pattern = "((?:\\d{4}|\\+\\d\\d|\\(\\d\\d\\))\\s+\\d{10})".r
  val tests = Array(
    " 0044 1148820341 42 ",
    "  +44 1148820342 abc",
    " 44-11-4882-0343 ",
    " (44) 1148820344  (33) 1148820345",
    " 00 1148820346"
  );
  for (str &lt;- tests) {
    if (pattern.unanchored.matches(str)) {
      println((pattern findAllIn str).mkString(", "))
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>0044 1148820341
+44 1148820342
(44) 1148820344, (33) 1148820345
</code></pre>

<h4>Phone Numbers in Python</h4>

<p>This program uses the <code>re</code> core Python package:</p>

<pre><code>import re 

tests = ("foo 0044 1148820341 42", "xyz +44 1148820342 abc", "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345")

for str in tests:
    match = re.search("(\d{4}|\+\d\d|\(\d\d\))\s+\d{10}", str)
    if (match):
        print (match.group())
</code></pre>

<p>Output:</p>

<pre><code>$ python3 phone.py
0044 1148820341
+44 1148820342
(44) 1148820344
</code></pre>

<h4>Phone Numbers in Awk</h4>

<p>Awk was the first programming language to include regular expressions, even before Perl, so it was an obvious guest language candidate for this task. I had a bit of trouble to get it to work properly because, for some reason, the <code>\d</code> and <code>[:digit:]</code> character classes did not work properly on the platform where I tested it (although they&#8217;re supposed to be part of the awk language). I used <code>[0-9]</code> instead, which is a quite simple solution, but I wasted quite a bit of time before I figured why it did not work as I expected. Here, we&#8217;re using a shell pipe with an awk one-liner:</p>

<pre><code>$ echo '
0044 1148820341
+44 1148820342
44-11-4882-0343
(44) 1148820344
00 1148820346
' | awk '/([0-9]{4}|\+[0-9]{2}|\([0-9]{2}\))\s+[0-9]{10}/ { print $0 }'
0044 1148820341
+44 1148820342
(44) 1148820344
</code></pre>

<h4>Phone Numbers in Julia</h4>

<p>No need to import a dedicated library in Julia, since regexes are built into the language.</p>

<pre><code>tests = ["foo 0044 1148820341 42", "xyz +44 1148820342 abc", 
         "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345"]
pattern = r"(\d{4}|\+\d\d|\(\d\d\))\s+\d{10}"

for str in tests 
    m = match(pattern, str)
    if (! (m === nothing)) 
        println(m.match)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>    $julia phone.jl
    0044 1148820341
    +44 1148820342
    (44) 1148820344
</code></pre>

<h4>Phone Numbers in Ruby</h4>

<p>For some reason the <code>\d</code> character class and the <code>\+</code> literal plus sign don&#8217;t seem to work on my Ruby installation, although they should if I understand the documentation correctly. So, I used the <code>[0-9]</code> and <code>[+]</code> character classes instead.</p>

<pre><code>tests = ["foo 0044 1148820341 42", "xyz +44 1148820342 abc", 
         "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345"]
pattern = %r{((\d{4}|\+\d{2}|\(\d{2}\))\s+\d{10})}
for str in tests
    match = str.match(pattern)
    if match then
        print(match[0], "\n")
    end
end
</code></pre>

<p>Output:</p>

<pre><code>0044 1148820341                                                                                                                               
+44 1148820342                                                                                                                                
(44) 1148820344
</code></pre>

<h2>Task 2: Transpose File</h2>

<p><em>You are given a text file.</em></p>

<p><em>Write a script to transpose the contents of the given file.</em></p>

<p><em>Input File</em></p>

<pre><code>name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
</code></pre>

<p><em>Output:</em></p>

<pre><code>name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<p>For practical reasons, I will not use an external file but simulate it in various ways.</p>

<h3>Transpose File in Raku</h3>

<p>We simulate the input file with an array of strings. The program takes the <code>@input</code> array of strings, reads each line in turn (as we would do with an actual file), split each line and on commas, and store the individual items in a <code>@transposed</code> array of arrays. At the end, we just need to output the rows of the <code>@transposed</code> array.</p>

<pre><code>use v6;

my @input = &lt;name,age,sex Mohammad,45,m 
             Joe,20,m Julie,35,f Cristina,10,f&gt;;

my @transposed;
for @input -&gt; $in {
    my $i = 0;
    for $in.split(',') -&gt; $str {
        push @transposed[$i], $str;
        $i++;
    }
}
for @transposed -&gt; @line {
    say @line.join(',');
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./transpose.raku
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h3>Transpose File in Perl</h3>

<p>We simulate the input file with space-separated string. The construction of the <code>@transposed</code> array of arrays is following the same idea as in Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

# Note: input array simulated with a string
my $in_string = "name,age,sex  Mohammad,45,m 
         Joe,20,m Julie,35,f  Cristina,10,f";
my @input = split /\s+/, $in_string;
my @transposed;
for my $in (@input) {
    my $i = 0;
    for my $str (split /,/, $in) {
        push @{$transposed[$i]}, $str;
        $i++;
    }
}
for my $line (@transposed) {
    say join ',', @$line;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  transpose.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h3>Transpose File in Awk</h3>

<p>We pipe the input to the awk program standard input. </p>

<pre><code>BEGIN{ 
    FS = "," 
}
{ table[0,NR] = $1 }
{ table[1,NR] = $2 }
{ table[2,NR] = $3 }
{ max = NR }
END {
    for (i = 0; i &lt; 3; i++) {
        for (j = 1; j &lt; max - 1; j++) printf "%s,", table[i,j]
        printf "%s\n", table[i,max-1]
    }
}
</code></pre>

<p>This is an example run:</p>

<pre><code>$  echo 'name,age,sex
&gt; Mohammad,45,m
&gt; Joe,20,m
&gt; Julie,35,f
&gt; Cristina,10,f
&gt; ' | awk -f transpose.awk
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 9, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>EV charge pricing per State in US</title>
    <link rel="alternate" href="http://blogs.perl.org/users/itcharlie/2021/05/ev-charge-pricing-per-state-in-us.html"/>
    <id>tag:blogs.perl.org,2021:/users/itcharlie//1220.10200</id>
    <published>2021-05-01T19:29:27Z</published>
    <updated>2021-05-01T21:37:43Z</updated>
    <author>
        <name>Charlie Gonzalez</name>
        
    </author>
    <category term="evperl5" label="EV Perl 5" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/itcharlie/">
        <![CDATA[<p>Continuing from my previous post ( <a href="http://blogs.perl.org/users/itcharlie/2021/04/calculating-ev-battery-charge-with-perl.html">http://blogs.perl.org/users/itcharlie/2021/04/calculating-ev-battery-charge-with-perl.html </a>) I learned that residential electricity charges are calculated using an electricity supply rate per kWh and a electric delivery rate per kWh which actually increases the total EV charge prices that I have calculated in my previous post. My current bill states that my electric supply rate is at 6.9057 cents per kWh and my delivery rate is 11.1785 cents per kWh making it a total of 18.0842 cents per kWh which is 5 cents more than my original post at $ 0.13 cents per kWh.</p>

<p>I was curious to calculate the average cost per state in US so I did some research online and found a site that would give me average electric charges per State in US from January 2021 ( <a href="https://paylesspower.com/blog/electric-rates-by-state/">https://paylesspower.com/blog/electric-rates-by-state/ </a>) and I was able to copy the table of data into a tab delimited file : <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/electric_rates.txt">https://github.com/itcharlie/ev-calc-pricing/blob/main/electric_rates.txt</a></p>

<p>I created a new copy of my perl script ( <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/generate_ev_charge_price_report.pl">https://github.com/itcharlie/ev-calc-pricing/blob/main/generate<em>ev</em>charge<em>price</em>report.pl </a>)  where I read the tab delimited file  like so:</p>

<pre><code>
my $state_rates_fh;
my %electric_rate;

open( $state_rates_fh, "<", "electric_rates.txt" )
        or die "Unable to open file:   $!\n";     

while (<$state_rates_fh> ) {
    my @line_data =  split('\t', $_);
    $electric_rate{ $line_data[0] } = $line_data[1] ;
}
</pre> </code>


and generate total pricing per state.

<pre><code>
foreach my $state (sort keys %electric_rate )  {
    my $total_price = $cars{'EV'}->{$ev_brand}->{$model}->{&#8216;battery_size&#8217;}  * ( $electric_rate{$state} / 100 ) ;
    say &#8220;$state: \$ &#8221; .  sprintf(&#8220;%.2f&#8221; , $total_price);
}
</pre></code>

which resulted as the following output :
<pre>
0-100% battery charge price by State:
--------------------------------------------------
Alabama : $ 10.15
Alaska : $ 17.48
Arizona : $ 9.59
Arkansas : $ 7.72
California : $ 17.57
Colorado : $ 9.95
Connecticut : $ 17.46
Delaware : $ 9.65
District Of Columbia : $ 10.05
Florida : $ 9.55
Georgia : $ 8.97
Hawaii : $ 25.05
Idaho : $ 8.24
...
</pre>

<p>From this data I learned that Oklahoma has the cheapest electric rates and it would take a total of $7.31 dollars in electricity to charge a 2021 Tesla Model 3 with an all electric range of 353 miles. Using the same car as an example, Hawaii is the most expensive state with a total of $25.05 dollars in electricity charge. </p>

<p>Thank you for your time and I hope you enjoyed this post.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-05-01T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5844314466895359676</id>
    <published>2021-05-01T16:39:00.000+02:00</published>
    <updated>2021-05-01T16:39:05.016+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxix) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Beam-Wire-1.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Beam::Wire&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight Dependency Injection Container &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.024&lt;/strong&gt; on 2021-04-27&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.023 was 2 years, 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.072&lt;/strong&gt; on 2021-04-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.071 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.22 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.08&lt;/strong&gt; on 2021-04-27&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 6.07 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.023&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.022 was 11 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 2 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.17&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.16 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.22 was 4 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.03&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.02 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.044' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.044&lt;/strong&gt; on 2021-05-01&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.039 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RTKH/Raisin-0.91' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Raisin&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A REST API microframework for Perl. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.91&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 0.90 was 10 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0949' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0949&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0946 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5844314466895359676/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5844314466895359676"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5844314466895359676"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html" title="(cccxxxix) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3052151456011882087</id>
    <published>2021-05-01T16:34:00.000+02:00</published>
    <updated>2021-05-01T16:34:09.395+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxv) metacpan weekly report - List::Keywords</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 34&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/01 14:33:20 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Enum" target="_blank"&gt;Data::Enum&lt;/a&gt; - fast, immutable enumeration classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DataTables" target="_blank"&gt;DataTables&lt;/a&gt; - a server-side solution for the jQuery DataTables plugin&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::UserAgent::Throttled" target="_blank"&gt;LWP::UserAgent::Throttled&lt;/a&gt; - Throttle requests to a site&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Coverage::TrustMe" target="_blank"&gt;Pod::Coverage::TrustMe&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny::Strict" target="_blank"&gt;Template::Tiny::Strict&lt;/a&gt; - Template Toolkit reimplemented in as little code as possible&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Symlinks" target="_blank"&gt;Win32::Symlinks&lt;/a&gt; - A maintained, working implementation of Perl symlink built in features for Windows.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::MetaSyntactic::Themes" target="_blank"&gt;Acme::MetaSyntactic::Themes&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Avro" target="_blank"&gt;Avro&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Encode" target="_blank"&gt;Deep::Encode&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Emailesque" target="_blank"&gt;Emailesque&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future" target="_blank"&gt;Future&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mock::MonkeyPatch" target="_blank"&gt;Mock::MonkeyPatch&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::RecDescent" target="_blank"&gt;Parse::RecDescent&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pegex" target="_blank"&gt;Pegex&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=222)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POD2::Base" target="_blank"&gt;POD2::Base&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PSGI" target="_blank"&gt;PSGI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Script::Toolbox" target="_blank"&gt;Script::Toolbox&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny" target="_blank"&gt;Template::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3052151456011882087/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3052151456011882087"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3052151456011882087"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxv-metacpan-weekly-report.html" title="(cdlxv) metacpan weekly report - List::Keywords"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2265785990340966947</id>
    <published>2021-05-01T16:28:00.000+02:00</published>
    <updated>2021-05-01T16:28:04.665+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-05-01 14:26:11 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67250819" target="_blank"&gt;Is there a way to have dependencies defined by OS in a CPAN distribution?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67319032" target="_blank"&gt;How can I quickly count the maximum number of consecutive single characters in a string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67292717" target="_blank"&gt;What does scalar mean in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67324732" target="_blank"&gt;Take Longitude/Latitude and get UTC Offset in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67320002" target="_blank"&gt;Perl PAWS SelectObjectContent - "Precondition Failed"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67248904" target="_blank"&gt;What means "Can't locate object method.." in this specific example using Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67264013" target="_blank"&gt;how to terminate a command that has started in a perl script, using 'system()'&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67327545" target="_blank"&gt;There are two files, pm and pl under one file. If you run the pl file, the pm package call is unsuccessful&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67309261" target="_blank"&gt;How to know when a PSGI nonblocking streaming writer is ready for more data in a PSGI compatible way?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67271710" target="_blank"&gt;Script correction for count positive values in text file&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2265785990340966947/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxxxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2265785990340966947"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2265785990340966947"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxxxviii-stackoverflow-perl-report.html" title="(cdlxxxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Creating REST APIs with Perl, Mojolicious and OpenAPI</title>
    <link rel="alternate" href="https://dev.to/raigaurav/creating-rest-apis-with-perl-mojolicious-and-openapi-1bng" type="text/html"/>
    <content type="html">&lt;p&gt;As promised in &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-in-react-js-with-mojo-29mh"&gt;previous&lt;/a&gt; article, we will be using react.js with jsx. For that we should have our server ready.&lt;br&gt;
Today we will be looking at creating the RESTful API's with &lt;a href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt;.&lt;br&gt;
Again we will using &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; for that. Some other prerequisite which we will be using.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/Mojolicious-Plugin-OpenAPI"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/Mojolicious-Plugin-SwaggerUI"&gt;Mojolicious::Plugin::SwaggerUI&lt;/a&gt; - Swagger UI plugin for Mojolicious&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will be using the same example mentioned previously.&lt;br&gt;
So without further adieu lets get started.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-data-config"&gt;
  &lt;/a&gt;
  Creating the data config
&lt;/h1&gt;

&lt;p&gt;For multi-line chart -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Number of automobiles sold per day by manufacturer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"domainAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rangeAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Numbers of automobiles sold"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-18"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be creating one more chart in this example - stacked clustered column chart. We will look into it in more details when we will create the client side. But for now, lets see the input data which is similar to previous one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Revenues by region"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"domainAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rangeAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Expenditure"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Europe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"America"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Asia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Australia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Antartica"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Africa"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2004"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Europe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"America"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Asia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Australia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Antartica"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Africa"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2005"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Europe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"America"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Asia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Australia"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Antartica"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Africa"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-the-mojo-app"&gt;
  &lt;/a&gt;
  Creating the mojo app
&lt;/h1&gt;

&lt;p&gt;The version I am using for this article is 9.14.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; mojo generate app MojoReactApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the app -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;morbo ./script/mojo_app
Web application available at http://127.0.0.1:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will modify this app to suit our need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-the-specification"&gt;
  &lt;/a&gt;
  Writing the specification
&lt;/h1&gt;

&lt;p&gt;For API creation we will follow the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI specification&lt;/a&gt;. We will be using 3.0 version for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"openapi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Mojo React App API"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is a sample server for a mojolicious app."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"contact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Gaurav Rai"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/rai-gaurav"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"servers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/api/v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Version one api"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"/multi-line-chart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"summary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Get multi line chart data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Chart Data"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"operationId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"getMultiLineChartData"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"x-mojo-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"get_multi_line_chart_data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"x-mojo-to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"controller"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"LineCharts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"get_multi_line_chart"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"responses"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"200"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Multi Line Chart Response"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                &lt;/span&gt;&lt;span class="nl"&gt;"schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                        &lt;/span&gt;&lt;span class="nl"&gt;"chart_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                                &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"/stacked-column-chart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"summary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Get stacked column chart data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Chart Data"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"operationId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"getStackedColumnChartData"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"x-mojo-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"get_stacked_column_chart_data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"x-mojo-to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"controller"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ColumnCharts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"get_stacked_column_chart"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"responses"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"200"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stacked Column Chart Response"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                &lt;/span&gt;&lt;span class="nl"&gt;"schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                        &lt;/span&gt;&lt;span class="nl"&gt;"chart_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                                                &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="w"&gt;
                                            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above specification can also be written in .yaml format also. For now I am using json one. Save it as &lt;code&gt;public/api.json&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inside &lt;code&gt;server&lt;/code&gt; section we are using &lt;code&gt;/api/v1&lt;/code&gt; as &lt;code&gt;url&lt;/code&gt;. You can provide full url or relative one. If relative, it is resolved against the server where the given OpenAPI definition file is hosted. More info &lt;a href="https://swagger.io/docs/specification/api-host-and-base-path/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;There are total two API endpoint &lt;code&gt;/multi-line-chart&lt;/code&gt; and &lt;code&gt;/stacked-column-chart&lt;/code&gt; for our 2 charts. But support only &lt;code&gt;GET&lt;/code&gt; request.&lt;/li&gt;
&lt;li&gt;I encourage you to checkout the &lt;a href="https://swagger.io/specification/"&gt;specification&lt;/a&gt; for more details on each and every key.&lt;/li&gt;
&lt;li&gt;Two keys which are specific to Mojolicious are - &lt;code&gt;x-mojo-name&lt;/code&gt; and &lt;code&gt;x-mojo-to&lt;/code&gt;. &lt;code&gt;x-mojo-to&lt;/code&gt; contains the name of controller and action to perform in case that particular endpoint is requested. Checkout &lt;a href="https://metacpan.org/pod/distribution/Mojolicious-Plugin-OpenAPI/lib/Mojolicious/Plugin/OpenAPI/Guides/OpenAPIv3.pod"&gt;Mojolicious::Plugin::OpenAPI::Guides::OpenAPIv3&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#using-the-plugin-in-mojolicious-app"&gt;
  &lt;/a&gt;
  Using the plugin in Mojolicious App
&lt;/h1&gt;

&lt;p&gt;Lets add the OpenAPI and SwaggerUi plugin in our application.&lt;br&gt;
Inside MojoReactApp.pm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;MojoReactApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MojoReactApp::Model::&lt;/span&gt;&lt;span class="nv"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# This method will run once at server start&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Load configuration from config file&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NotYAMLConfig&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure the application&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;# Load the "api.json" specification&lt;/span&gt;
    &lt;span class="c1"&gt;# Can also be written as -&lt;/span&gt;
    &lt;span class="c1"&gt;# "OpenAPI" =&amp;gt; {spec =&amp;gt; $self-&amp;gt;static-&amp;gt;file("api.json")-&amp;gt;path}&lt;/span&gt;

    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OpenAPI&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;home&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;rel_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;public/api.json&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;SwaggerUI&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;api&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
            &lt;span class="s"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/v1&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
            &lt;span class="s"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Mojolicious App&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Helper to lazy initialize and store our model object&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;($c) {&lt;/span&gt;
            &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;MojoReactApp::Model::&lt;/span&gt;&lt;span class="nv"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Router&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Normal route to controller&lt;/span&gt;
    &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home/welcome&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I have just used the OpenAPI and SwaggerUI plugin.&lt;br&gt;
We are using the &lt;code&gt;url&lt;/code&gt; to load the specification which have created before.&lt;br&gt;
SwaggerUI is just a fancy thing I am using. There is no such limitation to used it for creating the API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;route&lt;/code&gt; - The ui will be available on http://{hostname}:{port}/api&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt; - Url for the specification. In &lt;code&gt;api.json&lt;/code&gt; inside &lt;code&gt;server&lt;/code&gt; section we have written the url as &lt;code&gt;/api/v1&lt;/code&gt; meaning our specification is available under that path. Hence we have given the same path here.&lt;/li&gt;
&lt;li&gt;Please have a look at the &lt;a href="https://metacpan.org/pod/Mojolicious::Plugin::SwaggerUI#OPTIONS"&gt;options&lt;/a&gt; for the meaning of each parameters.&lt;/li&gt;
&lt;li&gt;If case you noticed, we have created just one route &lt;code&gt;/&lt;/code&gt; which will just show the home page. Since we are crating Rest API's and all the other endpoint are already taken care in &lt;code&gt;api.json&lt;/code&gt; we don't have to add it here.&lt;/li&gt;
&lt;li&gt;Our directory structure is also simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📦mojo_react_app&lt;br&gt;
 ┣ 📂etc&lt;br&gt;
 ┃ ┣ 📜input_multi_line_chart_data.json&lt;br&gt;
 ┃ ┗ 📜input_stacked_clustered_column_chart.json&lt;br&gt;
 ┣ 📂lib&lt;br&gt;
 ┃ ┣ 📂MojoReactApp&lt;br&gt;
 ┃ ┃ ┣ 📂Controller&lt;br&gt;
 ┃ ┃ ┃ ┣ 📜ColumnCharts.pm&lt;br&gt;
 ┃ ┃ ┃ ┗ 📜LineCharts.pm&lt;br&gt;
 ┃ ┃ ┗ 📂Model&lt;br&gt;
 ┃ ┃ ┃ ┗ 📜Data.pm&lt;br&gt;
 ┃ ┗ 📜MojoReactApp.pm&lt;br&gt;
 ┣ 📂public&lt;br&gt;
 ┃ ┗ 📜api.json&lt;br&gt;
 ┣ 📂script&lt;br&gt;
 ┃ ┗ 📜mojo_react_app&lt;br&gt;
 ┣ 📂t&lt;br&gt;
 ┃ ┗ 📜basic.t&lt;br&gt;
 ┣ 📂templates&lt;br&gt;
 ┃ ┣ 📂home&lt;br&gt;
 ┃ ┃ ┗ 📜welcome.html.ep&lt;br&gt;
 ┃ ┗ 📂layouts&lt;br&gt;
 ┃ ┃ ┗ 📜default.html.ep&lt;br&gt;
 ┗ 📜mojo_react_app.yml&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;public&lt;/code&gt; section only contains &lt;code&gt;api.json&lt;/code&gt;. There is no need of css and js as we are creating only API. Even you can remove the whole &lt;code&gt;template&lt;/code&gt; section also. I have just added it for &lt;code&gt;/&lt;/code&gt; endpoint. The &lt;code&gt;welcome&lt;/code&gt; template is just some minor adjustment to default one.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;% layout 'default';
% title 'Welcome';
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Hello there&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  This is the home page.
  For API &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;link_to&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt; &lt;span class="na"&gt;here&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; '/api' %&amp;gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Since we are decided to created 2 charts, we have 2 json file in &lt;code&gt;etc&lt;/code&gt; dir.&lt;/li&gt;
&lt;li&gt;Each one has there own controller.&lt;/li&gt;
&lt;li&gt;Our Model is almost similar to &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; article with minor modification.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MojoReactApp::Model::&lt;/span&gt;&lt;span class="nv"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;experimental&lt;/span&gt; &lt;span class="sx"&gt;qw(signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="sx"&gt;qw(decode_json)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;($class) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nb"&gt;bless&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_read_json_file&lt;/span&gt; &lt;span class="p"&gt;($self, $json_file) {&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Unable to open file &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="s2"&gt; : $!&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Unable to close file : $!&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_line_data&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_read_json_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;etc/input_multi_line_chart_data.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_column_data&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_read_json_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;etc/input_stacked_clustered_column_chart.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h1&gt;

&lt;p&gt;Lets create our 2 controller.&lt;br&gt;
Inside &lt;code&gt;lib\MojoReactApp\Controller\ColumnCharts.pm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MojoReactApp::Controller::&lt;/span&gt;&lt;span class="nv"&gt;ColumnCharts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious::Controller&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="sx"&gt;qw(encode_json)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_stacked_column_chart&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Do not continue on invalid input and render a default 400 error document.&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;openapi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;valid_input&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_column_data&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;# $output will be validated by the OpenAPI spec before rendered&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;chart_data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;openapi&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple and easy!!. Here we are validating the input in &lt;code&gt;$self-&amp;gt;openapi-&amp;gt;valid_input&lt;/code&gt;. After that we are getting the data from model and just returning that as the response inside the hash.&lt;/p&gt;

&lt;p&gt;Similarly for &lt;code&gt;lib\MojoReactApp\Controller\LineCharts.pm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;MojoReactApp::Controller::&lt;/span&gt;&lt;span class="nv"&gt;LineCharts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious::Controller&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="sx"&gt;qw(encode_json)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_multi_line_chart&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Do not continue on invalid input and render a default 400 error document.&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;openapi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;valid_input&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_line_data&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;# $output will be validated by the OpenAPI spec before rendered&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;chart_data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;openapi&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exact similar to previous one, except we are calling different model function here.&lt;/p&gt;

&lt;p&gt;Lets run it and see the output.&lt;br&gt;
Hitting '&lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3AhOn8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml42u2oxsvtvybh96bjd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3AhOn8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml42u2oxsvtvybh96bjd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see your home page which get generated by the &lt;code&gt;welcome&lt;/code&gt; template. Click on the link or hit '&lt;a href="http://localhost:3000/api"&gt;http://localhost:3000/api&lt;/a&gt;' in browser, you can see the shiny Swagger UI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ETpoNvoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e03ax2lqabz5k8nv8sj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ETpoNvoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e03ax2lqabz5k8nv8sj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We can also see the 2 endpoint which you have created.&lt;br&gt;
We can see all the things which we have written in &lt;code&gt;api.json&lt;/code&gt;&lt;br&gt;
This swagger ui is ultimately using that specification and generating this page.&lt;br&gt;
Hit '&lt;a href="http://localhost:3000/api/v1"&gt;http://localhost:3000/api/v1&lt;/a&gt;' and you can see the specifications also.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTwpRJ97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkjhgzvj4tkhsj95iohw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTwpRJ97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkjhgzvj4tkhsj95iohw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets try to do a GET request on one of the endpoint. You can use the SwaggerUI for this or a normal curl request or directly hit the endpoint from browser or use some 3rd party tool like &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; , all will work.&lt;br&gt;
SwaggerUI will just give you some documentation about usage and the expected response.&lt;/p&gt;

&lt;p&gt;Let hits the &lt;code&gt;/multi-line-chart&lt;/code&gt; endpoint. In SwaggerUi page, click on 'Try it out' and 'execute' it.&lt;br&gt;
You can see the response in JSON format.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nROSi49m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90y76p77qjrbnmzlgpsd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nROSi49m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90y76p77qjrbnmzlgpsd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We can see there is equivalent curl request already prepared which we can also use to get the same response. &lt;br&gt;
Also in 'Requested URL' we can see ultimately it is calling the '/api/v1/multi-line-chart' which you can hit from browser and see the exact result.&lt;/p&gt;

&lt;p&gt;With this our API development is done. Next we will be seeing how to use this API in React.js and create those charts in jsx.&lt;br&gt;
Also, I have used &lt;code&gt;morbo&lt;/code&gt; which is good for development. But for production we need to make certain changes. I will talk about those (Docker, Makefile, Apache2/Nginx, uWSGI/Plack and hypnotoad) in a different section.&lt;/p&gt;

&lt;p&gt;The above example is available at &lt;a href="https://github.com/rai-gaurav/mojo_react_app/tree/main/with_jsx/server/mojo_react_app"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also a good tutorial available on Mojolicious blog - &lt;a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/"&gt;A RESTful API with OpenAPI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perl onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Mojolicious logo taken from &lt;a href="https://github.com/mojolicious/mojo/blob/master/lib/Mojolicious/resources/public/mojo/logo.png"&gt;here&lt;/a&gt;&lt;br&gt;
OpenAPI logo taken from &lt;a href="https://www.openapis.org/news/blogs/2016/07/you-can-get-involved-creating-openapi-specification-and-heres-how/attachment/openapi_pantone"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gaurav Rai</name>
    </author>
    <id>https://dev.to/raigaurav/creating-rest-apis-with-perl-mojolicious-and-openapi-1bng</id>
    <published>2021-05-01T09:02:13Z</published>
    <updated>2021-05-01T09:02:13Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
    <category term="api"/>
    <category term="tutorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRAINBUZ/Acme-Brainbuz-markdown-0.001-TRIAL">Acme-Brainbuz-markdown</a></td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>0.001</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-BrowsingTableInteractively-0.001">Acme-CPANModules-BrowsingTableInteractively</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors-0.001">Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-0.01">Acme-Markdown-Embarrassing</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>Testing the MetaCPAN Markdown converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Alien-OpenMP-0.001">Alien-OpenMP</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>Encapsulate system info for OpenMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-ical-0.01">App-Greple-ical</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>Module to support Apple OS X Calendar data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/App-MigrateToTest2V0-0.01">App-MigrateToTest2V0</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Migrate your tests from Test::More to Test2::V0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/App-ProxyThat-0.001">App-ProxyThat</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.001</td>
<td>Proxy an URL from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-SQLiteUtils-0.001">App-SQLiteUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-dateseq-idn-0.003">App-dateseq-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Like dateseq, but with built-in support for Indonesian holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/App-perlimports-0.000001">App-perlimports</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Make implicit imports explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayData-0.1.0">ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Specification for ArrayData::*, modules that contains array data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayDataRoles-Standard-0.001">ArrayDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Standard set of roles for ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Constellations-0.01">Astro-Coord-Constellations</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Identify the constellation for position (RA, Dec)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Precession-0.01">Astro-Coord-Precession</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Precess coordinates between 2 epochs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMICO/Beekeeper-0.01">Beekeeper</a></td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>0.01</td>
<td>Framework for building applications with a microservices architecture</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GROUSSE/BigIP-REST-0.1">BigIP-REST</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.1</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Book-Bilingual-v0.001">Book-Bilingual</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.001</td>
<td>Data structure for a bilingual book</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BOD/Business-Stripe-WebCheckout-0.1_1">Business-Stripe-WebCheckout</a></td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>0.1_1</td>
<td>Simple way to implement payments using Stripe hosted checkout</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBOOK/CGI-Tiny-0.001">CGI-Tiny</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>0.001</td>
<td>Common Gateway Interface, with no frills</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DJERIUS/CXC-Number-0.03">CXC-Number</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.03</td>
<td>A namespace for modules which deal with numbers.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OVID/CodeGen-Protection-0.01">CodeGen-Protection</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.01</td>
<td>Safely rewrite parts of generated code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-API-0.01">Crypto-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-API-0.01">Crypto-Exchange-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-0.01">Crypto-Exchange-Binance</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-Spot-API-0.01">Crypto-Exchange-Binance-Spot-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance Spot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Data-Enum-v0.1.0">Data-Enum</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>fast, immutable enumeration classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Lookup-0.002">Data-TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Object-0.112">Data-TableData-Object</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.112</td>
<td>Manipulate data structure via table object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Devel-GlobalSub-0.01">Devel-GlobalSub</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.01</td>
<td>Automagically import a subroutine into all namespaces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CCM/File-Codeowners-0.50">File-Codeowners</a></td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>0.50</td>
<td>Read and write CODEOWNERS files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/File-Edit-0.0.1">File-Edit</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.0.1</td>
<td>A naive, probably buggy, file editor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/File-SortedSeek-PERLANCAR-0.015.0">File-SortedSeek-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015.0</td>
<td>A fork of File::SortedSeek with some more options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SANKO/Finance-Alpaca-0.9900">Finance-Alpaca</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.9900</td>
<td>Perl Wrapper for Alpaca's Commission-free Stock Trading API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CHROMATIC/Finance-Dogechain-1.20210418.2306">Finance-Dogechain</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210418.2306</td>
<td>use the dogecoin.info API from Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDN/Fork-Utils-0.01">Fork-Utils</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>set of usefull methods to work with processes and signals</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Function-Version-0.0001">Function-Version</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.0001</td>
<td>Define and use different function versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FAYLAND/Google-UULE-Generator-0.01">Google-UULE-Generator</a></td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>0.01</td>
<td>Generate Google UULE param</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-ExtendedKeys-0.01">Hash-ExtendedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>Hash Keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-RestrictedKeys-0.01">Hash-RestrictedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>restricted hash keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VRAG/JSON-Pointer-Extend-0.01">JSON-Pointer-Extend</a></td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>0.01</td>
<td>JSON::Pointer extension module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/LINQ-Database-0.000_001">LINQ-Database</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.000_001</td>
<td>LINQ extension for working with databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Lagrange-0.1.3">Lagrange</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>Perl extension for Lagrange Theory and Applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-CPUInfo-0.001">Lib-CPUInfo</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to PyTorch's libcpuinfo C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-PWQuality-0.001">Lib-PWQuality</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to the libpwquality C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NATARAJ/Lingua-StarDict-Writer-0.01">Lingua-StarDict-Writer</a></td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>0.01</td>
<td>A module that allows to create a StarDict dictionary</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/Linux-MCELog-0.01">Linux-MCELog</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to extract memory failure information from MCELog UNIX domain socket on Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/List-AllUtils-Null-0.001">List-AllUtils-Null</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>List subroutines that treat undef as contagious unknown, like null in SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/List-Keywords-0.01">List-Keywords</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a selection of list utility keywords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RVOSA/MIDI-SP404sx-v1.0.0">MIDI-SP404sx</a></td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>v1.0.0</td>
<td>Convert between MIDI files and SP404sx patterns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DFUG/Minion-Backend-Redis-0.002">Minion-Backend-Redis</a></td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>0.002</td>
<td>Redis backend for Minion job queue</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojo-OBS-Client-0.01">Mojo-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>Mojolicious client for the OBS WebSocket remote plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARASIK/Mojo-Reactor-Prima-1.00">Mojo-Reactor-Prima</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1.00</td>
<td>Prima event loop backend for Mojo::Reactor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DERIV/Myriad-0.001">Myriad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>async microservice framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Net-Protocol-OBSRemote-0.01">Net-Protocol-OBSRemote</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>event-loop agnostic protocol to control OBS via the WebSocket plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABIGAIL/OEIS-2021041201">OEIS</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2021041201</td>
<td>Fetch values from sequences of the OEIS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOOJONIO/OpenAPI-Generator-0.01">OpenAPI-Generator</a></td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>0.01</td>
<td>generate openapi definition</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/OpenMP-Environment-1.0.0">OpenMP-Environment</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1.0.0</td>
<td>Perl extension managing OpenMP variables in %ENV within a script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLICEASE/Package-Checkpoint-0.01">Package-Checkpoint</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>Checkpoint the scalar, array and hash values in a package for later restoration</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Perl-Oberon-0.1.3">Perl-Oberon</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>an Oberon compiler system written in Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASDAGO/Perl-PrereqScanner-Scanner-DistZilla-PluginBundle-0.001">Perl-PrereqScanner-Scanner-DistZilla-PluginBundle</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>scan for required plugins in Dist::Zilla plugin bundles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LTM/Plack-App-WWW-0.01">Plack-App-WWW</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>Serve cgi-bin and static files from root directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.001_001">Pod-Coverage-TrustMe</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001_001</td>
<td>Pod::Coverage but more powerful</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Collection-0.001">Role-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Iterator-0.001">Role-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>A basic iterator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KEEDI/SMS-Send-KR-Aligo-0.004">SMS-Send-KR-Aligo</a></td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>0.004</td>
<td>An SMS::Send driver for the smartsms.aligo.in SMS service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Finance-SE-IDX-0.001">Sah-Schemas-Finance-SE-IDX</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Schemas related to the Indonesian Stock Exchange</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/INA/See-0.01">See</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>Debug See</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Fermi-0.1.2">Stats-Fermi</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.2</td>
<td>Perl extension for Fermi, Boltzmann potentials</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Hawking-0.1.1">Stats-Hawking</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Perl extension for a Hawking Boltzmann Model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-0.05-TRIAL">Sub-Genius</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.05</td>
<td>manage concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-TRIAL-0.01">Sub-Genius-TRIAL</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.01</td>
<td>module for managing concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.01">Syntax-Keyword-Match</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a match/case syntax for perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/TOML-XS-0.01">TOML-XS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Parse TOML with XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-0.1.3">TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.3</td>
<td>Specification for TableData::*, modules that contains table data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableDataRoles-Standard-0.007">TableDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>Standard set of roles for TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-TickitWidget-0.001">Text-Table-TickitWidget</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>View table data on the terminal using Tickit::Widget::Table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Trek-20210424">Tree-Trek</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210424</td>
<td>Trek through a tree one character at a time.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Trim-20210401">Trim</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210401</td>
<td>Trim various things by removing leading and trailing whitespace.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/UniEvent-Socks-0.1.0">UniEvent-Socks</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>Socks support for UniEvent's tcp handles.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Unicode-Confuse-0.01">Unicode-Confuse</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Win32-Symlinks-0.03">Win32-Symlinks</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.03</td>
<td>A maintained, working implementation of Perl symlink built in features for Windows.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.01">XS-Parse-Keyword</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>XS functions to assist in parsing keyword syntax</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>50</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>16</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Brainbuz-markdown BRAINBUZ 0.001 turns baubles into trinkets Acme-CPANModules-BrowsingTableInteractively PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-Markdown-Embarrassing CONTRA 0.01 Testing the MetaCPAN Markdown converter Alien-OpenMP ETJ 0.001 Encapsulate system info for OpenMP App-Greple-ical UTASHIRO 0.01 Module to support Apple OS … <a href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1941</id>
    <published>2021-05-01T00:37:07Z</published>
    <updated>2021-05-01T00:37:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Live coding session with Gabor Szabo</title>
    <link href="http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html"/>
    <id>http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html</id>
    <updated>2021-04-29T20:06:52+00:00</updated>
    <category term="perl"/>
    <summary>Today I was invited to join Gabor Szabo for a live pair programming session, where we worked on adding Docker and CI to his course management application. You can view the video of our informal ...</summary>
    <content type="html">&lt;p&gt;Today I was invited to join &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt; for a &lt;a href="https://code-maven.com/setting-up-ci-and-docker-for-course-management-app"&gt;live pair programming session&lt;/a&gt;, where we worked on adding Docker and CI to his &lt;a href="https://github.com/szabgab/course-management"&gt;course management application&lt;/a&gt;. You can view the video of our informal competition who is the worst typist &lt;a href="https://www.youtube.com/watch?v=byugeGi1cNc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first I was bit skeptical about the concept of live coding (who wants to watch people google^w code for two hours?), but in the end it was a funny and informative (for me) session. Maybe I'm just totally deprived of live human interaction (thanks, Corona), but I think I'd enjoy similar sessions also under normal circumstances.&lt;/p&gt;

&lt;h4&gt;Things I learned&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I forgot a lot of docker command line options after mostly using docker-compose.&lt;/li&gt;
&lt;li&gt;There is no really smooth way to &lt;code&gt;COPY&lt;/code&gt; a lot of dirs into the container.&lt;/li&gt;
&lt;li&gt;Adding a &lt;code&gt;.dockerignore&lt;/code&gt; file (to ignore at least &lt;code&gt;~/.git/&lt;/code&gt;) saves some time and network, because docker will not send the ignored files to the docker daemon in the famous &lt;code&gt;sending build context to docker daemon&lt;/code&gt; step at the start of each build.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt; exposes the ports listed in &lt;code&gt;EXPOSE&lt;/code&gt;, but maps them to random ports on the host (which makes no sense during dev, but probably when deploying to clouds)&lt;/li&gt;
&lt;li&gt;Some people prefer &lt;code&gt;-ti&lt;/code&gt;, some prefer &lt;code&gt;-it&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I'm a bit rusty on using the github pull request workflow (esp. the part where you have to fetch upgrades from upstream), due to mostly working on repos where several devs have direct write access.&lt;/li&gt;
&lt;li&gt;Setting up github CI is really not a lot of work (at least to only run the basic tests). Only &lt;a href="https://github.com/szabgab/course-management/commit/2bfb424f8e1b14481def0886a198f4715cff5f8a"&gt;16 lines of &lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt;. I will try to add this to my &lt;span class="caps"&gt;CPAN &lt;/span&gt;github repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're interested in the Dockerfile aspect of this session, may I point you to my talk &lt;a href="/talks/writing_a_good_dockerfile_for_perl_app.html"&gt;Writing a good Dockerfile for a (Perl) app&lt;/a&gt; from the 2020 Perl Conference, where I elaborate on some of the finer points, and with better preparation than today :-)&lt;/p&gt;

&lt;p&gt;Oh, and this reminds me that I should submit a talk (maybe on docker-compose?) for &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;this years Perl &amp;amp; Raku conference&lt;/a&gt;. The CfP runs until tomorrow, so I better hurry.&lt;/p&gt;</content>
    <category term="docker"/>
    <category term="CI"/>
  </entry>
  <entry>
    <title>Perl tops coding salary rankings</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-tops-coding-salary-rankings-4fp3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl tops <a href="https://www.businessinsider.com/the-top-coding-languages-with-the-highest-salary-2020-4#perl-is-associated-with-an-average-global-salary-of-8402550-15">this list of salary rankings from Business Insider</a>. Granted it’s harder to find a job, but when you do you’re paid well. Do you want to be a commodity or do you want to be valued?</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-tops-coding-salary-rankings-4fp3</id>
    <published>2021-04-29T18:16:37Z</published>
    <updated>2021-04-29T18:16:37Z</updated>
    <category term="link"/>
    <category term="perl"/>
    <category term="work"/>
    <category term="salary"/>
  </entry>
  <entry>
    <title>Perl.com: Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-com-downloading-and-installing-perl-in-2021-34fk" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://www.perl.com/article/downloading-and-installing-perl-in-2021/">My latest article on Perl.com</a> is up now on how to download and install Perl on various platforms. I hope it’s helpful.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-com-downloading-and-installing-perl-in-2021-34fk</id>
    <published>2021-04-27T14:00:06Z</published>
    <updated>2021-04-27T14:00:06Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 110</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-110-22ao" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-110/sgreen">My solutions</a></p>

<h1>
  <a href="#task-1-valid-phone-numbers">
  </a>
  TASK #1 › Valid Phone Numbers
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a text file. Write a script to display all valid phone numbers in the given text file.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>Let's start with what is a valid phone number. I can tell you only the phone number starting with + would actually work from where I am. But for the task I guess this isn't really important.</p>

<p>If I was doing this outside the task, I would have used <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a> to read the file. As regular readers would know, I prefer not to use modules that aren't part of core Perl in these challenges.</p>

<p>For this task, I simply read the file line-by-line and output a line if it matches the regular expression <code>/^(?:\+[0-9]{2}|\([0-9]{2}\)|[0-9]{4}) [0-9]{10}$/</code>. I use <code>0-9</code> as <code>\d</code> includes <a href="https://www.effectiveperlprogramming.com/2011/01/know-your-character-classes/">digits in other languages</a>.</p>

<h2>
  <a href="#example">
  </a>
  Example
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl input1.txt 
0044 1148820341
+44 1148820341
(44) 1148820341
</code></pre>

</div>



<h1>
  <a href="#task-2-transpose-file">
  </a>
  TASK #2 › Transpose File
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a text file. Write a script to transpose the contents of the given file.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This task didn't mention the format is CSV, although the example would indicate the input is a CSV file. Outside the challenge I would probably use <a href="https://metacpan.org/pod/Text::CSV">Text::CSV</a> as this correctly handles escaping of values with commas in them.</p>

<p>For this task I read the input file and create an array of arrays with the values found called <code>@lines</code>. I then loop through each column and use <code>map { $_-&gt;[$col] // '' } @lines</code> and the <code>join</code> method to display each row of the output. </p>

<p>The logical-defined-or <code>//</code> is used in case some rows do not have the same number of columns and will prevent undef warnings in the output (albeit it to STDERR).</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl input2.txt
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-110-22ao</id>
    <published>2021-04-27T12:37:04Z</published>
    <updated>2021-04-27T12:37:04Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Weekly Challenge 109</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-109-4je2" type="text/html"/>
    <content type="html">&lt;p&gt;I actually submitted my solutions last week, but forgot to write a blog post. Better late than never, eh? )&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/"&gt;Challenge 109&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-109/sgreen"&gt;My Solutions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TASK #1 › Chowla Numbers&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to generate first 20 Chowla Numbers, named after, Sarvadaman D. S. Chowla, a London born Indian American mathematician. It is defined as:&lt;/p&gt;

&lt;p&gt;C(n) = sum of divisors of n except 1 and n&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;After submitting my solution, I realised that I over-engineered my solution. It's still functional though. This task is pretty straight forward. Work through the 1 to 20, and for each number find all divisors (other than 1 and the number itself). We can short cut this by only working through the first half since the second half cannot be divisors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl 
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-four-squares-puzzle"&gt;
  &lt;/a&gt;
  TASK #2 › Four Squares Puzzle
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given four squares as below with numbers named a,b,c,d,e,f,g. ... Write a script to place the given unique numbers in the square box so that sum of numbers in each box is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;This is a task where I assume some people will apply some math theory to the solution. For my I took an approach of brutal forcibly finding a solution. 7! = 5040 which is a piece of cake for any CPU these days.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part of the task is to get all 5,040 permutations. I have a rule of not using any module that isn't part of core Perl, so didn't use &lt;a href="https://metacpan.org/pod/Algorithm::Permute"&gt;Algorithm::Permute&lt;/a&gt; to generate the sequence.&lt;/li&gt;
&lt;li&gt;I then define an array &lt;code&gt;@boxes&lt;/code&gt; to contain the values in each square, specifically &lt;code&gt;[ 0, 1 ], [ 1, 2, 3 ], [ 3, 4, 5 ], [ 5, 6 ]&lt;/code&gt; (where a = 0, b = 1, etc.)&lt;/li&gt;
&lt;li&gt;Finally I work through each permutation to see if it is a valid solution, and end when one is found.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;My example differs from the one given in the example due to the way I order the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl 1 2 3 4 5 6 7
a = 3
b = 7
c = 2
d = 1
e = 5
f = 4
g = 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-109-4je2</id>
    <published>2021-04-27T11:57:45Z</published>
    <updated>2021-04-27T11:57:45Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://perl.com/article/downloading-and-installing-perl-in-2021/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;[This article is part of our &lt;a href="https://github.com/tpf/perldotcom/projects/1"&gt;Popular articles&lt;/a&gt; project to update
Perl.com for contemporary practices]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re reading this article, you&amp;rsquo;re likely looking for a simple way
to download and install the Perl programming language. Or you already
have Perl installed as part of your operating system, but it&amp;rsquo;s older
than the currently-supported versions (5.32.1 or 5.30.3) and you&amp;rsquo;d
like to use the latest and greatest features. &lt;a href="https://www.perl.org/get.html"&gt;The download
options&lt;/a&gt; may seem daunting, especially
if you&amp;rsquo;re new to computers or programming. We&amp;rsquo;ll take things step by
step, and soon you&amp;rsquo;ll be on your way to writing your first Perl
program.&lt;/p&gt;

&lt;p&gt;A word of warning, though: Several of these steps (and usually Perl
itself) require using your computer&amp;rsquo;s command-line or terminal
interface.&lt;/p&gt;

&lt;h2 id="the-first-step-download-pre-built"&gt;The first step: Download pre-built&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re getting started in Perl development, you may only need a
pre-built binary distribution. Further on, though, you might want to
consider building your own, especially if you need to juggle different
versions to support different environments or want to use a later
version than is available pre-made.&lt;/p&gt;

&lt;p&gt;For now, though, let&amp;rsquo;s consider the pre-built options. You have
several, depending on what computer operating system you&amp;rsquo;re using.&lt;/p&gt;

&lt;h3 id="microsoft-windows"&gt;Microsoft Windows&lt;/h3&gt;

&lt;p&gt;The two main &amp;ldquo;flavors&amp;rdquo; of Perl for Windows are
&lt;a href="https://www.activestate.com/products/perl/"&gt;ActiveState Perl&lt;/a&gt; and
&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. Which one you choose depends
on what you plan to use it for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveState&lt;/strong&gt; provides a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition of ActivePerl&lt;/a&gt;
licensed only for development purposes. If you intend to do
commercial work or want technical support beyond community forums, you&amp;rsquo;ll
need to
&lt;a href="https://www.activestate.com/solutions/pricing/"&gt;subscribe to a team plan or higher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The free community edition is also 64-bit only, and as of this writing, only
the earlier versions 5.28 (2018) and 5.26 (2017) are available, with an
experimental 5.32 (2020) release licensed for any purpose. The latter is
also currently only installable via the Windows command line; earlier
versions use a standard Windows setup wizard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;&lt;/strong&gt; is a Perl environment for
Windows that strives to be as close as possible to Perl on Unix and Linux
systems, where the language got its start. Besides the Perl binaries, it
also includes a compiler, related tools, external libraries, and database
clients. This is important as many modules for extending Perl&amp;rsquo;s
functionality need a compiler. It&amp;rsquo;s also available in both 64-bit and
32-bit editions of the current 5.32 version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do I recommend?&lt;/strong&gt; There&amp;rsquo;s no escaping Perl&amp;rsquo;s Unix heritage, so you&amp;rsquo;ll
have an easier time with Strawberry Perl. That said, if you think you&amp;rsquo;ll be
taking advantage of ActiveState&amp;rsquo;s commercial offerings of support and their
&lt;a href="https://www.activestate.com/products/platform/"&gt;ActiveState Platform&lt;/a&gt; for
managing different language runtimes, you may want to give them a try.&lt;/p&gt;

&lt;p&gt;Windows also has two Linux-like environments in the form of
&lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/"&gt;Windows Subsystem for Linux&lt;/a&gt;.
Follow the Linux directions below to install Perl in one of these.&lt;/p&gt;

&lt;p&gt;There is also the &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager for
Windows, which provides an option for installing either ActiveState or
Strawberry Perl.&lt;/p&gt;

&lt;h3 id="apple-macos"&gt;Apple macOS&lt;/h3&gt;

&lt;p&gt;macOS comes with Perl pre-installed: version
5.18 (2013) on macOS Catalina 10.15 and 5.28 (2018) on Big Sur 11. But,
&lt;a href="https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes#Scripting-Language-Runtimes"&gt;Apple has said that scripting language runtimes are deprecated&lt;/a&gt;,
and are only &amp;ldquo;included &amp;hellip; for compatibility with legacy software.&amp;rdquo; You
should consider installing your own.&lt;/p&gt;

&lt;p&gt;Like Windows, ActiveState has a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition&lt;/a&gt;
for developers. The Windows caveats above apply, except for a current Perl
version 5.32—it&amp;rsquo;s &amp;ldquo;coming soon&amp;rdquo; as of this writing.&lt;/p&gt;

&lt;p&gt;Your best bet is to &lt;a href="https://brew.sh/"&gt;install the Homebrew package manager&lt;/a&gt;
in the macOS Terminal application (after
&lt;a href="https://docs.brew.sh/Installation#macos-requirements"&gt;installing its requirements&lt;/a&gt;),
and then issue the command &lt;code&gt;brew install perl&lt;/code&gt;. This will install the latest
version of Perl, as well as give you instructions for making sure that
installed Perl modules stay that way across updates by Homebrew.&lt;/p&gt;

&lt;h3 id="linux-or-another-unix-like-system"&gt;Linux or another Unix-like system&lt;/h3&gt;

&lt;p&gt;Like macOS, most Linux and Unix
systems come with Perl pre-installed, or installable using the operating
system&amp;rsquo;s software package manager. Also like macOS, these are usually older
versions provided for compatibility with other software provided by the
OS.&lt;/p&gt;

&lt;p&gt;To install your own on Linux, you can
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;go the ActiveState route&lt;/a&gt;
as above, or also use the
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux"&gt;Homebrew package manager&lt;/a&gt;. There are
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux#requirements"&gt;several requirements to install first&lt;/a&gt;,
and then you can
&lt;a href="https://brew.sh/"&gt;follow the directions for installing Homebrew&lt;/a&gt; and issue
the command &lt;code&gt;brew install perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For other Unix systems with an older version of Perl, I&amp;rsquo;m afraid you&amp;rsquo;re going
to have to build from source as detailed below.&lt;/p&gt;

&lt;h2 id="next-steps-building-your-own-with-perlbrew-or-plenv"&gt;Next steps: Building your own with perlbrew or plenv&lt;/h2&gt;

&lt;p&gt;Perl&amp;rsquo;s source code (the instructions that build a program) is freely
available and compiles on &lt;a href="https://perldoc.pl/perlport#PLATFORMS"&gt;over 100
platforms&lt;/a&gt;. You can &lt;a href="https://www.perl.org/get.html"&gt;download
it directly&lt;/a&gt; and build a version
yourself, after installing any prerequisite packages used to build
software on your operating system (see below). However, most Perl
developers choose to use a tool to automate that process and manage
different versions of Perl side-by-side. Enter
&lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perlbrew requires an already-installed system version of Perl, but it
can be as old as 5.8 (2002), which should cover most Linux and Unix
systems in use today. Once you&amp;rsquo;ve installed your operating system&amp;rsquo;s
build tools and followed the directions on &lt;a href="https://perlbrew.pl/"&gt;the perlbrew home
page&lt;/a&gt;, typing &lt;code&gt;perlbrew install 5.32.1&lt;/code&gt; followed
by &lt;code&gt;perlbrew switch 5.32.1&lt;/code&gt; will install and switch to the latest
version of Perl as of this writing. Installing older versions of Perl
and switching between them use the same steps, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perlbrew install &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.30.3 --as older-perl
perlbrew switch older-perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use an alternative, &lt;a href="https://github.com/tokuhirom/plenv"&gt;plenv&lt;/a&gt;,
which uses a different mechanism to manage versions of Perl using the &lt;code&gt;bash&lt;/code&gt;
command shell. It also enables you to use different versions of Perl depending
on which file system directory you&amp;rsquo;re working in. It&amp;rsquo;s
&lt;a href="https://github.com/tokuhirom/plenv/blob/master/README.md#installation"&gt;set up&lt;/a&gt;
using either Homebrew or &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows users have the option of
&lt;a href="https://github.com/stevieb9/berrybrew"&gt;berrybrew&lt;/a&gt;, which acts much like
perlbrew for Strawberry Perl with slightly different
&lt;a href="https://github.com/stevieb9/berrybrew#commands"&gt;options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="building-from-the-source-directly"&gt;Building from the source directly&lt;/h2&gt;

&lt;p&gt;If you feel you don&amp;rsquo;t need to manage multiple installations of Perl or you
want to do things old-school, you can always download and build directly from
the source code. Select &amp;ldquo;Download Latest Stable Source&amp;rdquo; from the
&lt;a href="https://www.perl.org/get.html"&gt;Perl Download&lt;/a&gt; web page, then
&lt;a href="https://opensource.com/article/17/7/how-unzip-targz-file"&gt;unarchive it&lt;/a&gt;
into a directory.&lt;/p&gt;

&lt;p&gt;You should always check the included &lt;code&gt;README&lt;/code&gt; files for information on how to
build on your system; there&amp;rsquo;s a generic one as well as specific &lt;code&gt;README&lt;/code&gt;s for
various platforms (&lt;code&gt;README.linux&lt;/code&gt;, &lt;code&gt;README.macosx&lt;/code&gt;, &lt;code&gt;README.win32&lt;/code&gt;, etc.).
Note that the &lt;code&gt;README.macosx&lt;/code&gt; document applies to current versions of macOS,
which was previously called Mac OS X; &lt;code&gt;README.macos&lt;/code&gt; is for the &amp;ldquo;Classic&amp;rdquo;
Macintosh operating system, unsupported since 2004.&lt;/p&gt;

&lt;p&gt;On most Unix-like systems (including macOS), you can then configure, build,
test, and install Perl by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;./Configure -des -Dprefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/
make
make test
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will build Perl with all default options for your system and install it
in the &lt;code&gt;/usr/local&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id="up-and-running"&gt;Up and running&lt;/h2&gt;

&lt;p&gt;Regardless of whether you&amp;rsquo;ve chosen to install a pre-built package or roll
your own, you should now be able to issue the following at your command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perl -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;and receive a reply that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is perl 5, version 32, subversion 1 (v5.32.1) built for darwin-2level
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2021, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;re now using the latest version of Perl on your computer!
Now head on over to &lt;a href="https://perl.org"&gt;Perl.org&lt;/a&gt; and start learning!&lt;/p&gt;
</content>
    <id>https://perl.com/article/downloading-and-installing-perl-in-2021/</id>
    <published>2021-04-27T04:05:40Z</published>
    <updated>2021-04-27T04:05:40Z</updated>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/t39" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cutting-edge bioinformatics company in Australia looking for programmer with excellent Modern Perl skills, ideally with Dancer, at least some familiarity with JavaScript on the front-end, and an openness to learning new things – there’s a learning curve regarding the domain knowledge, but they’ll be happy to teach you.</div>
    </content>
    <id>https://job.perl.careers/t39</id>
    <published>2021-04-26T10:00:51Z</published>
    <updated>2021-04-26T10:00:51Z</updated>
  </entry>
  <entry>
    <title>All Aboard to Your Next Adventure! Perl Role in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/g8z" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl programmers rejoice — our client has an office in Malta, and they’re looking for you. As a financial company seeing incredible growth over the last two decades, business is booming and they’re looking to expand their team. If you’ve got an interest in dollars and cents and share their belief that online trading should be available to all, we’ve got the role for you.</div>
    </content>
    <id>https://job.perl.careers/g8z</id>
    <published>2021-04-26T10:00:50Z</published>
    <updated>2021-04-26T10:00:50Z</updated>
  </entry>
  <entry>
    <title>Smart Shopper = Smart Saver. Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/slv" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Very well-known Austrian e-commerce brand willing to consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl. Benefits include free lunch, coworkers with exceptional table football skills, and a relaxed policy to time management.</div>
    </content>
    <id>https://job.perl.careers/slv</id>
    <published>2021-04-26T10:00:49Z</published>
    <updated>2021-04-26T10:00:49Z</updated>
  </entry>
  <entry>
    <title>A New Adventure is only a Click Away. Perl Developer role in London</title>
    <link rel="alternate" href="https://job.perl.careers/iww" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/iww</id>
    <published>2021-04-26T10:00:48Z</published>
    <updated>2021-04-26T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/dba" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites, including Forbes, Wall Street Journal, CNN Business, and The Washington Post.  This dynamic team is looking for a senior Perl programmer.</div>
    </content>
    <id>https://job.perl.careers/dba</id>
    <published>2021-04-26T10:00:47Z</published>
    <updated>2021-04-26T10:00:47Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-04-26T10:00:46Z</published>
    <updated>2021-04-26T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 6, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-04-26T10:00:45Z</published>
    <updated>2021-04-26T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 12, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-04-26T10:00:44Z</published>
    <updated>2021-04-26T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 29, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-04-26T10:00:43Z</published>
    <updated>2021-04-26T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Command Line Adventures in Perl - 2021 Edition</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/</id>
    <published>2021-04-26T10:00:42Z</published>
    <updated>2021-04-26T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-04-26T10:00:41Z</published>
    <updated>2021-04-26T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Live Pair programming events </title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The list of past events with video recordings and the schedule</div>
    </content>
    <id>https://code-maven.com/live</id>
    <published>2021-04-26T10:00:40Z</published>
    <updated>2021-04-26T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Getting started with Git and GitHub</title>
    <link rel="alternate" href="https://code-maven.com/getting-started-with-git-and-github-on-windows" type="text/html"/>
    <id>https://code-maven.com/getting-started-with-git-and-github-on-windows</id>
    <published>2021-04-26T10:00:39Z</published>
    <updated>2021-04-26T10:00:39Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/04/cccxxxviii-15-great-cpan-modules.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxiv-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxxxvii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-04-26T10:00:38Z</published>
    <updated>2021-04-26T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Mejorar la libreria de GitHub::Actions en Perl con Juan J. Merelo</title>
    <link rel="alternate" href="https://es.code-maven.com/perl-github-actions" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The first time I pair-programmed in (broken) Spanish. Find further <a href="https://code-maven.com/live">events here</a>.</div>
    </content>
    <id>https://es.code-maven.com/perl-github-actions</id>
    <published>2021-04-26T10:00:37Z</published>
    <updated>2021-04-26T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Installing Elastisearch and Nginx on CentOS using Rex</title>
    <link rel="alternate" href="https://code-maven.com/elk-with-rex" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Live recording while FErki and Gabor are working on installing Elasticsearch and Nginx on CentOS.</div>
    </content>
    <id>https://code-maven.com/elk-with-rex</id>
    <published>2021-04-26T10:00:36Z</published>
    <updated>2021-04-26T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109: Chowla Squares</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_109__Chowla_Squares.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger shared two different approaches to solve the Four Squares Puzzle task. Interesting, you must check out.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_109__Chowla_Squares.html</id>
    <published>2021-04-26T10:00:35Z</published>
    <updated>2021-04-26T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109: Choowa Numbers and Sums</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/04/22/PerlWeeklyChallenge109.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca came up with compact solutions in Raku. Well done. Keep it up.</div>
    </content>
    <id>https://fluca1978.github.io/2021/04/22/PerlWeeklyChallenge109.html</id>
    <published>2021-04-26T10:00:34Z</published>
    <updated>2021-04-26T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/04/19/PWC109/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thanks for reminding us about the Permutator from the Higher Order Perl book.</div>
    </content>
    <id>https://wlmb.github.io/2021/04/19/PWC109/</id>
    <published>2021-04-26T10:00:33Z</published>
    <updated>2021-04-26T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109: Chowla Numbers and Four Square Puzzle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-109-chowla-numbers-and-four-square-puzzle.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent seems to read my mind, smart brain. He correctly guessed that the output is not part of the requirements. Thank You.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-109-chowla-numbers-and-four-square-puzzle.html</id>
    <published>2021-04-26T10:00:32Z</published>
    <updated>2021-04-26T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 109</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_109.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved how Jaldhar found the similarity between Four Squares Puzzle and Olympic Rings task. Very smart.</div>
    </content>
    <id>https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_109.html</id>
    <published>2021-04-26T10:00:31Z</published>
    <updated>2021-04-26T10:00:31Z</updated>
  </entry>
  <entry>
    <title>PWC109 - Four Squares Puzzle</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/22/pwc109-four-squares-puzzle/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio never just solves the task but also gives us more than just solution. You don't want to miss out.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/22/pwc109-four-squares-puzzle/</id>
    <published>2021-04-26T10:00:30Z</published>
    <updated>2021-04-26T10:00:30Z</updated>
  </entry>
  <entry>
    <title>PWC109 - Chowla Numbers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/21/pwc109-chowla-numbers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Very nicely organised one-line subroutines. Looks elegant and clean. Great work.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/21/pwc109-chowla-numbers/</id>
    <published>2021-04-26T10:00:29Z</published>
    <updated>2021-04-26T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Iterations and Permutations: Perl Weekly Challenge 109</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/21/iterations-and-permutations-perl-weekly-challenge-109.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the use of grep to solve the Chowla Numbers task. Great work.</div>
    </content>
    <id>https://jacoby.github.io/2021/04/21/iterations-and-permutations-perl-weekly-challenge-109.html</id>
    <published>2021-04-26T10:00:28Z</published>
    <updated>2021-04-26T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Dividing Sums into Four Squares</title>
    <link rel="alternate" href="https://colincrain.com/2021/04/25/dividing-sums-into-four-squares/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I liked how the beautiful Raku solution is presented. I wish Perl could be used to write code like this.</div>
    </content>
    <id>https://colincrain.com/2021/04/25/dividing-sums-into-four-squares/</id>
    <published>2021-04-26T10:00:27Z</published>
    <updated>2021-04-26T10:00:27Z</updated>
  </entry>
  <entry>
    <title>CY's Take on PWC#109</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/04/cys-take-on-pwc109.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok-Yin took the challenge to another level. You have to check it out yourself. Keep it up.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2021/04/cys-take-on-pwc109.html</id>
    <published>2021-04-26T10:00:26Z</published>
    <updated>2021-04-26T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109 solution</title>
    <link rel="alternate" href="https://brtastic.xyz/blog/article/perl-weekly-109" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the comparison between Perl and Python. You will definitely enjoy the discussion.</div>
    </content>
    <id>https://brtastic.xyz/blog/article/perl-weekly-109</id>
    <published>2021-04-26T10:00:25Z</published>
    <updated>2021-04-26T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Chowla Squared with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/chowla-squared.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne once again not only shares his solution but also shows the internals as well. Keep it up.</div>
    </content>
    <id>https://raku-musings.com/chowla-squared.html</id>
    <published>2021-04-26T10:00:24Z</published>
    <updated>2021-04-26T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Chowla Numbers and Numbers in Boxes: The Weekly Challenge 109</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/25" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I must thank Adam for keeping Prolog in the loop and giving us a glimpse of it.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/25</id>
    <published>2021-04-26T10:00:23Z</published>
    <updated>2021-04-26T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109: Four Squares Puzzle</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-109-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Again, there are plenty of different ways to deal with task discussed in this blog post.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-109-2.html</id>
    <published>2021-04-26T10:00:22Z</published>
    <updated>2021-04-26T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109: Chowla Numbers</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-109-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Technical aspects of the task are discussed in details. Thanks Abigail.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-109-1.html</id>
    <published>2021-04-26T10:00:21Z</published>
    <updated>2021-04-26T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 109</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-109/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Don't forget to check out the 'Specific Comments' section. Always packed with cool magic.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-109/</id>
    <published>2021-04-26T10:00:20Z</published>
    <updated>2021-04-26T10:00:20Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 109</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-109" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC dealing with the "Chowla Numbers" and "Four Squares Puzzle" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-109</id>
    <published>2021-04-26T10:00:19Z</published>
    <updated>2021-04-26T10:00:19Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 110</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome the new week with couple of fun tasks "Valid Phone Numbers" and "Transpose File". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-110</id>
    <published>2021-04-26T10:00:18Z</published>
    <updated>2021-04-26T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Digital Ocean API using Perl</title>
    <link rel="alternate" href="https://perlmaven.com/digital-ocean-api" type="text/html"/>
    <id>https://perlmaven.com/digital-ocean-api</id>
    <published>2021-04-26T10:00:17Z</published>
    <updated>2021-04-26T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Maintaining Perl 5 (Tony Cook): March 2021 Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/maintaining_perl_5_march_report" type="text/html"/>
    <id>https://news.perlfoundation.org/post/maintaining_perl_5_march_report</id>
    <published>2021-04-26T10:00:16Z</published>
    <updated>2021-04-26T10:00:16Z</updated>
  </entry>
  <entry>
    <title>March report of the Raku Development Grant of Jonathan Worthington</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/jonathan-2021-03" type="text/html"/>
    <id>https://news.perlfoundation.org/post/jonathan-2021-03</id>
    <published>2021-04-26T10:00:15Z</published>
    <updated>2021-04-26T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Community Affairs Team Transparency Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021</id>
    <published>2021-04-26T10:00:14Z</published>
    <updated>2021-04-26T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Community Affairs Team Update April 2021 </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/cat-update-19-april-2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/cat-update-19-april-2021</id>
    <published>2021-04-26T10:00:13Z</published>
    <updated>2021-04-26T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 4</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-4" type="text/html"/>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-4</id>
    <published>2021-04-26T10:00:12Z</published>
    <updated>2021-04-26T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 3</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The 3rd part of the live coding series with Mark Gardner and Gabor Szabo. We get lots of good advice both during the live event and after. If you'd like to join us next time see the <a href="https://code-maven.com/live">schedule</a>.</div>
    </content>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
    <published>2021-04-26T10:00:11Z</published>
    <updated>2021-04-26T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Perl performance on Apple M1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dimitrios_kechagias/2021/04/perl-performance-on-apple-m1.html" type="text/html"/>
    <id>http://blogs.perl.org/users/dimitrios_kechagias/2021/04/perl-performance-on-apple-m1.html</id>
    <published>2021-04-26T10:00:10Z</published>
    <updated>2021-04-26T10:00:10Z</updated>
  </entry>
  <entry>
    <title>All partitions of a set into same-sized subsets</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/25/all-partitions-equal-sets/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/25/all-partitions-equal-sets/</id>
    <published>2021-04-26T10:00:09Z</published>
    <updated>2021-04-26T10:00:09Z</updated>
  </entry>
  <entry>
    <title>An improved GUI for cme and Config::Model</title>
    <link rel="alternate" href="https://ddumont.wordpress.com/2021/04/25/an-improved-gui-for-cme-and-configmodel/" type="text/html"/>
    <id>https://ddumont.wordpress.com/2021/04/25/an-improved-gui-for-cme-and-configmodel/</id>
    <published>2021-04-26T10:00:08Z</published>
    <updated>2021-04-26T10:00:08Z</updated>
  </entry>
  <entry>
    <title>All partitions of a set - rearranging addends</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/23/all-partitions-rearranging-addends/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/23/all-partitions-rearranging-addends/</id>
    <published>2021-04-26T10:00:07Z</published>
    <updated>2021-04-26T10:00:07Z</updated>
  </entry>
  <entry>
    <title>My unrealistic wish-list for Perl 7.x</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/my-unrealistic-wish-list-for-perl-7-x-4pg9" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/my-unrealistic-wish-list-for-perl-7-x-4pg9</id>
    <published>2021-04-26T10:00:06Z</published>
    <updated>2021-04-26T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Use Immutable Objects</title>
    <link rel="alternate" href="https://dev.to/ovid/use-immutable-objects-4pbl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The little I understand the state of programming, I think there is a trend going towards more immutable objects. In Perl there are not many such objects, even constants are just functions. So it will be interesting to see how this works out. Will having immutables reduce the bugs in our code as promised by many or will it just increase the complexity?</div>
    </content>
    <id>https://dev.to/ovid/use-immutable-objects-4pbl</id>
    <published>2021-04-26T10:00:05Z</published>
    <updated>2021-04-26T10:00:05Z</updated>
  </entry>
  <entry>
    <title>All partitions of a set - preliminary considerations</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/20/all-partitions-preliminary/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/20/all-partitions-preliminary/</id>
    <published>2021-04-26T10:00:04Z</published>
    <updated>2021-04-26T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Localizing dates in a Perl web application</title>
    <link rel="alternate" href="https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-180" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It must be a lot of fun looking at text, even just dates in various languages and various character sets. And Mark did not even mention that if he wanted to use the Hebrew calendar then instead of Arabic numbers (0-9) that are used throughout the world (well except in Arabic :-), we use the Hebrew letters as numbers as well.</div>
    </content>
    <id>https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-180</id>
    <published>2021-04-26T10:00:03Z</published>
    <updated>2021-04-26T10:00:03Z</updated>
  </entry>
  <entry>
    <title>All positive integer sums, as an iterator</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/19/all-positive-integer-sums-iterator/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/19/all-positive-integer-sums-iterator/</id>
    <published>2021-04-26T10:00:02Z</published>
    <updated>2021-04-26T10:00:02Z</updated>
  </entry>
  <entry>
    <title>mySociety is looking for a Perl Developer - could it be you?</title>
    <link rel="alternate" href="https://apply.workable.com/mysociety/j/836E21DEC7/?utm_source=perlweekly&amp;utm_medium=newsletter-ad&amp;utm_campaign=developer" type="text/html"/>
    <content type="text">Pioneering not-for-profit group mySociety is hiring a &lt;a href="https://apply.workable.com/mysociety/j/836E21DEC7/?utm_source=perlweekly&amp;utm_medium=newsletter-ad&amp;utm_campaign=developer"&gt;Perl Developer&lt;/a&gt; to join their growing team and help to develop public sector services that help active citizens support flourishing communities; done simply, responsibly and cost effectively. Is it you they're looking for? Apply by 7th May 2021.</content>
    <id>https://apply.workable.com/mysociety/j/836E21DEC7/?utm_source=perlweekly&amp;utm_medium=newsletter-ad&amp;utm_campaign=developer</id>
    <published>2021-04-26T10:00:01Z</published>
    <updated>2021-04-26T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#509 - Community Affairs</title>
    <link rel="alternate" href="http://perlweekly.com/archive/509.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>The Perl Foundation has posted two reports from the CAT, the Community Affairs Team. In one of them it was discussing actions taken agains two individuals. They don't name the two people so I can only guess who they are. The links were posted to the <a href="https://www.reddit.com/r/perl/">Perl Subreddit</a> raising all kinds of claims agains it claiming that the TPF post is a personal attack on someone. Subsequently the post was removed from the Perl (Sub)Reddit.</p>
<p>It was unclear to me if the complaints against the post were made by those who were (not) mentioned in the CAT report, their devoted friends, or just by people who think that being nasty on an ongoing basis to others is an acceptable behaviour, but talking about it and condeming it is not.</p>
<p>I had a tradition of posting a link to Perl Weekly to Reddit every time it was published. I am afraid this time I won't be able to do it as this post will be considered a personal attack on some unnamed person who seems to be holy.</p>
<p>As for me, for a long time I have not felt part of some 'Perl community'. I try to serve the people who use Perl, I work with people for whom Perl is their main source of income. I like many of the people who are in and around what some might call the 'Perl community', but due to the behaviour of some individuals I also keep my distance. And frankly, I am sad.</p>
<p>Well, that's it for now</p>
<p>I hope you'll enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/509.html</id>
    <published>2021-04-26T10:00:00Z</published>
    <updated>2021-04-26T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 4</title>
  <summary type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-26T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-4"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-4</id>
  <content type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Chowla Numbers and Numbers in Boxes: The Weekly Challenge 109</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/25#pwc109" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 20 Chowla Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant CHOWLA_COUNT =&gt; 20;
sub factor{
    my($n) = @_;
    my @factors = ();
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub chowla{
    my(@factors) = @_;
    my $sum = unpack("%32I*", pack("I*", @factors)); 
}

MAIN:{
    my @chowla_numbers;
    for my $n (1 .. CHOWLA_COUNT){
        push @chowla_numbers, chowla(factor($n));
    }
    print join(", ", @chowla_numbers) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code borrowed quite a bit a previous challenge involving &lt;a href="https://adamcrussell.livejournal.com/2607.html"&gt;Perfect Numbers&lt;/a&gt;. Indeed, the code is nearly identical! After we get the factors there is only the matter of summing them and displaying them.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Place the given unique numbers in the square box so that sum of numbers in each box is the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given four squares as below with numbers named a,b,c,d,e,f,g.
# to place the given unique numbers in the square box so that sum of 
# numbers in each box is the same. 
#               (1)                    (3)
#        +--------------+      +--------------+
#        ?              ?      ?              ?
#        ?      a       ?      ?      e       ?
#        ?              ? (2)  ?              ?  (4)
#        ?          +---+------+---+      +---+---------+
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ? b ?      ? d ?      ? f ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        +----------+---+      +---+------+---+         ?
#                   ?       c      ?      ?      g      ?
#                   ?              ?      ?             ?
#                   ?              ?      ?             ?
#                   +--------------+      +-------------+
##
use AI::Prolog;

my $prolog = do{
    local $/;
    &lt;DATA&gt;;
}; 
$prolog = new AI::Prolog($prolog); 
$prolog-&gt;query("sums_in_squares([1,2,3,4,5,6,7], Squares).");

my $result;
print join("\t", "a" .. "g") . "\n";  
while ($result = $prolog-&gt;results()){
    print join("\t", @{$result-&gt;[2]}) . "\n";
}

__DATA__
member(X,[X|T]).
member(X,[H|T]):- member(X,T).
sums_in_squares(Numbers, [A, B, C, D, E, F, G]):-  
    member(A, Numbers), 
    member(B, Numbers),
    member(C, Numbers),
    member(D, Numbers),
    member(E, Numbers),
    member(F, Numbers),
    member(G, Numbers),
    A \= B, A \= C, A \= D, A \= E, A \= F, A \= G,
    B \= A, B \= C, B \= D, B \= E, B \= F, B \= G,
    C \= A, C \= B, C \= D, C \= E, C \= F, C \= G,
    D \= A, D \= B, D \= C, D \= E, D \= F, D \= G,
    E \= A, E \= B, E \= C, E \= D, E \= F, E \= G,
    F \= A, F \= B, F \= C, F \= D, F \= E, F \= G,
    G \= A, G \= B, G \= C, G \= D, G \= E, G \= F,
    Box1 is A + B,
    Box2 is B + C + D,
    Box3 is D + E + F,
    Box4 is F + G,
    Box1 == Box2,
    Box2 == Box3,
    Box3 == Box4.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
a       b       c       d       e       f       g
3       7       2       1       5       4       6
4       5       3       1       6       2       7
4       7       1       3       2       6       5
5       6       2       3       1       7       4
6       4       1       5       2       3       7
6       4       5       1       2       7       3
7       2       6       1       3       5       4
7       3       2       5       1       4       6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This sort of problem practically screams out for a Prolog solution! In the interest of keeping with the name, if not the spirit of the weekly challenge, this first part is indeed Perl, albeit using AI::Prolog, a module which offers a pure Perl implementation of a basic Prolog.&lt;/p&gt;
&lt;p&gt;I have used AI::Prolog &lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;previously&lt;/a&gt; and it’s a neat way to take advantage of Prolog within a Perl based solution. The two main downsides are that (1) it is not a full ISO Prolog and (2) it is slow. So very very slow. I suspect, in fact, there is a serious bug in the implementation. Even accounting for the fact that a pure Perl Prolog would be much slower than one written in C, such as Gnu Prolog, the execution time differences are laughably dramatic. I didn’t bother with precise metrics but the code above takes about an hour to run on fairly current hardware (i.e. my 2018 Mac Mini). Essentially the same code run on the same hardware but with Gnu Prolog completes in mere seconds.&lt;/p&gt;
&lt;p&gt;Still, this is a nice way to incorporate a bit of Symbolic AI in a Perl code base if there is a small search space. Say, for some simple game logic or a small chat bot.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/25"&gt;pure Prolog solution&lt;/a&gt; I did for this uses the same approach, in part, although I also wrote this to take advantage of Gnu Prolog’s FD solver. The FD version of the code completes in about 10ms!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/"&gt;Challenge 109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sarvadaman_Chowla"&gt;Sarvadaman D. S. Chowla&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/AI::Prolog"&gt;AI::Prolog&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc109</id>
    <published>2021-04-25T16:00:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#109</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/04/cys-take-on-pwc109.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10199</id>
    <published>2021-04-25T15:54:17Z</published>
    <updated>2021-04-25T17:11:38Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    <category term="java" label="java" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<div><a href="http://blogs.perl.org/users/c_y_fung/assets_c/2021/04/ch2_wk109-4649.html" onclick="window.open('http://blogs.perl.org/users/c_y_fung/assets_c/2021/04/ch2_wk109-4649.html','popup','width=1430,height=656,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/c_y_fung/assets_c/2021/04/ch2_wk109-thumb-300x137-4649.png" width="300" height="137" alt="ch2_wk109.png" class="mt-image-left" style="float: left; margin: 0 20px 20px 0;" /></a></div>

<h4>Task 1: Chowla Numbers</h4>
<div><tt>
<b>#!/usr/bin/perl</b><BR>
<font color="#7f7f7f"><i>#&nbsp;The&nbsp;Weekly&nbsp;Challenge&nbsp;-&nbsp;109&nbsp;</i></font><font color="#7f7f7f"><i><BR>
</i></font><font color="#7f7f7f"><i>#&nbsp;</i></font><font color="#0000ff">Task</font><font color="#7f7f7f"><i>&nbsp;1&nbsp;Chowla&nbsp;Numbers</i></font><font color="#7f7f7f"><i><BR>
</i></font><b>use</b>&nbsp;<b>strict</b>;<BR>
<b>use</b>&nbsp;<b>warnings</b>;<BR>
<b>my</b>&nbsp;<font color="#0000ff">$F</font>&nbsp;=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[0]&nbsp;||&nbsp;<font color="#00007f">20</font>;<BR>
<b>my</b>&nbsp;<font color="#0000ff">@chowla_seq</font>&nbsp;=&nbsp;(0,0,0);<BR>
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$n</font>&nbsp;(4..<font color="#0000ff">$F</font>)&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$s</font>&nbsp;=&nbsp;0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;(<font color="#00007f">2.</font>.<font color="#0000ff">$n</font>-<font color="#00007f">1</font>)&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$s</font>&nbsp;+=&nbsp;<font color="#0000ff">$k</font>&nbsp;<b>unless</b>&nbsp;<font color="#0000ff">$n</font>&nbsp;%&nbsp;<font color="#0000ff">$k</font>;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@chowla_seq</font>,&nbsp;<font color="#0000ff">$s</font>;<BR>
}<BR>
<font color="#007f00">print</font>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">,&nbsp;</font><font color="#ffa500">"</font>,&nbsp;<font color="#0000ff">@chowla_seq</font>;<BR>
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<BR>
</tt></div>

<div>Employ no special tricks here except the use of <tt>unless</tt> and (roughly speaking?)the boolean value of <tt>0</tt> is equivalent to <tt>undef</tt>, while both mean <u>false</u>.</div>

<h4>Task 2: Four Squares Puzzle</h4>

<div>There are many improvisations we can do with it. The task is "N Boxes Puzzle" on my mind.</div>

<h5>JavaFX</h5>

<div>On a very personal aspect I am learning Java. I have been thinking of trying out something with <a href="https://en.wikipedia.org/wiki/OpenJFX">JavaFX</a> for a while and this task is a chance. After some efforts, the rectangles did not overlap when I just made their height and width scaled. Finally I put additional terms on their width to force them overlapped &dash; this make the setting not so extensible facing different parameters.</div>

<div>Instead of Hash Map, an array of <tt>BitMap</tt>s is chosen for noting which points are inside a specific rectangle.</div>

<div>For the Java source codes, the most consuming part for me had been generating the permutations because almostly every variable is a reference (not quite sure the technical terms again).</div> 

<h5>Perl: Text-Interface</h5>

<div>The permutations are handled by the CPAN module <tt>Algorithm::Combinatorics</tt>. </div>

<div>My most ambitious plan was user providing the command-line graphics <i>as input</i>. This requires locating the "coordinates" of the alphabets and boxes. Okay, I did the second part programmatically, the first part... by hand.</div>

<pre>
(the graph in task statement)
              (1)                    (3)
        ╔══════════════╗      ╔══════════════╗
        ║              ║      ║              ║
        ║      a       ║      ║      e       ║
        ║              ║ (2)  ║              ║  (4)
        ║          ┌───╫──────╫───┐      ┌───╫─────────┐
        ║          │   ║      ║   │      │   ║         │
        ║          │ b ║      ║ d │      │ f ║         │
        ║          │   ║      ║   │      │   ║         │
        ║          │   ║      ║   │      │   ║         │
        ╚══════════╪═══╝      ╚═══╪══════╪═══╝         │
                   │       c      │      │      g      │
                   │              │      │             │
                   │              │      │             │
                   └──────────────┘      └─────────────┘
</pre>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">@boxes</font>&nbsp;=&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box-&gt;new(&nbsp;Point-&gt;new(<font color="#00007f">9</font>,<font color="#00007f">6</font>),&nbsp;Point-&gt;new(<font color="#00007f">24</font>,<font color="#00007f">15</font>)&nbsp;),&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box-&gt;new(&nbsp;Point-&gt;new(<font color="#00007f">20</font>,<font color="#00007f">10</font>),&nbsp;Point-&gt;new(<font color="#00007f">35</font>,<font color="#00007f">19</font>)&nbsp;),&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box-&gt;new(&nbsp;Point-&gt;new(<font color="#00007f">31</font>,<font color="#00007f">6</font>),&nbsp;Point-&gt;new(46,<font color="#00007f">15</font>)&nbsp;),&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box-&gt;new(&nbsp;Point-&gt;new(42,<font color="#00007f">10</font>),&nbsp;Point-&gt;new(<font color="#00007f">56</font>,<font color="#00007f">19</font>)&nbsp;),&nbsp;<BR>
);<BR>
<BR>
<b>my</b>&nbsp;<font color="#0000ff">@var</font>&nbsp;=&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(<font color="#00007f">16</font>,<font color="#00007f">8</font>),&nbsp;&nbsp;<font color="#7f7f7f"><i>#a</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(<font color="#00007f">22</font>,<font color="#00007f">12</font>),&nbsp;<font color="#7f7f7f"><i>#b</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(<font color="#00007f">28</font>,<font color="#00007f">16</font>),&nbsp;<font color="#7f7f7f"><i>#c</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(<font color="#00007f">33</font>,<font color="#00007f">12</font>),&nbsp;<font color="#7f7f7f"><i>#d</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(<font color="#00007f">38</font>,<font color="#00007f">8</font>),&nbsp;&nbsp;<font color="#7f7f7f"><i>#e</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(44,<font color="#00007f">12</font>),&nbsp;<font color="#7f7f7f"><i>#f</i></font><font color="#7f7f7f"><i><BR>
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;Point-&gt;new(49,<font color="#00007f">16</font>),&nbsp;<font color="#7f7f7f"><i>#g</i></font><font color="#7f7f7f"><i><BR>
</i></font>);<BR>
</tt></div>

<div> An array of (references of) arrays is chosen to determine which points are inside the boxes.</div>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">$M</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@possible_val</font>;<BR>
<b>my</b>&nbsp;<font color="#0000ff">$N</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@boxes</font>;<BR>
<BR>
<b>my</b>&nbsp;<font color="#0000ff">@container</font>;<BR>
<BR>
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i_b</font>&nbsp;(0..<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$b</font>&nbsp;=&nbsp;<font color="#0000ff">$boxes</font>[<font color="#0000ff">$i_b</font>];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$container</font>[<font color="#0000ff">$i_b</font>]&nbsp;=&nbsp;[];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$v_ind</font>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(&nbsp;&nbsp;&nbsp;<font color="#0000ff">$var</font>[<font color="#0000ff">$v_ind</font>]<font color="#ffa500">-</font>&gt;x&nbsp;&lt;&nbsp;<font color="#0000ff">$b</font>-&gt;<font color="#0000ff">br</font>-&gt;<font color="#0000ff">x</font>&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;<font color="#0000ff">$var</font>[<font color="#0000ff">$v_ind</font>]<font color="#ffa500">-</font>&gt;x&nbsp;&gt;&nbsp;<font color="#0000ff">$b</font>-&gt;<font color="#0000ff">tl</font>-&gt;<font color="#0000ff">x</font>&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;<font color="#0000ff">$var</font>[<font color="#0000ff">$v_ind</font>]<font color="#ffa500">-</font>&gt;<font color="#ffa500">y&nbsp;</font>&gt;&nbsp;<font color="#0000ff">$b</font>-&gt;<font color="#0000ff">tl</font>-&gt;<font color="#0000ff">y</font>&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;<font color="#0000ff">$var</font>[<font color="#0000ff">$v_ind</font>]<font color="#ffa500">-</font>&gt;<font color="#ffa500">y&nbsp;</font>&lt;&nbsp;<font color="#0000ff">$b</font>-&gt;<font color="#0000ff">br</font>-&gt;<font color="#0000ff">y</font>)&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$container</font>[<font color="#0000ff">$i_b</font>]},&nbsp;<font color="#0000ff">$v_ind</font>;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
</tt></div>

<pre>$ perl ch-2.pl
Number of solutions: 8
  a  b  c  d  e  f  g
  3  7  2  1  5  4  6
  4  5  3  1  6  2  7
  4  7  1  3  2  6  5
  5  6  2  3  1  7  4
  6  4  1  5  2  3  7
  6  4  5  1  2  7  3
  7  2  6  1  3  5  4
  7  3  2  5  1  4  6

<p>One of the possible solution(s):<br />
                                                        <br />
                                                        <br />
                                                        <br />
                                                        <br />
 <br />
        ****************      ****************          <br />
        *              *      *              *          <br />
        *      5       *      *      1       *          <br />
        *              *      *              *          <br />
        *          ****************      ***************<br />
        *          *   *      *   *      *   *         *<br />
        *          * 6 *      * 3 *      * 7 *         *<br />
        *          *   *      *   *      *   *         *<br />
        *          *   *      *   *      *   *         *<br />
        ****************      ****************         *<br />
                   *       2      *      *      4      *<br />
                   *              *      *             *<br />
                   *              *      *             *<br />
                   ****************      ***************<br />
</pre></p>

<div>When possible values for the alphabets are all digits, a command-line graphics output is provided. I just use stars to represent the edges, not as nice as the box-drawing characters in the problem statement.</div>

<p><br />
<div>Note that duplicate values as input parameters are not properly handled in my solutions.</div></p>

<p>Stay alert and healthy! □</p>

<div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/newt/challenge-109/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/newt/challenge-109/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt></i>,
<a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/newt/challenge-109/cheok-yin-fung/java">Java Source Codes for Task 2</a></i></div>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 109: Chowla Numbers and Four Square Puzzle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-109-chowla-numbers-and-four-square-puzzle.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10194</id>
    <published>2021-04-22T03:41:08Z</published>
    <updated>2021-04-25T02:11:43Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 109 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (April 25, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Chowla Numbers</h2>

<p><em>Write a script to generate first 20 Chowla Numbers, named after, Sarvadaman D. S. Chowla, a London born Indian American mathematician. It is defined as:</em></p>

<pre><code>C(n) = sum of divisors of n except 1 and n
</code></pre>

<p><em>Output:</em></p>

<pre><code>0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
</code></pre>

<p>Originally, the task requested us to generate the first 37 Chowla numbers and I wrote implementations in 12 different languages based on that requirement. This requirement has now been amended to the first 20 Chowla numbers. I&#8217;ll fix the program and output for some implementations, but will leave some as they were developed.</p>

<h3>Chowla Numbers in Raku</h3>

<p>For each number <code>$n</code> between 1 and 20, we print 0 if the number is less than 2 or if it is prime. Otherwise, we look for divisors of that number between 2 and <code>$n / 2</code> (thereby excluding 1 and the number <code>$n</code> itself) and compute the sum of the divisors.</p>

<pre><code>use v6;

sub chowla (Int $n) {
    return 0 if $n &lt; 2 or $n.is-prime;
    return (2..$n div 2).grep({$n %% $_}).sum;
}
say "$_\t", chowla $_ for 1..20;
</code></pre>

<p>Note that for the first implementation of this task, I decided to print the source number and the Chowla number over two columns to make result checking easier. All other implementations will be printed over a single line for brevity. So this is our output over two columns:</p>

<pre><code>$ raku ./chowla.raku
1   0
2   0
3   0
4   2
5   0
6   5
7   0
8   6
9   3
10  7
11  0
12  15
13  0
14  9
15  8
16  14
17  0
18  20
19  0
20  21
</code></pre>

<h3>Chowla Numbers in Perl</h3>

<p>Perl doesn&#8217;t have a built-in <code>sum</code> method as Raku, so I&#8217;ll compute the sums by hand (I know that there are modules doing that, but, as I have pointed out many times already, I do not want to use external libraries as I consider this would go against the true spirit of a coding challenge).</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub chowla {
    my $n = shift;
    return 0 if $n &lt;= 2;
    my @divisors = grep {$n % $_== 0} 2..($n / 2);
    my $sum = 0;
    $sum += $_ for @divisors;
    return $sum;
}
say join ", ", map { chowla $_} 1..20;
</code></pre>

<p>This displays the following output.</p>

<pre><code>$ perl chowla.pl
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
</code></pre>

<h3>Chowla Numbers in Other Languages</h3>

<p>Note that I don&#8217;t consider the example output provided with the task description to be part of the requirement. In some cases, I&#8217;ll output the values separated by commas, in others simply by a space. And since I do not want to test again all the programs below (for some, I would have to go on another computer), I&#8217;ll stick to the original requirement of the first 37 Chowla numbers for some of the programs below.</p>

<h4>Chowla Numbers in Scala</h4>

<p>Rather than storing the divisors in an array as I did in Perl, I just accumulate them into a <code>sum</code> variable. Note that in Scala, to get all integers between 1 and 20, you need to use <code>1 until 21</code>, since the upper bound is not included in the range.</p>

<pre><code>object chowla extends App {
  def chowla(n: Int): Int = {
    if (n &lt;= 2) return 0
    var sum = 0;
    for (i &lt;- 2 until n/2 + 1) {
      if (n % i == 0) sum += i
    }
    return sum
  }
  println((1 until 21).map(chowla(_)).mkString(", "))
}
</code></pre>

<p>Output:</p>

<pre><code>0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
</code></pre>

<h4>Chowla Numbers in C</h4>

<pre><code>#include &lt;stdio.h&gt;

int chowla(int n) {
    int sum = 0;
    for (int i = 2; i &lt;= n/2; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return sum;
}

int main() {
    for (int n = 1; n &lt;= 37; n++) {
        printf("%i ", chowla(n));
    }
    printf("\n");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h4>Chowla Numbers in Python</h4>

<p>Here again (as in Scala), to get all integers between 1 and 20, you need to use <code>range(1, 21)</code>, since the upper bound is not included in the range. </p>

<pre><code>def chowla(n):
    sum = 0
    for i in range(2, int(n/2) +1):
        if n % i == 0:
            sum += i
    return sum

chowla_nums = []
for m in range (1, 21):
    chowla_nums.append (chowla(m))
print(chowla_nums)
</code></pre>

<p>Output:</p>

<pre><code>[0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21]
</code></pre>

<h4>Chowla Numbers in Awk</h4>

<p>Very straight forward. Here, we are printing the 20th Chowla number separately to print a new line and avoid terminating the line with a comma.</p>

<pre><code>function chowla(num) {
    sum = 0
    for (i = 2; i &lt;= n/2; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return sum;  
}

BEGIN {
    for (n = 1; n &lt;= 19; n++) {
        printf("%i, ", chowla(n));
    }
    printf("%i\n", chowla(20));
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f chowla.awk
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
</code></pre>

<h4>Chowla in Julia</h4>

<p>An interesting feature of Julia is that you can use Unicode letters in identifiers for variables or functions. Here we use capital Greek letter <code>∑</code> for our sum variable:</p>

<pre><code>function chowla(n)
    ∑ = 0
    for i = 2:(trunc(Int, n/2))
        if (n % i == 0) ∑ += i end
    end 
    return ∑

end
for n = 1:37 print(chowla(n), " ") end
</code></pre>

<p>Output:</p>

<pre><code>0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h4>Chowla in Rust</h4>

<pre><code>fn chowla(n : i32) -&gt; i32 {
    let mut sum = 0;
    for i in 2..=n/2 {
        if n % i == 0 {
            sum += i
        }
    }
    return sum
}
fn main() {
    for n in 1..20 {
        print!("{}, ", chowla(n));
    }
    println!("{} ", chowla(20));
}
</code></pre>

<p>Output:</p>

<pre><code>0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
</code></pre>

<h4>Chowla in Go</h4>

<pre><code>package main

import "fmt"
func chowla(n int) int {
    var sum int = 0
    for i := 2; i &lt;= n/2; i++ {
        if (n % i == 0) {
            sum += i;
        }
    }
    return sum;
}       
func main() {
    const MAX int = 37
    for i := 1; i &lt;= MAX; i++ {
        fmt.Print(chowla(i), " ")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h4>Chowla in Pascal</h4>

<pre><code>program chowla;
const
    max = 37;

var
    j, res : integer;

function chowla(n: integer): integer;
var
    i, sum, rounded_half: integer;
begin
    sum := 0;
    rounded_half := round(n/2);
    for i := 2 to rounded_half do
    begin 
        if (n mod i = 0) then
            sum := sum + i
    end;
    chowla := sum;
end;

begin
    for j := 1 to max do
    begin
        write(chowla(j), ' ');
    end;
    writeln(' ');
end.
</code></pre>

<p>Output:</p>

<pre><code>0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h4>Chowla in D</h4>

<pre><code>import std.stdio;

int chowla(int n) {
    int sum = 0;
    for (int i = 2; i &lt;= n-1; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return sum;
}
void main() {
    for (int n = 1; n &lt;= 37; n++) {
        writef("%d ", chowla(n));
    }
    writeln("");
}
</code></pre>

<p>Output:</p>

<pre><code>0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h4>Chowla in Ruby</h4>

<pre><code>def chowla (n)
    sum = 0
    for i in 2..n/2
        if n % i == 0
            sum += i
        end
    end
    return sum;
end

max = 37
results = []
for n in 1..max 
    results[n-1] = chowla(n)
end
puts "The #{max} first Chowla numbers are:  #{results.join(" ")}"
</code></pre>

<p>Output:</p>

<pre><code>The 37 first Chowla numbers are:  0 0 0 2 0 5 0 6 3 7 0 15 0 9 8 14 0 20 0 21 10 13 0 35 5 15 12 27 0 41 0 30 14 19 12 54 0
</code></pre>

<h2>Task 2: Four Squares Puzzle</h2>

<p><em>You are given four squares as below with numbers named a,b,c,d,e,f,g.</em></p>

<pre><code>          (1)                    (3)
    ╔══════════════╗      ╔══════════════╗
    ║              ║      ║              ║
    ║      a       ║      ║      e       ║
    ║              ║ (2)  ║              ║  (4)
    ║          ┌───╫──────╫───┐      ┌───╫─────────┐
    ║          │   ║      ║   │      │   ║         │
    ║          │ b ║      ║ d │      │ f ║         │
    ║          │   ║      ║   │      │   ║         │
    ║          │   ║      ║   │      │   ║         │
    ╚══════════╪═══╝      ╚═══╪══════╪═══╝         │
               │       c      │      │      g      │
               │              │      │             │
               │              │      │             │
               └──────────────┘      └─────────────┘
</code></pre>

<p><em>Write a script to place the given unique numbers in the square box so that sum of numbers in each box is the same.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: 1,2,3,4,5,6,7

Output:

    a = 6
    b = 4
    c = 1
    d = 5
    e = 2
    f = 3
    g = 7

    Box 1: a + b = 6 + 4 = 10
    Box 2: b + c + d = 4 + 1 + 5 = 10
    Box 3: d + e + f = 5 + 2 + 3 = 10
    Box 4: f + g = 3 + 7 = 10
</code></pre>

<p>The example in the task description provides only one solution to the puzzle, but there may be several solutions (most solutions will have a symmetrical one, because of the symmetry of the figure with the squares). In my original implementation in Raku, I stopped the algorithm as soon as one solution was found, but I then changed my mind and decided to list all solutions.</p>

<p>If I were solving the puzzle by hand, I would first notice that, since all squares have the same sum, then, the sum <code>a + 2b + c + 2d + e + 2f + g</code> must be a multiple of 4. Since the sum of the input numbers in the example is 28, we can try to see how, when adding three of the input numbers, we can get to a multiple of 4. The possible total sums are therefore 36, 40 and 44, so that the individual square sums are 9, 10 or 11. We can then add equations to the story: for example, we must have <code>a = c + d</code>, <code>b + c = e + f</code>, and <code>g = e + d</code>. We also have <code>a + b = b + c + c = d + e + f = f + g</code>. And so on. From there, we can use substitutions and eliminations in these equations and eventually get to a fairly limited number of possibilities that we can then explore one by one. In other words, we are still likely to have to conduct some form of exhaustive search in the final phase.</p>

<p>This is one case where you probably don&#8217;t want to let your computer do it the same way a human being would do it. Since we probably need an exhaustive search in the end, let&#8217;s do everything with an exhaustive search, i.e. a brute force approach. After all, computers are much better than us, humans, at doing that. So, basically, we will examine all permutations of the seven input integers. There are <code>7! = 5040</code> such permutations, really no big deal for a computer. Some of the programs below run in less than 0.1 seconds. I had some performance optimizations in mind (like eliminating early entire sub-trees of permutations that could not lead to solutions), but it turns out that it isn&#8217;t even necessary.</p>

<h3>Four Squares Puzzle in Raku</h3>

<p>As explained above, we just use the built-in <code>permutations</code> method and test all permutations of the input numbers</p>

<pre><code>use v6;

sub check-squares (@in) {
    my $flag = False;
    for @in.permutations -&gt; @perm {
        my $sum1 = [+] @perm[0, 1];
        next if $sum1 != [+] @perm[1..3] or 
            $sum1 != [+] @perm[3..5] or
            $sum1 != [+] @perm[5, 6];
        say @perm and $flag = True
    }
    return $flag;
}
say "No solution" unless check-squares(1..7)
</code></pre>

<p>This leads to 8 solutions:</p>

<pre><code>$ raku ./four-squares.raku
(3 7 2 1 5 4 6)
(4 5 3 1 6 2 7)
(4 7 1 3 2 6 5)
(5 6 2 3 1 7 4)
(6 4 1 5 2 3 7)
(6 4 5 1 2 7 3)
(7 2 6 1 3 5 4)
(7 3 2 5 1 4 6)
</code></pre>

<p>Each solution is the symmetry of another one (for example <code>(3 7 2 1 5 4 6)</code> is the symmetry of <code>(6 4 5 1 2 7 3)</code>), which reflects the symmetry of the figure with the four squares. Also notice that the individual square sums are 9, 10 and 11, which confirms the original manual analysis of the problem made above.</p>

<p>Note that we can make the <code>check-squares</code> subroutine slightly more concise and perhaps a bit simpler using chained numeric equality operators:</p>

<pre><code>use v6;

sub check-squares (@in) {
    my $flag = False;
    for @in.permutations -&gt; @p {
        say @p and $flag = True if 
            @p[0,1].sum == @p[1..3].sum ==
            @p[3..5].sum == @p[5, 6].sum;
    }
    return $flag;
}
say "No solution" unless check-squares(1..7)
</code></pre>

<p>This amended version displays the same output.</p>

<h3>Four Squares Puzzle in Raku</h3>

<p>Perl doesn&#8217;t have a built-in <code>permutations</code> subroutine. There are some CPAN modules, such as <code>ntheory</code> or <code>Algorithm::Permute</code>, providing a permutation functionality, but I explained above why I eschew using external libraries for a coding challenge. So, I&#8217;ll write my own little recursive <code>permute</code> subroutine:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub add {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}
sub check_squares {
    my @in = @{$_[0]};
    my $sum = add @in[0, 1];
    return ($sum == add @in[1..3] and
            $sum == add @in[3..5] and
            $sum == add @in[5, 6] );
}
sub permute {
    my ($perm_ref, $inref) = @_;
    my @in = @$inref;
    if (scalar @in == 0) {
        say "@$perm_ref" if check_squares $perm_ref;
        return;
    }
    permute([@$perm_ref, $in[$_]], [ @in[0..$_-1, $_+1..$#in] ]) for 0..$#in;
}
my @input = 1..7;
permute [], \@input;
</code></pre>

<p>And we obtain the same output:</p>

<pre><code>$ perl four-squares.pl
3 7 2 1 5 4 6
4 5 3 1 6 2 7
4 7 1 3 2 6 5
5 6 2 3 1 7 4
6 4 1 5 2 3 7
6 4 5 1 2 7 3
7 2 6 1 3 5 4
7 3 2 5 1 4 6
</code></pre>

<h3>Four Squares Puzzle in Other Programming Languages</h3>

<p>In some languages, we&#8217;ll use a built-in permutation routine, in others, we will roll out our own, either recursive or iterative, permutation function.</p>

<h4>Four Squares in Scala</h4>

<p>Scala has a built-in <code>permutation</code> method. So we generate all permutations and print out those satisfying the requirement:</p>

<pre><code>object fourSquares extends App {
  val in = (1 to 7).toList
  for (perm &lt;- in.permutations) {
    val sum = perm.slice(0, 2).sum;
        // In Scala, slice(0, 2) returns items 0 and 1
    if (
      perm.slice(1, 4).sum == sum &amp;&amp;
      perm.slice(3, 6).sum == sum &amp;&amp;
      perm.slice(5, 7).sum == sum
    ) {
      println(perm.mkString(" "))
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>3 7 2 1 5 4 6
4 5 3 1 6 2 7
4 7 1 3 2 6 5
5 6 2 3 1 7 4
6 4 1 5 2 3 7
6 4 5 1 2 7 3
7 2 6 1 3 5 4
7 3 2 5 1 4 6
</code></pre>

<h4>Four Squares in Python</h4>

<p>We use the <code>permutations</code> method provided by <code>itertools</code> core library. Our Python implementation can use chained equality operators, similarly to our second Raku implementation:</p>

<pre><code>import itertools

input = range(1, 8)  # 1 to 7
for p in itertools.permutations(input):
    if sum(p[0:2]) == sum(p[1:4]) == sum(p[3:6]) == sum(p[5:7]):
        print (perm)
</code></pre>

<p>Output:</p>

<pre><code>(3, 7, 2, 1, 5, 4, 6)
(4, 5, 3, 1, 6, 2, 7)
(4, 7, 1, 3, 2, 6, 5)
(5, 6, 2, 3, 1, 7, 4)
(6, 4, 1, 5, 2, 3, 7)
(6, 4, 5, 1, 2, 7, 3)
(7, 2, 6, 1, 3, 5, 4)
(7, 3, 2, 5, 1, 4, 6)
</code></pre>

<h4>Four Squares in Julia</h4>

<p>Julia has the <code>Combinatorics</code> external library that provides a <code>permutations</code> function, but, as mentioned above, I tend to avoid using external libraries for a coding challenge. So we will roll out our own <code>permute</code> function, based on this <a href="https://en.wikipedia.org/wiki/Heap%27s_algorithm">Wikipedia Page on Heap&#8217;s algorithm</a>. Note that the algorithm described on Wikipedia is for zero-based array indices, I had to change the details significantly for Julia&#8217;s one-based array indices.</p>

<pre><code>function check_squares(p)
    ∑ = p[1] + p[2]
    return (p[2] + p[3] + p[4] == ∑ &amp;&amp;
        p[4] + p[5] + p[6] == ∑ &amp;&amp;
        p[6] + p[7] == ∑)
end

function permute(k, in)  # Heap's algorithm
    if (k == 1)
        if (check_squares(in)) println(in) end
        # println(in)
    else
        permute(k - 1, in)
        for i = 1:(k-1)
            if (k % 2 == 0)
                in[i], in[k] = in[k], in[i]
            else
                in[1], in[k] = in[k], in[1]
            end
            permute(k - 1, in)
        end
    end
end

permute(7, [1, 2, 3, 4, 5, 6, 7])
</code></pre>

<p>Output:</p>

<pre><code>$ julia four_squares.jl
[4, 5, 3, 1, 6, 2, 7]
[6, 4, 1, 5, 2, 3, 7]
[7, 2, 6, 1, 3, 5, 4]
[5, 6, 2, 3, 1, 7, 4]
[6, 4, 5, 1, 2, 7, 3]
[4, 7, 1, 3, 2, 6, 5]
[7, 3, 2, 5, 1, 4, 6]
[3, 7, 2, 1, 5, 4, 6]
</code></pre>

<h4>Four Squares in C</h4>

<p>C language is relatively low-level and, as you can imagine, doesn&#8217;t have a built-in permutation function. So it will be rolled out in the <code>main</code> function.</p>

<pre><code>#include &lt;stdio.h&gt;

int check_squares (int p[]) {
    int sum = p[0] + p[1];
    return ( p[1] + p[2] + p[3] == sum &amp;&amp;
        p[3] + p[4] + p[5] == sum &amp;&amp;
        p[5] + p[6] == sum);
}

void swap (int a[], int m, int n) {
    int temp = a[m];
    a[m] = a[n];
    a[n] = temp;
}

int main() {
    int in[7] = {7, 6, 5, 4, 3, 2, 1}; # values must be in descending order
    int i, j;
    int fact = 5040;        //factorial 7
    while (fact--) {
        if (check_squares(in)) {
            for (int i = 0; i &lt; 6; i++) printf("%d ", in[i]);
            printf("%d\n", in[6]);
        }
        i = 1;
        while (in[i] &gt; in[i-1]) i++;
        j = 0;
        while (in[j] &lt; in[i]) j++;
        swap(in, i, j);
        i--;
        for (j = 0; j &lt; i; i--, j++) swap(in, i, j);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>6 4 5 1 2 7 3                                                                                                           
7 2 6 1 3 5 4                                                                                                           
5 6 2 3 1 7 4                                                                                                           
4 7 1 3 2 6 5                                                                                                           
7 3 2 5 1 4 6                                                                                                           
3 7 2 1 5 4 6                                                                                                           
4 5 3 1 6 2 7                                                                                                           
6 4 1 5 2 3 7
</code></pre>

<h4>Four Squares in Lua</h4>

<p>Lua doesn&#8217;t have a built-in permutation function (AFAIK), so we will roll out our own recursive <code>permute</code> function:</p>

<pre><code>local function check_square (p)
    sum = p[1] + p[2]
    return p[2] + p[3] + p[4] == sum and 
        p[4] + p[5] + p[6] == sum and
        p[6] + p[7] == sum
end  

local function permute(perm, n)
    if n == 0  and check_square(perm) then
        print( table.concat(perm, ' ') ) 
    else
        for i = 1, n do
            perm[i], perm[n] = perm[n], perm[i]
            permute(perm, n - 1)
            perm[i], perm[n] = perm[n], perm[i]
        end
    end
end

permute({1,2,3,4,5,6,7}, 7)
</code></pre>

<p>Output:</p>

<pre><code>6 4 5 1 2 7 3
5 6 2 3 1 7 4
7 2 6 1 3 5 4
4 7 1 3 2 6 5
7 3 2 5 1 4 6
3 7 2 1 5 4 6
4 5 3 1 6 2 7
6 4 1 5 2 3 7
</code></pre>

<h4>Four Squares in D</h4>

<p>The D programming language has a couple of permutation methods in its <code>std.algorithm</code> core library. We will use <code>nextPermutation</code>, which acts as an iterator:</p>

<pre><code>bool check_squares (int [] p) {
    int sum = p[0] + p[1];
    return ( p[1] + p[2] + p[3] == sum &amp;&amp;
        p[3] + p[4] + p[5] == sum &amp;&amp;
        p[5] + p[6] == sum);
}

void main() {
    import std.stdio, std.algorithm;
    auto items = [1, 2, 3, 4, 5, 6, 7];
    do
        if (check_squares(items)) items.writeln;
    while (items.nextPermutation);
}
</code></pre>

<p>Output:</p>

<pre><code>[3, 7, 2, 1, 5, 4, 6]
[4, 5, 3, 1, 6, 2, 7]
[4, 7, 1, 3, 2, 6, 5]
[5, 6, 2, 3, 1, 7, 4]
[6, 4, 1, 5, 2, 3, 7]
[6, 4, 5, 1, 2, 7, 3]
[7, 2, 6, 1, 3, 5, 4]
[7, 3, 2, 5, 1, 4, 6]
</code></pre>

<h4>Four Squares in Nim</h4>

<p>Remember that Nim supports indentation-based syntax like Python, except that it is possible to break a line after a binary operator (after the <code>and</code> in the code below). We use the <code>nextPermutation</code> method of the core <code>algorithm</code> library, which also acts as an iterator. </p>

<pre><code>import algorithm

proc check_squares (p: array[0..6, int]) : bool =
    var sum = p[0] + p[1] 
    return ( p[1] + p[2] + p[3] == sum and 
      p[3] + p[4] + p[5] == sum and p[5] + p[6] == sum )


var input = [1, 2, 3, 4, 5, 6, 7] # List has to start sorted
while input.nextPermutation():
  if check_squares(input):
    echo input
</code></pre>

<p>Output:</p>

<pre><code>[3, 7, 2, 1, 5, 4, 6]
[4, 5, 3, 1, 6, 2, 7]
[4, 7, 1, 3, 2, 6, 5]
[5, 6, 2, 3, 1, 7, 4]
[6, 4, 1, 5, 2, 3, 7]
[6, 4, 5, 1, 2, 7, 3]
[7, 2, 6, 1, 3, 5, 4]
[7, 3, 2, 5, 1, 4, 6]
</code></pre>

<h4>Four Squares in Ruby</h4>

<p>We use the built-in <code>permutation</code> method of Ruby and print out the permutations matching the requirements:</p>

<pre><code>input = [1, 2, 3, 4, 5, 6, 7]
for p in input.permutation 
    sum = p[0] + p[1]
    if p[1] + p[2] + p[3] == sum and 
       p[3] + p[4] + p[5] == sum and    
       p[5] + p[6] == sum then
        puts p.join(" ")
    end
end
</code></pre>

<p>Output:</p>

<pre><code>3 7 2 1 5 4 6
4 5 3 1 6 2 7
4 7 1 3 2 6 5
5 6 2 3 1 7 4
6 4 1 5 2 3 7
6 4 5 1 2 7 3
7 2 6 1 3 5 4
7 3 2 5 1 4 6
</code></pre>

<h4>Four Squares in Kotlin</h4>

<p>I did not write the <code>permute</code> function used in the program below, but found it on the Internet.</p>

<pre><code>fun &lt;T&gt; permute(input: List&lt;T&gt;): List&lt;List&lt;T&gt;&gt; {
    if (input.size == 1) return listOf(input)
    val perms = mutableListOf&lt;List&lt;T&gt;&gt;()
    val toInsert = input[0]
    for (perm in permute(input.drop(1))) {
        for (i in 0..perm.size) {
            val newPerm = perm.toMutableList()
            newPerm.add(i, toInsert)
            perms.add(newPerm)
        }
    }
    return perms
}

fun check_squares(p: List&lt;Int&gt;): Boolean  {
    val sum = p[0] + p[1] 
    return ( p[1] + p[2] + p[3] == sum &amp;&amp;
             p[3] + p[4] + p[5] == sum &amp;&amp;
             p[5] + p[6] == sum )
}

fun main(args: Array&lt;String&gt;) {
    val input = listOf(1, 2, 3, 4, 5, 6, 7)
    val perms = permute(input)
    for (perm in perms) {
        if (check_squares(perm)) println(perm)
    }
}
</code></pre>

<p>Output:</p>

<pre><code>[4, 5, 3, 1, 6, 2, 7]
[5, 6, 2, 3, 1, 7, 4]
[6, 4, 1, 5, 2, 3, 7]
[6, 4, 5, 1, 2, 7, 3]
[3, 7, 2, 1, 5, 4, 6]
[7, 3, 2, 5, 1, 4, 6]
[4, 7, 1, 3, 2, 6, 5]
[7, 2, 6, 1, 3, 5, 4]
</code></pre>

<h4>Four Squares in Go</h4>

<pre><code>package main

import "fmt"

func check_squares ( p[] int) bool {
    var sum = p[0] + p[1]
    return ( p[1] + p[2] + p[3] == sum &amp;&amp;
        p[3] + p[4] + p[5] == sum &amp;&amp;
        p[5] + p[6] == sum)
}

func main() {
    var in = []int{1, 2, 3, 4, 5, 6, 7}
    var max = len(in) - 1
    var i, j int
    for c := 1; c &lt; 5040; c++ { // 7! = 5040
        i = max - 1
        j = max
        for in[i] &gt; in[i+1] {
            i--
        }
        for in[j] &lt; in[i] {
            j--
        }
        in[i], in[j] = in[j], in[i]
        j = max
        i += 1
        for i &lt; j {
            in[i], in[j] = in[j], in[i]
            i++
            j--
        }
        if check_squares(in) {
            fmt.Println(in)
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>[3 7 2 1 5 4 6]
[4 5 3 1 6 2 7]
[4 7 1 3 2 6 5]
[5 6 2 3 1 7 4]
[6 4 1 5 2 3 7]
[6 4 5 1 2 7 3]
[7 2 6 1 3 5 4]
[7 3 2 5 1 4 6]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 2, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8022544487213407871</id>
    <published>2021-04-24T21:15:00.000+02:00</published>
    <updated>2021-04-24T21:15:23.925+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxviii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301002&lt;/strong&gt; on 2021-04-18&lt;/li&gt;  &lt;li&gt;Votes: 124&lt;/li&gt;  &lt;li&gt;Previous version: 0.301001 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.21 was 3 years, 4 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9721' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9721&lt;/strong&gt; on 2021-04-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9720 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/JavaScript-V8-0.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JavaScript::V8&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the V8 JavaScript engine &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.10&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.09 was 2 years, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/List-AllUtils-0.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;List::AllUtils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Combines List::Util, List::SomeUtils and List::UtilsBy in one bite-sized package &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.19&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.18 was 7 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210420&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210320 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/Module-ScanDeps-1.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::ScanDeps&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Recursively scan Perl code for dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.31&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.30 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJATRIA/Mojolicious-Plugin-Authentication-1.36' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Authentication&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A plugin to make authentication a bit easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.36&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.33 was 3 years before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.039' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.039&lt;/strong&gt; on 2021-04-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.037 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.78' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2021-04-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.76 was 4 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Perl-MinimumVersion-1.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::MinimumVersion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Find a minimum required version of perl for Perl code &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.40&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 6 years, 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.017' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.017&lt;/strong&gt; on 2021-04-17&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 4.015 was 4 years, 6 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.61&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.60 was 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0946' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0946&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0942 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MANWAR/SVG-2.86' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SVG&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for generating Scalable Vector Graphics (SVG) documents. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.86&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.85 was 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8022544487213407871/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxviii-15-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8022544487213407871"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8022544487213407871"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxviii-15-great-cpan-modules.html" title="(cccxxxviii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5587204421157334982</id>
    <published>2021-04-24T21:11:00.005+02:00</published>
    <updated>2021-04-24T21:11:42.970+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxiv) metacpan weekly report - App::perlimports </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/App::perlimports"&gt;App::perlimports&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/24 19:10:30 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Monitor::CPU" target="_blank"&gt;AnyEvent::Monitor::CPU&lt;/a&gt; - monitors your process CPU usage, with high/low watermark triggers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Atomic::Pipe" target="_blank"&gt;Atomic::Pipe&lt;/a&gt; - Send atomic messages from multiple writers across a POSIX pipe.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; - Common Gateway Interface, with no frills&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CodeGen::Protection" target="_blank"&gt;CodeGen::Protection&lt;/a&gt; - Safely rewrite parts of generated code&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Version" target="_blank"&gt;Function::Version&lt;/a&gt; - Define and use different function versions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Slice" target="_blank"&gt;IO::Slice&lt;/a&gt; - restrict reads to a range in a file&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; - async microservice framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Application" target="_blank"&gt;Proc::Application&lt;/a&gt; - interface scoreboard class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Versions" target="_blank"&gt;Sub::Versions&lt;/a&gt; - Subroutine versioning syntactic sugar&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; - Validation Library&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::XML::DocBook::Builder" target="_blank"&gt;App::XML::DocBook::Builder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Assert::More" target="_blank"&gt;Carp::Assert::More&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Encode" target="_blank"&gt;Deep::Encode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::Starter" target="_blank"&gt;Dist::Zilla::PluginBundle::Starter&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/grpc::xs" target="_blank"&gt;grpc::xs&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Merge" target="_blank"&gt;Hash::Merge&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Untemplate" target="_blank"&gt;HTML::Untemplate&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::APT" target="_blank"&gt;Linux::APT&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=83)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::mysql" target="_blank"&gt;Mojo::mysql&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mom" target="_blank"&gt;Mom&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::autoclean::0.30" target="_blank"&gt;namespace::autoclean::0.30&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/NativeCall" target="_blank"&gt;NativeCall&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parser::MGC" target="_blank"&gt;Parser::MGC&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=373)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::CPUUsage" target="_blank"&gt;Proc::CPUUsage&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RapidApp" target="_blank"&gt;RapidApp&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/self" target="_blank"&gt;self&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Descriptive" target="_blank"&gt;Statistics::Descriptive&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SVG" target="_blank"&gt;SVG&lt;/a&gt; (+2=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::NoLeaks" target="_blank"&gt;Test::NoLeaks&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::LTSV" target="_blank"&gt;Text::LTSV&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5587204421157334982/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5587204421157334982"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5587204421157334982"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiv-metacpan-weekly-report.html" title="(cdlxiv) metacpan weekly report - App::perlimports "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl performance on Apple M1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dimitrios_kechagias/2021/04/perl-performance-on-apple-m1.html"/>
    <id>tag:blogs.perl.org,2021:/users/dimitrios_kechagias//3414.10188</id>
    <published>2021-04-20T03:48:27Z</published>
    <updated>2021-04-20T13:30:55Z</updated>
    <author>
        <name>Dimitrios Kechagias</name>
        <uri>http://astro.ecuadors.net</uri>
    </author>
    <category term="applem1" label="Apple M1" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="macos" label="MacOS" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dimitrios_kechagias/">
        <![CDATA[<p><span style="font-size: 1em;">I recently got an <b>Apple M1 Mac Mini</b>, half out of curiosity, half because it was exactly what I would need: I have a low end Mac just to try out things like new Xcode betas etc, like a "canary" machine. My old 2012 Mac Mini stopped getting official Apple updates, so it could no longer do what I needed and the 8GB RAM, 256GB SSD M1 mini at $699 is easily the cheapest Mac you can buy.</span><br />
Overall, unlike the typical Mac Minis of old which seemed to be on the slow side, it did feel quite fast from the start, so I thought I'd run some benchmarks on it for fun to see how Apple's ARM M1 fares against some x86 competition. And, as in my day job I use mostly Perl, I thought some perl-related benchmarks would be of interest to me.</p>

<p>For those not aware, the <b>M1</b> is an ARM-based CPU (well, includes GPU, so SoC really), with 8 cores total (4x performance @ 3.2GHz/12MB L3, 4x efficiency @ 2GHz/4MB L3) built at 5nm and consuming up to 15W. Basically the "laptop" class CPU of what Apple has been building for iPhones/iPads. Apart from native ARM code, it can run x86 code through <a href="https://en.wikipedia.org/wiki/Rosetta_(software)#Rosetta_2">Rosetta 2</a>, but I still can't use it for work - our dev environment currently relies on VirtualBox which needs actual x86/VT-x silicon. I ran benchmarks against my work laptop, a Mid 2015 15" MacBook Pro with a <b>2.5GHz i7</b> Crystalwell. Even though it was Apple's top of the line at the time, it's a bit old now, I keep it for the non-butterfly keyboard and the full complement of ports, and until recently the newer Macs weren't much faster anyway. Although an older i7 will make it easier for the M1 to compete, I still find the comparison quite interesting, especially since the Mac Mini has always been the "slow/cheap" Mac - and it's now even cheaper. Plus I'll throw some tests with different hardware just for comparison.</p>

<p><big><strong>The Benchmarks</strong></big></p>

I will definitely not claim the benchmarks I ran are truly representative of real world performance, especially when I am of the opinion you should benchmark your own code - what you personally would run. But, I also added some typical things most perl users might do and some things that came up when looking for Perl "benchmarks", so that anybody can try them and get an idea of the relative performance of their own machine.<br /><div><br /><ul>
	<li><b>Building perl 5.32.1</b></li>
</ul>

It's nice that Apple finally updated the MacOS system Perl. <strong>BigSur</strong> now comes with <strong>v5.28.2</strong> (threaded) by default, after being stuck at v5.18 for many years. However, I rarely rely on system Perl, so the first thing to do which is sort of a benchmark in itself, would be to get perlbrew and run:
<pre>perlbrew install perl-5.32.1</pre>

<ul><li><b>Moose 2.2015</b></li>
</ul><div>The Moose test suite is, like the object system itself, a relatively slow affair. I'll time the default cpan installation which builds and runs the test-suite single-threaded:<br /><br /></div><div><pre style="font-size: 13px;">cpan Moose</pre>
Then, I can try the test suite after preloading Moose with yath at 1, 4, 6 threads. In the last case, the M1 will have to use its efficiency cores, while the i7 will use HT:
<pre style="font-size: 13px;">yath -PMoose
yath -PMoose -j4
yath -PMoose -j6</pre>

<ul>
	<li><b>prime.pl</b></li>
</ul>

I modified a bit the <a href="https://github.com/famzah/langs-performance/blob/master/primes.pl">primes.pl script from here</a> to:

<pre><code>
use strict;
use warnings;

use Time::HiRes 'time';
my $time = time();

my $n = $ARGV[0] || 100000000;
my @s = ();
for (my $i = 3; $i &lt; $n + 1; $i += 2) {
    push(@s, $i);
}
my $mroot = $n**0.5;
my $half  = scalar @s;
my $i     = 0;
my $m     = 3;
while ($m &lt;= $mroot) {
    if ($s[$i]) {
        for (my $j = int(($m * $m - 3) / 2); $j &lt; $half; $j += $m) {
            $s[$j] = 0;
        }
    }
    $i++;
    $m = 2 * $i + 3;
}

my @res = (2, grep($_, @s));
warn "Found ".scalar(@res)." primes in ".(time()-$time)." sec.\n";

</code></pre>

I ran it as it is, and also on 4 threads with the argument <b>20000000</b> (to avoid hitting the 8GB M1 RAM limits).

<br /><br /><ul>
	<li><b>phoronix-test-suite-10.2.2</b></li>
</ul>

The only test suite that advertises perl tests, although it turns out in just has 2 small subtests for perl (interpreter, pod2html), with the command:
<pre>phoronix-test-suite run pts/perl-benchmark</pre>

<ul>
	<li><b>BioPerl</b></li>
</ul>
I downloaded some bacteria from <a href="https://www.ncbi.nlm.nih.gov/genbank/release/221/">genbank</a> and benchmarked loading the sequences to count codons or monomers.
<pre><code>
use strict; 
use Bio::SeqIO; 
use Bio::Tools::SeqStats; 
use Benchmark qw(:all);

my $in = Bio::SeqIO-&gt;new(-file =&gt; "gbbct10.seq", -format =&gt; "genbank");

timethis(1, sub {
    my $seq = $in-&gt;next_seq;
    my $seq_stats = Bio::Tools::SeqStats-&gt;new($seq); 
    my $codon_ref = $seq_stats-&gt;count_codons(); 
});

timethis(1, sub {
    my $builder = $in-&gt;sequence_builder();
    $builder-&gt;want_none();
    $builder-&gt;add_wanted_slot('display_id','seq');
    for (1..10000) {
        my $seq = $in-&gt;next_seq;
        my $seq_stats = Bio::Tools::SeqStats-&gt;new($seq); 
        my $weight = $seq_stats-&gt;get_mol_wt(); 
        my $monomer_ref = $seq_stats-&gt;count_monomers();
    }
});
</code></pre>

<ul>
	<li><b>Precession</b></li>
</ul>
Let's precess 1 million random celestial coordinates between random epochs using my <a href="https://metacpan.org/pod/Astro::Coord::Precession">Astro::Coord::Precession</a>.
<pre><code>
use Astro::Coord::Precession 'precess';

my $precessed = precess([rand(24), rand(180)-90], rand(200)+1900, rand(200)+1900)
    for (1..1000000);
</code></pre>

<ul>
	<li><b>Text processing</b></li>
</ul>

I threw in a script (called DSOgenerate) that reads various astronomical catalogues and compiles the database for my <a href="https://astro.ecuadors.net/polar-scope-align/">Polar Scope Align</a> iOS app, and another that parses webpages to get articles (its slowest component is <a href="https://metacpan.org/pod/HTML::FormatText">HTML::FormatText</a>) that was used for a <a href="https://textmap.org/">university project</a> I worked on.</div><div><br /><p><big><strong>The Good (aka: The Results)</strong></big></p><p><big><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"></google-sheets-html-origin></big></p><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;i7&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">i7</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Build perl 5.32.1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Build perl 5.32.1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;min&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">min</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:21.516666666666666}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=22+(17-46)/60" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">21.52</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:13.783333333333333}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=14+(32-45)/60" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">13.78</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.5610640870616688}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">56.1%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:116.61}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">116.61</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.6304985337243403}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">163.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:47.63}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">47.63</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:18.43}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">18.43</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.5843733043950086}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">158.4%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose -j4&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose -j4</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:18.05}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">18.05</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.88}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.88</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:2.0697278911564627}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">207.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose -j6&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose -j6</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:16.94}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">16.94</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.77}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.77</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.935875216637782}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">193.6%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime,pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime,pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:23.22}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">23.22</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.492287917737789}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">49.2%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime.pl 4x&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime.pl 4x</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.8950000000000005}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=(4.86+4.87+4.89+4.96)/4" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.90</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:3.06}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">3.06</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.5996732026143793}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">60.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Phoronix pod2html&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Phoronix pod2html</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;msec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">msec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:213.00457}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">213.00</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:91.16566}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">91.17</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.3364561831724795}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">133.6%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Phoronix Interpreter&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Phoronix Interpreter</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;msec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">msec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.5683}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.57</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2453500000000002}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">1.25</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:2.668286024009314}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">266.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;BioPerl codons&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">BioPerl codons</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:149.89}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">149.89</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:127.58}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">127.58</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.17487066938391604}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">17.5%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;BioPerl monomers&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">BioPerl monomers</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:16.64}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">16.64</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:7.82}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">7.82</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.1278772378516626}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">112.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Precession&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Precession</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:6.85}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">6.85</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:3.27}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">3.27</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.09480122324159}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">109.5%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;DSOgenerate&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">DSOgenerate</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:13.12}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">13.12</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.71}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.71</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.297723292469352}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">129.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;HTML::FormatText&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">HTML::FormatText</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:8.52}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">8.52</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.7}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.70</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.8127659574468085}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">81.3%</td></tr><tr style="height: 21px;"><td rowspan="1" colspan="4" data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Average:&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">Average:</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2418771957787538}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=AVERAGE(R[-14]C[0]:R[-1]C[0])" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: right;">124.2%</td></tr></tbody></table><p><br /><br />Or, if we want a nice comparison graph where the i7 is "1x" speed and plot the M1 in relation to it:</p></div><div><img alt="chart (2).png" src="http://blogs.perl.org/users/dimitrios_kechagias/chart%20%282%29.png" width="596" height="418" class="mt-image-none" /></div><div><br /></div><div>I found the results quite remarkable. I mean, the main reason I went through all these is that I could see the M1 going through the installation of cpan modules at a ridiculous pace compared to my i7 when I was setting it up, it was very obviously faster.</div><div>t turns out it is over 2x faster as a crude "average" of the above tests. You can see from the two multithreaded tests that it actually gains even more an advantage when using all its (performance) cores compared to the i7.</div><div>There is at least one test (the codons) where the M1 does not really "shine", so, as I said, benchmarking your own specific workload is important - the M1 does seem very fast at many common Perl tasks, but not *all*.</div><div>Could my old i7 be just too slow? Just to make sure, I had my colleagues with the 16" Mac with the fastest CPU available, the 8-core <b>2.4GHz i9</b>, run a couple of the single core benchmarks to make a comparison, one that did really well on the M1, one that did below average:</div><div><br /></div><div><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border-width: initial; border-style: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;i9&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">i9</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:86.14}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">86.14</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.9431536205729755}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">94.3%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime,pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime,pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:19.35}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">19.35</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.24357326478149102}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">24.4%</td></tr></tbody></table></google-sheets-html-origin></div><div><br /></div>So while the i9 is generally 20-30% faster than the i7, it's still nowhere near the M1 being more than twice as fast. Note that the i9 has 8 full speed cores, so things might get tighter for workloads using more than 4 cores at a time.</div><div><br /></div><div><p><big><strong>The Bad</strong></big></p></div><div>Simply put, not everything works yet. Sometimes it's something simple, <a href="https://github.com/burak/CPAN-Sys-Info-Driver-OSX/pull/3">like a patch I submitted to Sys::Info::Driver::OSX</a> due to the different reporting of the asymmetric processor cores. But I have been unable to install some other CPAN modules or see test failures that are not easy to explain.</div><div><br /></div><div>At least Perl developers will have a native-running environment, even though there are some glitches that should get sorted out in time. I am saying this because while some things run fast even under Rosetta, I have encountered cases where non-native software runs slowly. For example, an Android project I tried, takes almost twice the time to compile on the M1. Android studio is not yet native and it shows, I would not recommend the platform to android devs. It is the opposite for iOS devs of course, the M1 is the ideal platform for obvious reasons.</div><div><br /></div><div>Additionally, the comparison shows the M1 can be much faster than the i7/i9, however that comparison is important only if you are limited to the Apple world. If you don't need a Mac specifically and will just run Linux (to not mention Windows), then you are not limited to what Apple has to offer. I am referring to <b>AMD</b> of course, for most workloads, a Zen 2 based CPU is quite a bit faster than intel per thread, and on top will offer more cores at a similar price. I don't have a Zen 2 CPU to try out right now, however I do have a ThinkPad X395 which has a Zen-1 based 2.1GHz <b>Ryzen 5 3500U</b>. While it's not an old CPU, the newer Zen-2 based 4000-series and 5000-series CPUs seem to be almost twice as fast per core in various benchmarks, which would probably make those faster than an M1, given that the "slow" 3500U is already a bit faster (around 15% on average it seems) than the i7:</div><div><br /></div><div><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border-width: initial; border-style: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;3500U&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">3500U</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:101.22}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">101.22</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2833295736521544}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">128.3%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime.pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime.pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:20.01}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">20.01</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.2859897172236504}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">28.6%</td></tr></tbody></table></google-sheets-html-origin></div><div><br /></div><div>That M1 advantage over 3500U is probably not enough to hold off Zen 2 cpus, which also come with many more full-power cores than an M1.</div><div>Then again, the M1 is Apple's first "laptop/desktop" silicon and they were possibly targeting efficiency more than raw performance - as the latter was an easy win vs Intel, so I would keep an eye on what their next CPU will bring.</div><div><br /></div><div><b>The Ugly?</b></div><div><br /></div><div>The #1 criticism of the M1 Macs is not related to their CPU, but the fact that the SSD is soldered on. This means that when the SSD dies (will take several years, but depending on the usage SSDs will eventually fail), you can't just replace it (unless there's complete disassembly, desoldering etc). This "obsolescence by design" might not be that bad given the price of a Mac Mini compared to what Apple users are used to paying, but it is made worse by the fact that an M1 Mac has a signed system volume on the SSD, which is required for the Mac to boot even when booting from an external device. So when the SSD goes, you might not be able to boot your Mac at all - permanently. As I said, not a criticism of the M1 CPU directly, but of the devices that feature it.</div><div><br /></div><div>Lastly, while my benchmarks were reproducible in general, there was one benchmark - the prime.pl script - that gave me some trouble, exposing a strange and disconcerting issue. So, I run the benchmark for n=20000000 multiple times and I get consistent results. Also, if I run it by launching 4 instances in parallel background processes with a batch file, I also get consistent results. it goes a bit like this:</div>
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 2.7765851020813 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.78401112556458 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77585196495056 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.00496196746826 sec.
Found 1270607 prime numbers in 3.01989006996155 sec.
Found 1270607 prime numbers in 3.02487397193909 sec.
Found 1270607 prime numbers in 3.02904796600342 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.01903891563416 sec.
Found 1270607 prime numbers in 3.02826595306396 sec.
Found 1270607 prime numbers in 3.02855086326599 sec.
Found 1270607 prime numbers in 3.03278708457947 sec.
</code></pre>
If I try again in a couple of hours or so, I will still see the same thing. But, if I try after a sufficiently long time (I am not clear on "sufficiently" seems like several hours, but definitely by the next day) - without using the Mac Mini in the interim, just left powered on - I start seeing this:
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 4.18084216117859 sec.
test % perl prime.pl
Found 1270607 prime numbers in 3.94040703773499 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.06315612792969 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.53617215156555 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.34210705757141 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.04679107666016 sec.
Found 1270607 prime numbers in 3.07015514373779 sec.
Found 1270607 prime numbers in 3.07026290893555 sec.
Found 1270607 prime numbers in 3.07335591316223 sec.
test % sudo nice -20 perl prime.pl
Found 1270607 prime numbers in 5.50178408622742 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.03745698928833 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.04621696472168 sec.
Found 1270607 prime numbers in 3.0637059211731 sec.
Found 1270607 prime numbers in 3.07231998443604 sec.
Found 1270607 prime numbers in 3.07551097869873 sec.
</code></pre>
Running a single process is suddenly unpredictably slow. The i7 takes 4.3s at this benchmark on a single thread, so the M1 can be much slower. However, once I batch run 4 parallel processes I get the same great performance I was seeing before. It is reproducible, it's not a matter of if, but a matter of when I will eventually will get into this problematic state which, it seems, I can only solve via a reboot. After a reboot everything is fine once more.
I tried to see what's going on in several ways. Checking to see whether something like the efficiency cluster taking over, or the scheduler switching cores etc, I tried monitoring with <pre>powermetrics -s cpu_power</pre>
The result is not interesting enough to post, because both when the system is in the "good" and the "bad" state, only the performance cores are used (but not just one of them as I expected - a random mix, different each time, but similarly random for both "states"). It's the same story using the CPU history window:<div><img alt="cores2 copy.png" src="http://blogs.perl.org/users/dimitrios_kechagias/cores2%20copy.png" width="472" height="232" class="mt-image-none" /><br /><div><br /></div></div><div>The graph above shows a couple of single-process runs of prime.pl while in a "good" state, it causes all 4 performance cores (numbers 8 on CPU monitor) to be used at random proportions and it's the same for "bad" status runs - just the bars are twice as wide, the calculation takes longer.</div><div><br /></div><div>To add another clue that makes things weirder rather than explain the issue, I checked to see if it's my compiled perl at fault, so ran with the built-in perl which I assume Apple made sure to compile correctly. System 5.28 is a bit slower in "good" status runs:</div>
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 2.77031397819519 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.95687794685364 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77954316139221 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.95602297782898 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77461099624634 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.94599509239197 sec.
</code></pre>

But on "bad" status it is faster than my compiled perl (quite consistently, I've done this a few times) - although still much slower than after a reboot:
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 5.44245409965515 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 4.92102980613708 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.34624910354614 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 3.51168012619019 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.66441202163696 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 3.62216806411743 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.46292304992676 sec.
</code></pre>

I did eventually find a good clue: I can trigger this weird behaviour if I force the Mini to sleep and then wake up - it wakes up in the bad state. However, as there are no battery settings (not a laptop), I can't find any "go to sleep" timer in the settings - and, as I said, just leaving it for an hour or two (the screen does go to sleep, there's a setting for that) does not get it in the weird state. In any case it's probably got something to do with the CPU sleep states that Apple has missed. Since I couldn't reproduce it with the other workloads I would assume it's not gonna be easy to track down. Reminds me a bit of the problems I had waking an older Macbook (the white ones) from sleep while connected with multiple monitors -&nbsp;they never actually fixed that, so it had put me off Macbooks for a few years. I seem to hit Apple sleep state bugs.<div><br /></div><div><b>Overall</b></div><div><br /></div><div>I'd say, despite some caveats, the M1 is showing some impressive potential, especially for people who use MacOS and would not get much choice other than Intel's not-that-impressive-lately offerings. If I was looking for my main work machine, I'd probably wait a bit longer for some teething troubles to be solved (unless I wanted to help solve potential perl-specific issues) - and perhaps wait for the rumoured release later this year of a faster chip ("M1X" or whatever).</div><div><br /></div>]]>
        
    </content>
</entry>
  <entry>
  <title>March report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/jonathan-2021-03</id>
  <published>2021-04-19T15:21:34</published>
  <updated>2021-04-19T15:21:34</updated>
  <summary>
  <![CDATA[
     Jonathan writes: March didn't see me doing that many grant hours; I was keeping my keyboard time down for the first half of the month, and then had a lot to catch up on in the second half On the upside, the time that was spent was productive: I got some way into implementing more of Raku's multiple dispatch semantics in terms of the new dispatcher. I've written a blog 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr></p>

<p>March didn't see me doing that many grant hours; I was keeping my keyboard time down for
the first half of the month, and then had a lot to catch up on in the second half (and
still needed to avoid putting in more than a usual working day). On the upside, the time
that was spent was productive: I got some way into implementing more of Raku's multiple
dispatch semantics in terms of the new dispatcher. I've written a <a href="https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/">blog post</a>
about that work (although some of the work it covers was done during April).</p>

<p><code>
Total time worked:: 7 hours 29 minutes
</code></p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Transparency Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-transparency-repor-19-april-2021</id>
  <published>2021-04-19T13:39:03</published>
  <updated>2021-04-19T13:39:03</updated>
  <summary>
  <![CDATA[
     Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation. What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest Community Affairs Team Update. Investigation #1 Based on a recent public post 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation.</p>

<p>What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest <a href="https://news.perlfoundation.org/post/cat-update-19-april-2021">Community Affairs Team Update</a>.</p>

<h1>Investigation #1</h1>

<p>Based on a recent public post viewed by the CAT, the CAT investigated two individuals for potentially unacceptable behavior over IRC and Twitter. The investigation found that the first individual continued communication on multiple platforms despite being asked repeatedly to stop. Past behavior by the first individual was discovered during the course of the investigation. The CAT opened a separate investigation into this past behavior, and that investigation’s results are explained as part of “Investigation #2”.</p>

<p>Regarding the second individual investigated as part of “Investigation #1”, the CAT has decided to issue them a warning. The CAT is in contact with them and has scheduled a meeting with them to discuss this.</p>

<h1>Investigation #2</h1>

<p>Based on the previous investigation, the CAT investigated past behavior by the first individual. The CAT found that as an attendee of a 2019 Perl event, they had made repeated discriminatory statements and arguments in a conversation with the target, which was also overheard by other attendees. The individual continued arguing for this position despite being asked repeatedly to stop, the next day there were asked to leave the event.</p>

<p>They were instructed not to repeat the discriminatory statements and arguments. They were told an apology should not be made to the target of the harassment. Later, the individual repeated the discriminatory statements publicly on Twitter in discussions with other members of the community which were also viewed by the target. The target told the individual not to contact them ever again. Despite being asked explicitly not to contact them, the individual later contacted the target by email, which was an additional instance of unacceptable behavior.</p>

<h1>Consequences</h1>

<p>The CAT has informed the individual investigated as part investigation #1 and #2 that they are banned from attending any Perl Foundation conferences or events in perpetuity.</p>

<p>The CAT has instructed the individual to leave and cease participation on any public IRC channels on irc.perl.org, leave and cease participation on the Perl and Raku public channels on Freenode, unsubscribe and cease participation on any Perl and Raku community mailing lists including but not limited to the perl5-porters mailing list. The CAT has informed them to not contact the targets of their behavior from “Investigation #1” or “Investigation #2”. The CAT has informed them to not repeat the offending statements or arguments from “Investigation #2”. If the CAT decides the letter or the spirit of this decision has been violated, it may: explicitly extend the scope of the ban, take further technical measures to ensure compliance, or take other actions as it deems necessary.</p>

<h1>Other findings</h1>

<p>In addition to the findings of both investigations, the CAT wants to make it clear that separate and inclusive of the two reported investigations, it found many instances of communication which alone may not have constituted unacceptable behavior, but when taken together did constitute unacceptable behavior. The CAT asks all members of the Perl community to be respectful of others and that discriminatory or harassing conduct will not be tolerated.</p>

<h1>Conclusion</h1>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject. If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, including evasion of CAT decisions, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Update April 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-update-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-update-19-april-2021</id>
  <published>2021-04-19T13:33:50</published>
  <updated>2021-04-19T13:33:50</updated>
  <summary>
  <![CDATA[
     The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. It has been one year since the Community Affairs Team was first announced in March of 2020. In June, the Perl Raku Conference in the Cloud took place. This was the first conference where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. </p>

<p>It has been one year since the Community Affairs Team <a href="https://news.perlfoundation.org/post/introducing-tpf-community-affairs-team">was first announced</a> in March of 2020.  In June, the Perl &amp; Raku Conference in the Cloud took place. This was <a href="https://perlconference.us/tpc-2020-cloud/">the first conference</a> where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior to the conference, Community Affairs Moderators and <a href="https://perlconference.us/tpc-2020-cloud/handling-standards-of-conduct-incidents/">the CAT committee for the event</a> received training on handling and responding to SoC complaints within the community. A month later in July, the Chair of the CAT <a href="https://news.perlfoundation.org/post/board-2020-07">was appointed by the TPF board</a>. In October, the <a href="https://news.perlfoundation.org/post/cic-2020-soc-transparency-report">first Standards of Conduct transparency report</a> was released.</p>

<p>Following that, the CAT has been working on a charter document which outlines in more concrete terms its role and responsibilities as it relates to the community, as well as an updated Standards of Conduct which would apply not just to conferences, but to other TPF online spaces. Recent events in the community have expedited the CAT’s work and the board’s approval of these documents, which are planned to be publicly released within the next week.</p>

<p>The CAT is also preparing for the upcoming <a href="https://perlconference.us/tprc-2021-cloud/">Perl &amp; Raku Conference in the Cloud</a>, and training similar that received in 2020 is planned for the moderators and CAT committee for this event. The CAT thanks the many people who provided their input to the formation of the CAT, and Samantha McVey, Stuart Mackintosh, and Ricardo Signes for continuing their work on the CAT committee as well as their work on the CAT committee during last year’s conference. </p>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this update you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): March 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_march_report"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/maintaining_perl_5_march_report</id>
  <published>2021-04-19T09:50:16</published>
  <updated>2021-04-19T09:50:16</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 29 tickets were reviewed, and 3 patches were applied  1.63 #18519 manually rebase and some clean up, make PR #18647  0.17 #18523 recheck and apply to blead  2.33 #18557 review, find several similar tickets, work on  adding a warning, create #18643  
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.
```
Approximately 29 tickets were reviewed, and 3 patches were
applied</p>

<p>[Hours]         [Activity]
  1.63          #18519 manually rebase and some clean up, make PR #18647
  0.17          #18523 recheck and apply to blead
  2.33          #18557 review, find several similar tickets, work on
                adding a warning, create #18643
  2.52          #18587 review discussion and changes, and review perlguts,
                comment
                #18587 review and comment
  0.22          #18589 review and apply to blead
  0.08          #18629 review and approve
  0.70          #18632 review makemeta, work on a fix
                #18632 more work on a fix, testing, make PR #18670
  1.12          #18634 review changes, review list discussion
  0.38          #18639 review and research, comment
  1.74          #18642 research and comment
                #18642 documentation fix, and look over magic handling for
                setsockopt and make PR 18660
                #18642 fix non-portable new test
  3.06          #18643 add each @{ anonarray } too, fixes, debugging
                #18643 add more tests, testing, force push
                #18643 update each() documentation too
  1.97          more autovivification, debugging, work out what’s wrong,
                tests and make PR #18650
                #18650 review, research and comment
  6.64          #18651 review ticket, work on a reproducer, debugging,
                research and comment
                #18651 debugging, try a fix and bounce off my_snprintf(),
                try a simpler solution, testing, add new test, debug test
                to ensure code works as expected, polish (need a bit more
                test debugging)
                #18651 more testing, code checks (some code handling q
                size flag or not)
                #18651 post PR with comment, comment on original ticket
  0.35          #18652 review and briefly comment
  0.35          #18656 comment
  0.68          #18658 recheck and apply to blead, perldelta update
  0.33          #18662 review and comment (request changes)
  0.45          #18663 request more information
                #18663 ask for more information again
  0.53          #18664 research and comment
  4.96          #18667 testing, reproduce, try bisect
                #18667 try bisect again on different hardware
                #18667 review commit found by bisect - it’s not the cause
                (fa353c3d2), debug some, the error feels like a stack-not-
                refcounted
                #18667 more debugging, trying to find code that might
                trigger stack-not-refcounted
  0.72          cage cleaning - review tickets, closing some, seeing which
                need work
  0.23          comment on Fix string leaks thread
  0.82          feature.[ch] on perl5-porters
  1.87          list catch up, also some cygwin testing for khw
  0.72          look at autovivication feature
  0.92          more list catch up
  0.58          review github notifications
  1.67          review list discussion
  1.02          review The current state of perl email and the following</p>

<h1>                discussion</h1>

<p>38.76 hours total
39.```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 3</title>
  <summary type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-19T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-3"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
  <content type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Digital Ocean API using Perl</title>
  <summary type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></summary>
  <updated>2021-04-19T07:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/digital-ocean-api"/>  <id>https://perlmaven.com/digital-ocean-api</id>
  <content type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Memory Addresses and Bell Numbers: The Weekly Challenge 108</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/18#pwc108" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to declare a variable or constant and print it’s location in the memory.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Devel::Peek;
use Capture::Tiny q/capture_stderr/;
use constant A =&gt; "test";
my $a = 1;    
my $address;  
my $stderr = capture_stderr {
    Dump(A)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of constant A: $address\n"; 
$stderr = capture_stderr {
    Dump($a)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of \$a: $address\n";
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Address of constant A: 0xfd31ae90
Address of $a: 0xfdb2f770
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a somewhat unusual challenge for Perl. Sometimes these challenges allow for a certain amount of interpretation. For example, under the hood, the representation of Perl data in memory involves more complicated data structures. I think it is in the spirit of this challenge to demonstrate access to this, without necessarily implementing complete and fully generalized solution.&lt;/p&gt;
&lt;p&gt;Here I use &lt;code&gt;Devel::Peek&lt;/code&gt; in order to get a report on the underlying memory usage of the given variables. The &lt;code&gt;Dump&lt;/code&gt; function only prints a memory report to STDERR, so in order to obtain the information we seek &lt;code&gt;Capture::Tiny&lt;/code&gt; is used to encapsulate the STDERR output and save it to a variable. A regex is then used to pull out the memory address which is then printed.&lt;/p&gt;
&lt;p&gt;The memory address printed here is the &lt;em&gt;reference address&lt;/em&gt;. For additional details on Perl’s core see the perlguts documentation.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 10 Bell Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub bell_triangle{
    my($n) = @_; 
    my @bell_numbers = ([]);
    $bell_numbers[0]-&gt;[0] = 1;
    for (my $i=1; $i&lt;=$n; $i++) {
      $bell_numbers[$i]-&gt;[0] = $bell_numbers[$i-1]-&gt;[$i-1];
      for (my $j=1; $j&lt;=$i; $j++){  
          $bell_numbers[$i]-&gt;[$j] = $bell_numbers[$i-1]-&gt;[$j-1] + $bell_numbers[$i]-&gt;[$j-1];
       }
   }
   return $bell_numbers[$n]-&gt;[0];
}

MINA:{
    for my $b (0 .. 9){  
        print "B_$b: " . bell_triangle($b) . "\n";  
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
B_0: 1
B_1: 1
B_2: 2
B_3: 5
B_4: 15
B_5: 52
B_6: 203
B_7: 877
B_8: 4140
B_9: 21147
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is an interesting problem. At first glance one might be tempted to proceed and compute the partitions and then take the total number of them all. Instead, it turns out that there is a simpler closed form solution whereby we can compute the &lt;em&gt;Bell Triangle&lt;/em&gt; and then take the values on the leftmost diagonal to be the &lt;em&gt;Bell Numbers&lt;/em&gt; as required.&lt;/p&gt;
&lt;p&gt;For fun the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/18"&gt;Prolog solution&lt;/a&gt; does indeed compute the partitions instead of simply using the Bell Triangle!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Challenge 108&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlguts"&gt;perlguts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_triangle"&gt;Bell Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc108</id>
    <published>2021-04-18T15:55:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Counter using Dancer2 and Redis in a Docker container</title>
  <summary type="html"><![CDATA[<p>
In this part of the <a href="https://code-maven.com/counter">counter examples</a> series we have <a href="/dancer">Perl Dancer</a> based application using <a href="https://redis.io/">Redis</a>
as the in-memory cache/database to store the counter.
<p>
The code runs in a Docker container and we have another container running the Redis server.
<p>
]]></summary>
  <updated>2021-04-18T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/counter-dancer2-redis-docker"/>  <id>https://perlmaven.com/counter-dancer2-redis-docker</id>
  <content type="html"><![CDATA[<p>
In this part of the <a href="https://code-maven.com/counter">counter examples</a> series we have <a href="/dancer">Perl Dancer</a> based application using <a href="https://redis.io/">Redis</a>
as the in-memory cache/database to store the counter.
<p>
The code runs in a Docker container and we have another container running the Redis server.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Static Analysis and Self Describing Numbers (now with Threads!): The Weekly Challenge 107</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/11#pwc107" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to generate self-descriptive numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread; 
use boolean;
use constant SDN_COUNT =&gt; 3;
use constant THREAD_COUNT =&gt; 4;
use constant RANGE_SIZE =&gt; 10_000;

sub self_describing{
    my($i) = @_;
    my @digits = split(//, $i);
    for my $x (0 .. @digits - 1){
        my $count = 0;
        for my $j (0 .. @digits - 1){
            $count++ if($digits[$j] == $x);
            return false if($count &gt; $digits[$x]);
        }
        return false if($count != $digits[$x]);
    }
    return true;
}

sub self_describing_number{
    my($start, $end) = @_;  
    my @r = (); 
    for(my $i = $start; $i &lt; $end; $i++){
        push @r, [length($i), $i] if(self_describing($i));  
    }   
    return \@r;  
}

MAIN:{
    my @threads; 
    my $count = 0; 
    my $lower = 1; 
    my $upper = RANGE_SIZE; 
    do{
        for(0..(THREAD_COUNT - 1)){  
            my $t = Thread-&gt;new(\&amp;self_describing_number, ($lower, $upper));
            push @threads, $t;  
            $lower = $upper + 1;  
            $upper = $lower +  RANGE_SIZE;  
        }  
        foreach my $t (@threads){  
            my $sdns = $t-&gt;join();                 
            foreach my $sdn (@{$sdns}){ 
                print "Base " . $sdn-&gt;[0] . ":" .  $sdn-&gt;[1] . "\n" if $count &lt; SDN_COUNT; 
                $count++;  
            }  
        }   
        @threads = ();   
    } while($count &lt; SDN_COUNT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Base 4:1210
Base 4:2020 
Base 5:21200
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 1 this week is repeated from Challenge 043. In order to provide something fresh for the same problem I modified the previous code to be multi-threaded.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to list methods of a package/class.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub analyze{
    my($file) = @_;
    my @subs;
    my @uses; 
    my @subroutines;
    my $subs = `perlanalyst $file --analysis Sub`;
    $subs =~ s/$file://;
    @subs = split(/\n/, $subs);   
    my $uses = `perlanalyst $file --analysis Use`;
    $uses =~ s/$file://;
    @uses = split(/\n/, $uses);   
    for my $s (@subs){
        $s =~ s/\s+//;
        my @fields = split(/:/, $s); 
        push @subroutines, $fields[1] if(length($s) &gt; 0); 
    }
    push @subroutines, "BEGIN" if(@uses); 
    return @subroutines; 
}

MAIN:{
    my $FILE = $ARGV[0];
    my @subroutines = analyze($FILE);
    print join("\n", sort {$a cmp $b} @subroutines) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl perl/Calc.pm 
BEGIN
DESTROY
add
div
mul
new
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Getting a list of methods can &lt;em&gt;mostly&lt;/em&gt; be done via just some plain analysis of the code. Rather than re-invent the wheel I am using a module, Perl::Analysis::Static, to do that for me. This is a pretty neat tool but has been left in an alpha state. The most stable way to use it is via the command line instead of its incomplete API. In this code I call the &lt;code&gt;perlanalyst&lt;/code&gt; command and then parse the output.&lt;/p&gt;
&lt;p&gt;If given a &lt;code&gt;BEGIN&lt;/code&gt; block or if &lt;code&gt;use&lt;/code&gt;-ing a module Perl will execute a &lt;code&gt;BEGIN&lt;/code&gt; at compile time. &lt;em&gt;I would argue that this is out of scope for this challenge.&lt;/em&gt; However, as given in the problem statement we are expected to catch this it seems. I do this by inspecting the &lt;code&gt;perlanalyst&lt;/code&gt; output for &lt;code&gt;use&lt;/code&gt; lines. I could have done a few other things as well but decided not to do more with this since it seems like a funny requirement anyway!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/"&gt;Challenge 107&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;Challenge 043&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/release/GGOLDBACH/Perl-Analysis-Static-0.003-TRIAL/lib/Perl/Analysis/Static.pm"&gt;Perl::Analysis::Static&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc107</id>
    <published>2021-04-11T17:51:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub max_difference_sorted{
    my(@sorted) = @_;
    return 0 if(@sorted == 1);
    my $x = $sorted[1] - $sorted[0];  
    my $y = max_difference_sorted(@sorted[1 .. @sorted - 1]);   
    return ($x &gt; $y)? $x: $y; 
}

sub max_difference{
    my (@numbers) = @_;
    return max_difference_sorted(
        sort { $a &lt;=&gt; $b } @numbers
    ); 
}

MAIN:{
    my (@N);
    @N = (2, 9, 3, 5);
    print max_difference(@N) . "\n"; 
    @N = (1, 3, 8, 2, 0); 
    print max_difference(@N) . "\n"; 
    @N = (5);
    print max_difference(@N) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
5
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I believe this code is straightforward enough! &lt;code&gt;max_difference&lt;/code&gt; performs the sort and &lt;code&gt;max_difference_sorted&lt;/code&gt; recursively finds the largest difference as required.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given numerator and denominator i.e. $N and $D. Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub nd2decimal{
    my($n, $d) = @_;
    my $max_repetend = $d - 1; 
    my $repeats = false; 
    my @factors = prime_factor($d);
    for my $factor (@factors){
        $repeats = true if($factor != 2 &amp;&amp; $factor != 5); 
    } 
    unless($repeats){ 
        return sprintf("%0.${max_repetend}g", $n / $d); 
    }
    else{
        my $x = divide($n, $d, [], []); 
        return $x; 
    }  
}

MAIN:{
    my($N, $D);
    ($N, $D) = (1, 3);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 2);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (5, 66);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 6);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 8);
    print nd2decimal($N, $D) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0.(3)
0.5
0.0(75)
0.1(6)
0.125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 2 is a bit trickier than the first part. The approach here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if it is a repeated decimal by checking if &lt;code&gt;$d&lt;/code&gt; has prime factors other than 2 or 5&lt;/li&gt;
&lt;li&gt;if it is not a repeated decimal then this is quick work, divide and display the solution&lt;/li&gt;
&lt;li&gt;in the case of repeated decimals we essentially implement grade school long division in the &lt;code&gt;divide&lt;/code&gt; function and keep track of remainders. When a remainder is repeated we know that we have found the cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some interesting theoretical properties to repeat decimals but none are particularly helpful in actually computing them. One observation is that the length of the cycle must be smaller than the value of the denominator, whence the use of &lt;code&gt;$d&lt;/code&gt; in the main loop in the &lt;code&gt;divide&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I’m re-using the same &lt;code&gt;prime_factors&lt;/code&gt; function that I used in &lt;a href="https://adamcrussell.livejournal.com/14043.html"&gt;Challenge 041&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Challenge 106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/RepeatingDecimal.html"&gt;Repeating Decimal&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc106</id>
    <published>2021-04-04T17:04:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Two Dist::Zilla questions (META.yml; user config)</title>
    <link href="http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html"/>
    <id>http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html</id>
    <updated>2021-04-03T20:22:49+00:00</updated>
    <category term="perl"/>
    <summary>During the great RT will be shutdown craze earlier this year, I updated my Dist::Zilla setup to use a custom author bundle (Dist::Zilla::PluginBundle::Author::DOMM) so I can unify my Dist::Zilla ...</summary>
    <content type="html">&lt;p&gt;During the great &lt;strong&gt;RT will be shutdown&lt;/strong&gt; craze earlier this year, I updated my &lt;a href="http://dzil.org/"&gt;Dist::Zilla&lt;/a&gt; setup to use a custom author bundle (&lt;a href="https://metacpan.org/pod/Dist::Zilla::PluginBundle::Author::DOMM"&gt;Dist::Zilla::PluginBundle::Author::DOMM&lt;/a&gt;) so I can unify my Dist::Zilla config in one place (instead of copying &lt;code&gt;dist.ini&lt;/code&gt; from project to project, adding &amp;amp; modifying it from time to time, but never backporting improvements to older projects).&lt;/p&gt;

&lt;p&gt;Two of my decisions might have been not too smart (as indicated by &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/7"&gt;various&lt;/a&gt; &lt;a href="https://github.com/domm/Web-Request-Role-JWT/pull/1"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/10"&gt;requests&lt;/a&gt;), so I'm now looking for feedback...&lt;/p&gt;

&lt;h4&gt;&lt;span class="caps"&gt;META.&lt;/span&gt;yml vs &lt;span class="caps"&gt;META.&lt;/span&gt;json?&lt;/h4&gt;

&lt;p&gt;I stopped generating &lt;code&gt;META.yml&lt;/code&gt; files and now only generate &lt;code&gt;META.json&lt;/code&gt;. As far as I can tell, the contents of those two files is identical, so I think it should be enought to include the data once per dist (and I prefer &lt;span class="caps"&gt;JSON &lt;/span&gt;to &lt;span class="caps"&gt;YAML...&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Of course, &lt;span class="caps"&gt;CPANTS &lt;/span&gt;now &lt;a href="https://cpants.cpanauthors.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.009"&gt;complains&lt;/a&gt; about the missing &lt;code&gt;META.yml&lt;/code&gt;. (Which is of course ironic, because it was me who first implemented this &lt;span class="caps"&gt;CPANTS &lt;/span&gt;metric...)&lt;/p&gt;

&lt;p&gt;Maybe some other (old?) tools still need &lt;code&gt;META.yml&lt;/code&gt;? So should I again produce both &lt;code&gt;META.yml&lt;/code&gt; and &lt;code&gt;META.json&lt;/code&gt;?&lt;/p&gt;

&lt;h4&gt;Dist::Zilla user config?&lt;/h4&gt;

&lt;p&gt;During my deep dive into Dist::Zilla plungins and author bundles, I learned that Dist::Zilla looks for per-user configuration in &lt;code&gt;~/.dzil/config.ini&lt;/code&gt;. So I moved some general information (my name &amp;amp; email, default license) from all my &lt;code&gt;dist.ini&lt;/code&gt; files into this central config file.&lt;/p&gt;

&lt;p&gt;But it seems that this makes contributing to my dists even harder, as the &lt;code&gt;dist.ini&lt;/code&gt; file included in the dist now is invalid. Contributors will get a (helpful) error message when running &lt;code&gt;dzil build&lt;/code&gt;, but this is yet another hurdle for potential contributors. I've already got two pull requests to "fix" this.&lt;/p&gt;

&lt;p&gt;On the one hand I would prefer to keep the global config file, so I can easily change data. On the other hand I could just as well run a small command to change whatever value I might want to change on multiple files (using this hot new tool called "Perl", which makes mangling text in multiple files very easy) and thus make contributions easier.&lt;/p&gt;

&lt;p&gt;How are other &lt;span class="caps"&gt;CPAN &lt;/span&gt;authors handling this?&lt;/p&gt;

&lt;h4&gt;Or is it all Dist::Zilla's fault?&lt;/h4&gt;

&lt;p&gt;Some people (like brian d foy in this &lt;a href="https://www.reddit.com/r/perl/comments/mgw033/distar_a_cpan_distribution_author_tool/"&gt;thread&lt;/a&gt; about &lt;a href="https://github.com/p5sagit/Distar"&gt;Distar&lt;/a&gt;, a simpler authoring tool (but it works with ExtUtils::MakeMaker, which is a module I don't want to touch..)) argue that Dist::Zilla is too complex and make contributing very hard (because potential contributors now need to install a lot of Dist::Zilla plugins).&lt;/p&gt;

&lt;p&gt;But I actually like Dist::Zilla a lot (esp after finally coming up with a PluginBundle that fits my workflow). So I will keep using Dist::Zilla, but would really appreciate any feedback on my two questions (&lt;code&gt;META.yml&lt;/code&gt; and user config).&lt;/p&gt;

&lt;p&gt;You can either enter a comment below (if my homegrown comments system works..), or via &lt;a href="https://www.reddit.com/r/perl/comments/mjeej7/two_distzilla_questions_metayml_user_config/"&gt;reddit&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update: user config vs github&lt;/h4&gt;

&lt;p&gt;After applying &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/12"&gt;another patch&lt;/a&gt; supplied by &lt;a href="https://github.com/paultcochrane"&gt;Paul Cochrane&lt;/a&gt; that adds some github testing hooks, it seems to be clear that depending on the user config is a bad idea. Surprisingly, github will &lt;span class="caps"&gt;NOT &lt;/span&gt;set up a &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; so it can "contribute" to my dist (by running it's test suite), see eg &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/runs/2260939037?check_suite_focus=true"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I guess I will stop using the global config file...&lt;/p&gt;</content>
    <category term="CPAN"/>
    <category term="Dist::Zilla"/>
  </entry>
</feed>
