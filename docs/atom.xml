<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-11-29T17:43:52Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9969</id>

    <published>2020-11-29T12:06:36Z</published>
    <updated>2020-11-29T12:18:22Z</updated>

    <summary> If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email).This blogpost is not in shortage of unanswered questions... Task 1 Array of...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[
<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i><br /></p><p><br /></p><p>This blogpost is not in shortage of unanswered questions...<br /></p>



<h4>Task 1 Array of Product</h4>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">myproduct</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@arr</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#&nbsp;short&nbsp;for&nbsp;"previous&nbsp;product"</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@arr</font>,&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$#arr</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$entry</font>&nbsp;=&nbsp;<font color="#0000ff">$pre_prod</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$entry</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">$i</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$#arr</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$i</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$entry</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
</tt></div>

<div>The above, I designed, is a prototype for multiplication (and division, if possible) when it is expensive to do mulitplication,
such as matrices. Since I don't know much about
<a href="https://en.wikipedia.org/wiki/Matrix_multiplication_algorithm">those algorithmic knowledge</a>, just leave the codes here for personal future digestion.</div>

<div>---</div>

<div>What I have submitted is an one-liner:</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$_</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br />
</tt></div>

<div><br /><br />I get another item for "investigation" here. Why doesn't the following line work?</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$i</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$i</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br /></tt>


<h4><br /></h4><h4>Task 2 Spiral Matrix</h4>

<h5>the Testing</h5>

<div>This is time for <tt>Test::Deep</tt> and <tt>Test::More</tt> again:</div>

<pre>cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,],
    [  7, 8, 9,  ]]),
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5  ]
, "Example 1");
cmp_deeply(
    flat([[  1,  2,  3,  4 ],
    [  5,  6,  7,  8 ],
    [  9, 10, 11, 12 ],
    [ 13, 14, 15, 16 ]]), 
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
, "Example 2");
cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,]]),
    [ 1, 2, 3, 6, 5, 4 ]
, "small test case");

cmp_deeply(
    flat([
    [ 2, 3, 5, 7],
    [11,13,17,19],
    [23,29,31,37],
    [41,43,47,53],
    [59,61,67,71]])
, [2, 3, 5, 7, 19, 37, 53, 71, 67, 61, 59,
    41, 23, 11, 13, 17, 31, 47, 43, 29]
, "prime numbers 5 x 4");
</pre>

<pre>$ perl ch-2.pl
1..4
ok 1 - Example 1
ok 2 - Example 2
ok 3 - small test case
ok 4 - prime numbers 5 x 4
</pre>

Or customize a test:

<pre>$ perl ch-2.pl 3 5 A B C D E F G H I J K L M N 
[A, B, C, D, E]
[F, G, H, I, J]
[K, L, M, N, O]
A, B, C, D, E, J, O, N, M, L, K, F, G, H, I
</pre>

<h5>the codes</h5>

<div>Honestly I did not plan much on the task. (I) I created a "helper matrix" (<tt>@helper_mat</tt>)
 to record which terms on the original matrix is traversed: traversed, 
1; not yet traversed, 0. (II) I went through the outermost terms -- the 
four sides -- of the matrix by counting off one by one. (III) I made use
 of a boolean variable <tt>$success_click</tt> to tackle the change of direction.</div>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">flat</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@mat</font>&nbsp;=&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff"><b>$_</b></font>[0]};&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$M</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$N</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$mat</font>[0]};<br />
<br />
<font color="#7f7f7f"><i>#&nbsp;(I)&nbsp;initialize&nbsp;of&nbsp;the&nbsp;helper&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@helper_mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@helper_mat</font>,&nbsp;[(<font color="#ffa500">"</font><font color="#ff0000">0</font><font color="#ffa500">"</font>)&nbsp;x&nbsp;<font color="#0000ff">$N</font>]&nbsp;<b>for</b>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">1</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;(&nbsp;&nbsp;0,&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;(&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>,&nbsp;&nbsp;0&nbsp;);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$r</font>,&nbsp;<font color="#0000ff">$c</font>)&nbsp;=&nbsp;(&nbsp;0&nbsp;,&nbsp;0&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(I)</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;(II): &nbsp;preparation&nbsp;of&nbsp;clockwise&nbsp;traverse&nbsp;of&nbsp;the&nbsp;outermost&nbsp;part&nbsp;of&nbsp;the&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br />
<font color="#7f7f7f"><i>(II): traverse the outermost matrix terms</i></font><font color="#7f7f7f"><i><br />
</i></font>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$q</font>&nbsp;(0.<font color="#00007f">.3</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@</font>{<font color="#0000ff">$numbering</font>[<font color="#0000ff">$q</font>]})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(II)</i></font><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;<font color="#00007f">3</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&lt;&nbsp;<font color="#0000ff">$M</font>*<font color="#0000ff">$N</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$success_click</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;==&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)&nbsp;</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;(<font color="#0000ff">$time_now</font>+<font color="#00007f">1</font>)&nbsp;%&nbsp;4;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
<br />
</tt></div>

<h5>Extras</h5>

<div><i>Here I am going to describe two extra functionalities I added:</i></div>

<div>(A) I find that addition or modification of a few lines can create anticlockwise traverse:</div>

<div><tt>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@row_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@col_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$M</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$M</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br />
</tt></div>

<div><br /></div><div><br /></div><div><br /></div><div>(B) An inverse subroutine <tt>&amp;matrixize</tt> for the original task: given parameters <tt>m</tt>, <tt>n</tt>, put a list of <tt>m x n</tt> integers as a <tt>m x n</tt> spiral matrix.</div>

<div>
<br /><br />
Code inserted:
<div><pre><tt><b>my</b>&nbsp;<font color="#0000ff">@test</font>&nbsp;=&nbsp;matrixize([<font color="#00007f">1..60</font>],&nbsp;<font color="#00007f">6</font>,&nbsp;<font color="#00007f">10</font>);<br />
print_matrix([<font color="#0000ff">@test</font>]);<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;end</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></pre></div>

Output:
<pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[28, 29, 30, 31, 32, 33, 34, 35, 36, 11]
[27, 48, 49, 50, 51, 52, 53, 54, 37, 12]
[26, 47, 60, 59, 58, 57, 56, 55, 38, 13]
[25, 46, 45, 44, 43, 42, 41, 40, 39, 14]
[24, 23, 22, 21, 20, 19, 18, 17, 16, 15]
test end

</pre>
</div>

<div>The codes for this subroutine (<tt>&amp;matrixize</tt>) largely reuse that in <tt>&amp;flat</tt>.</div><div><br /></div>

<h5>Dissatifaction</h5>

<div><ol><li>As said, can one make a more maintainable and concise version of <tt>&amp;matrixize</tt> and <tt>&amp;flat</tt>? (A bit more thought: the current <tt>&amp;matrixize</tt> has only clockwise version.)</li><li>I could set every initial term as <tt>0</tt>, <tt>'z'</tt>, <tt>'.'</tt> or <tt>undef</tt>, etc. , hence skipped <tt>@helper_mat</tt> with little amount of typing. Is there a case which a <tt>@helper_mat</tt> is really need?</li><li><tt>$success</tt> changes once or none for each occupant of the 
matrix (a note for more preciseness: except those of the "perimeter" of 
the matrix). Are there any cases which a <tt>$success</tt> is need to change twice? (Or change with respect to a task with more subtlies?)</li></ol></div>

<div>For the latter two questions, I am thinking whether irregular 2D boards can make full use of <tt>@helper_mat</tt> and <tt>$success</tt>. But <u>not</u> every irregular 2D polyomino can have a spiral path traversing each grid... </div>

<div>...</div>
<div>...</div>
<div>...</div>

<hr>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Stay alert and healthy! □</p>


<div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt></i>
</div>


<hr>
<pre>Irregular boards:

sample input 1:
######### 
# * * x #
# * * * # 
# * * * # 
# * * x # 
#########

sample output 1:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 5 4 # 
# 7 6 x # 
#########

sample input 2:
######### 
# * * x #
# * * * # 
# * * * # 
# x * * # 
#########

sample output 2:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 7 4 # 
# x 6 5 # 
#########

sample input 3:
######### 
# * * * #
# * * * # 
# x * * # 
# x * * # 
#########

sample output 3:
######### 
# 0 1 2 #
# 9 8 3 # 
# x 7 4 # 
# x 6 5 # 
#########
</pre>




</div>]]>
        
    </content>
</entry>
  <entry>
    <title>A few tips for Perl on Docker and Kubernetes</title>
    <link rel="alternate" href="https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/davorg"&gt;@davorg&lt;/a&gt;
 started a thread on the FB &lt;a href="https://web.facebook.com/groups/perlcommunity/permalink/877301896410771/"&gt;Perl Community&lt;/a&gt; and &lt;a href="https://web.facebook.com/groups/perlprogrammers/permalink/3786053688094058/"&gt;Perl Programmers&lt;/a&gt; about &lt;a href="https://hub.docker.com/_/perl"&gt;docker-perl&lt;/a&gt;, and as its maintainer, I'm overdue sharing some tips about it so might as well write them here now:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-custom-nametag-for-perl-images-you-use" class="anchor"&gt;
  &lt;/a&gt;
  Use a custom name/tag for Perl images you use
&lt;/h3&gt;

&lt;p&gt;As documented in the Docker Hub, one can use the &lt;code&gt;perl&lt;/code&gt; image with something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; perl perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'say "hi there from Docker!"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While doing this is enough for simple or exploratory cases, it is inadequate for development or deployment scenarios, as &lt;code&gt;perl&lt;/code&gt; alone will pull the latest Perl image &lt;em&gt;build&lt;/em&gt; of the latest supported Perl version (which is &lt;code&gt;5.32.0&lt;/code&gt; &lt;em&gt;now&lt;/em&gt; but could be different later on.)  Fortunately, docker-perl provides &lt;em&gt;tags&lt;/em&gt; to indicate specific versions (as well as options like &lt;code&gt;:threaded&lt;/code&gt;) or size variants (like &lt;code&gt;:slim&lt;/code&gt;) so one can also do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl:5.32-buster
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; perl:5.32-buster perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'say qq{hi again!}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is another concern though: while Docker images have tags, these tags are &lt;em&gt;floating&lt;/em&gt; in the sense that they don't always point to the same underlying image layer at creation time, as tags can be updated to point to another layer.  This is best seen in the &lt;code&gt;:latest&lt;/code&gt; tag which Docker uses by default when calling images with their bare names, but this behavior is also present in any other tags like &lt;code&gt;:5&lt;/code&gt; which is pointing currently to &lt;code&gt;:5.32.0&lt;/code&gt;, but might later be updated to point to &lt;code&gt;:5.32.1&lt;/code&gt; or even &lt;code&gt;:5.34.0&lt;/code&gt;, when the &lt;a href="https://github.com/docker-library/official-images/blob/master/library/perl"&gt;perl manifest on docker-library/official-images&lt;/a&gt; is updated.&lt;/p&gt;

&lt;p&gt;These tags also get updated indirectly by way of updates on their &lt;em&gt;base&lt;/em&gt; images; as docker-perl uses the &lt;a href="https://hub.docker.com/_/buildpack-deps"&gt;&lt;code&gt;buildpack-deps&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://hub.docker.com/_/debian/"&gt;&lt;code&gt;debian:slim&lt;/code&gt;&lt;/a&gt; base images, when these get updated for security patches, these patches will eventually make their way into the &lt;code&gt;perl&lt;/code&gt; images as well through the &lt;a href="https://doi-janky.infosiftr.net/job/multiarch/"&gt;official-images build tooling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For cases that require finer control of images, it might be helpful then to use a custom image name, tag, or both, when using docker-perl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl:5.32-slim-threaded-buster
docker tag perl:5.32-slim-threaded-buster myorg/perl:5.32
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; myorg/perl:5.32 perl &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'printf "hello from myorg/perl v%vd!\n", $^V'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows for some independence for updates and development between the &lt;code&gt;perl&lt;/code&gt; published on Docker Hub and &lt;code&gt;myorg&lt;/code&gt;'s custom &lt;code&gt;perl&lt;/code&gt; image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t myorg/myapp:dev .&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; myorg/perl:5.32&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cpanm &lt;span class="nt"&gt;--installdeps&lt;/span&gt; .
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["perl", "myapp.pl"]&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#consider-keeping-a-localprivate-registry-to-host-perl-images" class="anchor"&gt;
  &lt;/a&gt;
  Consider keeping a local/private registry to host Perl images
&lt;/h3&gt;

&lt;p&gt;Using the perl images (especially like in the previous section) means that these will be copied into the local Docker host image storage, usually in &lt;code&gt;/var/lib/docker/images&lt;/code&gt; but could vary depending on what &lt;a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/"&gt;storage driver&lt;/a&gt; your host is using.  While this is usually enough in simple cases, consider that the base &lt;code&gt;perl&lt;/code&gt; image is usually big (around 700-800MB unpacked,) so pulling this image afresh over multiple container hosts on a network will probably be wasteful.&lt;/p&gt;

&lt;p&gt;Hence it is usually recommended to have some kind of local or private &lt;em&gt;registry&lt;/em&gt; in the host or on a network if frequently working with containers (and more so if internet connectivity is slower/expensive.)  There are several approaches to do this, and I've written about these before in my old blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zakame.net/blog/2017/12/composing-a-docker-hub-mirror-and-private-registry.html"&gt;Composing a Docker Hub mirror and private registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zakame.net/blog/2017/07/mirroring-the-docker-hub.html"&gt;Mirroring the Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nowadays though, there are more options for using local/private registries: for example, if you have a Kubernetes cluster running in your network (or even as a small setup like &lt;a href="https://microk8s.io"&gt;microk8s&lt;/a&gt;, or an internal Docker container cluster using &lt;a href="https://kind.sigs.k8s.io"&gt;KinD&lt;/a&gt; or &lt;a href="https://k3d.io"&gt;k3d&lt;/a&gt;,) there's usually an addon &lt;br&gt;
that enables a local registry on the cluster.  Here's &lt;a href="https://microk8s.io/docs/registry-built-in"&gt;an example&lt;/a&gt; for microk8s, which I extended for my own local network to be served under a &lt;a href="https://kubernetes.github.io/ingress-nginx/examples/tls-termination/"&gt;TLS ingress&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;microk8s &lt;span class="nb"&gt;enable &lt;/span&gt;registry
microk8s kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_SVC&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: default
spec:
  # microk8s deploys registry in its own namespace, so reach out
  externalName: registry.container-registry.svc.cluster.local
  ports:
  - name: registry
    port: 5000
    protocol: TCP
    targetPort: 5000
  type: ExternalName
&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_SVC
&lt;/span&gt;microk8s kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_INGRESS&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: registry
  namespace: default
spec:
  rules:
  # I don't own home.example btw, just for illustration;
  # I use globally-accessible subdomains pointing to private IP
  - host: registry.home.example
    http:
      paths:
      - backend:
          serviceName: registry
          servicePort: 5000
  tls:
  - hosts:
    - registry.home.example
    secretName: wildcard-home-example
&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_INGRESS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I have a &lt;a href="https://letsencrypt.org"&gt;LetsEncrypt&lt;/a&gt; wildcard SSL cert installed and maintained on my microk8s via &lt;a href="https://cert-manager.io"&gt;cert-manager&lt;/a&gt;, so this lets me push to this registry anywhere on my local network as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push myorg/perl:5.32 registry.home.example/myorg/perl:5.32
docker push myorg/myapp:dev registry.home.example/myorg/myapp:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and on somewhere else which might be running &lt;a href="https://podman.io"&gt;Podman&lt;/a&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;podman run &lt;span class="nt"&gt;-it&lt;/span&gt; registry.home.example/myorg/perl:5.32 perl &lt;span class="nt"&gt;-V&lt;/span&gt;
podman run &lt;span class="nt"&gt;-d&lt;/span&gt; registry.home.example/myorg/myapp:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It also works on authoring &lt;code&gt;Dockerfile&lt;/code&gt;s, especially useful when implementing GitOps workflows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t myorg/mojo:8.65&lt;/span&gt;
&lt;span class="c"&gt;# docker push myorg/mojo:8.65 registry.home.example/myorg/mojo:8.65&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; registry.home.example/myorg/perl:5.32&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cpanm Mojolicious@8.65
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/local/bin/mojo", "daemon"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For more sophisticated/production deployments, consider using &lt;a href="https://goharbor.io/"&gt;Harbor&lt;/a&gt; or vendors such as &lt;a href="https://aws.amazon.com/ecr/"&gt;Amazon ECR&lt;/a&gt;, &lt;a href="https://cloud.google.com/container-registry/"&gt;Google Container Registry&lt;/a&gt; or &lt;a href="https://quay.io/"&gt;Red Hat Quay&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-container-entrypoint-for-proper-signals-handling-in-perl" class="anchor"&gt;
  &lt;/a&gt;
  Use container entrypoint for proper signals handling in Perl
&lt;/h3&gt;

&lt;p&gt;This is already documented in the &lt;a href="https://github.com/docker-library/docs/tree/master/perl#signal-handling-behavior-notice"&gt;official-images docs&lt;/a&gt; for perl, but bears repeating here: containers don't provide a &lt;em&gt;parent init process&lt;/em&gt; by default, which means that when starting a new container, any &lt;a href="https://docs.docker.com/engine/reference/builder/#entrypoint"&gt;ENTRYPOINT&lt;/a&gt; or &lt;a href="https://docs.docker.com/engine/reference/builder/#cmd"&gt;CMD&lt;/a&gt; set in the image the container will boot from will usually become the parent process within this container.  This is important to note here for Perl (and also for other languages) as these tend to fall back to their parent init process for handling signals, so without this, it can appear to become unresponsive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run perl:5.32 perl -E 'sleep 300'
^C
[refuses to die, even if sent SIGINT like above]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is particularly important for Kubernetes, as its &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/"&gt;container pod lifecycle&lt;/a&gt; can use signals to probe for liveness or readiness of containers, and a running pod/container can seem to "hang" around indefinitely if these signals aren't handled correctly.&lt;/p&gt;

&lt;p&gt;For perl, one needs to install a &lt;a href="https://perldoc.pl/perlipc#Signals"&gt;&lt;code&gt;%SIG&lt;/code&gt; handler&lt;/a&gt; if they want/need to run perl directly as PID 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run perl:5.32 perl -E '$SIG{TERM} = sub { $sig++; say "recv TERM" }; sleep 300; say "waking up" if $sig'
^C
waking up
recv TERM
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For most normal deployments however, it is easier to use a tool like &lt;a href="https://github.com/krallin/tini"&gt;tini&lt;/a&gt;, &lt;a href="https://github.com/openSUSE/catatonit"&gt;catatonit&lt;/a&gt;, or &lt;a href="https://github.com/Yelp/dumb-init"&gt;dumb-init&lt;/a&gt; for the container's &lt;code&gt;ENTRYPOINT&lt;/code&gt;, alongside your perl script/executable in &lt;code&gt;CMD&lt;/code&gt;, for example this small &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; demo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t mojo-with-tini:dev .&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; perl:5.32-buster&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--no-install-recommends&lt;/span&gt; tini &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    cpanm Mojolicious
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/tini", "--"]&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/local/bin/mojo", "daemon"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For Kubernetes, one can also set the &lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes"&gt;&lt;code&gt;command&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;&lt;/a&gt; for a pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;MOJO_POD&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: v1
kind: Pod
metadata:
  name: mojo-with-tini-demo
  labels:
    purpose: demonstrate-perl-signal-handling
spec:
  containers:
  - name: mojo-with-tini-demo-container
    image: mojo-with-tini:dev
    # redundant as we already set these in the Dockerfile above,
    # but showing here for illustration
    command: ["/usr/bin/tini", "--"]
    args: ["/usr/local/bin/mojo", "daemon"]
&lt;/span&gt;&lt;span class="no"&gt;MOJO_POD
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outro" class="anchor"&gt;
  &lt;/a&gt;
  Outro
&lt;/h3&gt;

&lt;p&gt;There's a few more tips on the queue that I'd write more here but this post is getting rather long now, so maybe later.&lt;/p&gt;

&lt;p&gt;I'd love to hear more about how people use docker-perl, and especially more about how make developing Perl projects on container environments easier!&lt;/p&gt;

</content>
    <author>
      <name>Zak B. Elep</name>
    </author>
    <id>https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg</id>
    <published>2020-11-29T11:49:11Z</published>
    <updated>2020-11-29T11:49:11Z</updated>
    <category term="perl"/>
    <category term="docker"/>
    <category term="kubernetes"/>
    <category term="devops"/>
  </entry>
  <entry>
    <title>Weekly Challenge #088 Task #1 :: (Perl, Raku and More) </title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-088-task-1-perl-raku-and-more-1nlf" type="text/html"/>
    <content type="html"></content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/weekly-challenge-088-task-1-perl-raku-and-more-1nlf</id>
    <published>2020-11-29T11:44:04Z</published>
    <updated>2020-11-29T11:44:04Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="perlweeklychallenge"/>
    <category term="challenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/samir_parikh/2020/11/perl-weekly-challenge-088.html"/>
    <id>tag:blogs.perl.org,2020:/users/samir_parikh//3527.9968</id>

    <published>2020-11-29T13:04:02Z</published>
    <updated>2020-11-29T03:13:25Z</updated>

    <summary>Despite the holiday week here in the U.S., I was able to tackle this week's Perl Weekly Challenge. I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come...</summary>
    <author>
        <name>Samir Parikh</name>
        <uri>https://samirparikh.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/samir_parikh/">
        <![CDATA[<p>Despite the holiday week here in the U.S., I was able to tackle this week's <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a>.  I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come up with a novel solution (for me!), but it also provided an opportunity for me to leverage two areas of Perl programming that have been a real challenge for me:  recursion and references.  The deadline to submit solutions for this challenge is <a href="https://www.timeanddate.com/countdown/generic?iso=20201129T2359&amp;p0=136&amp;msg=Perl+Weekly+Challenge+088+Deadline&amp;font=serif">fast approaching</a> so if you haven't solved it yourself yet, you may want to come back to this post later.</p>

<h2>Task 1</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK1">Task #1</a>, "Array of Product", asks the following:</p>

<blockquote>
  <p>You are given an array of positive integers <code>@N</code>.</p>

<p>Write a script to return an array <code>@M</code> where <code>$M[i]</code> is the product of all elements of <code>@N</code> except the index <code>$N[i]</code>.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        @N = (5, 2, 1, 4, 3)
    Output:
        @M = (24, 60, 120, 30, 40)

        $M[0] = 2 x 1 x 4 x 3 = 24
        $M[1] = 5 x 1 x 4 x 3 = 60
        $M[2] = 5 x 2 x 4 x 3 = 120
        $M[3] = 5 x 2 x 1 x 3 = 30
        $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        @N = (2, 1, 4, 3)
    Output:
        @M = (12, 24, 6, 8)

        $M[0] = 1 x 4 x 3 = 12
        $M[1] = 2 x 4 x 3 = 24
        $M[2] = 2 x 1 x 3 = 6
        $M[3] = 2 x 1 x 4 = 8
</code></pre>

<p>Like many of my prior solutions, I settled for using a brute force technique to solve this task.  I used an outer <code>for</code> loop iterating a variable <code>$i</code> which moves through each element in the input array <code>@N</code>.  An inner <code>for</code> loop using the variable <code>$j</code> does the same thing.  Both loops start at index <code>0</code> and go through the last index of the array.  An <code>if</code> statement checks to see whether or not <code>$i</code> and <code>$j</code> are equal.  If they are <em>not</em>, we update the running <code>$product</code> variable which is keeping track of our current product for <code>$M[0]</code>, <code>$M[1]</code>, etc. to satisfy the "product of all elements of <code>@N</code> except the index <code>$N[i]</code>" portion of the requirement.  If <code>i$</code> and <code>$j</code> are equal, we just move on to the next value of <code>$j</code>.  Once we are done executing the inner loop for a given value of <code>$i</code>, we update our output array <code>@M</code> by <code>push</code>ing the current value of <code>$product</code> into the end of the array <code>@M</code>.</p>

<p>This was actually the easy part.</p>

<p>The difficult part was formatting the output to match what was given in the challenge.  Not only do you have to print the summary of the products of the elements, e.g.:</p>

<pre><code>@M = (24, 60, 120, 30, 40)
</code></pre>

<p>but you also have to print the individual products for each element of <code>@M</code>:</p>

<pre><code>$M[0] = 2 x 1 x 4 x 3 = 24
$M[1] = 5 x 1 x 4 x 3 = 60
$M[2] = 5 x 2 x 4 x 3 = 120
$M[3] = 5 x 2 x 1 x 3 = 30
$M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p>The tricky part is you have to print the summary <strong>before</strong> the individual line items have been determined (i.e. you don't know what the final elements of the array <code>@M</code> are until you calculate them all).</p>

<p>To solve this portion of the problem, I relied on two string variables:  <code>$m_string</code> and <code>$output_string</code>.  The former string contains each individual product equation for each element of the array <code>@M</code>:</p>

<pre><code>$M[2] = 5 x 2 x 4 x 3 = 120
</code></pre>

<p>I update <code>$m_string</code> by "building it up" during each iteration of the inner <code>for my $j</code> loop by adding each element of the input array <code>@N</code> and the multiplication sign ("<code>x</code>").  The multiplication symbol is printed <em>before</em> each number and thus is not required for the first element, hence the <code>if ($first)</code> statement.  At the conclusion of the inner <code>for</code> loop, I update <code>$m_string</code> with the final product:</p>

<pre><code>$m_string .= " = " . $product;
</code></pre>

<p>and then append the whole string to <code>$output_string</code> which contains the overall detailed line items:</p>

<pre><code>$output_string .= "\t". $m_string . "\n";
</code></pre>

<p>Once we are done executing through both of our loops, I can then print the summary of the <code>@M</code> array followed by the detailed line items which are stored in <code>$output_string</code>.  I thought this was a pretty clever solution (for me) to storing the intermediate results before we had to print them.  Originally, I was going to write the intermediate results to a temporary file but then thought better of it.  Putting it all together, we come up with our solution:</p>

<pre><code>use warnings;
use strict;
use diagnostics;
use v5.10;

# run program as:
# $ ./ch-1.pl "100, 4, 50, 3, 2"
my @N = split /, /, $ARGV[0];
my @M;
my $output_string = "";

for (my $i = 0; $i &lt; scalar(@N); $i++) {
    my $product = 1;
    my $m_string = "\$M[" . $i . "] = ";
    my $first = 1;
    for (my $j = 0; $j &lt; scalar(@N); $j++) {
        my $print_x;
        if ($i != $j) {
            $product = $product * $N[$j];
            if ($first) {
                $print_x = "";
                $first = 0;
            } else {
                $print_x = " x ";
            }
            $m_string .= $print_x . $N[$j]; 
        }
    }
    push (@M, $product);
    $m_string .= " = " . $product;
    $output_string .= "\t". $m_string . "\n";
}

say "Input:\n\t\@N = (", join(", ", @N), ")";
say "Output:";
say "\t\@M = (", join(", ", @M), ")\n";
say "$output_string";
</code></pre>

<h2>Task 2</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK2">Task #2</a>, "Spiral Matrix", was the one I was both most looking forward to and dreading at the same time!  The task states: </p>

<blockquote>
  <p>You are given <code>m x n</code> matrix of positive integers.</p>

<p>Write a script to print a spiral matrix as a list.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        [ 1, 2, 3 ]
        [ 4, 5, 6 ]
        [ 7, 8, 9 ]
    Output:
        [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        [  1,  2,  3,  4 ]
        [  5,  6,  7,  8 ]
        [  9, 10, 11, 12 ]
        [ 13, 14, 15, 16 ]
    Output:
        [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<p>I was excited because I've solved similar spiral challenges like this before using Python, specifically <a href="https://projecteuler.net/problem=28">Problem 28</a> of the <a href="https://projecteuler.net/about">Project Euler</a> series of coding problems.  In my version, I used a series of <code>for</code> loops to work my way around a two-dimensional array.  But for this task of Challenge 088, I wanted to try my hand at using a recursive solution which has been a <a href="https://samirparikh.com/blog/permutations-and-recursion.html">pain point</a> for me.  I also got the sense that this problem would also require me to work with Perl references and multi-dimensional arrays, other areas where I've <a href="https://www.perlmonks.org/?node_id=11123691">been</a> <a href="https://www.perlmonks.org/?node_id=11124042">struggling</a>.  But despite these reservations, I plowed ahead and here is what I did.</p>

<p>The main portion of the solution resides in the subroutine <code>return_spiral</code>.  I pass it a two-dimensional array, <code>@array</code>, which is formulated using the subroutine <code>define_matrix</code> which I've <a href="https://samirparikh.com/blog/perl-weekly-challenge-084.html">used</a> <a href="https://samirparikh.com/blog/perl-weekly-challenge-087.html">before</a>.  The purpose of <code>return_spiral</code> is to return an array, <code>@spiral</code>, comprised solely of those elements around the perimeter of <code>@array</code>, starting at the top-left corner and then moving in a clockwise fashion, plus the resulting two-dimensional matrix that remains.  For example, if we were to pass it the array <code>@array</code> in Example 2 from above:</p>

<pre><code>[  1,  2,  3,  4 ]
[  5,  6,  7,  8 ]
[  9, 10, 11, 12 ]
[ 13, 14, 15, 16 ]
</code></pre>

<p>the subroutine should return a simple array <code>@spiral</code>:</p>

<pre><code>(1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5)
</code></pre>

<p>and the remaining two-dimensional array:</p>

<pre><code>[  6,  7 ]
[ 10, 11 ]
</code></pre>

<p>which gets passed back to the subroutine in a recursive fashion.  To make it recursive, I'd need a statement like:</p>

<pre><code>return ( @spiral, &amp;return_spiral(@array) );
</code></pre>

<p>To get the elements around the perimeter of the array, there are four steps (since there are four "sides" to the matrix):</p>

<ol>
<li>Get the elements in the first row using the statement <code>push ( @spiral, @{$array[0]} )</code>.</li>
<li>Get the elements in the right column, going down, using the <code>for my $y</code> loop</li>
<li>Get the elements of the last row (in reverse order) using the statement <code>push ( @spiral, reverse ( @{$array[$#array]} ) )</code>.</li>
<li>Get the elements of the left column, going up, using the <code>for my $i</code> loop.</li>
</ol>

<p>All recursive functions need what is called a "base case", or terminating condition.  Otherwise, you'd end up in an endless loop.  For my subroutine, I actually came up with four base cases which would cause the subroutine to ultimately finish by just returning the spiral portion of the array.  Those four cases are:</p>

<ol>
<li>The array has just one row.</li>
<li>The array has just one column.</li>
<li>The array has just two rows.</li>
<li>The array has just two columns. </li>
</ol>

<p>I check the first two conditions near the beginning of the subroutine.  Assuming that the array passed to <code>return_spiral</code> has at least two rows and two columns, I check the third and fourth terminating conditions after we've done one "lap" around the array to define <code>@spiral</code>.  The checks for the third and fourth base cases is done by the <code>if</code> statement:</p>

<pre><code>if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2)
</code></pre>

<p>If that <code>if</code> statement is true, that means that the array that was originally passed to <code>return_spiral</code> only had two rows or two columns, in which case one "lap" around the array is all we need.</p>

<p>If we haven't hit a base case, the subroutine "trims" off the peripheral elements we've populated in the array <code>@sprial</code> using a series of <code>shift</code> and <code>pop</code> statements and concludes with returning both the <code>@sprial</code> array (which contains all of the elements around the perimeter of the original array) and by recursively calling the subroutine itself with the remaining interior elements of <code>@array</code>.  The resulting script becomes:</p>

<pre><code>use v5.10;
use warnings;
use strict;

# assumptions:
# matrix does not have to be square
# spiral is clockwise

sub define_matrix {
    open (INPUT, '&lt;', $_[0]) or die "$!: could not open file $_[0]";
    say "Input:";
    my (@line, @matrix);
    while (&lt;INPUT&gt;) {
        chomp;
        say $_;
        s/\s+//g; # remove any whitespace
        s/\[//;
        s/\]//;
        @line = split /,/, $_;
        push (@matrix, [@line]);
    }
    close (INPUT) or die "$!: could not close file $_[0]";
    return ( @matrix );
}

sub return_spiral {
    my @array = @_;
    my @spiral;
# handle special cases
# just one row
    if (scalar(@array) == 1) {
        return ( @{$array[0]} );
# just one column
    } elsif ( scalar ( @{$array[0]} ) == 1 ) {
        for (my $i = 0; $i &lt; scalar(@array); $i++) {
            push ( @spiral, @{$array[$i]}[0] );
        }
        return ( @spiral );
# we have at least a 2 x 2 array
    } else {
# get first row
        push ( @spiral, @{$array[0]} );
# get right column
        my $right_ci = scalar ( @{$array[0]} ) - 1;
        for (my $y = 1; $y &lt; scalar ( @array ); $y++) {
            push ( @spiral, @{$array[$y]}[$right_ci] );
        }
# remove last element from last row
        pop ( @{$array[$#array]} );
# get last row in reversed order
        push ( @spiral, reverse ( @{$array[$#array]} ) );
# get left column
        for (my $i = ($#array - 1); $i &gt; 0; $i--) {
            push ( @spiral, @{$array[$i]}[0] );
        }
# check if resulting array is empty (i.e. we were originally sent
# just a two-row or two-column array to begin with
        if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2) {
            return ( @spiral );
        } else {
# trim array
# trim top row:
            shift @array;
# trim bottom row:
            pop @array;
# remove first and last element from remaining rows
            for (my $i = 0; $i &lt; scalar(@array); $i++) {
                shift ( @{$array[$i]} );
                pop   ( @{$array[$i]} );
            }
            return ( @spiral, &amp;return_spiral(@array) );
        }
    }
}

my @matrix = &amp;define_matrix($ARGV[0]);
my @spiral2 = &amp;return_spiral(@matrix);
say "Output:";
say "[ ", join(", ", @spiral2), " ]";
</code></pre>

<p>I suppose that I could have combined the "trim" operations with the statements where I traverse the perimeter in the first place to populate <code>@spiral</code> to tighten up the script, but in the end, that wasn't an optimization I had the energy to pursue.</p>

<p>As I said before, I really enjoyed working on this week's tasks and solving the programming and algorithmic challenges they presented.  I'm eager to see how others in the Perl Weekly Challenge community came up with their own solution as there is always so much to learn from them.  Until next time!</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3134593967427671253</id>
    <published>2020-11-28T16:55:00.000+01:00</published>
    <updated>2020-11-28T16:55:47.550+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvii) 9 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.995' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.995&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 0.994 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.005&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.004 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2020-11-23&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9711' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9711&lt;/strong&gt; on 2020-11-27&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.9708 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JBERGER/Mojo-JWT-0.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token the Mojo way &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.09&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.08 was 1 year, 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004004&lt;/strong&gt; on 2020-11-25&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004003 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Package-Stash-0.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Package::Stash&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Routines for manipulating stashes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.39&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.38 was 1 year, 10 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.20&lt;/strong&gt; on 2020-11-24&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.18 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.63&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.61 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3134593967427671253/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html" title="(cccxvii) 9 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8775178624719885</id>
    <published>2020-11-28T16:52:00.002+01:00</published>
    <updated>2020-11-28T16:52:10.101+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliv) metacpan weekly report - Plack</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Plack"&gt;Plack&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/28 15:51:00 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance" target="_blank"&gt;Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance&lt;/a&gt; - Because there is nothing like being right&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::XML::DocBook::Builder" target="_blank"&gt;App::XML::DocBook::Builder&lt;/a&gt; - Build DocBook/XML files.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; - A toolkit to help sign and verify XML Digital Signatures.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amon2" target="_blank"&gt;Amon2&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CallBackery" target="_blank"&gt;CallBackery&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Tiny" target="_blank"&gt;Dancer2::Plugin::Auth::Tiny&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Database" target="_blank"&gt;Dancer2::Plugin::Database&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Locale::Wolowitz" target="_blank"&gt;Dancer2::Plugin::Locale::Wolowitz&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Maketext" target="_blank"&gt;Locale::Maketext&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Wolowitz" target="_blank"&gt;Locale::Wolowitz&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any::Adapter::TAP" target="_blank"&gt;Log::Any::Adapter::TAP&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+2=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Command::Author::generate::cpanfile" target="_blank"&gt;Mojolicious::Command::Author::generate::cpanfile&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::API::REST" target="_blank"&gt;Net::API::REST&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::NDBin" target="_blank"&gt;PDL::NDBin&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=364)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+3=218)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE" target="_blank"&gt;POE&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TheSchwartz" target="_blank"&gt;TheSchwartz&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::Indexed" target="_blank"&gt;Tie::Hash::Indexed&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Hash::XS" target="_blank"&gt;XML::Hash::XS&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8775178624719885/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html" title="(cdxliv) metacpan weekly report - Plack"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7978604697808215360</id>
    <published>2020-11-28T16:38:00.000+01:00</published>
    <updated>2020-11-28T16:38:51.558+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-11-28 15:35:26 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993183" target="_blank"&gt;Perl: Best way to open a file exclusively?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64956649" target="_blank"&gt;Store and read string with newline from Config::Simple config file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65012690" target="_blank"&gt;(Windows 10) Trying to Install Perl Modules both PPM and CPAN fail?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64957598" target="_blank"&gt;atom feed: script to combine multiple &amp;lt;author&amp;gt; items into one?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64974031" target="_blank"&gt;Why does File::Slurp get UTF8 characters wrong when I use open ':std', ':encoding(UTF-8)';?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993281" target="_blank"&gt;create a hash of occurrences in an array with map&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64963938" target="_blank"&gt;What difference does curly brace make in accessing an object&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64971546" target="_blank"&gt;How do I change a Perl Readonly scalar in a module for a unit test?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65002289" target="_blank"&gt;Perl load module BEGIN&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64949457" target="_blank"&gt;Monitoring stdout of a forked process in perl by character&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7978604697808215360/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html" title="(cdlxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Book review "Perl and LWP"</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/book-review-perl-and-lwp-emd" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6qBTjWdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dmwkzfwpbcf04zhvbdna.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6qBTjWdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dmwkzfwpbcf04zhvbdna.jpg" alt="Perl and LWP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The book is available &lt;a href="http://lwp.interglacial.com"&gt;online for free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you a lot &lt;strong&gt;O Reilly&lt;/strong&gt; and &lt;strong&gt;Sean W. Burke&lt;/strong&gt; for that !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;A lot of weaknesses of this book are due to the age but I won't refrain to report them with honesty :)&lt;/p&gt;

&lt;p&gt;I'm very grateful to the person that took time to write this book: &lt;strong&gt;Sean W. Burke&lt;/strong&gt; !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tell-me-about-history" class="anchor"&gt;
  &lt;/a&gt;
  Tell me about history
&lt;/h2&gt;

&lt;p&gt;At the beginning, Sean reminds us a lot of LWP and webservers history and I personnally loved it. &lt;/p&gt;

&lt;p&gt;For my point of view, IT sciences are very sensitive to "technologies hypes" and things seems to go faster and faster these days (probably just an impression, I'm too young to judge) but I personnally love to read about history and oldies which created the present world.&lt;/p&gt;

&lt;p&gt;Some people can think about this part as a weakness, but I definitely loved it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gandpa" class="anchor"&gt;
  &lt;/a&gt;
  Gandpa
&lt;/h2&gt;

&lt;p&gt;Quickly we face some outdated websites 😧&lt;/p&gt;

&lt;p&gt;Among other old stuff, you will have fun with &lt;strong&gt;HTML code from 2002&lt;/strong&gt; like table with captiatlized tags : &lt;code&gt;&amp;lt;TD ALIGN=...&lt;/code&gt; or &lt;code&gt;&amp;lt;BODY BGCOLOR="#aabbcc" BACKGROUND="img/bg.jpeg" ...&lt;/code&gt; or again &lt;code&gt;&amp;lt;B CLASS="h3"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Be prepared !! 😁&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evFmdMM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o6ptx9c51iu9hli7nmi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evFmdMM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o6ptx9c51iu9hli7nmi.jpg" alt="Old HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some paragraphs from chapter 3 are dedicated to explanations about HTML forms elements like &lt;strong&gt;textarea&lt;/strong&gt;, &lt;strong&gt;submit&lt;/strong&gt; or &lt;strong&gt;hidden fields&lt;/strong&gt; (not really outdated but I felt like a jump in the past 😃)&lt;/p&gt;

&lt;p&gt;And what about &lt;strong&gt;Netscapes 4.76&lt;/strong&gt; 😖 used as browser (released in 2000).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43A6u7DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvh18ec6afhbbwx7kq0q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43A6u7DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvh18ec6afhbbwx7kq0q.jpg" alt="Netscape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes Sean is coding like my grandma (&lt;code&gt;regularize_hostname&lt;/code&gt; to canonicalize hostname should be taken from a module, not coded by hand with regex). &lt;/p&gt;

&lt;p&gt;...This remark does not mean that I'm not coding like my grandma too ! 😁&lt;/p&gt;

&lt;p&gt;There is only one edition of this book and that's why it is so outdated :/&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-bits" class="anchor"&gt;
  &lt;/a&gt;
  Cool bits
&lt;/h2&gt;

&lt;p&gt;Stop critics, let's look at cool things from this book.&lt;/p&gt;

&lt;p&gt;I was very happy to learn that :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LWP manages a chained list of responses objects that we can use to check all the redirection flow.&lt;/li&gt;
&lt;li&gt;We can't do HEAD request on some resources like a CGI (OK it's CGI... but interesting bit anyway)&lt;/li&gt;
&lt;li&gt;The spec for HTML comments is very weird &lt;/li&gt;
&lt;li&gt;An attribute like &lt;code&gt;alt=bad dog!&lt;/code&gt; (without quote) could be interpreted as a boolean...&lt;/li&gt;
&lt;li&gt;Comments are pseudo elements&lt;/li&gt;
&lt;li&gt;The difference between UserAgent and Robot (read robots.txt + handle sleep time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I enjoyed the detailed sections about :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The parts of an URL&lt;/li&gt;
&lt;li&gt;The methods allowed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z719wDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zavk8bpyiyt14kp7q8d7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z719wDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zavk8bpyiyt14kp7q8d7.jpg" alt="Cool Man"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later the multiples sections about "reading the HTML" are interesting :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dig into HTML with regex 😨 (pandas were harmed during the write of this paragraph, even if I know about this &lt;a href="https://stackoverflow.com/a/4234491"&gt;famous post&lt;/a&gt; responding to this &lt;a href="https://stackoverflow.com/a/1732454"&gt;other famous post&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Parsing sequentially  with HTML::TokeParser&lt;/li&gt;
&lt;li&gt;Parsing HTML with HTML::TreeBuilder and tree access (2020 recommended approach, eventually with another module)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As well as the details about dumped tokeparser &lt;code&gt;get_token&lt;/code&gt; or &lt;code&gt;unget_token&lt;/code&gt; and token sequences.&lt;/p&gt;

&lt;p&gt;Or the parts about :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ordering of traversing&lt;/li&gt;
&lt;li&gt;Traversing recursively or by using a stack&lt;/li&gt;
&lt;li&gt;Modifying the HTML tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Later, we finally have some chapters about web basics like &lt;strong&gt;cookies&lt;/strong&gt; and &lt;strong&gt;credentials&lt;/strong&gt; (basic).&lt;/p&gt;

&lt;p&gt;The spider chapter is cool and appendix are interesting also even if it's only flat documentation.&lt;/p&gt;

&lt;p&gt;I really like the mindset of Sean, UTF8 and unicode are well mentionned and pushed, Microsoft and their non standart politics are well adressed and I found very funny the reference to &lt;code&gt;All your pies are belong to us.&lt;/code&gt; 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#surprising" class="anchor"&gt;
  &lt;/a&gt;
  Surprising
&lt;/h2&gt;

&lt;p&gt;Something surprising was to see &lt;strong&gt;Sean&lt;/strong&gt; using suck.com (not related to anything NSFW) as a basis of an example. Bad choice in my humble opinion 😃&lt;/p&gt;

&lt;p&gt;There is &lt;strong&gt;A LOT&lt;/strong&gt; of retrieval of string in HTML using regex... 😨&lt;/p&gt;

&lt;p&gt;The disclaimer is present but very light and does not mention that it’s brittle and limited (for correctness : not completely true).&lt;/p&gt;

&lt;p&gt;I have no problem to do some dirty code  when we I do not need more that a quick-and-dirty implementation (no over-engineering for nothing)...&lt;/p&gt;

&lt;p&gt;...but these days everybody is very touchy with HTML and regex 😆&lt;/p&gt;

&lt;p&gt;Seems also that &lt;strong&gt;CSS selectors&lt;/strong&gt; were not in use in 2002 :/&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvzOb8i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mgt6ts8mavq0y0mj02d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvzOb8i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mgt6ts8mavq0y0mj02d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally the TPJ#17 article about OOP seemed for me totally off topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'm always a bit shy about using scraping because I feel like it's very brittle. I was hoping to see some advanced and robust webscraping methods in this book but it does not provides this at all.&lt;/p&gt;

&lt;p&gt;I basically read the whole book without skipping any section (sometimes just went faster on the code samples) so it's still worth to read book !&lt;/p&gt;

&lt;p&gt;You can get this and read it you will still learn interesting stuff but there are also probably some better alternatives today (I think about &lt;a href="https://leanpub.com/mojo_web_clients/"&gt;Mojolicious Web Clients&lt;/a&gt; but I haven't read it right now).&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/book-review-perl-and-lwp-emd</id>
    <published>2020-11-28T10:56:49Z</published>
    <updated>2020-11-28T10:56:49Z</updated>
    <category term="perl"/>
    <category term="books"/>
    <category term="lwp"/>
  </entry>
  <entry>
  <title>Use Perl::Tidy module in your application</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></summary>
  <updated>2020-11-27T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/use-perl-tidy-in-your-application"/>  <id>https://perlmaven.com/use-perl-tidy-in-your-application</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>CPAN Digger - CPAN Dashboard - CPAN Rocks</title>
  <summary type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></summary>
  <updated>2020-11-26T13:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-dashboard-rocks"/>  <id>https://perlmaven.com/cpan-digger-dashboard-rocks</id>
  <content type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Wie setzen wir die Gitlab-CI ein?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In meinem Artikel über die Optimierung von Docker-Images habe ich erwähnt, dass wir die »Gitlab-CI« einsetzen. In diesem Artikel beschreibe ich nun näher, was das eigentlich ist und welche Erfahrungen wir gemacht haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein</id>
    <published>2020-11-26T10:00:00Z</published>
    <updated>2020-11-26T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Array of Products and Spiral Matrices</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9966</id>

    <published>2020-11-25T23:07:28Z</published>
    <updated>2020-11-25T23:13:07Z</updated>

    <summary>These are some answers to the Week 88 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 88 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Array of Products</h2>

<p><em>You are given an array of positive integers @N.</em></p>

<p><em>Write a script to return an array @M where $M[i] is the product of all elements of @N except the index $N[i].</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    @N = (5, 2, 1, 4, 3)
Output:
    @M = (24, 60, 120, 30, 40)

    $M[0] = 2 x 1 x 4 x 3 = 24
    $M[1] = 5 x 1 x 4 x 3 = 60
    $M[2] = 5 x 2 x 4 x 3 = 120
    $M[3] = 5 x 2 x 1 x 3 = 30
    $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    @N = (2, 1, 4, 3)
Output:
    @M = (12, 24, 6, 8)

    $M[0] = 1 x 4 x 3 = 12
    $M[1] = 2 x 4 x 3 = 24
    $M[2] = 2 x 1 x 3 = 6
    $M[3] = 2 x 1 x 4 = 8
</code></pre>

<h3>Array of Products in Raku</h3>

<p>I immediately thought about two methods to solve this problem. Although I thought the second method was probably better, let me show first the first one.</p>

<p>The first way to do it is to traverse the input array and, for each item, multiply all items before with all items after and store the product in the equivalent position of the result array. Here we use the reduction metaoperator with multiplication, <code>[*]</code>, to compute the chained multiplication. And we use array slices to pick the relevant items to be multiplied. For some reason, array slice did not work properly for the first element of the array, so I computed it separately before entering the <code>for</code> loop.</p>

<pre><code>use v6;

my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my @result; 
    @result[0] = [*] @array[1..@array.end];
    for 1..@array.end -&gt; $i {
        @result[$i] = ([*] @array[0..$i-1]) * [*] (@array[$i+1..@array.end]);
    }
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the following output:</p>

<pre><code>$ raku array-of_products.raku
Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<p>There may be a better way to handle the special case of the first item of the list, but, rather than trying to improve it, I preferred to implement the second method. Here, the idea is to compute only once the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position. The code becomes slightly simpler, and the performance is also likely to be better, since we&#8217;re performing much less arithmetical operations overall (especially if the input array is somewhat large).</p>

<pre><code>my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my $product = [*] @array;
    my @result = map { $product / $_ }, @array;
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the same result as before:</p>

<pre><code>Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<h3>Array of Products in Perl</h3>

<p>This is a port to Perl of the method used in the second Rakudo script above: we compute the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ([5, 2, 1, 4, 3], [2, 1, 4, 3]);
for my $array_ref (@tests) {
    my $product = 1;
    $product *= $_ for @$array_ref;
    my @result = map $product / $_, @$array_ref;
    say "Input: @$array_ref";
    say "Result: @result";
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl array-of-products.pl
Input: 5 2 1 4 3
Result: 24 60 120 30 40
Input: 2 1 4 3
Result: 12 24 6 8
</code></pre>

<h2>Task 2: Spiral Matrix</h2>

<p><em>You are given <code>m x n</code> matrix of positive integers.</em></p>

<p><em>Write a script to print spiral matrix as list.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    [ 1, 2, 3 ]
    [ 4, 5, 6 ]
    [ 7, 8, 9 ]
Ouput:
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    [  1,  2,  3,  4 ]
    [  5,  6,  7,  8 ]
    [  9, 10, 11, 12 ]
    [ 13, 14, 15, 16 ]
Output:
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<h3>Spiral Matrix in Raku</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print-matrix</code> subroutine is a helper function to pretty print the input matrix. Note that, when applied to a list, the <a href="https://docs.raku.org/routine/fmt">fmt</a> method applies the formatting string to each element of the list (contrary to <code>sprintf</code>), so that there is no need to add a <code>map</code> to process each item of a matrix line. For example:</p>

<pre><code>say &lt;1 2 3 4&gt;.fmt("%04i");
</code></pre>

<p>will print:</p>

<pre><code>0001 0002 0003 0004
</code></pre>

<p>The main <code>loop</code> reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right); it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and it processes the first column (bottom to top) of the matrix. It then assign to <code>@matrix</code> a version of the original matrix with all values on the four edges removed. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<p>Note that the <code>:delete</code> adverb removes entirely the last item of an array, but it leaves a &#8220;hole&#8221; when applied to any other element of the array. </p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}

for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix[0];
        push @result, @matrix[$_][*-1]:delete for 1..@matrix.end;
        push @result, |(reverse @matrix[@matrix.end]:delete);
        last if @matrix.elems == 1;
        push @result, @matrix[$_][0]:delete for reverse 1..@matrix.end;
        @matrix = map { [$_[|(1..$_.end)]] }, @matrix[|(1..@matrix.end)];
        # print-matrix @matrix;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<p>We can make it slightly simpler by stripping out the used matrix edges as we go, using the <code>pop</code> and <code>shift</code> methods each time we use some values, so that we don&#8217;t have to reassign the <code>@matrix</code> at each iteration. This also simplifies the handling of array subscripts. In the code below, the only changes are in the <code>loop</code> block:</p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}
for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix.shift;
        push @result, @matrix[$_].pop for 0..@matrix.end;
        last unless @matrix.elems;
        push @result, |(reverse @matrix.pop);
        push @result, @matrix[$_].shift for reverse 0..@matrix.end;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This produces the same output as before:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<h3>Spiral Matrix in Perl</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print_matrix</code> subroutine is a helper function to pretty print the input matrix.</p>

<p>The main <code>while</code> loop reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right) and removes it from the matrix; it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and finally it processes the first column (bottom to top) of the matrix and removes it. 
After one iteration, the original matrix is stripped of all its edge items. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;


my @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ],
              [ [ 0..4 ], [ (5..9) ],  [ (10..14) ], [ (15..19) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ], [ (18..23) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ] ],
              [ [ 0..2 ], [ (4..6) ],  [ (8..10) ],  [ (12..14) ] ]
            );

# @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ] );

sub print_matrix {
    my @matrix = @{$_[0]};
    say "";
    say "[ ", (map { sprintf "% 3i", $_ } @$_), " ]" for @matrix;
    say "";
}

for my $m_ref (@tests) {
    print_matrix($m_ref);
    my @result;
    my @matrix = @$m_ref;
    while (1) {
        push @result, @{shift @matrix};
        last if scalar @matrix == 0;
        push @result, pop @{$matrix[$_]} for 0..$#matrix;
        push @result, reverse @{pop @matrix};
        push @result, shift @{$matrix[$_]} for reverse 0..$#matrix;
        last if @matrix == 0;
    }
    say join " ", @result;    
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>[   0  1  2  3 ]
[   4  5  6  7 ]
[   8  9 10 11 ]
[  12 13 14 15 ]

0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9

[   0  1  2  3  4 ]
[   5  6  7  8  9 ]
[  10 11 12 13 14 ]
[  15 16 17 18 19 ]

0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]
[  18 19 20 21 22 23 ]

0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]

0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10

[   0  1  2 ]
[   4  5  6 ]
[   8  9 10 ]
[  12 13 14 ]

0 1 2 6 10 14 13 12 8 4 5 9
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 6, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>GitLab CI for Perl projects</title>
  <summary type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></summary>
  <updated>2020-11-24T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/gitlab-ci"/>  <id>https://perlmaven.com/gitlab-ci</id>
  <content type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>My TPRCiC 2020 review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187" type="text/html"/>
    <content type="html">&lt;p&gt;(initially posted on my personal blog, that I'm closing in favor of dev.to :D)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIfVFZsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s34jbuc2ky9ic71ehy3j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIfVFZsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s34jbuc2ky9ic71ehy3j.jpg" alt="Steve O"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Sometimes bad things bring us good opportunities.&lt;/p&gt;

&lt;p&gt;This was the case this year with Covid and “The Perl Conference”. This major yearly Perl conference became available to remote people and therefore renamed “The Perl and Raku Conference In The Cloud”.&lt;/p&gt;

&lt;p&gt;The event was well announced and we were able to pay to support the organizational costs (what I have done), but it was even not mandatory (free broadcast on youtube).&lt;/p&gt;

&lt;p&gt;I was very excited by the planning, I remember having difficulties to choose between talks !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bw9U_QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16t9402t3zne0djyif1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bw9U_QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16t9402t3zne0djyif1a.png" alt="Mamy"&gt;&lt;/a&gt;&lt;br&gt;
(/me trying to choose between an amazing and a wonderful talk topic)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-we-are" class="anchor"&gt;
  &lt;/a&gt;
  Here we are
&lt;/h2&gt;

&lt;p&gt;Then finally the day has come and I was able to join Perl folks with the password shared one or two days before.&lt;/p&gt;

&lt;p&gt;I was waiting with decent expectation (to not say excitement) for the first talk.&lt;/p&gt;

&lt;p&gt;It consisted in a word from organizers followed by a keynote from Perl pumpking “Sawyer X”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fepg5jcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfgubinbjw78th92eocs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fepg5jcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfgubinbjw78th92eocs.jpeg" alt="Sawyer X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What could be best as an luxury “aperitif” 😄&lt;/p&gt;

&lt;p&gt;I was ready, well preapared, first TPC, first talk, let’s go.&lt;/p&gt;

&lt;p&gt;It was during this talk that was &lt;strong&gt;announced Perl 7&lt;/strong&gt; !!&lt;/p&gt;

&lt;p&gt;OMG, I was immediatly like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-25Li7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/698bnbc6v6ftrnjpxfr3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-25Li7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/698bnbc6v6ftrnjpxfr3.jpg" alt="Surprised"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everybody was very excited and happy all around, like me.&lt;/p&gt;

&lt;p&gt;This was my first TPC and the first talk I attended, later on I wondered myself if it was a bit “my fault” 😄&lt;/p&gt;

&lt;p&gt;If I decide to attend another TPC, what will be announced ? That we discovered aliens ?&lt;/p&gt;

&lt;p&gt;Later on reddit I noticed this fun comment from &lt;strong&gt;perlancar&lt;/strong&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tswpVbFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kq0msv1hrk2yku1ik5l1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tswpVbFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kq0msv1hrk2yku1ik5l1.png" alt="perlancar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-talks-in-bulk" class="anchor"&gt;
  &lt;/a&gt;
  Other talks, in bulk
&lt;/h2&gt;

&lt;p&gt;As I said I followed all the slots during all the TPC days. Was a bit rushy because often talks ended just when next one started (but it could not overlap because of the same room).&lt;/p&gt;

&lt;p&gt;I really loved some very technical talks like the ones from &lt;strong&gt;Graham Ollis&lt;/strong&gt; on &lt;strong&gt;FFI&lt;/strong&gt; and &lt;strong&gt;Wasm&lt;/strong&gt; (but I’m interested in Perl “native” stuff like aliens and xs so that’s not a surprise 😄)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZSTSUCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rbhw8o6pfh12c4376r5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZSTSUCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rbhw8o6pfh12c4376r5i.png" alt="FFI Graham"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m also very interested in the way Perl folks put such lot of efforts into quality (CPAN testers and perl5 smokers etc…) and I enjoyed the talk about quality from &lt;strong&gt;Jim Keenan&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1l7Lfr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/haalrp9sh4msqgopcuu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1l7Lfr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/haalrp9sh4msqgopcuu2.png" alt="Golden Mic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note the golden mic !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfXakGEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x8qrr46av5vf7nvzfx7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfXakGEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x8qrr46av5vf7nvzfx7x.png" alt="THE golden Mic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was a lightening talk on &lt;a href="https://pullrequest.club/hello"&gt;Pull Request Club&lt;/a&gt;, do you know this ? If not you should join !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJqWv_Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g39udabfskcidzc2tfpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJqWv_Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g39udabfskcidzc2tfpp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Multiple talks discussed about “Continuous Integration” topic that I follow for my day to day job, and it was very interesting. One of them was from &lt;strong&gt;Olaf Alders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fiy-s4oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/387qol9p0vxbsd87tefc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fiy-s4oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/387qol9p0vxbsd87tefc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was also very impressed by the lightning talk about &lt;a href="https://openqa.opensuse.org/"&gt;OpenQA&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;One guy made a psychedelic talk about command line tools, I don’t understood what it does exactly but that was crazy.&lt;/p&gt;

&lt;p&gt;I also joined several “BOF” to talk or ask questions about topics like &lt;strong&gt;Perl 7&lt;/strong&gt; or &lt;strong&gt;TPF missions&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-damian-conway-show" class="anchor"&gt;
  &lt;/a&gt;
  The Damian Conway Show
&lt;/h2&gt;

&lt;p&gt;Later, there was the keynote from &lt;strong&gt;Damian Conway&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;People said you should prepare for it and come with a beer and peanuts. That’s totally true.&lt;/p&gt;

&lt;p&gt;Was not that simple to explain to my wife that I open a beer in front of my computer… at midnight (was that time France), but was definitely worth to do it 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ex5W0EIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/21gqxw8z9k0caa4f5u3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ex5W0EIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/21gqxw8z9k0caa4f5u3z.png" alt="Damian Harold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This talk completely turned my brain (like the psychedelic one that I discussed earlier) 😃&lt;/p&gt;

&lt;p&gt;All people in the associated chat become totally crazy also and I laught a lot with fun and smart comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This TPC was my first Perl conference and it was a wonderful experience for me.&lt;/p&gt;

&lt;p&gt;I wanted to thank all organizers like Todd Rinaldo and all others.&lt;/p&gt;

&lt;p&gt;I also wanted to highlight Geoffrey Avery that was handling the BOF and/or lightning talks (don’t remember well).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sDmnJCna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbkbyz8ou263yvhs2zaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDmnJCna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbkbyz8ou263yvhs2zaz.png" alt="Geoffrey Avery"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He said something poignant around the end of the TPC like : “dear newcomers, please don’t disappear”.&lt;/p&gt;

&lt;p&gt;I had so much fun that I personally promised myself to join again as much Perl conferences as possible.&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187</id>
    <published>2020-11-24T13:32:21Z</published>
    <updated>2020-11-24T13:32:21Z</updated>
    <category term="perl"/>
    <category term="yapc"/>
    <category term="tpc"/>
    <category term="tprcic"/>
  </entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2020-october"/>
  <id>tag:news.perlfoundation.org,2020-11-24:/post/dave-report-2020-october</id>
  <published>2020-11-24T02:53:09</published>
  <updated>2020-11-24T02:53:09</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund. We thank the TPF sponsors to make this grant possible. This mainly consisted in tracking down a off-by-one error in Cwd.xs, which I thought was being flagged up by valgrind. As it turned out, the valgrind report was a false positive caused by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
This mainly consisted in tracking down a (harmless as it turned out)
off-by-one error in Cwd.xs, which I thought was being flagged up by
valgrind. As it turned out, the valgrind report was a false positive caused
by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, and I
found the Cwd bug by manual code inspection of the area complained about
by valgrind!

SUMMARY:
      4:35 add some magic free vtable methods for faster freeing
     15:59 investigate ASan failure in t/op/coreamp.t
      2:30 process p5p mailbox
    ------
     23:04 TOTAL (HH::MM)
</pre>

    ]]>
  </content>
</entry>
  <entry>
  <title>CPAN Digger explained</title>
  <summary type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></summary>
  <updated>2020-11-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-explained"/>  <id>https://perlmaven.com/cpan-digger-explained</id>
  <content type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 088</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-088-5c5f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Challenge</a></p>

<h1>
  <a href="#task-1-array-of-product" class="anchor">
  </a>
  TASK #1 › Array of Product
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given an array of positive integers <code>@N</code>.</p>

<p>Write a script to return an array <code>@M</code> where <code>$M[i]</code> is the product of all elements of <code>@N</code> except the index <code>$N[i]</code>.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>This is relatively straight forward. I calculate the product of all the numbers using List::Util's <a href="https://metacpan.org/pod/List::Util#product">product</a> function. For those that follow my posts, I tend to use only CPAN modules that are in core, like List::Util.</p>

<p>I then use the <a href="https://perldoc.perl.org/functions/map">map</a> function to loop over the numbers, diving the product by the number to give the solution.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl 5 2 1 4 3
24, 60, 120, 30, 40

» ./ch-1.pl 2 1 4 3
12, 24, 6, 8
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-spiral-matrix" class="anchor">
  </a>
  TASK #2 › Spiral Matrix
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given <code>m x n</code> matrix of positive integers.</p>

<p>Write a script to print spiral matrix as list.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>Initially I was quite stumped about the way to solve it. I was thinking I'd need some sort of counter to know how many values I would need to take and in which direction. After an hour of thinking about it (while watching the television), I figured out a reasonably clean solution. It will be interesting to see what other Team PWC members come up with.</p>

<p>It can be broken down to the following steps.</p>

<ol>
<li>Parse the input into an array of arrays, check that all rows are even.</li>
<li>Create an array <code>@used</code> that is the same size as the input array.</li>
<li>Have an array <code>@directions</code> that map the x &amp; y movements. For example <code>[1, 0]</code> means to move down.</li>
<li>Starting at the top left moving right add the value at that position to the <code>@solutions</code> array, and mark that position as used.</li>
<li>If the next position is out of bounds of the array or is a value that has been used, switch directions. Continue this pattern until the <code>@solutions</code> array is completed.</li>
<li>Output the values to the screen.</li>
</ol>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl "1 2 3" "4 5 6" "7 8 9"
1, 2, 3, 6, 9, 8, 7, 4, 5

» ./ch-2.pl "1 2 3 4" "5 6 7 8" "9 10 11 12" "13 14 15 16"
1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-088-5c5f</id>
    <published>2020-11-23T12:53:50Z</published>
    <updated>2020-11-23T12:53:50Z</updated>
    <category term="perl"/>
    <category term="weeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Frankenstein’s Monster is Just Misunderstood! Perl in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/v7n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This client’s mission involves developing cost-efficient genotyping technology and promoting the development of crops adapted to suit their environment. They care about doing great things, and they want their team to be as happy as the crops they breed. Don’t wait for lightning to strike—your chance to make the world a better place is here!</div>
    </content>
    <id>https://job.perl.careers/v7n</id>
    <published>2020-11-23T10:00:45Z</published>
    <updated>2020-11-23T10:00:45Z</updated>
  </entry>
  <entry>
    <title>We aren’t Mal-teasing—this is the Perl job you’ve been waiting for! Perl in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/jru" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Who wouldn’t want to work in one of the world’s most beautiful places? A diving hotspot with over 50 dive sites, ample hiking, scenic cycling routes, and more kayaking opportunities than you can shake a paddle at, gorgeous Malta has it all! And lucky for you, we have an international client looking to hire Perl developers for their Malta office.</div>
    </content>
    <id>https://job.perl.careers/jru</id>
    <published>2020-11-23T10:00:44Z</published>
    <updated>2020-11-23T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Seeking Senior Perl Developers for Global Domination. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/43l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Located in St. Ingbert, Germany with a satellite office in Munich, this sociable and friendly team are now working 100% remotely. The situation with the pandemic-that-shall-not-be-named means this will continue for the foreseeable future, but when allowed back to the offices, you’ll enjoy chillin’ like a villain on their rooftop deck.</div>
    </content>
    <id>https://job.perl.careers/43l</id>
    <published>2020-11-23T10:00:43Z</published>
    <updated>2020-11-23T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Bored of jobs that don't matter? Be a Perl developer and save lives! Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/v3b" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This web-app saves lives, and literally pushes forward medical science. Your work will be used by the NHS, research labs, and healthcare providers worldwide to diagnose patients, organize research, and make the world a better place.</div>
    </content>
    <id>https://job.perl.careers/v3b</id>
    <published>2020-11-23T10:00:42Z</published>
    <updated>2020-11-23T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/485" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/485</id>
    <published>2020-11-23T10:00:41Z</published>
    <updated>2020-11-23T10:00:41Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-23T10:00:40Z</published>
    <updated>2020-11-23T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-11-23T10:00:39Z</published>
    <updated>2020-11-23T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-11-23T10:00:38Z</published>
    <updated>2020-11-23T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-11-23T10:00:37Z</published>
    <updated>2020-11-23T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Quantum::Superpositions, 2021 election</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 3, 2020, 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/</id>
    <published>2020-11-23T10:00:36Z</published>
    <updated>2020-11-23T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Docker</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/274755174/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Sunday, November 29, 2020;  1:00 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/274755174/</id>
    <published>2020-11-23T10:00:35Z</published>
    <updated>2020-11-23T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcnbdc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, November 26, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcnbdc/</id>
    <published>2020-11-23T10:00:34Z</published>
    <updated>2020-11-23T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers - face to face?</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcpbhc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, November 25, 2020; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcpbhc/</id>
    <published>2020-11-23T10:00:33Z</published>
    <updated>2020-11-23T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Finding an Open Source Python project to contribute to</title>
    <link rel="alternate" href="https://code-maven.com/finding-python-project-to-contribute" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You can use the same approach to find a Perl project</div>
    </content>
    <id>https://code-maven.com/finding-python-project-to-contribute</id>
    <published>2020-11-23T10:00:32Z</published>
    <updated>2020-11-23T10:00:32Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdlxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-11-23T10:00:31Z</published>
    <updated>2020-11-23T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #87</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-087/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt made the largest rectangle task look so simple. Well done.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-087/walt-mankowski/README.md</id>
    <published>2020-11-23T10:00:30Z</published>
    <updated>2020-11-23T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 087</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-087-6mj" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon uses code comments to share the ideas behind his solutions.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-087-6mj</id>
    <published>2020-11-23T10:00:29Z</published>
    <updated>2020-11-23T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="https://samirparikh.com/blog/perl-weekly-challenge-087.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Samir is having lots of fun with the weekly challenge. Great to read such a story.</div>
    </content>
    <id>https://samirparikh.com/blog/perl-weekly-challenge-087.html</id>
    <published>2020-11-23T10:00:28Z</published>
    <updated>2020-11-23T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87: Consecutive Rectangles</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_87__Consecutive_Rectangles.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger spoilt us with solutions in Perl, Raku, Python, Ruby and Rust.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_87__Consecutive_Rectangles.html</id>
    <published>2020-11-23T10:00:27Z</published>
    <updated>2020-11-23T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge #087 Task #1 :: (Perl, Raku)</title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Myoungjin's discussion of his Raku solution is too good to miss. Must Read.</div>
    </content>
    <id>https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4</id>
    <published>2020-11-23T10:00:26Z</published>
    <updated>2020-11-23T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87: Longest Consecutive Sequences and Largest Rectangle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-87-longest-consecutive-sequences-and-largest-rectangle.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent's thorough discussion about different types of sorting. You even get to know about Functional programming.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-87-longest-consecutive-sequences-and-largest-rectangle.html</id>
    <published>2020-11-23T10:00:25Z</published>
    <updated>2020-11-23T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC087 - Largest Rectangle</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/19/pwc087-largest-rectangle/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio once again shared nice ideas. Must Read.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/19/pwc087-largest-rectangle/</id>
    <published>2020-11-23T10:00:24Z</published>
    <updated>2020-11-23T10:00:24Z</updated>
  </entry>
  <entry>
    <title>PWC087 - Longest Consecutive Sequence</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/18/pwc087-longest-consecutive-sequence/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio took the discussion to another level. Highly Recommended.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/18/pwc087-longest-consecutive-sequence/</id>
    <published>2020-11-23T10:00:23Z</published>
    <updated>2020-11-23T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Raku - Largest and Longest</title>
    <link rel="alternate" href="https://raku-musings.com/largest-longest.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It makes me happy when I see how Arne tried different strategies. Once again, we have Perl and Raku solutions.</div>
    </content>
    <id>https://raku-musings.com/largest-longest.html</id>
    <published>2020-11-23T10:00:22Z</published>
    <updated>2020-11-23T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/22" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Short notes at the end of each solution tell the story behind the journey. You don't want to miss this.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/22</id>
    <published>2020-11-23T10:00:21Z</published>
    <updated>2020-11-23T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/20/perl-weekly-challenge-87-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail raised interesting questions and explored the different choices about the task.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/20/perl-weekly-challenge-87-part-2/</id>
    <published>2020-11-23T10:00:20Z</published>
    <updated>2020-11-23T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/19/perl-weekly-challenge-87-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's blog post has not just Perl solution but also C and Node.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/19/perl-weekly-challenge-87-part-1/</id>
    <published>2020-11-23T10:00:19Z</published>
    <updated>2020-11-23T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Raku Review - Perl Weekly Challenge - 084</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/p6-review-challenge-084" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Raku Solutions Review by Andrew Shitov.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/p6-review-challenge-084</id>
    <published>2020-11-23T10:00:18Z</published>
    <updated>2020-11-23T10:00:18Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 087</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-087" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC, dealing with the "Pair Difference" and "Sudoko Puzzle" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-087</id>
    <published>2020-11-23T10:00:17Z</published>
    <updated>2020-11-23T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 088</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Array of Product" and "Spiral Matrix". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-088</id>
    <published>2020-11-23T10:00:16Z</published>
    <updated>2020-11-23T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Hacktoberfest 2020 report</title>
    <link rel="alternate" href="https://dev.to/zakame/hacktoberfest-2020-report-1p6i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just a good example of how to contribute to other projects. The best thing is that you can do this throughout the whole year, not just during October.</div>
    </content>
    <id>https://dev.to/zakame/hacktoberfest-2020-report-1p6i</id>
    <published>2020-11-23T10:00:15Z</published>
    <updated>2020-11-23T10:00:15Z</updated>
  </entry>
  <entry>
    <title>CPAN.Rocks</title>
    <link rel="alternate" href="https://cpan.rocks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The site now has a new box listing information about the Bugtracker of each CPAN module. A total of 66.2% Have no bug tracker defined explicitely. 67.6% don't link to their VCS. (Compare that with the stats from the <a href="https://cpan-digger.perlmaven.com/">most recently uploaded</a>. Only 17% missing the VCS link and 58% missing the explicit link to a bugtracker. The direction is good, but there is more work to do.</div>
    </content>
    <id>https://cpan.rocks/</id>
    <published>2020-11-23T10:00:14Z</published>
    <updated>2020-11-23T10:00:14Z</updated>
  </entry>
  <entry>
    <title>GitHub Actions for semi-static web sites</title>
    <link rel="alternate" href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave describes how the CPAN Dashboard is automatically regenerated and how he does not need to host this on any of his servers.</div>
    </content>
    <id>https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g</id>
    <published>2020-11-23T10:00:13Z</published>
    <updated>2020-11-23T10:00:13Z</updated>
  </entry>
  <entry>
    <title>How is Perl an interpreted Language</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/jy7z25/how_is_perl_an_interpreted_language/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">My answer would be that 'interpreted' and 'compiled' are just two points on a line. Many languages fall betweeen the two. Many other languages are not even on the line. Luckily there are better answers in the comment secition of that question.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/jy7z25/how_is_perl_an_interpreted_language/</id>
    <published>2020-11-23T10:00:12Z</published>
    <updated>2020-11-23T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Where is Perl used these days?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/jyt8ff/where_is_perl_used_these_days/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">39 very interesting comments so far. People really want to tell their story. It would be even better if they did so in a long-form version as a stand-alone blog post. e.g. on <a href="https://dev.to/">dev.to</a></div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/jyt8ff/where_is_perl_used_these_days/</id>
    <published>2020-11-23T10:00:11Z</published>
    <updated>2020-11-23T10:00:11Z</updated>
  </entry>
  <entry>
    <title>GitLab CI Pipeline for Perl DBD::Mock using Module::Build</title>
    <link rel="alternate" href="https://perlmaven.com/gitlab-ci-module-build" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Although the majority of Perl modules use GitHub there are a few that use GitLab. Some of them have the GitLab CI system enabled, some don't. In this article you can read how DBD::Mock uses CI to see if you can build on that example.</div>
    </content>
    <id>https://perlmaven.com/gitlab-ci-module-build</id>
    <published>2020-11-23T10:00:10Z</published>
    <updated>2020-11-23T10:00:10Z</updated>
  </entry>
  <entry>
    <title>The mysterious case of the SVt_PVIV</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In a nutshell: Wanting to use emojis can lead to shaving a yak.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html</id>
    <published>2020-11-23T10:00:09Z</published>
    <updated>2020-11-23T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Where is Rob Seegel?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/alex1/2020/11/where-is-rob.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Author of Tk::MListbox. Alex is calling.</div>
    </content>
    <id>http://blogs.perl.org/users/alex1/2020/11/where-is-rob.html</id>
    <published>2020-11-23T10:00:08Z</published>
    <updated>2020-11-23T10:00:08Z</updated>
  </entry>
  <entry>
    <title>What is CI and why is it good for you?</title>
    <link rel="alternate" href="https://perlmaven.com/what-is-ci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast</div>
    </content>
    <id>https://perlmaven.com/what-is-ci</id>
    <published>2020-11-23T10:00:07Z</published>
    <updated>2020-11-23T10:00:07Z</updated>
  </entry>
  <entry>
    <title>TPF Meeting Minutes for October 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tpf-minutes-202010" type="text/html"/>
    <id>https://news.perlfoundation.org/post/tpf-minutes-202010</id>
    <published>2020-11-23T10:00:06Z</published>
    <updated>2020-11-23T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Github Actions for Module::Install and showing error log on Linux, Mac OSX, and Windows</title>
    <link rel="alternate" href="https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Part of the effort to enable some sort of <a href="https://perlmaven.com/ci">CI system</a> for all the modules on CPAN this is a sample configuration file for GitHub Actions. It might encourage you to add a GitHub Action configuration file to your project as well.</div>
    </content>
    <id>https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows</id>
    <published>2020-11-23T10:00:05Z</published>
    <updated>2020-11-23T10:00:05Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021 (if the Coronavirus lets them run it in person). <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-23T10:00:04Z</published>
    <updated>2020-11-23T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 7; DevTo: 3; Perl.com: 0; PerlAcademy: 0; PerlHacks: 0; PerlMaven: 3; Reddit: 18; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-11-23T10:00:03Z</published>
    <updated>2020-11-23T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://metacpan.org/recent" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 201 uploads to CPAN of 144 distinct distributions by 82 different authors. Number of distributions with link to VCS: 121. Number of distros with CI: 61. Number of distros with bugtracker: 85.</div>
    </content>
    <id>https://metacpan.org/recent</id>
    <published>2020-11-23T10:00:02Z</published>
    <updated>2020-11-23T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Perl 5.32 from ActiveState - Make Your Python Coder Friends Jealous!</title>
    <link rel="alternate" href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">Try out our whole new Perl ecosystem, featuring: A unified, cloud-based toolchain for Linux and Windows (replaces PPM). Virtual environment support (similar to Python's virtualenv). Pure open source licensing (no more ActiveState license). Try ActiveState's &lt;a href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition"&gt;latest Perl&lt;/a&gt; release</content>
    <id>https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition</id>
    <published>2020-11-23T10:00:01Z</published>
    <updated>2020-11-23T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#487 - CPAN Dashboard explained</title>
    <link rel="alternate" href="http://perlweekly.com/archive/487.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Have you noticed how the English spelling and grammar of both Mohammad and myself improved in the last couple of weeks? It's all thanks to Dave Cross who had enough of our broken English and started to comb through the newsletter fixing some of the biggest offenders. Thanks Dave!</p>
<p>I put together a web page for <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> where you can see the 100 most recently uploaded CPAN modules. The goal is to locate the ones that don't link to their VCS in their META.json file. Try to locate the public VCS and add the link. I also would like to encourage the CPAN authors to set up their <a href="https://cpandashboard.com/">CPAN Dashboard</a> that was created by Dave Cross.</p>
<p>After several months of waiting, Patreon has enabled annual payments on my account. That means from now on you can <a href="https://www.patreon.com/szabgab">support my work</a> with an annual payment and even get 10% discount.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/487.html</id>
    <published>2020-11-23T10:00:00Z</published>
    <updated>2020-11-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Testtreiber für Test::Class::Moose</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-23-testtreiber-fuer-test-class-moose" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Test::Class::Moose hilft beim Organisieren von Tests dadurch, dass objektorientiertes Schreiben von Tests ermöglicht wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-23-testtreiber-fuer-test-class-moose</id>
    <published>2020-11-23T10:00:00Z</published>
    <updated>2020-11-23T10:00:00Z</updated>
  </entry>
  <entry>
    <title>The mysterious case of the SVt_PVIV</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9952</id>

    <published>2020-11-23T04:40:18Z</published>
    <updated>2020-11-23T06:11:59Z</updated>

    <summary>The other day I wanted to send my friend some silly emojis on LINE and so I updated my flaky old Unicode browser to the new-fangled Unicode with values above 0x10000, so that I could fetch the Emojis, which start...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="arthurcclarkesmysteriousworld" label="Arthur C. Clarke's Mysterious World" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="daftmodule" label="daft module" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="jsoncreate" label="JSON::Create" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="mysteries" label="mysteries" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="stupidmodule" label="stupid module" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="sviok" label="SvIOK" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="svt_pviv" label="SVt_PVIV" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>The other day I wanted to send my friend some silly emojis on LINE and so I updated my <a href="https://www.lemoda.net/tools/unicode/index.html">flaky old Unicode browser</a> to the new-fangled Unicode with values above 0x10000, so that I could fetch the Emojis, which start <a href="https://www.lemoda.net/tools/unicode/index.html?char=1F348">around here</a>. The thing also features a perl script which fetches values from <a href="https://metacpan.org/pod/Unicode::UCD">Unicode::UCD</a> using the <code>charinfo</code> function. I also updated to Perl 5.32 around the same time. Now the funny thing was that I started getting all kinds of errors about invalid JSON in the browser console. My Perl script was sending something of the form <code>{... "script":Common ...}</code> from my module JSON::Create, which is not valid JSON due to not having quotes around <code>Common</code>, and obviously my module was faulty.</p>

<p>Investigating the fault led me into the XS (C) code of my module where the value part of the JSON thought that the value associated with the <code>script</code> key in the hash reference returned by <code>charinfo</code> was of the form <code>SVt_PVIV</code>. <code>PV</code> means "pointer value" which is basically a string, and <code>IV</code> means "integer value", you can probably guess what that is supposed to contain.</p>

<p>My stupid module assumed that the string in an <code>SVt_PVIV</code> was just a representation of the IV part, so it just printed the PV as a string without quotes, leading to the above Common appearing. But it doesn't seem to be so. Is it some kind of "dual variable"? It turned out that the IV part wasn't even valid, so forcing it to treat the <code>SVt_PVIV</code> as an IV didn't work. <a href="https://metacpan.org/source/BKB/JSON-Create-0.27_01/json-create-perl.c#L1442">The solution at the moment</a> is to test with something called SvIOK whether the IV part is OK then treat it as a string if not.</p>

<p>The mysterious part for me is why is the <code>script</code> value an SVt_PVIV in the first place? Answers on a postcard, or comment below if you prefer.</p>

<p>I tried to replicate this bug for testing purposes using Scalar::Util's <code>dualvar</code>, but that creates an SVt_PVNV (floating point/string combo), which my daft module treated differently again.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>JSON::Create now features indentation</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/11/jsoncreate-now-features-indentation.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9951</id>

    <published>2020-11-23T04:29:54Z</published>
    <updated>2020-11-23T04:39:50Z</updated>

    <summary>In version 0.27 of JSON::Create I added a new indentation feature. This was added basically out of necessity. Originally the purpose of the module was sending short bits of JSON over the internet, but I've been using JSON more and...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="indentation" label="indentation" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="jsoncreate" label="JSON::Create" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="megabytes" label="megabytes" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="yearsofsuffering" label="years of suffering" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>In version 0.27 of JSON::Create I added a new <a href="https://metacpan.org/pod/distribution/JSON-Create/lib/JSON/Create.pod#indent">indentation feature</a>. This was added basically out of necessity. Originally the purpose of the module was sending short bits of JSON over the internet, but I've been using JSON more and more for processing data too. I've spent quite a long time working on <a href="https://www.qhanzi.com/">a web site for recognition of Chinese</a>, and I've been using JSON more and more extensively. The basic data file for the web site is a 168 megabyte JSON file. Not indenting this kind of file makes for "interesting" problems if one accidentally opens it in an editor or on a terminal screen, a million characters all on one line tends to confuse the best-written text reading utilities. So after years of suffering the relief is tremendous, and now I have tab-based indentation in JSON::Create.</p>

<p>Originally I thought that I should make all kinds of customisable indentation possible, but then it occurred to me that basically any fool armed with a regular expression could easily alter the indentation however they want to. I put <a href="https://fastapi.metacpan.org/source/BKB/JSON-Create-0.27/examples/indent-format.pl">a simple example in the documentation</a>.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/22#pwc087" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an unsorted array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to find the longest consecutive sequence. Print 0 if no sequence found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an unsorted array of integers @N.
# Write a script to find the longest consecutive sequence. 
# Print 0 if no sequence found.
##
sub min_max{
    my @a = @_;
    my($min, $max) = ($a[0], $a[0]);
    for my $x (@a){
        $min = $x if($x &lt; $min);
        $max = $x if($x &gt; $max);
    }
    return ($min, $max);
}

sub longest_sequence{
    my @sequences = @_;
    my @max = (0);
    for my $sequence (@sequences){
        @max = @{$sequence} if((@{$sequence} &gt; @max) &amp;&amp; (@{$sequence} &gt; 1));
    }
    return @max;
}

sub continuous_sub_sequences{
    my @a = @_;
    my($min, $max) = min_max(@a);
    my @sub_sequences;
    my $sub_sequence = [];
    while($min &lt;= $max){
        my $test = grep {$_ == $min} @a;
        if($test){
            push @{$sub_sequence}, $min;
        }
        else{
            push @sub_sequences, $sub_sequence if(@{$sub_sequence} &gt; 0);
            $sub_sequence = [];
        }
        $min++;
    }
    return @sub_sequences;
}

MAIN:{
    my @N = (100, 4, 50, 3, 2);
    my @sequences = continuous_sub_sequences(@N);
    my @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 30, 10, 40, 50);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 19, 9, 11, 10);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2,3,4
0
9,10,11
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I decided to force myself to work with an artificial constraint as a way fo forcing a little bit more creativity in my solution. When I first looked at this problem I immediately thought “ok, first thing should be to sort the list”. Based on that first impression my self-imposed constraint was to “solve this without using a sort”!&lt;/p&gt;
&lt;p&gt;What I did can be summarized as follows: 1. Find the minimum and maximum numbers in the given list. 2. Starting with the minimum number generate test sequences by incrementing upwards towards the maximum list value. 3. As each new element of the test sequence is added test to see if it is in the original list. 4. If it is in the list, good, keep going. 5. If it is not in the list then save the test sequence generated up to that point and continue with a new test sequence. 6. Return all successful test sequences and determine the longest one.&lt;/p&gt;
&lt;p&gt;The most blatant inefficiency to this approach is when lists are sparse. For example, suppose we are given &lt;code&gt;(2, 100000000, 3, 4, 5)&lt;/code&gt; then we would be iterating from &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;100000000&lt;/code&gt;. An approach using a sorted list would basically need only loop over the elements of the list, checking to see if the next element was 1 larger than the previous.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given matrix m x n with 0 and 1. Write a script to find the largest rectangle containing only 1. Print 0 if none found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given matrix m x n with 0 and 1.
# Write a script to find the largest rectangle 
# containing only 1. Print 0 if none found.
##
use boolean;

sub print_solution{
    my($m, $n) = @_;
    if(!$m || !$n){
        print "0\n";
    }
    else{
        for (1 .. $n){
            print "[". join(" ", (1)x $m) . "]\n";
        }       
    }
}

sub evaluate{
    my($m, $n, $matrix) = @_;
    my $row_string = join(",", (1) x $m);
    my $columns = 0;
    for my $row (@{$matrix}){
        my $test = join(",", @{$row});
        if(index($test, $row_string) &gt; -1){
            $columns++;
            return true if($columns == $n);
        }
        else{
            $columns = 0;
        }
    }
    return false;
}

sub largest_rectangle{
    my @matrix = @_;
    my $rows = @{$matrix[0]};
    my $columns = @matrix;
    my $max_area = 0;
    my @rectangle;
    for my $m (2 .. $columns){
        for my $n (1 .. $rows){
            if(evaluate($m, $n, \@matrix)){
                if(($m * $n) &gt; $max_area){
                    $max_area = ($m * $n);
                    @rectangle = ($m, $n);
                }
            }
        }
    }
    return @rectangle;
}

MAIN:{
    my @MATRIX = (
        [0, 0, 0, 1, 0, 0],
        [1, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1]
    );
    print_solution(largest_rectangle(@MATRIX));  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[1 1 1 1 1]
[1 1 1 1 1]
0
[1 1 1 1]
[1 1 1 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Unlike Part 1 I did not necessarily have a self-imposed constraint other than to try and be as creative as possible. I’ll only know when I look at other submitted solutions if I was really all that relatively clever or not!&lt;/p&gt;
&lt;p&gt;Here I do the following: 1. Check the size of the given matrix 2. Test the matrix for all possible sub-matrix sizes. 3. For all found sub-matrices determine the largest one.&lt;/p&gt;
&lt;p&gt;For checking the presence of sub-matrices I &lt;a href="https://perldoc.perl.org/functions/join"&gt;join&lt;/a&gt; the rows into strings and then use &lt;a href="https://perldoc.perl.org/functions/index"&gt;index&lt;/a&gt; to see if they appear in a given row or not. To determine if a sub-matrix is the largest I compare the areas of the “rectangles”.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc087</id>
    <published>2020-11-22T17:36:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6534935039608101899</id>
    <published>2020-11-21T15:29:00.000+01:00</published>
    <updated>2020-11-21T15:29:12.133+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvi) 11 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.79 was 6 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.56&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.54 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.62&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.61 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20201120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20201120&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201020 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004003&lt;/strong&gt; on 2020-11-21&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004000 was 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.29&lt;/strong&gt; on 2020-11-18&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.28 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.025&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 2.024 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KHW/Pod-Simple-3.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - framework for parsing Pod &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.42&lt;/strong&gt; on 2020-11-14&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.41 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0927' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0927&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0926 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-YouTube-Download-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::YouTube::Download&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - WWW::YouTube::Download - Very simple YouTube video download interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.067' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.067&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.066 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6534935039608101899/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html" title="(cccxvi) 11 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4707156040209215882</id>
    <published>2020-11-21T15:23:00.004+01:00</published>
    <updated>2020-11-21T15:23:49.775+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliii) metacpan weekly report - Tickit::Widgets</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 60&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Tickit::Widgets"&gt;Tickit::Widgets&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/21 14:22:09 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ShouldUpdate" target="_blank"&gt;File::ShouldUpdate&lt;/a&gt; - should files be rebuilt?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SAML" target="_blank"&gt;Mojo::SAML&lt;/a&gt; - A SAML2 toolkit using the Mojo toolkit&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SockAddr" target="_blank"&gt;Net::SockAddr&lt;/a&gt; - Socket address OO-wrapper with Perl and C++ interface.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco::Lite::App" target="_blank"&gt;Zydeco::Lite::App&lt;/a&gt; - use Zydeco::Lite to quickly develop command-line apps&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::Genetic::Pro" target="_blank"&gt;AI::Genetic::Pro&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::HTTPThis" target="_blank"&gt;App::HTTPThis&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argon" target="_blank"&gt;Argon&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Diff" target="_blank"&gt;Array::Diff&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Changes" target="_blank"&gt;CPAN::Changes&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Digger" target="_blank"&gt;CPAN::Digger&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Control" target="_blank"&gt;Daemon::Control&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Moonpig" target="_blank"&gt;DateTime::Moonpig&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTimeX::Immutable" target="_blank"&gt;DateTimeX::Immutable&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::RunSQL" target="_blank"&gt;DBIx::RunSQL&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=175)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fsdb" target="_blank"&gt;Fsdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Lucid" target="_blank"&gt;Getopt::Lucid&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::ImageView" target="_blank"&gt;Gtk3::ImageView&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::WebKit2" target="_blank"&gt;Gtk3::WebKit2&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Guard" target="_blank"&gt;Guard&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Daemon" target="_blank"&gt;HTTP::Daemon&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny::Multipart" target="_blank"&gt;HTTP::Tiny::Multipart&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Var" target="_blank"&gt;Lexical::Var&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Toaster" target="_blank"&gt;Mail::Toaster&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Log::Any" target="_blank"&gt;Mojolicious::Plugin::Log::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::SecurityHeader" target="_blank"&gt;Mojolicious::Plugin::SecurityHeader&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::NATS::Client" target="_blank"&gt;Net::NATS::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::CCS" target="_blank"&gt;PDL::CCS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=120)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PkgConfig" target="_blank"&gt;PkgConfig&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+2=73)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ShellQuote" target="_blank"&gt;String::ShellQuote&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Animation" target="_blank"&gt;Term::Animation&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein::Damerau" target="_blank"&gt;Text::Levenshtein::Damerau&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widget::Statusbar" target="_blank"&gt;Tickit::Widget::Statusbar&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+3=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Serialiser" target="_blank"&gt;Types::Serialiser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/use" target="_blank"&gt;use&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4707156040209215882/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html" title="(cdxliii) metacpan weekly report - Tickit::Widgets"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>GitLab CI Pipeline for Perl DBD::Mock using Module::Build</title>
  <summary type="html"><![CDATA[<p>
<a href="https://gitlab.com/">GitLab</a> provides an integrated <a href="/ci">CI system</a> that is driven by a single <a href="/yaml">YAML</a> based configuration.
This example is based on the configuration file of the <a href="https://metacpan.org/pod/DBD::Mock">DBD::Mock</a> module.
<p>
I have copied it here and removed some of the repetitions. Visit the repo of that project to see the file they have.
<p>
]]></summary>
  <updated>2020-11-20T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/gitlab-ci-module-build"/>  <id>https://perlmaven.com/gitlab-ci-module-build</id>
  <content type="html"><![CDATA[<p>
<a href="https://gitlab.com/">GitLab</a> provides an integrated <a href="/ci">CI system</a> that is driven by a single <a href="/yaml">YAML</a> based configuration.
This example is based on the configuration file of the <a href="https://metacpan.org/pod/DBD::Mock">DBD::Mock</a> module.
<p>
I have copied it here and removed some of the repetitions. Visit the repo of that project to see the file they have.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>TPF Meeting Minutes for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tpf-minutes-202010"/>
  <id>tag:news.perlfoundation.org,2020-11-19:/post/tpf-minutes-202010</id>
  <published>2020-11-19T12:14:39</published>
  <updated>2020-11-19T12:14:39</updated>
  <summary>
  <![CDATA[
     TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting. Part 1 Community Attendees  Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki  Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch  Admin: Nic Evans  Confirmed absence: Mark Keating, Curtis Poe Grants  One grant approved needs funding 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting.</p>

<h2>Part 1 - Community</h2>

<ul>
<li><p>Attendees</p>

<ul>
<li>Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki (late) </li>
<li>Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch</li>
<li>Admin: Nic Evans</li>
<li>Confirmed absence: Mark Keating, Curtis Poe</li>
</ul></li>
<li><p>Grants</p>

<ul>
<li>One grant approved - needs funding as there's no budget</li>
<li>Another grant was approved earlier but no work started 
<ul>
<li>Should have been canceled / resubmitted already according to the charter</li>
</ul></li>
<li>Working with Nic on website updates - close to completion</li>
<li>Main issue - no working budget
<ul>
<li>Possibly review previous budgets and consider how this can be increased per year</li>
<li>Funds are sectioned to languages (GC, Perl and Raku)</li>
<li>Pete looking to rearrange fund 'pots' to enable easier tracking next year</li>
</ul></li>
<li>Discussion around grants funding for funds - Can/should there be different pots? Can sponsors request specific support for each language - this needs further discussion - Jason Crome to follow up</li>
<li>Grant suggestions from the committee are available on the web</li>
</ul></li>
<li><p>Marketing</p>

<ul>
<li>Brief survey carried out regarding brand of The Perl Foundation</li>
<li>Highlighted need for wider survey, putting together budget proposal</li>
<li>Filled in creative brief for TPF</li>
<li>Promotion of TPF via Google Ads - discussion going on</li>
<li>z/OS article was mentioned as a good addition to marketing</li>
<li>Website improvements, bugs/issues list created</li>
</ul></li>
<li><p>The Perl/Raku Conference (USA)</p>

<ul>
<li>The contract of 2020/2021 is active</li>
</ul></li>
<li><p>EU Conference</p>

<ul>
<li>Discussion points: Organizers and sponsorship</li>
<li>Organizers
<ul>
<li>Andrew mentioned possibility of Perl/Raku conference</li>
<li>Should we talking about making EU conference a TPF event?</li>
<li>There is currently no immediate visible interest in having funding of an EU conference in Europe taken over by TPF</li>
<li>Historically YEF was formed because TPF didn't have the people to do this. Also EPO was formed</li>
<li>We need to talk to the key people to organize an event in Europe</li>
<li>The nature of conferences may be different going forward, we don't know when they will return to how they used to be. We need to look at our future - do we want more virtual conferences? Are there other opportunities for physical?</li>
</ul></li>
<li><p>Sponsorship</p>

<ul>
<li>Costs might be lower for virtual - how easy to get sponsors for virtual versus physical conferences?</li>
<li><p>We need to be clear with sponsors if we have both a US and an EU conference</p></li>
<li><p>Opinions:</p>

<ul>
<li>We have obligations to control how money is spent. There must be set guidelines. Whenever we create a special bucket for sponsorship we have an obligation to spend money on that bucket. We cannot then spend it on something else. What if we collect funds for a conference and it doesn't happen? We would have to give the money back. Currently we ask sponsors to give money to TPF (general funds) for this reason.</li>
<li>I want to make sure when I talk to sponsors to steer away from where money is going to 'this is TPF and we have various things we want to spend money on'. We need to avoid earmarked funds . Do not encourage sponsorship for specific items such as a conference.</li>
<li>I see this as more of an opportunity to get more money especially when the conference is held in a city where a major sponsor is located - need to find a way around legal issues - otherwise a missed opportunity</li>
</ul></li>
<li>Could have a soft earmarking with disclaimer such as 'should event not happen, it will be moved to general funds.'</li>
</ul></li>
<li>To continue discussion at next meeting</li>
</ul></li>
<li><p>Raku</p>

<ul>
<li>The Raku steering council formed recently, elected by core developers.</li>
<li>Question: How does CAT relate to Raku community?</li>
<li>Stuart: joint decision taken to keep Raku with TPF for now - longer term vision keen to progress recognised resources. These must adhere to set of recognised quality standards. CAT was established to do this, so should also provide support to Raku communities. Although sounds like marketing, it is a governance function. So we should support Raku Steering Council in any conduct issues. We need a recognised Raku presence within the organisation. </li>
<li>Action: invite member of Raku community to attend the Community leaders meeting - let them know TPF will support Raku community</li>
</ul></li>
<li><p>Perl</p>

<ul>
<li>Governance work to try and over time figure out a proper governance structure that is understood, accepted and supported by the community. </li>
<li>Stuart: this is about creating a process that will help the technical ecosystem for a long time. If it takes a long time, it needs to be done right/as best it can be - follow up again next month</li>
</ul></li>
<li><p>Infrastructure</p>

<ul>
<li>Trying to get a coherent list of what needs to be done</li>
<li>Discussion on getting perl web infrastructure managed under same system</li>
<li>All the essential password are documented</li>
<li>We need to look at Github tracker and see that issues are closed</li>
<li>Feedback at moment is positive - need to promote the committee exists when it is in a good position.</li>
</ul></li>
</ul>

<h2>Part 2 - Board</h2>

<h3>Attendees</h3>

<ul>
<li>Stuart Mackintosh, Dave Rolsky, Dan Wright, Ricardo Signes, Pete Krawczyk, Makoto Nozaki, Nic Evans (admin)</li>
</ul>

<h3>Meeting topics</h3>

<p>Note: the second part of the meeting (the board only) was short as the first part overran.</p>

<ul>
<li>TPRC 2020 Transparency Report was drafted. It will be reviewed and posted.</li>
<li>Advisory Board - action items below.
<ul>
<li>Define the charter and procedure to "retire" people from the board</li>
<li>Think whether we could invite somebody to the Advisory Board even if they are not a board member</li>
<li>Announce the Advisory Board with inaugural members</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 086</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/15#pwc086" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt; and an integer $A. Write a script to find find if there exists a pair of elements in the array whose difference is $A. Print 1 if exists otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an array of integers @N and an integer $A.
# Write a script to find find if there exists a pair of elements 
# in the array whose difference is $A.
# Print 1 if exists otherwise 0.
##
use boolean;
use Math::Combinatorics;

sub build_constraints{
    my @constraints;
    my $a_not_equal_b = sub { $_[0] != $_[1] };
    my $difference_equal_n = sub { $_[0] - $_[1] == $_[2] };
    return (
       $a_not_equal_b,
       $difference_equal_n
    );
}

MAIN:{
    my $combinations = Math::Combinatorics-&gt;new(
                           count =&gt; 2,
                           data =&gt; [@ARGV[1 .. @ARGV - 1]],
                       );
    my $found = false;  
    my ($check_equal, $check_difference) = build_constraints();           
    while(my @combination = $combinations-&gt;next_combination()){  
        if($check_equal-&gt;(@combination) &amp;&amp; $check_difference-&gt;(@combination, $ARGV[0])){
            $found = true;
            print "1\n"; last;
        }
    }
    print "0\n" if(!$found);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 15 10 30 20 50 40
0
$ perl perl/ch-1.pl 7 10 8 12 15 5
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a fairly silly use of the &lt;em&gt;constraint programming&lt;/em&gt; approach I used &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/08"&gt;last week&lt;/a&gt;. Like last time I generate all combinations and test them using a filtering approach. The filter is an array of constraint functions. Here we just have two simple constraints though!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given Sudoku puzzle (9x9). Write a script to complete the puzzle&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I didn’t have a chance to implement a solution in Perl. I would have used a similar constraint approach if I did. This is a natural use for Prolog and if you’re interested in reading in my Prolog implementation you can go &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2020/11/15"&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc086</id>
    <published>2020-11-15T23:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Grant Proposals: November 2020 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_nov_2020"/>
  <id>tag:news.perlfoundation.org,2020-11-13:/post/grant_proposals_nov_2020</id>
  <published>2020-11-13T22:52:29</published>
  <updated>2020-11-13T22:52:29</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Bang Bang</title>
    <link rel="alternate" href="https://www.perl.com/article/bang-bang/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;img src="https://www.perl.com/images/bang-bang/blackmagic.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Interpreters read and execute scripts (whereas shells are more like a kitchen pass-through and can either execute or hand over to another interpreter). When we specify interpreter on the command line, it is the one that will be used. For instance &lt;code&gt;Rscript script.R&lt;/code&gt; will execute &lt;em&gt;script.R&lt;/em&gt; using the &lt;code&gt;Rscript&lt;/code&gt; interpreter.&lt;/p&gt;

&lt;p&gt;When we execute a file without explicitly giving an interpreter (for instance, like &lt;code&gt;./myscript.pl&lt;/code&gt;), it is the job of the &amp;ldquo;shebang&amp;rdquo; to tell to the shell/OS which interpreter to use. The shebang is that first line of a text file that starts with &lt;code&gt;#!&lt;/code&gt; and is followed by the interpreter path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes we see the &lt;code&gt;env&lt;/code&gt; program, which finds the the first &lt;code&gt;perl&lt;/code&gt; in our path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;env&lt;/code&gt; does not split args therefore we can&amp;rsquo;t add options:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!/usr/bin/env perl -w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And, &lt;code&gt;env&lt;/code&gt; is not always located in &lt;code&gt;/usr/bin/env&lt;/code&gt; so it can guarantee some portability at machine/distribution level but not always between distributions.&lt;/p&gt;

&lt;h2 id="perl-is-nice"&gt;Perl is nice&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;perl&lt;/code&gt; is not like other interpreters—its nice, even with challenges. &lt;code&gt;perl&lt;/code&gt; inspects the shebang to check if it&amp;rsquo;s really for it (and if not it hands our program over to another interpreter).&lt;/p&gt;

&lt;p&gt;For instance the file &lt;em&gt;i-am-python.pl&lt;/em&gt; contains a Python program, which is definitely not Perl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time

&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a snake : &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;environ[&lt;span style="color:#e6db74"&gt;&amp;#34;SHELL&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;environ[&lt;span style="color:#e6db74"&gt;&amp;#34;_&amp;#34;&lt;/span&gt;])

&lt;span style="color:#75715e"&gt;# Keep it alive to have time to inspect with ps&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; True:
    time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously we don&amp;rsquo;t care about the extension as it does not mean any kind of file association (although some systems let you associate it). So we have a &lt;em&gt;.pl&lt;/em&gt; file and we execute it with &lt;code&gt;perl&lt;/code&gt; but inside we have a &lt;code&gt;python&lt;/code&gt; shebang and some python code. It&amp;rsquo;s clearly not a valid Perl file.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t believe me, check this with a quick syntax check &lt;code&gt;perl -c i-am-python.pl&lt;/code&gt; that tells us it isn&amp;rsquo;t valid Perl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -c i-am-python.pl
syntax error at i-am-python.pl line 3, near &amp;quot;import time&amp;quot;
i-am-python.pl had compilation errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we execute this file with perl, surprisingly, everything goes fine. How did that happen? &lt;code&gt;perl&lt;/code&gt; is smart enough to give the script to &lt;code&gt;python&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl i-am-python.pl
I'm a snake : /bin/bash /usr/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we want to check which interpreter really runs this script, we can look in the process table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ps aux | grep &lt;span style="color:#e6db74"&gt;&amp;#34;i-am-pytho[n].pl&amp;#34;&lt;/span&gt;
tduponc+  &lt;span style="color:#ae81ff"&gt;5647&lt;/span&gt;  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;.0  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;.0  &lt;span style="color:#ae81ff"&gt;33208&lt;/span&gt;  &lt;span style="color:#ae81ff"&gt;7024&lt;/span&gt; pts/0    S    &lt;span style="color:#ae81ff"&gt;13&lt;/span&gt;:04   &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:00 /usr/bin/python i-am-python.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;i-am-pytho[n].pl&lt;/code&gt; with the brackets, which puts the &lt;code&gt;n&lt;/code&gt; in a character class. That&amp;rsquo;s a nifty trick so &lt;code&gt;grep&lt;/code&gt; finds the line with &lt;code&gt;python&lt;/code&gt; but not the &lt;code&gt;grep&lt;/code&gt; process itself because that pattern won&amp;rsquo;t match a literal &lt;code&gt;[&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to kill the program since it&amp;rsquo;s sleeping forever!&lt;/p&gt;

&lt;p&gt;Now, what if we want to test the converse and run Perl code with a &lt;code&gt;python&lt;/code&gt; interpreter?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a jewel&amp;#34;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$str : $ENV{SHELL} $ENV{_}\n&amp;#34;&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) { sleep &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a valid Perl file but the &lt;code&gt;python&lt;/code&gt; interpreter does not hand over to &lt;code&gt;perl&lt;/code&gt; and just returns a Python error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ python i-am-perl.py
  File &lt;span style="color:#e6db74"&gt;&amp;#34;iamperl.py&amp;#34;&lt;/span&gt;, line &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
    my $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a jewel&amp;#34;&lt;/span&gt;;
       ^
SyntaxError: invalid syntax&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is special to Python. Try it yourself with bash, Ruby, or something else.&lt;/p&gt;

&lt;h2 id="i-have-something-for-you"&gt;I have something for you&lt;/h2&gt;

&lt;p&gt;Having the correct interpreter on the command line does not mean that the shebang is totally ignored. &lt;code&gt;perl&lt;/code&gt; is once again super smart and behaves exactly as we can imagine (DWIM). For instance, what if we put a warning switch (&lt;code&gt;-w&lt;/code&gt;) in the shebang, like in this file &lt;em&gt;override-bang.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -w&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though we don&amp;rsquo;t put the &lt;code&gt;-w&lt;/code&gt; on the command line, we still get warnings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl override-bang.pl
Name &lt;span style="color:#e6db74"&gt;&amp;#34;main::str&amp;#34;&lt;/span&gt; used only once: possible typo at override-bang.pl line &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="plenty-is-no-plague"&gt;Plenty is no plague&lt;/h2&gt;

&lt;p&gt;Now, what if we specify some switches on the command line and some others in the shebang? &lt;strong&gt;SPOILER&lt;/strong&gt;: they are simply merged together.&lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;perl -c overridebang.pl&lt;/code&gt; to check a syntactically-valid file, we get the switches from the command line and the shebang line. We get a &lt;code&gt;perl -cw&lt;/code&gt; execution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;Name &lt;span style="color:#e6db74"&gt;&amp;#34;main::str&amp;#34;&lt;/span&gt; used only once: possible typo at override-bang.pl line &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.
override-bang.pl syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if we have conflicting options like &lt;code&gt;-w&lt;/code&gt; to enable warnings and &lt;code&gt;-X&lt;/code&gt; to disable them? Here&amp;rsquo;s &lt;em&gt;enable-warnings.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -w&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run this on its own, we get a warning as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl enable-warnings.pl
Name &amp;quot;main::str&amp;quot; used only once: possible typo at warnings.pl line 3.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we add &lt;code&gt;-X&lt;/code&gt; on the command line, there is no output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -X enable-warnings.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How about the other way around with &lt;code&gt;-X&lt;/code&gt; on the shebang? Here&amp;rsquo;s &lt;em&gt;disable-warnings.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -X&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run this with &lt;code&gt;-w&lt;/code&gt;, we still don&amp;rsquo;t get output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -X enable-warnings.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; always turns off warnings.&lt;/p&gt;

&lt;p&gt;The shebang (&lt;code&gt;-X&lt;/code&gt;) is taken in priority versus the command line and no warning is reported. It&amp;rsquo;s the same if we execute the file with &lt;code&gt;perl -W disable-warnings.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could imagine that&amp;rsquo;s a rule to resolve conflicts with &amp;ldquo;last seen&amp;rdquo; parameter but wait, it&amp;rsquo;s not that simple.&lt;/p&gt;

&lt;p&gt;How about &lt;code&gt;-X&lt;/code&gt; versus &lt;code&gt;-W&lt;/code&gt;, which enables all warnings? Who wins then? It turns out that the last on defined wins. We can see that right on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -W -X -e '$str = &amp;quot;will produce a warning&amp;quot;'
$ perl -X -W -e '$str = &amp;quot;will produce a warning&amp;quot;'
Name &amp;quot;main::str&amp;quot; used only once: possible typo at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an exercise for the reader, try the different combinations of taint checking options: &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-U&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="a-magic-incantation"&gt;A magic incantation&lt;/h2&gt;

&lt;p&gt;Sometimes we see some odd lines at the beginning of Perl programs. What the hell is this black magic? This is actually very smart opening is &amp;ldquo;polyglot&amp;rdquo; and correct for both shells (with or without shebang support) and &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
    if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we start the script with &lt;code&gt;perl&lt;/code&gt;, the job is done and &lt;code&gt;perl&lt;/code&gt; executes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;$running_under_some_shell&lt;/code&gt; has no value, so the code translate to a false conditional. This line is ignored and the rest of the file is interpreted normally.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;} if 0;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we start the script with a shell that recognizes the shebang? The shell does the handover to &lt;code&gt;perl&lt;/code&gt;, which then reads the first line (shebang then &lt;code&gt;eval ...&lt;/code&gt;). The execution flow is then the same than above (magic incantation does nothing and file is interpreted). Nothing surprising there.&lt;/p&gt;

&lt;p&gt;But what if we started the script with a shell that does not recognize the shebang so no handover occurs right away? This is actually where this magic is useful. The shell will ignore first line and will never reach third line. Why will it never reach third line? A newline terminates the shell command and &lt;code&gt;exec&lt;/code&gt; will replace the current execution by &lt;code&gt;perl&lt;/code&gt;. The rest of the script doesn&amp;rsquo;t matter after that &lt;code&gt;exec&lt;/code&gt;. Our code changes from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
    if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to effectively this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those &lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; are shell words for the script name and arguments
and the &lt;code&gt;-S&lt;/code&gt; tells &lt;code&gt;perl&lt;/code&gt; look for the value in &lt;code&gt;$0&lt;/code&gt; using PATH environment variable. (&lt;a href="https://perldoc.perl.org/perlrun.html#Command-Switches"&gt;perldoc&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id="x-is-fun"&gt;-x is fun&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve had fun with the &lt;code&gt;perl&lt;/code&gt; interpreter and the shebang, but &lt;code&gt;perl&lt;/code&gt; has a &lt;code&gt;-x&lt;/code&gt; which is already fun by design. This option tells Perl that the program to execute is actually embedded in a larger chunk of unrelated text to ignore. Perhaps the Perl program is in the middle of an email message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;I do not know if it is what you want, but it is what you get.
        -- Larry Wall&amp;quot;

#!/usr/bin/env perl

print &amp;quot;perl -x ignores everything before shebang\n&amp;quot;;
print &amp;lt;DATA&amp;gt;;

__END__

&amp;quot;Fortunately, it is easier to keep an old interpreter around than an
old computer.
        -- Larry Wall&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing this as a program is a syntax error because the Larry Wall quote before the shebang is not valid Perl. When we execute this code with &lt;code&gt;perl -x&lt;/code&gt;, everything before the shebang is ignored and it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -x email.txt
perl -x ignores everything before shebang

&lt;span style="color:#e6db74"&gt;&amp;#34;Fortunately, it is easier to keep an old interpreter around than an
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;old computer.
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;        -- Larry Wall&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of curiosity, what if we tried to go one step further? How about multiple shebangs in a file, where one of them has a &lt;code&gt;-x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -x&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it only produces an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Can't emulate -x on #! line.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is however a trick to achieve this, by using shell &lt;code&gt;eval&lt;/code&gt;. That &lt;code&gt;perl -x&lt;/code&gt; is now executed in a shell process and not interpreted by perl binary like previously.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh&lt;/span&gt;
eval &lt;span style="color:#e6db74"&gt;&amp;#39;exec perl -x $0 ${1+&amp;#34;$@&amp;#34;}&amp;#39;&lt;/span&gt;
die &lt;span style="color:#e6db74"&gt;&amp;#34;another day&amp;#34;&lt;/span&gt;; exit &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$]\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="startperl"&gt;startperl&lt;/h2&gt;

&lt;p&gt;This article would not be complete without discussing a bit about the config variable &lt;code&gt;$Config{startperl}&lt;/code&gt;. This variable comes from &lt;em&gt;Config.pm&lt;/em&gt;  that provides information about configuration environment (which you also see with &lt;code&gt;perl -V&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -e &lt;span style="color:#e6db74"&gt;&amp;#39;use Config; print $Config{startperl}&amp;#39;&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is actually built during compilation from defaults or user/vendor provided configs. What if we want a different value? Simply specify the value of this during the &lt;code&gt;./Configure&lt;/code&gt; step, the configure option is &lt;code&gt;-Dstartperl='...'&lt;/code&gt;. We then need to rebuild &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ./Configure -des -Dstartperl&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;#!/my/shebang&amp;#39;&lt;/span&gt;
$ make test install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our custom value is the default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -e &lt;span style="color:#e6db74"&gt;&amp;#39;use Config; print $Config{startperl}&amp;#39;&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/my/shebang&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/ExtUtils::MakeMaker
"&gt;ExtUtils::MakeMaker&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Module::Build
"&gt;Module::Build&lt;/a&gt; seems also to use &lt;code&gt;startperl&lt;/code&gt; among other methods to fix modules shebangs.&lt;/p&gt;

&lt;p&gt;Take care to use an interpreter or a program that behaves like a &lt;code&gt;perl&lt;/code&gt; interpreter! Some CPAN modules use &lt;code&gt;startperl&lt;/code&gt; to write first line of generated perl tests. The &lt;code&gt;/usr/bin/env&lt;/code&gt; limitation still apply here.&lt;/p&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.in-ulm.de/~mascheck/various/shebang/"&gt;The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my"&gt;Why it is better to usr /usr/bin/env interpreter instead of /path/to/interpreter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/450509/could-someone-explain-this-shebang-line-which-uses-sh-and-then-does-exec-perl"&gt;Could someone explain this shebang line which uses sh and then does exec perl?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A tiny portion comes from &lt;a href="https://linuxfr.org/news/sortie-de-perl-5-30-0"&gt;Sortie de Perl 5.30.0&lt;/a&gt; (en français).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <id>https://www.perl.com/article/bang-bang/</id>
    <published>2020-11-11T11:04:40Z</published>
    <updated>2020-11-11T11:04:40Z</updated>
  </entry>
  <entry>
    <title>Perl-Schulungen vor dem Deutschen Perl-/Raku-Workshop 2021 in Leipzig</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-10-gpw-schulungen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Auch während der aktuell hohen Infektionszahlen in der Corona-Pandemie schauen wir nach vorne. Nach aktuellem Stand findet der Deutsche Perl-/Raku-Workshop 2021 Ende März in Leipzig statt (sollte die Corona-Situation das nicht hergeben, wird da mit Sicherheit reagiert).</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-10-gpw-schulungen</id>
    <published>2020-11-10T10:00:00Z</published>
    <updated>2020-11-10T10:00:00Z</updated>
  </entry>
</feed>
