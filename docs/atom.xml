<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-01-25T04:40:25Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Weekly Challenge 201</title>
    <link rel="alternate" href="https://dev.to/zapwai/weekly-challenge-201-1ibc" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201/"&gt;Challenge 201&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task One
&lt;/h2&gt;

&lt;p&gt;You are given an array of unique numbers. Write a script to find out all missing numbers in the range 0..$n where $n is the array size.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task Two
&lt;/h2&gt;

&lt;p&gt;Write a script to determine the number of ways of putting $n pennies in a row of piles of ascending heights from left to right. i.e. &lt;em&gt;List all distinct partitions of n.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-201/zapwai"&gt;My solutions on github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  
  
  Solution to Task One
&lt;/h2&gt;

&lt;p&gt;At first I thought there was a typo because there are always going to be &lt;em&gt;some&lt;/em&gt; missing numbers. Taking advantage of smart match:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
no warnings "experimental";
my @array = (0,1,3);
my @list;
say "Input: (" . join(",",@array).")";
print "Output: ";
for (0..scalar @array) {
    push @list, $_ unless ($_ ~~ @array);
}
say join(",", @list);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Solution to Task Two
&lt;/h2&gt;

&lt;p&gt;This took a lot of debugging. More smart match action. I chose to start with the largest partition of n (1 + 1 + ... + 1 = n) and started adding each pair of terms, including it in our  collection if it was an ascending sequence. This was my third attempt: I initially started from the bottom (starting with n and subtracting to create (1, n-1) and (2, n-2) etc.); then I considered generating all possible partitions and filtering the ascending ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
no warnings "experimental";
my $n = $ARGV[0] || 5;
say "Input: \$n = $n";
print "Output: " ;
my @set = (join(" ",(1) x $n));
my $i=-1;
do {
    $i++;
    rout($set[$i]);
    @set = grep { defined($_) } @set;    
} until (length $set[$i] &amp;lt;= 3);
my $length = @set;
do {
    rout($set[$i]);
    $i++;
} while ($i &amp;lt; $length);
push @set, $n;
say scalar @set;
say foreach @set;
sub rout {
    my $s = shift;
    my @a = split(" ", $s);
    return "no" if (@a &amp;lt;= 2);
    if ($a[$#a] != 1) {
    for (1 .. @a - 2) {
        my $str = chonk($_, @a);
        push @set, $str unless ($str ~~ @set);
    }
    }
    my $str = chonk(0, @a);
    push @set, $str unless ($str ~~ @set);
}
sub chonk {         #add two elems, given offset.
    my ($offset, @a) = @_;
    my $num = $a[$#a - $offset] + $a[$#a - $offset - 1];
    splice @a, $#a - $offset - 1, 2, $num;
    my $bad_cnt;
    for (1.. $#a) {
    $bad_cnt++ if ($a[$_ - 1] &amp;gt; $a[$_]);
    }
    return if ($bad_cnt);
    return join(" ",@a);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Zapwai</name>
    </author>
    <id>https://dev.to/zapwai/weekly-challenge-201-1ibc</id>
    <published>2023-01-25T01:19:58Z</published>
    <updated>2023-01-25T01:19:58Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Testing in 2023</title>
    <link rel="alternate" href="https://blogs.perl.org/users/toby_inkster/2023/01/perl-testing-in-2023.html"/>
    <id>tag:blogs.perl.org,2023:/users/toby_inkster//1019.11007</id>
    <published>2023-01-24T22:38:36Z</published>
    <updated>2023-01-24T22:55:43Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>https://toby.ink/</uri>
    </author>
    <category term="TDD" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="test2suite" label="Test2-Suite" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>With my open source work, I've historically taken an approach which relies more on integration testing than unit testing, but with some of my newer projects, I've tried adopting principles from $paidwork and applying them to my free software.</p>
<p>This is a quick run-down of how I'm structuring my test suite in newer projects. It's likely that many of my existing projects will never adopt this structure, but some may.</p>
]]>
        <![CDATA[		<h2><span id="Out_with_the_old,_in_with_the_new">Out with the old, in with the new</span></h2>
		<p>First step is ditching <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AMore">Test::More</a>, <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AFatal">Test::Fatal</a>, <a class="podlinkpod" href="https://metacpan.org/pod/Test%3A%3AWarnings">Test::Warnings</a>, and other pre-Test2 testing libraries.</p>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a> provides a good base to work with, so we add that to our project's requirements list straight away.</p>
		<p>We'll round that out with:</p>
		<ul>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AAuthorTesting">Test2::Require::AuthorTesting</a> to skip certain tests when run on the end user's machine, and require the <code>AUTHOR_TESTING</code> environment variable to run. This is useful for tests which are very slow or require a highly specific environment to run in.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AModule">Test2::Require::Module</a> to skip certain tests when optional modules are unavailable.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec">Test2::Tools::Spec</a> to better structure our unit tests.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail">Test2::Plugin::BailOnFail</a> for when your tests simply cannot carry on. Use sparingly.</li>
		</ul>
		<p>There are other Test2 modules that can be nice to have, but that's a good starter set. The ones I list above are distributed alongside <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a>, so you get them "for free". It is worth explicitly listing them in your project's dependencies though, in case they are split into separate distributions in the future.</p>
		<h2><span id="Test_directory_structure">Test directory structure</span></h2>
		<p>Perl distributions typically keep their tests in a directory called <em>t</em> found inside the project root. We won't change that. We will however create two subdirectories within it, <em>t/unit</em> and <em>t/integration</em>.</p>
		<p>You may have other categories of tests which need their own subdirectories too, but these two will be sufficient for most projects.</p>
		<p>If support modules are needed for testing, they can live in <em>t/lib</em>. If any data files are needed, put them in <em>t/share</em>.</p>
		<p>Any especially important tests can included in the <em>t</em> directory itself for maximum visibility. I recommend giving them numerically-prefixed filenames for better control over the order they run in.</p>
		<p>I will typically include two such tests:</p>
		<ul>
			<li><em>t/00start.t</em> which performs no real testing, but prints relevant information about the system it's being run on, such as the version numbers of dependencies, the values of important environment variables, etc.</li>
			<li><em>t/01basic.t</em> which loads all of your modules, or at least the important ones, then passes without any real testing being done. The purpose of this is to quickly check for syntax errors so extreme that they prevent your code from even compiling. This is a good place for <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail">Test2::Plugin::BailOnFail</a>.</li>
		</ul>
		<h2><span id="Unit_tests">Unit tests</span></h2>
		<p>For each module <em>lib/Foo/Bar.pm</em> there should be a corresponding unit test script <em>t/unit/Foo/Bar.t</em>.</p>
		<p>The prelude of this file will look something like this:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span> <span class="word">-target</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Foo::Bar'</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::Tools::Spec</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Data::Dumper</span><span class="structure">;</span></pre>
		<p>The footer will look exactly like this:</p>
		<pre class="highlighting-perl">  <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>And in between will be tests for each unit of code. A "unit" would typically be a function, a method, or an important package variable. Tests for a unit should avoid exercising much code outside their unit, and should <i>especially</i> avoid exercising code outside the target module.</p>
		<p>A fairly extensive unit test for a method:</p>
		<pre class="highlighting-perl">  <span class="word">describe</span> <span class="double" style="color:#909">"method `foo_bar`"</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
    
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="structure">);</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but foo is empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">' world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but bar is empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello '</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both defined, but both are empty string'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">' '</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'foo is undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'world'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'bar is undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">'Hello'</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">case</span> <span class="single" style="color:#909">'both are undefined'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$foo</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="structure">;</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="single" style="color:#909">''</span><span class="structure">;</span>
    <span class="structure">};</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it works'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span> <span class="structure">);</span>
      
      <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">dies</span> <span class="structure">{</span>
        <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">warns</span> <span class="structure">{</span>
          <span class="symbol" style="color:#333;background-color:#fcc">$object</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">foo</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">bar</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span> <span class="structure">);</span>
          <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">foo_bar</span><span class="structure">;</span>
        <span class="structure">};</span>
      <span class="structure">};</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_exception</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'no exception thrown'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_warnings</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="number" style="color:#39C">0</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'no warnings generated'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$got_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$expected_foo_bar</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'expected string returned'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span>
        <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span>
        <span class="word">object</span> <span class="structure">{</span>
          <span class="word">call</span> <span class="word">foo</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$foo</span><span class="structure">;</span>
          <span class="word">call</span> <span class="word">bar</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$bar</span><span class="structure">;</span>
        <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
        <span class="double" style="color:#909">"method call didn't alter the values of the attributes"</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="structure">)</span> <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">diag</span> <span class="word">Dumper</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span> <span class="structure">);</span>
    <span class="structure">};</span>
  <span class="structure">};</span></pre>
		<p>The module itself as a whole can also be considered a "unit" so that very basic module-wide concerns can be tested there.</p>
		<p>A fairly simple module-wide unit test:</p>
		<pre class="highlighting-perl">  <span class="word">describe</span> <span class="double" style="color:#909">"class `$CLASS`"</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it inherits from Moo::Object'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">isa_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'Moo::Object'</span> <span class="structure">);</span>
    <span class="structure">};</span>
    
    <span class="word">tests</span> <span class="single" style="color:#909">'it can be instantiated'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">can_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'new'</span> <span class="structure">);</span>
    <span class="structure">};</span>
  <span class="structure">};</span></pre>
		<h2><span id="Integration_tests">Integration tests</span></h2>
		<p>Integration tests can take a far more freeform approach. These tests should ensure that the system as a whole, or subsystems within it (which may involve multiple modules), work when used together.</p>
		<p>A good place to start is to look at the <i>SYNOPSIS</i> sections of your documentation and test that they work as advertised.</p>
		<p>Integration tests should use <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3AV0">Test2::V0</a> but will often be small enough not to benefit much from <a class="podlinkpod" href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec">Test2::Tools::Spec</a>.</p>
		<h2><span id="Running_tests_locally">Running tests locally</span></h2>
		<p>The Test2 tool for running your test suite is <a class="podlinkpod" href="https://metacpan.org/pod/App%3A%3AYath">yath</a>, but old stalwart <a class="podlinkpod" href="https://metacpan.org/pod/App%3A%3AProve">prove</a> also works well. In your project roor directory, you should be able to run <code>yath test</code> at the command-line to run your entire test suite. <code>prove -lr</code> should also work.</p>
		<p>If you need more verbose output to see exactly which tests are passing, then append <code>-v</code> to each command.</p>
		<h2><span id="Continuous_integration_with_GitHub_Actions">Continuous integration with GitHub Actions</span></h2>
		<p>I will normally use GitHub Actions to automatically run my test suite on each push, on every major version of Perl I support. One of the test runs will load <a class="podlinkpod" href="https://metacpan.org/pod/Devel%3A%3ACover">Devel::Cover</a> and use it to upload test coverage data to <a class="podlinkurl" href="https://codecov.io">Codecov</a> and <a class="podlinkurl" href="https://coveralls.io">Coveralls</a>.</p>
		<p>This gives me (almost) instant feedback on whether recent commits have broken things or reduced test coverage.</p>
		<p>100% coverage on Coveralls is totally achieveable. 100% coverage on Codecov often takes a lot more work as it measures branch coverage instead of statement coverage. It's certainly a good goal though.</p>
		<p>Exactly how to set up continuous integration will depend a lot on your built tools, so I won't go into specifics here.</p>
		<h2><span id="Summary">Summary</span></h2>
		<p>I feel this setup provides a pretty good basis for test-driven Perl development in 2023.</p>]]>
    </content>
</entry>
  <entry>
    <title>SPVM improved Exchange API at v0.9684. Welcome to this easy world of type conversion!</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-improved-exchange-api-at-v09684-213c" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM"&gt;SPVM&lt;/a&gt; improved Exchange API at &lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/Changes"&gt;v0.9684&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is the &lt;a href="https://metacpan.org/pod/SPVM::ExchangeAPI"&gt;Exchange API&lt;/a&gt;? It is a method for converting Perl data structures and SPVM data structures to each other.&lt;/p&gt;

&lt;p&gt;SPVM is a statically typed language. Have you ever thought about the difficulties in passing an array of strings to a statically typed language?&lt;/p&gt;

&lt;p&gt;Sounds easy? Please try it, this difficulty will be harder than you think. Strings are not just numbers. It must be dynamically allocated in memory. And when it comes to arrays, you need to allocate memory for the array, allocate memory for multiple strings, and assign them to the array. And finally, multiple strings must be deallocated and the array must be freed.&lt;/p&gt;

&lt;p&gt;How many lines does this take? What happens if we repeat this over and over? More mistakes. More copy and paste. Your brain will get bored with the same thing over and over again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# SPVM
class MyClass {
  static method foo ($strings : string[]) { ... }
}

# Perl
SPVM::MyClass-&amp;gt;foo(["aaa", "bbb", "ccc"]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you do not have to think about anything. Just pass the Perl string array reference as is.&lt;/p&gt;

&lt;p&gt;This is just one example, but there are many automatic type conversions and methods that support conversions.&lt;/p&gt;

&lt;p&gt;This is just one example, but there are many automatic type conversions and methods available in the &lt;a href="https://metacpan.org/pod/SPVM::ExchangeAPI"&gt;Exchange API&lt;/a&gt; to support conversions.&lt;/p&gt;

&lt;p&gt;Why don't you take a step into the world of SPVM's easy type conversion? The ease of type conversion will change the value of interactions between statically and dynamically typed languages.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-improved-exchange-api-at-v09684-213c</id>
    <published>2023-01-24T22:36:30Z</published>
    <updated>2023-01-24T22:36:30Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
    <category term="beginners"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Perl Testing in 2023</title>
    <link rel="alternate" href="https://dev.to/tobyink/perl-testing-in-2023-hd7" type="text/html"/>
    <content type="html">&lt;p&gt;With my open source work, I’ve historically taken an approach which relies more on integration testing than unit testing, but with some of my newer projects, I’ve tried adopting principles from $paidwork and applying them to my free software.&lt;/p&gt;

&lt;p&gt;This is a quick run-down of how I’m structuring my test suite in newer projects. It’s likely that many of my existing projects will never adopt this structure, but some may.&lt;/p&gt;

&lt;h2&gt;
  
  
  Out with the old, in with the new
&lt;/h2&gt;

&lt;p&gt;First step is ditching &lt;a href="https://metacpan.org/pod/Test%3A%3AMore"&gt;Test::More&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Test%3A%3AFatal"&gt;Test::Fatal&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Test%3A%3AWarnings"&gt;Test::Warnings&lt;/a&gt;, and other pre-Test2 testing libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Test2%3A%3AV0"&gt;Test2::V0&lt;/a&gt; provides a good base to work with, so we add that to our project’s requirements list straight away.&lt;/p&gt;

&lt;p&gt;We’ll round that out with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AAuthorTesting"&gt;Test2::Require::AuthorTesting&lt;/a&gt; to skip certain tests when run on the end user’s machine, and require the &lt;code&gt;AUTHOR_TESTING&lt;/code&gt; environment variable to run. This is useful for tests which are very slow or require a highly specific environment to run in.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test2%3A%3ARequire%3A%3AModule"&gt;Test2::Require::Module&lt;/a&gt; to skip certain tests when optional modules are unavailable.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec"&gt;Test2::Tools::Spec&lt;/a&gt; to better structure our unit tests.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail"&gt;Test2::Plugin::BailOnFail&lt;/a&gt; for when your tests simply cannot carry on. Use sparingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other Test2 modules that can be nice to have, but that’s a good starter set. The ones I list above are distributed alongside &lt;a href="https://metacpan.org/pod/Test2%3A%3AV0"&gt;Test2::V0&lt;/a&gt;, so you get them “for free”. It is worth explicitly listing them in your project’s dependencies though, in case they are split into separate distributions in the future.&lt;/p&gt;

&lt;h2&gt;
  
  
  Test directory structure
&lt;/h2&gt;

&lt;p&gt;Perl distributions typically keep their tests in a directory called &lt;em&gt;t&lt;/em&gt; found inside the project root. We won’t change that. We will however create two subdirectories within it, &lt;em&gt;t/unit&lt;/em&gt; and &lt;em&gt;t/integration&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You may have other categories of tests which need their own subdirectories too, but these two will be sufficient for most projects.&lt;/p&gt;

&lt;p&gt;If support modules are needed for testing, they can live in &lt;em&gt;t/lib&lt;/em&gt;. If any data files are needed, put them in &lt;em&gt;t/share&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Any especially important tests can included in the &lt;em&gt;t&lt;/em&gt; directory itself for maximum visibility. I recommend giving them numerically-prefixed filenames for better control over the order they run in.&lt;/p&gt;

&lt;p&gt;I will typically include two such tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;t/00start.t&lt;/em&gt; which performs no real testing, but prints relevant information about the system it’s being run on, such as the version numbers of dependencies, the values of important environment variables, etc.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;t/01basic.t&lt;/em&gt; which loads all of your modules, or at least the important ones, then passes without any real testing being done. The purpose of this is to quickly check for syntax errors so extreme that they prevent your code from even compiling. This is a good place for &lt;a href="https://metacpan.org/pod/Test2%3A%3APlugin%3A%3ABailOnFail"&gt;Test2::Plugin::BailOnFail&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Unit tests
&lt;/h2&gt;

&lt;p&gt;For each module &lt;em&gt;lib/Foo/Bar.pm&lt;/em&gt; there should be a corresponding unit test script &lt;em&gt;t/unit/Foo/Bar.t&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The prelude of this file will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo::Bar&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::Tools::&lt;/span&gt;&lt;span class="nv"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The footer will look exactly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in between will be tests for each unit of code. A “unit” would typically be a function, a method, or an important package variable. Tests for a unit should avoid exercising much code outside their unit, and should &lt;em&gt;especially&lt;/em&gt; avoid exercising code outside the target module.&lt;/p&gt;

&lt;p&gt;A fairly extensive unit test for a method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="nv"&gt;describe&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method `foo_bar`&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;both defined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;both defined, but foo is empty string&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;both defined, but bar is empty string&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;both defined, but both are empty string&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo is undefined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar is undefined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;both are undefined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'';&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;it works&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$got_foo_bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$got_exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$got_warnings&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nv"&gt;$got_exception&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;dies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$got_warnings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;warns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nv"&gt;$got_foo_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo_bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$got_exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no exception thrown&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$got_warnings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no warnings generated&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$got_foo_bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected_foo_bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected string returned&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method call didn't alter the values of the attributes&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;diag&lt;/span&gt; &lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The module itself as a whole can also be considered a “unit” so that very basic module-wide concerns can be tested there.&lt;/p&gt;

&lt;p&gt;A fairly simple module-wide unit test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="nv"&gt;describe&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class `&lt;/span&gt;&lt;span class="si"&gt;$CLASS&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;it inherits from Moo::Object&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;isa_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Moo::Object&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;it can be instantiated&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Integration tests
&lt;/h2&gt;

&lt;p&gt;Integration tests can take a far more freeform approach. These tests should ensure that the system as a whole, or subsystems within it (which may involve multiple modules), work when used together.&lt;/p&gt;

&lt;p&gt;A good place to start is to look at the &lt;em&gt;SYNOPSIS&lt;/em&gt; sections of your documentation and test that they work as advertised.&lt;/p&gt;

&lt;p&gt;Integration tests should use &lt;a href="https://metacpan.org/pod/Test2%3A%3AV0"&gt;Test2::V0&lt;/a&gt; but will often be small enough not to benefit much from &lt;a href="https://metacpan.org/pod/Test2%3A%3ATools%3A%3ASpec"&gt;Test2::Tools::Spec&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Running tests locally
&lt;/h2&gt;

&lt;p&gt;The Test2 tool for running your test suite is &lt;a href="https://metacpan.org/pod/App%3A%3AYath"&gt;yath&lt;/a&gt;, but old stalwart &lt;a href="https://metacpan.org/pod/App%3A%3AProve"&gt;prove&lt;/a&gt; also works well. In your project roor directory, you should be able to run &lt;code&gt;yath test&lt;/code&gt; at the command-line to run your entire test suite. &lt;code&gt;prove -lr&lt;/code&gt; should also work.&lt;/p&gt;

&lt;p&gt;If you need more verbose output to see exactly which tests are passing, then append &lt;code&gt;-v&lt;/code&gt; to each command.&lt;/p&gt;

&lt;h2&gt;
  
  
  Continuous integration with GitHub Actions
&lt;/h2&gt;

&lt;p&gt;I will normally use GitHub Actions to automatically run my test suite on each push, on every major version of Perl I support. One of the test runs will load &lt;a href="https://metacpan.org/pod/Devel%3A%3ACover"&gt;Devel::Cover&lt;/a&gt; and use it to upload test coverage data to &lt;a href="https://codecov.io"&gt;Codecov&lt;/a&gt; and &lt;a href="https://coveralls.io"&gt;Coveralls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gives me (almost) instant feedback on whether recent commits have broken things or reduced test coverage.&lt;/p&gt;

&lt;p&gt;100% coverage on Coveralls is totally achieveable. 100% coverage on Codecov often takes a lot more work as it measures branch coverage instead of statement coverage. It’s certainly a good goal though.&lt;/p&gt;

&lt;p&gt;Exactly how to set up continuous integration will depend a lot on your built tools, so I won’t go into specifics here.&lt;/p&gt;

&lt;h2&gt;
  
  
  Summary
&lt;/h2&gt;

&lt;p&gt;I feel this setup provides a pretty good basis for test-driven Perl development in 2023.&lt;/p&gt;

</content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/perl-testing-in-2023-hd7</id>
    <published>2023-01-24T17:38:36Z</published>
    <updated>2023-01-24T17:38:36Z</updated>
    <category term="perl"/>
    <category term="tdd"/>
    <category term="test2suite"/>
  </entry>
  <entry>
    <title>#600 - 600th edition and still going ...</title>
    <link rel="alternate" href="https://perlweekly.com/archive/600.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Last week, <strong>Team PWC</strong> celebrated the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200">200th week</a> and today we are presenting <strong>600th edition</strong>. Kudos to all the editors, current and past for the care and affections. It feels nice to be associated with such a popular events.</p>
<p>I would also like to thank all the die hard fans of the <strong>Perl Weekly Newsletter</strong> for their support and constructive suggestions from time to time. It really helps me to focus on things important to the readers. I know it is not easy to do this every week but the love and affection we get works like a magic.</p>
<p>I remember there was time when blogging was the only source of information but now a days we have plenty of platforms where you get usefull informations. You know what I mean and where you can catch us. I love having 2-ways dicussion on any topics related to Perl. It is something I always encourage if you have spare time. I have seen how young blood getting involved in so many exciting things about Perl, for example on <strong>Telegram</strong>. Although I don't get time to take part in the discussion but I do watch how the discussion follow through. I have senior member of <strong>Perl Community</strong> helping young blood with their experiences. It would be unfair to name few here. You know who I am talking about. I salute to all those who keep <strong>Perl</strong> alive.</p>
<p>If you have any ideas/suggestions then please do share with us. I would to hear your point of views. Enjoy the rest of the newsletter till then.</p></div>
    </content>
    <id>https://perlweekly.com/archive/600.html</id>
    <published>2023-01-23T10:00:00Z</published>
    <updated>2023-01-23T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Perl Weekly #600 - 600th edition and still going ...</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-600-600th-edition-and-still-going--4ika" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/600.html"&gt;Perl Weekly 600&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Last week, &lt;strong&gt;Team PWC&lt;/strong&gt; celebrated the &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200"&gt;200th week&lt;/a&gt; and today we are presenting &lt;strong&gt;600th edition&lt;/strong&gt;. Kudos to all the editors, current and past for the care and affections. It feels nice to be associated with such a popular events.&lt;/p&gt;

&lt;p&gt;I would also like to thank all the die hard fans of the &lt;strong&gt;Perl Weekly Newsletter&lt;/strong&gt; for their support and constructive suggestions from time to time. It really helps me to focus on things important to the readers. I know it is not easy to do this every week but the love and affection we get works like a magic.&lt;/p&gt;

&lt;p&gt;I remember there was time when blogging was the only source of information but now a days we have plenty of platforms where you get usefull informations. You know what I mean and where you can catch us. I love having 2-ways dicussion on any topics related to Perl. It is something I always encourage if you have spare time. I have seen how young blood getting involved in so many exciting things about Perl, for example on &lt;strong&gt;Telegram&lt;/strong&gt;. Although I don't get time to take part in the discussion but I do watch how the discussion follow through. I have senior member of &lt;strong&gt;Perl Community&lt;/strong&gt; helping young blood with their experiences. It would be unfair to name few here. You know who I am talking about. I salute to all those who keep &lt;strong&gt;Perl&lt;/strong&gt; alive.&lt;/p&gt;

&lt;p&gt;If you have any ideas/suggestions then please do share with us. I would to hear your point of views. Enjoy the rest of the newsletter till then.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcement by Gabor
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://osdc.code-maven.com/osdc-public-2023-01-perl"&gt;Open Source Development Course for Perl developers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Last week I already mentioned this course that will &lt;b&gt;start tomorrow&lt;/b&gt;, January 24th, 2023. In the course we'll learn and practice all the process of contributing to Open Source projects with an emphasize on Perl. We'll learn and practice git/github/pull-request/github pages/testing/test coverage/github actions/etc. You can still register and join the group.&lt;/p&gt;




&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-094.html"&gt;This Week in PSC (094)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love getting regular update by the Perl Steering Council. Every minute details are now public. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/max_maischein/2023/01/otobo-supports-the-german-perlraku-workshop.html"&gt;OTOBO supports the German Perl/Raku-Workshop&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Happy to see GPW getting support of OTOBO. You should attend the workshop if you can. It is not just for German speaking audience. I have attended once in the past too.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://news.perlfoundation.org/post/retirementdave"&gt;Retirement Announcement - Dave Rolsky&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/chrisarg/2023/01/using-perl-to-prepare-sequencing-files-to-submit-to-ncbis-geo.html"&gt;Using Perl to prepare sequencing files to submit to NCBI's GEO&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pleasantly surprised to see how Perl can be used is so many different fields.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/oodler_577/2023/01/post-advent-carolling.html"&gt;Util::H2O and More, during Ordinary Times&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice to see, Perl Advent Calendar post is still being discussed today. We should all share the work done by the Perl community with the rest of the world.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/saif/2023/01/my-family-and-other-fish.html"&gt;My Family and Other Fish (PerlayStation Part 2)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Good to see Saif is back. I find the subject very engaging and ofcouse his style of writing takes it to another level..&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/tom_wyant/2023/01/regexp-delimiters.html"&gt;Regexp Delimiters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Looking at regexp through the lens of Perl is always fun. You will never get bored.&lt;/p&gt;




&lt;h2&gt;
  
  
  Web
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/16/synacor-challenge-repo/"&gt;Synacor Challenge - my repo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Did you know about Synacor Challenge? I didn't. Find out more in the blog post.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/22/knowtee/"&gt;KnowTee - easy notifications&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another tool for hobby-scale projects. Interesting, worth checking.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201"&gt;The Weekly Challenge - 201&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Missing Numbers" and "Penny Piles". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-200"&gt;RECAP - The Weekly Challenge - 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Arithmetic Slices" and "Seven Segment 200" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/seven-angry-slices.html"&gt;Seven Angry Slices&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The verbose version of solution is worth checking. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://colincrain.com/2023/01/22/seven-segments-to-midnight/"&gt;Seven Segments to Midnight&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The background story of task is something you don't want to miss it. I loved it. Thank you Colin.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://jacoby.github.io/2023/01/16/bicentweekly-solution-weekly-challenge-200.html"&gt;Bicent-Weekly Solution&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Loop is the flavour of the week. Complicated solutions can be solved using simple loops. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/zapwai/weekly-challenge-200-1o38"&gt;Weekly Challenge 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice to know how Perl and Raku behave differently at times. Thanks for sharing your experience.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/19/pwc200-arithmetic-slices/"&gt;PWC200 - Arithmetic Slices&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;No question from Flavio this week. Straight to the solution in Perl and Raku. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/20/pwc200-seven-segment-200/"&gt;PWC200 - Seven Segment 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Good use of state in the solution. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-200/james-smith#readme"&gt;The Weekly Challenge 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We missed the performance stats this week. Never mind, we still have top notch solution.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/01/perl-weekly-challenge-200-arithmetic-slices-and-seven-segment-display.html"&gt;Perl Weekly Challenge 200: Arithmetic Slices and Seven Segment Display&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Plenty of demo makes it crystal clear how the code works. Cool attempt. Keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/01/16/PerlWeeklyChallenge200.html"&gt;not optimal!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Easy route picked up by Luca, still not a bad attempt. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/01/16/PWC200/"&gt;Perl Weekly Challenge 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Use of binary mask is good choice. I liked it, thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://pjcs-pwc.blogspot.com/2023/01/slicing-and-dicing-double-century.html"&gt;Slicing and dicing a double century&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The simplest solution yet very compact. I am impressed. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/01/robbie-hatleys-perl-solutions-to-weekly_22.html"&gt;The Weekly Challenge #200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Robbie found task #2 easier than task #1. It was supposed to the otherway around. Still we got two nice solutions. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/01/The_Weekly_Challenge_200__Seven_Slices.html"&gt;Seven Slices&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Use of bitmap table is really nice. Thanks for sharing your knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/two-hundred-slices-ach"&gt;Two hundred slices&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thank you for spreading the work on dev.to site and your kind message. We got the usual collection of Perl and Python, deadly combination.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://thiujiac.blogspot.com/2023/01/pwc-200.html"&gt;PWC 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I liked the various different approaches being used by all. Steve came up with simple string to solve the task. Nice one.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/01/16/2023-03-advent-radux/"&gt;2023.03 Advent Radux&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/cdxxviii-9-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/dxli-metacpan-weekly-report-iosocketssl.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/dlxix-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  The corner of Gabor
&lt;/h2&gt;

&lt;p&gt;A couple of entries sneaked in by Gabor.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perlmaven.com/oneliner-read-huge-directory"&gt;one-liner: read first elements of a huge directory&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At a client where I work we have a pretty big folder with quite a few files. Trying the list the first few files was an issue with &lt;b&gt;ls&lt;/b&gt; and thus I wrote a short one-liner. Then shortened it. I wrote an article about it. Then Aristotle further improved it. It's all there in the blog post.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://osdc.code-maven.com/osdc-public-2023-01-perl"&gt;Open Source Development Course for Perl developers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Last week I already mentioned this course that will &lt;b&gt;start tomorrow&lt;/b&gt;, January 24th, 2023. In the course we'll learn and practice all the process of contributing to Open Source projects with an emphasize on Perl. We'll learn and practice git/github/pull-request/github pages/testing/test coverage/github actions/etc. You can still register and join the group.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/09e"&gt;Perl to Node Cross-training? Yes Please! UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/zfj"&gt;Bold, beautiful, and… brainy? Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Offices are located within Dubai, Malta, and Malaysia so if you’re in one of those places, you’re one step closer to where you need to be. Hanging out in Honolulu? Not to worry. For the right person, they’ve got a work-sponsored visa and relocation package — if you’ve got the expertise and an adventurous spirit, they’ve got the will and means to get you where you need to be.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/ufl"&gt;Modern Perl and positive team vibes. UK Remote Perl role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you’re a Modern Perl developer in the UK with Go-lang experience (or at least a strong desire to learn) and you’re searching for a team of dynamos, we’ve found the perfect place for you. This award-winning company may be newer, but the combined experience of their people is impressive. No doubt this is one of the many reasons their AI recruitment marketing business has taken off!&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-600-600th-edition-and-still-going--4ika</id>
    <published>2023-01-23T08:29:18Z</published>
    <updated>2023-01-23T08:29:18Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 200</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-200/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-200/</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 201</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-201/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Missing Number 10. TASK #2: Penny Piles HEADLINES  Welcome to the Week #201 of The Weekly Challenge.
Last week, Mariano Spadaccini, joined the Team PWC. Thank you for your first contributions in Perl.
Apology for the late acceptance of your contributions last week. I wasn&amp;rsquo;t mentally there, so avoided the screen as much as I can.</content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-201/</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Two hundred slices</title>
    <link rel="alternate" href="https://dev.to/simongreennet/two-hundred-slices-ach" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Weekly Challenge 200
&lt;/h2&gt;

&lt;p&gt;As we reached our 200th challenge, can I just thank Mohammad for all the work each puts in to setting and maintaining the challenge each week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-179/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1: Arithmetic Slices
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given an array of integers.&lt;/p&gt;

&lt;p&gt;Write a script to find out all Arithmetic Slices for the given array of integers.&lt;/p&gt;

&lt;p&gt;An integer array is called arithmetic if it has at least 3 elements and the differences between any three consecutive elements are the same.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;This one is relatively straight forward. We start with an empty list (array in Perl) called &lt;code&gt;solutions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I then iterate a variable called &lt;code&gt;start&lt;/code&gt; from zero to 3 less than the length of the original list. For each iteration, I calculate the absolute difference between the value at that position and the value in the next position, and store this as the variable &lt;code&gt;diff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I then have an inner loop with the variable &lt;code&gt;end&lt;/code&gt; from start + 2 to one less than the length of the list. If the the absolute difference between the value at the position &lt;code&gt;end&lt;/code&gt; and the previous number is the same as &lt;code&gt;diff&lt;/code&gt;, we have a solution, and add it to the &lt;code&gt;solutions&lt;/code&gt; list. I continue until either the difference is not &lt;code&gt;diff&lt;/code&gt; or we have reached the end of the list.&lt;/p&gt;

&lt;p&gt;Finally, I print the solution. In the Python code, I store items in the &lt;code&gt;solution&lt;/code&gt; list as tuples as this will expand nicely as a string. In the Perl code, I store items as a string.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 1 2 3 4
&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3, 4&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 2
&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Task 2: Seven Segment 200
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;A seven segment display is an electronic component, usually used to display digits. The segments are labeled 'a' through 'g' as shown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aaaa
f  b
f  b
gggg
e  c
e  c
dddd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The encoding of each digit can thus be represented compactly as a truth table:&lt;/p&gt;

&lt;p&gt;my @truth = qw^abcdef bc abdeg abcdg bcfg acdfg acdefg abc abcdefg abcfg^;&lt;/p&gt;

&lt;p&gt;For example, $truth[1] = ‘bc’. The digit 1 would have segments ‘b’ and ‘c’ enabled.&lt;/p&gt;

&lt;p&gt;Write a program that accepts any decimal number and draws that number as a horizontal sequence of ASCII seven segment displays, similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To qualify as a seven segment display, each segment must be drawn (or not drawn) according to your @truth table.&lt;/p&gt;

&lt;p&gt;The number "200" was of course chosen to celebrate our 200th week!&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;I really like these tasks, and you really need to think about the solution. The thing that makes this tricky is that multiple numbers need to appear side by side.&lt;/p&gt;

&lt;p&gt;This is how I tacked it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Defined the list &lt;code&gt;truth&lt;/code&gt; as set in the task.&lt;/li&gt;
&lt;li&gt;Take the input number &lt;code&gt;n&lt;/code&gt; and turn it into a list of truths. This variables is called &lt;code&gt;numbers&lt;/code&gt;. For example 200 is turned into &lt;code&gt;['abdeg', 'abcdef', 'abcdef']&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Define a list of &lt;code&gt;lines&lt;/code&gt;. If it is a string (scalar in Perl) then it represents one of the horizontal lines. If it is a list (arrayref in Perl) then it has two values represented the two vertical lines. The first value is the left side, the second value is the right side.&lt;/li&gt;
&lt;li&gt;Iterate over each &lt;code&gt;lines&lt;/code&gt; calling the &lt;code&gt;print_row&lt;/code&gt; function with the value from &lt;code&gt;numbers&lt;/code&gt; and the &lt;code&gt;line&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The print_row method does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a list called &lt;code&gt;row&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For each number:

&lt;ul&gt;
&lt;li&gt;If the list is a scalar, append either dashes or spaces depending if the letter from &lt;code&gt;list&lt;/code&gt; is in the &lt;code&gt;number&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the list is an array, determine if the left and or right value should show a pipe &lt;code&gt;|&lt;/code&gt; or space depending if the letter from is in the &lt;code&gt;number&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concatenate the values in &lt;code&gt;row&lt;/code&gt; by two space.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perl doesn't have an &lt;code&gt;in&lt;/code&gt; method like Python does. I have created a method called &lt;code&gt;_in&lt;/code&gt; because &lt;code&gt;index( $t, $s ) != -1&lt;/code&gt; is a little too wordy!&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-2.py 200
-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------                  
|        |     |  |     |
|        |     |  |     |
-------  -------  -------

$ ./ch-2.py 12345
         -------  -------           -------
      |        |        |  |     |  |      
      |        |        |  |     |  |      
         -------  -------  -------  -------
      |  |              |        |        |
      |  |              |        |        |
         -------  -------           -------

$ ./ch-2.py 67890
-------  -------  -------  -------  -------
|              |  |     |  |     |  |     |
|              |  |     |  |     |  |     |
-------           -------  -------         
|     |        |  |     |        |  |     |
|     |        |  |     |        |  |     |
-------           -------           -------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/two-hundred-slices-ach</id>
    <published>2023-01-22T09:39:01Z</published>
    <updated>2023-01-22T09:39:01Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Using Perl to prepare sequencing files to submit to NCBI's GEO</title>
    <link rel="alternate" href="https://blogs.perl.org/users/chrisarg/2023/01/using-perl-to-prepare-sequencing-files-to-submit-to-ncbis-geo.html"/>
    <id>tag:blogs.perl.org,2023:/users/chrisarg//4237.11006</id>
    <published>2023-01-22T06:12:39Z</published>
    <updated>2023-01-22T06:42:25Z</updated>
    <author>
        <name>chrisarg</name>
        
    </author>
    <category term="bioinformatics" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="bioinformatics" label="Bioinformatics" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="geo" label="GEO" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="ncbi" label="NCBI" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="sequencing" label="sequencing" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/chrisarg/">
        <![CDATA[<p>In the middle of a manuscript submission that requires sequencing data to be uploaded to <a href="https://www.ncbi.nlm.nih.gov/">NCBI's </a> Gene Expression Omnibus.<br />
This is a fairly standardized and (painful!) process that requires one to assemble their sequencing data (a collection of hundreds or thousands of files in the <a href="https://en.wikipedia.org/wiki/FASTQ_format">FASTQ</a> format), put them in a single (very large) folder, compress them, generate md5 hashes and then upload them to <a href="https://www.ncbi.nlm.nih.gov/geo/">GEO's </a>FTP site. <br />
There are a couple of tutorials available e.g. <a href="http://yeolab.github.io/onboarding/geo.html">here</a> and <a href="https://divingintogeneticsandgenomics.rbind.io/post/how-to-upload-files-to-geo/">there</a> that mostly cover the use case of one having assembled the files into a single fastq. <br />
Our <a href="https://www.biorxiv.org/content/10.1101/2022.12.16.520507v1">project</a> used Oxford's Nanopore platform which store's its data as a series of fastq files, each holding a user defined number of sequences (in our case 2,000). Some of the experiments had generated an excess of 10M reads, so we are talking about a serious number of files to process: <br />
</p><ol><br />
	<li>uncompress (if compressed)</li><br />
	<li>concatanate</li><br />
	<li>compress</li><br />
	<li>hash using md5sum</li><br />
</ol><p></p>

<p>I am extremely lazy to do repetitive shell typing, so I figure to use PERL to package the steps together. One needs first to create a list of directories that have the sequencing files (by default nanopore stores them in a directory that contains two subdirectories, called "fastq_pass" and "fastq_fail", with the pass and fail referring to files with different sequencing qualities. <br />
I hardwired the name of that CSV in the script (but you could easily modify to use the commandline to get an arbitrary file), as well as the name of the output directory (which must be created beforehand). <br />
The repetitive steps are now taken care by this PERL script (which is boring, but useful). <br /></p><p><br /></p><p><br />#!/home/chrisarg/perl5/perlbrew/perls/current/bin/perl<br />## compress files for NCBI<br />use v5.36;<br />use experimental qw(signatures);<br />use strict;<br />use Text::CSV qw( csv );<br />use File::Spec ;<br />use File::Basename;<br />use File::Copy;<br /><br />use FindBin qw($Bin);<br /><br />my $out_directory = File::Spec-&gt;catdir(dirname($Bin),'chrisarg_NCBI_submission');<br />my $analyses_files = <br />&nbsp;&nbsp;&nbsp; csv(in =&gt; File::Spec-&gt;catfile($Bin,"package_PALS_NS_2.csv"), <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sep_char =&gt;',',headers =&gt; "auto") <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die Text::CSV-&gt;error_diag; <br />my @fastq_directories = map {<br />&nbsp;&nbsp;&nbsp; File::Spec-&gt;catdir(dirname($Bin),values %{ $_})<br />&nbsp;&nbsp;&nbsp; } @$analyses_files;<br />my @fastq_output_names = map { <br />&nbsp;&nbsp;&nbsp; basename(values %{ $_}).".fastq";<br />&nbsp;&nbsp;&nbsp; } @$analyses_files;<br /><br />## directories go here<br />my (@files, @gz, @fastq,@dir_of_files,@dest_files, $output_fh);<br />while (my($index,$current_experiment_dir) = each @fastq_directories){<br />&nbsp;&nbsp;&nbsp; @dir_of_files = (File::Spec-&gt;catdir($current_experiment_dir,'fastq_pass'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catdir($current_experiment_dir,'fastq_fail'),<br />&nbsp;&nbsp;&nbsp; );<br />&nbsp;&nbsp;&nbsp; for my $current_dir (@dir_of_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; say "Processing $current_dir";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chdir $current_dir or die "can't cd into $current_dir";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @gz = glob('*.gz');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @fastq = glob('*.fastq');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (scalar @gz &gt; 1){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @dest_files = map {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catfile($out_directory,$_)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } @gz;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (0..$#dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy($gz[$_],$dest_files[$_])<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "Can't copy $gz[$_] because of&nbsp; $!"; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system 'gunzip', $dest_files[$_];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## may have to deal with mix of gzpd and not files<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (scalar @fastq &gt; 1){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @dest_files = map {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File::Spec-&gt;catfile($out_directory,$_)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } @fastq;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (0..$#dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy($fastq[$_],$dest_files[$_])<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "Can't copy $gz[$_] because of&nbsp; $!"; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; chdir $out_directory;<br />&nbsp;&nbsp;&nbsp; @dest_files = glob('*.fastq');<br />&nbsp;&nbsp;&nbsp; open&nbsp; $output_fh,&nbsp; '&gt;',$fastq_output_names[$index] <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "failed at $fastq_output_names[$index] due to $!";<br />&nbsp;&nbsp;&nbsp; foreach my $input_file (@dest_files){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; open my $input_fh , '&lt;', $input_file<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or die "can't open $input_file for reading";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print $output_fh $_ while &lt;$input_fh&gt;;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; close $output_fh;<br />&nbsp;&nbsp;&nbsp; unlink @dest_files;<br />&nbsp;&nbsp; !system 'gzip', '-9', $fastq_output_names[$index] <br />&nbsp;&nbsp;&nbsp; or die 'something went wrong';<br />}<br /><br />chdir $out_directory;<br />system "md5sum * &gt; md5sum.txt";<br /><br /><br /><br /><br /><br />
</p><blockquote></blockquote><p></p>]]>
        
    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-01-22T00:00:00Z</published>
    <updated>2023-01-22T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2656893155318965955</id>
    <published>2023-01-21T21:31:00.000+01:00</published>
    <updated>2023-01-21T21:31:47.119+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxviii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.77' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.77&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.76 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Class-Method-Modifiers-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Class::Method::Modifiers&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provides Moose-like method modifiers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2023-01-16&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 3 years, 5 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.030&lt;/strong&gt; on 2023-01-19&lt;/li&gt;  &lt;li&gt;Votes: 179&lt;/li&gt;  &lt;li&gt;Previous version: 6.029 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.001004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures") &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.001004&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.001003 was 5 years, 2 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.080' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.080&lt;/strong&gt; on 2023-01-18&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 2.078 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20230120&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.20221220 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9683' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9683&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9681 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.0.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v9.0.0&lt;/strong&gt; on 2023-01-16&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: v8.10.0 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.002001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002001&lt;/strong&gt; on 2023-01-20&lt;/li&gt;  &lt;li&gt;Votes: 133&lt;/li&gt;  &lt;li&gt;Previous version: 2.002000 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2656893155318965955/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxviii-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2656893155318965955"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2656893155318965955"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxviii-9-great-cpan-modules-released.html" title="(cdxxviii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9174607039420115309</id>
    <published>2023-01-21T21:29:00.001+01:00</published>
    <updated>2023-01-21T21:29:09.882+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxli) metacpan weekly report - IO::Socket::SSL</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 53&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/21 20:28:45 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPU::Z80::Disassembler" target="_blank"&gt;CPU::Z80::Disassembler&lt;/a&gt; - Disassemble the flow of a Z80 program&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Logger::Log4perl" target="_blank"&gt;Dancer2::Logger::Log4perl&lt;/a&gt; - Dancer2 logger interface for Log4perl. &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fl" target="_blank"&gt;Fl&lt;/a&gt; - Bindings for the Stable 1.3.x Branch of the Fast Light Toolkit&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Antimat" target="_blank"&gt;Lingua::RU::Antimat&lt;/a&gt; - Perl Module for removal Russian slang from chat, guestbooks, etc.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Preposition" target="_blank"&gt;Lingua::RU::Preposition&lt;/a&gt; - Lingua::RU::Preposition - Russian preposition choosing&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Pod::LinkCheck::Lite" target="_blank"&gt;Test::Pod::LinkCheck::Lite&lt;/a&gt; - Test POD links&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=270)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AppConfig" target="_blank"&gt;AppConfig&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Application::Plugin::ValidateRM" target="_blank"&gt;CGI::Application::Plugin::ValidateRM&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::INI" target="_blank"&gt;Config::INI&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Rijndael" target="_blank"&gt;Crypt::Rijndael&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Page" target="_blank"&gt;Data::Page&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CopyFilesFromBuild" target="_blank"&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::MetaProvides::Package" target="_blank"&gt;Dist::Zilla::Plugin::MetaProvides::Package&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::PodWeaver" target="_blank"&gt;Dist::Zilla::Plugin::PodWeaver&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Test::Kwalitee" target="_blank"&gt;Dist::Zilla::Plugin::Test::Kwalitee&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME::Kit" target="_blank"&gt;Email::MIME::Kit&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FASTX::Reader" target="_blank"&gt;FASTX::Reader&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::MimeInfo" target="_blank"&gt;File::MimeInfo&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML5::DOM" target="_blank"&gt;HTML5::DOM&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+2=46)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tty" target="_blank"&gt;IO::Tty&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IUP" target="_blank"&gt;IUP&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Identify" target="_blank"&gt;Lingua::Identify&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Inflect" target="_blank"&gt;Lingua::RU::Inflect&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::FD" target="_blank"&gt;Linux::FD&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Message" target="_blank"&gt;Mail::Message&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MailTools" target="_blank"&gt;MailTools&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mo" target="_blank"&gt;Mo&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DNS" target="_blank"&gt;Net::DNS&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=173)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=401)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Build" target="_blank"&gt;Perl::Build&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Pulp" target="_blank"&gt;Perl::Critic::Pulp&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::PrereqScanner" target="_blank"&gt;Perl::PrereqScanner&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Simple" target="_blank"&gt;Proc::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=115)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ASCIITable" target="_blank"&gt;Text::ASCIITable&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::DBD" target="_blank"&gt;Tie::Hash::DBD&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Query" target="_blank"&gt;Web::Query&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9174607039420115309/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxli-metacpan-weekly-report-iosocketssl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9174607039420115309"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9174607039420115309"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxli-metacpan-weekly-report-iosocketssl.html" title="(dxli) metacpan weekly report - IO::Socket::SSL"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6635815617703338006</id>
    <published>2023-01-21T21:28:00.000+01:00</published>
    <updated>2023-01-21T21:28:02.280+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2023-01-21 20:26:32 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75122771" target="_blank"&gt;Printing hash of array as values with Dumper leads to infinite recursion&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75164065" target="_blank"&gt;Importing subroutines from parent class&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75166858" target="_blank"&gt;Can you print the subroutine's argument name in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75151132" target="_blank"&gt;Why doesn't Perl recognize the file name?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75185004" target="_blank"&gt;Convert text to value hexadecimal&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6635815617703338006/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6635815617703338006"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6635815617703338006"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxix-stackoverflow-perl-report.html" title="(dlxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>This Week in PSC (094)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-094.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11005</id>
    <published>2023-01-20T22:28:36Z</published>
    <updated>2023-01-20T22:30:24Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>PSC met today, all three of us attended.</p>

<p>We discussed:</p>

<ul>
<li>HAARG's <tt>map my $x</tt> RFC. Overall thoughts are good, with one or two minor questions we'll add as comments.
<li>Whether the additions to <tt>join()</tt> as part of RFC0013 should be gated by some sort of opt-in flag, so as to avoid surprises. Either a feature flag for the caller of <tt>join()</tt>, or a <tt>use overload</tt> import option.
<li>Maybe renaming the RFC process itself (because of the ambiguity with IETF's RFC) and improving the numbering system. More discussion needed.
</ul>]]>
        
    </content>
</entry>
  <entry>
  <title>Call for Grant Proposals: January 2023 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/saiftynet"/>
  <id>tag:news.perlfoundation.org,2023-01-20:/post/saiftynet</id>
  <published>2023-01-20T14:57:00</published>
  <updated>2023-01-20T14:57:00</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 29th, 2023, UTC. We will publish the received applications, get community feedback through February 4th, and we 
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 January 29th, 2023, UTC. We will publish the received applications, get community feedback through February 4th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
 * The applicant must be a contributor to the Perl core.
 *  The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
 * The applicant must be a contributor to the Raku language specification or one of its implementations.
 * The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than January 30th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title> OTOBO supports the German Perl/Raku-Workshop</title>
    <link rel="alternate" href="https://blogs.perl.org/users/max_maischein/2023/01/otobo-supports-the-german-perlraku-workshop.html"/>
    <id>tag:blogs.perl.org,2023:/users/max_maischein//227.11004</id>
    <published>2023-01-20T13:16:06Z</published>
    <updated>2023-01-20T13:19:48Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>We are happy to announce that Rother OSS again supports the German Perl/Raku-Workshop as a sponsor.</p>

<p>Since 2011, <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a>, based in southern Germany and with a team throughout Germany, has relied on the combination of an open source ticket system and business services from experts. Specifically: consulting, development and support for the free OTRS versions.</p>]]>
        <![CDATA[<p>Since 2011, <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a>, based in southern Germany and with a team throughout Germany, has relied on the combination of an open source ticket system and business services from experts. Specifically: consulting, development and support for the free OTRS versions.</p>

<p>In response to their changed release strategy, we released our fork <a href="https://otobo.de/">OTOBO</a> at the beginning of 2020.</p>

<p>It is again 100% free and open source, builds on a strong community and combines broad functionality in the standard with a modern service portal.</p>

<p>Seit 2011 setzt die <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a> mit Sitz in Süddeutschland und deutschlandweitem Team auf die Kombination aus Open-Source-Ticketsystem und Business Services vom Experten. Konkret: Consulting, Entwicklung und Support zu den freien OTRS-Versionen.</p>

<p>Als Reaktion auf deren geänderte Release-Strategie haben wir Anfang 2020 unseren Fork <a href="https://otobo.de/">OTOBO</a>veröffentlicht.</p>

<p>Der ist wieder 100% frei und Open Source, baut auf eine starke Community und kombiniert breite Funktionalität im Standard mit einem modernen Serviceportal.<br />
</p>]]>
    </content>
</entry>
  <entry>
  <title>Retirement Announcement - Dave Rolsky</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/retirementdave"/>
  <id>tag:news.perlfoundation.org,2023-01-20:/post/retirementdave</id>
  <published>2023-01-20T13:03:53</published>
  <updated>2023-01-20T13:03:53</updated>
  <summary>
  <![CDATA[
     After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/cc70f58576aabcc208602bd2e0339e3660864805/clock.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 200: Arithmetic Slices and Seven Segment Display</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/01/perl-weekly-challenge-200-arithmetic-slices-and-seven-segment-display.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11003</id>
    <published>2023-01-18T23:12:38Z</published>
    <updated>2023-01-19T19:34:29Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 200 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-200/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days from now (on January 22, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Arithmetic Slices</h2>

<p><em>You are given an array of integers.</em></p>

<p><em>Write a script to find out all Arithmetic Slices for the given array of integers.</em></p>

<blockquote>
  <p><em>An integer array is called arithmetic if it has at least 3 elements and the differences between any three consecutive elements are the same.</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input: @array = (1,2,3,4)
Output: (1,2,3), (2,3,4), (1,2,3,4)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = (2)
Output: () as no slice found.
</code></pre>

<h3>Arithmetic Slices in Raku</h3>

<p>The <code>find_slices</code> subroutine loops over the input array, computes the difference (<code>$gap</code>) between any two consecutive integers and checks whether the same difference can be found between the next integers. </p>

<pre><code>sub find_slices (@in) {
    my @out;
    return @out if @in.elems &lt; 3;
    for 0..@in.end - 2 -&gt; $i {
        my $gap = @in[$i+1] - @in[$i];
        for $i+2..@in.end -&gt; $j {
            last if @in[$j] - @in[$j-1] != $gap;
            push @out, @in[$i..$j];
        }
    }
    return @out;
}
for &lt;1 2 3 4&gt;, &lt;2 5&gt;, &lt;3 5 7 9&gt;, &lt;2 5 9&gt; -&gt; @test {
    say (~@test).fmt("%-10s =&gt; "), find_slices @test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./arithmetic-slices.raku
1 2 3 4    =&gt; [(1 2 3) (1 2 3 4) (2 3 4)]
2 5        =&gt; []
3 5 7 9    =&gt; [(3 5 7) (3 5 7 9) (5 7 9)]
2 5 9      =&gt; []
</code></pre>

<h3>Arithmetic Slices in Perl</h3>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub find_slices  {
    my @in = @_;
    my @out;
    # return [] if @in &lt; 3;
    for my $i (0..$#in - 2) {
        my $gap = $in[$i+1] - $in[$i];
        for my $j ($i+2..$#in) {
            last if $in[$j] - $in[$j-1] != $gap;
            push @out, [@in[$i..$j]];
        }
    }
    return @out ? @out : [];
}
for my $test ([&lt;1 2 3 4&gt;], [&lt;2 5&gt;], [&lt;3 4 5 6 8&gt;],
              [&lt;3 5 7 9&gt;], [&lt;2 5 9&gt;]) {
    printf "%-10s =&gt; ", "@$test";
    say map "(@$_) ", find_slices @$test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./arithmetic-slices.pl
1 2 3 4    =&gt; (1 2 3) (1 2 3 4) (2 3 4)
2 5        =&gt; ()
3 4 5 6 8  =&gt; (3 4 5) (3 4 5 6) (4 5 6)
3 5 7 9    =&gt; (3 5 7) (3 5 7 9) (5 7 9)
2 5 9      =&gt; ()
</code></pre>

<h2>Task 2: Seven Segment 200</h2>

<p><em>A seven segment display is an electronic component, usually used to display digits. The segments are labeled &#8216;a&#8217; through &#8216;g&#8217; as shown:</em></p>

<p><img alt="lcd-display_week200.png" src="https://blogs.perl.org/users/laurent_r/lcd-display_week200.png" width="71" height="135" class="mt-image-none" style="" /></p>

<p><em>The encoding of each digit can thus be represented compactly as a truth table:</em></p>

<pre><code>my @truth = qw&lt;abcdef bc abdeg abcdg bcfg acdfg a cdefg abc abcdefg abcfg&gt;;
</code></pre>

<p><em>For example, <code>$truth[1] = ‘bc’</code>. The digit 1 would have segments ‘b’ and ‘c’ enabled.</em></p>

<p><em>Write a program that accepts any decimal number and draws that number as a horizontal sequence of ASCII seven segment displays, similar to the following:</em></p>

<pre><code>-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
</code></pre>

<p><em>To qualify as a seven segment display, each segment must be drawn (or not drawn) according to your @truth table.</em></p>

<p><em>The number &#8220;200&#8221; was of course chosen to celebrate our 200th week!</em></p>

<p>For the 200th week of the Perl Weekly Challenge, Ryan J Thompson, the author of this task, has decided to bring us decades backward, back in the 1970s when they started to be widely used (remember lieutenant Theo Kojak&#8217;s LED watch?). We&#8217;re actually driven back more than decades, since the first seven-segment display devices date as far back as 1903 (but obviously did not use LEDs).</p>

<p>The difficulty in this task is that, for ASCII art display, we need to slice the digits into horizontal lines. I&#8217;ve decided not to use the suggested truth table, as this is quite unpractical. Instead, I&#8217;m using a table (<code>@nums</code>) dividing each digit into seven horizontal lines</p>

<h3>Seven Segment Display in Raku</h3>

<pre><code>my %c;                   # ascii coding of digit's slices
%c&lt;h&gt; = "-" x 7;         # Horizontal line
%c&lt;l&gt; = "|      ";       # Vertical bar, left
%c&lt;r&gt; = "      |";       # Vertical bar, right
%c&lt;2&gt; = "|     |";       # 2 vertical bars
%c&lt;n&gt; = " " x 7;         # empty horizontal line

my @nums =               # Digit horizontal slices
    &lt;h 2 2 n 2 2 h&gt;,     # 0
    &lt;n r r n r r n&gt;,     # 1
    &lt;h r r h l l h&gt;,     # 2
    &lt;h r r h r r h&gt;,     # 3
    &lt;n l l h 2 2 n&gt;,     # 4
    &lt;h l l h r r h&gt;,     # 5
    &lt;n l l h 2 2 h&gt;,     # 6
    &lt;h r r n r r n&gt;,     # 7
    &lt;h 2 2 h 2 2 h&gt;,     # 8
    &lt;h 2 2 h r r n&gt;;     # 9

sub display ($num) {
    my @digits = $num.comb;
    for 0..6 -&gt; $l {     # Lines 0 to 6 iof the display
        say join "  ", map {%c{@nums[$_][$l]}}, @digits;
    }
}

for &lt;200 2023 01234 56789&gt; -&gt; $test {
  display $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./seven_segments.raku

-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
-------  -------  -------  -------
      |  |     |        |        |
      |  |     |        |        |
-------           -------  -------
|        |     |  |              |
|        |     |  |              |
-------  -------  -------  -------
-------           -------  -------
|     |        |        |        |  |     |
|     |        |        |        |  |     |
                  -------  -------  -------
|     |        |  |              |        |
|     |        |  |              |        |
-------           -------  -------  -------
|        |              |  |     |  |     |
|        |              |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------
</code></pre>

<p>Note that digits 6 and 9 could have an additional horizontal bar and 7 an additional vertical bar:</p>

<pre><code>@nums[6] = &lt;h l l h 2 2 h&gt;;    # 6
@nums[7] = &lt;h 2 2 n r r n&gt;;    # 7
@nums[9] = &lt;h 2 2 h r r h&gt;;    # 9
</code></pre>

<p>This allegedly provides a more legible display (for some eyes, at least). Thus, the test line with the last five digits would be displayed like so:</p>

<pre><code>-------  -------  -------  -------  -------
|        |        |     |  |     |  |     |
|        |        |     |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------  -------
</code></pre>

<h2>Seven Segment Display in Perl</h2>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my %c;                   # ascii coding of digit's slices
$c{'h'} = "-" x 7;       # Horizontal line
$c{'l'} = "|      ";     # Vertical bar, left
$c{'r'} = "      |";     # Vertical bar, right
$c{'2'} = "|     |";     # 2 vertical bars
$c{'n'} = " " x 7;       # empty horizontal line

my @nums = (             # Digit hoirizontal slices
    [&lt;h 2 2 n 2 2 h&gt;],   # 0
    [&lt;n r r n r r n&gt;],   # 1
    [&lt;h r r h l l h&gt;],   # 2
    [&lt;h r r h r r h&gt;],   # 3
    [&lt;n 2 2 h r r n&gt;],   # 4
    [&lt;h l l h r r h&gt;],   # 5
    [&lt;n l l h 2 2 h&gt;],   # 6
    [&lt;h r r n r r n&gt;],   # 7
    [&lt;h 2 2 h 2 2 h&gt;],   # 8
    [&lt;h 2 2 h r r n&gt;]);  # 9


sub display{
    my @digits = split //, shift;
    for my $l (0..6) {
        say join "  ", map {$c{$nums[$_][$l]}} @digits;
    }
}

for my $test (&lt;200 2023 01234 56789&gt;) {
  display $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./seven_segments.pl
-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------                  
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
-------  -------  -------  -------
      |  |     |        |        |
      |  |     |        |        |
-------           -------  -------
|        |     |  |              |
|        |     |  |              |
-------  -------  -------  -------
-------           -------  -------
|     |        |        |        |  |     |
|     |        |        |        |  |     |
                  -------  -------  -------
|     |        |  |              |        |
|     |        |  |              |        |
-------           -------  -------
-------           -------  -------  -------
|        |              |  |     |  |     |
|        |              |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------
</code></pre>

<p>We could use the changes that we did to the Raku program (definition of digits 6, 7, and 9) to presumably improve their legibility:</p>

<pre><code>-------  -------  -------  -------  -------
|        |        |     |  |     |  |     |
|        |        |     |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------  -------
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 29, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>one-liner: read first elements of a huge directory</title>
  <summary type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></summary>
  <updated>2023-01-17T10:55:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/oneliner-read-huge-directory"/>  <id>https://perlmaven.com/oneliner-read-huge-directory</id>
  <content type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#599 - Open Source Development Course for Perl developers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/599.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Recently I started to offer a course called <a href="https://osdc.code-maven.com/">Open Source Development Course</a>. The idea is to let participants learn and practice(!) git/github/pull-request/testing/code-coverage/linters/ci/etc. That way they improve their development practices and can also contribute to Open Source projects.</p>
<p>It is a course designed to run for 12-13 weeks with about 5 hours per week workload. It can be either part of a university program or people can take it while they have a full-time job. Every week there is a 1-2 hours long presentation and the rest is hands-on work with my async help.</p>
<p>I'd like to offer a version of this course especially for people who are interested in contributing to Perl-based Open Source projects. The participants will learn Perl-specific tools and processes. All proceedings will go to sponsor the <a href="https://blogs.perl.org/users/book/2023/01/the-perl-toolchain-summit-is-back-in-2023.html">The Perl Toolchain Summit</a>.</p>
<p>Check out <a href="https://osdc.code-maven.com/osdc-public-2023-01-perl">this page</a> for further details and let me know ASAP if you are interested.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/599.html</id>
    <published>2023-01-16T10:00:00Z</published>
    <updated>2023-01-16T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 199</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-199/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-199/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 200</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Arithmetic Slices 10. TASK #2: Seven Segment 200 HEADLINES  Welcome to the Week #200 of The Weekly Challenge.
Ryan Thompson, our in-house Perl and Raku reviewer came up with fun task to celebrate the 200th week of the weekly challenge. I am sure you will find it fun to work on it.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-200/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Multiple Goods</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/15#pwc199" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total count of Good 
airs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub good_pairs{
    my(@numbers) = @_;
    my @pairs;  
    do{ 
        my $i = $_;
        do{
            my $j = $_;
            push @pairs, [$i, $j] if $numbers[$i] == $numbers[$j] &amp;&amp; $i &lt; $j;  
        } for 0 .. @numbers - 1;
    } for 0 .. @numbers - 1;
    return 0 + @pairs;  
}

MAIN:{
    say good_pairs 1, 2, 3, 1, 1, 3;
    say good_pairs 1, 2, 3;
    say good_pairs 1, 1, 1, 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
4
0
6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, a pair &lt;code&gt;(i, j)&lt;/code&gt; is called &lt;em&gt;good&lt;/em&gt; if &lt;code&gt;list[i] == list[j]&lt;/code&gt; and &lt;code&gt;i &amp;lt; j&lt;/code&gt;. Secondly,
I have never written a nested loop with this mix of &lt;code&gt;do&lt;/code&gt; blocks and postfix &lt;code&gt;for&lt;/code&gt;, and
I am greatly entertained by it! Perl fans will know that it really isn't all that 
different from the more standard looking do/while construct. A &lt;code&gt;do&lt;/code&gt; block is not really a 
loop, although it can be repeated, and so you cannot use &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, or &lt;code&gt;next&lt;/code&gt; within
the block. But this is exactly the same case as within a &lt;code&gt;map&lt;/code&gt;, which is what we are 
trying to replicate here, a &lt;code&gt;map&lt;/code&gt; in &lt;em&gt;void context&lt;/em&gt; without actually using &lt;code&gt;map&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Imagine a nested &lt;code&gt;map&lt;/code&gt;, that is basically the same thing as this, but with the more clear
focus on &lt;em&gt;side effects&lt;/em&gt; versus a return value. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers, @array and three integers $x,$y,$z. Write a script to 
find out total Good Triplets in the given array.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Combinatorics;
sub good_triplets{
    my($numbers, $x, $y, $z) = @_;
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; 3, data =&gt; [0 .. @{$numbers} - 1]);
    my @combination = $combinations-&gt;next_combination;  
    my @good_triplets;
    {
        my($s, $t, $u) = @combination;
        unless($s &gt;= $t || $t &gt;= $u || $s &gt;= $u){
            push @good_triplets, [@{$numbers}[$s, $t, $u]] if(abs($numbers-&gt;[$s] - $numbers-&gt;[$t]) &lt;= $x &amp;&amp; 
                                                              abs($numbers-&gt;[$t] - $numbers-&gt;[$u]) &lt;= $y &amp;&amp;  
                                                              abs($numbers-&gt;[$s] - $numbers-&gt;[$u]) &lt;= $z);  

    }
        @combination = $combinations-&gt;next_combination;  
        redo if @combination;
    }
    return 0 + @good_triplets;
}

MAIN:{
    say good_triplets([3, 0, 1, 1, 9, 7], 7, 2, 3);
    say good_triplets([1, 1, 2, 2, 3], 0, 0, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is the same that I used for the &lt;em&gt;Magical Triples&lt;/em&gt; problem from 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2022/10/23"&gt;TWC 187&lt;/a&gt;. The module
Math::Combinatorics is used to generate all possible triples of indices. These are then
filtered according to the criteria for good triplets.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-199/"&gt;Challenge 199&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc199</id>
    <published>2023-01-15T11:22:00-05:00</published>
    <updated>2023-01-15T11:22:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1956320381649186064</id>
    <published>2023-01-14T21:21:00.000+01:00</published>
    <updated>2023-01-14T21:21:08.200+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxvii) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.313' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.313&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.309 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060004&lt;/strong&gt; on 2023-01-11&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.060003 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Config-INI-0.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::INI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple .ini-file format &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.029&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.028 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/CPAN-Uploader-0.103018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CPAN::Uploader&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - upload things to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.103018&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.103017 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.15&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.14 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-Plugin-PodWeaver-4.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::PodWeaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave your Pod together from configuration and Dist::Zilla &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.010&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.009 was 1 year, 6 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Dist-Zilla-Plugin-Test-ReportPrereqs-0.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::Test::ReportPrereqs&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Report on prerequisite versions during automated testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.029&lt;/strong&gt; on 2023-01-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.028 was 2 years, 4 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Address-1.913' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Address&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - RFC 2822 Address Parsing and Creation &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.913&lt;/strong&gt; on 2023-01-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.912 was 4 years, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-MIME-1.953' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::MIME&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - easy MIME message handling &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.953&lt;/strong&gt; on 2023-01-09&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.952 was 1 year, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Simple-2.218' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple parsing of RFC2822 message format and headers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.218&lt;/strong&gt; on 2023-01-09&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 2.216 was 4 years, 7 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Stuffer-0.020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Stuffer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A more casual approach to creating and sending Email:: emails &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.020&lt;/strong&gt; on 2023-01-11&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.018 was 2 years, 6 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2202' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2202&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 325&lt;/li&gt;  &lt;li&gt;Previous version: 2.2201 was 1 year, 2 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.78' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMS/Redis-2.000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Redis&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl binding for Redis database &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.999 was 11 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9681' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9681&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9680 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1956320381649186064/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvii-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1956320381649186064"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1956320381649186064"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvii-16-great-cpan-modules-released.html" title="(cdxxvii) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5835715004542461094</id>
    <published>2023-01-14T21:12:00.002+01:00</published>
    <updated>2023-01-14T21:12:54.947+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxl) metacpan weekly report - Test::Named</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 27&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Test::Named" target="_blank"&gt;Test::Named (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/14 20:12:27 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Anki::Import" target="_blank"&gt;Anki::Import&lt;/a&gt; - Anki note generation made easy.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ansicolumn" target="_blank"&gt;App::ansicolumn&lt;/a&gt; - ANSI sequence aware column command&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Licensecheck" target="_blank"&gt;App::Licensecheck&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autovivification" target="_blank"&gt;autovivification&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Signature4" target="_blank"&gt;AWS::Signature4&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=144)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Pager" target="_blank"&gt;IO::Pager&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::IMAPClient" target="_blank"&gt;Mail::IMAPClient&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=477)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::NYTProf" target="_blank"&gt;Mojolicious::Plugin::NYTProf&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::RenderFile" target="_blank"&gt;Mojolicious::Plugin::RenderFile&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Phone" target="_blank"&gt;Number::Phone&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Simple" target="_blank"&gt;Pod::Simple&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Weaver" target="_blank"&gt;Pod::Weaver&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scope::Upper" target="_blank"&gt;Scope::Upper&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=140)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Named" target="_blank"&gt;Test::Named&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown" target="_blank"&gt;Text::Markdown&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Loy" target="_blank"&gt;XML::Loy&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Sublike" target="_blank"&gt;XS::Parse::Sublike&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5835715004542461094/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxl-metacpan-weekly-report-testnamed.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5835715004542461094"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5835715004542461094"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxl-metacpan-weekly-report-testnamed.html" title="(dxl) metacpan weekly report - Test::Named"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Fosdem mini grants</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem2023"/>
  <id>tag:news.perlfoundation.org,2023-01-11:/post/fosdem2023</id>
  <published>2023-01-11T12:23:33</published>
  <updated>2023-01-11T12:23:33</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/648b3a74e8794037135843200c91d2c94ee9cce5/money.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects.</p>

<p>In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences.</p>

<p>In addition, TPRF will have a 2 day stand at FOSDEM and are in need of volunteers to staff it. Stand  volunteers are also eligible to apply for a mini grant of up to $300 to assist with the cost of attending. </p>

<p>To apply for a FOSDEM mini grant, please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to fosdem2023-grants@perlfoundation.org.</p>

<p>If you have questions, please join our fosdem slack channel, leave a comment below, or send a message to hello@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#598 - TIOBE and Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/598.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p><strong>Happy New Year everyone !!!</strong></p>
<p><strong>Year 2022</strong> saw the biggest release of <strong>Perl v5.36</strong>. It was released with big bang. There were lots of positive vibes around it. I had never seen such noise before. If you missed the fun then you can checkout my <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a>.</p>
<p>I am not a big fan of <strong>TIOBE</strong> but came across <a href="https://www.tiobe.com/tiobe-index">TIOBE Index for January 2023</a> talking about <strong>Perl</strong> going up slightly in the index recently. It is refreshing to see the progress. Who knows one day, it would reach the <strong>TOP 5</strong> brackets.</p>
<p>Looking back the participation in <a href="https://theweeklychallenge.org">The Weekly Challenge</a>, it looks promising. Nearly <strong>10K</strong> contributions in <strong>Perl</strong> by the members of <strong>Team PWC</strong> in the last <strong>4 years</strong>.</p>
<p><strong>What is new happening in Perl?</strong></p>
<p>For me, personally, I am looking forward to the modern OO <strong>Corinna</strong> in core <strong>Perl</strong>.</p>
<p><strong>Curtis</strong> wrote an interesting <a href="https://ovid.github.io/articles/converting-object-oriented-code-to-corinna.html">blog post</a> recently where he shared his real life experience with <strong>Corinna</strong>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/598.html</id>
    <published>2023-01-09T10:00:00Z</published>
    <updated>2023-01-09T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Prime the Gaps!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/08#pwc198" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total pairs in the 
sorted list where 2 consecutive elements has the max gap. If the list contains less 
then 2 elements then return 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub largest_gap{
    my(@numbers) = @_;
    my $gap = -1;
    map{ $gap = $numbers[$_] - $numbers[$_ - 1] if $numbers[$_] - $numbers[$_ - 1] &gt; $gap } 1 .. @numbers - 1;  
    return $gap;
}

sub gap_pairs{
    my(@numbers) = @_;
    return 0 if @numbers &lt; 2; 
    my $gap = largest_gap(@numbers);
    my $gap_count;
    map { $gap_count++ if $numbers[$_] - $numbers[$_ - 1] == $gap } 1 .. @numbers - 1;  
    return $gap_count;

}

MAIN:{
    say gap_pairs(3);    
    say gap_pairs(2, 5, 8, 1);    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
0
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Probably these two subroutines could be combined into one without too much trouble, but it 
still seems cleaner to me this way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do an initial pass over the list to determine the largest gap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perform a second pass over the list and count up all pairs which have the maximum gap.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An interesting issue came up. I've been trying to avoid the use of a map in a void 
context. This is just due to the general principal to use map as a function and use its 
return value rather than rely on side effects.&lt;/p&gt;

&lt;p&gt;As part of this reformative effort I have been doing more with for in a postfix position. 
I discovered this when working this problem:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt; will not work. Perl gets confused by the 
postfix &lt;code&gt;if&lt;/code&gt; within the block, apparently.&lt;/p&gt;

&lt;p&gt;But there is a work around! Add &lt;code&gt;do&lt;/code&gt; and all is well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do {say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course the equivalent &lt;code&gt;map&lt;/code&gt; works just fine as you'd 
expect &lt;code&gt;map {say $_ if $_ % 2 == 0} 0 .. 9)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.perlmonks.org/?node_id=832495"&gt;E. Choroba&lt;/a&gt; pointed out this is due to postfix
&lt;code&gt;for&lt;/code&gt; being a statement modifier which doesn't know what to do with blocks. But why does 
&lt;code&gt;do&lt;/code&gt; fix this? I am still unclear on why that is. Even with the &lt;code&gt;do&lt;/code&gt; it's still a block!
Apparently perl will view it as a statement, for the purposes of the postfix &lt;code&gt;for&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out that the &lt;code&gt;do {}&lt;/code&gt; construct qualifies as a &lt;em&gt;Simple Statement&lt;/em&gt;. From the
&lt;a href="https://perldoc.perl.org/perlsyn#Simple-Statements"&gt;perldoc&lt;/a&gt;: &lt;em&gt;Note that there are 
operators like eval {}, sub {}, and do {} that look like compound statements, but 
aren't--they're just TERMs in an expression--and thus need an explicit termination when 
used as the last item in a statement.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt; 0. Write a script to print the count of primes less 
than $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Primality q/is_prime/;

sub prime_count{
    return 0 + grep { is_prime $_ } 2 .. $_[0] - 1;  
}

MAIN:{
    say prime_count(10);  
    say prime_count(15);  
    say prime_count(1);  
    say prime_count(25);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
6
0
9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The Math::Primality module makes this quite easy! In fact, I am not sure there is that 
much to elaborate on. Check primality using is_prime() and we're done!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-198/"&gt;Challenge 198&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc198</id>
    <published>2023-01-08T19:30:00-05:00</published>
    <updated>2023-01-08T19:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): December 2022 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_dec_2022"/>
  <id>tag:news.perlfoundation.org,2023-01-04:/post/maintaining_perl_dave_mitchell_dec_2022</id>
  <published>2023-01-04T10:07:57</published>
  <updated>2023-01-04T10:07:57</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during December covered by my TPF perl core maintenance grant. This month I continued work on making the stack reference counted. A couple of weeks ago I reached a major milestone: the point where I actually enabled reference-counting of SVs on the stack for the first time. Since then I have reached the point where the perl build actually completes 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during December covered by my TPF
perl core maintenance grant.</p>

<p>This month I continued work on making the stack reference counted.</p>

<p>A couple of weeks ago I reached a major milestone: the point where I
actually enabled reference-counting of SVs on the stack for the first
time. Since then I have reached the point where the perl build actually
completes (including the make runs in each dist/ and cpan/ subdir) and
'make minitest' only has a couple of failures. A full 'make test' seems to
have a lot of passing test files but currently hangs in some of the
threads tests - so I haven't been able to run 'make test' to completion
yet.</p>

<p>These preliminary results give me encouragement that my approach is sound,
and that it is just a case of fixing up all individual issues as they are
revealed by the test suite.</p>

<p>As a trivial example, this code was failing: ($ref + 1), because the
addition (like other numeric ops) uses the address of a plain reference as
the value to add, and pp_add() does this by replacing the ref SV on the
stack with an SV containing the int value of the ref. This simple
replacement, without adjusting reference counts, leaked the ref SV and
caused the temporary integer SV to be prematurely freed. Because this was
hidden away in a separate function dedicated to handling possible
overloading, I didn't spot it before enabling reference counting.</p>

<p>I have no idea how much further effort it will require to get the main
test suite to pass. After that, it is then a case of removing the wrapping
of performance-critical functions, then I'll be able to measure how much
slowdown there is. At that point it may become a candidate to be merged
into bleed (but enabled by default), then I can continue (at a more
leisurely pace) to unwrap further ops, add in optimisations, and work out
how new XS code be written to take direct advantage of a ref-counted
stack.</p>

<p>SUMMARY:
* 1:01 #6543 $1 dynamic scoping breaks with recursion
* 78:03 make stack reference counted
* 7:22 process p5p mailbox</p>

<p>TOTAL:
 * 86:26 (HH::MM)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#597 - Happy New Year!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/597.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I hope you had a successful 2022 and you are ready for the next year. I certainly have lots of plans. As always. They are also changing a lot all the time. One of them is a new course I am working on called <a href="https://osdc.code-maven.com/">OSDC - Open Source Development Course</a>. It is a hands-on course that covers git/GitHub/GitLab/Testing/CI using real-world open source projects. It is also not only a plan, I am starting the first session next Sunday. It will be given in Hebrew.</p>
<p>For the course I started to collect <a href="https://github.com/szabgab/open-source-by-corporations">Open Source projects developed by corporations</a>. There are a few where the product is open source such as <a href="https://redis.io/">Redis</a> and <a href="https://www.elastic.co/">Elastic</a>. There are others where the company shares some of its code as open source such as Netflix, Facebook, or Booking.com.</p>
<p>I'd like to ask for your help. Look around at your company and maybe other companies and let me know which one shares projects using an Open Source license. It would help me and the participants of this courses a lot. For the purpose of the course and for my collection the programming languages don't matter.</p>
<p>However, if you can also point out Perl-based projects, that would be even better. Then I could feature these projects in the newsletter. Let's start now with one I already found:</p>
<p><a href="https://github.com/bookingcom/pakket">pakket</a> by <a href="https://www.booking.com/">Booking.com</a> is an Unopinionated Meta-Packaging System that allows you to manage dependencies. It works by trying to avoid work.</p>
<p>Enjoy your year!</p></div>
    </content>
    <id>https://perlweekly.com/archive/597.html</id>
    <published>2023-01-02T10:00:00Z</published>
    <updated>2023-01-02T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Cavaspazi">Acme-Cavaspazi</a></td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>0.1.0</td>
<td>1.0.0</td>
<td>a simple function to remove spaces from strings or lists of strings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-FSM">Acme-FSM</a></td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>v2.3.5</td>
<td>v2.3.5</td>
<td>Pseudo Finite State Machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Affix">Affix</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.04</td>
<td>0.09_05</td>
<td>A Foreign Function Interface eXtension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-Headers">Alien-Boost-Headers</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.9</td>
<td>Find or build Boost Headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-ProgramOptions">Alien-Boost-ProgramOptions</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.7</td>
<td>Find or build libboost</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-NutritionFacts">App-BPOMUtils-NutritionFacts</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015</td>
<td>0.015</td>
<td>Utilities related to BPOM nutrition facts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CSV2LaTeXTable">App-CSV2LaTeXTable</a></td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1.0.0</td>
<td>1.1.0</td>
<td>Generate LaTeX table from CSV file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Client">App-OpenMbox-Client</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.11</td>
<td>0.13</td>
<td>A perl client to send simple email via OpenMbox's smtp server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Test">App-OpenMbox-Test</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.10</td>
<td>0.13</td>
<td>Auto delivery test for OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/C600">C600</a></td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Wrap of C600</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Changes">Changes</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>Changes file management</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2">DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0107</td>
<td>Crypt::Passphrase::Argon2 backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt">DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0110</td>
<td>Crypt::Passphrase::Bcrypt backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-HTML-TreeDumper">Data-HTML-TreeDumper</a></td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>v0.0.1</td>
<td>v0.0.4</td>
<td>dumps perl data as HTML5 open/close tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Localize-YAML">Data-Localize-YAML</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acquire Lexicons From .yml Files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Regexp">Data-Sah-FilterBundle-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to regular expressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-ULID-XS">Data-ULID-XS</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.005</td>
<td>XS backend for ULID generation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Cover-Report-Cobertura">Devel-Cover-Report-Cobertura</a></td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1.0</td>
<td>1.0</td>
<td>Backend for Cobertura reporting of coverage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Filesys-Restrict">Filesys-Restrict</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Restrict filesystem access</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Dogecoin-Utils">Finance-Dogecoin-Utils</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20221211.2353</td>
<td>1.20221211.2353</td>
<td>Libraries and Utilities to work with Dogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-SEC-EdgarData">Finance-SEC-EdgarData</a></td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>0.01</td>
<td>0.010021</td>
<td>scraping edgar for fun and profit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KCP">KCP</a></td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Perl extension for skywind3000/kcp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LibUI">LibUI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Simple, Portable, Native GUI Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-NFTables">Linux-NFTables</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl interface to libnftables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-SNAFU">Math-SNAFU</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>decimal to SNAFU converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Redis-XS">Net-Async-Redis-XS</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.008</td>
<td>faster version of Net::Async::Redis</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Newtype">Newtype</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Perl implementation of an approximation for Haskell's newtype</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-Keyword-Accessor">Object-Pad-Keyword-Accessor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare lvalue accessors on Object::Pad classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAI-API">OpenAI-API</a></td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A Perl module for accessing the OpenAI API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perlsac-rwsac">Perlsac-rwsac</a></td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>a module to read and write SAC file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Favicon_Simple">Plack-Middleware-Favicon_Simple</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl Plack Middleware to provide favicon</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Method_Allow">Plack-Middleware-Method_Allow</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>perl Plack Middleware to filter HTTP Methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-SocketUtil">SPVM-Resource-SocketUtil</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>The Resource for Socket Utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Phone">Sah-Schemas-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Schemas related to phones &amp; phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0">Search-Elasticsearch-Client-8_0</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0-Async">Search-Elasticsearch-Client-8_0-Async</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin async client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Tagged-Markdown">String-Tagged-Markdown</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>parse and emit text with Markdown inline formatting</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Operator-ExistsOr">Syntax-Operator-ExistsOr</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>an infix operator sensitive to hash element existence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-KBLI">TableDataBundle-Business-ID-KBLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220912.0.0</td>
<td>20220912.0.0</td>
<td>Collection of TableData:: modules related to KBLI (Kode Baku Lapangan Usaha, a.k.a. Standard Code of Business Field)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Software-License">TableDataBundle-Software-License</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of TableData:: modules related to software license</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse">Terse</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.121</td>
<td>lightweight JSON APIs.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Config">Terse-Config</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse configs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Headers">Terse-Headers</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Static">Terse-Static</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Serve static resources</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Named">Test-Named</a></td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>v001</td>
<td>v0.03</td>
<td>Perl extension for named tests. Inspired on this:</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test2-Tools-Command">Test2-Tools-Command</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.11</td>
<td>run unix commands</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TimeZone-Solar">TimeZone-Solar</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.2.1</td>
<td>local solar timezone lookup and utilities including DateTime compatibility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-FileTree">Tk-FileTree</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Tk::DirTree like widget for displaying &amp; manipulating directories  (and files).</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wasm-Wasmer">Wasm-Wasmer</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>WebAssembly in Perl via Wasmer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-SendBird">WebService-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oo_sub">oo_sub</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>v1.0.0</td>
<td>v1.0.9</td>
<td>Enable OOP in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oop">oop</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1.00</td>
<td>v1.0.0</td>
<td>Use object-oriented versions of built-in Perl functions</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>52</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-Cavaspazi PROCH 0.1.0 1.0.0 a simple function to remove spaces from strings or lists of strings Acme-FSM WHYNOT v2.3.5 v2.3.5 Pseudo Finite State Machine Affix SANKO 0.04 0.09_05 A Foreign Function Interface eXtension Alien-Boost-Headers CONTRA 1.7 1.9 Find or build Boost Headers Alien-Boost-ProgramOptions CONTRA 1.7 1.7 Find or build libboost … <a href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2004</id>
    <published>2023-01-02T02:06:15Z</published>
    <updated>2023-01-02T02:06:15Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
  <title>Marketing Committee Achievements in 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/marketingendofyr22"/>
  <id>tag:news.perlfoundation.org,2022-12-27:/post/marketingendofyr22</id>
  <published>2022-12-27T18:07:42</published>
  <updated>2022-12-27T18:07:42</updated>
  <summary>
  <![CDATA[
     Looking back over 2022 the Marketing Committee presents our accomplishments to the Board and the Communities we serve. Our sincere and abundant thanks to all those who have volunteered their time to deliver these outcomes. Created the Prospectus for 2022 Arranged to have 2 Perl related articles published in the Linux Format magazine Launched The Perl store offering Official Perl merchandise with profits going to the Perl Fund Organized and 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/prospectus logos.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Looking back over 2022 the Marketing Committee presents our accomplishments to the Board and the Communities we serve.</p>

<p>Our sincere and abundant thanks to all those who have volunteered their time to deliver these outcomes.</p>

<ul>
<li>Created the <a href="https://www.perlfoundation.org/uploads/1/0/6/6/106663517/perl_raku_prospectus_final_interactive_v2.pdf">Prospectus for 2022</a></li>
<li>Arranged to have 2 Perl related articles published in the Linux Format magazine</li>
<li>Launched <a href="https://the-perl-store.creator-spring.com/">The Perl store</a> offering Official Perl merchandise with profits going to the Perl Fund</li>
<li>Organized and held the <a href="https://blogs.perl.org/users/dean/2022/07/debrief-perl-ide-hackathon-2022.html">Perl IDE Hackathon</a> at The Perl and Raku Conference in Houston. This in response to <a href="https://news.perlfoundation.org/post/newcomer-survey-results-actions">community feedback</a> about the importance of IDE support.</li>
<li><a href="https://facebook.com/tpf.perl">The Perl Foundation</a> continues to grow on Facebook</li>
<li><a href="https://facebook.com/theperlconference">Perl and Raku Conference</a> page continues to grow on Facebook</li>
<li>Secured FOSDEM booth space in 2023</li>
<li>Secured the Camelia logo for The Perl and Raku Foundation</li>
</ul>

<p>We are excited for the opportunities that the new year presents and express our continuing commitment to growing the Perl and Raku communities.</p>

<p>The committee exists to coordinate and facilitate volunteer efforts to promote the Perl and Raku ecosystems, create and distribute quality content, promote Perl and Raku related events, and assist with getting people involved.</p>

<p>All willing hands are welcome to attend our monthly meetings via Zoom. Please <a href="mailto:marketing@perlfoundation.org">contact the committee via email</a> for meeting invites.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Fractal Christmas Tree</title>
    <link href="http://perladvent.org/2022/2022-12-27.html"/>
    <id>http://perladvent.org/2022/2022-12-27.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;!-- exit HTML &lt;body&gt; section, go back into &lt;head&gt; section, 
     modify CSS to increase visibility of POD C&lt;&gt; formatting codes
     (which generate HTML &lt;code&gt; tags not inside &lt;table&gt; tags),
     exit &lt;head&gt; section, go back into &lt;body&gt; section,
     CSS changes will apply to the entire HTML document --&gt;
&lt;/body&gt;
&lt;head&gt;
&lt;style&gt;

/* POD text inside C&lt;&gt; tags; generates HTML &lt;code&gt; tags outside &lt;table&gt; tags  */
code {
    background-color: lightblue;
    padding: 2px;
}

/* HTML table cells via &lt;td class='code'&gt; tags */
/*
.code {
    background-color: none;
}
*/

/* POD text inside '=begin perl' and '=begin code' sections; generates HTML &lt;code&gt; tags inside &lt;table&gt; tags */
table code {
    background: none;
    padding: 0px;
}

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Merry Christmas and Happy New Year! :-)&lt;/p&gt;

&lt;p&gt;Our holiday-themed programming goal is to implement a fun little Perl application, which will display a Christmas tree using the Sierpinski fractal algorithm.&lt;/p&gt;

&lt;center&gt;&lt;img src="fractal_christmas_tree_10_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;Let&amp;#39;s begin by reviewing the code for generating Sierpinski Triangle fractals, stored in a file named &lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/lib/MathPerl/Fractal/Sierpinski.pm"&gt;Sierpinski.pm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are an experienced Perl programmer, you will immediately notice the definition and utilization of data types such as &lt;code&gt;integer&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;, as well as data structures such as &lt;code&gt;integer::arrayref&lt;/code&gt; and &lt;code&gt;integer::arrayref::arrayref&lt;/code&gt; etc. Data types and data structures, along with other Perl programming strategies such as &lt;code&gt;CRITICS&lt;/code&gt; as well as subroutine &lt;code&gt;$RETURN_TYPE&lt;/code&gt; and &lt;code&gt;@ARG&lt;/code&gt; named input arguments, are included for best practices and compatibility with the &lt;a href="http://rperl.org"&gt;Perl compiler&lt;/a&gt;.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;# [[[ PREPROCESSOR ]]]&lt;br /&gt;# declare Perl-compatible data types &amp;amp; data structures &lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;#use RPerl;  # replaced by PREPROCESSOR for simplicity&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OO INHERITANCE ]]]&lt;br /&gt;#use parent qw(MathPerl::Fractal);  # disable unnecessary inheritance for simplicity&lt;br /&gt;#use MathPerl::Fractal;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# recursively generate triangles, grouped by recursion level&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;sierpinski&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;@ARG&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $recursions_remaining = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $triangle = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # shortcut variables, easier to read in midpoint calculations below&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # calculate midpoints between two coordinates [x1, y1] and [x2, y2] is [(x1+x2)/2, (y1+y2)/2]&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # construct 3 sub-triangles from orinal points and newly-calculated midpoints&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;   &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # $triangle_groups is zero-indexed like all other Perl arrays,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# so we need to subtract one from $recursions_remaining before using as an index,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# in order to avoid an undefined element at element 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# also, we need to decrement $recursions_remaining before making recursive calls;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# for both of these reasons, we can decrement now&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # store all triangles grouped by recursion level&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # recurse once for each sub-triangle&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # return after maximum recursion level is reached (conditional block above not entered),&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or all recursion calls have returned (conditional block above entered);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# no return value, all generated data is stored directly in $triangle_groups&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of class&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Let&amp;#39;s see what happens when we call the &lt;code&gt;sierpinski()&lt;/code&gt; subroutine, passing in only 1 level of recursion for simplicity...&lt;/p&gt;

&lt;p&gt;The recursion directly populates &lt;code&gt;$retval&lt;/code&gt; in reverse order, from highest index to lowest index, eventually ending at index 0 with no further recursion to be done, and all the values are returned back to the original subroutine call. Because of this reverse-index population, the hard-coded initial triangle is stored at the highest (not the lowest) index in &lt;code&gt;$retval&lt;/code&gt;, as you can see in the Perl one-liner (two-liner?) below. The initial triangle&amp;#39;s hard-coded definition is done during declaration for brevity, and the to-be-populated element is left as undef.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ perl -e &amp;#39;use MathPerl::Fractal::Sierpinski; my $retval = [undef, [[512, 100], [212, 600], [812, 600]]];&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MathPerl::Fractal::Sierpinski::sierpinski($retval-&amp;gt;[1], 1, $retval);&amp;#39;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;First, &lt;code&gt;sierpinski()&lt;/code&gt; will display the 3 &lt;code&gt;[ x, y ]&lt;/code&gt; cartesian coordinates representing the 3 corners of our initial input triangle, received in the &lt;code&gt;my number::arrayref::arrayref $triangle&lt;/code&gt; argument:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;in sierpinski(), received $recursions_remaining = 1&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [ [ 512, 100 ], [ 212, 600 ], [ 812, 600 ] ];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Then the Sierpinski algorithm creates 3 sub-triangles and makes a recursive call to &lt;code&gt;sierpinski()&lt;/code&gt; for each sub-triangle:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;br /&gt;&lt;br /&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;br /&gt;&lt;br /&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If we were to render these 3 sub-triangles in white, it would look like a monochrome triforce:&lt;/p&gt;

&lt;center&gt;&lt;img src="fractal_christmas_tree_01_white.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;After all recursion has completed, we are left with our final &lt;code&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/code&gt; data structure, which contains all generated triangles grouped by recursion level:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;have $my_triangle_groups = &lt;br /&gt;$VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Ultimately, it is the &lt;code&gt;$my_triangle_groups&lt;/code&gt; data which will be rendered to comprise the main triangular body of the Christmas tree.&lt;/p&gt;

&lt;p&gt;Next let&amp;#39;s review the Perl code for generating the Christmas Tree data and rendering the Simple DirectMedia Layer (&lt;a href="https://metacpan.org/module/SDL"&gt;SDL&lt;/a&gt;) graphics, stored in a file named &lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/lib/MathPerl/Fractal/ChristmasTree.pm"&gt;ChristmasTree.pm&lt;/a&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;br /&gt;96:&amp;nbsp;&lt;br /&gt;97:&amp;nbsp;&lt;br /&gt;98:&amp;nbsp;&lt;br /&gt;99:&amp;nbsp;&lt;br /&gt;100:&amp;nbsp;&lt;br /&gt;101:&amp;nbsp;&lt;br /&gt;102:&amp;nbsp;&lt;br /&gt;103:&amp;nbsp;&lt;br /&gt;104:&amp;nbsp;&lt;br /&gt;105:&amp;nbsp;&lt;br /&gt;106:&amp;nbsp;&lt;br /&gt;107:&amp;nbsp;&lt;br /&gt;108:&amp;nbsp;&lt;br /&gt;109:&amp;nbsp;&lt;br /&gt;110:&amp;nbsp;&lt;br /&gt;111:&amp;nbsp;&lt;br /&gt;112:&amp;nbsp;&lt;br /&gt;113:&amp;nbsp;&lt;br /&gt;114:&amp;nbsp;&lt;br /&gt;115:&amp;nbsp;&lt;br /&gt;116:&amp;nbsp;&lt;br /&gt;117:&amp;nbsp;&lt;br /&gt;118:&amp;nbsp;&lt;br /&gt;119:&amp;nbsp;&lt;br /&gt;120:&amp;nbsp;&lt;br /&gt;121:&amp;nbsp;&lt;br /&gt;122:&amp;nbsp;&lt;br /&gt;123:&amp;nbsp;&lt;br /&gt;124:&amp;nbsp;&lt;br /&gt;125:&amp;nbsp;&lt;br /&gt;126:&amp;nbsp;&lt;br /&gt;127:&amp;nbsp;&lt;br /&gt;128:&amp;nbsp;&lt;br /&gt;129:&amp;nbsp;&lt;br /&gt;130:&amp;nbsp;&lt;br /&gt;131:&amp;nbsp;&lt;br /&gt;132:&amp;nbsp;&lt;br /&gt;133:&amp;nbsp;&lt;br /&gt;134:&amp;nbsp;&lt;br /&gt;135:&amp;nbsp;&lt;br /&gt;136:&amp;nbsp;&lt;br /&gt;137:&amp;nbsp;&lt;br /&gt;138:&amp;nbsp;&lt;br /&gt;139:&amp;nbsp;&lt;br /&gt;140:&amp;nbsp;&lt;br /&gt;141:&amp;nbsp;&lt;br /&gt;142:&amp;nbsp;&lt;br /&gt;143:&amp;nbsp;&lt;br /&gt;144:&amp;nbsp;&lt;br /&gt;145:&amp;nbsp;&lt;br /&gt;146:&amp;nbsp;&lt;br /&gt;147:&amp;nbsp;&lt;br /&gt;148:&amp;nbsp;&lt;br /&gt;149:&amp;nbsp;&lt;br /&gt;150:&amp;nbsp;&lt;br /&gt;151:&amp;nbsp;&lt;br /&gt;152:&amp;nbsp;&lt;br /&gt;153:&amp;nbsp;&lt;br /&gt;154:&amp;nbsp;&lt;br /&gt;155:&amp;nbsp;&lt;br /&gt;156:&amp;nbsp;&lt;br /&gt;157:&amp;nbsp;&lt;br /&gt;158:&amp;nbsp;&lt;br /&gt;159:&amp;nbsp;&lt;br /&gt;160:&amp;nbsp;&lt;br /&gt;161:&amp;nbsp;&lt;br /&gt;162:&amp;nbsp;&lt;br /&gt;163:&amp;nbsp;&lt;br /&gt;164:&amp;nbsp;&lt;br /&gt;165:&amp;nbsp;&lt;br /&gt;166:&amp;nbsp;&lt;br /&gt;167:&amp;nbsp;&lt;br /&gt;168:&amp;nbsp;&lt;br /&gt;169:&amp;nbsp;&lt;br /&gt;170:&amp;nbsp;&lt;br /&gt;171:&amp;nbsp;&lt;br /&gt;172:&amp;nbsp;&lt;br /&gt;173:&amp;nbsp;&lt;br /&gt;174:&amp;nbsp;&lt;br /&gt;175:&amp;nbsp;&lt;br /&gt;176:&amp;nbsp;&lt;br /&gt;177:&amp;nbsp;&lt;br /&gt;178:&amp;nbsp;&lt;br /&gt;179:&amp;nbsp;&lt;br /&gt;180:&amp;nbsp;&lt;br /&gt;181:&amp;nbsp;&lt;br /&gt;182:&amp;nbsp;&lt;br /&gt;183:&amp;nbsp;&lt;br /&gt;184:&amp;nbsp;&lt;br /&gt;185:&amp;nbsp;&lt;br /&gt;186:&amp;nbsp;&lt;br /&gt;187:&amp;nbsp;&lt;br /&gt;188:&amp;nbsp;&lt;br /&gt;189:&amp;nbsp;&lt;br /&gt;190:&amp;nbsp;&lt;br /&gt;191:&amp;nbsp;&lt;br /&gt;192:&amp;nbsp;&lt;br /&gt;193:&amp;nbsp;&lt;br /&gt;194:&amp;nbsp;&lt;br /&gt;195:&amp;nbsp;&lt;br /&gt;196:&amp;nbsp;&lt;br /&gt;197:&amp;nbsp;&lt;br /&gt;198:&amp;nbsp;&lt;br /&gt;199:&amp;nbsp;&lt;br /&gt;200:&amp;nbsp;&lt;br /&gt;201:&amp;nbsp;&lt;br /&gt;202:&amp;nbsp;&lt;br /&gt;203:&amp;nbsp;&lt;br /&gt;204:&amp;nbsp;&lt;br /&gt;205:&amp;nbsp;&lt;br /&gt;206:&amp;nbsp;&lt;br /&gt;207:&amp;nbsp;&lt;br /&gt;208:&amp;nbsp;&lt;br /&gt;209:&amp;nbsp;&lt;br /&gt;210:&amp;nbsp;&lt;br /&gt;211:&amp;nbsp;&lt;br /&gt;212:&amp;nbsp;&lt;br /&gt;213:&amp;nbsp;&lt;br /&gt;214:&amp;nbsp;&lt;br /&gt;215:&amp;nbsp;&lt;br /&gt;216:&amp;nbsp;&lt;br /&gt;217:&amp;nbsp;&lt;br /&gt;218:&amp;nbsp;&lt;br /&gt;219:&amp;nbsp;&lt;br /&gt;220:&amp;nbsp;&lt;br /&gt;221:&amp;nbsp;&lt;br /&gt;222:&amp;nbsp;&lt;br /&gt;223:&amp;nbsp;&lt;br /&gt;224:&amp;nbsp;&lt;br /&gt;225:&amp;nbsp;&lt;br /&gt;226:&amp;nbsp;&lt;br /&gt;227:&amp;nbsp;&lt;br /&gt;228:&amp;nbsp;&lt;br /&gt;229:&amp;nbsp;&lt;br /&gt;230:&amp;nbsp;&lt;br /&gt;231:&amp;nbsp;&lt;br /&gt;232:&amp;nbsp;&lt;br /&gt;233:&amp;nbsp;&lt;br /&gt;234:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;#use RPerl;  # disabled for simplicity; data types declared in Sierpinski.pm &amp;amp; inherited below&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OO INHERITANCE ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;parent&lt;/span&gt; &lt;span class="words"&gt;qw(MathPerl::Fractal::Sierpinski)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Event.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;   &lt;span class="comment"&gt;# used for window creation &amp;amp; control&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for creating Event object&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Events&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# used for Event queue handling functions&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Time::HiRes&lt;/span&gt; &lt;span class="words"&gt;qw( gettimeofday usleep )&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for time-based animation control&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# display an animated Christmas tree!&lt;br /&gt;# define hard-coded constant data; call sierpinski() to recursively generate fractal triangles;&lt;br /&gt;# initialize SDL graphics; render static graphics; render dynamic graphics (animation)&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;generate_fractal__render_animation&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ DATA FOR SIZES &amp;amp; SHAPES &amp;amp; COLORS;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#   HARD-CODED 1024x768 RESOLUTION &amp;amp; 32-BIT COLOR DEPTH ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial triangle's 3 corners as [x, y] Euclidean coordinates&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;212&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;812&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;     &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;105&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;150&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;175&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_white&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;140&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # colors as [r, g, b] triplets; number of colors is number of recursions&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# green needs to be the color of the smallest, and thus most numerous, triangles&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_white&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;scalar&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # rectangle in format [ x, y, width, height ]&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;601&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;050&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;155&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# top right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # colors for animated Christmas tree lights&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ PREPARE &amp;amp; MAKE INITIAL RECURSIVE CALL ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # declare &amp;amp; initialize final array outside of the recursive subroutine for easy direct access by all recursive calls&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial triangle is in a triangle group by itself&lt;br /&gt;&lt;/span&gt;    &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial call to recursive subroutine&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski::sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # regex to (g)lobally (s)earch for numbers incorrectly wrapped in 'single-quotes' by Dumper,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# replace by // empty string, no lvalue $variable so directly (r)eturn modified string;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# https://perldoc.perl.org/perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_triangle_groups = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ INITIALIZE GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # https://metacpan.org/dist/SDL/view/lib/pods/SDL/Events.pod&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="words"&gt;qw(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;no_such_event&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_ACTIVEEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_KEYDOWN SDL_KEYUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_MOUSEMOTION SDL_MOUSEBUTTONDOWN SDL_MOUSEBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_JOYAXISMOTION SDL_JOYBALLMOTION SDL_JOYHATMOTION SDL_JOYBUTTONDOWN SDL_JOYBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_QUIT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_SYSWMEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_VIDEORESIZE SDL_VIDEOEXPOSE&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_USEREVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_NUMEVENTS&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# constant data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # SDL includes moved into [[[ INCLUDES ]]] section above&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initialize SDL video &amp;amp; application &amp;amp; event;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# we do not call $my_SDL_app-&amp;gt;run() anywhere in this program, instead we use the while() run loop below&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;SDL::init&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Merry Christmas!!  Perl Advent 2022!!!'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1024&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                     &lt;span class="comment"&gt;# hard-coded 1024x768 resolution&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;768&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;depth&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;32&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                       &lt;span class="comment"&gt;# hard-coded 32-bit color&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;resizeable&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;                     &lt;span class="comment"&gt;# allow window resize; does not scale window contents&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ RENDER STATIC GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # draw Christmas tree branches &amp;amp; snow tinsel &amp;amp; ornaments &amp;amp; lights;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# iterate through triangle groups in reverse order, due to reverse population during recursion&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # https://metacpan.org/dist/SDL/view/lib/pods/SDLx/Surface.pod&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # refresh window on every triangle for fun cascade drawing effect&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # draw Christmas tree trunk &amp;amp; Star of Bethlehem&lt;br /&gt;&lt;/span&gt;    &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_rect&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;  &lt;span class="comment"&gt;# refresh window&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ RENDER DYNAMIC (ANIMATED) GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # set initial index for accesssing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # set initial time for changing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    #print 'have $seconds_start = ', $seconds_start, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # the main run loop, used instead of calling $my_SDL_app-&amp;gt;run();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# animate forever, until SDL_QUIT event is received in GUI window via &amp;lt;Alt-F4&amp;gt; keypress or window close mouse click,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or in CLI window via &amp;lt;Ctrl-C&amp;gt; keypress&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # pump the event loop, gathering events from input devices&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;SDL::Events::pump_events&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # poll for currently pending events&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL::Events::poll_event&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have @SDL_EVENTS['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # we only care about the SDL_QUIT event telling us to exit&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt; &lt;span class="operator"&gt;==&lt;/span&gt; &lt;span class="word"&gt;SDL_QUIT&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'SDL_QUIT event received, exiting'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;exit&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class="comment"&gt;        # get current time, for comparison with start time of current Christmas tree lights color&lt;br /&gt;&lt;/span&gt;        &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    #    print 'have $seconds_current = ', $seconds_current, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # twinkle Christmas tree lights every 1 second&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$seconds_current&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # reset start time to current time, for time cycle of next animation frame&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # iterate through lights colors&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_color = $my_lights_colors-&amp;gt;['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_color&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # wrap back to beginning of lights colors when end is reached&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # only update second-smallest triangles, not the green of the Christmas tree itself&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # redraw green of Christmas tree&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # redraw Star of Bethlehem&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # refresh window once for every Christmas tree lights color change, for synchronized lights&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # briefly pause between each while() loop iteration, to avoid overloading CPU;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ( 1_000_000 microseconds per second ) / ( 10_000 microseconds per iteration) = 100 iterations per second;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# need at least 100 while loop iterations per second, in order to process all of the otherwise-ignored&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# SDL_MOUSEMOTION events which are caused by simply moving the mouse over top of the window&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;usleep&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10_000&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;  &lt;span class="comment"&gt;# end of generate_fractal__render_animation()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of class&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The above Christmas tree code is pretty much the simplest 2-D graphics rendering system I could write using SDL, with the ability to be exited gracefully instead of having to type &lt;code&gt;Ctrl-Z&lt;/code&gt; and then &lt;code&gt;$ killall -KILL perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last, we only need a few lines of driver code to run it all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/script/sierpinski_triangles_christmas.pl"&gt;sierpinski_triangles_christmas.pl&lt;/a&gt;&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# Fractal Christmas Tree&lt;br /&gt;# Sierpinski triangles animated using SDL graphics&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OPERATIONS ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree::generate_fractal__render_animation&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you were to run the above program, which includes 5 colors for 5 levels of recursion, then you would see a rendered series of images similar to the following:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ ./sierpinski_triangles_christmas.pl&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_00_blank.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_01_white.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_02_red.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_03_blue.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_04_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_05_green.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_10_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_11_orange.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_12_purple.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;However, before you can run this program you will need to install the SDL dependencies:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ cpanm -v SDL SDLx::App SDL::Event SDL::Events&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Also, the easiest way to run this Fractal Christmas Tree program is to copy or download the monolithic code below (instead of all 3 files above), and then paste it into a single executable Perl file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/script/sierpinski_triangles_christmas_monolith.pl"&gt;sierpinski_triangles_christmas_monolith.pl&lt;/a&gt;&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;br /&gt;96:&amp;nbsp;&lt;br /&gt;97:&amp;nbsp;&lt;br /&gt;98:&amp;nbsp;&lt;br /&gt;99:&amp;nbsp;&lt;br /&gt;100:&amp;nbsp;&lt;br /&gt;101:&amp;nbsp;&lt;br /&gt;102:&amp;nbsp;&lt;br /&gt;103:&amp;nbsp;&lt;br /&gt;104:&amp;nbsp;&lt;br /&gt;105:&amp;nbsp;&lt;br /&gt;106:&amp;nbsp;&lt;br /&gt;107:&amp;nbsp;&lt;br /&gt;108:&amp;nbsp;&lt;br /&gt;109:&amp;nbsp;&lt;br /&gt;110:&amp;nbsp;&lt;br /&gt;111:&amp;nbsp;&lt;br /&gt;112:&amp;nbsp;&lt;br /&gt;113:&amp;nbsp;&lt;br /&gt;114:&amp;nbsp;&lt;br /&gt;115:&amp;nbsp;&lt;br /&gt;116:&amp;nbsp;&lt;br /&gt;117:&amp;nbsp;&lt;br /&gt;118:&amp;nbsp;&lt;br /&gt;119:&amp;nbsp;&lt;br /&gt;120:&amp;nbsp;&lt;br /&gt;121:&amp;nbsp;&lt;br /&gt;122:&amp;nbsp;&lt;br /&gt;123:&amp;nbsp;&lt;br /&gt;124:&amp;nbsp;&lt;br /&gt;125:&amp;nbsp;&lt;br /&gt;126:&amp;nbsp;&lt;br /&gt;127:&amp;nbsp;&lt;br /&gt;128:&amp;nbsp;&lt;br /&gt;129:&amp;nbsp;&lt;br /&gt;130:&amp;nbsp;&lt;br /&gt;131:&amp;nbsp;&lt;br /&gt;132:&amp;nbsp;&lt;br /&gt;133:&amp;nbsp;&lt;br /&gt;134:&amp;nbsp;&lt;br /&gt;135:&amp;nbsp;&lt;br /&gt;136:&amp;nbsp;&lt;br /&gt;137:&amp;nbsp;&lt;br /&gt;138:&amp;nbsp;&lt;br /&gt;139:&amp;nbsp;&lt;br /&gt;140:&amp;nbsp;&lt;br /&gt;141:&amp;nbsp;&lt;br /&gt;142:&amp;nbsp;&lt;br /&gt;143:&amp;nbsp;&lt;br /&gt;144:&amp;nbsp;&lt;br /&gt;145:&amp;nbsp;&lt;br /&gt;146:&amp;nbsp;&lt;br /&gt;147:&amp;nbsp;&lt;br /&gt;148:&amp;nbsp;&lt;br /&gt;149:&amp;nbsp;&lt;br /&gt;150:&amp;nbsp;&lt;br /&gt;151:&amp;nbsp;&lt;br /&gt;152:&amp;nbsp;&lt;br /&gt;153:&amp;nbsp;&lt;br /&gt;154:&amp;nbsp;&lt;br /&gt;155:&amp;nbsp;&lt;br /&gt;156:&amp;nbsp;&lt;br /&gt;157:&amp;nbsp;&lt;br /&gt;158:&amp;nbsp;&lt;br /&gt;159:&amp;nbsp;&lt;br /&gt;160:&amp;nbsp;&lt;br /&gt;161:&amp;nbsp;&lt;br /&gt;162:&amp;nbsp;&lt;br /&gt;163:&amp;nbsp;&lt;br /&gt;164:&amp;nbsp;&lt;br /&gt;165:&amp;nbsp;&lt;br /&gt;166:&amp;nbsp;&lt;br /&gt;167:&amp;nbsp;&lt;br /&gt;168:&amp;nbsp;&lt;br /&gt;169:&amp;nbsp;&lt;br /&gt;170:&amp;nbsp;&lt;br /&gt;171:&amp;nbsp;&lt;br /&gt;172:&amp;nbsp;&lt;br /&gt;173:&amp;nbsp;&lt;br /&gt;174:&amp;nbsp;&lt;br /&gt;175:&amp;nbsp;&lt;br /&gt;176:&amp;nbsp;&lt;br /&gt;177:&amp;nbsp;&lt;br /&gt;178:&amp;nbsp;&lt;br /&gt;179:&amp;nbsp;&lt;br /&gt;180:&amp;nbsp;&lt;br /&gt;181:&amp;nbsp;&lt;br /&gt;182:&amp;nbsp;&lt;br /&gt;183:&amp;nbsp;&lt;br /&gt;184:&amp;nbsp;&lt;br /&gt;185:&amp;nbsp;&lt;br /&gt;186:&amp;nbsp;&lt;br /&gt;187:&amp;nbsp;&lt;br /&gt;188:&amp;nbsp;&lt;br /&gt;189:&amp;nbsp;&lt;br /&gt;190:&amp;nbsp;&lt;br /&gt;191:&amp;nbsp;&lt;br /&gt;192:&amp;nbsp;&lt;br /&gt;193:&amp;nbsp;&lt;br /&gt;194:&amp;nbsp;&lt;br /&gt;195:&amp;nbsp;&lt;br /&gt;196:&amp;nbsp;&lt;br /&gt;197:&amp;nbsp;&lt;br /&gt;198:&amp;nbsp;&lt;br /&gt;199:&amp;nbsp;&lt;br /&gt;200:&amp;nbsp;&lt;br /&gt;201:&amp;nbsp;&lt;br /&gt;202:&amp;nbsp;&lt;br /&gt;203:&amp;nbsp;&lt;br /&gt;204:&amp;nbsp;&lt;br /&gt;205:&amp;nbsp;&lt;br /&gt;206:&amp;nbsp;&lt;br /&gt;207:&amp;nbsp;&lt;br /&gt;208:&amp;nbsp;&lt;br /&gt;209:&amp;nbsp;&lt;br /&gt;210:&amp;nbsp;&lt;br /&gt;211:&amp;nbsp;&lt;br /&gt;212:&amp;nbsp;&lt;br /&gt;213:&amp;nbsp;&lt;br /&gt;214:&amp;nbsp;&lt;br /&gt;215:&amp;nbsp;&lt;br /&gt;216:&amp;nbsp;&lt;br /&gt;217:&amp;nbsp;&lt;br /&gt;218:&amp;nbsp;&lt;br /&gt;219:&amp;nbsp;&lt;br /&gt;220:&amp;nbsp;&lt;br /&gt;221:&amp;nbsp;&lt;br /&gt;222:&amp;nbsp;&lt;br /&gt;223:&amp;nbsp;&lt;br /&gt;224:&amp;nbsp;&lt;br /&gt;225:&amp;nbsp;&lt;br /&gt;226:&amp;nbsp;&lt;br /&gt;227:&amp;nbsp;&lt;br /&gt;228:&amp;nbsp;&lt;br /&gt;229:&amp;nbsp;&lt;br /&gt;230:&amp;nbsp;&lt;br /&gt;231:&amp;nbsp;&lt;br /&gt;232:&amp;nbsp;&lt;br /&gt;233:&amp;nbsp;&lt;br /&gt;234:&amp;nbsp;&lt;br /&gt;235:&amp;nbsp;&lt;br /&gt;236:&amp;nbsp;&lt;br /&gt;237:&amp;nbsp;&lt;br /&gt;238:&amp;nbsp;&lt;br /&gt;239:&amp;nbsp;&lt;br /&gt;240:&amp;nbsp;&lt;br /&gt;241:&amp;nbsp;&lt;br /&gt;242:&amp;nbsp;&lt;br /&gt;243:&amp;nbsp;&lt;br /&gt;244:&amp;nbsp;&lt;br /&gt;245:&amp;nbsp;&lt;br /&gt;246:&amp;nbsp;&lt;br /&gt;247:&amp;nbsp;&lt;br /&gt;248:&amp;nbsp;&lt;br /&gt;249:&amp;nbsp;&lt;br /&gt;250:&amp;nbsp;&lt;br /&gt;251:&amp;nbsp;&lt;br /&gt;252:&amp;nbsp;&lt;br /&gt;253:&amp;nbsp;&lt;br /&gt;254:&amp;nbsp;&lt;br /&gt;255:&amp;nbsp;&lt;br /&gt;256:&amp;nbsp;&lt;br /&gt;257:&amp;nbsp;&lt;br /&gt;258:&amp;nbsp;&lt;br /&gt;259:&amp;nbsp;&lt;br /&gt;260:&amp;nbsp;&lt;br /&gt;261:&amp;nbsp;&lt;br /&gt;262:&amp;nbsp;&lt;br /&gt;263:&amp;nbsp;&lt;br /&gt;264:&amp;nbsp;&lt;br /&gt;265:&amp;nbsp;&lt;br /&gt;266:&amp;nbsp;&lt;br /&gt;267:&amp;nbsp;&lt;br /&gt;268:&amp;nbsp;&lt;br /&gt;269:&amp;nbsp;&lt;br /&gt;270:&amp;nbsp;&lt;br /&gt;271:&amp;nbsp;&lt;br /&gt;272:&amp;nbsp;&lt;br /&gt;273:&amp;nbsp;&lt;br /&gt;274:&amp;nbsp;&lt;br /&gt;275:&amp;nbsp;&lt;br /&gt;276:&amp;nbsp;&lt;br /&gt;277:&amp;nbsp;&lt;br /&gt;278:&amp;nbsp;&lt;br /&gt;279:&amp;nbsp;&lt;br /&gt;280:&amp;nbsp;&lt;br /&gt;281:&amp;nbsp;&lt;br /&gt;282:&amp;nbsp;&lt;br /&gt;283:&amp;nbsp;&lt;br /&gt;284:&amp;nbsp;&lt;br /&gt;285:&amp;nbsp;&lt;br /&gt;286:&amp;nbsp;&lt;br /&gt;287:&amp;nbsp;&lt;br /&gt;288:&amp;nbsp;&lt;br /&gt;289:&amp;nbsp;&lt;br /&gt;290:&amp;nbsp;&lt;br /&gt;291:&amp;nbsp;&lt;br /&gt;292:&amp;nbsp;&lt;br /&gt;293:&amp;nbsp;&lt;br /&gt;294:&amp;nbsp;&lt;br /&gt;295:&amp;nbsp;&lt;br /&gt;296:&amp;nbsp;&lt;br /&gt;297:&amp;nbsp;&lt;br /&gt;298:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# Fractal Christmas Tree, Monolithic Single File&lt;br /&gt;# Sierpinski triangles animated using SDL graphics&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ PREPROCESSOR ]]]&lt;br /&gt;# declare Perl-compatible data types &amp;amp; data structures &lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;main&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Event.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;   &lt;span class="comment"&gt;# used for window creation &amp;amp; control&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for creating Event object&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Events&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# used for Event queue handling functions&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Time::HiRes&lt;/span&gt; &lt;span class="words"&gt;qw( gettimeofday usleep )&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for time-based animation control&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CONSTANTS ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ DATA FOR SIZES &amp;amp; SHAPES &amp;amp; COLORS;&lt;br /&gt;#   HARD-CODED 1024x768 RESOLUTION &amp;amp; 32-BIT COLOR DEPTH ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial triangle's 3 corners as [x, y] Euclidean coordinates&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;212&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;812&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;     &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;105&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;150&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;175&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_white&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;140&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# colors as [r, g, b] triplets; number of colors is number of recursions&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# green needs to be the color of the smallest, and thus most numerous, triangles&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_white&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;scalar&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# rectangle in format [ x, y, width, height ]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;601&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;050&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;155&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# top right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# colors for animated Christmas tree lights&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Events.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="words"&gt;qw(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;no_such_event&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_ACTIVEEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_KEYDOWN SDL_KEYUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_MOUSEMOTION SDL_MOUSEBUTTONDOWN SDL_MOUSEBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_JOYAXISMOTION SDL_JOYBALLMOTION SDL_JOYHATMOTION SDL_JOYBUTTONDOWN SDL_JOYBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_QUIT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_SYSWMEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_VIDEORESIZE SDL_VIDEOEXPOSE&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_USEREVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_NUMEVENTS&lt;br /&gt;)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# constant data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OPERATIONS ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ PREPARE &amp;amp; MAKE INITIAL RECURSIVE CALL ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# declare &amp;amp; initialize final array outside of the recursive subroutine for easy direct access by all recursive calls&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial triangle is in a triangle group by itself&lt;br /&gt;&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial call to recursive subroutine&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# regex to (g)lobally (s)earch for numbers incorrectly wrapped in 'single-quotes' by Dumper,&lt;br /&gt;# replace by // empty string, no lvalue $variable so directly (r)eturn modified string;&lt;br /&gt;# https://perldoc.perl.org/perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_triangle_groups = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ INITIALIZE GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# SDL includes moved into [[[ INCLUDES ]]] section above&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initialize SDL video &amp;amp; application &amp;amp; event;&lt;br /&gt;# we do not call $my_SDL_app-&amp;gt;run() anywhere in this program, instead we use the while() run loop below&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;SDL::init&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Merry Christmas!!  Perl Advent 2022!!!'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1024&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                     &lt;span class="comment"&gt;# hard-coded 1024x768 resolution&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;768&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;depth&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;32&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                       &lt;span class="comment"&gt;# hard-coded 32-bit color&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;resizeable&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;                     &lt;span class="comment"&gt;# allow window resize; does not scale window contents&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ RENDER STATIC GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# draw Christmas tree branches &amp;amp; snow tinsel &amp;amp; ornaments &amp;amp; lights;&lt;br /&gt;# iterate through triangle groups in reverse order, due to reverse population during recursion&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # https://metacpan.org/dist/SDL/view/lib/pods/SDLx/Surface.pod&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # refresh window on every triangle for fun cascade drawing effect&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# draw Christmas tree trunk &amp;amp; Star of Bethlehem&lt;br /&gt;&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_rect&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;  &lt;span class="comment"&gt;# refresh window&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ RENDER DYNAMIC (ANIMATED) GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# set initial index for accesssing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# set initial time for changing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;#print 'have $seconds_start = ', $seconds_start, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# the main run loop, used instead of calling $my_SDL_app-&amp;gt;run();&lt;br /&gt;# animate forever, until SDL_QUIT event is received in GUI window via &amp;lt;Alt-F4&amp;gt; keypress or window close mouse click,&lt;br /&gt;# or in CLI window via &amp;lt;Ctrl-C&amp;gt; keypress&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # pump the event loop, gathering events from input devices&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;SDL::Events::pump_events&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # poll for currently pending events&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL::Events::poll_event&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have @SDL_EVENTS['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # we only care about the SDL_QUIT event telling us to exit&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt; &lt;span class="operator"&gt;==&lt;/span&gt; &lt;span class="word"&gt;SDL_QUIT&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'SDL_QUIT event received, exiting'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;exit&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class="comment"&gt;    # get current time, for comparison with start time of current Christmas tree lights color&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;#    print 'have $seconds_current = ', $seconds_current, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # twinkle Christmas tree lights every 1 second&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$seconds_current&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # reset start time to current time, for time cycle of next animation frame&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # iterate through lights colors&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_color = $my_lights_colors-&amp;gt;['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_color&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # wrap back to beginning of lights colors when end is reached&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # only update second-smallest triangles, not the green of the Christmas tree itself&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # redraw green of Christmas tree&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # redraw Star of Bethlehem&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # refresh window once for every Christmas tree lights color change, for synchronized lights&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # briefly pause between each while() loop iteration, to avoid overloading CPU;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ( 1_000_000 microseconds per second ) / ( 10_000 microseconds per iteration) = 100 iterations per second;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# need at least 100 while loop iterations per second, in order to process all of the otherwise-ignored&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# SDL_MOUSEMOTION events which are caused by simply moving the mouse over top of the window&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;usleep&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10_000&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# recursively generate triangles, grouped by recursion level&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;sierpinski&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;@ARG&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $recursions_remaining = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $triangle = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # shortcut variables, easier to read in midpoint calculations below&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # calculate midpoints between two coordinates [x1, y1] and [x2, y2] is [(x1+x2)/2, (y1+y2)/2]&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # construct 3 sub-triangles from orinal points and newly-calculated midpoints&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;   &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # $triangle_groups is zero-indexed like all other Perl arrays,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# so we need to subtract one from $recursions_remaining before using as an index,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# in order to avoid an undefined element at element 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# also, we need to decrement $recursions_remaining before making recursive calls;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# for both of these reasons, we can decrement now&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # store all triangles grouped by recursion level&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # recurse once for each sub-triangle&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # return after maximum recursion level is reached (conditional block above not entered),&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or all recursion calls have returned (conditional block above entered);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# no return value, all generated data is stored directly in $triangle_groups&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of package 'main'&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you review the graphics rendering code above, you will see the &lt;code&gt;while(1)&lt;/code&gt; main run loop which twinkles the Christmas tree lights, displaying an animated color change once every second.&lt;/p&gt;

&lt;p&gt;Run it yourself and bask in the Perl yuletide glory of your very own Sierpinski triangle fractal Christmas tree!&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ ./sierpinski_triangles_christmas_monolith.pl&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Merry Christmas to all, and to all a good night! :-)&lt;/p&gt;

&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_20_animated.gif" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-27T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Will 'the Chill' Braswell</name>
    </author>
  </entry>
  <entry>
  <title>Set HTTP headers with WWW-Mechanize</title>
  <summary type="html"><![CDATA[<p>
Perl has several modules on several levels of abstraction to interact with web sites using HTTP requests. One of the nice modules is <a href="https://metacpan.org/pod/WWW::Mechanize">WWW::Mechanize</a> that is built on top of <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>. In this example we'll see how to set the header in the HTTP request using WWW::Mechanize.
<p>
We'll use the service provided by the <a href="https://httpbin.org/">httpbin.org</a> web site to see the headers we set.
<p>
It has many end-points. We use the one that will send back the header the client sent as its content. It makes it very easy to see what was in our header.
<p>
]]></summary>
  <updated>2022-12-26T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/set-http-headers-with-www-mechanize"/>  <id>https://perlmaven.com/set-http-headers-with-www-mechanize</id>
  <content type="html"><![CDATA[<p>
Perl has several modules on several levels of abstraction to interact with web sites using HTTP requests. One of the nice modules is <a href="https://metacpan.org/pod/WWW::Mechanize">WWW::Mechanize</a> that is built on top of <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>. In this example we'll see how to set the header in the HTTP request using WWW::Mechanize.
<p>
We'll use the service provided by the <a href="https://httpbin.org/">httpbin.org</a> web site to see the headers we set.
<p>
It has many end-points. We use the one that will send back the header the client sent as its content. It makes it very easy to see what was in our header.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#596 - New Year Resolution</title>
    <link rel="alternate" href="https://perlweekly.com/archive/596.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>With the end of <strong>Advent Calendar</strong> celebration, another celebration kicks in i.e. <strong>Christmas/Boxing Day</strong>. Although I don't celebrate, being a Muslim, but I do enjoy the break from the routine work.</p>
<p>This edition of the weekly newsletter is my <strong>120th edition</strong>. I hope you enjoy reading the newsletter as much as I do getting ready for you.</p>
<p><strong>Do you have any new year resolutions?</strong></p>
<p>I used to but then last year I stopped it.</p>
<p><strong>Why?</strong></p>
<p>Well couple of projects closed to my heart didn't get started and that made me very pessimistic. I feel so bad that I don't even talk about it. I hope new year will bring positive change.</p>
<p>Still, I don't feel like setting new year resolutions. Could it be, I am getting old to keep up with fast pace dev life? Having said, the dev inside me still alive but just needs some push. Fortunately I have so many people around me that always gives me much needed positive energy.</p>
<p>Let's talk about some positivity now. Well for me, it was the <a href="https://perladvent.org/2022">Perl Advent Calendar 2022</a>, thanks to <strong>Olaf Alders</strong> and team. I wanted to be part of it but then missed the train unfortunately. Never mind, there is always next time. Having said, I did manage to get <a href="https://theweeklychallenge.org/blog/app-timer">the post</a> up but was too late to make it. Fortunately my contribution to <strong>Raku Advent Calendar 2022</strong> did work out nicely like <a href="https://raku-advent.blog/2022/12/21/day-21-raku-and-i-journey-begin">Raku and I</a>.</p>
<p>Enjoy rest of the holidays and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/596.html</id>
    <published>2022-12-26T10:00:00Z</published>
    <updated>2022-12-26T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Create Your Excel using Perl!</title>
    <link href="http://perladvent.org/2022/2022-12-26.html"/>
    <id>http://perladvent.org/2022/2022-12-26.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="Create-Your-Excel-using-Perl"&gt;Create Your Excel using Perl!&lt;/h2&gt;

&lt;h3 id="Intro"&gt;Intro&lt;/h3&gt;

&lt;p&gt;A long-long time ago, during the Advent of 2001, there was an article about manipulating Excel spreadsheets using Perl, &lt;a href="https://perladvent.org/2001/14th/"&gt;Spreadsheet::WriteExcel&lt;/a&gt;. It&amp;#39;s been a while now, so Santa decided to ask the Wise Old Elf to write another article about creating Excel files using Perl.&lt;/p&gt;

&lt;p&gt;There were only 3 days until Advent, with lots of articles missing, so the Wise Old Elf immediately delegated this task to Wunorse Openslae, and he chose wisely - as always. Wunorse was a master of managing Excel files and started to work on that article immediately.&lt;/p&gt;

&lt;h3 id="Preface"&gt;Preface&lt;/h3&gt;

&lt;p&gt;Some historical background: The older module &lt;a href="https://metacpan.org/pod/Spreadsheet::WriteExcel"&gt;Spreadsheet::WriteExcel&lt;/a&gt; is for creating Excel files compatible with Excel 97, 2000, 2002, 2003 and 2007, mainly with &lt;code&gt;.xls&lt;/code&gt; extension. It is mostly compatible with Excel::Writer::XLSX, so &lt;a href="https://metacpan.org/pod/Spreadsheet::WriteExcel#Migrating-to-Excel::Writer::XLSX"&gt;migrating to the newer version&lt;/a&gt; should be as easy as Christmas pie. However such a migration is more like a heavy Christmas pudding loaded with goodness and lots of issues might arise during the process.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;Spreasheet::ParseExcel&lt;/code&gt; for reading the older Excel files having &lt;code&gt;.xls&lt;/code&gt; extension, on the other hand you should use &lt;code&gt;Spreadsheet::ParseXLSX&lt;/code&gt; or &lt;code&gt;Spreadsheet::XLSX&lt;/code&gt; to open and manipulate existing Excel files having the &lt;code&gt;.xlsx&lt;/code&gt; extension. This article deals with creating Excel files in &lt;code&gt;.xlsx&lt;/code&gt; format.&lt;/p&gt;

&lt;h3 id="Basics"&gt;Basics&lt;/h3&gt;

&lt;p&gt;First things first: import the module, initialize an &lt;code&gt;.xlsx&lt;/code&gt; file, add some worksheets, input some data on them and finally close the file, as you would do with a usual filehandle. This looks a bit different, though:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;use Excel::Writer::XLSX;&lt;br /&gt;&lt;br /&gt;#Create excel file               &lt;br /&gt;my $merry = Excel::Writer::XLSX-&amp;gt;new( &amp;#39;xmas.xlsx&amp;#39; );&lt;br /&gt;#create the workbooks&lt;br /&gt;my $xmas = $merry-&amp;gt;add_worksheet(&amp;#39;Merry&amp;#39;);&lt;br /&gt;my $baking_sheet = $merry-&amp;gt;add_worksheet(&amp;#39;Xmas&amp;#39;);&lt;br /&gt;my $stats = $merry-&amp;gt;add_worksheet(&amp;#39;Everybody!&amp;#39;);&lt;br /&gt;$xmas-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39; );&lt;br /&gt;$merry-&amp;gt;close();&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;I skipped to display the usual stuff from the beginning of the script, everyone should know by heart: &lt;code&gt;use strict; use warnings;&lt;/code&gt;, etc. This will be the skeleton or the Christmas themed frame of our script. You can put everything else in between, depending on Santa&amp;#39;s needs, a list of Christmas cookies from around Europe in hash format is a good example, including some stats.&lt;/p&gt;

&lt;h3 id="Formatting"&gt;Formatting&lt;/h3&gt;

&lt;p&gt;To add some format to your cells, use the &lt;code&gt;add_format()&lt;/code&gt; method. You can either just call it on your &lt;code&gt;$workbook&lt;/code&gt; without parameters or pass a hash of formatting properties to it. The rest depends on your choice from the two options. It is more convenient - in my opinion - to create a format object with a hash, rather than calling the formatting methods afterwards. But the option is there to call the specific format methods for as you need them. I will demonstrate both ways in the examples.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;#This will create a christmas colored landscape with snow in the background represented as dots.&lt;br /&gt;my %props = ( color =&amp;gt; &amp;#39;red&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size =&amp;gt; &amp;#39;20&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bg_color =&amp;gt; &amp;#39;green&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pattern =&amp;gt; 18,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;align =&amp;gt; &amp;#39;center&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;my $format = $workbook-&amp;gt;add_format( %props );&lt;br /&gt;#write welcome text with formatting to top left cell&lt;br /&gt;$xmas-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39;, $format);&lt;br /&gt;#Set the column width.&lt;br /&gt;$xmas-&amp;gt;set_column(&amp;#39;A:A&amp;#39;, 30);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You will need to pass the format object to your write method as a parameter:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$merry-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39;, $format );&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You might notice the &lt;code&gt;set_column()&lt;/code&gt; method, this takes the column &amp;#39;coordinates&amp;#39; as a parameter and a number which is the actual width. Let&amp;#39;s add some more format objects for later.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;my $format2 = $merry-&amp;gt;add_format();&lt;br /&gt;&lt;br /&gt;#Setting format using formatting methods, red and bold text, green background, center alignment, green background and dotted borders (for the snowflakes)&lt;br /&gt;&lt;br /&gt;$format2-&amp;gt;set_color( &amp;#39;red&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_bold();&lt;br /&gt;$format2-&amp;gt;set_size( 12 );&lt;br /&gt;$format2-&amp;gt;set_bg_color( &amp;#39;green&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_align( &amp;#39;center&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_border( 4 );&lt;br /&gt;&lt;br /&gt;#Just some snowflakes as border&lt;br /&gt;my $format3 = $merry-&amp;gt;add_format( border =&amp;gt; 4,);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id="Writing-data-into-cells"&gt;Writing data into cells&lt;/h3&gt;

&lt;p&gt;There are two ways to do that: you can use either the row-column notation or the A1 notation as described in &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#Cell-notation"&gt;Cell notation&lt;/a&gt;. First of all we need some data so let&amp;#39;s compose our cookies list. We will use a hash of array refs to do this:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;my $cookies = { &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hungary =&amp;gt; [ &amp;#39;bejgli&amp;#39;, &amp;#39;h&amp;oacute;labda&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scandinavia =&amp;gt; [ &amp;#39;Pepparkakor&amp;#39;, &amp;#39;Ruiskakut&amp;#39;, &amp;#39;Lussekatter&amp;#39;, &amp;#39;Krumkake&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Netherlands =&amp;gt; [ &amp;#39;Spekulaas&amp;#39;, &amp;#39;Kerstkranjes&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Germany =&amp;gt; [ &amp;#39;Lebkuchen&amp;#39;, &amp;#39;Stollen&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Switzerland =&amp;gt; [ &amp;#39;Basler L&amp;auml;ckerli&amp;#39;, &amp;#39;Brunsli&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Italy =&amp;gt; [ &amp;#39;Panettone&amp;#39;, &amp;#39;Pignoli&amp;#39;, &amp;#39;Cannoli&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Spain =&amp;gt; [ &amp;#39;Polvorones&amp;#39;, &amp;#39;Mantecados&amp;#39;, &amp;#39;Turr&amp;oacute;n&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Greece =&amp;gt; [ &amp;#39;Melomakarona&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;#Sort the countries alphabetically&lt;br /&gt;my @countries = sort keys %$cookies;&lt;br /&gt;&lt;br /&gt;#Add the cookies to the baking sheet, one country per column.&lt;br /&gt;$baking_sheet-&amp;gt;set_column( 0, scalar keys %$cookies, 15 );&lt;br /&gt;$baking_sheet-&amp;gt;write( &amp;#39;A1&amp;#39;, \@countries, $format2 );&lt;br /&gt;&lt;br /&gt;my $i = 0;&lt;br /&gt;for ( sort keys %$cookies ) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;#Place Your cookies to the baking sheet&lt;br /&gt;&amp;nbsp;&amp;nbsp;$baking_sheet-&amp;gt;write( 1, $i, [ $cookies-&amp;gt;{$_} ], $format3 );&lt;br /&gt;&amp;nbsp;&amp;nbsp;$i++;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;#write some statistics about how many types of cookies we have per country&lt;br /&gt;$stats-&amp;gt;write( &amp;#39;A1&amp;#39;, [ \@countries ], $format2 );&lt;br /&gt;&lt;br /&gt;#Reset the counter&lt;br /&gt;$i = 0;&lt;br /&gt;#count how many cookies we have country wise.&lt;br /&gt;for ( sort keys %$cookies ) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;#Place Your cookies to the baking sheet&lt;br /&gt;&amp;nbsp;&amp;nbsp;$stats-&amp;gt;write( $i, 1, scalar @{$cookies-&amp;gt;{$_}} , $format3 );&lt;br /&gt;&amp;nbsp;&amp;nbsp;$i++;&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Many things are happening here.&lt;/p&gt;

&lt;p&gt;First we get a list of countries sorted alphabetically. Second we are writing those countries into the first row, alongside some formats, defined above. Then comes the first usage of &lt;code&gt;write()&lt;/code&gt;, where we are using the A1 notation to start from the top left corner, then comes the reference to the &lt;code&gt;@countries&lt;/code&gt; array, followed by the format2. When we pass an array reference to &lt;code&gt;write()&lt;/code&gt;, it will write the elements of the array in the same row. It is equivalent to write_row(). If you pass an array ref of array refs to &lt;code&gt;write()&lt;/code&gt;, it is the same as calling &lt;code&gt;write_col()&lt;/code&gt;, it will write to the columns, as demonstrated in the lines 22 and 27.&lt;/p&gt;

&lt;p&gt;For more on &lt;code&gt;write()&lt;/code&gt;, please check the &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#write(-$row,-$column,-$token,-$format-)"&gt;write section&lt;/a&gt; on the module&amp;#39;s page.&lt;/p&gt;

&lt;h3 id="Outro"&gt;Outro&lt;/h3&gt;

&lt;p&gt;Santa was cheerful about this guide, especially that it contains the long avaited Christmas cookie statistics. And perhaps the next task will be to extend this report with more Christmas cookies from around the world.&lt;/p&gt;

&lt;p&gt;We just scratched the surface of &lt;code&gt;Excel::Writer::XLSX&lt;/code&gt; with this short tutorial. You can find a comprehensive guide on CPAN, &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX"&gt;Excel::Writer::XLSX&lt;/a&gt;. This is a very useful and powerful module, which can deal with a range of tasks from the basics of generating reports to the heavy lifting of the work with VBA in Excel. To cover all of its features would take a whole book.&lt;/p&gt;

&lt;p&gt;You can find the whole script on my Github &lt;a href="https://github.com/x1mandi/padvent_code/blob/main/cookies_test.pl"&gt;cookies_test.pl&lt;/a&gt;, so that you can test it on your own and play with the module. Merry Christmas!&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-26T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Csaba Simándi</name>
    </author>
  </entry>
</feed>
