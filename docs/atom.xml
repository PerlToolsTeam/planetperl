<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-04-05T15:49:04Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
  <title>Grant Proposals: March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_march_2021"/>
  <id>tag:news.perlfoundation.org,2021-04-05:/post/grant_proposals_march_2021</id>
  <published>2021-04-05T10:01:49</published>
  <updated>2021-04-05T10:01:49</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Future is Now! Perl Role in Malaysia</title>
    <link rel="alternate" href="https://job.perl.careers/sx1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an online financial services company, still rapidly expanding after 20 years of impressive growth. With a truly international presence, they’re well known globally in their niche. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/sx1</id>
    <published>2021-04-05T10:00:48Z</published>
    <updated>2021-04-05T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/1r2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/1r2</id>
    <published>2021-04-05T10:00:47Z</published>
    <updated>2021-04-05T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Smart Shopper = Smart Saver. Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/ahf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they share your dedication to finding consumers the best possible deal on electronics, technology, household appliances, and gaming systems. Best of all, they’re looking for candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/ahf</id>
    <published>2021-04-05T10:00:46Z</published>
    <updated>2021-04-05T10:00:46Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/53q" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/53q</id>
    <published>2021-04-05T10:00:45Z</published>
    <updated>2021-04-05T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/mg6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites. This dynamic team is looking for a senior Perl programmer with a strong understanding of Go programming language, paradigms, constructs, and idioms.</div>
    </content>
    <id>https://job.perl.careers/mg6</id>
    <published>2021-04-05T10:00:44Z</published>
    <updated>2021-04-05T10:00:44Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-04-05T10:00:43Z</published>
    <updated>2021-04-05T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 6, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-04-05T10:00:42Z</published>
    <updated>2021-04-05T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-04-05T10:00:41Z</published>
    <updated>2021-04-05T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-04-05T10:00:40Z</published>
    <updated>2021-04-05T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 14, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-04-05T10:00:39Z</published>
    <updated>2021-04-05T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Houston Perl Mongers Online Meeting: Pairwise and Lightning Talks</title>
    <link rel="alternate" href="http://houston.pm.org/announce_meeting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">April 8th, 2021 06:00 PM Central Time (US and Canada)</div>
    </content>
    <id>http://houston.pm.org/announce_meeting.html</id>
    <published>2021-04-05T10:00:38Z</published>
    <updated>2021-04-05T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Presenting Mojolicious Nine Point Oh!</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, March 31, 2021</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/</id>
    <published>2021-04-05T10:00:37Z</published>
    <updated>2021-04-05T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2021.03</title>
    <link rel="alternate" href="https://szabgab.com/report-2021-03.html" type="text/html"/>
    <id>https://szabgab.com/report-2021-03.html</id>
    <published>2021-04-05T10:00:36Z</published>
    <updated>2021-04-05T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Live events</title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">List of live events: Automation with Rex; Web application development with Mojolicious; BDD with Test::BDD::Cucumber.</div>
    </content>
    <id>https://code-maven.com/live</id>
    <published>2021-04-05T10:00:35Z</published>
    <updated>2021-04-05T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 5 - with Erik Hülsmann</title>
    <link rel="alternate" href="https://perlmaven.com/exploring-bdd-in-perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Event scheduled for April 11</div>
    </content>
    <id>https://perlmaven.com/exploring-bdd-in-perl-5</id>
    <published>2021-04-05T10:00:34Z</published>
    <updated>2021-04-05T10:00:34Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-04-05T10:00:33Z</published>
    <updated>2021-04-05T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2021.13 Games Pop</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/</id>
    <published>2021-04-05T10:00:32Z</published>
    <updated>2021-04-05T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Live Video - Maximum Gap by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/h8NppRqAZaE" type="text/html"/>
    <id>https://youtu.be/h8NppRqAZaE</id>
    <published>2021-04-05T10:00:31Z</published>
    <updated>2021-04-05T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Live Video - Fun Time by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/o67LcSa2bC8" type="text/html"/>
    <id>https://youtu.be/o67LcSa2bC8</id>
    <published>2021-04-05T10:00:30Z</published>
    <updated>2021-04-05T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Live Video - Maximum Gap by Lance Wicks</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=E4Bwh-FVTns" type="text/html"/>
    <id>https://www.youtube.com/watch?v=E4Bwh-FVTns</id>
    <published>2021-04-05T10:00:29Z</published>
    <updated>2021-04-05T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Generate Calendar in ICal format</title>
    <link rel="alternate" href="https://perlmaven.com/generate-calendar-in-ical-format" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This example was written in preparation for the <a href="https://perlweekly.com/perlweekly.ical">calendar file provided by the Perl Weekly</a> site that contains all the Perl-related events we are aware of from our <a href="https://perlweekly.com/events.html">events</a> page. There is also a <a href="https://code-maven.com/events.ics">calendar file</a> provided by the Code Maven site that include all the <a href="https://code-maven.com/live">live events</a>.</div>
    </content>
    <id>https://perlmaven.com/generate-calendar-in-ical-format</id>
    <published>2021-04-05T10:00:28Z</published>
    <updated>2021-04-05T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106.</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/03/29/PWC106/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just loved the hack for the Decimal String task. Beautiful.</div>
    </content>
    <id>https://wlmb.github.io/2021/03/29/PWC106/</id>
    <published>2021-04-05T10:00:27Z</published>
    <updated>2021-04-05T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 106</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-106-1cn7" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon shared his research while working on Decimal String task. We all get it for FREE, thank you.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-106-1cn7</id>
    <published>2021-04-05T10:00:26Z</published>
    <updated>2021-04-05T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Decimal</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_106__Maximum_Decimal.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger shared a cool algorithm to deal with the Decimal String task. Thanks for sharing.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_106__Maximum_Decimal.html</id>
    <published>2021-04-05T10:00:25Z</published>
    <updated>2021-04-05T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: quick and easy</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/03/29/PerlWeeklyChallenge106.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca used his Raku skill and made both tasks look like schoolboy tasks. Simply the best.</div>
    </content>
    <id>https://fluca1978.github.io/2021/03/29/PerlWeeklyChallenge106.html</id>
    <published>2021-04-05T10:00:24Z</published>
    <updated>2021-04-05T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap and Decimal String</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent showing his expertise in multiple languages in this blog post. Incredible.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html</id>
    <published>2021-04-05T10:00:23Z</published>
    <updated>2021-04-05T10:00:23Z</updated>
  </entry>
  <entry>
    <title>PWC106 - Decimal String</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/01/pwc106-decimal-string/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio went beyond what was expected in the task. I need to revisit hi blog post to get to the bottom of it.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/01/pwc106-decimal-string/</id>
    <published>2021-04-05T10:00:22Z</published>
    <updated>2021-04-05T10:00:22Z</updated>
  </entry>
  <entry>
    <title>PWC106 - Maximum Gap</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/31/pwc106-maximum-gap/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's style of blogging is really cool as you don't just get a fine solution but also fun discussion as well.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/31/pwc106-maximum-gap/</id>
    <published>2021-04-05T10:00:21Z</published>
    <updated>2021-04-05T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Just Got Poked: Perl Weekly Challenge 106 and Other News</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/03/just-got-poked-perl-weekly-challenge-106-and-other-news.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave raised a notorious issue when printing decimal fractions using sprintf().</div>
    </content>
    <id>https://jacoby.github.io/2021/04/03/just-got-poked-perl-weekly-challenge-106-and-other-news.html</id>
    <published>2021-04-05T10:00:20Z</published>
    <updated>2021-04-05T10:00:20Z</updated>
  </entry>
  <entry>
    <title>String the Gap with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/string-gap.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne always presents his case with reference documents which give you the complete picture. Keep it up.</div>
    </content>
    <id>https://raku-musings.com/string-gap.html</id>
    <published>2021-04-05T10:00:19Z</published>
    <updated>2021-04-05T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/04" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam's notes section for the Decimal String task is an eye-opener for me. I will go back to it later to gain a better understanding.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/04</id>
    <published>2021-04-05T10:00:18Z</published>
    <updated>2021-04-05T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Decimal String</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's discussion about the Decimal String task is too technical and well worth reading. Thanks for sharing this knowledge.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-2.html</id>
    <published>2021-04-05T10:00:17Z</published>
    <updated>2021-04-05T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail once again showed off his skill and presented his solutions in an elegant blog post.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-1.html</id>
    <published>2021-04-05T10:00:16Z</published>
    <updated>2021-04-05T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-106/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Once again, Aaron shared some cool Raku magic. Thanks and keep it up.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-106/</id>
    <published>2021-04-05T10:00:15Z</published>
    <updated>2021-04-05T10:00:15Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 106</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-106" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Maximum Gap" and "Decimal String" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-106</id>
    <published>2021-04-05T10:00:14Z</published>
    <updated>2021-04-05T10:00:14Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 107</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with a couple of fun tasks "Self-descriptive Numbers" and "List Methods". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the <a href="https://perlweeklychallenge.org/faq">FAQ</a>.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-107</id>
    <published>2021-04-05T10:00:13Z</published>
    <updated>2021-04-05T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Date::Parse</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/04/date-parse/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shared the power of Date::Parse. Find out the secret for yourself.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/04/date-parse/</id>
    <published>2021-04-05T10:00:12Z</published>
    <updated>2021-04-05T10:00:12Z</updated>
  </entry>
  <entry>
    <title>A pull request for Crypt::LE</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/30/crypt-le-pr/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's contribution to Crypt::LE is very handy. Please check it out.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/30/crypt-le-pr/</id>
    <published>2021-04-05T10:00:11Z</published>
    <updated>2021-04-05T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Distar - A CPAN Distribution Author Tool</title>
    <link rel="alternate" href="https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Check out this introduction to Distar; a new shiny, handy tool for CPAN distribution authors.</div>
    </content>
    <id>https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95</id>
    <published>2021-04-05T10:00:10Z</published>
    <updated>2021-04-05T10:00:10Z</updated>
  </entry>
  <entry>
    <title>CPAN utils</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/cpan-utils-4g4p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Coolest collection of CPAN utils ever.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/cpan-utils-4g4p</id>
    <published>2021-04-05T10:00:09Z</published>
    <updated>2021-04-05T10:00:09Z</updated>
  </entry>
  <entry>
    <title>CPAN Report 2020</title>
    <link rel="alternate" href="http://neilb.org/2021/03/03/cpan-report-2021.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil came up withi an extensive report about activity on the CPAN in 2020.</div>
    </content>
    <id>http://neilb.org/2021/03/03/cpan-report-2021.html</id>
    <published>2021-04-05T10:00:08Z</published>
    <updated>2021-04-05T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Monthly Report - March</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Following the tradition, here is my monthly report for March 2020.</div>
    </content>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html</id>
    <published>2021-04-05T10:00:07Z</published>
    <updated>2021-04-05T10:00:07Z</updated>
  </entry>
  <entry>
    <title>The Zen of Test Suites</title>
    <link rel="alternate" href="https://dev.to/ovid/the-zen-of-test-suites-304f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This should be used as a text for any beginner learning to code. I found it very useful and will definitely bookmark it for future reference.</div>
    </content>
    <id>https://dev.to/ovid/the-zen-of-test-suites-304f</id>
    <published>2021-04-05T10:00:06Z</published>
    <updated>2021-04-05T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Security Issues in Perl IP Address distros</title>
    <link rel="alternate" href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Security Issues in Perl IP Address distros.</div>
    </content>
    <id>https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/</id>
    <published>2021-04-05T10:00:05Z</published>
    <updated>2021-04-05T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Switch lots of things on at once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting blog post by Ben talking about boilerplate solutions.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html</id>
    <published>2021-04-05T10:00:04Z</published>
    <updated>2021-04-05T10:00:04Z</updated>
  </entry>
  <entry>
    <title>TPRCIC 2021 - Call for papers</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tprcic2021callforpapers" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Perl and Raku Conference in the Cloud 2021 celebrates all things Perl and Raku from 8-10 June with group meetings (BOFs) on the Monday and Friday either side of the main event.</div>
    </content>
    <id>https://news.perlfoundation.org/post/tprcic2021callforpapers</id>
    <published>2021-04-05T10:00:03Z</published>
    <updated>2021-04-05T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Kent Fredric's CPAN distributions are available for adoption</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil appeals to all CPAN contributors to ask if they are willing to adopt Kent Fredric's distributions.</div>
    </content>
    <id>http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html</id>
    <published>2021-04-05T10:00:02Z</published>
    <updated>2021-04-05T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Code Maven courses</title>
    <link rel="alternate" href="https://code-maven.teachable.com/p/perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl courses by Gabor Szabo</div>
    </content>
    <id>https://code-maven.teachable.com/p/perl</id>
    <published>2021-04-05T10:00:01Z</published>
    <updated>2021-04-05T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#506 - Perl Memory Management</title>
    <link rel="alternate" href="http://perlweekly.com/archive/506.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>One topic that is rarely talked about with reference to Perl is 'Memory Management'. Could it be that, being a developer, you don't need to worry about it? Possibly yes, as Perl garbage collection is very efficient. However you still have to take care of circular data structures manually. To get to the bottom of the matter, one has to be aware of two things, "reference count" and "weak references". Can CPAN help me with this? Yes, there is a module <a href="https://metacpan.org/pod/Devel::Peek">Devel::Peek</a> available on CPAN. This will help you figure out the "reference count". How about "weak references" now? Well, once again CPAN is handy, you have <a href="https://metacpan.org/pod/Scalar::Util">Scalar::Util</a> available on CPAN, which provides the subroutine weaken() to create "weak references". What is the point of creating "weak references"? Well, in Perl, a "weak reference" doesn't affect the "reference count" and in a way helps you stop memory leaks. I have yet to come across a simple working example to demonstrate this behaviour. However, you might find the two recipes Chapter 11.15 and chapter 13.13 from the our old friend, <a href="https://www.oreilly.com/library/view/perl-cookbook-2nd/0596003137/">Perl Cookbook, second edition</a> very useful. There is another post, <a href="https://www.perl.com/article/the-trouble-with-reference-counting">The Trouble with Reference Counting</a> by David Farrell which is also very interesting.</p>
<p>Talking about books, I recommend you take a look at <a href="https://leanpub.com/perl_new_features">Perl New Features</a> by brian d foy. This book will take you to a memorable journey from Perl v5.10 to v5.32.</p>
<p>To all readers in the United Kingdom, enjoy the Monday bank holiday and rest of world start your week on a happy note starting with the weekly newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/506.html</id>
    <published>2021-04-05T10:00:00Z</published>
    <updated>2021-04-05T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap and Decimal String</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10169</id>
    <published>2021-04-03T02:41:09Z</published>
    <updated>2021-04-04T22:22:00Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 106 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (April 4, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Maximum Gap</h2>

<p><em>You are given an array of integers <code>@N</code>.</em></p>

<p><em>Write a script to display the maximum difference between two successive elements once the array is sorted.</em></p>

<p><em>If the array contains only 1 element then display 0.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: @N = (2, 9, 3, 5)
Output: 4

Input: @N = (1, 3, 8, 2, 0)
Output: 5

Input: @N = (5)
Output: 0
</code></pre>

<p>Trying all combinations would imply an algorithmic complexity of <code>O(n²)</code>, whereas the obviously immediate solution, i.e. first sorting the array has a better algorithmic complexity of <code>O(n log n)</code>. So we will start with sorting the array and then explore the successive gaps to find the largest one.</p>

<h3>Maximum Gap in Raku</h3>

<p>We might start with a standard <code>for</code> loop to find the largest gap , as we would do in C or in Pascal.</p>

<pre><code>use v6;

my @input = 2, 9, 3, 5;
my @sorted = sort @input;
my $max = 0;
for 1..@sorted.end -&gt; $i {
    $max = @sorted[$i] - @sorted[$i-1] if @sorted[$i] - @sorted[$i-1] &gt; $max;
}
say "Max gap: $max";
</code></pre>

<p>This works fine and the output is what we expect:</p>

<pre><code>$ raku max-gap.raku
Max gap: 4
</code></pre>

<p>But we can make the code slightly shorter with functional programming:</p>

<pre><code>my @input = 2, 9, 3, 5;
say 0 and exit if @input &lt;= 1;
my @sorted = sort @input;
my $max = max map { @sorted[$_] - @sorted[$_-1] }, 1..@sorted.end;
say "Max gap: $max";
</code></pre>

<p>The line where <code>$max</code> is declared and defined is a data pipeline and should be read from right to left. We first generate a list of array subscripts from 1 to the index of the last item, the use the <code>map</code> to generate of gaps between each element and the previous one, and finally call the built-in <code>max</code> function on this new list.</p>

<p>We display the same output:</p>

<pre><code>$ raku max-gap2.raku
Max gap: 4
</code></pre>

<p>Raku provides some built-in functions that make it possible to solve the problem in just one single line of code. The <a href="https://docs.raku.org/routine/rotor">rotor</a> routine takes an array or a list as input parameter and returns a sequence of lists, where each sublist is made up of elements of the invocant. You can define the number of items of each sublist and a gap between the sublists. With a negative gap, the sublists overlap. Here, with a number of item equal to 2 and a gap of -1, we get a series of two-items sequence on which we can compare the differences.</p>

<pre><code>say "Max gap = ", &lt;2 9 3 5&gt;.sort.rotor(2 =&gt; -1).map({$_[1] - $_[0]}).max;
</code></pre>

<p>Note that the one-liner program just above doesn&#8217;t handle lists with only one element, but that&#8217;s trivial and left as an exercise to the reader.</p>

<p>Again, this program displays the following:</p>

<pre><code>Max gap: 4
</code></pre>

<h3>Maximum Gap in Perl</h3>

<p>Computing the maximum gap with a traditional <code>for</code> loop:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @input = (2, 9, 3, 5);
my @sorted = sort { $a &lt;=&gt; $b} @input;
my $max = 0;
for my $i (1..$#sorted) {
    $max = $sorted[$i] - $sorted[$i-1] if $sorted[$i] - $sorted[$i-1] &gt; $max;
}
say "Max gap: $max";
</code></pre>

<p>Output:</p>

<pre><code>$ perl max-gap.pl
Max gap: 4
</code></pre>

<p>Just as before, we can also choose a functional programming approach and build a data pipeline:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @input = (2, 9, 3, 5);
my @sorted = sort { $a &lt;=&gt; $b} @input;
my $max = @input &lt;= 1 ? 0 : 
    (sort { $b &lt;=&gt; $a} map { $sorted[$_] - $sorted[$_-1] } 1..$#sorted)[0];
say "Max gap = $max";
</code></pre>

<h3>Maximum Gap in Scala</h3>

<p>Here, again, we use a functional programming approach:</p>

<pre><code>object root extends App {
  val tests = Seq(2, 9, 3, 5)
  val sorted = tests.sorted
  val max = if (sorted.size &lt;= 1) 0 else
    (1 to sorted.length - 1).map(i =&gt; sorted(i) - sorted(i - 1)).max
  println("Max gap is: " + max)
}
</code></pre>

<p>Output:</p>

<pre><code>Max gap is: 4
</code></pre>

<h3>Maximum Gap in Python</h3>

<p>Again the functional programming approach:</p>

<pre><code>tests = [2, 9, 3, 5]
sorted = sorted(tests)
max = 0 if len(sorted) &lt;= 1 else (
    max(map(lambda i: sorted[i] - sorted[i-1], 
    range(1, len(sorted) ))))
print("Max gap = ", max)
</code></pre>

<p>Output:</p>

<pre><code>Max gap =  4
</code></pre>

<h3>Maximum Gap in Julia</h3>

<p>Also a functional approach:</p>

<pre><code>tests = [17, 2, 9, 3, 5]
sorted = sort(tests)
gaps = map(i -&gt; sorted[i] - sorted[i - 1], 2:length(sorted))
@printf("Max gap is %i", maximum(gaps))
</code></pre>

<p>Output:</p>

<pre><code>Max gap is 8
</code></pre>

<h3>Maximum Gap in Ruby</h3>

<p>Functional approach, again:</p>

<pre><code>test = [2, 9, 3, 5]
sorted = test.sort
gaps = (1.upto(sorted.length()-1)).map { |i| sorted[i] - sorted[i - 1] }
print "Max gap is: ", gaps.max
</code></pre>

<p>Output:</p>

<pre><code>Max gap is: 4
</code></pre>

<h3>Maximum Gap in Rust</h3>

<p>Again functional programming approach, except that the <code>test</code> vector must be mutable because the Rust <code>sort</code> method sorts data in-place. There may be some other solution, but I didn&#8217;t find it (I don&#8217;t know Rust well enough).</p>

<pre><code>fn main () {
    let mut test = vec![2, 9, 3, 5];
    test.sort();
    let gaps: Vec&lt;i32&gt; = (1..test.len()).map(|i| test[i] - test[i-1]).collect();
    println!("Max gap is: {:?}",  gaps.iter().max());
}
</code></pre>

<p>This also finds 4 as the maximum gap.</p>

<h2>Task 2: Decimal String</h2>

<p><em>You are given numerator and denominator i.e. <code>$N</code> and <code>$D</code>.</em></p>

<p><em>Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.</em></p>

<p><em>Example</em></p>

<pre><code>Input: $N = 1, $D = 3
Output: "0.(3)"

Input: $N = 1, $D = 2
Output: "0.5"

Input: $N = 5, $D = 66
Output: "0.0(75)"
</code></pre>

<h3>Decimal String in Raku</h3>

<p>Raku has a built-in method, <a href="https://docs.raku.org/routine/base-repeating">base-repeating</a>, provided by role <code>Rational</code>, that just do that:</p>

<pre><code>use v6;

sub MAIN( Int $num, Int $den where $den != 0  ) {
    my ($non-rep, $repeating) = ($num / $den).base-repeating;
    my $suffix = $repeating ?? "($repeating)" !! "";
    printf '%s%s', $non-rep, $suffix;
}
</code></pre>

<p>These are some example outputs for various input values:</p>

<pre><code>$ raku decimal-str.raku 100 25
4

$ raku decimal-str.raku 10 3
3.(3)

$ raku decimal-str.raku 4 625
0.0064

$ raku decimal-str.raku 5 66
0.0(75)
</code></pre>

<h3>Decimal String in Perl</h3>

<p>This turned out to be much more complicated, since we don&#8217;t have any built-in subroutine for that. </p>

<p>My initial idea was to let Perl just perform the division and to look for repeated digit groups (with regular expression or some other means) in the result. But that turned out to be impractical and also wrong for some input values, since Perl only computes only about 15 decimal digits. It might be feasible with a big integer module, but I did not try and decided to go for another method (explained below). I kept, however, the part of the program which counts the initial number of zeros at the beginning (when the denominator is larger than the numerator).</p>

<p>So I decided to compute decimal digits by hand one by one and check at each step whether the remainder of the division has already been seen before. Whenever this happens, we know that the digits found since the last time we&#8217;ve found the same remainder form a repeated grouping of digits and we can stop.</p>

<p>While I was working on that, I came across a Python program (see below) just implementing this. So, out of laziness, I more or less ported to Perl this Python program.</p>

<p>The following program does what is required (provided the input values are positive):</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub compute_dec_str {
    my ($num, $den) = @_;
    die "Please provide positive numbers" if $num &lt; 0 or $den &lt;= 0;
    my $c = 10 * ($num % $den);
    my $quotient = $num/$den;
    # get the quotient leading 0s if any
    $quotient =~ s/(^\d+\.?0*)\d*/$1/;
    $c *= 10 for split " ",  ($quotient =~ /\.(0+)/);
    my (@digits, %passed);
    my $i = 0;
    while (1) {
        if (exists $passed{$c}) {
            my @repeated = @digits[$passed{$c}..$#digits];
            my $result = $quotient . join("", @digits[0..$passed{$c} - 1]);
            if ( @repeated &gt; 1 or $repeated[0] != 0) {
                $result .= "(" . join("", @repeated) . ")";
            }
            $result =~ s/\.$//; # remove trailing dot if any
            return $result;
        }
        push @digits, int($c / $den);
        $passed{$c} = $i;
        $i++;
        $c = 10 * ($c % $den);
    }
}
my $result = compute_dec_str @ARGV;
say $result;
</code></pre>

<p>Output:</p>

<pre><code>$ perl decimal_string.pl 1 33
0.0(30)

$ perl decimal_string.pl 4 625
0.00064

$ perl decimal_string.pl 5 66
0.0(75)
</code></pre>

<h3>Decimal String in Python</h3>

<p>This is the Python program on which I loosely based my Perl solution. It can be found <a href="http://codepad.org/hKboFPd2">there</a>. Please note that this program isn&#8217;t from me, but I don&#8217;t know who the author is.</p>

<pre><code>def divide(m, n):
    quotient, c = str(m // n) + ".", 10 * (m % n)
    while c and c &lt; n:
        c *= 10
        quotient += "0"
    digits = ""
    passed = {}
    i = 0
    while True:
        if c in passed:
            prefix = digits[:passed[c]]
            cycle = digits[passed[c]:]
            result = quotient + prefix + "(" + cycle + ")"
            return result.replace("(0)", "").rstrip(".")
        q, r = c // n, c % n
        passed[c] = i
        digits += str(q)
        i += 1
        c = 10 * r
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 11, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub max_difference_sorted{
    my(@sorted) = @_;
    return 0 if(@sorted == 1);
    my $x = $sorted[1] - $sorted[0];  
    my $y = max_difference_sorted(@sorted[1 .. @sorted - 1]);   
    return ($x &gt; $y)? $x: $y; 
}

sub max_difference{
    my (@numbers) = @_;
    return max_difference_sorted(
        sort { $a &lt;=&gt; $b } @numbers
    ); 
}

MAIN:{
    my (@N);
    @N = (2, 9, 3, 5);
    print max_difference(@N) . "\n"; 
    @N = (1, 3, 8, 2, 0); 
    print max_difference(@N) . "\n"; 
    @N = (5);
    print max_difference(@N) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
5
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I believe this code is straightforward enough! &lt;code&gt;max_difference&lt;/code&gt; performs the sort and &lt;code&gt;max_difference_sorted&lt;/code&gt; recursively finds the largest difference as required.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given numerator and denominator i.e. $N and $D. Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub nd2decimal{
    my($n, $d) = @_;
    my $max_repetend = $d - 1; 
    my $repeats = false; 
    my @factors = prime_factor($d);
    for my $factor (@factors){
        $repeats = true if($factor != 2 &amp;&amp; $factor != 5); 
    } 
    unless($repeats){ 
        return sprintf("%0.${max_repetend}g", $n / $d); 
    }
    else{
        my $x = divide($n, $d, [], []); 
        return $x; 
    }  
}

MAIN:{
    my($N, $D);
    ($N, $D) = (1, 3);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 2);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (5, 66);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 6);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 8);
    print nd2decimal($N, $D) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0.(3)
0.5
0.0(75)
0.1(6)
0.125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 2 is a bit trickier than the first part. The approach here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if it is a repeated decimal by checking if &lt;code&gt;$d&lt;/code&gt; has prime factors other than 2 or 5&lt;/li&gt;
&lt;li&gt;if it is not a repeated decimal then this is quick work, divide and display the solution&lt;/li&gt;
&lt;li&gt;in the case of repeated decimals we essentially implement grade school long division in the &lt;code&gt;divide&lt;/code&gt; function and keep track of remainders. When a remainder is repeated we know that we have found the cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some interesting theoretical properties to repeat decimals but none are particularly helpful in actually computing them. One observation is that the length of the cycle must be smaller than the value of the denominator, whence the use of &lt;code&gt;$d&lt;/code&gt; in the main loop in the &lt;code&gt;divide&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I’m re-using the same &lt;code&gt;prime_factors&lt;/code&gt; function that I used in &lt;a href="https://adamcrussell.livejournal.com/14043.html"&gt;Challenge 041&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Challenge 106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/RepeatingDecimal.html"&gt;Repeating Decimal&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc106</id>
    <published>2021-04-04T17:04:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 106</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-106-1cn7" type="text/html"/>
    <content type="html">&lt;p&gt;I'm back after a few weeks away on holiday. Hope you haven't missed me :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Tasks&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-106/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-maximum-gap" class="anchor"&gt;
  &lt;/a&gt;
  TASK #1 › Maximum Gap
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given an array of integers &lt;code&gt;@N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/p&gt;

&lt;p&gt;If the array contains only 1 element then display &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;This is relatively straight forward. After checking that all inputs are integers, I sort the array numerically. Then I use a foreach loop to find the maximum difference between each number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-liner" class="anchor"&gt;
  &lt;/a&gt;
  One liner
&lt;/h2&gt;

&lt;p&gt;or as a one liner&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» perl -E 'use List::Util "max"; my @a = sort { $a &amp;lt;=&amp;gt; $b } @ARGV; say max(0, map { $a[$_] - $a[$_-1] } (1 .. $#a) )' 1 3 8 2 0
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl 2 9 3 5
4

» ./ch-1.pl 1 3 8 2 0
5

» ./ch-1.pl 5
0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-decimal-string" class="anchor"&gt;
  &lt;/a&gt;
  TASK #2 › Decimal String
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given numerator and denominator i.e. $N and $D.&lt;/p&gt;

&lt;p&gt;Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;As I mentioned in a previous blog post, the last time I did serious algebra was in college about 25 years ago. These days there is a Wikipedia link on &lt;a href="https://en.wikipedia.org/wiki/Repeating_decimal"&gt;repeating decimals&lt;/a&gt; to help me.&lt;/p&gt;

&lt;p&gt;For this task, I'm following the principle of doing long division to get to a point where we've already found a remainder. This indicates that we've found where a repetition pattern starts, and can add the parenthesis in the correct place. The Wikipedia page has an example of this, so I won't repeat it here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl 1 3
0.(3)

» ./ch-2.pl 1 2
0.5

» ./ch-2.pl 5 66
0.0(75)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-106-1cn7</id>
    <published>2021-04-04T11:45:56Z</published>
    <updated>2021-04-04T11:45:56Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="weeklychallenge"/>
  </entry>
  <entry>
  <title>Generate Calendar in ICal format</title>
  <summary type="html"><![CDATA[<p>
You can serve calendars in ICal format from your web application on-the fly or you can save it to the disk as an *.ical file and serve the static file.
Then people can add it to their calendar application and see the events you list.
<p>
]]></summary>
  <updated>2021-04-04T07:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/generate-calendar-in-ical-format"/>  <id>https://perlmaven.com/generate-calendar-in-ical-format</id>
  <content type="html"><![CDATA[<p>
You can serve calendars in ICal format from your web application on-the fly or you can save it to the disk as an *.ical file and serve the static file.
Then people can add it to their calendar application and see the events you list.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Two Dist::Zilla questions (META.yml; user config)</title>
    <link href="http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html"/>
    <id>http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html</id>
    <updated>2021-04-03T20:22:49+00:00</updated>
    <category term="perl"/>
    <summary>During the great RT will be shutdown craze earlier this year, I updated my Dist::Zilla setup to use a custom author bundle (Dist::Zilla::PluginBundle::Author::DOMM) so I can unify my Dist::Zilla ...</summary>
    <content type="html">&lt;p&gt;During the great &lt;strong&gt;RT will be shutdown&lt;/strong&gt; craze earlier this year, I updated my &lt;a href="http://dzil.org/"&gt;Dist::Zilla&lt;/a&gt; setup to use a custom author bundle (&lt;a href="https://metacpan.org/pod/Dist::Zilla::PluginBundle::Author::DOMM"&gt;Dist::Zilla::PluginBundle::Author::DOMM&lt;/a&gt;) so I can unify my Dist::Zilla config in one place (instead of copying &lt;code&gt;dist.ini&lt;/code&gt; from project to project, adding &amp;amp; modifying it from time to time, but never backporting improvements to older projects).&lt;/p&gt;

&lt;p&gt;Two of my decisions might have been not too smart (as indicated by &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/7"&gt;various&lt;/a&gt; &lt;a href="https://github.com/domm/Web-Request-Role-JWT/pull/1"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/10"&gt;requests&lt;/a&gt;), so I'm now looking for feedback...&lt;/p&gt;

&lt;h4&gt;&lt;span class="caps"&gt;META.&lt;/span&gt;yml vs &lt;span class="caps"&gt;META.&lt;/span&gt;json?&lt;/h4&gt;

&lt;p&gt;I stopped generating &lt;code&gt;META.yml&lt;/code&gt; files and now only generate &lt;code&gt;META.json&lt;/code&gt;. As far as I can tell, the contents of those two files is identical, so I think it should be enought to include the data once per dist (and I prefer &lt;span class="caps"&gt;JSON &lt;/span&gt;to &lt;span class="caps"&gt;YAML...&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Of course, &lt;span class="caps"&gt;CPANTS &lt;/span&gt;now &lt;a href="https://cpants.cpanauthors.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.009"&gt;complains&lt;/a&gt; about the missing &lt;code&gt;META.yml&lt;/code&gt;. (Which is of course ironic, because it was me who first implemented this &lt;span class="caps"&gt;CPANTS &lt;/span&gt;metric...)&lt;/p&gt;

&lt;p&gt;Maybe some other (old?) tools still need &lt;code&gt;META.yml&lt;/code&gt;? So should I again produce both &lt;code&gt;META.yml&lt;/code&gt; and &lt;code&gt;META.json&lt;/code&gt;?&lt;/p&gt;

&lt;h4&gt;Dist::Zilla user config?&lt;/h4&gt;

&lt;p&gt;During my deep dive into Dist::Zilla plungins and author bundles, I learned that Dist::Zilla looks for per-user configuration in &lt;code&gt;~/.dzil/config.ini&lt;/code&gt;. So I moved some general information (my name &amp;amp; email, default license) from all my &lt;code&gt;dist.ini&lt;/code&gt; files into this central config file.&lt;/p&gt;

&lt;p&gt;But it seems that this makes contributing to my dists even harder, as the &lt;code&gt;dist.ini&lt;/code&gt; file included in the dist now is invalid. Contributors will get a (helpful) error message when running &lt;code&gt;dzil build&lt;/code&gt;, but this is yet another hurdle for potential contributors. I've already got two pull requests to "fix" this.&lt;/p&gt;

&lt;p&gt;On the one hand I would prefer to keep the global config file, so I can easily change data. On the other hand I could just as well run a small command to change whatever value I might want to change on multiple files (using this hot new tool called "Perl", which makes mangling text in multiple files very easy) and thus make contributions easier.&lt;/p&gt;

&lt;p&gt;How are other &lt;span class="caps"&gt;CPAN &lt;/span&gt;authors handling this?&lt;/p&gt;

&lt;h4&gt;Or is it all Dist::Zilla's fault?&lt;/h4&gt;

&lt;p&gt;Some people (like brian d foy in this &lt;a href="https://www.reddit.com/r/perl/comments/mgw033/distar_a_cpan_distribution_author_tool/"&gt;thread&lt;/a&gt; about &lt;a href="https://github.com/p5sagit/Distar"&gt;Distar&lt;/a&gt;, a simpler authoring tool (but it works with ExtUtils::MakeMaker, which is a module I don't want to touch..)) argue that Dist::Zilla is too complex and make contributing very hard (because potential contributors now need to install a lot of Dist::Zilla plugins).&lt;/p&gt;

&lt;p&gt;But I actually like Dist::Zilla a lot (esp after finally coming up with a PluginBundle that fits my workflow). So I will keep using Dist::Zilla, but would really appreciate any feedback on my two questions (&lt;code&gt;META.yml&lt;/code&gt; and user config).&lt;/p&gt;

&lt;p&gt;You can either enter a comment below (if my homegrown comments system works..), or via &lt;a href="https://www.reddit.com/r/perl/comments/mjeej7/two_distzilla_questions_metayml_user_config/"&gt;reddit&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update: user config vs github&lt;/h4&gt;

&lt;p&gt;After applying &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/12"&gt;another patch&lt;/a&gt; supplied by &lt;a href="https://github.com/paultcochrane"&gt;Paul Cochrane&lt;/a&gt; that adds some github testing hooks, it seems to be clear that depending on the user config is a bad idea. Surprisingly, github will &lt;span class="caps"&gt;NOT &lt;/span&gt;set up a &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; so it can "contribute" to my dist (by running it's test suite), see eg &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/runs/2260939037?check_suite_focus=true"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I guess I will stop using the global config file...&lt;/p&gt;</content>
    <category term="CPAN"/>
    <category term="Dist::Zilla"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3613177878497701470</id>
    <published>2021-04-03T15:29:00.000+02:00</published>
    <updated>2021-04-03T15:29:08.708+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxv) 12 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.071' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.071&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.070 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.08&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.07 was 7 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005004&lt;/strong&gt; on 2021-03-29&lt;/li&gt;  &lt;li&gt;Votes: 281&lt;/li&gt;  &lt;li&gt;Previous version: 2.005003 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2015&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 316&lt;/li&gt;  &lt;li&gt;Previous version: 2.2014 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.30&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.29 was 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.034&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.032 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20210402' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20210402&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20210111 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.56&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 151&lt;/li&gt;  &lt;li&gt;Previous version: 1.55 was 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0936' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0936&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0933 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.2.0&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.1.0 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JDB/Win32-OLE-0.1713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Win32::OLE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OLE Automation extensions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1713&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.1712 was 6 years, 10 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.66&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3613177878497701470/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html" title="(cccxxxv) 12 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5658972421208024952</id>
    <published>2021-04-03T15:27:00.001+02:00</published>
    <updated>2021-04-03T15:27:12.018+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxi) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 65&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/03 13:26:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::mokupona" target="_blank"&gt;App::mokupona&lt;/a&gt; - a feed aggregator for Gopher, Gemini, RSS and Atom&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Combine::Keys" target="_blank"&gt;Combine::Keys&lt;/a&gt; - keys on multiple hash references&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::NFSLock" target="_blank"&gt;File::NFSLock&lt;/a&gt; - perl module to do NFS (or not) locking&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::Checkers" target="_blank"&gt;Games::Checkers&lt;/a&gt; - Play the Checkers games&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::JPEG::Size" target="_blank"&gt;Image::JPEG::Size&lt;/a&gt; - find the size of JPEG images&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; - Validate data against a schema, minimally&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Language::FormulaEngine" target="_blank"&gt;Language::FormulaEngine&lt;/a&gt; - Evaluator for spreadsheet-style function expressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Private::Attribute" target="_blank"&gt;MooX::Private::Attribute&lt;/a&gt; - private attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; - add defer block syntax to perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Sparkline" target="_blank"&gt;Text::Sparkline&lt;/a&gt; - Creates text-based sparklines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Request::Role::JWT" target="_blank"&gt;Web::Request::Role::JWT&lt;/a&gt; - Accessors for JSON Web Token (JWT) stored in psgix&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Android::Build" target="_blank"&gt;Android::Build&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::TimeTracker" target="_blank"&gt;App::TimeTracker&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=146)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Augeas" target="_blank"&gt;Config::Augeas&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Plugin::Sysdeps" target="_blank"&gt;CPAN::Plugin::Sysdeps&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::ECDSA" target="_blank"&gt;Crypt::OpenSSL::ECDSA&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=275)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::regenerate" target="_blank"&gt;Dist::Zilla::App::Command::regenerate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Finance::Quote" target="_blank"&gt;Finance::Quote&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::FormBuilder" target="_blank"&gt;HTML::FormBuilder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer" target="_blank"&gt;Importer&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lucy" target="_blank"&gt;Lucy&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Random::Secure" target="_blank"&gt;Math::Random::Secure&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Release" target="_blank"&gt;Module::Release&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=449)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=281)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Singleton" target="_blank"&gt;MooseX::Singleton&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=373)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Protocol::DBus" target="_blank"&gt;Protocol::DBus&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Grammars" target="_blank"&gt;Regexp::Grammars&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Tools" target="_blank"&gt;Search::Tools&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Beautify" target="_blank"&gt;SQL::Beautify&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Diff" target="_blank"&gt;String::Diff&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Binmode" target="_blank"&gt;Sys::Binmode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Telugu::TGC" target="_blank"&gt;Telugu::TGC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Table" target="_blank"&gt;Term::Table&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Termbox" target="_blank"&gt;Termbox&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TermReadKey" target="_blank"&gt;TermReadKey&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Local" target="_blank"&gt;Time::Local&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/urpmi" target="_blank"&gt;urpmi&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ZMQ::LibZMQ3" target="_blank"&gt;ZMQ::LibZMQ3&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5658972421208024952/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html" title="(cdlxi) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7484983515154526976</id>
    <published>2021-04-03T15:16:00.002+02:00</published>
    <updated>2021-04-03T15:16:30.114+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-04-03 13:15:37 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66852044" target="_blank"&gt;how to pass command line arguments to perl script file in one-line&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66834101" target="_blank"&gt;How to make a non-interpolate string interpolate in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66889565" target="_blank"&gt;Can I make a variable optional in a perl sub prototype?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66831985" target="_blank"&gt;How to create and to throw exceptions in Perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66858247" target="_blank"&gt;How can I dynamically load Perl modules and use their functions?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66893459" target="_blank"&gt;Dynamic variable names and hash keys&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66837884" target="_blank"&gt;Perl code to delete a multi line XML node&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66840242" target="_blank"&gt;Search in an array of hashes by the hash key and its sorting in Perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66854044" target="_blank"&gt;Why is Perl giving "Can't modify string in scalar output" error?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66874841" target="_blank"&gt;How to add zeros into my file using Perl to make lines the same length?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7484983515154526976/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7484983515154526976"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7484983515154526976"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html" title="(cdlxxxiv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>TPRCIC 2021 - Call for papers</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic2021callforpapers"/>
  <id>tag:news.perlfoundation.org,2021-04-03:/post/tprcic2021callforpapers</id>
  <published>2021-04-03T03:15:07</published>
  <updated>2021-04-03T03:15:07</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference in the Cloud 2021 celebrates all things Perl and Raku from 8-10 June with group meetings on the Monday and Friday each side of the main event. We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the Cloud 2021</a> celebrates all things Perl and Raku from 8-10 June with group meetings (BOFs) on the Monday and Friday each side of the main event.</p>

<p>We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of general interest to Perl and Raku programmers. Take a look at the talk schedules from <a href="https://perlconference.us/tprc-2021-cloud/past-conferences/">previous years</a> to help with additional ideas.</p>

<p>The call for papers is open NOW. You can submit your ideas for a talk to http://perlconference.us/speakers. Deadline for submissions is 18:00 UTC April 30, 2021.</p>

<p>We will be accepting proposals for the following session types:</p>

<ul>
<li>Standard Talks (50 minutes)</li>
<li>Short Talks (20 minutes)</li>
<li>Lightning Talks (5 minutes)</li>
</ul>

<p>Follow the conference on <a href="https://twitter.com/PerlConferences">Twitter</a> and <a href="https://www.facebook.com/theperlconference/">FaceBook</a>, or <a href="https://perlconference.us/tprc-2021-cloud/keep-in-touch/">join our mailing list</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Kent Fredric's CPAN distributions are available for adoption</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html"/>
    <id>tag:blogs.perl.org,2021:/users/neilb//846.10162</id>
    <published>2021-04-01T04:32:00Z</published>
    <updated>2021-04-02T21:43:09Z</updated>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>As most of you are probably aware,
Kent Fredric sadly passed away earlier this year:
<a href="https://www.facebook.com/kent.fredric/posts/10158837806906830">notice from his family, on Facebook</a>.</p>

<p>Kent was a prolific contributor to CPAN and Perl.
He released more than 150 distributions of his own to CPAN,
but also helped countless other authors and distributions,
with bug reports, puil requests, and more.</p>

<p>When a CPAN author dies,
their indexing permissions are dropped from PAUSE,
and where they had the first-come permission,
that will be passed to the pseudo-user ADOPTME.
This flags the distribution as being available for adoption.</p>

<p>So as of now, all of Kent's distributions are available for adoption.</p>
]]>
        <![CDATA[<p>If you look at <a href="https://metacpan.org/author/KENTNL">Kent's author page</a> on MetaCPAN, you'll see 178 distributions (at the time of writing). This means that he was the last person to release those distributions, but in a few cases he didn't have the first-come permission.</p>

<p>When you look at his author page on MetaCPAN, notice the leftmost column, with the blue bars. The bars are an indication of the distribution's position on the <a href="https://neilb.org/2015/04/20/river-of-cpan.html">CPAN River</a> &mdash; a measure of how many other CPAN distributions use that distribution. The more bars, the more dependent distributions. If you hover your mouse pointer over the bars, you'll see the number of dependents.</p>

<p>As you can see, many of Kent's distributions are relied on by other CPAN distributions, and in some cases by thousands. As a result, the PAUSE admins will consider adoption requests carefully, and try to ensure that such distributions are passed into safe hands.</p>

<h2>How does adoption work?</h2>

<p>When you release a new module, PAUSE assigns you the <strong>first-come</strong> indexing permission for the module. This means that your releases of the module will be considered for inclusion in the CPAN Index, and also that you can give other people the <strong>co-maint</strong> indexing permission. People with co-maint can do releases, but they can't grant co-maint to others. For more on indexing permissions, see the <a href="https://github.com/andk/pause/blob/master/doc/operating-model.md#3-indexing-permissions">relevant section</a> in the <a href="https://github.com/andk/pause/blob/master/doc/operating-model.md">PAUSE Operating Model</a>.</p>

<p>If you want to contribute to someone else's distribution, and do releases of it, then the usual model is that you talk to the person who has the first-come indexing permission, and they'll give you co-maint. You haven't adopted the distribution, you became a contributor.</p>

<p>Adoption of a distribution is the process of being given the first-come indexing permission on all modules in the distribution. Most of the time it is the current maintainer (the person with first-come) who transfers the indexing permissions, but in special circumstances, the PAUSE admins can do this.</p>

<h2>If you want to adopt one of Kent's distributions</h2>

<p>If you want to adopt a distribution, please email the PAUSE admins (modules at perl dor org), and make your case.</p>

<p>If it's a distribution that doesn't have any dependents, then you just need to explain your interest, and demonstrate that you have experience as a CPAN author.</p>

<p>The further up the CPAN River the distribution is, though, the stronger your case will need to be: you should have experience maintaining similar modules, both in terms of dependencies, and the type of module. If your existing distributions are tier 0 or tier 1 (either no blue bars or 1), then you'd have to make a strong case for anything above tier 3.</p>

<p>Here are the sorts of things we'd expect from a tier 3+ author:</p>

<ul>
<li>A good test suite, with attention paid to coverage.</li>
<li>Pays attention to CPAN Testers, and has a suitably green <a href="http://matrix.cpantesters.org/?dist=MIME-Base64">matrix</a>.</li>
<li>Does developer releases to check relevant changes across versions of Perl and different operating systems.</li>
<li>Pays attention to the dependency graph of their distributions (not only the modules that you use directly, but the modules that they use, and so on).</li>
<li>Adheres to CPAN conventions for a well-formed release.</li>
<li>Considers the minimum version of Perl that the distribution should support, and doesn't radically change this overnight.</li>
<li>Pays attention to copyright and licensing.</li>
<li>Thorough documentation, with a SEE ALSO referencing other relevant modules.</li>
<li>Is respectful of contributors, users, competing modules and their authors, and the general Perl community.</li>
</ul>

<p>A more thorough discussion of this topic can be found in Tux's <a href="https://github.com/Tux/Release-Checklist/blob/master/Checklist.md">release checklist</a>.</p>

<p>This is not meant to discourage you from adopting a distribution, rather to encourage you to step up, but not to overreach. If the prospect of adopting a distribution terrifies you with the prospect of breaking half of CPAN, it's probably not the right one for you. At least for now.</p>

<p>If you have used one or more of Kent's distributions,
maybe you could consider adopting one of them,
to keep it maintained going forward.
It's a great way to give back to the Perl community.</p>

<p>If you don't already have a PAUSE account,
maybe this is a good time to <a href="https://pause.perl.org/pause/query?ACTION=request_id">sign up for one</a>?</p>
]]>
    </content>
</entry>
  <entry>
  <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 5 - with Erik Hülsmann</title>
  <summary type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
This time it will be together with <a href="https://www.linkedin.com/in/erikhuelsmann/">Erik Hülsmann</a> the maintainer of the module.
<p>
]]></summary>
  <updated>2021-04-02T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/exploring-bdd-in-perl-5"/>  <id>https://perlmaven.com/exploring-bdd-in-perl-5</id>
  <content type="html"><![CDATA[<p>
BDD - <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven Development</a>
using <a href="https://metacpan.org/pod/Test::BDD::Cucumber">Test::BDD::Cucumber</a>
<p>
This time it will be together with <a href="https://www.linkedin.com/in/erikhuelsmann/">Erik Hülsmann</a> the maintainer of the module.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Monthly Report - March</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10168</id>
    <published>2021-04-02T05:58:20Z</published>
    <updated>2021-04-02T06:28:44Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-03.jpg"/></p>

<p><strong>Celebration time ...</strong></p>

<p>The month of <strong>March</strong> is very special to me. It was in this month 2 years ago, I started my dream project <a href="https://perlweeklychallenge.org/">The Weekly Challenge (a.k.a. Perl Weekly Challenge)</a>.</p>

<p>For <strong>Team PWC</strong>, it was back to back celebrations. We celebrated <strong>100th</strong> week challenge in <strong>February</strong> first followed by completion of <strong>2 years</strong> in <strong>March</strong>. In fact for the second year anniversary, I had planned something bigger but unfortunately it didn't work out for some reason. Having said that, for me the biggest achievement is that we now have a platform where everyone is welcome. It doesn't matter whether you like <strong>Perl</strong> or <strong>Raku</strong> or for that matter any other programming language. And the best part of it, the same person who happens to be an expert in <strong>Perl</strong>, goes on and do it <strong>20+ different languages</strong> as well. Then there is this guy who is very famous for his <strong>Raku</strong> skill, suddenly decided to share solutions in <strong>Perl</strong> as well. How cool it is? This is something you wouldn't have imagine 2 years ago.</p>

<p>Let me share my own story, few years ago at the <strong>London Perl Workshop</strong> event, I was gifted a book on <strong>Raku</strong> for my contributions to <strong>CPAN</strong>. For the next one year, I didn't get chance to read even a single page. Then came the weekly challenge where I got the opportunity to see the work of many <strong>Raku</strong> experts. I was inspired by each one of them and decided to get my hand dirty too. As of today, I contributed <strong>73 Perl</strong> solutions and <strong>67 Raku</strong> solutions. Not a bad stats for a first timer.</p>

<p>Generally <strong>Perl</strong> and <strong>Raku</strong> are the two most popular languages the weekly challenge rely on but that doesn't stop members trying different languages every week. As of today, we have received solutions in <strong>60+ different languages</strong> other than <strong>Perl</strong> and <strong>Raku</strong>. Any guess who tops the list? Well, it is none other than <strong>Python</strong>. I have recently started learning <strong>Python</strong>. Soon I would be contributing in <strong>Python</strong> too. Since the tag line of the weekly challenge is <em><strong>"You don't have to be an expert"</strong></em>, as soon as I feel little comfortable I am going to jump straight away. There is no harm, since nobody is going to judge me here and one day I can be as good as I am in <strong>Perl</strong> today.</p>

<p>It is no longer secret any more, most of my spare time is devoted to the weekly challenge management. It is a tough job and at times, I feel really tired. In the recent weeks, I purposely stayed away for few days without doing any work on the weekly challenge. In the end, I felt bad for not doing anything. I then clear the entire backlog in one sitting. I play with my emotions at times and it is fun. When I am not doing anything serious, I spend time looking at the various <a href="https://perlweeklychallenge.org/chart">charts</a>. It tells me so many interesting stories every time I look at it. For example, if you look at the Leaders board, there is a story behind every names.</p>

<p><strong>Do you think the weekly challenge is the only thing that keeps me busy all the time?</strong></p>

<p>The short answer is <strong>No</strong>. I also take part in the monthly event <strong>"Pull Request Club"</strong>. Submitting <strong>Pull Request</strong> was my hobby before the weekly challenge took over and left no time for anything else. Thanks to the monthly nature of the event, I have successfully managed it till date since the beginning without missing a single month. And when I receive the response like below, do you think I am going to stop any time sooner?</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/prc-comment.png"/></p>

<p>There is another surprise celebration that I am desperate to share with you all but I can't go public unless all the paper work done. I hope to get it done by end of next week. Unfortunately you all have to wait for the next monthly report that is when I will share the surprise with you all.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>3 Pull Requests</strong> submitted in the month of <strong>March 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-03.png"/></p>

<p><strong>2354 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-03.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>672 commits</strong> recorded in the month of <strong>March 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-03.png"/></p>

<p>Overall <strong>2447 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-03.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>February 2021</strong>:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-102">Challenge #102</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103">Challenge #103</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-104">Challenge #104</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105">Challenge #105</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106">Challenge #106</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-101">RECAP Challenge #101</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-102">RECAP Challenge #102</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-103">RECAP Challenge #103</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-104">RECAP Challenge #104</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-105">RECAP Challenge #105</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, although I was supposed to do one to mark the completion of second year of the weekly challenge. I will do it in the coming weeks though.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2021-02">James Smith</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/OData::QueryParams::DBIC">OData::QueryParams::DBIC</a> by <strong>Renee Baecker</strong>. I submitted <a href="https://github.com/reneeb/OData-QueryParams-DBIC/pull/3">one</a> Pull Request and it has been already accepted and merged by <strong>Renee Baecker</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-03.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-03.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/03/monthly-report---february-2.html">Monthly Report - February</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/502.html">Issue #502</a> and <a href="http://perlweekly.com/archive/504.html">Issue #504</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>March 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-03.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CONTRA/Acme-Automatix-0.01"&gt;Acme-Automatix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;The great new Acme::Automatix!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Frameworks-0.001"&gt;Acme-CPANModules-Frameworks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;List of frameworks on CPAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legodcsupervillains-0.02"&gt;Acme-MetaSyntactic-legodcsupervillains&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO DC Super Villains theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legotheincredibles-0.02"&gt;Acme-MetaSyntactic-legotheincredibles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO The Incredibles theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.16"&gt;Alien-uPB-Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.16&lt;/td&gt;
&lt;td&gt;build and find uPB (a.k.a. Unleaded)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-PerlNitpick-0.01"&gt;App-PerlNitpick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;change-suggester about insignificant details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-ThisDist-OnMetaCPAN-0.001"&gt;App-ThisDist-OnMetaCPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;this-dist-on-metacpan and some other CLIs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-dateseq-id-0.001"&gt;App-dateseq-id&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Generate a sequence of dates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WOLDRICH/App-knradio-0.044"&gt;App-knradio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.044&lt;/td&gt;
&lt;td&gt;interface for knradio, 92,2 FM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-depsort-0.001"&gt;App-lcpan-CmdBundle-depsort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;More lcpan subcommands related to sorting by dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Asm-C-20210328"&gt;Asm-C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210328&lt;/td&gt;
&lt;td&gt;Extract macro values and structure details from C programs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Boundary-0.01"&gt;Boundary&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare interface package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Complete-Finance-SE-IDX-0.001"&gt;Complete-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.001"&gt;Crypt-Passphrase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A module for managing passwords in a cryptographically agile manner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Argon2-0.001"&gt;Crypt-Passphrase-Argon2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;An Argon2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Bcrypt-0.001"&gt;Crypt-Passphrase-Bcrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A bcrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-PBKDF2-0.001"&gt;Crypt-Passphrase-PBKDF2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A PBKDF2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Scrypt-0.001"&gt;Crypt-Passphrase-Scrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A scrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Crypt-xxHash-0.01"&gt;Crypt-xxHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;xxHash implementation for Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Decl-Tok-0.01"&gt;Decl-Tok&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Given a line iterator, returns a token stream that tokenizes the lines as first-pass Decl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUCCHISK/Devel-PatchPerl-Plugin-Darwin-v0.1.0"&gt;Devel-PatchPerl-Plugin-Darwin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;patchperl plugin for darwin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/Devel-Util-0.80"&gt;Devel-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;a collection of general-utility development subroutines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LNATION/Game-HeroesVsAliens-0.01"&gt;Game-HeroesVsAliens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A tower defense game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AJNN/Geo-LibProj-FFI-0.01"&gt;Geo-LibProj-FFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Foreign function interface to PROJ coordinate transformation software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/Go-Tokenize-0.01"&gt;Go-Tokenize&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tokenize Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JBERGER/GuacLite-0.01"&gt;GuacLite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Toolkit for implementing a frontend server/client the Apache Guacamole system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RAJ/INI-Reader-Regexp-0.01"&gt;INI-Reader-Regexp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;INI Parser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-AIO-Promiser-0.01_01"&gt;IO-AIO-Promiser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01_01&lt;/td&gt;
&lt;td&gt;Promise interface around IO::AIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-FDSaver-0.01"&gt;IO-FDSaver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Save file descriptors from Perl&amp;acirc;&amp;#8364;&amp;#8482;s garbage collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JCRISTY/Image-Magick-6.9.12"&gt;Image-Magick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v6.9.12&lt;/td&gt;
&lt;td&gt;ImageMagick PERL Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Iterator-Records-Lines-0.01"&gt;Iterator-Records-Lines&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Provides simple record iterators for reading text line by line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DONGXU/JSON-JQ-0.01"&gt;JSON-JQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;jq (&lt;a href="https://stedolan.github.io/jq/" rel="nofollow"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) library binding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ETHER/JSON-Schema-Tiny-0.001"&gt;JSON-Schema-Tiny&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Validate data against a schema, minimally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOBYINK/LINQ-0.000_001"&gt;LINQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_001&lt;/td&gt;
&lt;td&gt;an interpretation of Microsoft&amp;#039;s Language Integrated Query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Linux-Sys-CPU-Affinity-0.01"&gt;Linux-Sys-CPU-Affinity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl XS extension for setupping CPU affinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/List-GroupingPriorityQueue-0.01"&gt;List-GroupingPriorityQueue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;priority queue with grouping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/List-Helpers-XS-0.01"&gt;List-Helpers-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension to provide some usefull functions with arrays&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TONKIN/Log-Any-Adapter-JSON-1.00"&gt;Log-Any-Adapter-JSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;One-line JSON logging of arbitrary structured data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Lyrics-Fetcher-LyricsOVH-0.01"&gt;Lyrics-Fetcher-LyricsOVH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Get song lyrics from api.lyrics.ovh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/MIME-DB-v1.46.0"&gt;MIME-DB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.46.0&lt;/td&gt;
&lt;td&gt;Media Type Database, a port of the mime-db JavaScript package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ZHMYLOVE/Math-LinearApprox-0.01"&gt;Math-LinearApprox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;fast linear approximation of 2D sequential points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PerlTrove-0.001"&gt;Module-Features-PerlTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Perl trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PythonTrove-0.001"&gt;Module-Features-PythonTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Python trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-FeaturesUtil-Check-0.001"&gt;Module-FeaturesUtil-Check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Check feature set specification and feature declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-0.008"&gt;Mojolicious-Plugin-Export&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;Export a Mojolicious website to static files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-Git-0.001"&gt;Mojolicious-Plugin-Export-Git&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export a Mojolicious site to a Git repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OETIKER/Mojolicious-Plugin-GSSAPI-0.1.0"&gt;Mojolicious-Plugin-GSSAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Provide Kerberos authentication for incomming https requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ABELTJE/MooX-Params-CompiledValidators-0.01"&gt;MooX-Params-CompiledValidators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A Moo::Role for using Params::ValidationCompiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/Music-RhythmSet-0.01"&gt;Music-RhythmSet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;sets of rhythms and various generation functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Nasm-X86-20210330"&gt;Nasm-X86&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210330&lt;/td&gt;
&lt;td&gt;Generate Nasm X86 code from Perl.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Maker-1.00"&gt;OPM-Maker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Module/App to build and test OPM packages for Znuny, OTOBO, ((OTRS)) Community edition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Validate-1.00"&gt;OPM-Validate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Validate .opm files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-EPPTCP-0.001"&gt;POE-Filter-EPPTCP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;EPP Frame parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-SimpleXML-1.000"&gt;POE-Filter-SimpleXML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;Simple XML parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Tar-0.001"&gt;Path-Tiny-Archive-Tar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Tar/untar add-on for file path utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/Paws-Credential-AssumeRoleWebIdentity-0.0.2"&gt;Paws-Credential-AssumeRoleWebIdentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Perinci-Sub-XCompletionBundle-Finance-SE-IDX-0.001"&gt;Perinci-Sub-XCompletionBundle-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to the Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Pinto-Remote-SelfContained-0.900"&gt;Pinto-Remote-SelfContained&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;interact with a remote Pinto repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RRA/Pod-Thread-2.00"&gt;Pod-Thread&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;Convert POD data to the HTML macro language thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-HelpDesk-0.01"&gt;RT-Extension-HelpDesk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-HelpDesk Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-TerminalTheme-0.01"&gt;RT-Extension-TerminalTheme&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-TerminalTheme Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Idrac4-v0.1.0"&gt;Rex-Interface-Shell-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Ilo-v0.1.0"&gt;Rex-Interface-Shell-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Idrac4-v0.1.0"&gt;Rex-Shell-Interface-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Ilo-v0.1.0"&gt;Rex-Shell-Interface-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OVID/Search-Typesense-0.01"&gt;Search-Typesense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl interface to Typesense search engine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/SmallRegistry-EPP-0.001-TRIAL"&gt;SmallRegistry-EPP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;SmallRegistry EPP Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOMK/Spreadsheet-Compare-0.10"&gt;Spreadsheet-Compare&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Module for comparing spreadsheet-like datasets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Sub-WrapInType-Attribute-0.01"&gt;Sub-WrapInType-Attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;attribute for Sub::WrapInType&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Defer-0.04"&gt;Syntax-Keyword-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;add defer block syntax to perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/Sys-Binmode-0.01"&gt;Sys-Binmode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Fix Perl&amp;acirc;&amp;#8364;&amp;#8482;s system call character encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Task-Lyrics-Fetcher-0.01"&gt;Task-Lyrics-Fetcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;install all known-to-work Lyrics::Fetcher fetchers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Test2-Tools-Process-0.05"&gt;Test2-Tools-Process&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Unit tests for code that calls exit, exec, system or qx()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PETDANCE/Text-Sparkline-v0.1.0"&gt;Text-Sparkline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Creates text-based sparklines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Text-Table-Tiny-_ModuleFeatures-0.001"&gt;Text-Table-Tiny-_ModuleFeatures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Features declaration for Text::Table::Tiny&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Text-TokenStream-0.01"&gt;Text-TokenStream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;lexer to break text up into user-defined tokens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/WWW-LinkRot-0.01"&gt;WWW-LinkRot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;check web page link rot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/WordList-ID-AnimalName-PERLANCAR-0.004"&gt;WordList-ID-AnimalName-PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;List of animals in Indonesian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/p5-Paws-Credential-Webidentity-0.0.1"&gt;p5-Paws-Credential-Webidentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;79&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;43&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Automatix CONTRA 0.01 The great new Acme::Automatix! Acme-CPANModules-Frameworks PERLANCAR 0.001 List of frameworks on CPAN Acme-MetaSyntactic-legodcsupervillains BINGOS 0.02 LEGO DC Super Villains theme Acme-MetaSyntactic-legotheincredibles BINGOS 0.02 LEGO The Incredibles theme Alien-uPB-Core MBARBON 0.16 build and find uPB (a.k.a. Unleaded) App-PerlNitpick GUGOD 0.01 change-suggester about insignificant details. App-ThisDist-OnMetaCPAN PERLANCAR 0.001 this-dist-on-metacpan and … <a href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1939</id>
    <published>2021-04-01T11:26:07Z</published>
    <updated>2021-04-01T11:26:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>CPAN utils</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/cpan-utils-4g4p" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h06aFQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e5cry8wptwsu9rjulvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h06aFQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e5cry8wptwsu9rjulvt.png" alt="CPAN utils"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post I will present you some &lt;em&gt;must-have-but-less-known&lt;/em&gt; CPAN utils 👍 💪 😎&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#outdated"&gt;List outdated modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#latest"&gt;List latest changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tree"&gt;Print dependencies tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pragmatic"&gt;List system requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#list-outdated-modules" class="anchor"&gt;
  &lt;/a&gt;
  List outdated modules &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;You can use &lt;a href="https://metacpan.org/pod/distribution/cpan-outdated/script/cpan-outdated"&gt;cpan-outdated&lt;/a&gt; to get the list of your outdated modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cpan-outdated &lt;span class="nt"&gt;-p&lt;/span&gt;
Acme::Automatix
Alien::Plotly::Orca
Alien::SNMP::MAXTC
PPIx::QuoteLike
PPIx::Regexp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Outdated modules you said?&lt;/p&gt;

&lt;p&gt;The discrepancy is totally normal, since modules versions evolve on CPAN but not necessarily locally.&lt;/p&gt;

&lt;p&gt;In my example, the list is very small because I updated all my modules very recently with &lt;code&gt;cpan-outdated -p | cpanm&lt;/code&gt; (I don't really know why I did it but it was cool 😀).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-latest-changes" class="anchor"&gt;
  &lt;/a&gt;
  Get latest changes &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Use &lt;a href="https://metacpan.org/pod/distribution/cpan-listchanges/script/cpan-listchanges"&gt;cpan-listchanges&lt;/a&gt; to get meaningful portions of changelog between the version installed locally versus the latest version on CPAN. Example with one of the outdated from my previous list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cpan-listchanges PPIx::QuoteLike
&lt;span class="o"&gt;===&lt;/span&gt; Changes between 0.015 and 0.016 &lt;span class="k"&gt;for &lt;/span&gt;PPIx-QuoteLike

0.016       2021-03-26  T. R. Wyant
    Add rt.cpan.org back to bug reporting methods. Long live RT!

    Get prerequisites up to snuff, and add xt/author/prereq.t to ensure
    they stay that way.

    Refactor authortest into three, so I &lt;span class="k"&gt;do &lt;/span&gt;not have to generate stub
    files to &lt;span class="nb"&gt;test &lt;/span&gt;without optional modules.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#print-dependencies-tree" class="anchor"&gt;
  &lt;/a&gt;
  Print dependencies tree &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Print the dependency tree with &lt;a href="https://metacpan.org/pod/distribution/CPAN-FindDependencies/bin/cpandeps"&gt;cpandeps&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cpandeps JSON::Conditional
JSON::Conditional &lt;span class="o"&gt;(&lt;/span&gt;dist: L/LN/LNATION/JSON-Conditional-1.00.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
  JSON &lt;span class="o"&gt;(&lt;/span&gt;dist: I/IS/ISHIGAKI/JSON-4.03.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
    Test::More &lt;span class="o"&gt;(&lt;/span&gt;dist: E/EX/EXODIST/Test-Simple-1.302183.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
      File::Temp &lt;span class="o"&gt;(&lt;/span&gt;dist: E/ET/ETHER/File-Temp-0.2311.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
        Carp &lt;span class="o"&gt;(&lt;/span&gt;dist: X/XS/XSAWYERX/Carp-1.50.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
          Exporter &lt;span class="o"&gt;(&lt;/span&gt;dist: T/TO/TODDR/Exporter-5.74.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
          IPC::Open3 &lt;span class="o"&gt;(&lt;/span&gt;dist: S/SH/SHAY/perl-5.32.1.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
        File::Path &lt;span class="o"&gt;(&lt;/span&gt;dist: J/JK/JKEENAN/File-Path-2.18.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
          File::Spec::Functions &lt;span class="o"&gt;(&lt;/span&gt;dist: X/XS/XSAWYERX/PathTools-3.75.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
            Scalar::Util &lt;span class="o"&gt;(&lt;/span&gt;dist: P/PE/PEVANS/Scalar-List-Utils-1.55.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
        parent &lt;span class="o"&gt;(&lt;/span&gt;dist: C/CO/CORION/parent-0.238.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
      Storable &lt;span class="o"&gt;(&lt;/span&gt;dist: X/XS/XSAWYERX/Storable-3.15.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
        XSLoader &lt;span class="o"&gt;(&lt;/span&gt;dist: S/SA/SAPER/XSLoader-0.24.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
  Module::Metadata &lt;span class="o"&gt;(&lt;/span&gt;dist: E/ET/ETHER/Module-Metadata-1.000037.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
    Encode &lt;span class="o"&gt;(&lt;/span&gt;dist: D/DA/DANKOGAI/Encode-3.08.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
    lib &lt;span class="o"&gt;(&lt;/span&gt;dist: S/SM/SMUELLER/lib-0.63.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
    version &lt;span class="o"&gt;(&lt;/span&gt;dist: L/LE/LEONT/version-0.9928.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
      base &lt;span class="o"&gt;(&lt;/span&gt;dist: R/RJ/RJBS/base-2.23.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
  Struct::Conditional &lt;span class="o"&gt;(&lt;/span&gt;dist: L/LN/LNATION/Struct-Conditional-1.00.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
    Clone &lt;span class="o"&gt;(&lt;/span&gt;dist: A/AT/ATOOMIC/Clone-0.45.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
      B::COW &lt;span class="o"&gt;(&lt;/span&gt;dist: A/AT/ATOOMIC/B-COW-0.004.tar.gz&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also see the JSON::Conditional deps (here for perl 5.26.1) on &lt;a href="http://deps.cpantesters.org/?module=JSON%3A%3AConditional&amp;amp;perl=5.26.1&amp;amp;os=any+OS"&gt;deps.cpantester.org&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2CHadeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqak9heagjkozfveo80n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2CHadeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqak9heagjkozfveo80n.png" alt="CPANDeps CPANTesters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or a nice view (configurable) on &lt;a href="https://cpandeps.grinnz.com/?dist=JSON-Conditional&amp;amp;dist_version=&amp;amp;phase=test&amp;amp;recommends=1&amp;amp;suggests=1&amp;amp;perl_version=v5.26.1&amp;amp;style=auto"&gt;cpandeps.grinnz.com&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K54TNPYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxzn1o9d5ve4shu8efd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K54TNPYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxzn1o9d5ve4shu8efd9.png" alt="CPANDeps grinnz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;None of these 2 pages give the exact same result than the command line, I haven't checked why, we could discuss in comments (maybe something with dynamic/static).&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#list-system-requirements" class="anchor"&gt;
  &lt;/a&gt;
  List system requirements &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Several modules require libraries or development kit that CPAN can't satisfy (even if &lt;a href="https://alienfile.org/"&gt;Alien modules&lt;/a&gt; can often fill this gap). Having a CPAN module installation failing because a dependency is missing is "normal". It is like when you compile something, it fails while reporting a missing header because you need to install it before. To help you and automatic tests, &lt;a href="https://metacpan.org/author/SREZIC"&gt;Slaven Rezić&lt;/a&gt; gathered system dependencies for us in the tool &lt;a href="https://metacpan.org/pod/distribution/CPAN-Plugin-Sysdeps/script/cpan-sysdeps"&gt;cpan-sysdeps&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cpan-sysdeps &lt;span class="nt"&gt;--cpanmod&lt;/span&gt; Imager
libfreetype6-dev
libgif-dev
libpng-dev
libjpeg-dev
libtiff5-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was mad when I discovered this module, come on MetaCPAN and hit the "++" button!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27GyCZ1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6zqc5hvsyb70jprzn5z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27GyCZ1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6zqc5hvsyb70jprzn5z.png" alt="++"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If you have more to add to this list, please share! 😄&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/cpan-utils-4g4p</id>
    <published>2021-03-31T07:56:22Z</published>
    <updated>2021-03-31T07:56:22Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Distar - A CPAN Distribution Author Tool</title>
    <link rel="alternate" href="https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h1>
  <a href="#basic-cpan-tooling" class="anchor">
  </a>
  Basic CPAN Tooling
</h1>

<p>When releasing a distribution on <a href="https://www.cpan.org/">CPAN</a>, authors need to include an installer script. Classically, this would be a <code>Makefile.PL</code> using <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> to generate a <code>Makefile</code>, which would then be used with <code>make</code>. Later, <a href="https://metacpan.org/pod/Module::Build">Module::Build</a> was created, using a <code>Build.PL</code> script which served a similar purpose. The installer script would include information about the distribution, such as the name and prerequisites. This script, as well as the information inside it, would be used by a tool like <a href="https://metacpan.org/pod/CPAN">CPAN.pm</a> or <a href="https://metacpan.org/pod/cpanm">cpanm</a> to install the distribution and its prerequisites. This is the primary purpose of the tools, as something users interact with to test and install modules.</p>

<p>But since authors always had the install tool at hand, it became a convenient place to put author tools as well. The primary of these would be <code>make dist</code> which generates a distribution archive suitable for uploading to <a href="https://www.cpan.org/">CPAN</a>. For a long time, this was the primary way authors would create releases.</p>

<p>However, as an author tool, <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> leaves a lot to be desired. It uses a <code>MANIFEST</code> file to list the files to include in the distribution, which won't include new files unless the author remembers to run <code>make manifest</code>. And there are other sanity checks that authors should do before making a release that it doesn't provide for at all. Bumping version numbers, updating change logs, tagging and pushing to a VCS server. Some authors would build these tools into their <code>Makefile.PL</code> script, but that can become a maintenance burden. Other tools, like <a href="https://metacpan.org/pod/Module::Install">Module::Install</a> were created to address some of this, by having a split between the author tools and user code, but it made some other problematic architectural choices.</p>

<h1>
  <a href="#distzilla" class="anchor">
  </a>
  Dist::Zilla
</h1>

<p>These issues led to the creation of tools like <a href="https://metacpan.org/pod/Dist::Zilla">Dist::Zilla</a> which entirely separate the author tooling from the user tooling. It would also take over writing the <code>Makefile.PL</code> script, since writing a proper <code>Makefile.PL</code> is not trivial, and being able to include arbitrary code is usually unneeded. It is based on a plugin system, allowing authors to tailor its behavior to whatever release process they prefer.</p>

<p><a href="https://metacpan.org/pod/Dist::Zilla">Dist::Zilla</a> can be a fantastic tool, but comes with its own problems. There can be unexpected interactions between the multitude of plugins and versions, which can make the results of builds hard to reproduce without significant effort. It can also be difficult to express the desired build process via the plugin system, or to understand how it will behave by reading its configuration. The combination of these plugins often leads to a significant number of prerequisites, increasing the complexity and avenues of failure. It also regularly gets updated to take advantage of new perl features, which prevents it from being used on older perl versions<sup id="fnref1"><a href="#fn1">1</a></sup>. These issues are all trade-offs made to allow it to be very feature full and extremely flexible.</p>

<h1>
  <a href="#distar" class="anchor">
  </a>
  Distar
</h1>

<p>Not all authors agree with the trade-offs made by tools like <a href="https://metacpan.org/pod/Dist::Zilla">Dist::Zilla</a>. <a href="https://metacpan.org/author/MSTROUT">Matt S Trout</a> wanted an author tool, but started from a different perspective. What needs to be added on top of what <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> provides to make it a viable author tool? The result of this thought process was <a href="https://github.com/p5sagit/Distar">Distar</a>.</p>

<p><a href="https://github.com/p5sagit/Distar">Distar</a> is a tool that adds just enough to <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> so you can't bungle a release. And it is small enough to be able to read and understand the entire codebase at the same time.</p>

<p>It uses an allowlist to include files in the dist, rather than <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>'s normal denylist, preventing extraneous files in the working directory from being shipped. It makes certain that the <code>MANIFEST</code> is up to date. It ensures you are testing against the same thing you are releasing. It forces you to add a Changelog entry for your release. It uploads to <a href="https://www.cpan.org/">CPAN</a>, and tags and pushes to git. And it does very little else.</p>

<p>Since its creation, <a href="https://github.com/p5sagit/Distar">Distar</a> has seen very little adoption. The only other <a href="https://www.cpan.org/">CPAN</a> author using it that I'm aware of is me. I've also done most of the development for the last several years, making it more robust, and including a few quality of life improvements like version bumping.</p>

<p><a href="https://github.com/p5sagit/Distar">Distar</a> does not make any changes from files in the repository vs the files shipped in the distribution. It generates a <code>README</code>, a <code>LICENSE</code> file, and the default files created by <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>, <code>META.json</code> and <code>META.yml</code>.</p>

<h1>
  <a href="#how-does-distar-work" class="anchor">
  </a>
  How Does Distar Work?
</h1>

<p>To use <a href="https://github.com/p5sagit/Distar">Distar</a>, you start with a normal <code>Makefile.PL</code>:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use ExtUtils::MakeMaker;
WriteMakefile(NAME =&gt; "My::Cool::Module");
</code></pre>

</div>

<p>Before the call to <code>WriteMakefile</code>, you add:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>(do './maint/Makefile.PL.include' or die $@) unless -f 'META.yml';
</code></pre>

</div>

<p>Since the <code>META.yml</code> file is generated by <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> in the distribution directory it creates, but not the working directory, it is a reliable check for "author mode" in a pure <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">EUMM</a> environment.</p>

<p>You then create the file <code>maint/Makefile.PL.include</code> with the content:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>BEGIN { -e 'Distar' or system qw(git clone https://github.com/p5sagit/Distar.git) }
use lib 'Distar/lib';
use Distar;

author 'A. U. Thor &lt;author@cpan.org&gt;';
</code></pre>

</div>

<p><a href="https://github.com/p5sagit/Distar">Distar</a> provides essentially no configuration aside from this. Any customization needed in the build process needs to be written in the <code>Makefile.PL</code>, the same way it would be for raw <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>.</p>

<p>To make a release using <a href="https://github.com/p5sagit/Distar">Distar</a>, the process is:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>make bump           # bump version number
make nextrelease    # add changelog version heading
make release        # test &amp; release
</code></pre>

</div>
<h2>
  <a href="#make-release" class="anchor">
  </a>
  make release
</h2>

<p>The core of <a href="https://github.com/p5sagit/Distar">Distar</a> is the <code>release</code> target. It does a number of sanity checks, then creates a release.</p>

<ul>
<li>Verify that the version numbers in all of the modules are matching.</li>
<li>Verify that the <code>MANIFEST</code> file is up to date.</li>
<li>Verify that <code>cpan-upload</code> is available to push to CPAN.</li>
<li>Fetches any changes from the remote git server</li>
<li>Verify that no git tag exists for the version being published.</li>
<li>Verify that the release is being made from the master branch.</li>
<li>Verify that there are no new commits on the remote git server.</li>
<li>Verify that there is a version line in the Changelog that has been staged in git.</li>
<li>Verify that there are no other uncommitted changes.</li>
<li>Generate a dist directory, including a <code>README</code> and <code>LICENSE</code> file.</li>
<li>Run the tests in the dist directory, with <code>RELEASE_TESTING</code> set.</li>
<li>Create a git commit for the release.</li>
<li>Create a git tag for the release.</li>
<li>Create a dist tarball.</li>
<li>Upload the dist tarball to <a href="https://www.cpan.org/">CPAN</a>.</li>
<li>Push the new tag and commit to the remote git server.</li>
</ul>
<h2>
  <a href="#make-bump" class="anchor">
  </a>
  make bump
</h2>

<p><a href="https://github.com/p5sagit/Distar">Distar</a> provides a version bumping tool to modify any modules or <code>Makefile.PL</code> containing the version number. It is meant to work with both numeric and dotted-decimal style versions. By default, it will bump the last segment of the dotted-decimal version, or the highest precision portion of a numeric version. It also provides other targets to bump specific parts of a version. When bumping a specific part of a version, numeric versions will be treated as <code>X.YYYZZZ</code> versions, the same way perl versions work. Any components following the one specified will be reset to 0.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>make bumpmajor                # bump the first digit component
make bumpminor                # bump the second digit component
make bumpbugfix               # bump the third digit component
</code></pre>

</div>

<p>Other options can be used via the <code>V</code> option.</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>make bump V=1.200             # bump to specific version
make bump V=--alpha           # bump last component, but add an underscore
                              # to indicate a developer release
make bump V='major --alpha'   # bump first digit component, but also add
                              # an underscore.
</code></pre>

</div>

<p>After bumping the version, the changes will be committed to git. This will work even if there are other changes in the working directory, leaving those changes uncommitted. The <code>Makefile.PL</code> will then be re-run pick up the new version.</p>

<h2>
  <a href="#make-nextrelease" class="anchor">
  </a>
  make nextrelease
</h2>

<p>The release process of a <a href="https://github.com/p5sagit/Distar">Distar</a> dist requires you to add a version line to your Changelog file, and stage that change (git add). The <code>nextrelease</code> target will do this for you.</p>

<p>It adds the version line, then uses git's interactive add on it, so you will need to confirm the changes. The diff shown should include all of the changelog entries written for the release.</p>

<h1>
  <a href="#git-clone-distar" class="anchor">
  </a>
  git clone Distar
</h1>

<p>The current way <a href="https://github.com/p5sagit/Distar">Distar</a> is distributed is by adding code to <code>Makefile.PL</code> which clones the repository and uses that. Some might think this would present a compatibility or stability issue, but the authors of <a href="https://github.com/p5sagit/Distar">Distar</a> are very committed to maintaining stability and compatibility. Users have to trust that the authors will always keep the code in git in a working state. This trust has been easy to maintain so far, since the known users of <a href="https://github.com/p5sagit/Distar">Distar</a> are its authors.</p>

<p>There may be other users, since its code is small enough that others could understand it without needing any discussion with <a href="https://metacpan.org/author/MSTROUT">Matt S Trout</a> or myself.</p>

<p>Not being published on <a href="https://www.cpan.org/">CPAN</a> limits the visibility of <a href="https://github.com/p5sagit/Distar">Distar</a>. I have, at times, thought of this as a feature. I've been uncertain if I wanted the pressure of additional users, and having to either accomodate or push back against alternate use cases and feature requests.</p>

<h1>
  <a href="#should-you-use-distar" class="anchor">
  </a>
  Should You Use Distar?
</h1>

<p>I have no idea. It works well for me, and fits the model I have for creating releases. It isn't as fully automatic as many <a href="https://metacpan.org/pod/Dist::Zilla">Dist::Zilla</a> setups are, but it is extremely predictable, backwards compatible, and lightweight. It is very opinionated. It is unlikely to become more configurable to cover differing use cases.</p>

<p>If others did like the idea of <a href="https://github.com/p5sagit/Distar">Distar</a>, it may be time to look at improving the documentation and publishing it on CPAN.</p>

<p><a href="https://github.com/p5sagit/Distar">Distar</a> is currently available on GitHub at <a href="https://github.com/p5sagit/Distar">https://github.com/p5sagit/Distar</a>.</p>




<ol>

<li id="fn1">
<p>It prevents authors from using older perl versions, but the CPAN releases it creates are still backward compatible. <a href="#fnref1">↩</a></p>
</li>

</ol>

</div>
    </content>
    <author>
      <name>Graham Knop</name>
    </author>
    <id>https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95</id>
    <published>2021-03-31T01:42:35Z</published>
    <updated>2021-03-31T01:42:35Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>My first article on Perl.com!</title>
    <link rel="alternate" href="https://dev.to/mjgardner/my-first-article-on-perl-com-59kk" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This month I <a href="https://www.perl.com/article/interview-trying-to-catch-paul-leonerd-evans/">interviewed Paul “LeoNerd” Evans</a> for Perl.com on the upcoming <code>try</code>/<code>catch</code> syntax he’s added to the language and other topics. Check it out!</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/my-first-article-on-perl-com-59kk</id>
    <published>2021-03-30T14:03:11Z</published>
    <updated>2021-03-30T14:03:11Z</updated>
    <category term="programming"/>
    <category term="link"/>
    <category term="perl"/>
    <category term="exceptions"/>
  </entry>
  <entry>
    <title>The Zen of Test Suites</title>
    <link rel="alternate" href="https://dev.to/ovid/the-zen-of-test-suites-304f" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#the-zen-of-application-test-suites" class="anchor"&gt;
  &lt;/a&gt;
  The Zen of Application Test Suites
&lt;/h1&gt;

&lt;p&gt;This is a long read, but it's an important one about one of the most common problems I see with my clients: they all have broken test suites. Learning testing is as much a skill as learning coding and this long article only scratches the surface.&lt;/p&gt;

&lt;p&gt;Much of what I describe below is generic and applies to test suites written in any programming language, despite many examples being written in Perl.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I often speak with developers who take a new job and they describe a Web site built out of a bunch of separate scripts scattered randomly through directories, lots of duplicated code, poor use of modules, with embedded SQL and printing HTTP headers and HTML directly. The developers shake their head in despair, but grudgingly admit an upside: job security. New features are time-consuming to add, changes are difficult to implement and may have wide-ranging side-effects, and reorganizing the codebase to have a proper separation of concerns, to make it cheaper and safer to hack on, will take lots and lots of time.&lt;/p&gt;

&lt;p&gt;A bunch of randomly scattered scripts, no separation of concerns, lots of duplicated code, poor use of modules, SQL embedded directly in them? Does this sound familiar? It's your standard test suite. We're horrified by this in the code, but don't bat an eyelash at the test suite.&lt;/p&gt;

&lt;p&gt;Part of this is because much, if not most, of the testing examples we find focus on testing distributions, not applications. If you were to look at the tests for my module &lt;a href="https://github.com/Ovid/dbix-class-easyfixture"&gt;DBIx::Class::EasyFixture&lt;/a&gt;, you'd see the following tests:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;00-load.t
basic.t
definitions.t
groups.t
load_multiple_fixtures.t
many_to_many.t
no_transactions.t
one_to_many.t
one_to_one.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;These tests were added one by one, as I added new features to &lt;code&gt;DBIx::Class::EasyFixture&lt;/code&gt; and each &lt;code&gt;*.t&lt;/code&gt; file represents (more or less) a different feature.&lt;/p&gt;

&lt;p&gt;For a small distribution, this isn't too bad because it's very easy to keep it all in your head. With only nine files, it's trivial to glance at them, or grep them, to figure out where the relevant tests are. Applications, however, are a different story. This is the number of test classes from the &lt;a href="https://taustation.space"&gt;Tau Station MMORPG&lt;/a&gt; test suite:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ find t/tests -name '*.pm' | wc -l
589
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;One codebase I worked on had close to a million lines of code with thousands of test scripts. You couldn't hold the codebase in your head, you're couldn't &lt;em&gt;glance&lt;/em&gt; at the tests to figure out what went where, nor was grepping necessarily going to tell you as tests for particular sections of code were often scattered around multiple test scripts.  And, of course, I regularly hear the lament I've heard at many shops with larger codebases: where are the tests for feature &lt;em&gt;X&lt;/em&gt;? Instead of just sitting down and writing code, the developers are hunting for the tests, wondering if there are any tests for the feature they're working on and, if not, trying to figure out where to put their new tests.&lt;/p&gt;

&lt;p&gt;Unfortunately, this disorganization is only the start of the problem.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#largescale-test-suites" class="anchor"&gt;
  &lt;/a&gt;
  Large-scale test suites
&lt;/h2&gt;

&lt;p&gt;I've worked with many companies with large test suites and they tend to share some common problems. I list them below in the order I try to address these problems (in other words, roughly easiest to hardest).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests often emit warnings&lt;/li&gt;
&lt;li&gt;Tests often fail ("oh, that sometimes fails. Ignore it.")&lt;/li&gt;
&lt;li&gt;There is little evidence of organization&lt;/li&gt;
&lt;li&gt;Much of the testing code is duplicated&lt;/li&gt;
&lt;li&gt;Testing fixtures are frequently not used (or poorly used)&lt;/li&gt;
&lt;li&gt;Code coverage is spotty&lt;/li&gt;
&lt;li&gt;They take far too long to run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems are one thing, but what features do we want to see in large-scale test suites?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests should be very easy to write and run&lt;/li&gt;
&lt;li&gt;They should run relatively quickly&lt;/li&gt;
&lt;li&gt;The order in which tests run should not matter&lt;/li&gt;
&lt;li&gt;Test output should be clean&lt;/li&gt;
&lt;li&gt;It should be obvious where to find tests for a particular piece of code&lt;/li&gt;
&lt;li&gt;Testing code should not be duplicated&lt;/li&gt;
&lt;li&gt;Code coverage should be able to analyze different aspects of the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at some of the problems and try to understand their impacts.  While it's good to push a test suite into a desirable state, often this is risky if the underlying problems are ignored. I will offer recommendations for resolving each problem, but it's important to understand that these are &lt;em&gt;recommendations&lt;/em&gt;. They may not apply to your situation.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tests-often-emit-warnings" class="anchor"&gt;
  &lt;/a&gt;
  Tests often emit warnings
&lt;/h3&gt;

&lt;p&gt;This seems rather innocuous. Sure, code emits warnings and we're used to that.  Unfortunately, we sometimes forget that warnings are &lt;em&gt;warnings&lt;/em&gt;: there might very well be something wrong.&lt;/p&gt;

&lt;p&gt;In my time at the BBC, one of the first things I did was try to clean up all of the warnings. One was a normal warning about use of an undefined variable, but it was unclear to me from the code if this should be an acceptable condition. Another developer looked at it with me and realized that the variable should never be undefined: this warning was masking a very serious bug in the code, but the particular condition was not explicitly tested. By rigorously eliminating all warnings, we found it easier to make our code more correct, and in those places where things were dodgy, comments were inserted into the code to explain why warnings were suppressed.  In short: the code became easier to maintain.&lt;/p&gt;

&lt;p&gt;Another issue with warnings in the test suite is that they condition developers to ignore warnings. We get so used to them that we stop reading them, even if something serious is going on (on a related note, I often listen to developers complain about stack traces, but a careful reading of a stack trace will often reveal the exact cause of the exception). New warnings crop up, warnings change, but developers conditioned to ignore them often overlook serious issues with their code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Eliminate all warnings from your test suite, but investigate each one to understand if it reflects a serious issue. Also, some tests will capture STDERR, effectively hiding warnings. Making warnings fatal while running tests can help to overcome this problem.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tests-often-fail-oh-that-sometimes-fails-ignore-it" class="anchor"&gt;
  &lt;/a&gt;
  Tests often fail ("oh, that sometimes fails. Ignore it.")
&lt;/h3&gt;

&lt;p&gt;For one client, their hour-long test suite had many failing tests. When I first started working on it, I had a developer walk me through all of the failures and explain why they failed and why they were hard to fix. Obviously this is a far more serious problem than warnings, but in the minds of the developers, they were under constant deadline pressures and as far as management was concerned, the test suite was a luxury to keep developers happy, not "serious code." As a result, developers learned to recognize these failures and consoled themselves with the thought that they understood the underlying issues.&lt;/p&gt;

&lt;p&gt;Of course, that's not really how it works. The developer explaining the test failures admitted that he didn't understand some of them and with longer test suites that routinely fail, more failures tend to crop up. Developers conditioned to accept failures tend not to notice them. They kick off the test suite, run and grab some coffee and later glance over the results to see if they look reasonable (that's assuming they run all of the tests, something which often stops happening at this point). What's worse, continuous integration tools are often built to accomodate this. From the Jenkin's &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin"&gt;xUnit Plugin page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Records xUnit tests&lt;/li&gt;
&lt;li&gt;Mark the build unstable or fail according to threshold values&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, there's an "acceptable" level of failure. What's the acceptable level of failure when you debit someone's credit card, or you're sending their medical records to someone, or you're writing embedded software that can't be easily updated?&lt;/p&gt;

&lt;p&gt;Dogmatism aside, you can make a case for acceptable levels of test failure, but you need to understand the risks and be prepared to accept them. However, for the purposes of this document, we'll assume that the acceptable level of failure is zero.&lt;/p&gt;

&lt;p&gt;If you absolutely cannot fix a particular failure, you should at least mark the test as &lt;code&gt;TODO&lt;/code&gt; so that the test suite can pass. Not only does this help to guide you to a clean test suite, the &lt;code&gt;TODO&lt;/code&gt; reason is generally embedded in the test, giving the next developer a clue to what's going on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Do not allow any failing tests. If tests fail which do not impact the correctness of the application (such as documentation or "coding style" tests), they should be separated from your regular tests in some manner and your systems should recognize that it's OK for them to fail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-little-evidence-of-organization" class="anchor"&gt;
  &lt;/a&gt;
  There is little evidence of organization
&lt;/h3&gt;

&lt;p&gt;As mentioned previously, a common lament amongst developers is the difficulty of finding tests for the code they're working on. Consider the case of &lt;a href="https://metacpan.org/release/HTML-TokeParser-Simple"&gt;HTML::TokeParser::Simple&lt;/a&gt;.  The library is organized like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lib/
└── HTML
    └── TokeParser
        ├── Simple
        │   ├── Token
        │   │   ├── Comment.pm
        │   │   ├── Declaration.pm
        │   │   ├── ProcessInstruction.pm
        │   │   ├── Tag
        │   │   │   ├── End.pm
        │   │   │   └── Start.pm
        │   │   ├── Tag.pm
        │   │   └── Text.pm
        │   └── Token.pm
        └── Simple.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There's a class in there named &lt;code&gt;HTML::TokeParser::Simple::Token::ProcessInstruction&lt;/code&gt;. Where, in the following tests, would you find the tests for process instructions?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t
├── constructor.t
├── get_tag.t
├── get_token.t
├── internals.t
└── munge_html.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You might think it's in the &lt;code&gt;get_token.t&lt;/code&gt; test, but are you sure? And what's that strange &lt;code&gt;munge_html.t&lt;/code&gt; test? Or the &lt;code&gt;internals.t&lt;/code&gt; test? As mentioned, for a small library, this really isn't too bad. However, what if we reorganized our tests to reflect our library hierarchy?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t/
└── tests/
    └── html/
        └── tokeparser/
            ├── simple/
            │   ├── token/
            │   │   ├── comment.t
            │   │   ├── declaration.t
            │   │   ├── tag/
            │   │   │   ├── end.t
            │   │   │   └── start.t
            │   │   ├── tag.t
            │   │   └── text.t
            │   └── token.t
            └── simple.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It's clear that the tests for &lt;code&gt;HTML::TokeParser::Simple::Token::Tag::Start&lt;/code&gt; are in &lt;code&gt;t/tests/html/tokeparser/simple/token/tag/start.t&lt;/code&gt;. And you can see easily that there is no file for &lt;code&gt;processinstruction.t&lt;/code&gt;. This test organization not only makes it easy to find where your tests are, it's also easy to program your editor to automatically switch between the code and the tests for the code. For large test suites, this saves a huge amount of time.  When I reorganized the test suite of the BBC's central metadata repository, &lt;a href="http://www.bbc.co.uk/blogs/bbcinternet/2009/02/what_is_pips.html"&gt;PIPs&lt;/a&gt;, I followed a similar pattern and it made our life much easier.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: the comment about programming your editor is important. Effective use of your editor/IDE is one of the most powerful tools in a developer's toolbox.)&lt;/p&gt;

&lt;p&gt;Of course, your test suite could easily be more complicated and your top-level directories inside of your test directory may be structured differently:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t
├── unit/
├── integration/
├── api/
└── web/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Organize your test files to have a predictable, discoverable structure. The test suite should be much easier to work with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#much-of-the-testing-code-is-duplicated" class="anchor"&gt;
  &lt;/a&gt;
  Much of the testing code is duplicated
&lt;/h3&gt;

&lt;p&gt;We're aghast that people routinely cut-n-paste their application code, but we don't even notice when people do this in their test code. More than once I've worked on a test suite with a significant logic change and I've had to find this duplicated code and either change it many places or try to refactor it so that it's in a single place and then change it. We already know why duplicated code is bad, I'm unsure why we tolerate this in test suites.&lt;/p&gt;

&lt;p&gt;Much of my work in tests has been to reduce this duplication. For example, many test scripts list the same set of modules at the top. I did a heuristic analysis of tests on the CPAN and chose the most popular testing modules and that allowed me to change this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Differences&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Deep&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Warn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;More&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Most&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily use similar strategies to bundle up common testing modules into a single testing module that all of your tests use. Less boilerplate and you can easily dive into testing.&lt;/p&gt;

&lt;p&gt;Or as a more egregious example, I often see something like this (a silly example just for illustration purposes):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;set_up_some_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr1 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr2 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr3 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr4 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr5 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then a few lines later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;set_up_some_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr1 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr2 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr3 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr4 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr5 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then a few lines later, the same thing ...&lt;/p&gt;

&lt;p&gt;And in another test file, the same thing ...&lt;/p&gt;

&lt;p&gt;Put that in its own test function and wrap those attribute tests in a loop. If this pattern is repeated in different test files, put it in a custom test library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;test_fetching_by_id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$tests&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@$tests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$attribute&lt;/span&gt;&lt;span class="s2"&gt; works for &lt;/span&gt;&lt;span class="si"&gt;$class&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then you call it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@id_tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;tests&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected3&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected4&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected5&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;]},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@id_tests&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;test_fetching_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
       &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="nv"&gt;$test&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nv"&gt;$tests&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a cleanly refactored data-driven approach. By not repeating yourself, if you need to test new attributes, you can just add an extra line to the data structures and the code remains the same. Or, if you need to change the logic, you only have one spot in your code where this is done. Once a developer understands the &lt;code&gt;test_fetching_by_id()&lt;/code&gt; function, they can reuse this understanding in multiple places. Further, it makes it easier to find patterns in your code and any competent programmer is always on the lookout for patterns because those are signposts leading to cleaner designs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Keep your test code as clean as your application code.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#testing-fixtures-are-frequently-not-used-or-poorly-used" class="anchor"&gt;
  &lt;/a&gt;
  Testing fixtures are frequently not used (or poorly used)
&lt;/h3&gt;

&lt;p&gt;One difference between your application code and the test suite is in an application, we often have no idea what the data will be and we try to have a clean separation of data and code.&lt;/p&gt;

&lt;p&gt;In your test suite, we also want a clean separation of data and code (in my experience, this is very hit-or-miss), but we often &lt;em&gt;need&lt;/em&gt; to know the data we have. We set up data to run tests against to ensure that we can test various conditions. Can we give a customer a birthday discount if they were born on February 29th? Can a customer with an overdue library book check out another?  If our employee number is no longer in the database, is our code properly deleted, along with the backups and the git history erased? (kidding!)&lt;/p&gt;

&lt;p&gt;When we set up the data for these known conditions under which to test, we call the data a &lt;a href="http://en.wikipedia.org/wiki/Test_fixture"&gt;test fixture&lt;/a&gt;.  Test fixtures, when properly designed, allow us generate clean, understandable tests and make it easy to write tests for unusual conditions that may otherwise be hard to analyze.&lt;/p&gt;

&lt;p&gt;There are several common anti-patterns I see in fixtures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to set up and use&lt;/li&gt;
&lt;li&gt;Adding them to the database and not rolling them back&lt;/li&gt;
&lt;li&gt;Loading all your test data at once with no granularity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reviewing various fixture modules on the CPAN and for clients I have worked with, much of the above routinely holds true. On top of that, documentation is often rather sparse or non-existent. Here's a (pseudo-code) example of an almost undocumented fixture system for one client I worked with and it exemplified common issues in this area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;load_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;client&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$client_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;datasets&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sx"&gt;qw/customers orders items order_items/&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This had several problems, all of which could be easily corrected &lt;em&gt;as code&lt;/em&gt;, but they built a test suite around these problems and had backed themselves into a corner, making their test suite dependent on bad behavior.&lt;/p&gt;

&lt;p&gt;The business case is that my client had a product serving multiple customers and each customer would have multiple separate databases. In the above, client &lt;em&gt;$client_id&lt;/em&gt; connects to their sales database and we load several test datasets and run tests against them. However, loading of data was not done in a transaction, meaning that there was no isolation between different test cases in the same process. More than once I caught issues where running an individual test case would often fail because it depended on data loaded by a different test case, but it wasn't always clear which test cases were coupled with which.&lt;/p&gt;

&lt;p&gt;Another issue is that fixtures were not fine-tuned to address particular test cases. Instead, if you loaded "customers" or "referrals", you got &lt;em&gt;all&lt;/em&gt; of them in the database. Do you need a database with a single customer with a single order and only one order item on it to test that obscure bug that occurs when a client first uses your software? There really wasn't any clean way of doing that; data was loaded in an "all or nothing" context. Even if you violated the paradigm and tried to create fine-tuned fixtures, it was very hard to write them due to the obscure, undocumented format needed to craft the data files for them.&lt;/p&gt;

&lt;p&gt;Because transactions were not used and changes could not be rolled back, each &lt;code&gt;*.t&lt;/code&gt; file would rebuild its own test database, a very slow process. Further, due to lack of documentation about the fixtures, it was often difficult to figure out which combination of fixtures to load to test a given feature. Part of this is simply due to the complex nature of the business rules, but the core issues stemmed from a poor understanding of fixtures. This client now has multiple large, slow test suites, spread across multiple repositories, all of which constantly tear down and set up databases and load large amounts of data. The test suites are both slow and fragile. The time and expense to fix this problem is considerable due to how long they've pushed forward with this substandard setup.&lt;/p&gt;

&lt;p&gt;What you generally want is the ability to easily create understandable fixtures which are loaded in a transaction, tests are run, and then changes are rolled back.  The fixtures need to be fine-grained so you can tune them for a particular test case.&lt;/p&gt;

&lt;p&gt;One attempt I've made to fix this situation is releasing &lt;a href="http://search.cpan.org/dist/DBIx-Class-EasyFixture/lib/DBIx/Class/EasyFixture.pm"&gt;DBIx::Class::EasyFixture&lt;/a&gt;, along with &lt;a href="http://search.cpan.org/dist/DBIx-Class-EasyFixture/lib/DBIx/Class/EasyFixture/Tutorial.pm"&gt;a tutorial&lt;/a&gt;.  It does rely on &lt;code&gt;DBIx::Class&lt;/code&gt;, the most popular ORM for Perl. This will likely make it unsuitable for some use cases.&lt;/p&gt;

&lt;p&gt;Using fixtures is now very simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;DBIx::Class::&lt;/span&gt;&lt;span class="nv"&gt;EasyFixture&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$fixtures&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;load&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;customer_with_order_without_items&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# run your tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the customer's code, we could satisfy the different database requirements by passing in different schemas. Other (well-documented) solutions, particularly those which are pure &lt;code&gt;DBI&lt;/code&gt; based are welcome in this area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Use fine-grained, well-documented fixtures which are easy to create and easy to clean up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-coverage-is-poorly-understood" class="anchor"&gt;
  &lt;/a&gt;
  Code coverage is poorly understood
&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;float recip(float number) {
    return 1.0 / number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a sample test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;assert recip(2.0) returns .5;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You now have 100% code coverage of that function.&lt;/p&gt;

&lt;p&gt;For a statically typed language, I'm probably going to be moderately comfortable with that test. Alas, for dynamically typed languages we're fooling ourselves. An equivalent function in Perl will pass that test if we use &lt;code&gt;recip("2 apples")&lt;/code&gt; as the argument. And what happens if we pass a file handle? And would a Unicode number work? What happens if we pass no arguments?  Perl is powerful and lets us write code quickly, but there's a price: it expects us to know what we're doing and passing unexpected kinds of data is a very common source of errors, but one that 100% code coverage will never (no pun intended) uncover. This can lead to false confidence.&lt;/p&gt;

&lt;p&gt;To work around false confidence in your code, always assume that you write applications to create things and you write tests to destroy them. Testing is, and should be, an act of violence. If you're not breaking anything with your tests, you're probably doing it wrong.&lt;/p&gt;

&lt;p&gt;Or what if you have that code in a huge test suite, but it's dead code? We tend to blindly run code coverage over our entire test suite, never considering whether or not we're testing dead code. This is because we slop our unit, integration, API and other tests all together.&lt;/p&gt;

&lt;p&gt;Or consider the following test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;test_forum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;test_website&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$pass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/forum&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;follow_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Off Topic&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;post_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;What is this?&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;body&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a test&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We should be able to post to the forum&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Devel::Cover&lt;/code&gt; doesn't know which code is test code and which is not.  &lt;code&gt;Devel::Cover&lt;/code&gt; merely tells you if your application code was exercised in your tests. &lt;a href="http://search.cpan.org/dist/Devel-Cover/lib/Devel/Cover.pm#UNCOVERABLE_CRITERIA"&gt;You can annotate your code with "uncoverable" directives&lt;/a&gt; to tell &lt;code&gt;Devel::Cover&lt;/code&gt; to ignore the following code, but that potentially means sprinkling your code with annotations all over the place.&lt;/p&gt;

&lt;p&gt;There are multiple strategies to deal with this. One of the simplest is to merely run your code coverage tools over the public-facing portions of your code, such as web or API tests. If you find uncovered code, you either have code that is not fully tested (in the sense that you don't know if your API can really use that code) or, if you cannot write an API test to reach that code, investigate if it is dead code.&lt;/p&gt;

&lt;p&gt;You can do this by grouping your tests into subdirectories:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t/
|--api/
|--integration/
`--unit/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Alternatively, if you use &lt;code&gt;Test::Class::Moose&lt;/code&gt;, you can tag your tests and only run coverage over tests including the tags you wish to test:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;perl&lt;br&gt;
My::Test::Class::Moose-&amp;gt;new({&lt;br&gt;
  include_tags =&amp;gt; [qw/api/],&lt;br&gt;
})-&amp;gt;runtests;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you start tagging your tests by the subsystems they are testing, you can then start running code coverage on specific subsystems to determine which ones are poorly tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Run coverage over public-facing code and on different subsystems to find poor coverage.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#they-take-far-too-long-to-run" class="anchor"&gt;
  &lt;/a&gt;
  They take far too long to run
&lt;/h3&gt;

&lt;p&gt;The problem with long-running test suites is well known, but it's worth covering this again here. These are problems that others have discussed and that I have also personally experienced many times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ02lHaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/JNfyxoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ02lHaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/JNfyxoo.png" alt="Perl's version of waiting for a compile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With apologies to &lt;a href="http://xkcd.com/303/"&gt;XKCD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the best case scenario for developers who always run that long-running test suite, expensive developer time is wasted while the test suite is running.  When they launch that hour-long (or more) test suite, they frequently take a break, talk to (read: interrupt) other developers, check their Facebook, or do any number of things which equate to "not writing software." Yes, some of those things involve meetings or research, but meetings don't conveniently schedule themselves when we run tests and for mature products (those which are more likely to have long-running test suites), there's often not that much research we really need to do.&lt;/p&gt;

&lt;p&gt;Here are some of the issues with long-running test suites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expensive developer time is wasted while the test suite runs&lt;/li&gt;
&lt;li&gt;Developers often don't run the entire test suite&lt;/li&gt;
&lt;li&gt;Expensive code coverage is not generated as a result&lt;/li&gt;
&lt;li&gt;Code is fragile as a result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I find particularly curious is that we accept this state of affairs. Even a back-of-the-envelope calculation can quickly show significant productivity benefits that will pay off in the long run by taking care of our test suite.  &lt;a href="http://www.slideshare.net/Ovid/turbo-charged-test-suites-presentation"&gt;I once reduced a BBC test suite's run time from one hour and twenty minutes down to twelve minutes&lt;/a&gt; (&lt;em&gt;Note: today I use a saner approach that results in similar or greater performance benefits&lt;/em&gt;).  We had six developers on that team. When the test suite took over an hour to run, they often didn't run the test suite. They would run tests on their section of code and push their code when they were comfortable with it. This led to other developers finding buggy code and wasting time trying to figure out how they had broken it when, in fact, someone else broke the code.&lt;/p&gt;

&lt;p&gt;But let's assume each developer was running the test suite at least once a day (I'm careful about testing and often ran mine twice a day). By cutting test suite run time by over an hour, we reclaimed a &lt;em&gt;full day&lt;/em&gt; of developer productivity every day! Even if it takes a developer a month to increase perfomance by that amount it pays for itself many times over very quickly.  Why would you not do this?  As a business owner, wouldn't you want your developers to save time on their test suite so they can create features faster for you?&lt;/p&gt;

&lt;p&gt;There are several reasons why this is difficult. Tasking a developer with a block of time to speed up a test suite means the developer is not creating user-visible features during that time. For larger test suites, it's often impossible to know in advance just how much time you can save or how long it will take you to reach your goal. In most companies I've worked with, the people who can make the decision to speed up the test suite are often not the people feeling the pain. Productivity and quality decrease slowly over time, leading to the &lt;a href="http://en.wikipedia.org/wiki/Boiling_frog"&gt;boiling frog problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What's worse: in order to speed up your test suite without affecting behavior, the test suite often has to be "fixed" (eliminating warnings, failures, and reducing duplication) to ensure that no behavior has been changed during the refactor.&lt;/p&gt;

&lt;p&gt;Finally, some developers simply don't have the background necessary to implement performance optimizations. While performance profiles such as Perl's &lt;a href="http://search.cpan.org/dist/Devel-NYTProf/lib/Devel/NYTProf.pm"&gt;Devel::NYTProf&lt;/a&gt; can easily point out problem areas in the code, it's not always clear how to overcome the discovered limitations.&lt;/p&gt;

&lt;p&gt;The single biggest factor in poor test suite performance for applications is frequently I/O. In particular, working with the database tends to be a bottleneck and there's only so much database tuning that can be done. After you've profiled your SQL and optimized it, several database-related optimizations which can be considered are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using transactions to clean up your database rather than rebuilding the database&lt;/li&gt;
&lt;li&gt;Only connect to the database once per test suite (hard when you're using a separate process per test file)&lt;/li&gt;
&lt;li&gt;If you must rebuild the database, maintain a pool of test databases and assign them as needed, rebuilding used ones in the background&lt;/li&gt;
&lt;li&gt;Use smaller database fixtures instead of loading everything at once&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After you've done all you can to improve your database access, you may find that your test suite is "fast enough", but if you wish to go further, there are several steps you can take.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#use-testaggregate" class="anchor"&gt;
  &lt;/a&gt;
  Use Test::Aggregate
&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://search.cpan.org/dist/Test-Aggregate/"&gt;Test::Aggregate&lt;/a&gt; can often double the speed of your test suite (I've had it speed up test suites by around 65%). It does this by taking your separate &lt;code&gt;*.t&lt;/code&gt; files and runs them in a single process. Not all tests can be run this way (tests that munge global state without cleaning up are prime examples), but it's the easiest way to get a quick boost to test suite performance.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#aggressively-search-for-and-remove-duplicated-tests" class="anchor"&gt;
  &lt;/a&gt;
  Aggressively search for and remove duplicated tests.
&lt;/h4&gt;

&lt;p&gt;For poorly organized test suites, developers sometimes make the mistake of putting tests for something in a new &lt;code&gt;*.t&lt;/code&gt; file or add them to a different &lt;code&gt;*.t&lt;/code&gt; file, even if related tests already exist. This strategy can be time-consuming and often does not result in quick wins.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#run-performance-profiling" class="anchor"&gt;
  &lt;/a&gt;
  Run Performance Profiling
&lt;/h4&gt;

&lt;p&gt;For one test suite, I found that we were using a pure Perl implementation of JSON. As the test suite used JSON extensively, switching to &lt;a href="http://search.cpan.org/dist/JSON-XS/XS.pm"&gt;JSON::XS&lt;/a&gt; gave us a nice performance boost. We may not have noticed that if we hadn't been profiling our code with &lt;code&gt;Devel::NYTProf&lt;/code&gt;.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#look-for-code-with-global-effects" class="anchor"&gt;
  &lt;/a&gt;
  Look for code with "global" effects
&lt;/h4&gt;

&lt;p&gt;On one test suite, I ensured that &lt;code&gt;Universal::isa&lt;/code&gt; and &lt;code&gt;Universal::can&lt;/code&gt; cannot be loaded. It was a quick fix and sped up the test suite by 2% (several small accumulations of improvements can add up quickly).&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#inline-hot-functions" class="anchor"&gt;
  &lt;/a&gt;
  Inline "hot" functions.
&lt;/h4&gt;

&lt;p&gt;Consider the following code which runs in about 3.2 seconds on my computer:&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recursion&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;By rewriting the recursive function as a loop, the code takes about .87 seconds:&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;By inlining the calculation, the code completes in .69 seconds:&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;In other words, in our trivial example, the inlined behavior is roughly 20% faster than the iterative function and 80% faster than the recursive function.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#recompile-your-perl" class="anchor"&gt;
  &lt;/a&gt;
  Recompile your Perl
&lt;/h4&gt;

&lt;p&gt;You may wish to recompile your Perl to gain a performance improvement. Many Linux distributions ship with a threaded Perl by default. Depending on the version of Perl you ship with, you can gain performance improvements of up to 30% by recompiling without threads. Of course, if you use threads, you'll feel very stupid for doing this. However, if you don't make heavy use of threads, switching to a forking model for the threaded code may make the recompile worth it. Naturally, you'll need to heavily benchmark your code (preferably under production-like loads) to understand the trade-offs here.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#preload-modules" class="anchor"&gt;
  &lt;/a&gt;
  Preload modules
&lt;/h4&gt;

&lt;p&gt;If your codebase makes heavy use of modules that are slow to load, such as &lt;code&gt;Moose&lt;/code&gt;, &lt;code&gt;Catalyst&lt;/code&gt;, &lt;code&gt;DBIx::Class&lt;/code&gt; and others, preloading them might help.  &lt;a href="http://search.cpan.org/~miyagawa/forkprove-v0.4.9/script/forkprove"&gt;forkprove&lt;/a&gt; is a utility written by Tatsuhiko Miyagawa that allows you to preload slow-loading modules and then forks off multiple processes to run your tests.  Using this tool, &lt;a href="http://blogs.perl.org/users/ovid/2013/12/merry-christmas-parallel-testing-with-testclassmoose-has-arrived.html"&gt;I reduced one sample test suite's run time from 12 minutes to about a minute&lt;/a&gt;.  Unfortunately, &lt;code&gt;forkprove&lt;/code&gt; doesn't allow schedules, a key component often needed for larger test suites. I'll explain that in the next section.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#parallel-tests" class="anchor"&gt;
  &lt;/a&gt;
  Parallel tests
&lt;/h4&gt;

&lt;p&gt;Running tests in parallel is tricky. Some tests simply &lt;em&gt;can't&lt;/em&gt; be run with other tests. Usually these are tests which alter global state in some manner that other processes will pick up, or might cause resource starvation of some kind.&lt;/p&gt;

&lt;p&gt;Or some tests &lt;em&gt;can&lt;/em&gt; be run in parallel with other tests, but if several tests are updating the same records in the database at the same time, locking behavior might slow down the tests considerably.&lt;/p&gt;

&lt;p&gt;Or maybe you're running 4 jobs, but all of your slowest tests are grouped in the same job: not good.&lt;/p&gt;

&lt;p&gt;To deal with this, you can create a schedule that assigns different tests to different jobs, based on a set of criteria, and then puts tests which cannot run in parallel in a single job that runs after the others have completed.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="http://search.cpan.org/dist/Test-Harness/lib/TAP/Parser/Scheduler.pm"&gt;TAP::Parser::Scheduler&lt;/a&gt; to create an effective parallel testing setup. You can use this with &lt;code&gt;TAP::Parser::Multiplexer&lt;/code&gt; to create your parallel tests. Unfortunately, as of this writing there's a bug in the Multiplexer whereby it uses &lt;code&gt;select&lt;/code&gt; in a loop to read the parser output. If one parser blocks, none of the other output is read. Further, the schedule must be created prior to loading your test code, meaning that if your tests would prefer a different schedule, you're out of luck. Also, &lt;code&gt;make test&lt;/code&gt; currently doesn't handle this well. There is work being done by David Golden to alleviate this problem.&lt;/p&gt;

&lt;p&gt;My preferred solution is to use &lt;a href="http://search.cpan.org/dist/Test-Class-Moose/"&gt;Test::Class::Moose&lt;/a&gt;. It has built-in parallel testing and writing schedules is very easy. Further, different test cases can simply use a &lt;code&gt;Tags(noparallel)&lt;/code&gt; attribute to ensure that they're run sequentially after the parallel tests.&lt;/p&gt;

&lt;p&gt;Aside from the regular benefits of &lt;code&gt;Test::Class::Moose&lt;/code&gt;, an interesting benefit of this module is that it loads all of your test and application code into a single process and &lt;em&gt;then&lt;/em&gt; forks off subprocesses. As a result, your code is loaded once and only once. Alternate strategies which try to fork before loading your code might still cause the code to be loaded multiple times.&lt;/p&gt;

&lt;p&gt;I have used this strategy to reduce a &lt;a href="http://blogs.perl.org/users/ovid/2013/12/merry-christmas-parallel-testing-with-testclassmoose-has-arrived.html"&gt;12 minute test suite to 30 seconds&lt;/a&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#distributed-tests" class="anchor"&gt;
  &lt;/a&gt;
  Distributed tests
&lt;/h4&gt;

&lt;p&gt;Though I haven't used this module, Alex Vandiver has written &lt;a href="http://search.cpan.org/dist/TAP-Harness-Remote/lib/TAP/Harness/Remote.pm"&gt;TAP::Harness::Remote&lt;/a&gt;.  This module allows you to rsync directory trees to multiple servers and run tests on those servers. Obviously, this requires multiple servers.&lt;/p&gt;

&lt;p&gt;If you want to roll your own version of this, I've also released &lt;a href="http://search.cpan.org/dist/TAP-Stream/"&gt;TAP::Stream&lt;/a&gt;, a module that allows you to take streams (the text, actually) of TAP from multiple sources and combine them into a single TAP document.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#develcoverxcovered" class="anchor"&gt;
  &lt;/a&gt;
  Devel::CoverX::Covered
&lt;/h4&gt;

&lt;p&gt;There is yet another interesting strategy: only run tests that exercise the code that you're changing. Johan Lindström wrote &lt;a href="http://search.cpan.org/dist/Devel-CoverX-Covered/"&gt;Devel::CoverX::Covered&lt;/a&gt;.  This module is used in conjunction with Paul Johnson's &lt;a href="http://search.cpan.org/dist/Devel-Cover/"&gt;Devel::Cover&lt;/a&gt; to identify all the places in your tests which cover a particular piece of code. In the past, I've written tools for vim to read this data and only run relevant tests. This is a generally useful approach, but there are a couple of pitfalls.&lt;/p&gt;

&lt;p&gt;First, if your test suite takes a long time to run, it will take much, much longer to run with &lt;code&gt;Devel::Cover&lt;/code&gt;. As a result, I recommend that this be used with a special nightly "cover build" and have the results synched back to the developers.&lt;/p&gt;

&lt;p&gt;Second, when changing code, it's easy to change which tests cover your code, leading to times when this technique won't cover your actual changes thoroughly. In practice, this hasn't been a problem for me, but I've not used it enough to say that with confidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Don't settle for slow test suites. Pick a goal and work to achieving that goal (it's easy to keep optimizing for too long and start getting diminishing marginal returns).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#testclassmoose" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/houseabsolute/test-class-moose"&gt;Test::Class::Moose&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;If you start creating a large Web site, do you start writing a bunch of individual scripts, each designed to handle one URL and each handling their own database access and printing their output directly to STDOUT? Of course not. Today, professional developers reach for Sinatra, Seaside, Catalyst, Ruby on Rails or other Web frameworks. They take a bit more time to set up and configure, but we know they generally save more time in the long run. Why wouldn't you do that with your test suite?&lt;/p&gt;

&lt;p&gt;If you're using Perl, many of the problems listed in this document can be avoided by switching to &lt;code&gt;Test::Class::Moose&lt;/code&gt;. This is a testing framework I designed to make it very easy to test applications. Once you understand it, it's actually easy to use for testing libraries, but it really shines for application testing.&lt;/p&gt;

&lt;p&gt;Note that I now regret putting &lt;code&gt;Moose&lt;/code&gt; in the name. &lt;code&gt;Test::Class::Moose&lt;/code&gt; is a rewrite of &lt;code&gt;Test::Class&lt;/code&gt; using &lt;code&gt;Moose&lt;/code&gt;, but it's &lt;em&gt;not&lt;/em&gt; limited to testing &lt;code&gt;Moose&lt;/code&gt; applications. It uses &lt;code&gt;Moose&lt;/code&gt; because internally it relies on the &lt;code&gt;Moose&lt;/code&gt; meta-object protocol for introspection.&lt;/p&gt;

&lt;p&gt;Out of the box you get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Parallel tests (which optionally accept a custom schedule)&lt;/li&gt;
&lt;li&gt;Tagging tests (slice and dice your test suite!)&lt;/li&gt;
&lt;li&gt;Test inheritance (xUnit for the win!)&lt;/li&gt;
&lt;li&gt;Full Moose support&lt;/li&gt;
&lt;li&gt;Test control methods (startup, setup, teardown, shutdown)&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;All the testing functions and behavior from &lt;code&gt;Test::Most&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn about xUnit testing in Perl, you may wish to read a five-part tutorial I published at Modern Perl Books:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/organizing-test-suites-with-testclass.html"&gt;Organizing test suites with Test::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/reusing-test-code-with-testclass.html"&gt;Reusing test code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/making-your-testing-life-easier.html"&gt;Making your testing life easier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/using-test-control-methods-with-testclass.html"&gt;Using test control methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/working-with-testclass-test-suites.html"&gt;Working with Test::Class test suites&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That tutorial is slightly out of date (I wrote it in 2009), but it explains effective use of &lt;code&gt;Test::Class&lt;/code&gt; and some common anti-patterns when using it.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-the-author" class="anchor"&gt;
  &lt;/a&gt;
  About The Author
&lt;/h1&gt;

&lt;p&gt;For those of you who may be reading this and are not familiar with me, I am Curtis "Ovid" Poe. I authored the test harness that ships with the Perl programming language. I wrote the well-reviewed book &lt;a href="http://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1395074590&amp;amp;sr=1-1&amp;amp;keywords=beginning+perl+curtis+poe&amp;amp;tag=overse-20"&gt;Beginning Perl&lt;/a&gt; and am one of the authors of &lt;a href="http://www.amazon.com/Perl-Hacks-Programming-Debugging-Surviving/dp/0596526741/"&gt;Perl Hacks&lt;/a&gt; (how's that for a redundant title?). I also sit on &lt;a href="http://www.perlfoundation.org/who_s_who"&gt;the Board of Directors of the Perl Foundation&lt;/a&gt; and am one of the people behind &lt;a href="http://www.allaroundtheworld.fr/"&gt;All Around The World&lt;/a&gt;, a company offering software development, consulting and training.&lt;/p&gt;

&lt;p&gt;If you'd like to hire me to fix your test suite or write software for you, drop me a line at &lt;a href="//mailto:ovid@allaroundtheworld.fr"&gt;ovid@allaroundtheworld.fr&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Ovid</name>
    </author>
    <id>https://dev.to/ovid/the-zen-of-test-suites-304f</id>
    <published>2021-03-30T07:23:47Z</published>
    <updated>2021-03-30T07:23:47Z</updated>
    <category term="testing"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Switch lots of things on at once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10161</id>
    <published>2021-03-30T00:37:20Z</published>
    <updated>2021-03-30T03:39:36Z</updated>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    <category term="export" label="export" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="exporter" label="exporter" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="import" label="import" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="signaturesfileslurper" label="signatures. File::Slurper" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>Many people already have codes like</p>

<pre>
use strict;
use warnings;
</pre>

<p>and so on at the top of each script they write. For scripts which I don't intend to publish anywhere, I have a module (which I accidentally called Z not knowing there was already a module of the same name on CPAN), which switches on lots of things at once just by saying</p>

<pre>
use Z;
</pre>

<p>The top bit goes like this:</p>

<pre>
package Z;
use warnings;
use strict;
use utf8;

use Carp;
use Deploy 'do_system';
use File::Slurper qw!read_text write_text read_lines!;
use FindBin '$Bin';
use Getopt::Long;
use Table::Readable ':all';
use v5.32;
no warnings qw(experimental::signatures);
use feature qw(signatures);
</pre>

<p>So far that is all fairly standard stuff, but what Z does is also to import all of the above things into my script using the <code>EXPORT</code> variables from the above modules:</p>

<pre>
our $VERSION = '0.01';

require Exporter;
our @ISA = qw(Exporter);

our @EXPORT = (
    @Carp::EXPORT,
    @Deploy::EXPORT_OK,
    @File::Slurper::EXPORT_OK,
    @FindBin::EXPORT_OK,
    @Getopt::Long::EXPORT,
    @Table::Readable::EXPORT_OK,
);
</pre>

<p>This requires a special <code>import</code> method:</p>

<pre>
sub import
{
    my ($class) = @_;

    strict->import ();
    utf8->import ();
    warnings->import ();
    warnings->unimport (qw(experimental::signatures));
    feature->import ('signatures');

    Carp->import ();
    File::Slurper->import (qw!read_text write_text!);
    FindBin->import ('$Bin');
    Getopt::Long->import ();
    Deploy->import ('do_system');
    Table::Readable->import (':all');

    Z->export_to_level (1);
}
</pre>

<p>To save another bit of boilerplate I also have</p>

<pre>
binmode STDOUT, ":encoding(utf8)";
</pre>

<p>at the end of the module.</p>

<p>This is for personal convenience so it's not something I would use publicly, but perhaps people who want to save themselves a bit of boilerplate might find this useful for making their own "personal module".</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>In defence of OOP</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2021/03/in-defence-of-oop.html"/>
    <id>tag:blogs.perl.org,2021:/users/lichtkind//275.10158</id>
    <published>2021-03-28T01:40:08Z</published>
    <updated>2021-03-30T01:37:10Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="OOP" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>During the last years it became fashionable to rag on object oriented programming and a decade ago I would join the choir. Hack, when I started with Perl I despised the bloat and inefficiency of many corporate smelling *coughjava* systems and preached the light weight and foreward thinking way that real hackers travel. In this miniseries I want to write why I changed my tune [part one], the best way (IMO) to use OOP [part two] and why inheritance (incl. roles and templates) and delegation or not helpful features (in contrast to polymorphism) [part three]. Maybe there will be more  about rating Perl OO features and modules.</p>]]>
        <![CDATA[<p>Objects are a tool to create abstraction layer - to do anything. It's easy to get overwhelmed by possibilities or run with preconceived ideas. And the larger the system, the harder it is to make wise choices. I think this is one reason why a lot of OO code sucks. The second is bad coding styles. It's not getting taught enough how to find the right abstractions and how to ease the use by proper naming. The third reason is the introduction and teaching of contra-productive features like inheritance and even worse, multiple inheritance.</p>

<p>So why even bother? To make my point lets unwind history a little. Because back in the days a similar discussion ensued about subroutines, which are also a tool to hide complexity behind a meaningful names. </p>

<p>register_customer( $paul ) is much nicer to our intuitive mind than GOTO 230. It frees up mental resources and makes programming easier. And yes there are 0.2% of algorithms that can be written clearer with goto's (inside a subroutine). Were talking here about API design.</p>

<p>The main point is that we are sealing a sub as one unit to be called or not. Rather than jumping with GOTO into the middle of a sub you insert an additional IF statement inside the sub, to have the option to skip a few lines. Old school programmers may yell at you for wasting 5 or 20 bytes. But you gained the peace knowing the sub always starts at line one so when you approach line 20 you know the data is checked and sanitized so only errors might happen you did not thought about yet. If you jump to line 20 of the sub  with bad data it might be go well for a while and when things go down its hard to find out why. Having a regulated control flow means also have well defined data, which  is the next big win usinf a sub. </p>

<p>And coincidental but not identical with sub : scopes. Create local variables inside a sub to prevent name collisions with other vars with same name and therefore  spooky actions at distance. Its a whole class of problems you instantly can stop to worry and it has no down sides, since you don't want to use the local variables anywhere else anyway. (I only miss the feature that functions can't access anything but their args).</p>

<p>To summarize: scopes - good, routine syntax - helpful and already it is as much about the (regulated state of) data than flow control.<br />
 <br />
Once you get a lot of subs, you prevent name collisions with name spaces (packages), that also give you order so that each sub is in the right place in the hierarchy. But when the namespaces get nested and names becoming longer you start to whish for classes, so you can call the method directly on the object - but were not there yet. Also, attribute data is sanitized once, when coming via a setter into the object and can be used over and over without any second check. So you can pass the object into a sub and data can be used without check, which makes for more efficient code (huh, efficient and oop in same sentnce?). This advantage would vanish if you could reach into object internals, when not having no real encapsulation like in vanilla p5 - but still this is not my main two points.</p>

<p>With the ability to capsule data you can guarantee to oblige to contracts, since noone else touched the data than the little code you have inside you small class. (I already touched on that.).  Most importantly strict abstraction layer walls will tell you if your abstraction layers are appropriate. You will notice it if there is a need to violate them or if your classes or methods get to big. These are clear signs that code has to be refactored. And if you have to many classes, it is a sign you don't have enough high order classes. OOP can be used in a very functional manner which is often less painful (in larger projects) than being strictly  functional and fighting with the strict rules of monads all the time. But how exactly do that will be content of the next part ....</p>]]>
    </content>
</entry>
  <entry>
    <title>Interview: Trying to Catch Paul "LeoNerd" Evans</title>
    <link rel="alternate" href="https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.leonerd.org.uk/"&gt;Paul &amp;ldquo;LeoNerd&amp;rdquo; Evans&lt;/a&gt;&lt;/strong&gt; is a
&lt;a href="https://metacpan.org/author/PEVANS"&gt;CPAN author&lt;/a&gt;,
&lt;a href="https://leonerds-code.blogspot.com/"&gt;blogger&lt;/a&gt;,
and &lt;a href="https://github.com/leonerd"&gt;core Perl contributor&lt;/a&gt;. He introduced the
&lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;experimental &lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
in Perl 5.32 and the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax in an upcoming version.&lt;/p&gt;

&lt;h2 id="tell-me-a-little-about-yourself-and-your-background-whatever-you-feel-comfortable-sharing"&gt;Tell me a little about yourself and your background; whatever you feel comfortable sharing.&lt;/h2&gt;

&lt;p&gt;Lets see—I&amp;rsquo;m going to do this in reverse chronological order.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m a self-employed contractor, splitting my time between Perl and other computery things, and electronics. Most of the jobs I&amp;rsquo;ve had before I did that were based on Perl, with the minor exception of a little Internet startup company called &amp;ldquo;Google&amp;rdquo;—
maybe you&amp;rsquo;ve heard of them? Sadly they don&amp;rsquo;t do much Perl there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-did-you-first-get-into-programming-perl-and-then-later-hacking-on-perl-s-core"&gt;How did you first get into programming Perl, and then later hacking on Perl&amp;rsquo;s core?&lt;/h2&gt;

&lt;p&gt;I dabbled in a little amount of it at university, during my final year. When I ought to have been studying type systems and other academic stuff I found it much more interesting to be hacking on bits of C and Perl instead, much to the dismay of my supervisors. My first post-study job happened to be in Perl and I&amp;rsquo;ve just stuck with it ever since.&lt;/p&gt;

&lt;p&gt;The core hacking all came as a slow progression from writing Perl code, to writing modules, to the inevitable having to write bits of &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS code&lt;/a&gt; for some of those modules. The deeper you dive into that area the more you find you have to understand how the internals of the interpreter work. The largest amount of time I spent on that was probably while making the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; module—that has to have quite a tight in-depth integration with the interpreter core, in order to successfully suspend and resume running functions, which is the basis of how the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax all works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="you-first-uploaded-the-syntax-keyword-try-module-to-cpan-in-2016-and-at-the-time-there-were-and-are-still-a-number-of-other-modules-with-similar-functionality-you-compared-their-differences-in-the-syntax-keyword-try-documentation-but-were-there-any-particular-issues-that-inspired-you-to-contribute-another-module"&gt;You first uploaded the Syntax::Keyword::Try module to CPAN in 2016, and at the time there were (and are still) a number of other modules with similar functionality. You compared their differences in the Syntax::Keyword::Try documentation, but were there any particular issues that inspired you to contribute another module?&lt;/h2&gt;

&lt;p&gt;Two reasons. The first reason I wrote it just for myself, was a learning exercise to see if I could understand and use this new-fangled &amp;ldquo;&lt;a href="https://perldoc.perl.org/perlapi#wrap_keyword_plugin"&gt;custom keyword&lt;/a&gt;&amp;rdquo; mechanism that was recently added to Perl. Once I had a proof-of-concept working, it didn&amp;rsquo;t take me long to work out how to write it &amp;ldquo;correctly&amp;rdquo;—in the sense that the body of the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks were true blocks, and not closures-in-disguise like all of the pure Perl and even all of the custom syntax modules at the time were all doing. This meant it had a much ligher calling overhead, doesn&amp;rsquo;t interact with &lt;code&gt;@_&lt;/code&gt;, plays nicer with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;, and all sorts of other advantages. From there it didn&amp;rsquo;t take me too long before I had something that I felt had real technical advantages than anything else that came before, so I tried to encourage its use. &lt;a href="irc://irc.freenode.org/perl"&gt;Freenode&amp;rsquo;s #perl channel&lt;/a&gt; in particular were very instrumental in helping that effort, adopting it in their recommendations to new users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="recently-you-ve-spearheaded-adding-native-try-catch-syntax-to-native-perl-and-released-the-feature-compat-try-module-to-offer-the-same-syntax-for-earlier-versions-currently-the-former-is-enabled-by-a-feature-guard-do-you-anticipate-a-time-when-this-will-no-longer-be-the-case-would-that-cause-issues-with-code-that-uses-other-try-catch-syntax-modules"&gt;Recently you&amp;rsquo;ve spearheaded adding native try/catch syntax to native Perl, and released the Feature::Compat::Try module to offer the same syntax for earlier versions. Currently the former is enabled by a feature guard; do you anticipate a time when this will no longer be the case? Would that cause issues with code that uses other try/catch syntax modules?&lt;/h2&gt;

&lt;p&gt;I think it will be quite a while yet before we can see a Perl that would enable it &lt;em&gt;by default&lt;/em&gt;, but I hope very soon it will make its way into the numbered version bundles. That is, I hope that simply&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.36&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be enough to enable the &lt;code&gt;try&lt;/code&gt; syntax, and if and when such a time comes that we decide to bump the major version to 7, that will continue to hold—merely saying&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v7;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be sufficient to get that—along with all the other fancy fun things I hope to see by that time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-do-you-envision-syntax-keyword-try-s-role-going-forward-will-it-be-a-testbed-for-future-native-perl-exception-features"&gt;How do you envision Syntax::Keyword::Try&amp;rsquo;s role going forward? Will it be a testbed for future native Perl exception features?&lt;/h2&gt;

&lt;p&gt;It already is just that. There are more features in Syntax::Keyword::Try than the &amp;ldquo;minimal viable product&amp;rdquo; part that I ported to core in &lt;a href="https://github.com/Perl/perl5/releases/tag/v5.33.7"&gt;5.33&lt;/a&gt;. Two main things come to mind—the typed exception dispatch, and the &lt;code&gt;finally&lt;/code&gt; blocks. I&amp;rsquo;ve lately been looking at some &lt;code&gt;defer&lt;/code&gt; syntax for a more general-purpose version of &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question of how to handle typed dispatch is a more general one, which needs addressing in a wider language context—perhaps including considerations of signatures, &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt; syntax, variable or object slot type assertions, and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="what-s-next-for-you-aside-from-exceptions-in-perl-i-ve-been-reading-about-the-work-you-ve-been-doing-with-curtis-ovid-poe-on-and-your-object-pad-module-would-you-like-to-speak-on-that"&gt;What&amp;rsquo;s next for you aside from exceptions in Perl? I&amp;rsquo;ve been reading about the work you&amp;rsquo;ve been doing with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe on and your Object::Pad module—would you like to speak on that?&lt;/h2&gt;

&lt;p&gt;Yes, object systems seem to be of interest currently—so part of my thoughts are about &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt;. But I&amp;rsquo;m also working on a number of other things. &lt;code&gt;defer&lt;/code&gt; I already mentioned above. Additionally I have some thoughts in the direction of &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;, and a few other bits and pieces. These would mostly be done as CPAN modules at first to experiment with the ideas. I mentioned a lot of them in my recent &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;&amp;ldquo;Perl in 2025&amp;rdquo; talk at FOSDEM&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/</id>
    <published>2021-03-30T01:24:37Z</published>
    <updated>2021-03-30T01:24:37Z</updated>
  </entry>
  <entry>
  <title>Security Issues in Perl IP Address distros</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/security-issues-in-perl-ip-address-distros"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/security-issues-in-perl-ip-address-distros</id>
  <published>2021-03-29T20:51:04</published>
  <updated>2021-03-29T20:51:04</updated>
  <summary>
  <![CDATA[
     **TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.** If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on Dave Rolsky's personal blog. 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><strong>TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.</strong></p>

<p>If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on <a href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/">Dave Rolsky's personal blog</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Outreachy 2021 projects published</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreach-2021-projects"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/outreach-2021-projects</id>
  <published>2021-03-29T20:12:58</published>
  <updated>2021-03-29T20:12:58</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month to make contributions and create a final application. Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products Improve the Perl code quality of Open Food Facts These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. Additionally, Outreachy has one more Perl project sponsored by 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month (till April 30, 2021 at 4pm UTC) to make contributions and create a final application.</p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-ingredients-analysis-in-open-food-fact">Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products</a></li>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-perl-code-quality-of-open-food-facts">Improve the Perl code quality of Open Food Facts</a></li>
</ul>

<p>These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. </p>

<p>Additionally, Outreachy has one more Perl project sponsored by <a href="https://matrix.org/">Matrix</a>. </p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/matrix/#extend-and-improve-complement-our-end-to-end-test-">Extend and Improve Complement, our end-to-end test suite</a></li>
</ul>

<p>If you have any questions about the TPF-sponsored projects, feel free to contact Stéphane Gigandet (stephane@openfoodfacts.org) or Makoto Nozaki (makoto@perlfoundation.org).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4523734777886205462</id>
    <published>2021-03-27T18:49:00.000+01:00</published>
    <updated>2021-03-27T18:49:10.026+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiv) 20 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTROUT/App-opan-0.003003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::opan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A CPAN overlay for darkpan and pinning purposes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.003003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.003002 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.43 was 11 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9720&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.9718 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.16&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 4.14 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Markdent-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Markdent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An event-based Markdown parser toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.12&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.11 was 6 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.21&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.20 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210320&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.14&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.12 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.02&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.00 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.17&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.16 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 280&lt;/li&gt;  &lt;li&gt;Previous version: 2.004004 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.010&lt;/strong&gt; on 2021-03-22&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 2.009 was 3 years, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.032&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.029 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.140&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 111&lt;/li&gt;  &lt;li&gt;Previous version: 1.138 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.712&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 7.711001 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BAKERSCOT/String-Util-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;String::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - String processing utility functions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2021-03-26&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.23&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.21 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4523734777886205462/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html" title="(cccxxxiv) 20 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-159827276407573698</id>
    <published>2021-03-27T18:44:00.003+01:00</published>
    <updated>2021-03-27T18:44:38.493+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlx) metacpan weekly report - Hash::Flatten</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten"&gt;Hash::Flatten&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/27 17:43:05 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache2::SSI" target="_blank"&gt;Apache2::SSI&lt;/a&gt; - Apache2 Server Side Include&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::japerl" target="_blank"&gt;App::japerl&lt;/a&gt; - JPerl-again Perl glocalization scripting environment&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::DifferenceSet::Planar" target="_blank"&gt;Math::DifferenceSet::Planar&lt;/a&gt; - object class for planar difference sets&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; - run Perl script in MBCS encoding (not only CJK ;-)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; - Perl client for Playwright&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch::Cxn::NetCurl" target="_blank"&gt;Search::Elasticsearch::Cxn::NetCurl&lt;/a&gt; - A Cxn implementation which uses libcurl via Net::Curl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Typesense" target="_blank"&gt;Search::Typesense&lt;/a&gt; - Perl interface to Typesense search engine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=255)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Applify" target="_blank"&gt;Applify&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::ReverseDependencies" target="_blank"&gt;CPAN::ReverseDependencies&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Firebird" target="_blank"&gt;DBD::Firebird&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eval::Closure" target="_blank"&gt;Eval::Closure&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GDGraph" target="_blank"&gt;GDGraph&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+3=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+2=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+2=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e::RoundTrip" target="_blank"&gt;Jacode4e::RoundTrip&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdent" target="_blank"&gt;Markdent&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Open" target="_blank"&gt;Modern::Open&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Log::Log4perl" target="_blank"&gt;MojoX::Log::Log4perl&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=280)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ" target="_blank"&gt;Net::AMQP::RabbitMQ&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kafka" target="_blank"&gt;Net::Kafka&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=372)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter" target="_blank"&gt;Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ph" target="_blank"&gt;ph&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Profiler::NYTProf" target="_blank"&gt;Plack::Middleware::Profiler::NYTProf&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Clipboard" target="_blank"&gt;Win32::Clipboard&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/159827276407573698/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html" title="(cdlx) metacpan weekly report - Hash::Flatten"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>LibUV Grant: March 2021 Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-libuv-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-report-libuv-2021-03</id>
  <published>2021-03-26T14:41:47</published>
  <updated>2021-03-26T14:41:47</updated>
  <summary>
  <![CDATA[
     Paul Evans' LibUV grant is starting to wrap up. He writes: I've been doing some CPAN releases now, most recent trying to fix a few MSWin32 bugs. I think we're in the final bits now of just trying to finish the thing off and actually get it working. It seems to be mostly fine on Linux now at least.  https://metacpan.org/release/PEVANS/UV-1.905-TRIAL 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul Evans' LibUV grant is starting to wrap up. He writes:</p>

<hr />

<p>I've been doing some CPAN releases now, most recent trying to fix a few
MSWin32 bugs. I think we're in the final bits now of just trying to
finish the thing off and actually get it working. It seems to be mostly
fine on Linux now at least.</p>

<p>https://metacpan.org/release/PEVANS/UV-1.905-TRIAL</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>unzip using Archive::Any of Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></summary>
  <updated>2021-03-25T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/unzip"/>  <id>https://perlmaven.com/unzip</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Which Version of Perl are you using?</title>
  <summary type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></summary>
  <updated>2021-03-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-version-poll-2020-03"/>  <id>https://perlmaven.com/perl-version-poll-2020-03</id>
  <content type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>undef - defined - true -false</title>
  <summary type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></summary>
  <updated>2021-03-23T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/undef-defined-true-false"/>  <id>https://perlmaven.com/undef-defined-true-false</id>
  <content type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Weekly Challenge 103: Astrology and Audio</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/14#pwc103" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a year $year. Write a script to determine the Chinese Zodiac for the given year $year.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a year $year.
# Write a script to determine the Chinese Zodiac for the given year $year
##
use constant ELEMENTS =&gt; {1 =&gt; q/Wood/, 2 =&gt; q/Fire/, 3 =&gt; q/Earth/, 4 =&gt; q/Metal/, 0 =&gt; q/Water/};
use constant ANIMALS =&gt;  {1 =&gt; q/Rat/, 2 =&gt; q/Ox/, 3 =&gt; q/Tiger/, 4 =&gt; q/Rabbit/, 5 =&gt; q/Dragon/, 6 =&gt; q/Snake/, 7 =&gt; q/Horse/, 8 =&gt; q/Goat/, 9 =&gt; q/Monkey/, 10 =&gt; q/Rooster/, 11 =&gt; q/Dog/, 0 =&gt; q/Pig/}; 

sub chinese_zodiac{
    my($year) = @_;
    return ELEMENTS-&gt;{$year % 5} . " " . ANIMALS-&gt;{($year + 9) % 12};    
} 

MAIN:{
    my($YEAR);
    $YEAR = 2017;
    print chinese_zodiac($YEAR) . "\n";
    $YEAR = 1938;
    print chinese_zodiac($YEAR) . "\n";
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Fire Rooster
Earth Tiger
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;When I first saw the problem statement for this part of the challenge I took a look at the cited Wikipedia article, but it just seemed like a real slog of a read. So I decided to just work backwards from the examples given! Pretty much this seems to boil down to a straightforward modular arithmetic problem. The values are all known and so I hard code then with &lt;code&gt;use constant&lt;/code&gt; and then use them directly.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a program to output which file is currently playing.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub song_times{
    my($file_name) = @_; 
    my %song_times;
    my @song_order;
    my $length = 0; 
    my $index = 0;  
    if(!$file_name){
        while(&lt;DATA&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$index] =  $song; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    else{
        open(FILE, $file_name); 
        while(&lt;FILE&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$song] =  $index; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    return [\%song_times, \@song_order, $length];   
}

sub now_playing{
    my($start_time, $current_time, $file_name) = @_; 
    my($song_times, $song_order, $length_millis);
    $current_time = time() if !$current_time; 
    ($song_times, $song_order, $length_millis) = @{song_times()} if $file_name;   
    ($song_times, $song_order, $length_millis) = @{song_times($file_name)} if !$file_name;   
    my $time_playing = $current_time - $start_time;
    my $cycles = ($time_playing * 1000) / $length_millis;  
    my $current_cycle_millis = ($cycles - int($cycles)) * $length_millis;  
    my $seek_time = 0; 
    for my $song (@{$song_order}){
        $seek_time += $song_times-&gt;{$song};
        if($seek_time &gt; $current_cycle_millis){
            my $position = ($song_times-&gt;{$song} - ($seek_time - $current_cycle_millis)) / 1000; 
            my $hours = int($position/3600);
            my $minutes = int(($position % 3600) / 60);
            my $seconds = int(($position % 3600) % 60);
            $position = sprintf("%02d", $hours) . ":" . sprintf("%02d", $minutes) . ":" . sprintf("%02d", $seconds);    
            return ($song, $position);  
        }   
    }  
}  

MAIN:{
    my($song, $position) =  now_playing(1606134123, 1614591276);   
    print "$song\n$position\n";  
}  

__DATA__
1709363,"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
1723781,"Les Miserables Episode 2: Javert (broadcast date: 1937-07-30)"
1723781,"Les Miserables Episode 3: The Trial (broadcast date: 1937-08-06)"
1678356,"Les Miserables Episode 4: Cosette (broadcast date: 1937-08-13)"
1646043,"Les Miserables Episode 5: The Grave (broadcast date: 1937-08-20)"
1714640,"Les Miserables Episode 6: The Barricade (broadcast date: 1937-08-27)"
1714640,"Les Miserables Episode 7: Conclusion (broadcast date: 1937-09-03)"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
00:10:24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I have to say that I found this deceptively harder to implement than it first appears! I suppose that is always true when working with time.&lt;/p&gt;
&lt;p&gt;In the spirit of good sportsmanship wrote the code to fit the specification given, but then allow for defaults, such as reading from &lt;code&gt;&amp;lt;DATA&amp;gt;&lt;/code&gt; and using the value of &lt;code&gt;time()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way this works here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file list is read in and the times of the songs and the total length of the whole playlist is saved.&lt;/li&gt;
&lt;li&gt;We find out where in the playlist “cycle” we are.&lt;/li&gt;
&lt;li&gt;Given the time of the cycle we “seek” to the position of the current song.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103/"&gt;Challenge 103&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Chinese_zodiac"&gt;Chinese Zodiac&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc103</id>
    <published>2021-03-14T16:46:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Why I wrote Net::Google::CivicInformation</title>
    <link rel="alternate" href="https://perl.com/article/why-i-wrote-net-google-civicinformation/" type="text/html"/>
    <content type="html">

&lt;p&gt;Before I became a computer programmer, I tried my hand at being a human programmer, in the form of a wordsmith, as I called myself then. I had various jobs as a writer, editor, translator and journalist, but I met with little success, for two main reasons. In those days you needed a publisher to find your work interesting enough to publish before anyone could read it, and that was a pretty high bar. And in the second place, it was difficult to get the humans to react to the content I wrote (I&amp;rsquo;m still exercised that the movie reviewer would get more letters to the editor than I did after a political exposé that took a month to produce).&lt;/p&gt;

&lt;p&gt;I still remember the moment of awe and inspiration in early 1994 or so, when after acquiring a sparkly new i286 PC at Circuit City, I discovered the World Wide Web and its promise of a world free of publishers and constraining editors. I jumped right in and became one of the first &amp;ldquo;webmasters,&amp;rdquo; which led to a job where I needed to learn Perl. Over a short time I began to thrill more at the construction of the engine to publish the content than at the creating of it. I still had the barrier-free entry point, and as to my second gripe &amp;hellip; well, I found that computers respond much more predictably to my writing than humans ever did.&lt;/p&gt;

&lt;p&gt;Fast forward almost 25 years and lots of things have changed, but I still get an itch scratched by building &amp;ldquo;websites.&amp;rdquo; Of course now they are called REST APIs or webapps or microservices or whatever the newest term is, and I deliver mostly JSON data packets to other computers inside big organizations—it&amp;rsquo;s been 20 years since I used CGI.pm—but I&amp;rsquo;m very blessed to have had a long career in the same field with fast-evolving technologies, supported throughout by Perl and its amazing community of contributors.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;d think maybe that after spending all week building APIs at work I&amp;rsquo;d be sated, but last weekend found me hankering for a new project, something outside work, but using my expertise, and something that could have real value for other people. I also specifically wanted to see if I could provide for the CPAN a library to interface to a useful public API. I&amp;rsquo;ve contributed a handful of insignificant distributions over the years, and found it to be very satisfying and also that it forces me to up my game as far as quality control and attention to detail. Yet I&amp;rsquo;d never found an opportunity to contribute a module in the area I know best.&lt;/p&gt;

&lt;p&gt;Usually all the best ideas are taken, of course, especially when it comes to the CPAN. It seemed there was a client for every API you could think of, but eventually I stumbled upon one that I found to be super-cool, and unsupported in Perl! The &lt;a href="https://developers.google.com/civic-information"&gt;Google Civic Information API&lt;/a&gt; provides extensive contact information for all elected officials from head of state down to county tax collector for any US address.&lt;/p&gt;

&lt;h2 id="silence-betokens-consent"&gt;Silence betokens consent&lt;/h2&gt;

&lt;p&gt;Like many of you, I suppose, I am still somewhat shell-shocked at the sustained assault on democracy and democratic participation that has been going on lately, not to mention that so many elected &amp;ldquo;leaders&amp;rdquo; seem to be insulated from the people. I also considered the COVID pandemic—not just its awful toll and the crass incompetence of the government response, but also how it has made us all much more isolated from each other, and how technologies that bring people together are even more important now that, for example, you can&amp;rsquo;t readily show up with a neighborhood community group to a crowded county board meeting to make your views heard. But silence betokens consent, and if our elected officials don&amp;rsquo;t hear from us they will just continue to do what they do.&lt;/p&gt;

&lt;p&gt;With all that in mind I set to creating a Perl client for the API. The first step was to obtain an auth token, which Google provides to developers for free (with a limit on daily queries). Authentication is extremely simple, so using &lt;a href="https://metacpan.org/pod/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt; I quickly had a client in my module that could connect to the API and make queries. Because elected officials&amp;rsquo; contact information is only one thing the API provides, I made a parent class &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation"&gt;Net::Google::CivicInformation&lt;/a&gt; and subclass &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation::Representatives"&gt;Net::Google::CivicInformation::Representatives&lt;/a&gt; handling the representatives-related code. This will allow me or other authors to write sibling subclasses for other endpoints in future.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a portion of the subclass for fetching Representatives data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Net::Google::CivicInformation::Representatives;

&lt;span style="color:#66d9ef"&gt;our&lt;/span&gt; $VERSION &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1.02&amp;#39;&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.10&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Carp &lt;span style="color:#e6db74"&gt;&amp;#39;croak&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Function::Parameters;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; JSON::MaybeXS;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Try::Tiny;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Types::Common::String &lt;span style="color:#e6db74"&gt;&amp;#39;NonEmptyStr&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; URI;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Moo;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; namespace::clean;

extends &lt;span style="color:#e6db74"&gt;&amp;#39;Net::Google::CivicInformation&amp;#39;&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_build__api_url&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#39;representatives&amp;#39;&lt;/span&gt;}

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
method representatives_for_address (NonEmptyStr $address) {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $uri &lt;span style="color:#f92672"&gt;=&lt;/span&gt; URI&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;( $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_api_url );
    $uri&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;query_form( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $address, key &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;api_key );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $call &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get( $uri );
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response;

    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parent class has the &lt;code&gt;api_url&lt;/code&gt; attribute whose coercion prepends the root URL to the value returned by the subclasses&amp;rsquo; builder override. Note the use of &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt; for signatures and &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt; for type validation, which reduce the subroutine boilerplate nicely.&lt;/p&gt;

&lt;p&gt;Most of the work in creating the client distribution was in deciding how to marshal and reformat the extensive JSON data structure returned by Google. The results are organized into &lt;a href="http://docs.opencivicdata.org/en/latest/proposals/0002.html"&gt;Open Civic Data Divisions&lt;/a&gt;, an international standard adopted by Google for its service. An OCD Division ID can be as generic as &lt;code&gt;ocd-division/country:us&lt;/code&gt; or as specific as &lt;code&gt;ocd-division/country:us/state:ny/place:new_york/council_district:36&lt;/code&gt;. Google provides filtering on the data sets but I chose to use a high-level endpoint that returns all levels of officials for a single specific address (although a zip code alone works most of the time as well).&lt;/p&gt;

&lt;p&gt;After a few attempts I had it working in a simple way that was pleasing to me as a consumer of the module, and I documented the arrayref of hashrefs it would return representing the, um, representatives. I wrote some tests and bundled up the distribution and uploaded it to PAUSE.&lt;/p&gt;

&lt;h2 id="setting-up-the-webservice"&gt;Setting up the webservice&lt;/h2&gt;

&lt;p&gt;The next step was to put the new client to use, and a public-facing web app seemed the obvious choice. I&amp;rsquo;ve learned over the years that the majority of people still think of a .com domain as most inviting, and that a readable name is key. I settled on &lt;strong&gt;ContactMyReps&lt;/strong&gt; for the name, registered the &lt;a href="https://contactmyreps.com"&gt;contactmyreps.com&lt;/a&gt; domain, and pointed it at my server. At work I use &lt;a href="https://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt; but I far prefer &lt;a href="https://metacpan.org/pod/Dancer2"&gt;Dancer2&lt;/a&gt;—it feels much more light weight and flexible and Perlish to me.&lt;/p&gt;

&lt;p&gt;The POST route handler for the lookup query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;post &lt;span style="color:#e6db74"&gt;&amp;#39;/find-by-address&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; params;

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( &lt;span style="color:#f92672"&gt;not&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} ) {
        send_error(&lt;span style="color:#e6db74"&gt;&amp;#39;Error: address is required.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;400&lt;/span&gt; );
    }

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $client &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::Google::CivicInformation::Representatives&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;representatives_for_address($params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address});

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error} ) {
        $result{error} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error};
    }
    &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
        $result{officials} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; decode_utf8(encode_json($response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{officials}));
    }

    &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; template &lt;span style="color:#e6db74"&gt;&amp;#39;find-by-address&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;\&lt;/span&gt;%result;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The backend side of the webapp was done in an hour, and then I set to the presentation. It took a while but I came up with a design that seemed functional and aesthetically acceptable. After testing locally I was ready to deploy, and after creating a new TLS cert and updating the &lt;code&gt;Apache&lt;/code&gt; config, the site was up and running. (The source code is available &lt;a href="https://github.com/1nickt/ContactMyReps"&gt;on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perl.com/images/why_i_wrote_net_google_civicinformation/expanded.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I sent the link to the to a couple of friends to see what they thought, and posted to &lt;a href="http://blogs.perl.org/users/1nickt/2021/02/who-you-gonna-call-perl-client-and-website-for-google-civic-information-api.html"&gt;blogs.perl.org&lt;/a&gt; to get some live testing, and was pleased when other people started using the site.&lt;/p&gt;

&lt;h2 id="wrapping-up"&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Having conceived of and implemented the idea in less than 24 hours, I was pretty exhilarated and on a roll. I decided that if a thing was worth doing, it was worth doing well, so I signed up for a few hundred dollars in Google advertising to promote the site next to relevant search results. I also set up a Buy Me a Coffee account and placed a button on the search results display. It costs about $1.20 to buy a click to the site, so I figure if 10% of the visitors contribute something, they&amp;rsquo;ll pay for the advertising to reach new audiences and the thing will be self-sustaining.&lt;/p&gt;

&lt;p&gt;All in all it was a fun way to spend a winter weekend. The service is online at &lt;a href="https://contactmyreps.com"&gt;https://contactmyreps.com&lt;/a&gt; if you&amp;rsquo;d like to check it out!&lt;/p&gt;
</content>
    <id>https://perl.com/article/why-i-wrote-net-google-civicinformation/</id>
    <published>2021-03-09T19:35:09Z</published>
    <updated>2021-03-09T19:35:09Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 102: Threads and Recursion</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/07#pwc102" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to generate all Rare Numbers of size &lt;code&gt;$N&lt;/code&gt; if any exist.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Thread;
use constant THREAD_COUNT =&gt; 4;

sub rare_number_check{
    my($lower, $upper) = @_;
    my @rares; 
    {
        my $r = $lower;
        my $r1 = reverse($r);  
        if($r &gt; $r1){
            my $rs = sqrt($r + $r1);  
            my $r1s = sqrt($r - $r1);  
            if($rs !~ m/\./ &amp;&amp; $r1s !~ m/\./){
                push @rares, $lower; 
            } 
        } 
        $lower++; 
        redo unless $lower &gt; $upper;
    }  
    return \@rares;
}

sub rare_number{
    my($n) = @_;
    my @rares; 
    my $lower = "1" . 0 x ($n - 1);
    my $upper = "1" . 9 x ($n - 1);
    my $increment = $lower;
    {
        my @threads;
        for(1 .. THREAD_COUNT){
            my $t = Thread-&gt;new(\&amp;rare_number_check, $lower, $upper); 
            push @threads, $t;
            $lower = $upper + 1;
            $upper = $lower + $increment - 1;  
            last if(length($upper) == ($n + 1)); 
        }
        foreach my $t (@threads){
            my $rares = $t-&gt;join();
            push @rares, @{$rares}; 
        }  
        redo unless(length($upper) == ($n + 1)); 
    }
    return \@rares;  
}

MAIN:{
    my($N);
    $N=2;
    my $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=6;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=9;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2 digits: 65
6 digits: 621770
9 digits: 281089082
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My approach here is &lt;em&gt;brute force&lt;/em&gt;, but with a slight twist. I parallelize the computations by using &lt;a href="https://perldoc.perl.org/threads"&gt;Threads&lt;/a&gt;. I’ve used Threads in the past, for example in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/18"&gt;Challenge 008&lt;/a&gt; Threads were used to compute Perfect Numbers. The search for Perfect Numbers bears enough similarity to the current problem with Rare Numbers that the code from Challenge 008 will also be similar to this week’s code.&lt;/p&gt;
&lt;p&gt;There are four CPU cores on the system I am running this code on. We can create any number of Threads that we need, of course, but Perl Threads are a special sort of “thread” in that they create new copies of the running interpreter and so consume a bit more memory than the sort of light weight threads you may learn about in C or Java. In the interest of conserving memory, and to avoid having multiple &lt;em&gt;interpreter threads&lt;/em&gt; running on the same core we’ll just create no more than four Threads at a time. &lt;em&gt;Note: Ultimately it is the OS which schedules where things run but, generally speaking, four threads on a four core system will each run on individual cores.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can demonstrate this to ourselves by increasing the number of threads beyond the number of cores and not seeing an improvement in execution time.&lt;/p&gt;
&lt;p&gt;Each Thread will get a slice of the search space. Each slice is of size &lt;code&gt;10 ** ($N - 1)&lt;/code&gt;. Threads run &lt;code&gt;sub rare_number_check&lt;/code&gt; which implements the definition of a Rare Number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I chose to use a bare block with &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;. This is purely a matter of style and aesthetics. I’d argue that in this case it is more readable than the equivalent &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops would be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub rare_number&lt;/code&gt; which generates and co-ordinates the Threads also uses redo for similar reasons.&lt;/li&gt;
&lt;li&gt;Interestingly Perl is clever enough to return a integer with no decimal part in the case of a perfect square! Checking to see if we have a perfect square then becomes a matter of checking to see if the value returned by &lt;a href="https://perldoc.perl.org/functions/sqrt"&gt;sqrt&lt;/a&gt; contains a decimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to produce hash counting string of that length.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub hash_counting_string{
    my($n) = @_;
    return "" if $n == 0; 
    return "#" if $n == 1; 
    my $h = "$n#";  
    return hash_counting_string($n - length($h)) . $h;  
}

MAIN:{
    print hash_counting_string(1). "\n";
    print hash_counting_string(2). "\n";
    print hash_counting_string(3). "\n";
    print hash_counting_string(10). "\n";
    print hash_counting_string(14). "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
#
2#
#3#
#3#5#7#10#
2#4#6#8#11#14#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is what I consider to be a nice clean recursive implementation. When I first saw Part 2 it seemed a bit more complicated than it would later prove to be. My thought process was along the lines of “I am not sure how I would do this in Perl, and I have no idea of how this would go in Prolog either!” Often times I will rely on the insights gained by doing it in one to aid the implementation of the other. In times like this, with no immediately clear solution, I prefer to start off in Perl, and write it in a way which would allow for reproduction in Prolog. Then, as necessary, remove any vestiges of the solution’s origins by conforming to idiomatic Prolog by ensuring things are done declaratively, logically.&lt;/p&gt;
&lt;p&gt;This is actually a long acknowledged use of Perl: &lt;em&gt;algorithm development.&lt;/em&gt; If you see the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/03/07"&gt;Prolog solution for Part 2&lt;/a&gt; you can detect the obvious origins!&lt;/p&gt;
&lt;p&gt;As far as this solution in Perl, perhaps the main “trick” is that we must account for the length of the numeral. So, for example, “14#” consumes three characters and so the next time through we need to generate the hash count for 11 = 14 - 3.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-102/"&gt;Challenge 102&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc102</id>
    <published>2021-03-07T16:28:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
