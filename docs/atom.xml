<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-08-19T12:50:41Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>A dream realized</title>
    <link rel="alternate" href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html"/>
    <id>tag:blogs.perl.org,2021:/users/damian_conway//875.10373</id>
    <published>2021-08-18T01:56:42Z</published>
    <updated>2021-08-19T11:13:14Z</updated>
    <author>
        <name>Damian Conway</name>
        <uri>http://damian.conway.org</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/damian_conway/">
        <![CDATA[<p>Have you heard that they are finally putting together a proposal to add a clean modern OO system into the core of Perl?</p>

<p>If you haven’t, I strongly encourage you to look over <a href="https://github.com/Ovid/Cor">the RFC for Corinna</a>, or at least watch Ovid’s <a href="https://www.youtube.com/watch?v=kSZO-aJg4dM">excellent presentation</a> on the project.</p>

<p>It’s reassuring that <a href="https://github.com/Ovid/Cor/blob/master/rfc/overview.md#contributors">the list of contributors</a> to the proposed design includes some of the most highly respected names in the Perl community, many of whom have previously taken one (or more!) tilts at this particular object-oriented windmill.</p>

<p>Indeed, over the past two decades I too have repeatedly attempted to design and prototype richer and more robust OO systems for Perl, starting way back in the previous millennium with a brief stint as the maintainer of <a href="https://metacpan.org/pod/Class::Struct">Class::Struct</a>, and continuing on though the release of modules such as <a href="https://metacpan.org/pod/Class::Std">Class::Std</a>, <a href="https://metacpan.org/pod/Class::Delegation">Class::Delegation</a>, and most recently: <a href="https://metacpan.org/pod/Dios">Dios</a>.</p>

<p>The Dios module represented almost everything I thought a comprehensive Perl OO system should contain. Not surprisingly, that actually meant it simply stole almost everything that <a href="https://docs.raku.org/language/classtut">Raku’s comprehensive OO system</a> contains <em>(mostly because I had spent quite a lot of time over the past two decades helping design that OO mechanism as well)</em>.</p>

<p>The only three problems with Dios are:</p>

<ul>
<li>It’s not built-in to Perl itself, so its performance is suboptional;</li>
<li>It’s not built-in to Perl itself, so it requires <a href="https://youtu.be/ob6YHpcXmTg?t=493">a huge amount of extremely complex multi-layer code</a> to make it feel as if is;</li>
<li>It’s not built-in to Perl itself, so it's merely one possible choice amongst the vast and incoherent array of entirely reasonable alternatives already on CPAN.</li>
</ul>

<p>That’s why, when people ask me whether I support the Corinna proposal, my response is: <strong><em>OH, HELL YES!</em></strong> I’ve literally been waiting two decades to see Perl gain a proper, built-in, declarative, encapsulated, and performant OO system. And this, I firmly believe, is it.</p>

<p>At this point I could launch into one of my usual extended exegeses on why this particular design is so exceptionally good, but I think two quick and specific examples are actually sufficient to explain my excitement about this proposal.</p>

<p>The first example is purely syntactic. If you were kind enough to watch the <a href="https://youtu.be/ob6YHpcXmTg?t=493">Three Little Words video</a> in which I introduced Dios, you’ll have seen how that module vastly improves the syntax for declaring a Perl class. Instead of something like:</p>

<pre><code>  package Account {
      use experimental 'signatures';
      use Carp 'croak';

      state $next_ID = 'AAA0001';

      sub new($class, %arg) {
          croak('Cannot specify ID as an constructor argument')
              if exists $arg{ID};
          bless {
              name    =&gt; $arg{name}    // croak('Missing name arg'),
              balance =&gt; $arg{balance} // 0,
              ID      =&gt; $next_ID++,
          }, $class;
      }

      sub name ($self) {
          return $self-&gt;{name};
      }

      sub set_name ($self, $newname) {
          $self-&gt;{name} = $newname;
      }

      sub balance ($self) {
          return $self-&gt;{balance};
      }

      sub ID ($self) {
          return $self-&gt;{ID};
      }

      sub deposit ($self, $amount) {
          $self-&gt;{balance} += $amount;
      }

      sub report ($self, $fh = *STDOUT) {
          $fh-&gt;say( $self-&gt;ID . ': ' . $self-&gt;balance );
      }
  }
</code></pre>

<p>...Dios allows you to achieve exactly the same functionality with just:</p>

<pre><code>  use Dios;

  class Account {
      state $next_ID = 'AAA0001';

      has $.name     is rw  is required;
      has $.balance  = 0;
      has $.ID       = $next_ID++;

      method deposit ($amount) {
          $balance += $amount;
      }

      method report ($fh = *STDOUT) {
          $fh-&gt;say( "$ID: $balance" );
      }
  }
</code></pre>

<p>Not only is that three times less code, it’s three times simpler code, which means it’s also likely to be code that’s three times less buggy.</p>

<p>But what really excites me about Corinna is that, under that proposal, the same code would look like this:</p>

<pre><code>  use experimental 'class';

  class Account {

      state $next_ID = 'AAA0001';

      has $name     :param :reader :writer;
      has $balance  :param :reader  = 0;
      has $ID              :reader  = $next_ID++;

      method deposit ($amount) {
          $balance += $amount;
      }

      method report ($fh = *STDOUT) {
          $fh-&gt;say( "$ID: $balance" );
      }
  }
</code></pre>

<p>In other words: just as concise, just as readable, just as declarative. But without the huge behind-the-scenes overheads that Dios currently imposes.</p>

<p>The second example that illustrates why I’m so enthusiastic about the Corinna proposal is simply a subset of the first example. If we zoom in on that <code>deposit()</code> method:</p>

<pre><code>  # under Corinna
  method deposit ($amount) {
      $balance += $amount;
  }
</code></pre>

<p>...we can see an important improvement over the current standard Perl version:</p>

<pre><code>  # under standard Perl
  sub deposit ($self, $amount) {
      $self-&gt;{balance} += $amount;
  }
</code></pre>

<p>...and an even greater improvement over what would be required under
Moose or Moo or Object::InsideOut or most other existing OO frameworks:</p>

<pre><code>  # under most OO frameworks
  sub deposit ($self, $amount) {
      $self-&gt;balance( $self-&gt;balance + $amount );
  }
</code></pre>

<p>Under Corinna, the slots of an object are accessed via simple scalar variables (<em>e.g.</em> <code>$balance</code>) , not via a (slower) hash look-up (<em>e.g.</em> <code>$self->{balance}</code> or via (much slower) accessor methods (<em>e.g.</em> <code>$self->balance</code>).</p>

<p>This means that each individual slot access is going to be faster under Corinna, and so almost every method call will likewise be less expensive. For instance, each call to <code>deposit()</code> is likely to be at least three times quicker than under any of the many OO frameworks, because we’re dispensing with the two additional embedded method calls to <code>$self->balance()</code>.</p>

<p>More subtly, if we happened to misspell our slot variable:</p>

<pre><code>  # under standard Perl
  sub deposit ($self, $amount) {
      $self-&gt;{balence} += $amount;
      # Silent bug (autovivifies useless 'balence' key)
  }

  # under most OO frameworks
  sub deposit ($self, $amount) {
      $self-&gt;balance( $self-&gt;balence + $amount );
      # Runtime exception ("No such method 'balence'...")
  }

  # under Corinna
  method deposit ($amount) {
      $balence += $amount;
      # Compile-time exception: ("No such variable: $balence...")
  }
</code></pre>

<p>I don't know about you, but I'd <em>much</em> rather discover this problem the first time I compile the code, rather than at the first time it happens to actually be executed or, even worse, after a long and fruitless day of trying to debug the mysterious absence of recent deposit amounts.</p>

<p>There are so many other reasons to be enthusiastic about this proposed addition to standard Perl, not the least of which is that it <strong><em>will</em></strong> become standard and universally available, which may finally cut through the endless debate over whether your next project should use Moose or Moos or Moo or Mu or Spiffy or Object::InsideOut or Class::InsideOut or Class::Simple or Class::Easy or Class::Tiny or Class::Std or Dios or...</p>

<p>So, yes, I’m very excited about the <a href="https://github.com/Ovid/Cor">RFC for Corinna</a>, and I strongly encourage you to take a look for yourself at the powerful new OO features that will soon be proposed for Perl.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>RakuAST Grant Report for June 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jnthn-rakuast-grant-report-2021-06"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/jnthn-rakuast-grant-report-2021-06</id>
  <published>2021-08-19T08:44:09</published>
  <updated>2021-08-19T08:44:09</updated>
  <summary>
  <![CDATA[
     Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's. Jonathan also gave a talk during the first Raku conference on the topic of RakuAST. It is a highly recommended watch. My work on RakuAST and the new RakuAST-based compiler frontend in June saw a further 40 test files from the Raku test suite start to pass in full. I 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's.</p>

<p>Jonathan also gave a talk during the first Raku conference <a href="https://conf.raku.org/talk/147">on the topic of RakuAST.</a> It is a highly recommended watch.</p>

<hr />

<p>My work on RakuAST and the new RakuAST-based compiler frontend in June
saw a further 40 test files from the Raku test suite start to pass in full.
I added RakuAST nodes and compilation to them for the following language
features:</p>

<ul>
<li>Regex back-references</li>
<li>Named regex captures of the form <code>$&lt;foo&gt;=[bar]</code></li>
<li>Regex sigspace</li>
<li>Substitutions (both for <code>s/x/y/</code> and <code>s[x] = 'y'</code> forms)</li>
<li>Postfix, prefix, and infix hyper ops</li>
</ul>

<p>I also did a number of other improvements:</p>

<ul>
<li>Added support for all regex adverbs to the <code>m//</code> and <code>rx//</code> AST nodes
(this came before substitutions, which were made to support the applicable
adverbs right away)</li>
<li>Added compilation of <code>@$foo</code> contextualizers (without parentheses)
to the existing RakuAST contextualizer nodes</li>
<li>Ensured that <code>/&lt;foo&gt;/</code> assertions in regexes find a lexical rule of
that name if it exists before looking for a method</li>
<li>Added support for default parameter values, both with the runtime
semantics and for introspection</li>
<li>Fixed various minor bugs in regex compilation</li>
<li>Reinstated more typed compilation error reporting</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
  <title>LibUV Final Grant Report by Paul Evans</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/libuv-grant-report-final"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/libuv-grant-report-final</id>
  <published>2021-08-19T08:36:19</published>
  <updated>2021-08-19T08:36:19</updated>
  <summary>
  <![CDATA[
     Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant. The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here. The latest release of UV version 2.000 indicates that this project is now fundamentally done. The CPAN version of UV, the libuv binding module, is now sufficiently complete and useable, to allow event systems and 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant.</p>

<p>The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here.</p>

<hr />

<p>The latest release of UV version 2.000 indicates that this project is
now fundamentally done. The CPAN version of UV, the libuv binding
module, is now sufficiently complete and useable, to allow event
systems and other similar modules to make use of the abstractions
provided by libuv.</p>

<p>It's unlikely that most programs would choose to operate directly with
UV itself, but rather via some higher-level event system. There are UV
adapter modules for IO::Async (IO::Async::Loop::UV), Mojo
(Mojo::Reactor::UV), and Future::IO (Future::IO::Impl::UV) at least.</p>

<p>The UV module certainly wraps much of what libuv has to offer, but
there are still some parts missing. libuv can watch filesystems for
changes of files, and provides asynchronous filesystem access access
functions - both of these are currently missing from the Perl binding.
Threadpools are an entire concept that doesn't map very well to the
Perl language, so they are absent too. Finally, libuv lists an entire
category of "miscellaneous functions", most of which are already
available independently in Perl, so there seems little point to
wrapping those provided by libuv.</p>

<p>Finally, we should take note of one thing that doesn't work - the
UV::TCP-&gt;open and UV::UDP-&gt;open functions when running on Windows. The
upshot here is that you cannot create TCP or UDP sockets in your
application independently of libuv and then hand them over to be
handled by the library; this is not permitted. This is because on
Windows, there are fundamentally two different kinds of sockets that
require two different sets of API to access them - ones using
WSA_FLAG_OVERLAPPED, and ones not. libuv needs that flag in order to
perform event-based IO on sockets, and so it won't work with sockets
created without it - which is the usual kind that most other modules,
and perl itself, will create. This means that on Windows, the only
sockets you can use with the UV module are ones created by UV itself -
such as by asking it to connect out to servers, or listen and accept
incoming connections. Fortunately, this is sufficient for the vast
majority of applications.</p>

<p>While approaching the end of this project, I found that there is a
shortage of Win32 experts around Perl. It was difficult to to get some
expert opinion on the Windows-specific testing failures that were
holding back a complete release of this module, as it was unclear
whether the things being tested were supposed to be working or not.</p>

<p>I would like to finish up by saying thanks to The Perl Foundation for
funding me to complete this project.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Making Taint support optional in Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/08/making-taint-support-optional-in-perl.html"/>
    <id>tag:blogs.perl.org,2021:/users/neilb//846.10374</id>
    <published>2021-08-18T14:49:00Z</published>
    <updated>2021-08-18T15:06:57Z</updated>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>One of the changes to Perl that we're considering on p5p (the <a href="https://lists.perl.org/list/perl5-porters.html">perl5-porters mailing list</a>) is the removal of taint support. The first step towards that is to add a Configure option that lets you build a Perl without taint support.</p>

<p>In this post I'll explain what we're considering, and why. The purpose of this post is to let everyone beyond p5p know about this, and give you a chance to comment.</p>
]]>
        <![CDATA[<p>One of the themes for work being done on p5p is tidying up Perl &mdash; removing features that aren't widely used, or which turned out to be a bad idea. There are a number of reasons why we might do this:</p>

<ol>
<li>The feature confuses people who are new to the language.</li>
<li>Removing the feature will improve performance.</li>
<li>Removing the feature will simplify the internals and/or make it easier for other features to be added.</li>
</ol>

<p>One such feature is <a href="https://perldoc.perl.org/perlsec#Taint-mode">taint mode</a>. When taint mode is enabled, Perl runs various checks, such as ensuring that path directories aren't writable by others. In taint mode any data that came from outside your program, for example by reading it from a file, is marked as tainted. Any expression that involves tainted data is itself tainted. You can launder the data to remove the taint flag. See the <a href="https://perldoc.perl.org/perlsec#Taint-mode">section</a> in <a href="https://perldoc.perl.org/perlsec">perlsec</a> for more details.</p>

<p>Support for taint mode adds a runtime overhead, that we think is on the order of 10% in some scenarios. This overhead affects all Perl programs, whether or not you're using taint mode.</p>

<p>If you're concerned about the security of your code, you're probably familiar with the <a href="https://owasp.org/www-project-top-ten/">OWASP top 10</a>, and will be doing a lot more than taint provides. As a result we think very few people use taint mode. Therefore we think it is a candidate for removal from Perl.</p>

<p>The path we currently envisage is this:</p>

<ol>
<li>We will add a Configure option to Perl, to make it easy to build a perl without the taint overhead. By default Configure will enable taint.</li>
<li>At some point later (likely at least 2 years) we will switch the default to not include taint support.</li>
<li>At some further point in the future, we might remove taint support from the codebase.</li>
</ol>

<p>We're interested to hear what people think about this. Maybe more of you use taint than we think, in which case we might stick on step 1 of the above plan. If you want to give feedback on this, add comments here or on <a href="https://www.reddit.com/r/perl/comments/p6o6r0/making_taint_support_optional_in_perl/">reddit</a>.</p>
]]>
    </content>
</entry>
  <entry>
    <title>Perl &amp; Raku: Best frenemies</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-raku-best-frenemies-2hal" type="text/html"/>
    <content type="html">&lt;p&gt;The Perl and Raku programming languages have a complicated history together. The latter was &lt;a href="https://www.perl.com/pub/2000/07/perl6.html/"&gt;envisioned in the year 2000&lt;/a&gt; as Perl 6, a complete redesign and rewrite of Perl to solve its problems of difficult maintenance and the burden of then-13 years of backward compatibility. Unfortunately, the development effort towards a first major release dragged on for ten years, and some developers began to believe the delay contributed to the decline of Perl’s market- and mindshare among programming languages.&lt;/p&gt;

&lt;p&gt;In the intervening years &lt;a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/"&gt;work continued on Perl 5&lt;/a&gt;, and eventually, Perl 6 was &lt;a href="https://www.perl.org/"&gt;positioned&lt;/a&gt; as “a sister language, part of the Perl family, not intended as a replacement for Perl.” Two years ago it was &lt;a href="https://lwn.net/Articles/802329/"&gt;renamed Raku&lt;/a&gt; to better indicate it as a different project.&lt;/p&gt;

&lt;p&gt;Although the two languages aren’t source-compatible, the &lt;a href="https://modules.raku.org/dist/Inline::Perl5:cpan:NINE"&gt;Inline::Perl5&lt;/a&gt; module does enable Raku developers to run Perl code and use Perl modules within Raku, You can even subclass Perl classes in Raku and call Raku methods from Perl code. I hadn’t realized until recently that the Perl support was so strong in Raku despite them being so different, and so I thought I’d take the opportunity to write some sample code in both languages to better understand the Raku way of doing things.&lt;/p&gt;

&lt;p&gt;Rather than a simple &lt;a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program"&gt;“Hello World” program&lt;/a&gt;, I decided to write a simple syndicated news reader. The &lt;a href="https://modules.raku.org/"&gt;Raku modules directory&lt;/a&gt; didn’t appear to have anything comparable to Perl’s &lt;a href="https://metacpan.org/pod/WWW::Mechanize"&gt;WWW::Mechanize&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/XML::RSS"&gt;XML::RSS&lt;/a&gt; modules, so this seemed like a great way to test Perl-Raku interoperability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-feed-finder"&gt;
  &lt;/a&gt;
  Perl Feed Finder
&lt;/h2&gt;

&lt;p&gt;First, the Perl script. I wanted it smart enough to either directly fetch a news feed or find it on a site’s HTML page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the beginning, you’ll notice there’s a bit of boilerplate: &lt;code&gt;use v5.24&lt;/code&gt; (&lt;a href="https://perldoc.perl.org/perl5240delta"&gt;released in 2016&lt;/a&gt;) to enable &lt;a href="https://perldoc.perl.org/strict"&gt;restricting unsafe code&lt;/a&gt;, the &lt;a href="https://perldoc.perl.org/functions/say"&gt;&lt;code&gt;say&lt;/code&gt;&lt;/a&gt; function, and &lt;a href="https://perldoc.perl.org/perlref#Postfix-Dereference-Syntax"&gt;postfix dereferencing&lt;/a&gt; to reduce the noise from nested curly braces. I’m also bringing in the &lt;a href="https://metacpan.org/pod/List::Util#first"&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/List::Util#none"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt; &lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;list processing&lt;/a&gt; functions from &lt;a href="https://metacpan.org/pod/List::Util"&gt;List::Util&lt;/a&gt; as well as the WWW::Mechanize web page retriever and parser and the XML::RSS feed parser.&lt;/p&gt;

&lt;p&gt;Next is an array of possible &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml"&gt;media (formerly MIME) types&lt;/a&gt; used to serve the &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS news feed format&lt;/a&gt; on the web. Like Perl and Raku, RSS formats have a &lt;a href="https://en.wikipedia.org/wiki/History_of_web_syndication_technology"&gt;long and sometimes contentious history&lt;/a&gt;, so a newsreader needs to support several different ways of identifying them on a page.&lt;/p&gt;

&lt;p&gt;The program then creates new WWW::Mechanize (called a &lt;em&gt;mech&lt;/em&gt; for short) and XML::RSS objects for use later and gets a URL to browse from its command-line argument, defaulting to &lt;a href="https://phoenixtrap.com"&gt;my blog&lt;/a&gt; if it has none. &lt;em&gt;(My site, my rules, right?)&lt;/em&gt; It then retrieves that URL from the web. If mech believes that the URL &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Eis_html()"&gt;contains an HTML page&lt;/a&gt; and can find &lt;code&gt;link&lt;/code&gt; tags with &lt;code&gt;rel="alternate"&lt;/code&gt; attributes possibly identifying any news feeds, it then goes on to check the media types of those links against the earlier list of RSS types and retrieves the first one it finds.&lt;/p&gt;

&lt;p&gt;Next comes the only error checking done by this script: checking if the retrieved feed’s media type actually matches the list defined earlier. This prevents the RSS parser from attempting to process plain web pages. This isn’t a large and complicated program, so the die function is called with a trailing newline character (&lt;code&gt;\n&lt;/code&gt;) to suppress reporting the line on which the error occurred.&lt;/p&gt;

&lt;p&gt;Finally, it’s time to output the headlines and links, but before that happens Perl has to be told that they may contain so-called “wide characters” found in the &lt;a href="https://home.unicode.org/"&gt;Unicode standard&lt;/a&gt; but not in the plain &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; that it normally uses. This includes things like the typographical ‘curly quotes’ that I sometimes use in my titles. The last two lines of the script loop through the parsed items in the feed, extracting their titles and links and printing them out with a tab (&lt;code&gt;\t&lt;/code&gt;) separator between them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--So5qkmYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epa9p1qtjaijhce65tfz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--So5qkmYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epa9p1qtjaijhce65tfz.jpeg" alt="Output from feed_finder.pl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raku-feed-finder"&gt;
  &lt;/a&gt;
  Raku Feed Finder
&lt;/h2&gt;

&lt;p&gt;Programming is often just stitching libraries and APIs together, so it shouldn’t have been surprising that the Raku version of the above would be so similar. There are some significant (and sometimes welcome) differences, though, which I’ll go over now:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The first thing to notice is there’s a bit less boilerplate code at the beginning. Raku is a younger language and doesn’t have to add instructions to enable less backward-compatible features. It’s also a larger language with functions and methods built-in that Perl needs to load from modules, though this feed finder program still needs to bring in WWW::Mechanize and XML::RSS with annotations to indicate they’re coming from the &lt;code&gt;Perl5&lt;/code&gt; side of the fence.&lt;/p&gt;

&lt;p&gt;I decided to wrap the majority of the program in a &lt;a href="https://docs.raku.org/language/create-cli#index-entry-MAIN"&gt;&lt;code&gt;MAIN&lt;/code&gt;&lt;/a&gt; function, which handily &lt;a href="https://docs.raku.org/language/create-cli#Calling_a_provided_MAIN_subroutine_using_that_capture"&gt;gives me command line arguments as variables&lt;/a&gt; as well as a &lt;a href="https://docs.raku.org/language/create-cli#Creating_/_showing_usage_information_if_calling_MAIN_failed"&gt;usage message&lt;/a&gt; if someone calls it with a &lt;code&gt;--help&lt;/code&gt; option. This is a neat quality-of-life feature for script authors that cleverly reuses function signatures, and I’d love to see this available in Perl as an extension to its &lt;a href="https://perldoc.perl.org/perlsub#Signatures"&gt;signatures&lt;/a&gt; feature.&lt;/p&gt;

&lt;p&gt;Raku and Perl also differ in that the former &lt;a href="https://docs.raku.org/language/contexts"&gt;has a different concept&lt;/a&gt; of &lt;a href="https://perldoc.perl.org/perldata#Context"&gt;context&lt;/a&gt;, where an expression may be evaluated differently depending upon whether its result is expected to be a single value (scalar) or a list of values. Inline::Perl5 calls Perl functions in list context by default, but you can add the &lt;code&gt;Scalar&lt;/code&gt; type object as a first argument to force scalar context as I’ve done with calls to &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Efind_all_links(-...-)"&gt;&lt;code&gt;find_all_links&lt;/code&gt;&lt;/a&gt; (to return an array reference) and &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Ect()-/-%24mech-%3Econtent_type()"&gt;content_type&lt;/a&gt; (to &lt;a href="https://metacpan.org/pod/HTTP::Headers#%24h-%3Econtent_type"&gt;return the first parameter&lt;/a&gt; of the HTTP Content-Type header).&lt;/p&gt;

&lt;p&gt;Another interesting difference is the use of the &lt;a href="https://docs.raku.org/routine/(elem),%20infix%20%E2%88%88"&gt;&lt;code&gt;(elem)&lt;/code&gt;&lt;/a&gt; operator to determine membership in a set. This is Raku’s ASCII way of spelling the ∈ symbol, which it can also use; &lt;code&gt;!(elem)&lt;/code&gt; can also be spelled &lt;a href="https://docs.raku.org/routine/%E2%88%89"&gt;∉&lt;/a&gt;. Both are hard to type on my keyboard so I chose the more verbose alternative, but if you want your code to more closely resemble mathematical notation it’s nice to know the option is there.&lt;/p&gt;

&lt;p&gt;I also didn’t use Raku’s &lt;a href="https://docs.raku.org/routine/die"&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; routine to exit the program with an error, mainly because of its method of suppressing the line on which the error occurred. It requires &lt;a href="https://docs.raku.org/language/exceptions#index-entry-CATCH"&gt;using a &lt;code&gt;CATCH&lt;/code&gt; block&lt;/a&gt; and then keying off of the type of exception thrown in order to customize its behavior, which seemed like overkill for such a small script. It would have looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    die $mech.uri ~ ' does not have an RSS feed'
        if $response.content_type(Scalar) !(elem) @rss_types;
    CATCH {
        default {
            note .message;
            exit 1;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doubtless, this could be &lt;a href="https://en.wikipedia.org/wiki/Code_golf"&gt;golfed&lt;/a&gt; down to reduce its verbosity at the expense of readability, but I didn’t want to resort to clever tricks when trying to do a one-to-one comparison with Perl. More experienced Raku developers are welcome to set me straight in the comments below.&lt;/p&gt;

&lt;p&gt;The last difference I’ll point out is Raku’s welcome lack of &lt;a href="https://perldoc.perl.org/perlref#Using-References"&gt;dereferencing&lt;/a&gt; operators compared to Perl. This is due to the former’s concept of &lt;a href="https://docs.raku.org/language/containers"&gt;containers&lt;/a&gt;, which I’m &lt;a href="https://docs.raku.org/language/5to6-nutshell#Creating_references_and_using_them"&gt;still learning about&lt;/a&gt;. It seems to be fairly &lt;a href="https://en.wikipedia.org/wiki/DWIM"&gt;DWIM&lt;/a&gt;my so I’m not that worried, but it’s nice to know there’s an understandable mechanism behind it.&lt;/p&gt;

&lt;p&gt;Overall I’m pleased with this first venture into Raku and I enjoyed what I’ve learned of the language so far. It’s not as different with Perl as I anticipated, and I can foresee coding more projects as I learn more. The community on the &lt;a href="https://web.libera.chat/#raku"&gt;&lt;code&gt;#raku&lt;/code&gt; IRC channel&lt;/a&gt;was also very friendly and helpful, so I’ll be hanging out there as time permits.&lt;/p&gt;

&lt;p&gt;What do you think? Can Perl and Raku better learn to coexist, or are they destined to be rivals? Leave a comment below.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: &lt;a href="https://www.flickr.com/photos/38631185@N06/5551846737"&gt;“Frenemies 2”&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/38631185@N06"&gt;Mauricio Delgado&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=ccsearch&amp;amp;atype=rich"&gt;CC BY-SA 2.0&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-raku-best-frenemies-2hal</id>
    <published>2021-08-17T14:00:00Z</published>
    <updated>2021-08-17T14:00:00Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="rakulang"/>
    <category term="rss"/>
  </entry>
  <entry>
    <title>Weekly Challenge 126</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-126-19fg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-126/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-count-numbers">
  </a>
  TASK #1 › Count Numbers
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code>.</p>

<p>Write a script to print count of numbers from 1 to <code>$N</code> that don’t contain digit 1.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This seems pretty straight forward. Have a loop from 2 to <code>$N</code> and add one if that number does not contain a one <code>index( $number, '1' ) == -1</code>.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 15
8

$ ./ch-1.pl 25
13
</code></pre>

</div>



<h2>
  <a href="#task-2-minesweeper-game">
  </a>
  TASK #2 › Minesweeper Game
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a rectangle with points marked with either x or *. Please consider the x as a land mine.</p>

<p>Write a script to print a rectangle with numbers and x as in the Minesweeper game.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>My solution is basically two sub-tasks. The first is processing the input, and the second is populating the board.</p>

<p>In the real world, you generally know what the input to a program is be it a file, URI or an HTTP request. For Team TWC challenges, this is up to the author to decide. For most tasks, it is usually a series of values than can be read from <code>@ARGV</code>. For this task, I read lines from STDIN. This allows a file to be piped in.</p>

<p>I turn the input into an array of arrays of <code>x</code> (mines) and <code>*</code> (non mines). I skip any blank lines, and then check all rows have the same number of columns.</p>

<p>The next part is to work through each cell. If it doesn't have a mine, I count the number of mines in the surrounding cells, making sure that we don't outside the bounds of the board. I then replace the cell value with the number of mines.</p>

<p>The last step is to print the output.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl &lt; input.txt 
x 1 0 1 x 2 x x x x
1 1 0 2 2 4 3 5 5 x
0 0 1 3 x 3 x 2 x 2
1 1 1 x x 4 1 2 2 2
x 1 1 3 x 2 0 0 1 x
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-126-19fg</id>
    <published>2021-08-16T13:57:15Z</published>
    <updated>2021-08-16T13:57:15Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Daniel Sockwell candidacy for Board positon</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/daniel_sockwell_board_candidate"/>
  <id>tag:news.perlfoundation.org,2021-08-16:/post/daniel_sockwell_board_candidate</id>
  <published>2021-08-16T13:29:42</published>
  <updated>2021-08-16T13:29:42</updated>
  <summary>
  <![CDATA[
     We would like to present Daniel Sockwell as a candidate to join the Board. He has worked with the foundation over the last year, participated in the monthly community meetings and presented Raku at a variety of events. The board will vote on Daniel's appointment at the board meeting 27th August 2021. Below are Daniel's responses to the application questions. Brief biography Before becoming a programmer, I earned a J.D. 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We would like to present Daniel Sockwell as a candidate to join the Board. He has worked with the foundation over the last year, participated in the monthly community meetings and presented Raku at a variety of events. </p>

<p>The board will vote on Daniel's appointment at the board meeting 27th August 2021.</p>

<p>Below are Daniel's responses to the application questions. </p>

<h2>Brief biography</h2>

<p>Before becoming a programmer, I earned a J.D. from Columbia Law School and was a practicing attorney with a large law firm in New York City.  </p>

<p>While there, I somewhat unexpectedly ended up writing code for a JavaScript web app that the firm was building for its large banking clients.</p>

<p>After discovering how much I enjoy writing code, I made a career change and became a programmer.  I have written JavaScript, Rust, and Raku professionally and enjoy exploring many other languages.</p>

<p>I currently serve on the Raku Steering Council and the TPF Legal Committee and was a moderator for the 2021 Perl and Raku Conference.</p>

<h2>Why do you want to become a member of the TPF Board?</h2>

<p>Yet Another Society does not currently have any board members who serve on the Raku Steering Council.</p>

<p>I would like to join YAS's board to help it and the RSC/the Raku community more broadly better work together.</p>

<h2>What goals would you like to see TPF pursue in the next years?</h2>

<p>I would like to see YAS help Perl and Raku help each other – and prevent them from getting in each other's way.</p>

<p>More specifically, I'd like to see the YAS board develop a framework for continuing to share infrastructure and other logistical resources while also giving both languages space to develop their independent identities and developer mindshare.</p>

<p>Here's why I think that goal is worth pursuing: Perl and Raku have a tremendous amount in common (as is only natural for two languages that spent decades with Larry Wall as BDFL).</p>

<p>Both languages are deeply committed to expressive, flexible code; both want to stand up and say that there should be more than one way to do it – pushing back against a landscape of "modern" programming tools that want to enforce a one-size-fits-all approach and style.  Accordingly, both languages have a common interest in promoting the overall linguistic approach to programming that distinguishes Perl-family languages.</p>

<p>Moreover, both languages have open-source/free software at their heart.  Though both languages gratefully accept corporate contributions, each is committed to remaining a community project, without undue influence from any single tech giant.</p>

<p>This brings many advantages, but it also many costs: neither language is likely to have the financial resources that a Facebook, Google, or Microsoft provide to their own languages.  Given this constraint, it makes sense for Raku and Perl to work together through YAS to more efficiently handle the many administrative, logistical, and infrastructure issues that could otherwise be solved with (more) money.</p>

<p>However, Perl and Raku also risk getting in each other's way if our relationship isn't handled correctly.</p>

<p>For example, consistently promoting Perl and Raku in the same breath risks giving the (absolutely false!) impression that Perl is the deprecated/old version of Raku; it also risks giving the (equally false) impression that Raku is an incremental change from Perl that is unlikely to appeal to an audience beyond Perl programmers.</p>

<p>Sharing administrative burdens and working together to promote Perl-family languages without getting in each other's way is a tricky balance, but it's one I believe we can strike.</p>

<p>For example, the recent creation of a "Raku Foundation" alias for YAS seems like a step in the right direction – and I'd personally like YAS to build on that step by deploying a separate website for the Raku Foundation and thereby freeing the Perl Foundation website up to be more Perl-focused. </p>

<p>I'm not exactly sure what other opportunities like that will come up, but I'd be happy to help find any that do.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#525 - Vacation time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/525.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>it seems it is vacation time for many of the authors as the number of posts is smaller than usual.</p>
<p>Enjoy your vacation and remember if you can get vaccinated and in any case, even if you are already vaccinated and even if your country/state/city does not require you to put on a mask, put it on when among people! It is just a small piece of fabric and it might save the life of some other person.</p>
<p>Sure, you might not be contagious, but by having a mask on you also encourage others to put on their mask.</p>
<p>Enjoy your time here!</p></div>
    </content>
    <id>https://perlweekly.com/archive/525.html</id>
    <published>2021-08-16T10:00:00Z</published>
    <updated>2021-08-16T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 125: Pythagorean Triples</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/08/perl-weekly-challenge-125-pythagorean-triples.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10366</id>
    <published>2021-08-16T03:36:20Z</published>
    <updated>2021-08-16T03:37:49Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 125 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-125/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Pythagorean Triples</h2>

<p><em>You are given a positive integer $N.</em></p>

<p><em>Write a script to print all Pythagorean Triples containing $N as a member. Print -1 if it can’t be a member of any.</em></p>

<p><em>Triples with the same set of elements are considered the same, i.e. if your script has already printed (3, 4, 5), (4, 3, 5) should not be printed.</em></p>

<pre><code>The famous Pythagorean theorem states that in a right angle triangle, the length of the two shorter sides and the length of the longest side are related by a²+b² = c².
</code></pre>

<p><em>A Pythagorean triple refers to the triple of three integers whose lengths can compose a right-angled triangle.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5
Output:
    (3, 4, 5)
    (5, 12, 13)

Input: $N = 13
Output:
    (5, 12, 13)
    (13, 84, 85)

Input: $N = 1
Output:
    -1
</code></pre>

<p>It has been known since Euclid and is quite easy to prove that any integer larger than 2 can be part of a Pythagorean triple. We&#8217;ll use that knowledge in our implementation.</p>

<p>On the other hand, I don&#8217;t really know how to be sure that you really produce an exhaustive list of triples for a given input value.</p>

<h3>Pythagorean Triples in Raku</h3>

<p>There are several possible ways to go for this task, but I decided to build a data structure with all Pythagorean triples within a certain range. This is probably efficient if we&#8217;re going to test many input values (as done in the script below), but probably not for one single value.</p>

<pre><code>use v6;

my @squares = map { $_² }, 1..Inf;
my $max = 200;
my $square-set = @squares[0..$max];
my @square-triples = gather {
    for (@squares[0..$max]).combinations(2) -&gt; $comb {
        my $sum = [+] $comb;
        take (|$comb, $sum) if $sum (elem) $square-set;
    }
}
# say @square-triples;
my %look-up = 0 =&gt; -1, 1 =&gt; -1, 2 =&gt; -1;
for @square-triples -&gt; $triple {
    push %look-up, $triple[$_].sqrt =&gt; (map { $_.sqrt}, $triple[0..2]) for 0..2;
}
# say %look-up{13};
for 1..20 -&gt; $test {
    say "$test:\t", %look-up{$test};
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./pythagorean-triples.raku
1:      -1
2:      -1
3:      (3 4 5)
4:      (3 4 5)
5:      [(3 4 5) (5 12 13)]
6:      (6 8 10)
7:      (7 24 25)
8:      [(6 8 10) (8 15 17)]
9:      [(9 12 15) (9 40 41)]
10:     [(6 8 10) (10 24 26)]
11:     (11 60 61)
12:     [(5 12 13) (9 12 15) (12 16 20) (12 35 37)]
13:     [(5 12 13) (13 84 85)]
14:     (14 48 50)
15:     [(8 15 17) (9 12 15) (15 20 25) (15 36 39) (15 112 113)]
16:     [(12 16 20) (16 30 34) (16 63 65)]
17:     [(8 15 17) (17 144 145)]
18:     [(18 24 30) (18 80 82)]
19:     (19 180 181)
20:     [(12 16 20) (15 20 25) (20 21 29) (20 48 52) (20 99 101)]
</code></pre>

<h3>Pythagorean Triples in Raku</h3>

<p>Again, we produce  a data structure with all Pythagorean triples within a certain range. This is probably efficient if we&#8217;re going to test many input values (as done in the script below), but probably not for one single value.</p>

<p>Perl don&#8217;t have a built-in <code>combinations</code> function. So, we could use again the recursive <code>combine</code> subroutine of last week&#8217;s challenge:</p>

<pre><code>sub combine {
    my $count = shift;
    my @out = @{$_[0]};
    my @in  = @{$_[1]};
    if ($count == 0) {
        push @combinations, [@out];
        return;
    }
    for my $i (0..$#in) {
        combine ($count - 1, [@out, $in[$i]], [@in[0..$i -1], @in[$i+1..$#in]]);
    }
}
</code></pre>

<p>and call it thus:</p>

<pre><code>combine 2, [], [2..20]; # populates @combinations
</code></pre>

<p>But, here, we only need to produce combinations of two items, and it is therefore simpler to generate them directly like this:</p>

<pre><code>my @combinations;
for my $i (2..200) {
    push @combinations, [$i, $_] for $i+1 .. $max;
}
</code></pre>

<p>So, this is my Perl implementation of the task:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my $max = 300;
my @squares = map  $_ * $_ , 1..$max;
my %square_hash = map { $_ =&gt; 1 } @squares;
my @combinations;
for my $i (2..200) {
    push @combinations, [$i, $_] for $i+1 .. $max;
}   
my @triples;
for my $comb (@combinations) {
    my $sum_sq = $comb-&gt;[0] ** 2 + $comb-&gt;[1] ** 2;
    push @triples, [ @$comb, 0 + $sum_sq ** 0.5 ] if exists $square_hash{$sum_sq};
}
my %look_up = (0 =&gt; " [ -1 ] ", 1 =&gt; " [ -1 ] ", 2 =&gt; " [ -1 ] " );
for my $triple (@triples) {
    for my $val (@$triple) {
        $look_up{$val} .= " [ @$triple ] " ;
    }
}
for my $test (1..30) {
    my $result = $look_up{$test};
    say "$test:\t $result";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl pythagorean-triples.pl
1:        [ -1 ]
2:        [ -1 ]
3:        [ 3 4 5 ]
4:        [ 3 4 5 ]
5:        [ 3 4 5 ]  [ 5 12 13 ]
6:        [ 6 8 10 ]
7:        [ 7 24 25 ]
8:        [ 6 8 10 ]  [ 8 15 17 ]
9:        [ 9 12 15 ]  [ 9 40 41 ]
10:       [ 6 8 10 ]  [ 10 24 26 ]
11:       [ 11 60 61 ]
12:       [ 5 12 13 ]  [ 9 12 15 ]  [ 12 16 20 ]  [ 12 35 37 ]
13:       [ 5 12 13 ]  [ 13 84 85 ]
14:       [ 14 48 50 ]
15:       [ 8 15 17 ]  [ 9 12 15 ]  [ 15 20 25 ]  [ 15 36 39 ]  [ 15 112 113 ]
16:       [ 12 16 20 ]  [ 16 30 34 ]  [ 16 63 65 ]
17:       [ 8 15 17 ]  [ 17 144 145 ]
18:       [ 18 24 30 ]  [ 18 80 82 ]
19:       [ 19 180 181 ]
20:       [ 12 16 20 ]  [ 15 20 25 ]  [ 20 21 29 ]  [ 20 48 52 ]  [ 20 99 101 ]
21:       [ 20 21 29 ]  [ 21 28 35 ]  [ 21 72 75 ]  [ 21 220 221 ]
22:       [ 22 120 122 ]
23:       [ 23 264 265 ]
24:       [ 7 24 25 ]  [ 10 24 26 ]  [ 18 24 30 ]  [ 24 32 40 ]  [ 24 45 51 ]  [ 24 70 74 ]  [ 24 143 145 ]
25:       [ 7 24 25 ]  [ 15 20 25 ]  [ 25 60 65 ]
26:       [ 10 24 26 ]  [ 26 168 170 ]
27:       [ 27 36 45 ]  [ 27 120 123 ]
28:       [ 21 28 35 ]  [ 28 45 53 ]  [ 28 96 100 ]  [ 28 195 197 ]
29:       [ 20 21 29 ]
30:       [ 16 30 34 ]  [ 18 24 30 ]  [ 30 40 50 ]  [ 30 72 78 ]  [ 30 224 226 ]
</code></pre>

<p>I&#8217;m very late and have no time this week for the second task.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 22, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Returning multiple values or a list from a subroutine in Perl</title>
  <summary type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></summary>
  <updated>2021-08-15T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/returning-a-list-from-a-subroutine"/>  <id>https://perlmaven.com/returning-a-list-from-a-subroutine</id>
  <content type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6910895443264170537</id>
    <published>2021-08-14T22:19:00.000+02:00</published>
    <updated>2021-08-14T22:19:32.984+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccliv) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.048000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.048000&lt;/strong&gt; on 2021-08-14&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.047008 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.12&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.11 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JACQUESG/Git-Raw-0.88' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Git::Raw&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl bindings to the Git linkable library (libgit2) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.88&lt;/strong&gt; on 2021-08-08&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.87 was 11 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.30&lt;/strong&gt; on 2021-08-12&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.26 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.21&lt;/strong&gt; on 2021-08-13&lt;/li&gt;  &lt;li&gt;Votes: 459&lt;/li&gt;  &lt;li&gt;Previous version: 9.19 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2021-08-10&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.057' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.057&lt;/strong&gt; on 2021-08-13&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.055 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.60&lt;/strong&gt; on 2021-08-14&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.59 was 2 years, 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.714' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.714&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 7.713 was 1 month, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.604' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.604&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.602 was 5 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.076&lt;/strong&gt; on 2021-08-11&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.075 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6910895443264170537/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliv-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6910895443264170537"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6910895443264170537"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliv-11-great-cpan-modules-released.html" title="(cccliv) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3683535139214601981</id>
    <published>2021-08-14T22:14:00.004+02:00</published>
    <updated>2021-08-14T22:16:06.239+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxx) metacpan weekly report - IO::Async </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 35&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/IO::Async"&gt;IO::Async&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/14 20:13:11 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::LogFormat::Compiler" target="_blank"&gt;Apache::LogFormat::Compiler&lt;/a&gt; - Compile a log format string to perl-code &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI::Migration" target="_blank"&gt;DBI::Migration&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Iterator::Merger" target="_blank"&gt;Iterator::Merger&lt;/a&gt; - an iterator to efficiently mergesort iterators&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Leds" target="_blank"&gt;Mojo::Leds&lt;/a&gt; - Leds aka Light Environment (emi) for Development System based on Mojolicious&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad::SlotAttr::Isa" target="_blank"&gt;Object::Pad::SlotAttr::Isa&lt;/a&gt; - apply class type constraints to Object::Pad slots&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract::Pg" target="_blank"&gt;SQL::Abstract::Pg&lt;/a&gt; - PostgreSQL features for SQL::Abstract&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=148)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::COW" target="_blank"&gt;Data::COW&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Fake" target="_blank"&gt;Data::Fake&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Object" target="_blank"&gt;Data::Object&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Error" target="_blank"&gt;DBIx::Error&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum" target="_blank"&gt;enum&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EventStore::Tiny" target="_blank"&gt;EventStore::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+3=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Interface" target="_blank"&gt;IO::Interface&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Declare" target="_blank"&gt;Keyword::Declare&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::SQLite" target="_blank"&gt;Minion::Backend::SQLite&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=459)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=382)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Launcher" target="_blank"&gt;Proc::Launcher&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=134)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Template::Simple" target="_blank"&gt;Text::Template::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3683535139214601981/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3683535139214601981"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3683535139214601981"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxx-metacpan-weekly-report.html" title="(cdlxxx) metacpan weekly report - IO::Async "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Privacy and speed with Perl’s Object::Pad</title>
    <link rel="alternate" href="https://dev.to/mjgardner/privacy-and-speed-with-perl-s-object-pad-433c" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/">Last week</a> found me exploring <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> as an alternative to the <a href="https://metacpan.org/pod/Moo">Moo</a> object-oriented framework for Perl since the former is prototyping the syntax and concepts for a proposed built-in OO framework named <a href="https://github.com/Ovid/Cor/wiki">Corinna</a>. I had to put that particular project on hold as <a href="https://mjgardner.github.io/dbcritic/">dbcritic</a>’s current design is a bit <a href="https://twitter.com/markjgardner/status/1422729187908071426">too role-happy</a> and Object::Pad currently lacks <a href="https://metacpan.org/pod/Class::Method::Modifiers">method modifiers</a> as in Moo. (Corinna is <a href="https://github.com/Ovid/Cor/wiki/Corinna-Overview#no-method-modifiers">explicitly skipping them</a> for its current minimum viable product.) Thankfully, <strong>development continues at a rapid pace</strong>. For instance, author <a href="https://leonerds-code.blogspot.com/">Paul Evans</a> has <a href="https://metacpan.org/release/PEVANS/Object-Pad-0.50/source/Changes#L29">already addressed</a> a problem I ran into when attempting to examine slot values in the debugger.</p>

<p>But I wanted to highlight a point I <a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/#comment-338">made in one of the comments last week</a>: Object::Pad’s <a href="https://metacpan.org/pod/Object::Pad#has">slots</a> (a.k.a. fields, attributes, whatever) are <strong>private by default</strong>, completely unexposed to other class instances unless they <a href="https://metacpan.org/pod/Object::Pad::MOP::Slot">monkey with the meta-object protocol</a>. Unless you explicitly define or <a href="https://metacpan.org/pod/Object::Pad#:reader,-:reader(NAME)">generate</a> some kind of accessor method, these slots act like lexical (a.k.a. <code>my</code>) variables and are only available to <a href="https://metacpan.org/pod/Object::Pad#method">methods</a> within the class.</p>

<p>Here’s an example:</p>


<div class="ltag_gist-liquid-tag">
  
</div>


<p>This stands in stark contrast to Perl’s more low-tech <a href="https://perldoc.perl.org/perlobj#An-Object-is-Simply-a-Data-Structure">hashref-based objects</a>, where all attributes are available simply through <a href="https://perldoc.perl.org/perlobj#Attributes">dereferencing the instance</a>, e.g., <code>$object-&gt;{foo}</code>. Although <a href="https://perldoc.perl.org/perlref#Objects">discouraged</a>, <strong>OO purists sometimes ding Perl for this kind of unenforced encapsulation</strong>, and I myself have seen codebases that violate it despite the convention of preceding private method and attribute names with an underscore (<code>_</code>).</p>

<p>Unfortunately, there is <strong>not yet any way to declare an Object::Pad method private</strong>. You could use <a href="https://perldoc.perl.org/perlsub#Lexical-Subroutines">lexical subroutines</a>, but then you lose the convenience of a pre-made <code>$self</code> variable and <a href="https://metacpan.org/pod/Object::Pad::MOP::Method">accessibility through the MOP</a>. The Corinna proposal lists <a href="https://github.com/Ovid/Cor/wiki/Methods">several different types of methods</a> including <a href="https://github.com/Ovid/Cor/wiki/Methods#private-methods">private</a> ones, so maybe this is an area for future Object::Pad development.</p>

<p>Another <a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/#comment-339">open question from the comments</a>: “How is [Object::Pad] on mem­o­ry and speed com­pared to Moo and <a href="https://perldoc.perl.org/functions/bless"><code>bless</code></a>ed objects?” Luckily the prolific <a href="https://perlancar.wordpress.com">perlancar</a> has already added Object::Pad to his <a href="https://metacpan.org/pod/Bencher::Scenarios::Accessors">Bencher::Scenarios::Accessors</a> distribution, and from that it appears that between it and Moo, Object::Pad is faster on <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::ClassStartup">startup</a>, neck-and-neck on <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::Construction">object construction</a> and <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::GeneratorStartup">accessor generation</a>, and slower on <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::Get">reads</a> and <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::Set">writes</a>. (Note that Object::Pad is a fast-moving target so these figures may not track with the latest version’s changes.) It’s no surprise that plain <code>bless</code>ed objects fared better than both in most scenarios except for <a href="https://metacpan.org/pod/Bencher::Scenario::Accessors::Get">reads</a>, where Moo was faster than hash-based objects but slower than array-based.</p>

<p>I expect that should Corinna be built into Perl it would narrow that gap with <code>bless</code>ed objects, but in my mind, <strong>the advantages of using an object system outweigh the performance hit</strong> 95% of the time. As far as benchmarking memory goes, I still need to test that on a Linux box (maybe my <a href="https://phoenixtrap.com/2021/07/28/vps-upgrade/">new VPS</a>?) once I get more familiar with the <a href="https://metacpan.org/pod/Bencher">Bencher</a> framework.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/privacy-and-speed-with-perl-s-object-pad-433c</id>
    <published>2021-08-10T14:00:00Z</published>
    <updated>2021-08-10T14:00:00Z</updated>
    <category term="perl"/>
    <category term="corinna"/>
    <category term="oop"/>
    <category term="moo"/>
  </entry>
  <entry>
    <title>EV charge calculator from script to Dancer web</title>
    <link rel="alternate" href="http://blogs.perl.org/users/itcharlie/2021/08/ev-charge-calculator-from-script-to-dancer-web.html"/>
    <id>tag:blogs.perl.org,2021:/users/itcharlie//1220.10344</id>
    <published>2021-08-07T19:39:01Z</published>
    <updated>2021-08-10T06:04:50Z</updated>
    <author>
        <name>Charlie Gonzalez</name>
        
    </author>
    <category term="perldancer2evcharging" label="perl Dancer2 ev charging" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/itcharlie/">
        <![CDATA[<p>Since my <a href="http://blogs.perl.org/users/itcharlie/2021/05/ev-charge-pricing-per-state-in-us.html">last post</a> I wanted to take my EV charge calculator script and convert it into a web form. In this post I breakdown how I migrated the script to a Dancer2 web app. </p>

<p>Just a minor note for those readers who may not be aware, Dancer2 is a "lightweight web-framework for Perl" as described in <a href="https://metacpan.org/pod/Dancer2">Dancer2 documentation </a>  and can be similar in comparison to <a href="http://sinatrarb.com/"> Ruby Sinatra</a>   and <a href="https://flask.palletsprojects.com/en/2.0.x/">Python Flask</a>.</p>

<p>I started by  creating a new project folder with the dancer2 program ( # please note that I am working on a Windows PC and on a linux OS the program would just be named dancer2 ) </p>

<p> dancer2.bat -a EVCalc   </p>

<p><br />
I then copy over the files inside this directory to my project repository as shown in this <a href="https://github.com/itcharlie/ev-calc-pricing/commit/478c1120af4d23462eee00ccb405eec6c4cf2706">commit</a> and moved all the scripts to the bin directory as shown in this <a href="https://github.com/itcharlie/ev-calc-pricing/commit/0bfa1a7d7fcdeae8529721e53207a71fe3539580">commit</a></p>

<p>I wrote a <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/bin/generate_state_rate_hashdb.pl">script </a>to covert the <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/bin/electric_rates.txt">electric rate csv</a> file into a <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/lib/StateRates.pm">module</a> and added all the calculation code in the main project <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/lib/EVCalc.pm">module</a>. All the html markup is stored in this <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/views/calc.tt"> template file</a> and I sprinkled some <a href="https://github.com/itcharlie/ev-calc-pricing/blob/main/public/css/style.css">CSS </a> which renders a page similar to the screenshot below after submitting some data for calculating the charge of an EV :</p>

<p><img alt="calculator_page.png" src="http://blogs.perl.org/users/itcharlie/calculator_page.png" width="1064" height="728" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></p>

<p>Thank you for your time, I hope you enjoyed my post.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>#524 - Object::Pad</title>
    <link rel="alternate" href="https://perlweekly.com/archive/524.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>It is no longer a secret that I am the biggest fan of the <a href="https://github.com/Ovid/Cor/wiki">Corinna</a> project, headed by Curtis Poe. The motto of the project tells you everything you need to know about it, "Good enough" is not good enough. Having said that we still have to wait for the final push by the team behind the project.</p>
<p>What shall we do in the meantime?</p>
<p>Well, we are encouraged to give <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> a try. Paul Evans is the man behind this distribution. A fellow member of Team PWC, Cheok-Yin Fung, wrote a blog post, <a href="http://blogs.perl.org/users/c_y_fung/2020/09/oo-linked-lists-in-perl.html">OO linked lists in Perl</a>, last year (25th Sep 2020 to be precise). She updated this blog post recently and added another implementation using Object::Pad. This is what I call serious hacking. I have one more similar story to share with you as shared in a <a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/">blog post</a> by Mark Gardner. In this post, Mark shared his experience dealing with Object::Pad. With so much going on about Object::Pad, I gave myself a week to get things in place. But the week went past without any results unfortunately. Don't get me wrong, I am not giving up yet. I will get my hands dirty and share my experience with everyone. In fact, Dave Cross, suggested I should include Object::Pad in the book I am currently working on. Currently the book has solutions implemented in traditional OO and Moo only. I will definitely add Object::Pad in the second revision soon after, promise.</p>
<p>Do you have any stories to share with regard to Object::Pad? If yes then please do share them with us. Or if you haven't tried it then why not give it a go and make-over your existing project to use Object::Pad.</p>
<p>Last but not least, did you attend <a href="https://conf.raku.org/">The Raku Conference</a>? If not then you can still watch the recordings of the three-day event. I also gave a short talk (30 minutes) on day three about "Making of Raku Developer".</p>
<p>Enjoy the school holiday period with your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/524.html</id>
    <published>2021-08-09T10:00:00Z</published>
    <updated>2021-08-09T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>TWC 124: Literalism and existence proofs in the service of stress reduction</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jared_martin/2021/08/twc-124-literalism-and-existence-proofs-in-the-service-of-stress-reduction.html"/>
    <id>tag:blogs.perl.org,2021:/users/jared_martin//3494.10345</id>
    <published>2021-08-09T03:47:42Z</published>
    <updated>2021-08-09T09:46:39Z</updated>
    <author>
        <name>Jared Martin</name>
        
    </author>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jared_martin/">
        <![CDATA[<p>Again another week where I solve one answer and punt on another.</p>

<h2 id="task-1"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124/#TASK1">TWC Task #1, Happy Women Day</a></h2>

<h3><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-124/jaredor/perl/ch-1.pl">jaredor submission for Task #1</a></h3>

<p>Well, "solve" may be a strong word for what I did with this problem, at least for my programming conscience. The problem statement was simple, but had no requirements for an acceptable solution other than what you could infer from the example solution in the problem statement. However I did give not one, but <i>two</i> solutions, so that's not <i>totally</i> lazy, even if each, on its own, is lazy, right?</p>

<h4>--lazy solution</h4>

<p>What?! A cut-and-paste of the example itself as a solution? Yes. It literally satisfies the brief. When I was starting out as a programmer, I thought my programs had to <i>do</i> something, like, use a loop. These days, I'm thinking that the best program is the one you don't write, so this comes close to the sweet spot. I recommend this philosophy, partly in the name of efficiency, but there is also the benefit that, once my days are done, I will exit as the best programmer ;-)</p>

<h4>--superlazy solution</h4>

<p>Unicode has the Venus symbol: ♀</p>

<p>Done.</p>

<h4>Who am I kidding? I feel guilt.</h4>

<p>Okay, so maybe I will not go gentle into the programming night. I do <i>feel</i> there should be some residual thoughts cranking away when I shove a program into the world. The problem with under-specified problems is that then I have to come up requirements just to know where I'm heading and to know when I've gotten there. Ugh.</p>

<p>So, if I were to spend more time on this, what would I do? Well ... I just deleted a lot of words describing what I would do and I wasn't even halfway done. Suffice it to say that I can overthink a lot of things. Notionally, it would be just a circle atop a cross, but then I would have wanted some logic to account for scaling based on the radius. (I should never have read that article on designing true-type fonts--it ruined me ;-)</p>

<p>But given that I don't start writing until after my Sunday afternoon nap, I am forcing myself to live with being technically correct, which as we all know, is <a href="https://www.deadprogrammer.com/technically-correct">the best kind of correct</a>.</p>

<h4>Literalism stalks the world, slaying the unwary! Well, not <i>literally</i>...</h4>

<p>Whenever I am feeling Quixotic, I don my rusty armor of experience, grab my dusty banner of software engineering and sally forth with my trusty lance of logic to tilt at the windmills of bargain basement software code. I also have a grudge against TDD fanatics, who think tests substitute for thought ("who test tests substitue for testing").</p>

<p>Only, I'm no hero, just a coder. A lot of the time I have to deal with code that is too lazy, but some of the time, I should ponder more if lazy is good enough. :-)</p>

<h2 id="task-2"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124/#TASK2">TWC Task #2, Tug of War</a></h2>

<p>This is a version of the <a href="https://en.wikipedia.org/wiki/Partition_problem">Partition Problem</a> and based on that, I would probably have tried to code the <a href="https://en.wikipedia.org/wiki/Largest_differencing_method#Balanced_two-way_partitioning">Largest Differencing Mechanism with Balanced Two-Way Partitioning</a>. Well, not actually <i>that</i> algorithm, to find the absolute <i>minimum</i> I would feel that I need to code the <a href="https://en.wikipedia.org/wiki/Largest_differencing_method#An_exact_algorithm">complete Karmarkar–Karp algorithm (CKK)</a>.</p>

<p>But the meta-problem I have is that this problem is already known and we have a solution that is as good as we (think) we can hope until someone proves P = NP. I just don't have the psychological fortitude to code a "best effort" that will most assuredly fall short. While I try not to engange in negative self-talk, I will assign my efforts for my leisure time assuming that I am <a href="https://northernstar-online.com/student-solves-unsolvable-problems/">not likely to be the next George Dantzig</a>.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Binary search in Perl array</title>
  <summary type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></summary>
  <updated>2021-08-08T10:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/binary-search-in-perl-array"/>  <id>https://perlmaven.com/binary-search-in-perl-array</id>
  <content type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-629257794278133750</id>
    <published>2021-08-07T22:33:00.000+02:00</published>
    <updated>2021-08-07T22:33:43.191+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccliii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/DBD-SQLite-1.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Self Contained SQLite RDBMS in a DBI Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.70&lt;/strong&gt; on 2021-08-01&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 1.68 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.024&lt;/strong&gt; on 2021-08-01&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.023 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.34' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.34&lt;/strong&gt; on 2021-08-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.33 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A small, simple, correct HTTP/1.1 client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.078&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 100&lt;/li&gt;  &lt;li&gt;Previous version: 0.076 was 2 years, 11 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-08-05&lt;/li&gt;  &lt;li&gt;Votes: 60&lt;/li&gt;  &lt;li&gt;Previous version: 0.78 was 6 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.710' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.710&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 1.709 was 5 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.007&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.006 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-08-06&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.055' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055&lt;/strong&gt; on 2021-08-03&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.054 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Software-License-0.104001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Software::License&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - packages that provide templated software licenses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.104001&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.103014 was 2 years, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-Mechanize-2.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.04&lt;/strong&gt; on 2021-08-06&lt;/li&gt;  &lt;li&gt;Votes: 86&lt;/li&gt;  &lt;li&gt;Previous version: 2.03 was 8 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.075&lt;/strong&gt; on 2021-08-07&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.074 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/629257794278133750/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629257794278133750"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629257794278133750"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliii-12-great-cpan-modules-released.html" title="(cccliii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3766663288023086498</id>
    <published>2021-08-07T22:28:00.002+02:00</published>
    <updated>2021-08-07T22:28:49.673+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxix) metacpan weekly report - Object::Pad</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 26&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/07 20:27:46 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer::Plugin::BeforeRoute" target="_blank"&gt;Dancer::Plugin::BeforeRoute&lt;/a&gt; - Run something before a route execute&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::DOM::Role::Restrict" target="_blank"&gt;Mojo::DOM::Role::Restrict&lt;/a&gt; - Restrict tags and attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Schema::Versioned" target="_blank"&gt;SQL::Schema::Versioned&lt;/a&gt; - Routine and convention to create/update your application's DB schema&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/boolean" target="_blank"&gt;boolean&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Extensible" target="_blank"&gt;Dancer2::Plugin::Auth::Extensible&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Session::Cookie" target="_blank"&gt;Dancer2::Session::Cookie&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::ULID" target="_blank"&gt;Data::ULID&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Database::Migrator" target="_blank"&gt;Database::Migrator&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=277)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::DeploymentHandler" target="_blank"&gt;DBIx::Class::DeploymentHandler&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Migration" target="_blank"&gt;DBIx::Class::Migration&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Schema::Versioned::Inline" target="_blank"&gt;DBIx::Class::Schema::Versioned::Inline&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future" target="_blank"&gt;Future&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::HTML5::Parser" target="_blank"&gt;HTML::HTML5::Parser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Daemon" target="_blank"&gt;HTTP::Daemon&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::ExtractUse" target="_blank"&gt;Module::ExtractUse&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=458)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OAuth2" target="_blank"&gt;Mojolicious::Plugin::OAuth2&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=283)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+3=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Map" target="_blank"&gt;Parallel::Map&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=154)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Session::Storage::Secure" target="_blank"&gt;Session::Storage::Secure&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3766663288023086498/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxix-metacpan-weekly-report-objectpad.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3766663288023086498"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3766663288023086498"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxix-metacpan-weekly-report-objectpad.html" title="(cdlxxix) metacpan weekly report - Object::Pad"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4002299958775944725</id>
    <published>2021-08-07T22:25:00.001+02:00</published>
    <updated>2021-08-07T22:25:12.289+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(di) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-08-07 20:18:30 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68656428" target="_blank"&gt;Why do Inline::Python functions that print fail to be redirected?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68621319" target="_blank"&gt;How to dereference this array? And how do I store this array into a hash?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68626228" target="_blank"&gt;My Perl variable to variable substitutions do not work&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68625733" target="_blank"&gt;How to sort strings using two substring equality conditions?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68630505" target="_blank"&gt;Perl: Can you use more than two arrays in the map function?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68663268" target="_blank"&gt;JSON from array prints invalid json&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68668243" target="_blank"&gt;compare columns from 2 files &amp;amp; print matching and non-matching rows in same order as in file1 &amp;amp; print YES/NO at end of matching and non-matching rows&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68612917" target="_blank"&gt;how do I determine whether a variable is stored as numeric or string in perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68635694" target="_blank"&gt;save directly to file and get filename using WWW::Mechanize&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68650706" target="_blank"&gt;Insert datetime into Oracle using perl DBI parameterized INSERT statement&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4002299958775944725/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/di-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4002299958775944725"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4002299958775944725"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/di-stackoverflow-perl-report.html" title="(di) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grants: July 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-08-07:/post/grants_july_2021_votes</id>
  <published>2021-08-07T12:42:34</published>
  <updated>2021-08-07T12:42:34</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted: Grant Proposal: Maintaining Perl 5 Core VOTING RESULTS: Approved. 7 YES vote 0 NO votes We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our donations page. We 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_5_dave_mitchell">Grant Proposal: Maintaining Perl 5 Core</a> (USD 21,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (35 points), 0 NO votes</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Board review: Community Affairs Team</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat_review"/>
  <id>tag:news.perlfoundation.org,2021-08-07:/post/cat_review</id>
  <published>2021-08-07T00:00:00</published>
  <updated>2021-08-07T00:00:00</updated>
  <summary>
  <![CDATA[
     The Perl foundation’s board members have had an opportunity to review the Community Affairs Team (CAT), actions and its processes. As a result, the board has chosen to put the CAT on hiatus while its charter is formalized, and is retracting the public announcements of previous investigations.
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Summary</h2>

<p>The Perl foundation’s board members have had an opportunity to review the Community Affairs Team (CAT), actions and its processes. As a result, the board has chosen to put the CAT on hiatus while its charter is formalized, and is retracting the public announcements of previous investigations.</p>

<p>While the CAT has had board-sponsored training and a draft charter, the final charter has not been formally approved therefore previous CAT actions cannot be measured against it.</p>

<h2>1. Retractions</h2>

<p>Effective immediately, the CAT statements of 19 April 2021 and 2 May 2021 are being retracted. A note will be placed on the pages that held those statements stating that the board has retracted them. The sanctions were agreed by the board and therefore still stand.</p>

<h2>2. CAT hiatus</h2>

<p>Effective immediately, the CAT is on hiatus until such time as the charter has been formally approved by the Board of Directors. </p>

<p>Reports will not be accepted until such time as the CAT is chartered. </p>

<p>The board will work with all diligent haste to complete this process in collaboration with the current members of the CAT. Feedback and engagement with communities will be sought throughout this process.</p>

<h2>3. Active reports</h2>

<p>There are currently two incidents that have been reported to the CAT. These will be held for review until the charter is approved and the reporters will be notified of this.</p>

<h2>4. Moderation intent</h2>

<p>We do not wish the CAT to become a "court of law"; that said, the CAT needs to allow a certain amount of "due process" in the interest of fairness. </p>

<p>Therefore the rules and processes need to be made explicit, and the possible sanctions laid out clearly. These were addressed in the draft charter, but have not been properly formalized.</p>

<h2>5. Behaviour in TPF spaces</h2>

<p>When visiting TPF spaces and TPF activities (such as Slack, TPF lists, meetings and conferences), standards and expectations of behaviour are set by the board, and anyone participating is expected to adhere to these standards. </p>

<p>To reduce the chance of finding yourself outside these expectations, here are some suggestions:
- always treat others with courtesy and professionalism
- do not share others' personal information in public unless authorized to do so
- remember that everyone is different and might not interpret your messages as you had expected
- if you find yourself in a difficult situation
    - work with the other person to clarify what happened
    - avoid escalation
    - take time away from the keyboard before reacting</p>

<p>Slack Administrators and board members have been entrusted by TPF to handle issues and moderate when needed. Although the first response will be a gentle reminder in most situations, the moderators have the right to remove messages or access at their discretion.</p>

<p>If anyone has an issue with moderation, or would like to check if a specific action is or is not acceptable, they can email hello@perlfoundation.org with their concerns; messages to this address are copied to the board. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>[Short Prog] Week Number Getter</title>
    <link rel="alternate" href="https://dev.to/jeongoon/short-prog-week-number-getter-49m2" type="text/html"/>
    <content type="html">&lt;p&gt;The one way to store my weekly documents in a directory or a weekly task in a spreadsheet is to store them into a separate directory (or a sheet) by weekly basis. and I used the week number because it has shorter name than using period notation like (08.02-08.08).&lt;br&gt;
  I scanned some invoices and name it in sort of "20210805.Chicken.pdf" then I move them into appropriate "week -number-ed" directory.&lt;br&gt;
  then I realised that there might be some automatic way to put them into matched weekly directory.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-get-week-number-in-raku"&gt;
  &lt;/a&gt;
  How to get week number in Raku
&lt;/h2&gt;

&lt;p&gt;I'm a &lt;a href="//www.raku.org"&gt;raku&lt;/a&gt; user. and I could make it a simple terminal interface programme like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;
&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int $year, Int $month, Int $day ) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;week&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;u+x week-number.raku
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; week-number.raku 2021 8 4
31
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think it's pretty straight forward if get used to some syntax.&lt;/p&gt;

&lt;p&gt;If you want to use a single text like "20210804"&lt;br&gt;
I could add one more multi sub for the MAIN()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;cut&lt;/span&gt;&lt;span class="p"&gt;-off-last-two-digits( @i ) returns Int {&lt;/span&gt;
    &lt;span class="c1"&gt;# warning: side effect&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int \yyyymmdd ) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;yyyymmdd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$day&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cut&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cut&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$year&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;False&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;check your input: {yyyymmdd}&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;samewith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int $year, Int $month, Int $day ) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;week&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#perl5-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Perl5&lt;/strong&gt; Version
&lt;/h2&gt;

&lt;p&gt;I searched the internet and I used DateTime module to implement.&lt;br&gt;
but I guess DateTime is quite heavy module. because perl is normally very very fast but this programme isn't.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Basename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@parsed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;enum&lt;/span&gt; &lt;span class="sx"&gt;qw(F_YEAR F_MONTH F_DAY)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;usage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;END_OF_USAGE&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;YYYYMMDD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;OR&lt;/span&gt;
&lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;YYYY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;END_OF_USAGE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# parse as YYYYMMDD&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;@parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^(\d+)(\d\d)(\d\d)$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;@parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@parsed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;F_YEAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;F_MONTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;F_DAY&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;year&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s"&gt;month&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s"&gt;day&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;week_number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#haskell-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Haskell Version&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I still hate some part of code and there is no proper way to handle errors but it is working fast. so I'm going to stick with this programme for a while.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack new week-number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appmainhs"&gt;
  &lt;/a&gt;
  app/Main.hs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Environment&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Lib&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getArgs&lt;/span&gt; &lt;span class="c1"&gt;-- note: args :: [String]&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
              &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;
              &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;m'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;d'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="kr"&gt;in&lt;/span&gt;
                  &lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="n"&gt;y'&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt; &lt;span class="n"&gt;d'&lt;/span&gt;
              &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;unlines&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"usage:"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"week-number: &amp;lt;yyyymmdd&amp;gt;"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"  or"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"week-number: &amp;lt;yyyy&amp;gt; &amp;lt;m&amp;gt; &amp;lt;d&amp;gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#srclibhs"&gt;
  &lt;/a&gt;
  src/Lib.hs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Lib&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;weekNumberStringFromString&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;weekNumberStringFromGregorian&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Time&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;DT&lt;/span&gt;

&lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseTimeOrError&lt;/span&gt;
           &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%Y%m%d"&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;UTCTime&lt;/span&gt;
  &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatTime&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%V"&lt;/span&gt; &lt;span class="n"&gt;ut&lt;/span&gt;

&lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatTime&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%V"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromGregorian&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack build
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; week-number-exe 2021 8 4
31
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so now I need to make some script go through the file&lt;br&gt;
and get the date information from the file name and move them into&lt;br&gt;
right place.&lt;/p&gt;

&lt;p&gt;Okay. That's all today.&lt;/p&gt;

</content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/short-prog-week-number-getter-49m2</id>
    <published>2021-08-05T07:55:23Z</published>
    <updated>2021-08-05T07:55:23Z</updated>
    <category term="raku"/>
    <category term="shell"/>
    <category term="perl"/>
    <category term="haskell"/>
  </entry>
  <entry>
    <title>What’s Next for Object-Oriented Perl?</title>
    <link rel="alternate" href="https://dev.to/mjgardner/what-s-next-for-object-oriented-perl-f1a" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#introduction-the-current-state-of-play"&gt;
  &lt;/a&gt;
  Introduction: The current state of play
&lt;/h2&gt;

&lt;p&gt;Perl has “very minimal” support for object-oriented (OO) programming out of the box &lt;a href="https://perldoc.perl.org/perlootut#DESCRIPTION"&gt;by its own admission&lt;/a&gt;. It’s class-based but classes are &lt;a href="https://perldoc.perl.org/perlobj#A-Class-is-Simply-a-Package"&gt;just packages&lt;/a&gt; used differently. Objects are &lt;a href="https://perldoc.perl.org/perlobj#An-Object-is-Simply-a-Data-Structure"&gt;just data structures&lt;/a&gt; &lt;a href="https://perldoc.perl.org/functions/bless"&gt;&lt;code&gt;bless&lt;/code&gt;&lt;/a&gt;ed into a class, methods are &lt;a href="https://perldoc.perl.org/perlobj#A-Method-is-Simply-a-Subroutine"&gt;just subroutines&lt;/a&gt; whose first argument is an object or class name, and &lt;a href="https://perldoc.perl.org/perlobj#Attributes"&gt;attributes/properties are often just the key-value pair of a hash&lt;/a&gt; stored in the object. (This last is a feature shared with JavaScript, whose prototype-based objects are just collections of key-value pairs with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties"&gt;keys addressed as properties&lt;/a&gt;.) You’ve got &lt;a href="https://perldoc.perl.org/perlootut#Polymorphism"&gt;polymorphism&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/perlobj#Inheritance"&gt;inheritance&lt;/a&gt;, and it’s up to you to enforce &lt;a href="https://perldoc.perl.org/perlootut#Encapsulation"&gt;encapsulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This can take a lot of work to use effectively. To help address that, &lt;a href="https://perldoc.perl.org/perlootut#PERL-OO-SYSTEMS"&gt;several systems&lt;/a&gt; have been developed over the years to reduce boilerplate and provide modern (or “postmodern”) OO features that developers from other languages expect. My favorite for a while has been &lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt;: it’s got the features I need 90% of the time like &lt;a href="https://metacpan.org/pod/Moo#new"&gt;built-in constructors&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Moo#with"&gt;roles&lt;/a&gt; (an alternative to composition through inheritance), &lt;a href="https://metacpan.org/pod/Moo#has"&gt;attributes&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Moo#isa"&gt;type validation&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;method modifiers&lt;/a&gt; for enhanced polymorphism. And if I need to dig around in the guts of classes, attributes, and the like I can always upgrade to Moo’s big brother &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; and its &lt;a href="https://metacpan.org/pod/Class::MOP"&gt;meta-object protocol&lt;/a&gt; with minimal effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#corinna-objectpad-and-porting-dbcritic"&gt;
  &lt;/a&gt;
  Corinna, Object::Pad, and porting dbcritic
&lt;/h2&gt;

&lt;p&gt;But there’s a new kid on the block. &lt;a href="https://ovid.github.io/"&gt;Curtis “Ovid” Poe&lt;/a&gt; has been spearheading &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt;, an effort “to bring effective OO to the Perl core and &lt;em&gt;leapfrog&lt;/em&gt; [emphasis his] the capabilities of many OO languages today.” No &lt;a href="https://www.cpan.org/"&gt;CPAN&lt;/a&gt; modules, no chain of dependencies; just solid OO features and syntax built-in. And while Corinna is a ways off from shipping, &lt;a href="https://leonerds-code.blogspot.com/"&gt;Paul “LeoNerd” Evans&lt;/a&gt; &lt;em&gt;(maybe I should get a cool nickname too?)&lt;/em&gt; has been implementing some of these ideas as &lt;a href="https://perldoc.perl.org/perlapi#PL_keyword_plugin"&gt;new Perl keyword syntax&lt;/a&gt; in his &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;Both &lt;a href="https://twitter.com/OvidPerl/status/1420323829356843011"&gt;Ovid&lt;/a&gt; and &lt;a href="https://twitter.com/cpan_pevans/status/1415596477968261121"&gt;LeoNerd have been asking developers to try out Object::Pad&lt;/a&gt;, not just as a new toy, but to get feedback on what works and what needs to be added. So I thought I’d try porting an older small Moo-based project named &lt;a href="http://mjgardner.github.io/dbcritic/"&gt;dbcritic&lt;/a&gt; to this new reality. In the process, I learned some of the advantages and disadvantages of working with Object::Pad. Hopefully, this can inform both it and Corinna’s evolution as well as other curious developers’ evaluations. You can follow my coding efforts in &lt;a href="https://github.com/mjgardner/dbcritic/tree/object_pad"&gt;this GitHub branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, the marquee result: the &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm"&gt;code for App::DBCritic&lt;/a&gt; (the class I started with) is cleaner and shorter, with 33 lines shaved off so far. Mainly this is due to Object::Pad’s &lt;a href="https://metacpan.org/pod/Object::Pad#has"&gt;more concise attribute syntax&lt;/a&gt; (called “slots” in its documentation) and lack of explicit support for Moo’s &lt;a href="https://metacpan.org/pod/Moo#coerce"&gt;attribute coercion&lt;/a&gt;. I only used the latter for one attribute in the Moo version and I’m not sure it worked particularly well, so it wasn’t hard to jettison. But if your code supports coercions extensively, you’ll have to look into Object::Pad’s &lt;a href="https://metacpan.org/pod/Object::Pad#BUILD"&gt;&lt;code&gt;BUILD&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Object::Pad#BUILD"&gt;&lt;code&gt;ADJUST&lt;/code&gt;&lt;/a&gt; phase blocks for now.&lt;/p&gt;

&lt;p&gt;Before, a Moo attribute with various options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;is&lt;/span&gt;        &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;coerce&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;lazy&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;default&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;_build_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;coerce&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;_coerce_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;predicate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After, an Object::Pad slot. No coercion and builder code is handled in a later &lt;code&gt;ADJUST&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Speaking of &lt;code&gt;ADJUST&lt;/code&gt; blocks, it took a little bit of insight from the &lt;a href="https://web.libera.chat/#perl"&gt;#perl IRC channel&lt;/a&gt; to realize that they were the appropriate place for setting slot defaults that are computed from other slots. Previously I was using a maze of dependencies mixing Moo &lt;a href="https://metacpan.org/pod/Moo#lazy"&gt;&lt;code&gt;lazy&lt;/code&gt;&lt;/a&gt; attributes and &lt;a href="https://metacpan.org/pod/Moo#builder"&gt;&lt;code&gt;builder&lt;/code&gt;&lt;/a&gt; methods. Clarifying the main set of optional constructor arguments into a &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L82"&gt;single &lt;code&gt;ADJUST&lt;/code&gt; block&lt;/a&gt; helped untangle things, so this might be an indication that lazy attributes are an antipattern when trying to write clean code. It’s also worth noting that Object::Pad &lt;code&gt;ADJUST&lt;/code&gt; blocks run on object construction, whereas Moo &lt;code&gt;lazy&lt;/code&gt; attributes are only built when needed. This tends to matter for database access.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ADJUST&lt;/code&gt; block for the &lt;code&gt;$schema&lt;/code&gt; slot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@connect_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$dsn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;require &lt;/span&gt;&lt;span class="si"&gt;$class_name&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$class_name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@connect_info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;blessed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;DBIx::Class::Schema&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$SIG&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="bp"&gt;__WARN__&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="sr"&gt;/ has no primary key at /ms&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;*STDERR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;App::DBCritic::&lt;/span&gt;&lt;span class="nv"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@connect_info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;croak&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No schema defined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Object::Pad’s slots have one great advantage over Moo and Moose attributes: they directly support Perl array and hash data structures, while the latter only supports &lt;a href="https://perldoc.perl.org/perldata#Scalar-values"&gt;scalars&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perlref"&gt;references&lt;/a&gt; contained in scalars. This means methods in your class can eliminate a &lt;a href="https://perldoc.perl.org/perlref#Using-References"&gt;dereferencing&lt;/a&gt; step, again leading to cleaner code. I used this specifically in the &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L124"&gt;&lt;code&gt;@violations&lt;/code&gt; array&lt;/a&gt; and &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L114"&gt;&lt;code&gt;%elements&lt;/code&gt; hash&lt;/a&gt; slots and was very pleased with the results.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@violations&lt;/code&gt; and &lt;code&gt;%elements&lt;/code&gt; slots and their &lt;code&gt;ADJUST&lt;/code&gt; blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;%elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;%elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;ResultSource&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;ResultSet&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;resultset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;@violations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_policy_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$elements&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;violations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;wantarray&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;I did have some development lifecycle issues with Object::Pad, but they’re mainly a result of its future-facing syntax. I had to give up using &lt;code&gt;perltidy&lt;/code&gt; and &lt;code&gt;perlcritic&lt;/code&gt; in my build and test phases, respectively: &lt;code&gt;perltidy&lt;/code&gt; doesn’t understand slot attributes like &lt;code&gt;:reader&lt;/code&gt; and &lt;code&gt;:param&lt;/code&gt; and will emit an error file (but code still compiles), and several of the &lt;code&gt;perlcritic&lt;/code&gt; policies I use report problems because its &lt;a href="https://metacpan.org/pod/PPI"&gt;PPI&lt;/a&gt; parser doesn’t recognize the new syntax. I could add exceptions in the &lt;code&gt;perlcriticrc&lt;/code&gt; file and litter my code with more &lt;code&gt;## no critic&lt;/code&gt; annotations than it already had, but at this point, it was easier to just disable it entirely.&lt;/p&gt;

&lt;p&gt;Another thing I had to disable for now was my &lt;a href="https://metacpan.org/pod/Dist::Zilla::Plugin::Test::UnusedVars"&gt;Dist::Zilla::Plugin::Test::UnusedVars&lt;/a&gt;-generated &lt;a href="https://metacpan.org/pod/Test::Vars"&gt;Test::Vars&lt;/a&gt; test for detecting unused variables, as it reports multiple failures for the hidden &lt;code&gt;@(Object::Pad/slots)&lt;/code&gt; variable. It does have &lt;a href="https://metacpan.org/pod/Test::Vars#all_vars_ok(%args)"&gt;options for ignoring certain variables&lt;/a&gt;, though, so I can explore using those and possibly file a &lt;a href="https://github.com/houseabsolute/p5-Test-Vars/pulls"&gt;pull request&lt;/a&gt; to ignore that variable by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-the-future-looks-bright"&gt;
  &lt;/a&gt;
  Conclusion: The future looks bright
&lt;/h2&gt;

&lt;p&gt;Overall I’m satisfied with Object::Pad and by extension some of the syntax that Corinna will introduce. I’m going to try porting the rest of dbcritic and see if I can work around the issues I listed above without giving up the &lt;a href="https://qa.perl.org/phalanx/kwalitee.html"&gt;kwalitee&lt;/a&gt; improvement tools I’m used to. I’ll post my findings if I feel it merits another blog.&lt;/p&gt;

&lt;p&gt;What do you think? Is this the future of object-oriented Perl? Let me know in the comments below.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/what-s-next-for-object-oriented-perl-f1a</id>
    <published>2021-08-03T14:00:00Z</published>
    <updated>2021-08-03T14:00:00Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="corinna"/>
    <category term="moo"/>
  </entry>
  <entry>
    <title>#523 - How to improve your Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/523.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>There were not many posts this week, but some of them were really interesting.</p>
<p>Personally I got a bit overwhelmed with work. It is very interesting that there are organizations where people don't know how to use git properly, where they hardly have any tests and no CI is running, but they already have Kubernetes set up because some consultant thought that would be cool to use it.</p>
<p>On one hand it makes me angry that people don't introduce testing, CI, and CD early in the development process. It would be a lot cheaper, smoother and faster for them, but on the other hand I also like trying to figure out how things happen to work. Sometimes, it seems, by total chance.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/523.html</id>
    <published>2021-08-02T10:00:00Z</published>
    <updated>2021-08-02T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Ugly Numbers / Square Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/01#pwc123" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt;= 1. Write a script to find the $nth Ugly Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_ugly{
    my($x) = @_; 
    for my $factor (prime_factor($x)){
        return false if $factor != 2 &amp;&amp; $factor != 3 &amp;&amp; $factor !=5; 
    }
    return true; 
}

sub nth_ugly{
    my($n) = @_;  
    return 1 if $n == 1; 
    my $ugly_count = 1; 
    my $i = 1;  
    do{
        $i++;
        $ugly_count++ if is_ugly($i);   
    }while($ugly_count != $n);
    return $i;    
} 

MAIN:{
    my($N);
    $N = 7; 
    print nth_ugly($N) . "\n"; 
    $N = 10; 
    print nth_ugly($N) . "\n"; 
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I also worked this problem in Prolog and C++ and, unsurprisingly, the Perl code is the 
shortest. All three solutions followed the same approach but Perl's syntax is naturally 
less verbose without making comprehension of the code more difficult.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given co-ordinates for four points. Write a script to find out if the given 
four points form a square.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;  
use Math::GSL::Vector;

sub unique{
    my %seen;
    return grep {!$seen{$_}++} @_;
} 

sub is_square{
    my @points = @_;
    ##
    # Definitely a square if there are only 2 x and 2 y values. 
    ##
    my @x = unique(map {$_-&gt;[0]} @points);  
    my @y = unique(map {$_-&gt;[1]} @points);  
    return true if @x == 2 &amp;&amp; @y == 2;
    ##
    # sort the points and compute side lengths  
    ##  
    my @sorted_x = sort {$a-&gt;[0] &lt;=&gt; $b-&gt;[0]} @points;  
    my @sorted_y = sort {$a-&gt;[1] &lt;=&gt; $b-&gt;[1]} @points;  
    my($s, $t, $u, $v) = ($sorted_y[@sorted_y - 1], $sorted_x[@sorted_x - 1], $sorted_y[0], $sorted_x[0]);    
    return false if $s-&gt;[0] + $u-&gt;[0] != $t-&gt;[0] + $v-&gt;[0];  
    return false if $s-&gt;[1] + $u-&gt;[1] != $t-&gt;[1] + $v-&gt;[1];  
    return false if $s-&gt;[1] - $u-&gt;[1] != $t-&gt;[0] - $v-&gt;[0];  
    ##
    # compute angles 
    ##
    my $dv_st = new Math::GSL::Vector([$s-&gt;[0] - $t-&gt;[0], $s-&gt;[1] - $t-&gt;[1]]); 
    my $dv_tu = new Math::GSL::Vector([$t-&gt;[0] - $u-&gt;[0], $t-&gt;[1] - $u-&gt;[1]]); 
    my $dv_uv = new Math::GSL::Vector([$u-&gt;[0] - $v-&gt;[0], $u-&gt;[1] - $v-&gt;[1]]); 
    my $dv_vs = new Math::GSL::Vector([$v-&gt;[0] - $s-&gt;[0], $v-&gt;[1] - $s-&gt;[1]]); 
    return false if $dv_st * $dv_tu != 0;
    return false if $dv_tu * $dv_uv != 0;
    return false if $dv_uv * $dv_vs != 0;
    return true;  
}



MAIN:{
    my @points;
    @points = ([10, 20], [20, 20], [20, 10], [10, 10]);  
    print is_square(@points) . "\n";  
    @points = ([12, 24], [16, 10], [20, 12], [18, 16]);  
    print is_square(@points) . "\n";  
    @points = ([-3, 1], [4, 2], [9, -3], [2, -4]);  
    print is_square(@points) . "\n";  
    @points = ([0, 0], [2, 1], [3, -1], [1, -2]);  
    print is_square(@points) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The logic of determining if the points determine a square is clear to most people familiar
with geometry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are there only two each of X and Y co-ordinates? Then that is enough to establish that
we have a square.
&lt;/li&gt;
&lt;li&gt;Otherwise, make sure the side lengths are all equivalent and that the angles between the
sides are all 90 degrees.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code in &lt;code&gt;is_square()&lt;/code&gt; works through that logic with multiple exit points set up along 
the way. Perhaps this is a bit odd looking but I have been doing a lot of logic 
programming in Prolog recently and thought to give a somewhat more logical style to this
perl solution to this problem. Developing a more logical style for Perl is a bit of a work
in progress for me, I will admit!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;unique&lt;/code&gt; function (and it's clever use of &lt;code&gt;grep&lt;/code&gt;!) was taken from a 
&lt;a href="https://perlmaven.com/unique-values-in-an-array-in-perl"&gt;PerlMaven article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/"&gt;Challenge 123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24078.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24559.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Rhombus.html"&gt;Rhombus&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc123</id>
    <published>2021-08-01T17:00:00-04:00</published>
    <updated>2021-08-01T17:00:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy-POD">Acme-PERLANCAR-Dummy-POD</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Dummy distribution for various POD testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ClipboardUtils">App-ClipboardUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to clipboard</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DiffPDFText">App-DiffPDFText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Diff the text of two PDF documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Easer">App-Easer</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Simplify writing (hierarchical) CLI applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleFeaturesUtils">App-ModuleFeaturesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>CLI Utilities related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Phoebe">App-Phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>4.01</td>
<td>4.01</td>
<td>a Gemini-based wiki</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arxiv2bib">App-arxiv2bib</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Extract bibliographic data from the arXiv API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-efm_perl">App-efm_perl</a></td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>0.01</td>
<td>1.0.0</td>
<td>It's new $module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-grep-url">App-grep-url</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Print lines having URL(s) (optionally of certain criteria) in them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-quickabspath">App-quickabspath</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Print the absolute path</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-intrange">App-seq-intrange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Like seq, but accepts intrange specification (e.g. 1,5-10,15)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-numseq">App-seq-numseq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like seq, but accepts numseq specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-List-Utils-MoveElement">Bencher-Scenarios-List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Scenarios to benchmark List::Utils::MoveElement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Book-Collate">Book-Collate</a></td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Tools to Collate and Report Text Documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-Session-Store-Redis-Fast">Catalyst-Plugin-Session-Store-Redis-Fast</a></td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1.000</td>
<td>1.001</td>
<td>lib/Catalyst/Plugin/Session/Store/Redis/Fast.pm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clipboard-Any">Clipboard-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Common interface to clipboard manager functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Messages">Cucumber-Messages</a></td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>17.0.0</td>
<td>17.0.0</td>
<td>A library for (de)serializing Cucumber protocol messages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-ManipX-Almanac">Date-ManipX-Almanac</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_901</td>
<td>0.001_01</td>
<td>Add almanac date/time functionality (sunrise, etc.) to Date::Manip</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-Format-JP">DateTime-Format-JP</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Japanese DateTime Parser and Formatter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Desktop-Open">Desktop-Open</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Open a file or URL in the user's preferred application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Prereqs-From-cpmfile">Dist-Zilla-Plugin-Prereqs-From-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Register prereqs from cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-EA">Evo-EA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Perl extension for evolutionary algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-GA">Evo-GA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.13</td>
<td>Perl extension for genetic algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Immune">Evo-Immune</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for GA for the biological immune system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Inference">Evo-Inference</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for an Inference engine for Evolutionary Algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-MoreUtils">File-Temp-MoreUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Provide more routines related to creating temporary files/dirs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Timer">Future-Timer</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>timer implemented as Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-Hashed">Getopt-EX-Hashed</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9905</td>
<td>Hash store object automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphite-Simple">Graphite-Simple</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IntRange-Iter">IntRange-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Generate a coderef iterator from an int range specification (e.g. '1,5-10,20')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSONSchema-Validator">JSONSchema-Validator</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Validator for JSON Schema Draft4 and OpenAPI Specification 3.0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-Go-Mod">Lang-Go-Mod</a></td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>parse and model go.mod files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Utils-MoveElement">List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Move elements of a list, optionally with XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Cryptarithm">Math-Cryptarithm</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.02</td>
<td>0.02</td>
<td>Solving simple cryptarithm.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-FeaturesUtil-Get">Module-FeaturesUtil-Get</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Get a feature</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-cpmfile">Module-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Parse cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Leds">Mojo-Leds</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>1.02</td>
<td>Leds aka Light Environment (emi) for Development System based on Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-MongoDBv2">Mojolicious-Plugin-MongoDBv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Mongodbv2">Mojolicious-Plugin-Mongodbv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.02</td>
<td>1.00</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Restify-OtherActions">Mojolicious-Plugin-Restify-OtherActions</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Mojolicious plug-in which extends Restify with more actions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Route">Mojolicious-Plugin-Route</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plugin to loader files of routes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-MouseTypeConstraints">MooX-MouseTypeConstraints</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Mouse type constraints for Moo</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Guidonian">Music-Guidonian</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a "Guidonian Hand" melodic phrase generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Magallanes">Net-Magallanes</a></td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>encapsulation of API calls to RIPE Atlas project.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NumSeq-Iter">NumSeq-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Generate a coderef iterator from a number sequence specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Final">Object-Pad-SlotAttr-Final</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare Object::Pad slots readonly after construction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Trigger">Object-Pad-SlotAttr-Trigger</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>invoke an instance method after a :writer accessor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Ozeki-Libs-Rest">Ozeki-Libs-Rest</a></td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>You can use this module to send SMS messages with the Ozeki SMS Gateway using Perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-Args-Common">Perinci-Sub-Args-Common</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A collection of common subroutine argument specifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-PrereqScanner-Scanner-TestNeeds">Perl-PrereqScanner-Scanner-TestNeeds</a></td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>0.001</td>
<td>0.001</td>
<td>scan for modules loaded with Test::Needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/QRCode-Base45">QRCode-Base45</a></td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Base45 encoding used in QR codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-DefHash">Regexp-Pattern-DefHash</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to DefHash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-IntRange">Regexp-Pattern-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-URI">Regexp-Pattern-URI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to URI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2-FFI">SDL2-FFI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.05</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Manual">Sah-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Documentation for Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Bencher">Sah-Schemas-Bencher</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>1.054.0</td>
<td>1.054.1</td>
<td>Sah schemas for Bencher</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-CPANModules">Sah-Schemas-CPANModules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Sah schemas for Acme::CPANModules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-IntRange">Sah-Schemas-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Sah schemas for various integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ModuleFeatures">Sah-Schemas-ModuleFeatures</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-NumSeq">Sah-Schemas-NumSeq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas for number sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Deprecate">Sub-Deprecate</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Assists in providing deprecation notices to subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TCOD">TCOD</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.009</td>
<td>FFI bindings for libtcod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Fixture-Teng">Test-Fixture-Teng</a></td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>load fixture data to storage for Teng</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mojo-Role-Routes">Test-Mojo-Role-Routes</a></td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Write Mojo tests using named routes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-PO">Text-PO</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Read and write PO files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-QuacksLike">Types-QuacksLike</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001001</td>
<td>Check for object providing all methods from a class or role</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-EN-StopWords">WordList-EN-StopWords</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>English stop words</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>34</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-PERLANCAR-Dummy-POD PERLANCAR 0.001 0.005 Dummy distribution for various POD testing App-ClipboardUtils PERLANCAR 0.001 0.001 CLI utilities related to clipboard App-DiffPDFText PERLANCAR 0.001 0.002 Diff the text of two PDF documents App-Easer POLETTIX 0.001 0.002 Simplify writing (hierarchical) CLI applications App-ModuleFeaturesUtils PERLANCAR 0.001 0.003 CLI Utilities related to Module::Features App-Phoebe SCHROEDER … <a href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1949</id>
    <published>2021-08-01T00:01:20Z</published>
    <updated>2021-08-01T00:01:20Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>How deep is a recursion in Perl?</title>
  <summary type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></summary>
  <updated>2021-07-31T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/how-deep-is-the-recursion"/>  <id>https://perlmaven.com/how-deep-is-the-recursion</id>
  <content type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#522 - Promote Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/522.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I am sure many of you are aware of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt;. It all started with GNOME's Women's Summer Outreach Program (WSOP) in 2006. The idea was to encourage women's participation in Open Source projects. In 2009, the GNOME community revived the program to encourage more women to contribute to GNOME and renamed it to GNOME Outreach Program for Women. It became a very popular program in no time and successfully brought in more women into the fold. The program was further expanded with more organisations joining in e.g. Fedora, Mozilla, JBoss, OpenStack, Subversion etc. With the additions, in 2013, the program was renamed to the Free and Open Source Software Outreach Program. At one point, there were 16 organizations involved in this program. In 2015, the program was again renamed to Outreachy.&lt;/p&gt;
&lt;p&gt;Did I mention Perl in the above discussion?&lt;/p&gt;
&lt;p&gt;Well, in 2014, TPF sponsored an internship for Pattawan Kaewduangdee to work on MetaCPAN under the mentorship of Olaf Alders as a part of the Outreach Program for Women. There is another name that caught my eye, Upasana Shukla. I came across &lt;a href="https://upasana.me/2013/05/18/meta-cpan-debian-wikimedia-twisted-dancer-moose/"&gt;a blog post&lt;/a&gt; by Upasana where she mentioned how GNOME's Outreach Program for Women helped her get into the Perl fold. If you look at the &lt;a href="https://www.outreachy.org/alums/2021-05/"&gt;list of interns&lt;/a&gt; from the Indian subcontinent (India, Pakistan, Bangladesh, Nepal, Sri Lanka) it is amazing. In recent years, TPF has sponsored &lt;a href="https://world.openfoodfacts.org"&gt;Open Food Facts&lt;/a&gt; projects for Outreachy. In 2020, Areesha Tariq, from Pakistan successfully got the internship to work on the Open Food Facts project. Please check out this &lt;a href="https://medium.com/@areeshatariq02/get-a-remote-and-paid-internship-my-outreachy-experience-482a6cfc0564"&gt;blog post&lt;/a&gt; by Areesha sharing her experience. It didn't stop there, a few weeks ago, TPF announced another intern, Rosheen Naeem, again from Pakistan, to work on the Open Food Facts project. You should check out her recent &lt;a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4"&gt;blog post&lt;/a&gt; about her journey. It is very inspiring.&lt;/p&gt;
&lt;p&gt;I would like to thank TPF for supporting the Perl projects and Outreachy.&lt;/p&gt;
&lt;p&gt;I can tell you from my own experience, we have great talent in the Indian Subcontinent. I wish more and more organisations would come forward and sponsor interns from these regions. When I started &lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge - Perl &amp; Raku&lt;/a&gt;, (a.k.a Perl Weekly Challenge), I was hoping to tap into the talent pool from this region, specially young college students. As the tagline says "You do not have to be an expert" to take part in the weekly challenge. Although we do have handful of students from Russia in the team. I am glad that, at least, we have built a platform where geeks from around the world come and share their experiences every week. Maybe one day we will have sponsors to help us reach out to young talent and bring new energy into the Perl community. Sometimes I wonder why we have never had a Perl Conference on the Indian subcontinent just like we have here in Europe and America. It shouldn't be too hard to hold one as these days everything is online. We could invite guest speakers from across the globe to address the talent in the region. Is there anyone out there willing to help us orgranise Perl Conference?&lt;/p&gt;
&lt;p&gt;A humble request to all fellow citizens of the United Kingdom, please don't listen to Boris Johnson (Prime Minister of the UK) and keep wearing masks in public and maintain social distancing.&lt;/p&gt;
&lt;p&gt;Enjoy rest of the newsletter until then.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/522.html</id>
    <published>2021-07-26T10:00:00Z</published>
    <updated>2021-07-26T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Average of Stream / Basketball Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/25#pwc122" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a stream of numbers, @N. Write a script to print the average of the stream 
at every point.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub moving_average{
    my $n = 0;
    my $sum = 0;
    {
        $n += 1;
        $sum += shift;
        print $sum / $n;
        print ", " if @_;
        redo if @_;
    }
    print "\n";
}


MAIN:{
    my @N;
    for(my $i = 10; $i &lt; 1_000_000; $i += 10){
        push @N, $i;
    }
    moving_average(@N);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, &lt;OUTPUT TRUNCATED&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Typically when one thinks of a &lt;em&gt;stream&lt;/em&gt; the idea is of a virtually endless source of data.
Or, at least, data which is handled as if this were the case. Here the "stream" is 
simulated by a long (one million items) array.&lt;/p&gt;

&lt;p&gt;The computation of the average as the simulated stream is evaluated is done using a &lt;code&gt;redo&lt;/code&gt;
loop. I would think it is fair to say that typically my code is somewhat verbose. I prefer
to be fairly explicit in that way to enhance readability. Here, however, I try to be more
terse. The "stream" is evaluated by shifting values off the array passed to the function.
The array argument is also used to determine if the block should be repeated, and also
to format the output. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a score $S. You can win basketball points e.g. 1 point, 2 points and 3 
points. Write a script to find out the different ways you can score $S.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub basketball_points{
    my($total) = @_;
    my %points;
    my @valid_points;
    $points{"1"} = "1";
    $points{"2"} = "2";
    $points{"3"} = "3";
    while((keys %points) &gt; 0){
        my %updated_points = ();
        for my $points (keys %points){
            my @points = split(/,/, $points);
            for my $point (1 .. 3){
                my $point_sum = unpack("%32I*", pack("I*",  (@points, $point)));
                push @valid_points, [@points, $point] if $point_sum == $total;
                $updated_points{join(",", (@points, $point))} = $point_sum if $point_sum &lt; $total;
            }
        }
        %points = %updated_points;
    }
    return @valid_points;
}

MAIN:{
    my $S;
    $S = 4;
    print "\$S = $S\n";
    my @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
    $S = 5;
    print "\n\$S = $S\n";
    @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
$S = 4
1 3
2 2
3 1
1 2 1
1 1 2
2 1 1
1 1 1 1

$S = 5
3 2
2 3
3 1 1
2 1 2
1 3 1
2 2 1
1 2 2
1 1 3
1 2 1 1
1 1 1 2
1 1 2 1
2 1 1 1
1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here borrows heavily from the solution to the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;triangle problem&lt;/a&gt; from 
Challenge 117. This is a &lt;em&gt;dynamic programming&lt;/em&gt; style solution which builds and updates
lists of potential point sequences. Uniqueness is guaranteed by saving the lists as hash
keys, in a command separated values string format. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-122/"&gt;Challenge 122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.topcoder.com/thrive/articles/Dynamic%20Programming:%20From%20Novice%20to%20Advanced"&gt;Dynamic Programming&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc122</id>
    <published>2021-07-25T18:53:00-04:00</published>
    <updated>2021-07-25T18:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Deep recursion on subroutine</title>
  <summary type="html"><![CDATA[<p>
When calling a function in <a href="/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></summary>
  <updated>2021-07-23T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/deep-recursion-on-subroutine"/>  <id>https://perlmaven.com/deep-recursion-on-subroutine</id>
  <content type="html"><![CDATA[<p>
When calling a function in <a href="/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
