<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-07-08T12:54:44Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Elixir, Elm, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-07-08T00:00:00Z</published>
    <updated>2022-07-08T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Mite: an OO compiler for Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/toby_inkster/2022/07/mite-an-oo-compiler-for-perl.html"/>
    <id>tag:blogs.perl.org,2022:/users/toby_inkster//1019.10838</id>
    <published>2022-07-02T22:05:10Z</published>
    <updated>2022-07-07T20:14:36Z</updated>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Moose" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="roles" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="mite" label="Mite" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="moo" label="Moo" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="moose" label="Moose" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="oop" label="OOP" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<div>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Moose">Moose</a> is great, but it does introduce a slight performance hit to your code. In the more than 15 years since it was first released, hardware improvements have made this less of a problem than it once was. Even so, if performance is a concern for your project, Moose might not be what you want. It also has a fairly big collection of non-core dependencies.</p>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Moo">Moo</a> is a lighter weight version, minus with meta-object protocol, but supporting nearly all of Moose's other features. It loads faster, sometimes runs faster, and has fewer dependencies. (And most of the dependencies it does have are just modules which used to be part of Moo but were split out into separate distributions.)</p>
		<p>But what if you could have fast Moose-like object-oriented code without the dependencies?</p>
		<p>In 2013, Michael Schwern started work on <a class="podlinkpod" href="https://metacpan.org/pod/Mite">Mite</a> to do just that. It was abandoned in 2014, but I've taken it over and expanded the feature set to roughly equivalent to Moo.</p>
		<p>Mite is an object-oriented programming <i>compiler</i> for Perl. It allows you to write familiar Moose-like object-oriented code, then compile that into plain Perl with zero non-core dependencies. Your compiled code does not even have a dependency on Mite itself!</p>
</div>]]>
        <![CDATA[		<h2><span id="How_do_I_use_Mite?">How do I use Mite?</span></h2>
		<p>Here's how you could start a project with Mite or port an existing Moose/Moo project.</p>
		<!-- for highlighter language=Bash -->
		<pre class="highlighting-bash">   <span class="core" style="color:#009;font-weight:bold">cd</span> Your-Project/
   mite init <span class="single" style="color:#909">'Your::Project'</span>
   mite compile</pre>
		<p>After you've run those commands, Mite will create a module called <code>Your::Project::Mite</code>. This module is your project's own little gateway to Mite. This module is called the shim.</p>
		<p>Now let's write a test case:</p>
		<!-- for highlighter language=Perl -->
		<pre class="highlighting-perl"><span class="comment" style="color:#060;font-style:italic">   # t/unit/Your-Project-Widget.t
</span>   <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Test2::V0</span>
      <span class="word">-target</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Your::Project::Widget'</span><span class="structure">;</span>
   
   <span class="word">can_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'new'</span> <span class="structure">);</span>
   
   <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">name</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Quux'</span> <span class="structure">);</span>
   <span class="word">isa_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$CLASS</span> <span class="structure">);</span>
   
   <span class="word">subtest</span> <span class="single" style="color:#909">'Method `name`'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">can_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'name'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">name</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'Quux'</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'expected value'</span> <span class="structure">);</span>
      
      <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$exception</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">dies</span> <span class="structure">{</span>
         <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">name</span><span class="structure">(</span> <span class="single" style="color:#909">'XYZ'</span> <span class="structure">);</span>
      <span class="structure">};</span>
      <span class="word">isnt</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$exception</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="core" style="color:#009;font-weight:bold">undef</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'read-only attribute'</span> <span class="structure">);</span>
   <span class="structure">};</span>
   
   <span class="word">subtest</span> <span class="single" style="color:#909">'Method `upper_case_name`'</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="structure">{</span>
      <span class="word">can_ok</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'upper_case_name'</span> <span class="structure">);</span>
      <span class="word">is</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">upper_case_name</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'QUUX'</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="single" style="color:#909">'expected value'</span> <span class="structure">);</span>
   <span class="structure">};</span>
   
   <span class="word">done_testing</span><span class="structure">;</span></pre>
		<p>And a class to implement the functionality:</p>
		<!-- for highlighter language=Perl -->
		<pre class="highlighting-perl"><span class="comment" style="color:#060;font-style:italic">   # lib/Your/Project/Widget.pm
</span>   <span class="keyword" style="color:#009;font-weight:bold">package</span> <span class="word">Your::Project::Widget</span><span class="structure">;</span>

   <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Your::Project::Mite</span><span class="structure">;</span>
   
   <span class="word">has</span> <span class="word">name</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="structure">(</span>
      <span class="word">is</span>     <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'ro'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">isa</span>    <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Str'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
   <span class="structure">);</span>
   
   <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">upper_case_name</span> <span class="structure">{</span>
      <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">;</span>
      <span class="keyword" style="color:#009;font-weight:bold">return</span> <span class="word">uc</span><span class="structure">(</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">name</span> <span class="structure">);</span>
   <span class="structure">}</span>
   
   <span class="number" style="color:#39C">1</span><span class="structure">;</span></pre>
		<p>Run <code>mite compile</code> again then run the test case. It should pass.</p>
		<h2><span id="How_does_Mite_work?">How does Mite work?</span></h2>
		<p>It's important to understand what Mite is doing behind the scenes.</p>
		<p>When you ran <code>mite compile</code>, Mite created a file called <em>lib/Your/Project/Widget.pm.mite.pm</em>. (Yes, a triple file extension!) This file contains your class's <code>new</code> method. It contains the code for the accessor.</p>
		<p>That file does not contain the code for <code>upper_case_name</code> which is still in the original <em>lib/Your/Project/Widget.pm</em>.</p>
		<p>When Perl loads <code>Your::Project::Widget</code>, it will see this line and load the shim:</p>
		<!-- for highlighter language=Perl -->
		<pre class="highlighting-perl">   <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Your::Project::Mite</span><span class="structure">;</span></pre>
		<p>The shim just loads <em>lib/Your/Project/Widget.pm.mite.pm</em>, exports a <code>has</code> function that does (almost) nothing, and then gets out of the way. This gives Perl a working class.</p>
		<h2><span id="What_features_does_Mite_support?">What features does Mite support?</span></h2>
		<p>Most of what Moo supports is supported by Mite. In particular:</p>
		<dl>
			<dt><span id="extends_@superclasses"><code>extends @superclasses</code></span></dt>
			<dd><p>Mite classes within your project can inherit from other Mite classes within your project, but not from non-Mite classes, and not from Mite classes from a different project.</p></dd>
			<dt><span id="with_@roles"><code>with @roles</code></span></dt>
			<dd>
				<p>As of version 0.002000, Mite also supports roles. If you want your package to be a role instead of a class, just do:</p>
				<!-- for highlighter language=Perl -->
				<pre class="highlighting-perl">   <span class="keyword" style="color:#009;font-weight:bold">package</span> <span class="word">Your::Project::Nameable</span><span class="structure">;</span>
   <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Your::Project::Mite</span> <span class="word">-role</span><span class="structure">;</span>
   <span class="word">has</span> <span class="word">name</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="structure">(</span>
      <span class="word">is</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'ro'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">isa</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="single" style="color:#909">'Str'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
   <span class="structure">);</span>
   <span class="number" style="color:#39C">1</span><span class="structure">;</span></pre>
				<p>As with <code>extends</code>, a limitation is that you can only use Mite roles from within your own project, not non-Mite roles, nor Mite roles from a different project.</p>
				<p>(A future development might add support for <a class="podlinkpod" href="https://metacpan.org/pod/Role%3A%3ATiny">Role::Tiny</a> roles though.)</p>
			</dd>
			<dt><span id="has_$attrname_=&gt;_%spec"><code>has $attrname =&gt; %spec</code></span></dt>
			<dd><p>Attributes are obviously one of the main features people look for in a Perl object-oriented programming framework and Mite supports nearly all of Moose's features for defining attributes.</p><p>This includes <code>is =&gt; 'ro'</code>, <code>is =&gt; 'rw'</code>, <code>is =&gt; 'bare'</code>, <code>is =&gt; 'rwp'</code> (like Moo), and <code>is =&gt; 'lazy'</code> (like Moo); <code>required</code> and <code>init_arg</code> for attribute initialization; <code>reader</code>, <code>writer</code>, <code>accessor</code>, <code>predicate</code>, <code>clearer</code>, and <code>trigger</code>; <code>lazy</code>, <code>default</code>, and <code>builder</code>; <code>weak_ref</code>; <code>isa</code> and <code>coerce</code> for type constraints, including support for any type constraints in <a href="https://metacpan.org/pod/Types%3A%3AStandard" class="podlinkpod">Types::Standard</a>, <a class="podlinkpod" href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3ANumeric">Types::Common::Numeric</a>, and <a href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3AString" class="podlinkpod">Types::Common::String</a>; and delegation using <code>handles</code>. It also supports an option which Moose doesn't provide: <code>alias</code> for aliasing attributes.</p><p>Mite builds in the functionality of <a href="https://metacpan.org/pod/MooseX%3A%3AStrictConstructor" class="podlinkpod">MooseX::StrictConstructor</a>, dying with an appropriate error message if you pass your class's constructor any parameters it wasn't expecting.</p></dd>
			<dt><span id="BUILDARGS,_BUILD,_and_DEMOLISH"><code>BUILDARGS</code>, <code>BUILD</code>, and <code>DEMOLISH</code></span></dt>
			<dd><p>Methods you can define to control the life cycle of objects.</p></dd>
			<dt><span id="before_$method_=&gt;_sub_{_..._}"><code>before $method =&gt; sub { ... }</code></span></dt>
			<dd/>
			<dt><span id="after_$method_=&gt;_sub_{_..._}"><code>after $method =&gt; sub { ... }</code></span></dt>
			<dd/>
			<dt><span id="around_$method_=&gt;_sub_{_..._}"><code>around $method =&gt; sub { ... }</code></span></dt>
			<dd><p>Mite classes and roles can define method modifiers.</p></dd>
		</dl>
		<p>As long as your needs aren't super-sophisticated (introspection using the MOP, runtime application of roles, etc), Mite probably has the features you need for even medium to large projects.</p>
		<p>Mite itself uses Mite!</p>
		<h2><span id="Be_honest,_what_are_the_drawbacks?">Be honest, what are the drawbacks?</span></h2>
		<p>This code still doesn't have a lot of testing "in the wild". Moose and Moo have proven track records.</p>
		<p>You need to remember to <code>mite compile</code> your code after making changes before running your test suite or packaging up a release. This can be annoyingly easy to forget to do. (Though Mite does also include extensions for ExtUtils::MakeMaker and Module::Build to help integrate that into your workflow.)</p>
		<p>The Mite compiler's scope of only looking at the files within your own project limits the ability to create roles which can be composed by third-parties, or classes which can easily be extended by third-parties. If you want that, Moose or Moo are a better option.</p>
		<h2><span id="Okay,_I'm_interested">Okay, I'm interested</span></h2>
		<p>If you've read this and you're thinking about porting a Moose or Moo project to Mite, feel free to @-mention <a href="https://github.com/tobyink" class="podlinkurl">tobyink on Github</a> in issue tickets, pull requests, etc if you need any help.</p>
		<p>If there are features which you think Mite is missing which you'd need to port your project to Mite, file bugs with the <a href="https://github.com/tobyink/p5-mite/issues" class="podlinkurl">Mite issue tracker</a>.</p>
]]>
    </content>
</entry>
  <entry>
    <title> ERROR: 'flock' trapped by operation mask at /usr/lib64/perl5/vendor_perl/Storable.pm </title>
    <link rel="alternate" href="http://blogs.perl.org/users/kavya/2022/07/error-flock-trapped-by-operation-mask-at-usrlib64perl5vendor-perlstorablepm.html"/>
    <id>tag:blogs.perl.org,2022:/users/kavya//4138.10843</id>
    <published>2022-07-05T13:25:45Z</published>
    <updated>2022-07-06T17:08:47Z</updated>
    <author>
        <name>kavya</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/kavya/">
        <![CDATA[<p>Hello All,<br />
Facing flock error when trying to execute the Automated unit testing .</p>

<p><tt>705:041754.467 CPM0   frl-plugin:perlscript: ERROR: 'flock' trapped by operation mask at /usr/lib64/perl5/vendor_perl/Storable.pm line 268.<br />
 Compilation failed in require at /usr/share/perl5/vendor_perl/Const/Fast.pm line 15.<br />
 Compilation failed in require.<br />
 BEGIN failed--compilation aborted.</tt></p>

<p>Could anyone please help on the issue</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 172: Prime Partition and Five-Number Summary </title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-172-prime-partition-and-five-number-summary.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10844</id>
    <published>2022-07-05T20:49:42Z</published>
    <updated>2022-07-06T02:29:09Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 172 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-172/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on July 10, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Prime Partition</h2>

<p><em>You are given two positive integers, <code>$m</code> and <code>$n</code>.</em></p>

<p><em>Write a script to find out the Prime Partition of the given number. No duplicates allowed.</em></p>

<p><em>For example,</em></p>

<pre><code>Input: $m = 18, $n = 2
Output: 5, 13 or 7, 11

Input: $m = 19, $n = 3
Output: 3, 5, 11
</code></pre>

<p>The task description doesn&#8217;t say what a prime partition is. In mathematics, a partition of a positive integer <code>n</code> is usually a way of writing <code>n</code> as a sum of positive integers. We can assume that a <em>prime partition</em> is a partition made of only prime numbers. This is confirmed by the examples. From the examples, we can also infer that the second integer <code>$n</code> is the number of (prime) integers whose sum should be equal to <code>$m</code>. Also, the first example has two solutions (5, 13 <em>or</em> 7, 11). To me, this means that either solution is valid. So, I won&#8217;t bother to display all solutions when there is more than one, but will stop searching as soon as one solution has been found. Finally, since duplicates are not allowed, there will be some input values for which there is no solution. For example, for the input integers (17, 3): 17 could be considered as the sum of 3 primes, 13, 2, 2, but this isn&#8217;t a valid solution because of the duplicate 2 values. It is quite easy to check manually that there is no valid solution.</p>

<h3>Prime Partition in Raku</h3>

<p>We implement a recursive <code>partition</code> subroutine. If the second parameter (<code>$n</code>) is larger than 2, then <code>partition</code> subroutine loops through a list of prime number and calls itself recursively with a second parameter of <code>$n - 1</code>. If the second parameter is 2, then we stop recursion and find the solution (if any).</p>

<pre><code>my @primes = grep { .is-prime }, 1..100;
my %seen;

sub partition (Int $m, Int $n) {
    return if $n &lt; 2;
    if $n == 2 {
        for @primes -&gt; $i {
            last if $i &gt;= $m;
            my $j = $m - $i;
            next if $j == $i;
            next if %seen{$i} or %seen{$j};
            return $i, $j if $j.is-prime;
        }
        return;
    } else {
        for @primes -&gt; $i {
            last if $i &gt;= $m;
            %seen = $i =&gt; True;
            my @sub-partition = partition($m - $i, $n-1);
            next if @sub-partition.elems &lt; 2;
            return ($i, @sub-partition).flat;
        }
        return;
    }
}
for &lt;18 2&gt;, &lt;19 3&gt;, &lt;17 3&gt;, &lt;25 2&gt; -&gt; $test {
    my @partition = partition($test[0], $test[1]);
    say @partition.elems &lt; 2 ?? "$test: No solution" !! "Solution for $test: @partition[]";
}
</code></pre>

<p>With the four input tests provided, this program displays the following output:</p>

<pre><code>$ raku ./prime-partition.raku
Solution for 18 2: 5 13
Solution for 19 3: 3 5 11
17 3: No solution
Solution for 25 2: 2 23
</code></pre>

<p><em>Update July 05, 2022:</em> Shortly after I published this post earlier today, it occurred to me that there is a simpler way to do it, using the Raku built-in <a href="https://docs.raku.org/routine/combinations">combinations</a> routine:</p>

<pre><code>sub partition(Int $m, Int $n) {
    my $found = False;
    for (2..$m).grep({.is-prime}).combinations($n) -&gt; $comb {
        say "$m $n: ", $comb and $found = True if $comb.sum == $m;
    }
    say "$m $n: no solution " unless $found;
}
for &lt;18 2&gt;, &lt;19 3&gt;, &lt;17 3&gt;, &lt;25 2&gt; -&gt; $test {
    my @partition = partition($test[0], $test[1]);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ ./raku prime-partition2.raku
18 2: (5 13)
18 2: (7 11)
19 3: (3 5 11)
17 3: no solution
25 2: (2 23)
</code></pre>

<h3>Prime Partition in Perl</h3>

<p>This is a port to Perl of the first Raku program above. The only significant difference is that we had to implement our own <code>is_prime</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @primes = grep { is_prime($_) } 1..100;
my %seen;

sub is_prime {
   my $n = shift;
   return 1 if $n == 2;
   return 0 if $n % 2 == 0;
   return 0 if $n == 1;
   my $p = 3;
   my $sqrt = sqrt $n;
   while ($p &lt;= $sqrt) {
       return 0 if $n % $p == 0;
       $p += 2;
   }
   return 1;
}

sub partition  {
    my ($m, $n) = @_;
    return if $n &lt; 2;
    if ($n == 2) {
        for my $i (@primes) {
            last if $i &gt;= $m;
            my $j = $m - $i;
            next if $j == $i;
            next if $seen{$i} or $seen{$j};
            return $i, $j if is_prime($j);
        }
        return;
    } else {
        for my $i (@primes) {
            last if $i &gt;= $m;
            %seen = ($i =&gt; 1);
            my @sub_partition = partition($m - $i, $n-1);
            next if @sub_partition &lt; 2;
            return ($i, @sub_partition);
        }
        return;
    }
}
for my $test ([18, 2], [19, 3], [17, 3], [25, 2]) {
    my @partition = partition(@$test);
    say @partition &lt; 2 ? "@$test: No solution" : "Solution for @$test: @partition";
}
</code></pre>

<p>This program displays the following results:</p>

<pre><code>$ perl ./prime-partition.pl
Solution for 18 2: 5 13
Solution for 19 3: 3 5 11
17 3: No solution
Solution for 25 2: 2 23
</code></pre>

<h2>Task 2: Five-number Summary</h2>

<p><em>You are given an array of integers.</em></p>

<p><em>Write a script to compute the five-number summary of the given set of integers.</em></p>

<p><em>You can find the definition and example in the <a href="https://en.wikipedia.org/wiki/Five-number_summary">wikipedia page</a>.</em></p>

<p>The five-number summary is a set of descriptive statistics that provides information about a dataset. It consists of the five most important sample percentiles:</p>

<ul>
<li>the sample minimum (smallest observation)</li>
<li>the lower quartile or first quartile</li>
<li>the median (the middle value)</li>
<li>the upper quartile or third quartile</li>
<li>the sample maximum (largest observation)</li>
</ul>

<p>Intuitively, with a sorted data set, the <em>median</em> is the middle value separating the greater and lesser halves of the set. If the input set has an odd number of items, the median is the middle value. With an even number of items, the median is usually computed as the arithmetic mean of the two middle values. </p>

<p>The lower quartile or first quartile is the value such that one quarter (or 25%) of the items are smaller and three quarters (75%) are larger. It is the median of the lower half of the sorted dataset. And the upper or third quartile is the median of the upper half, i.e. a value such that three quarters are larger and one quarter larger. Having said that, I must add that, as often, the devil hides in the details. Depending on whether or not we include the median in the two halves, we might obtain different results, and there is no universal agreement on selecting the quartile values. This <a href="https://en.wikipedia.org/wiki/Quartile">Wikipedia page</a> lists four different methods for computing the quartiles (and, for some data sets, they will compute different results). So, it is sort of your draw, you may pick the method you prefer.</p>

<h3>Five-number Summary in Raku</h3>

<p>We implement a <code>median</code> subroutine to compute the median of a data set. As noted above, there are two formulas to compute the median, depending on whether the number of elements if even or odd. Note that our <code>median</code> subroutine relies on the fact that its input data has been previously sorted in ascending order (in the <code>summary</code> subroutine). Note that the <code>median</code> subroutine is used three times (to compute the median, or course, but also to compute the lower and upper quartiles).</p>

<p>The test data set is the set of observations of the number of moons for each planet in the solar system: <code>0, 0, 1, 2, 63, 61, 27, 13</code>, as provided in the <a href="https://en.wikipedia.org/wiki/Five-number_summary">Wikipedia page on the five-number summary</a>.</p>

<pre><code>sub median (@in) { # input values must have been sorted
    my $count = @in.elems;
    if $count %% 2 {
        return (@in[$count/2 -1] + @in[$count/2])/2;
    } else {
        return @in[($count - 1) / 2];
    }
}
sub summary (@input) {
    my @in = sort @input;
    my $min = @in[0];
    my $max = @in[*-1];
    my $median = median(@in);
    my $first-quart = median( grep { $_ &lt; $median}, @in);
    my $third-quart = median( grep { $_ &gt; $median}, @in);
    return $min, $first-quart, $median, $third-quart, $max;
}
my @moons = 0, 0, 1, 2, 63, 61, 27, 13;
say summary(@moons);
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./five-nums-summary.raku
(0 0.5 7.5 44 63)
</code></pre>

<h3>Five-number Summary in Perl</h3>

<p>This is a port to Perl of the Raku program just above. Please refer to the previous section for further explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub median {
    my @in = @_; # Input values have been sorted previously
    my $count = scalar @in;
    if ($count % 2) {
        return $in[($count - 1) / 2];
    } else {
        return ($in[$count/2 -1] + $in[$count/2])/2;
    }
}
sub summary {
    my @in = sort { $a &lt;=&gt; $b } @_;
    my $min = $in[0];
    my $max = $in[-1];
    my $median = median(@in);
    my $first_quart = median( grep { $_ &lt; $median} @in);
    my $third_quart = median( grep { $_ &gt; $median} @in);
    return $min, $first_quart, $median, $third_quart, $max;
}
my @moons = (0, 0, 1, 2, 63, 61, 27, 13);
say join " ", summary(@moons);
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./five-nums-summary.pl
0 0.5 7.5 44 63
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on July 17, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>TOTP with Perl and Authen::OATH</title>
    <link rel="alternate" href="http://blogs.perl.org/users/hightowe/2022/07/totp-with-perl-and-authenoath.html"/>
    <id>tag:blogs.perl.org,2022:/users/hightowe//4139.10846</id>
    <published>2022-07-06T00:10:57Z</published>
    <updated>2022-07-06T00:44:38Z</updated>
    <author>
        <name>Lester Hightower</name>
        <uri>https://github.com/hightowe</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/hightowe/">
        <![CDATA[<p>I wrote this post after seeing Flavio Poletti's blog post entitled
<a href="https://github.polettix.it/ETOOBUSY/2022/06/28/oath-toolkit/">OATH Toolkit</a>.
I have been a fan of time-based one time passwords (TOTP) for many years.
In fact, I used <a href="http://motp.sourceforge.net/">Mobile-OTP</a> in commercial
applications for several years before the
<a href="https://en.wikipedia.org/wiki/Initiative_for_Open_Authentication">Initiative for Open Authentication</a> (OATH)
and <a href="https://en.wikipedia.org/wiki/Time-based_one-time_password">OATH/TOTP</a> were codified in
<a href="https://datatracker.ietf.org/doc/html/rfc6238">RFC6238</a>.</p>

<p>Now-a-days, OATH/TOTP is the best choice for time-based one time passwords,
and has been for at least a decade.</p>

<h3>Introduction</h3>

<p>I have implemented OATH/TOTP many times in my career, and in several programming
languages, including Perl. One of those Perl implementations is within the
open source program <a href="https://kpcli.sourceforge.io/">kpcli</a>.</p>

<h3>Using Authen::OATH for TOTP</h3>

<p>Using Authen::OATH for TOTP is straightforward. The kpcli code
appears a little overly complex because it optionally demand-loads the
Authen::OATH module and has support for digest ciphers other than
SHA1. This is kpcli's get_totp() subroutine:</p>

<pre><code>sub get_totp($$) {
  my $key2FA = shift @_ || '';
  my $digest = shift @_ || 'SHA'; # RFC6238 uses SHA-1
  my $oath = Authen::OATH-&gt;new( digest =&gt; 'Digest::'.uc($digest) );
  my $otp = $oath-&gt;totp(decode_base32($key2FA));
  return $otp;
}
</code></pre>

<p>Breaking that down, what we see is that a new Authen::OATH object is
created with Digest::SHA by default (although others are supported).
The totp() method is then used to obtain the OTP from the base32
decoded shared key (base32 storage is codified in the OATH TOTP standard).
Note that decode_base32() is from Convert::Base32. The resulting OTP
is a 6-digit, OATH-compliant, TOTP.</p>

<p>Here is a working snippet with limited complexity:</p>

<pre><code>#!/usr/bin/perl

use strict;
use warnings;
use Authen::OATH;
use Convert::Base32 qw(decode_base32);

my $key = '42R6MQ7PQNVY5NMR7VAJUBTK';
my $oath = Authen::OATH-&gt;new( digest =&gt; 'Digest::SHA' );
my $otp = $oath-&gt;totp(decode_base32($key));
print "$otp\n";
</code></pre>

<p>In a client-side implementation, that simple example is about
all that you'll need.</p>

<p>In a server-side implementation, you'll want to accept a
few OTPs from ± the current time. A second parameter can be given
to Authen::OATH->totp() to manually set the time used to generate the
TOTP, and so a simplified server-side implementation might look like this:</p>

<pre><code>use strict;
use warnings;
use Authen::OATH;
use Convert::Base32 qw(decode_base32);

my $key = '42R6MQ7PQNVY5NMR7VAJUBTK';
my $test_otp = '123456';
my $timestep = 30; # 30 second time steps

my $oath = Authen::OATH-&gt;new( digest =&gt; 'Digest::SHA' );
my $otp = $oath-&gt;totp(decode_base32($key));

if (is_valid_totp($key,$test_otp,3,2)) {
  print "Valid TOTP\n";
} else {
  print "Invalid TOTP\n";
}
exit;

sub is_valid_totp {
  my $key = shift @_;
  my $test_otp = shift @_;
  my $num_prior = shift @_ || 0;
  my $num_after = shift @_ || 0;

  $num_prior = abs($num_prior) * -1;
  $num_after = abs($num_prior);
  my $oath = Authen::OATH-&gt;new( digest =&gt; 'Digest::SHA' );

  my $now = time;
  foreach my $period ($num_prior..$num_after) {
    my $test_time = $now + ($period * $timestep);
    my $otp = $oath-&gt;totp($key, $test_time);
    #warn "Debug: period=$period now=$now test_time=$test_time\n";
    #warn "Debug: period=$period otp=$otp test_otp=$test_otp\n";
    if ($otp eq $test_otp) { return 1; } # Match
  }
  return 0;
}
</code></pre>

<h3>Closing</h3>

<p>I strongly encourage everyone to use 2FA/TOTP on all of the systems that
support it, and particularly ones of high importance to you. On mobile,
I use the Google Authenticator app and, on my Linux desktop, a mix of my
<a href="https://kpcli.sourceforge.io/">kpcli</a> and <a href="https://github.com/hightowe/otp">otp</a>
programs.</p>

<p>I hope that this post is helpful to someone.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Announcing perlcritic Policy ValuesAndExpressions::ProhibitFiletest_rwxRWX</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/07/announcing-perlcritic-policy-valuesandexpressionsprohibitfiletest-rwxrwx.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10845</id>
    <published>2022-07-05T21:21:43Z</published>
    <updated>2022-07-05T21:22:52Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Since several places in the Perl documentation caution against the use of the file access operators (<code>-r</code> and friends), and since I was unable to find a <a href="https://metacpan.org/pod/Perl::Critic"><code>Perl::Critic</code></a> policy dealing with this, I thought I would make one: <a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitFiletest_rwxRWX"><code>Perl::Critic::Policy::ValuesAndExpressions::ProhibitFiletest_rwxRWX</code></a>.</p>

<p>This policy is assigned to the <code>'bugs'</code> theme. It has low severity because there are some uses of these operators that seem legitimate to me -- or at least I see no easy way to get around their use.</p>

<p>On the one hand, something like</p>

<pre>
-r $file or die "File $file not readable\n";
open my $handle, '&lt;', $file;
</pre>

<p>is wrong several ways. On the other hand, it is hard to see how to implement <a href="https://metacpan.org/pod/File::Which"><code>File::Which</code></a> without the use of <code>-x</code>. And in fact it <strong>does</strong> use <code>-x</code>.</p>

<p>This policy has no configuration options. I can imagine a configuration option to allow some file access operators, but was unsure how much actual need there is for such an option. A configuration option to allow file access operators within the scope of a <code>use filetest 'access';</code> might be possible, but would certainly make the policy much more complex.</p>

<p>Maybe this policy should be in the <code>::BuiltinFunctions::</code> name space, but I decided to follow the precedent established by Kevin Ryde in his <a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitFiletest_f"><code>Perl::Critic::Policy::ValuesAndExpressions::ProhibitFiletest_f</code></a>.</p>
]]>
        
    </content>
</entry>
  <entry>
  <title>Volunteer rt.cpan.org Admins Needed</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/volunteer-rt.cpan.org-admins-needed"/>
  <id>tag:news.perlfoundation.org,2022-07-04:/post/volunteer-rt.cpan.org-admins-needed</id>
  <published>2022-07-04T12:27:58</published>
  <updated>2022-07-04T12:27:58</updated>
  <summary>
  <![CDATA[
     The rt.cpan.org RT instance is a valuable resource for the Perl community. But as with every system on the Internet that allows user input, it has a spam issue. While the automated filtering does catch some of it, some of it gets through, and we could use some volunteer help here. Volunteers will help delete spam tickets, disable spam accounts, check the spam filter, and generally help keep rt.cpan.org usable 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The <a href="https://rt.cpan.org/">rt.cpan.org RT instance</a> is a valuable resource for the Perl community. But as with every system on the Internet that allows user input, it has a spam issue. While the automated filtering does catch some of it, some of it gets through, and we could use some volunteer help here. Volunteers will help delete spam tickets, disable spam accounts, check the spam filter, and generally help keep rt.cpan.org usable for the community.</p>

<p>If you're interested please <a href="mailto:hello@perlfoundation.org">send an email to hello@perlfoundation.org</a>. Thank you!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#571 - Sponsoring TPF or individuals</title>
    <link rel="alternate" href="https://perlweekly.com/archive/571.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>What if you had a steady income of a few thousand USDs just for doing awesome things for Perl so you can afford to do whatever you want? I bet there would be tons of things you could do. Improving CPAN modules, patching Perl, writing articles, recording videos, encouraging others to write more. etc.</p>
<p>So what if we could support a few people to do just that? How could you be part of it? You could <a href="https://perlfoundation.org/donate">donate to TPF</a>, but for you, as an individual it might be better to support an individual directly. Without the organizational overhead. For this a while ago I put together the list of <a href="https://perlmaven.com/supporting-perl-creators">all the Perl-related people</a>, I knew about at that time, who are accepting donations. They are mostly looking for monthly support instead of a one-time support. In my opinion it is much better to support someone with $10/month than $200 one-time donation. Partially because having a steady income is much better than having the need to raise more funds every few weeks or even every few months. With that said both at Patreon and GitHub Sponsors you can subscribe to a regular donation and then, after the payment you can cancel it. Effectively providing a one-time donation.</p>
<p>I went over the list now. There are 11 people listed on that page with a total of 139 sponsors. (There is probably some overlap the same person sponsoring more than one 'creator'.)</p>
<p>Personally I'd recommend you <a href="https://www.patreon.com/manwar">sponsor the work of Mohammad</a> as he both creates code and generates a lot of publicity for Perl, but if you decide to support someone else from the list that's awesome too. If you find donate to someone who is not in this list yet, and if they agree, feel free to send a PR to add them to the list.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/571.html</id>
    <published>2022-07-04T10:00:00Z</published>
    <updated>2022-07-04T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Route parameters and sending 404 manually</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-04T08:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-route-parameters"/>  <id>https://perlmaven.com/dancer2-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 171</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-171/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-171/</id>
    <published>2022-07-04T00:00:00Z</published>
    <updated>2022-07-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 172</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Prime Partition 10. TASK #2: Five-number Summary HEADLINES  Welcome to Week #172 of the weekly challenge.
Today is the first Monday of the month and time to announce the champion. Proud to declare PokGoPun as our next champion. He is relatively new to the Team PWC.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-172/</id>
    <published>2022-07-04T00:00:00Z</published>
    <updated>2022-07-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Meet The Champion: May 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/meet-the-champion-2022-05/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Get to know about Robert Ransbottom. Welcome to the monthly series Meet The Champion.
Last month we spoke to Matthew Neleigh, the winner of April 2022.
Today we are talking to Robert Ransbottom, the winner of May 2022 of The Weekly Challenge. I hope you are going to enjoy the interview.
 Mohammad: Tell us about your technical background?
Robert: I read most of a brief computing-101-ish book at a book store one afternoon.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/meet-the-champion-2022-05/</id>
    <published>2022-07-03T00:00:00Z</published>
    <updated>2022-07-03T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Test::Excel</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/test-excel/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">My first contribution to CPAN was Test::Excel. It was initiated as we had requirement for such at work at that time.
It has gone through many changes, thanks to all for reporting issues and providing patches..
It even got space as topic for Day 18 in Perl Advent Calendar 2018.
It was a proud moment when a collegue of mine at work requested help with Test::Excel as it was not behaving as per her requirements.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/test-excel/</id>
    <published>2022-07-03T00:00:00Z</published>
    <updated>2022-07-03T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Mite: an OO compiler for Perl</title>
    <link rel="alternate" href="https://dev.to/tobyink/mite-an-oo-compiler-for-perl-b70" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; is great, but it does introduce a slight performance hit to your code. In the more than 15 years since it was first released, hardware improvements have made this less of a problem than it once was. Even so, if performance is a concern for your project, Moose might not be what you want. It also has a fairly big collection of non-core dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt; is a lighter weight version, minus with meta-object protocol, but supporting nearly all of Moose's other features. It loads faster, sometimes runs faster, and has fewer dependencies. (And most of the dependencies it does have are just modules which used to be part of Moo but were split out into separate distributions.)&lt;/p&gt;

&lt;p&gt;But what if you could have fast Moose-like object-oriented code without the dependencies?&lt;/p&gt;

&lt;p&gt;In 2013, Michael Schwern started work on &lt;a href="https://metacpan.org/pod/Mite"&gt;Mite&lt;/a&gt; to do just that. It was abandoned in 2014, but I've taken it over and expanded the feature set to roughly equivalent to Moo.&lt;/p&gt;

&lt;p&gt;Mite is an object-oriented programming &lt;em&gt;compiler&lt;/em&gt; for Perl. It allows you to write familiar Moose-like object-oriented code, then compile that into plain Perl with zero non-core dependencies. Your compiled code does not even have a dependency on Mite itself!&lt;/p&gt;

&lt;h2&gt;
  
  
  How do I use Mite?
&lt;/h2&gt;

&lt;p&gt;Here's how you could start a project with Mite or port an existing Moose/Moo project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nb"&gt;cd &lt;/span&gt;Your-Project/
   mite init &lt;span class="s1"&gt;'Your::Project'&lt;/span&gt;
   mite compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you've run those commands, Mite will create a module called &lt;code&gt;Your::Project::Mite&lt;/code&gt;. This module is your project's own little gateway to Mite. This module is called the shim.&lt;/p&gt;

&lt;p&gt;Now let's write a test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# t/unit/Your-Project-Widget.t&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your::Project::Widget&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

   &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Quux&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nv"&gt;isa_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nv"&gt;subtest&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method `name`&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Quux&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;dies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XYZ&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nv"&gt;isnt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read-only attribute&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nv"&gt;subtest&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method `upper_case_name`&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QUUX&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a class to implement the functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# lib/Your/Project/Widget.pm&lt;/span&gt;
   &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;is&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
      &lt;span class="s"&gt;isa&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;upper_case_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;mite compile&lt;/code&gt; again then run the test case. It should pass.&lt;/p&gt;

&lt;h2&gt;
  
  
  How does Mite work?
&lt;/h2&gt;

&lt;p&gt;It's important to understand what Mite is doing behind the scenes.&lt;/p&gt;

&lt;p&gt;When you ran &lt;code&gt;mite compile&lt;/code&gt;, Mite created a file called &lt;em&gt;lib/Your/Project/Widget.pm.mite.pm&lt;/em&gt;. (Yes, a triple file extension!) This file contains your class's &lt;code&gt;new&lt;/code&gt; method. It contains the code for the accessor.&lt;/p&gt;

&lt;p&gt;That file does not contain the code for &lt;code&gt;upper_case_name&lt;/code&gt; which is still in the original &lt;em&gt;lib/Your/Project/Widget.pm&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When Perl loads &lt;code&gt;Your::Project::Widget&lt;/code&gt;, it will see this line and load the shim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shim just loads &lt;em&gt;lib/Your/Project/Widget.pm.mite.pm&lt;/em&gt;, exports a &lt;code&gt;has&lt;/code&gt; function that does (almost) nothing, and then gets out of the way. This gives Perl a working class.&lt;/p&gt;

&lt;h2&gt;
  
  
  What features does Mite support?
&lt;/h2&gt;

&lt;p&gt;Most of what Moo supports is supported by Mite. In particular:&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;extends @superclasses&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Mite classes within your project can inherit from other Mite classes within your project, but not from non-Mite classes, and not from Mite classes from a different project.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;with @roles&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As of version 0.002000, Mite also supports roles. If you want your package to be a role instead of a class, just do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Nameable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
      &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with &lt;code&gt;extends&lt;/code&gt;, a limitation is that you can only use Mite roles from within your own project, not non-Mite roles, nor Mite roles from a different project.&lt;/p&gt;

&lt;p&gt;(A future development might add support for &lt;a href="https://metacpan.org/pod/Role%3A%3ATiny"&gt;Role::Tiny&lt;/a&gt; roles though.)&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;has $attrname =&amp;gt; %spec&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Attributes are obviously one of the main features people look for in a Perl object-oriented programming framework and Mite supports nearly all of Moose's features for defining attributes.&lt;/p&gt;

&lt;p&gt;This includes &lt;code&gt;is =&amp;gt; 'ro'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'rw'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'bare'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'rwp'&lt;/code&gt; (like Moo), and &lt;code&gt;is =&amp;gt; 'lazy'&lt;/code&gt; (like Moo); &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;init_arg&lt;/code&gt; for attribute initialization; &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;accessor&lt;/code&gt;, &lt;code&gt;predicate&lt;/code&gt;, &lt;code&gt;clearer&lt;/code&gt;, and &lt;code&gt;trigger&lt;/code&gt;; &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, and &lt;code&gt;builder&lt;/code&gt;; &lt;code&gt;weak_ref&lt;/code&gt;; &lt;code&gt;isa&lt;/code&gt; and &lt;code&gt;coerce&lt;/code&gt; for type constraints, including support for any type constraints in &lt;a href="https://metacpan.org/pod/Types%3A%3AStandard"&gt;Types::Standard&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3ANumeric"&gt;Types::Common::Numeric&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3AString"&gt;Types::Common::String&lt;/a&gt;; and delegation using &lt;code&gt;handles&lt;/code&gt;. It also supports an option which Moose doesn't provide: &lt;code&gt;alias&lt;/code&gt; for aliasing attributes.&lt;/p&gt;

&lt;p&gt;Mite builds in the functionality of &lt;a href="https://metacpan.org/pod/MooseX%3A%3AStrictConstructor"&gt;MooseX::StrictConstructor&lt;/a&gt;, dying with an appropriate error message if you pass your class's constructor any parameters it wasn't expecting.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;BUILDARGS&lt;/code&gt;, &lt;code&gt;BUILD&lt;/code&gt;, and &lt;code&gt;DEMOLISH&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Methods you can define to control the life cycle of objects.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;before $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;after $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;around $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Mite classes and roles can define method modifiers.&lt;/p&gt;

&lt;p&gt;As long as your needs aren't super-sophisticated (introspection using the MOP, runtime application of roles, etc), Mite probably has the features you need for even medium to large projects.&lt;/p&gt;

&lt;p&gt;Mite itself uses Mite!&lt;/p&gt;

&lt;h2&gt;
  
  
  Be honest, what are the drawbacks?
&lt;/h2&gt;

&lt;p&gt;This code still doesn't have a lot of testing "in the wild". Moose and Moo have proven track records.&lt;/p&gt;

&lt;p&gt;You need to remember to &lt;code&gt;mite compile&lt;/code&gt; your code after making changes before running your test suite or packaging up a release. This can be annoyingly easy to forget to do. (Though Mite does also include extensions for ExtUtils::MakeMaker and Module::Build to help integrate that into your workflow.)&lt;/p&gt;

&lt;p&gt;The Mite compiler's scope of only looking at the files within your own project limits the ability to create roles which can be composed by third-parties, or classes which can easily be extended by third-parties. If you want that, Moose or Moo are a better option.&lt;/p&gt;

&lt;h2&gt;
  
  
  Okay, I'm interested
&lt;/h2&gt;

&lt;p&gt;If you've read this and you're thinking about porting a Moose or Moo project to Mite, feel free to @-mention &lt;a href="https://github.com/tobyink"&gt;tobyink on Github&lt;/a&gt; in issue tickets, pull requests, etc if you need any help.&lt;/p&gt;

&lt;p&gt;If there are features which you think Mite is missing which you'd need to port your project to Mite, file bugs with the &lt;a href="https://github.com/tobyink/p5-mite/issues"&gt;Mite issue tracker&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/mite-an-oo-compiler-for-perl-b70</id>
    <published>2022-07-02T17:38:11Z</published>
    <updated>2022-07-02T17:38:11Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="programming"/>
    <category term="tooling"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3763773779504529828</id>
    <published>2022-07-02T17:01:00.000+02:00</published>
    <updated>2022-07-02T17:01:34.680+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxcix) 6 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AMBS/Alien-ImageMagick-0.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::ImageMagick&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cpanm compatible Image::Magick packaging. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.09&lt;/strong&gt; on 2022-06-28&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.08 was 1 year, 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YUSUKEBE/App-revealup-0.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::revealup&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP Server application for viewing Markdown formatted text as slides &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.23&lt;/strong&gt; on 2022-06-29&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.22 was 2 years, 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEGL/Marpa-R2-10.000000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Marpa::R2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Release 2 of Marpa &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.000000&lt;/strong&gt; on 2022-06-29&lt;/li&gt;  &lt;li&gt;Votes: 48&lt;/li&gt;  &lt;li&gt;Previous version: 8.000000 was 3 years, 6 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9616' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9616&lt;/strong&gt; on 2022-07-01&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9612 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.014000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.014000&lt;/strong&gt; on 2022-06-27&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.012005 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TINITA/YAML-PP-0.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - YAML 1.2 Processor &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.034&lt;/strong&gt; on 2022-06-30&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.032 was 3 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3763773779504529828/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cccxcix-6-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3763773779504529828"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3763773779504529828"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cccxcix-6-great-cpan-modules-released.html" title="(cccxcix) 6 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5626839938042164616</id>
    <published>2022-07-02T16:57:00.001+02:00</published>
    <updated>2022-07-02T16:57:22.966+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxiii) metacpan weekly report - HTML::Tree</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 55&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/HTML::Tree"&gt;HTML::Tree&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/02 14:54:38 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Promise" target="_blank"&gt;HTTP::Promise&lt;/a&gt; - Asynchronous HTTP Request and Promise&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Translate" target="_blank"&gt;Lingua::Translate&lt;/a&gt; - Translate text from one language to another&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::In" target="_blank"&gt;Syntax::Operator::In&lt;/a&gt; - placeholder module for infix element-of-list meta-operator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O::More" target="_blank"&gt;Util::H2O::More&lt;/a&gt; - like if bless created accessors for you. Intended for hash reference-based Perl OOP only. This module uses Util::H2O::h2o as the basis for actual object creation; but there's no reason other accessor makers couldn't have been used or can be used. I just really like h2o. :-)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WordList::Password::10Million::Top100000" target="_blank"&gt;WordList::Password::10Million::Top100000&lt;/a&gt; - Top 100,000 passwords from 10_million_password_list&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::BloomFilter" target="_blank"&gt;Algorithm::BloomFilter&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::ImageMagick" target="_blank"&gt;Alien::ImageMagick&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ccdiff" target="_blank"&gt;App::ccdiff&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=266)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Code::TidyAll" target="_blank"&gt;Code::TidyAll&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Upload::Tiny" target="_blank"&gt;CPAN::Upload::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Bcrypt" target="_blank"&gt;Crypt::Bcrypt&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Diver" target="_blank"&gt;Data::Diver&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dios" target="_blank"&gt;Dios&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode" target="_blank"&gt;Encode&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::ParseXS" target="_blank"&gt;ExtUtils::ParseXS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus" target="_blank"&gt;FFI::Platypus&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=111)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Tree" target="_blank"&gt;HTML::Tree&lt;/a&gt; (+3=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CSPHeader" target="_blank"&gt;HTTP::CSPHeader&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::PP" target="_blank"&gt;JSON::PP&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LMDB_File" target="_blank"&gt;LMDB_File&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::ConsoleLogger" target="_blank"&gt;LWP::ConsoleLogger&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mite" target="_blank"&gt;Mite&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Install" target="_blank"&gt;Module::Install&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::ScanDeps" target="_blank"&gt;Module::ScanDeps&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=289)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+2=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moxie" target="_blank"&gt;Moxie&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Whois::Raw" target="_blank"&gt;Net::Whois::Raw&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=398)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=71)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Switch::Plain" target="_blank"&gt;Switch::Plain&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::Equ" target="_blank"&gt;Syntax::Operator::Equ&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Binmode" target="_blank"&gt;Sys::Binmode&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Termbox" target="_blank"&gt;Termbox&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=104)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword" target="_blank"&gt;XS::Parse::Keyword&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5626839938042164616/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5626839938042164616"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5626839938042164616"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxiii-metacpan-weekly-report.html" title="(dxiii) metacpan weekly report - HTML::Tree"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3346116486403866009</id>
    <published>2022-07-02T16:43:00.001+02:00</published>
    <updated>2022-07-02T16:43:43.887+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxli) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-07-02 14:42:01 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72790345" target="_blank"&gt;Is Perl slower when compiled with DDEBUGGING?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72817790" target="_blank"&gt;Perl Moose, How to initialize a instance attribute that is Hash&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72803774" target="_blank"&gt;How to debug DBIx::Class?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72822673" target="_blank"&gt;2D Array Printing as Reference&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72804459" target="_blank"&gt;Can't use an array as a reference when installing perl module&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3346116486403866009/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxli-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3346116486403866009"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3346116486403866009"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxli-stackoverflow-perl-report.html" title="(dxli) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Easiest Way to Get Started with Perl</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/easiest-way-to-get-started-with-perl-48pk" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The easiest way to get started with Perl is to use <a href="https://perlbanjo.com/">PerlBanjo.com</a>.</p>

<p>Read more:</p>

<p><a href="https://en.perlzemi.com/blog/20220702062032.html">Easiest Way to Get Started with Perl - Perl ABC</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/easiest-way-to-get-started-with-perl-48pk</id>
    <published>2022-07-01T21:42:49Z</published>
    <updated>2022-07-01T21:42:49Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jun 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/07/01/list-of-new-cpan-distributions-jun-2022/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/API-Eulerian-API-Eulerian"&gt;API-Eulerian-API-Eulerian&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MJONDET"&gt;MJONDET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.3&lt;/td&gt;
&lt;td&gt;v0.3&lt;/td&gt;
&lt;td&gt;Sample EDW script for querying through REST and get a CSV file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-Mitey-Cards"&gt;Acme-Mitey-Cards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;demo of Mite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-Brotli"&gt;Alien-Brotli&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRWO"&gt;RRWO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.2.0&lt;/td&gt;
&lt;td&gt;Download and install Brotli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-CFITSIO"&gt;Alien-CFITSIO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v4.1.0.1&lt;/td&gt;
&lt;td&gt;v4.1.0.5&lt;/td&gt;
&lt;td&gt;Build and Install the CFITSIO library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Amon2-Plugin-Web-CpanelJSON"&gt;Amon2-Plugin-Web-CpanelJSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Cpanel::JSON::XS plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-optex-pingu"&gt;App-optex-pingu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;optex make-everything-pingu filter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-orgadb"&gt;App-orgadb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;An opinionated Org addressbook tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Hash-Unique"&gt;Bencher-Scenario-Hash-Unique&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Benchmark Hash::Unique&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-List-Util"&gt;Bencher-Scenario-List-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.051&lt;/td&gt;
&lt;td&gt;0.051&lt;/td&gt;
&lt;td&gt;Benchmark List::Util (XS) vs PP implementation(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Module-Path-More"&gt;Bencher-Scenario-Module-Path-More&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;Benchmark Module::Path::More vs Module::Path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CGI-Carp-WarningsToBrowser"&gt;CGI-Carp-WarningsToBrowser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEENEWCUM"&gt;DEENEWCUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;A version of CGI::Carp&amp;#039;s warningsToBrowser() that displays the warnings loudly and boldly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-CSRFI"&gt;Dancer2-Plugin-CSRFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;Dancer2 CSRF protection plugin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-DoFile"&gt;Dancer2-Plugin-DoFile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;A file based MVC style plugin for Dancer2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Template-Obj2HTML"&gt;Dancer2-Template-Obj2HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;Temnplating system based on HTML::Obj2HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-TableData-Pick"&gt;Data-TableData-Pick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Pick randomly one or more table rows, with some options&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Excel-Writer-XLSX-CDF"&gt;Excel-Writer-XLSX-CDF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Generates Excel Document with Continuous Distribution Function Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Factory-Sub"&gt;Factory-Sub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Generate a factory of subs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config"&gt;Firewall-Config&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-FireFlow"&gt;Firewall-FireFlow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Policy"&gt;Firewall-Policy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FirewallController"&gt;FirewallController&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Git-Nuggit"&gt;Git-Nuggit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EDELL"&gt;EDELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Git Toolkit for Submodule-Aware workflows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTML-Obj2HTML"&gt;HTML-Obj2HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;Create HTML from a arrays and hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTTP-Promise"&gt;HTTP-Promise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.2&lt;/td&gt;
&lt;td&gt;Asynchronous HTTP Request and Promise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Image-PHash"&gt;Image-PHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DKECHAG"&gt;DKECHAG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0_1&lt;/td&gt;
&lt;td&gt;0.1_1&lt;/td&gt;
&lt;td&gt;Fast perceptual image hashing (DCT-based pHash)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Imager-File-APNG"&gt;Imager-File-APNG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;APNG image file support for Imager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/IngyPrelude"&gt;IngyPrelude&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INGY"&gt;INGY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;Ingy d&amp;Atilde;&amp;para;t Net&amp;#039;s Standard Prelude&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Language-Eforth"&gt;Language-Eforth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;a tiny embedded Forth interpreter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MarpaX-G4"&gt;MarpaX-G4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZUBEAX"&gt;ZUBEAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;v1.0.2&lt;/td&gt;
&lt;td&gt;Release 0.9 of MarpaX::G4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-Run3"&gt;Mojo-Run3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Run a subprocess and read/write to it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Keyword-Factory"&gt;MooX-Keyword-Factory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Moo attribute factories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Keyword-Field"&gt;MooX-Keyword-Field&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;field attributes that cannot be set via the constructor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-LocalAttribute"&gt;MooseX-LocalAttribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;local-ize attributes on Moose-ish objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MyConf"&gt;MyConf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYNOVG"&gt;CYNOVG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;package for working with secrets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PDF-Data"&gt;PDF-Data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEVEN"&gt;DEVEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;Manipulate PDF files and objects as data structures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PDL-Opt-Simplex-Simple"&gt;PDL-Opt-Simplex-Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;1.4&lt;/td&gt;
&lt;td&gt;A simplex optimizer for the rest of us (who may not know PDL).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Perl-Critic-Policy-ValuesAndExpressions-ProhibitFiletest_rwxRWX"&gt;Perl-Critic-Policy-ValuesAndExpressions-ProhibitFiletest_rwxRWX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WYANT"&gt;WYANT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_901&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Do not pass capture variables as arguments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Plack-Middleware-CSP"&gt;Plack-Middleware-CSP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ASHLEY"&gt;ASHLEY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Apply HTTP::CSPHeaders to your psgi application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RT-Extension-PagerDuty"&gt;RT-Extension-PagerDuty&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-PagerDuty Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Regex"&gt;SPVM-Regex&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Re2-V2022_06_01"&gt;SPVM-Resource-Re2-V2022_06_01&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Resource::Re2::V2022_06_01 is a resource of RE2.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Zlib"&gt;SPVM-Resource-Zlib&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;zlib Resource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Zlib-V1_2_11"&gt;SPVM-Resource-Zlib-V1_2_11&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;zlib v1.2.11 Resource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Time-Local"&gt;SPVM-Time-Local&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Time::Local manipulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Unicode"&gt;SPVM-Unicode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;SPVM Unicode Utilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-In"&gt;Syntax-Operator-In&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;placeholder module for infix element-of-list meta-operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Template-Plugin-TallyMarks"&gt;Template-Plugin-TallyMarks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CHOROBA"&gt;CHOROBA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Convert numbers to tally marks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test-Instruction"&gt;Test-Instruction&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;A test framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Types-JsonCoercions"&gt;Types-JsonCoercions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;coercions to and from JSON&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/VM-Libvirt-CloneHelper"&gt;VM-Libvirt-CloneHelper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Create a bunch of cloned VMs in via libvirt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WWW-SnipeIT"&gt;WWW-SnipeIT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SCOTTH"&gt;SCOTTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;API Access to Snipe-IT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-Fastly"&gt;WebService-Fastly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FASTLY"&gt;FASTLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;2.01&lt;/td&gt;
&lt;td&gt;an interface to most facets of the [Fastly API](&lt;a href="https://developer.fastly.com/reference/api" rel="nofollow"&gt;https://developer.fastly.com/reference/api&lt;/a&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-LastFM-TrackInfo"&gt;WebService-LastFM-TrackInfo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GENE"&gt;GENE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0100&lt;/td&gt;
&lt;td&gt;0.0205&lt;/td&gt;
&lt;td&gt;Access to the track.getInfo slice of the LastFM API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/YA-CLI"&gt;YA-CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WATERKIP"&gt;WATERKIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Do CLI things&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/libreplace"&gt;libreplace&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ECARROLL"&gt;ECARROLL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Clobber your lib with PERL5LIB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/plack-middleware-signposting"&gt;plack-middleware-signposting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VPEIL"&gt;VPEIL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;a base class for Plack implementations of the Signposting protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;56&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;38&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GENE"&gt;GENE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FASTLY"&gt;FASTLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEENEWCUM"&gt;DEENEWCUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CHOROBA"&gt;CHOROBA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MJONDET"&gt;MJONDET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SCOTTH"&gt;SCOTTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VPEIL"&gt;VPEIL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INGY"&gt;INGY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ASHLEY"&gt;ASHLEY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZUBEAX"&gt;ZUBEAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRWO"&gt;RRWO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ECARROLL"&gt;ECARROLL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WYANT"&gt;WYANT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEVEN"&gt;DEVEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DKECHAG"&gt;DKECHAG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYNOVG"&gt;CYNOVG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WATERKIP"&gt;WATERKIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EDELL"&gt;EDELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Eulerian-API-Eulerian MJONDET v0.3 v0.3 Sample EDW script for querying through REST and get a CSV file Acme-Mitey-Cards TOBYINK 0.001 0.005 demo of Mite Alien-Brotli RRWO v0.1.0 v0.2.0 Download and install Brotli Alien-CFITSIO DJERIUS v4.1.0.1 v4.1.0.5 Build and Install the CFITSIO library Amon2-Plugin-Web-CpanelJSON KFLY 0.01 0.01 Cpanel::JSON::XS plugin App-optex-pingu UTASHIRO 0.01 … <a href="https://perlancar.wordpress.com/2022/07/01/list-of-new-cpan-distributions-jun-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jun 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1992</id>
    <published>2022-07-01T00:21:46Z</published>
    <updated>2022-07-01T00:21:46Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>cpanfile – Teil 1</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-06-29-cpanfile-a-teil-1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ein *cpanfile* ist eine Datei, die Abhängigkeiten von Anwendungen und Modulen beschreibt. Diese Dateien sind in der Perl-Welt nichts neues (sie gibt es seit über 8 Jahren) und sie sind eine sehr gute Möglichkeit, die Installation von Abhängigkeiten zu vereinfachen.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-06-29-cpanfile-a-teil-1</id>
    <published>2022-06-29T10:00:00Z</published>
    <updated>2022-06-29T10:00:00Z</updated>
  </entry>
  <entry>
    <title>How to Write Tests using Github Actions</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/how-to-write-tests-using-github-actions-4jk8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I explain how to write tests using <a href="https://docs.github.com/en/actions">Github Actions</a>. This tests are run on Windows, <a href="https://en.linux.perlzemi.com/">Linux</a>/<a href="https://en.ubuntu.perlzemi.com/">Ubuntu</a>(64bit, 32bit), Mac, and support <a href="https://en.perlzemi.com/blog/20160225145640.html">Perl 5.8</a>. Dependent CPAN modules can be used.</p>

<p>This article is originally <a href="https://en.perlzemi.com/blog/20220628150309.html">How to Write Tests using Github Actions - Perl ABC</a></p>

<h3>
  
  
  Examples of Tests using Github Actions
</h3>

<p>See examples at first.</p>

<p><a href="https://github.com/yuki-kimoto/SPVM-Time-Local/tree/master/.github/workflows">Examples</a></p>

<h3>
  
  
  Downloading cpanm
</h3>

<p>Download <code>cpanm</code> into your home direcotry of your product and add excutable permission to it.</p>

<pre>
curl -L http://cpanmin.us &gt; cpanm
chmod +x cpanm
</pre>

<h3>
  
  
  Github Actions Definitions
</h3>

<p>These are Github Actions.</p>

<h4>
  
  
  Linux - Ubuntu - 64bit*<em>Ubuntrulinux-ubuntu-latest.yml</em>*
</h4>

<pre>
name: linux-ubuntu-latest

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm -L ~/mylib -n SPVM
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: make
      - run: make disttest
</pre>

<h4>
  
  
  Linux - Ubuntu - 32bit
</h4>

<p><strong>linux-ubuntu-latest-32bit.yml</strong></p>

<pre>
name: linux-ubuntu-latest-32bit

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:latest
    steps:
      - run: |
          apt update
          apt install -y libperl-dev build-essential
      - uses: actions/checkout@v1
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm -L ~/mylib -n SPVM
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: make
      - run: make disttest
</pre>

<h4>
  
  
  Linux - Ubuntu - 64bit - Perl 5.8
</h4>

<p><strong>linux-ubuntu-latest-perl-5.8.9.yml</strong></p>

<pre>
name: linux-ubuntu-latest-perl-5.8.9

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.8.9'
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm ExtUtils::CBuilder
      - run: perl cpanm -L ~/mylib -n SPVM
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: make
      - run: make disttest
</pre>

<h4>
  
  
  Mac
</h4>

<p><strong>macos-latest.yml</strong></p>

<pre>
name: macos-latest

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - run: brew install perl
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm -L ~/mylib -n SPVM
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: make
      - run: make disttest
</pre>

<h4>
  
  
  Windows Server 2019
</h4>

<p><strong>windows-2019.yml</strong></p>

<pre>
name: windows-2019

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  perl:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@master
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm -n SPVM
      - run: perl Makefile.PL
      - run: gmake
      - run: gmake disttest
</pre>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/how-to-write-tests-using-github-actions-4jk8</id>
    <published>2022-06-28T06:25:58Z</published>
    <updated>2022-06-28T06:25:58Z</updated>
    <category term="perl"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>#570 - CPAN Weekly</title>
    <link rel="alternate" href="https://perlweekly.com/archive/570.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I noticed a fresh air and renewed energy among &lt;strong&gt;Perl Hackers&lt;/strong&gt; ever since the latest release of &lt;strong&gt;Perl v5.36&lt;/strong&gt;. I can only imagine what would be the reaction when &lt;strong&gt;Corinna&lt;/strong&gt; becomes part of core Perl. It would definitely help &lt;strong&gt;Perl&lt;/strong&gt; regain its glory, in my humble opinion.&lt;/p&gt;
&lt;p&gt;As some of you are aware that I have been doing daily &lt;strong&gt;Perl&lt;/strong&gt; feature series for sometimes now, I have seen so much interest in the new/improved features brought in &lt;strong&gt;Perl v5.36&lt;/strong&gt;. All credit goes to the hard work and dedication of the team responsible for the release. I have got all the daily feature posts saved in the &lt;a href="https://github.com/manwar/perl-cool-snippets"&gt;GitHub repository&lt;/a&gt; for anyone to checkout. I am pleasantly surprised to see the repository quicky getting to the &lt;strong&gt;Top 3&lt;/strong&gt; popular repostories on my &lt;a href="https://github.com/manwar"&gt;GotHub dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you remember &lt;a href="http://cpan-weekly.org"&gt;CPAN Weekly&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It was created and managed by &lt;strong&gt;Neil Bowers&lt;/strong&gt;. I still remember the &lt;a href="http://blogs.perl.org/users/neilb/2016/02/cpan-weekly-one-module-per-week-in-your-inbox.html"&gt;public announcement&lt;/a&gt;. I really enjoyed the weekly email. I still have it saved in my email inbox. It is priceless treasure that I don't want to loose. So I decided to drop a line on my &lt;a href="https://twitter.com/cpan_author"&gt;twitter handle&lt;/a&gt;, asking shouldn't it get a &lt;strong&gt;reboot&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;I got plenty of support for the reboot. Even &lt;strong&gt;Neil Bowers&lt;/strong&gt; responded with a warning, &lt;strong&gt;"resist the temptation of do it myself, instead encourage others to take it on"&lt;/strong&gt;. Who knows my workload better than me. I knew if I wanted to do this just by myself then it would be hard to justify the legacy started by original creator, &lt;strong&gt;Neil Bowers&lt;/strong&gt;. I was lucky to find a helping hand in no time. She is also member of &lt;a href="https://theweeklychallenge.org"&gt;Team PWC&lt;/a&gt;. I have seen her growth ever since she joined the team. I am lucky to have her in the team. She responded with &lt;strong&gt;2 emails&lt;/strong&gt; so far detailing her thought process. It is still in early discussion stage, I will share more details when we have initial draft ready. We are not in a rush, to be honest. The more help I get the better it is going to be.&lt;/p&gt;
&lt;p&gt;One more thing, I would like to talk about recently concluded, &lt;a href="https://perlconference.us/tprc-2022-hou/schedule"&gt;The Perl and Raku Conference in Houston&lt;/a&gt;. I really wanted to attend in person and meet everyone. I missed the live streaming of the talks. Never mind, we now have all the talks recorded. Please go and pick your favourite one from the &lt;a href="https://www.youtube.com/playlist?list=PLA9_Hq3zhoFyOpb-U3DMU7OT93dPUdtpE"&gt;YouTube Playlist&lt;/a&gt;. I would like to mention couple, I have seen so far from the list that I loved it and they are &lt;a href="https://www.youtube.com/watch?v=yH5IyYyvWHU"&gt;Taming the Unicode Beast&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=5lSdBSCkFGs"&gt;Corinna Status, 2022&lt;/a&gt;. When I have spare time, I will definitely go through each one by one.&lt;/p&gt;
&lt;p&gt;I am not sure about others but I miss event reports by the attendees of &lt;strong&gt;Perl&lt;/strong&gt; conference. I remember, in good old days, we would get plenty of such event reports. It used to give nice perspective from the attendee point of view. I wish and hope, we get some this time around. Talking about &lt;stron&gt;Perl&lt;/strong&gt; conference, I am sad that &lt;strong&gt;London Perl Workshop&lt;/strong&gt; is not happening this year too. I am hoping the year &lt;strong&gt;2023&lt;/strong&gt; can be the lucky year for &lt;strong&gt;LPW&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please do enjoy the rest of the newsletter.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/570.html</id>
    <published>2022-06-27T10:00:00Z</published>
    <updated>2022-06-27T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Logging</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-06-27T07:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-logging"/>  <id>https://perlmaven.com/dancer2-logging</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1663621444394772574</id>
    <published>2022-06-26T00:39:00.000+02:00</published>
    <updated>2022-06-26T00:39:04.307+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxcviii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.50&lt;/strong&gt; on 2022-06-23&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 2.48 was 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.18' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.18&lt;/strong&gt; on 2022-06-25&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 3.17 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.58' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.58&lt;/strong&gt; on 2022-06-19&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 1.57 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TONYC/Imager-1.018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Imager&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for Generating 24 bit Images &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.018&lt;/strong&gt; on 2022-06-19&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 1.017 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.201' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.201&lt;/strong&gt; on 2022-06-25&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 2.106 was 2 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.07&lt;/strong&gt; on 2022-06-24&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 4.06 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.10&lt;/strong&gt; on 2022-06-24&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.09 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.25&lt;/strong&gt; on 2022-06-24&lt;/li&gt;  &lt;li&gt;Votes: 89&lt;/li&gt;  &lt;li&gt;Previous version: 10.24 was 1 month, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220620' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220620&lt;/strong&gt; on 2022-06-20&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220527 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9612' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9612&lt;/strong&gt; on 2022-06-23&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9608 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ANATOFUZ/Teng-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Teng&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - very simple DBI wrapper/ORMapper &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2022-06-21&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 2 years, 2 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.615' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.615&lt;/strong&gt; on 2022-06-20&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.613 was 1 year, 5 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1663621444394772574/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcviii-12-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1663621444394772574"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1663621444394772574"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcviii-12-great-cpan-modules.html" title="(cccxcviii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5916849371631780138</id>
    <published>2022-06-26T00:35:00.005+02:00</published>
    <updated>2022-06-26T00:35:45.044+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 49&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/perl"&gt;perl&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/06/25 22:32:43 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ABNF::Grammar" target="_blank"&gt;ABNF::Grammar&lt;/a&gt; - Validator and generator module for ABNF grammars&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alt::Acme::Math::XS::ModuleBuild" target="_blank"&gt;Alt::Acme::Math::XS::ModuleBuild&lt;/a&gt; - Math is HARD (faster)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::PgLite" target="_blank"&gt;DBD::PgLite&lt;/a&gt; - PostgreSQL emulation mode for SQLite&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::TUI" target="_blank"&gt;Term::TUI&lt;/a&gt; - simple tool for building text-based user interfaces&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UI::Various" target="_blank"&gt;UI::Various&lt;/a&gt; - graphical/non-graphical user interface without external programs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::Gravatar" target="_blank"&gt;WebService::Gravatar&lt;/a&gt; - Perl interface to Gravatar API&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amazon::S3" target="_blank"&gt;Amazon::S3&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Hooks::AtRuntime" target="_blank"&gt;B::Hooks::AtRuntime&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::GGPlot" target="_blank"&gt;Chart::GGPlot&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Lite" target="_blank"&gt;Class::Accessor::Lite&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Site" target="_blank"&gt;CPAN::Site&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=129)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Frame" target="_blank"&gt;Data::Frame&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Firebird" target="_blank"&gt;DBD::Firebird&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::SQLite" target="_blank"&gt;DBD::SQLite&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=254)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::DeploymentHandler" target="_blank"&gt;DBIx::Class::DeploymentHandler&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Milla" target="_blank"&gt;Dist::Milla&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::HomeDir" target="_blank"&gt;File::HomeDir&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ShareDir::Install" target="_blank"&gt;File::ShareDir::Install&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Parameters" target="_blank"&gt;Function::Parameters&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Tree" target="_blank"&gt;HTML::Tree&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::Module" target="_blank"&gt;Inline::Module&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/InlineX::CPP2XS" target="_blank"&gt;InlineX::CPP2XS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::relative" target="_blank"&gt;lib::relative&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl::Layout::JSON" target="_blank"&gt;Log::Log4perl::Layout::JSON&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Run" target="_blank"&gt;Mojo::Run&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+2=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+3=398)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=137)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Size::Any" target="_blank"&gt;Term::Size::Any&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+2=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=177)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Tiny" target="_blank"&gt;Text::Table::Tiny&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tk" target="_blank"&gt;Tk&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::db" target="_blank"&gt;URI::db&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/W3C::LinkChecker" target="_blank"&gt;W3C::LinkChecker&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zilla::Dist" target="_blank"&gt;Zilla::Dist&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5916849371631780138/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/dxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5916849371631780138"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5916849371631780138"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/dxii-metacpan-weekly-report.html" title="(dxii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl lightning talk: ”Don’t Fear map and grep”</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-lightning-talk-dont-fear-map-and-grep-27gn" type="text/html"/>
    <content type="html">&lt;p&gt;This week’s &lt;a href="https://perlconference.us/tprc-2022-hou/"&gt;Perl and Raku Conference 2022&lt;/a&gt; in Houston was packed with &lt;a href="https://youtube.com/playlist?list=PLA9_Hq3zhoFyOpb-U3DMU7OT93dPUdtpE"&gt;great presentations&lt;/a&gt;, and I humbly added to them with a five-ish minute &lt;a href="https://perlconference.us/tprc-2022-hou/lightning-talks/"&gt;lightning talk&lt;/a&gt; on two of Perl’s more misunderstood functions: &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PHdq4QfSxrc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Sorry about the ”um”s and ”ah”s…)&lt;/em&gt;&lt;/p&gt;


&lt;div class="crayons-card c-embed text-styles text-styles--secondary"&gt;
      &lt;div class="c-embed__cover"&gt;
        &lt;a href="https://www.slideshare.net/mjgardner1/dont-fear-map-grep-list-processing-for-fun-and-profit" class="c-link s:max-w-50 align-middle" rel="noopener noreferrer"&gt;
          &lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqyWkBXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.slidesharecdn.com/ss_thumbnails/perlmapandgreplightningtalk-220625022517-88629ff1-thumbnail-4.jpg%3Fcb%3D1656124604" height="432" class="m-0" width="768"&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;div class="c-embed__body"&gt;
      &lt;h2 class="fs-xl lh-tight"&gt;
        &lt;a href="https://www.slideshare.net/mjgardner1/dont-fear-map-grep-list-processing-for-fun-and-profit" rel="noopener noreferrer" class="c-link"&gt;
          Don’t Fear map &amp;amp; grep: List processing for fun and profit
        &lt;/a&gt;
      &lt;/h2&gt;
        &lt;p class="truncate-at-3"&gt;
          Many beginning Perl programmers don’t understand the map and grep functions and avoid them. But they’re the key to many solutions under the heading of “list pr…
        &lt;/p&gt;
      &lt;div class="color-secondary fs-s flex items-center"&gt;
          &lt;img alt="favicon" class="c-embed__favicon m-0 mr-2 radius-0" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh1pGnlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public.slidesharecdn.com/v2/assets/favicon-aeb517165ad56906594e.ico" width="32" height="32"&gt;
        slideshare.net
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I’ve written much about &lt;a href="https://phoenixtrap.com/tags/lists"&gt;list processing in Perl&lt;/a&gt;, and this talk was based on the following blog posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://phoenixtrap.com/2021/03/16/perl_map_grep/"&gt;Better Perl: Using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phoenixtrap.com/2021/10/26/better-perl-four-list-processing-best-practices-with-map-grep-and-more/"&gt;Better Perl: Four list processing best practices with &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phoenixtrap.com/2022/02/10/perl-list-processing-is-for-hashes-too/"&gt;Perl list processing is for hashes, too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;A list of Perl list processing modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall I loved attending the conference, and it really invigorated my participation in the Perl community. Stay tuned as I resume regular posting!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: "&lt;a href="https://www.flickr.com/photos/52887415@N00/5863092970"&gt;shopping list&lt;/a&gt;" by &lt;a href="https://www.flickr.com/photos/52887415@N00"&gt;Ex-Smith&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse"&gt;CC BY-SA 2.0&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-lightning-talk-dont-fear-map-and-grep-27gn</id>
    <published>2022-06-24T21:25:44Z</published>
    <updated>2022-06-24T21:25:44Z</updated>
    <category term="perl"/>
    <category term="map"/>
    <category term="grep"/>
    <category term="video"/>
  </entry>
  <entry>
    <title>#569 - Fundraising for Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/569.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>4 weeks ago I <a href="https://perlweekly.com/archive/565.html">asked you to support the Perl Weekly</a>. It got very little response. Then 2 weeks ago I wrote <a href="https://perlweekly.com/archive/567.html">how disappointed I am</a>. Wow, the abuse I received for that. Both on Reddit an in private emails.</p>
<p>The funny thing is that the people who got upset that I asked for people to show their support are mostly the ones who never did anything for Perl.</p>
<p>However, the really imporant thing is that within 24 hours some 20 additional people started to support Mohammad and today we are already at 50 supporters! I was very impressed. Thank you!</p>
<p><b>Thank you!</b></p>
<p>In any case, think about this as a fund-raiser for Perl. For many years I hardly saw any fund-raising effort by TPF. This week, to my great surprise they put out a prospectus calling for support. I hope they have the communication channels to spread the information about it and will do the legwork that is need to get the support of the community.</p>
<p>For some strange reason they still mix Perl and Raku. Frankly I think it would be much better to both Perl and Raku if they stopped this mix and the two names/languages/dialects, whatever you call them, went separate ways.</p>
<p>Anyway, if you are interested to financially support the Perl activists, you now have a choice: <a href="https://news.perlfoundation.org/post/new-prospectus-launched-june-22">TPF</a>, directly <a href="https://www.patreon.com/manwar/">Mohammand S. Anwar</a>, other <a href="https://perlmaven.com/supporting-perl-creators">Perl-related creators</a>.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/569.html</id>
    <published>2022-06-20T10:00:00Z</published>
    <updated>2022-06-20T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Show errors during development</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-06-20T08:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-show-errors-during-development"/>  <id>https://perlmaven.com/dancer2-show-errors-during-development</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Brilliantly Discover Achilles' Imperfection</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/06/19#pwc169" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 20 Brilliant Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for(my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_brilliant{
    my($n) = @_;
    my @factors = prime_factor($n); 
    return @factors == 2 &amp;&amp; length($factors[0]) == length($factors[1]);
}

sub n_brilliants{
    my($n) = @_;
    my @brilliants;
    my $i = 0;
    {
       push @brilliants, $i if is_brilliant($i);
       $i++;
       redo if @brilliants &lt; $n;
    }
    return @brilliants;
}

MAIN:{
    print join(", ", n_brilliants(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4, 6, 9, 10, 14, 15, 21, 25, 35, 49, 121, 143, 169, 187, 209, 221, 247, 253, 289, 299
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The solution here incorporated a lot of elements from previous weekly challenges. That is 
to say it is quite familiar, I continue to be a fan of &lt;code&gt;redo&lt;/code&gt;!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 20 Achilles Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
use boolean;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_achilles{
    my($n) = @_;
    my @factors = prime_factor($n); 
    for my $factor (@factors){
        return false if $n % ($factor * $factor) != 0;
    }
    for(my $i = 2; $i &lt;= sqrt($n); $i++) {
        my $d = log($n) / log($i) . "";
        return false if ceil($d) == floor($d);  
    }
    return true;
}

sub n_achilles{
    my($n) = @_;
    my @achilles;
    my $i = 1;
    {
       $i++;
       push @achilles, $i if is_achilles($i);
       redo if @achilles &lt; $n;
    }
    return @achilles;
}

MAIN:{
    print join(", ", n_achilles(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
72, 108, 200, 288, 392, 432, 500, 648, 675, 800, 864, 968, 972, 1125, 1152, 1323, 1352, 1372, 1568, 1800
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This problem revealed something interesting with how, apparently, certain functions will
handle integer and floating point values. The issue arises when we are computing 
logarithms. We can see the issue in isolation in a one liner.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl -MPOSIX -e '$d = log(9) / log(3); print ceil($d) . "\t" . floor($d) . "\t$d\n"'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which prints &lt;code&gt;3       2       2&lt;/code&gt;. Notice that &lt;code&gt;log(9) / log(3)&lt;/code&gt; is exactly &lt;code&gt;2&lt;/code&gt; but, ok, 
floating point issues maybe it is 2.0000000001 and &lt;code&gt;ceil&lt;/code&gt; will give 3. 
But why does this work?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl -MPOSIX -e '$d = sqrt(9); print ceil($d) . "\t" . floor($d) . "\t$d\n"'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which gives &lt;code&gt;3       3       3&lt;/code&gt;. I am not sure what sqrt is doing differently? I guess 
how it stores the result internally? By the way, I am doing this to check is the result is 
an integer. That is if ceil($x) == floor($x), but that isn't working here as expected but 
I have used that trick in the past. I guess only with sqrt in the past though so never 
encountered this.&lt;/p&gt;

&lt;p&gt;The trick to work around this, in the solution to the challenge is like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl -MPOSIX -e '$d = log(9) / log(3)  . ""; print ceil($d) . "\t" . floor($d) . "\t$d\n"'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this does what I want and gives &lt;code&gt;2       2       2&lt;/code&gt;. I guess that drops the 
infinitesimally small decimal part when concatenating and converting to a string which 
stays gone when used numerically? &lt;/p&gt;

&lt;p&gt;Of course, there are other ways to do this. For example &lt;code&gt;abs($x - int(x)) &amp;lt; 1e-7&lt;/code&gt; will 
ensure that, within a minuscule rounding error, &lt;code&gt;$x&lt;/code&gt; is an integer.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-169/"&gt;Challenge 169&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc169</id>
    <published>2022-06-19T12:39:00-04:00</published>
    <updated>2022-06-19T12:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Do you want to support the Perl and Raku communities in a more strategic way?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/could-you-join-tpf-board-june-2022"/>
  <id>tag:news.perlfoundation.org,2022-06-18:/post/could-you-join-tpf-board-june-2022</id>
  <published>2022-06-18T04:27:24</published>
  <updated>2022-06-18T04:27:24</updated>
  <summary>
  <![CDATA[
     Could you or someone you know be willing to invest a few days per month, offering skills and experience that would be useful to The Perl Foundation or Raku Foundation? Have you considered nominating yourself, or them, to join the Board? Potential Board members ideally will: want to get things done and add value be active in the open source community demonstrate professional and positive characteristics It would be great 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Could you or someone you know be willing to invest a few days per month, offering skills and experience that would be useful to The Perl Foundation or Raku Foundation? Have you considered nominating yourself, or them, to join the Board?</p>

<p>Potential Board members ideally will:
* want to get things done and add value
* be active in the open source community
* demonstrate professional and positive characteristics</p>

<p>It would be great if you have experience on other FOSS boards, or not for profit, start-up, or management experience. Experience with fundraising would also be useful.</p>

<p>Nominees don't have to be actively working with the Perl or Raku languages. They may be a lapsed Perl or enthusiast, who continues to support and love Perl or Raku, but who has left the Perl or Raku environment.</p>

<p>The Board aims to represent the communities that it serves - we currently lack diversity in many ways, so please consider yourself, or encourage nominations for those who do not feel represented at the Foundation.</p>

<p>Currently, our board of directors has five members and we have an annual nomination and election process for new members. Bringing new people to the board regularly, with some community input, allows the organization to grow and increase our effectiveness. </p>

<h2>What's expected of Board Members?</h2>

<p>Board members are asked to serve a two-year term, after which they will be asked if they want to continue serving. They are expected to attend a monthly board meeting, as well as the monthly community representatives meeting, usually held on the third Friday of the month, one after the other.</p>

<h2>What’s the process for joining the Board?</h2>

<p><strong>1. Nomination</strong>
A new member should be nominated by one or more Board members, and must be seconded.
If you would like to be nominated, please get in touch via email (board@perlfoundation.org) with the following information:
*   Bio
* If you purport to represent a community (a language, a major project, etc.), that community should validate your application
*   Your reasons for wishing to become a member of the Board.
*   What goals you would like to see pursue over the next 12-24 months?
<strong>This information will be posted publicly.</strong></p>

<p><strong>2. Eligibility</strong>
The nominee must be an active volunteer with the foundation for at least 180 days.</p>

<p><strong>3. Public hearing</strong>
A public post will be made to ask for input from the community. The post will have the nominee’s bio and reasons for nomination, as detailed above.</p>

<p><strong>4. Voting</strong>
The final vote will be made by the existing Board Members after gathering feedback from the public.</p>

<h2>Any questions and further information</h2>

<p>If you have any questions please get in touch with us at <a href="mailto:board@perlfoundation.org">board@perlfoundation.org</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Calling All Grant Gurus! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grantschairjobcall"/>
  <id>tag:news.perlfoundation.org,2022-06-17:/post/grantschairjobcall</id>
  <published>2022-06-17T14:59:34</published>
  <updated>2022-06-17T14:59:34</updated>
  <summary>
  <![CDATA[
     We are in need of a volunteer to take over the Grants Committee Chair responsibilities ASAP. What does the Grants Committee Chair do? Grants Committee Chair Job Duties Open a grants call every two months to invite community members to apply for funding. Facilitate discussion of grants between the public,The Perl Foundation/Raku Foundation, and Grants Committee members. Tally and report voting outcome at the end of each grant call. Work 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/ed20b87e4006fc60edb450ad8dad59759453cb86/megaphone.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>We are in need of a volunteer to take over the Grants Committee Chair responsibilities ASAP. 
What does the Grants Committee Chair do? </p>

<h1>Grants Committee Chair Job Duties</h1>

<ul>
<li>Open a grants call every two months (January, March, May, July, September, November) to invite community members to apply for funding.</li>
<li>Facilitate discussion of grants between the public,The Perl Foundation/Raku Foundation, and Grants Committee members.</li>
<li>Tally and report voting outcome at the end of each grant call.</li>
<li>Work with the foundation to ensure funding is available for approved grants.</li>
<li>Make sure each approved grant has a grant manager assigned, else serve as grant manager.</li>
<li>Serve as a liaison between the foundation and grantees</li>
<li>Assist grant managers in removing roadblocks for grant managers and recipients</li>
<li>Help grant managers keep grantees on time and on task.</li>
<li>Other duties and reporting as needed by the foundation.</li>
</ul>

<h3>Okay, but what are the benefits?</h3>

<p><strong>Helping Others</strong> 
Nonprofits depend on volunteers. Not only will you be helping the foundation, you will also be helping the developers that apply for aid. Our grants fund a variety of projects that benefit the open-source community. </p>

<p><em>*Networking with Other Programmers *</em>
The service you perform while volunteering with the foundation allows you to meet new people that you may not have met otherwise. This community gives you a place to bond with peers over the important work you are doing. This can lead to new friendships and even job opportunities since you are constantly meeting, interacting, and networking with new people.</p>

<p><strong>Learn New Things</strong>
Volunteerism also gives you the chance to learn new things. Most likely, you’ll be working in a new capacity that is unfamiliar to you. This will allow you to gain new skills and gather new ideas. </p>

<h3>Contact Us</h3>

<p>If you're interested in this role, please email us at <a href="hello@perlfoundation.org">board@perlfoundation.org</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Could you support future development of Perl and Raku?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/new-prospectus-launched-june-22"/>
  <id>tag:news.perlfoundation.org,2022-06-15:/post/new-prospectus-launched-june-22</id>
  <published>2022-06-15T05:17:45</published>
  <updated>2022-06-15T05:17:45</updated>
  <summary>
  <![CDATA[
     Billions of people around the world rely on Perl and Raku in some way without even realising it. A new prospectus from The Perl Foundation highlights how you can contribute to its ongoing development, either financially, or through volunteering time. By doing so you can: Ensure Perl and Raku are sustainably maintained and developed Gain valuable education opportunities for your teams at conferences Engage in important networking opportunities and build 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Billions of people around the world rely on Perl and Raku in some way without even realising it. A [new prospectus](<em>ra-rel-mnt</em>/simplecas/fetch_content/64c0601be328555858adc21a58e221c977fe55ae/Perl Raku Prospectus_Final_Interactive_v2.pdf) from The Perl Foundation highlights how you can contribute to its ongoing development, either financially, or through volunteering time. </p>

<p>By doing so you can:
* Ensure Perl and Raku are sustainably maintained and developed
* Gain valuable education opportunities for your teams at conferences
* Engage in important networking opportunities and build your corporate visibility
* Recruit new and invaluable Perl or Raku developers to your team
* Associate your brand with support for Perl and Raku</p>

<h2>Please share the prospectus with colleagues and employers</h2>

<p>Take a look at [the prospectus](<em>ra-rel-mnt</em>/simplecas/fetch_content/64c0601be328555858adc21a58e221c977fe55ae/Perl Raku Prospectus_Final_Interactive_v2.pdf) today and share it with your colleagues and employers too.</p>

<p>[<img src="_ra-rel-mnt_/simplecas/fetch_content/8c78224a59b939d5c85cd0afe1523619aae5d229/prospectus cover page.jpg" style="max-width:100%;" />](<em>ra-rel-mnt</em>/simplecas/fetch_content/87ad918718351eef9604c5487e49a4c94760d91b/Perl Raku Prospectus_Final_Interactive.pdf) </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>It's all about the numbers</title>
    <link rel="alternate" href="https://dev.to/simongreennet/its-all-about-the-numbers-4fh5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 169
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-169/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-169/sgreen">My solution</a></p>

<p>After a long break, I'm back. Without further ado, let's go through the two challenges this week.</p>

<h2>
  
  
  Task 1: Brilliant Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 Brilliant Numbers.</p>

<p>Brilliant numbers are numbers with two prime factors of the same length.</p>

<p>The number should have exactly two prime factors, i.e. it’s the product of two primes of the same length.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one of those tasks where given we are dealing with such small numbers, it is easier to just brute force things. In the main function, I have the value <code>l</code> for the length of the primes. I then call call the <code>get_bril_nums</code> function to get all brilliant numbers.</p>

<p>It does this in three steps:</p>

<ol>
<li>Get all primes of <code>l</code> length.</li>
<li>Multiple each of the primes</li>
<li>Sort the results numerically</li>
</ol>

<p>I keep doing this until there are at least 20 numbers calculated (as we know this is when <code>l == 2</code>). I then print the first 20 numbers.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 
4, 6, 9, 10, 14, 15, 21, 25, 35, 49, 121, 143, 169, 187, 209, 221, 247, 253, 289, 299
</code></pre>

</div>



<h2>
  
  
  Task 2: Achilles Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 <a href="https://en.wikipedia.org/wiki/Achilles_number">Achilles Numbers</a>.</p>

<h3>
  
  
  My solution
</h3>

<p>This task is more challenging than the first one, and highlighted that at the time of writing, Mohammad's description isn't quite correct. I've <a href="https://twitter.com/simongreennet/status/1536323816187924480">tweeted</a> him, so hopefully it will be fixed.</p>

<p>For this task, I keep calling the <code>is_achilles_number</code> with an incrementing counter until we have found twenty numbers. This function does the following</p>

<ol>
<li>Get the unique prime factors into the <code>factors</code> dict (hash in Perl), where the key is the prime number and the value is the power.</li>
<li>Set the <code>powers</code> set (array in Perl) to the power values. At this point we no longer care about the prime factor.</li>
<li>If there is only one value (it's a power of a single number) or any of the powers is 1, return <code>False</code> (undef in Perl).</li>
<li>If the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor">greatest common divisor</a> of the powers is not 1, return <code>False</code> (undef).</li>
<li>Return <code>True</code>.</li>
</ol>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 
72, 108, 200, 288, 392, 432, 500, 648, 675, 800, 864, 968, 972, 1125, 1152, 1323, 1352, 1372, 1568, 1800
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/its-all-about-the-numbers-4fh5</id>
    <published>2022-06-13T13:22:01Z</published>
    <updated>2022-06-13T13:22:01Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#568 - Perl v5.36 - the beginning of new era</title>
    <link rel="alternate" href="https://perlweekly.com/archive/568.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>A big round of applause to the entire team behind the ground breaking release of <strong>Perl v5.36</strong>. I have been following the features of the latest release very closely. I am confident it would be a solid foundation for <strong>Corinna</strong> and <strong>v7</strong>.</p>
<p>Have you had chance to play with <strong>Perl v5.36</strong>?</p>
<p>If not then please do checkout my <a href="http://blogs.perl.org/users/mohammad_s_anwar/2022/06/do-you-want-to-get-started-with-perl-v536.html">blog post</a>, where I shared my first hand experience playing with <strong>Perl v5.36</strong>.</p>
<p>Have you ever thought of contributing to your favourite language, <strong>Perl</strong>?</p>
<p>A little over a decade, I submitted a small patch via email. Those days, the process was not as smooth as it is today. Unfortunately I never received any acknowledgment. Ever since <strong>Perl</strong>, found the new home in <a href="https://github.com/Perl/perl5">GitHub</a>, it is so easy to submit the patches. I submitted a <a href="https://github.com/Perl/perl5/pull/19853">small change</a> to the core Perl. To my surprise, in <strong>2 days</strong>, it got accepted and merged. It has given me confidence to submit more.</p>
<p>Why don't you also give it a try?</p>
<p>Last but not least, I would like to thank each and everyone for all the support <a href="https://www.patreon.com/manwar">via Patreon</a>, I received in the last few weeks. I am overwhelmed, to be honest.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/568.html</id>
    <published>2022-06-13T10:00:00Z</published>
    <updated>2022-06-13T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Take the Long Way Home</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/06/12#pwc168" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Calculate the first 13 Perrin Primes.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Primality qw/is_prime/;

sub n_perrin_prime_r{
    my($n, $perrins, $perrin_primes) = @_;
    return $perrin_primes if keys %{$perrin_primes} == $n;
    my $perrin = $perrins-&gt;[@{$perrins} - 3] + $perrins-&gt;[@{$perrins} - 2];
    push @{$perrins}, $perrin;
    $perrin_primes-&gt;{$perrin} = -1 if is_prime($perrin);
    n_perrin_prime_r($n, $perrins, $perrin_primes);
}

sub perrin_primes{
    return n_perrin_prime_r(13, [3, 0, 2], {});
}

MAIN:{
    print join(", ", sort {$a &lt;=&gt; $b} keys %{perrin_primes()}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 17, 29, 277, 367, 853, 14197, 43721, 1442968193, 792606555396977
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The solution here incorporated a lot of elements from previous weekly challenges. That is 
to say it is quite familiar, we recursively generate the sequence which is stored as hash
keys and, once completed, sort and print the results. The hash keys are a convenient, 
although perhaps slightly bulky, way of handling the repeated &lt;code&gt;5&lt;/code&gt; term at the beginning. 
The terms strictly increase thereafter.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer greater than 1. Write a script to find the home prime of the 
given number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use bigint;
use Math::Primality qw/is_prime/;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub home_prime{
    my($n) = @_;
    return $n if is_prime($n);
    my $s = $n;
    {
        $s = join("", prime_factor($s));
        redo if !is_prime($s);
    }
    return $s;
}

MAIN:{
    print home_prime(10) . "\n";
    print home_prime(16) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
773
31636373
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;So you think eight is low&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Calculating HP(8) should be an easy go&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take the long way home&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take the long way home&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The second part of this week's challenge was a lot of fun as it presented some unexpected
behavior. Here we are asked to compute the &lt;em&gt;Home Prime&lt;/em&gt; of any given number. The process
for doing so is, given &lt;code&gt;N&lt;/code&gt; to take the prime factors for &lt;code&gt;N&lt;/code&gt; and concatenate them 
together. If the result is prime then we are done, that is the &lt;em&gt;Home Prime&lt;/em&gt; of &lt;code&gt;N&lt;/code&gt;, 
typically written &lt;code&gt;HP(N)&lt;/code&gt;. This is an easy process to repeat, and in many cases the 
computation is a very quick one. However, in some cases, the size of the interim numbers
on the path to HP(N) grow extremely large and the computation bogs down, whence &lt;em&gt;take the 
long way home&lt;/em&gt;! As an example, the computation of HP(8) is still running after 24 hours
on my M1 Mac Mini. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-168/"&gt;Challenge 168&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/HomePrime.html"&gt;Home Prime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LPRrHyXchEY"&gt;Take the Long Way Home&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc168</id>
    <published>2022-06-12T23:34:00-04:00</published>
    <updated>2022-06-12T23:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6164798390531357235</id>
    <published>2022-06-11T14:25:00.001-07:00</published>
    <updated>2022-06-11T14:25:42.781-07:00</updated>
    <title type="text">CPAN: ftp.cpan.org depreciation</title>
    <content type="html">&lt;p&gt;As a followup to the &lt;a href="https://log.perl.org/2021/02/cpan-mirror-list-changes.html"&gt;CPAN Mirror List changes from last year&lt;/a&gt;, we're announcing that FTP service on &lt;span style="font-family: courier;"&gt;ftp.cpan.org&lt;/span&gt; and &lt;span style="font-family: courier;"&gt;ftp.perl.org &lt;/span&gt;is being&amp;nbsp;deprecated. This means that any CPAN clients configured to use them will fail to fetch modules.&lt;/p&gt;&lt;p&gt;For the past several years, CPAN clients have defaulted to &lt;span style="font-family: courier;"&gt;www.cpan.org &lt;/span&gt;to fetch modules, so this should only affect users using very old CPAN clients (usually associated with old versions of Perl) who did not explicitly set a mirror.&lt;/p&gt;&lt;p&gt;We're not setting a firm timeline on this depreciation, but there are only a small number of compatible FTP mirrors remaining, and the number is shrinking over time.&amp;nbsp; At some point, there will no longer be any remaining FTP mirrors, and the service will be terminated.&amp;nbsp; Because these mirrors are run by independent volunteers, we don't have a good way of measuring actual traffic.&lt;/p&gt;&lt;p&gt;If you think you might be using a CPAN client configured to use &lt;span style="font-family: courier;"&gt;ftp.cpan.org&lt;/span&gt; or &lt;span style="font-family: courier;"&gt;ftp.perl.org&lt;/span&gt;, please check, and reconfigure to use the globally available &lt;span style="font-family: courier;"&gt;www.cpan.org&lt;/span&gt; instead.&lt;/p&gt;&lt;p&gt;If you're using CPAN.pm, you can configure &lt;span style="font-family: courier;"&gt;www.cpan.org&lt;/span&gt; as the mirror with these commands:&lt;/p&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;o conf urllist https://www.cpan.org/&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;o conf commit&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;(If your perl doesn't have &lt;span style="font-family: courier;"&gt;Net::SSLEay&lt;/span&gt; installed to support TLS, you can just use &lt;span style="font-family: courier;"&gt;http://www.cpan.org/)&lt;/span&gt;&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/6164798390531357235/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2022/06/cpan-ftpcpanorg-depreciation.html#comment-form" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6164798390531357235"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6164798390531357235"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2022/06/cpan-ftpcpanorg-depreciation.html" title="CPAN: ftp.cpan.org depreciation"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant Update: Optree Optimisations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-update-optree-optimisations-start"/>
  <id>tag:news.perlfoundation.org,2022-06-09:/post/grant-update-optree-optimisations-start</id>
  <published>2022-06-09T07:03:55</published>
  <updated>2022-06-09T07:03:55</updated>
  <summary>
  <![CDATA[
     Work has started, though a roadblock has come up: https://www.nntp.perl.org/group/perl.perl5.porters/2022/06/msg263847.html Paul has a few ideas to work around it. As some preliminary work, he wants to clean up op.c a bit and split the peephole optimiser out into its own file, per this thread: https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262118.html There is now an MR for that here: https://github.com/Perl/perl5/pull/19835 Cheers, Matthew Horsfall 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Work has started, though a roadblock has come up:</p>

<p>https://www.nntp.perl.org/group/perl.perl5.porters/2022/06/msg263847.html</p>

<p>Paul has a few ideas to work around it.</p>

<p>As some preliminary work, he wants to clean up op.c a bit and split the peephole optimiser out into its own file, per this thread:</p>

<p>https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262118.html</p>

<p>There is now an MR for that here:</p>

<p>https://github.com/Perl/perl5/pull/19835</p>

<p>Cheers,</p>

<p>-- Matthew Horsfall (alh)</p>

    ]]>
  </content>
</entry>
</feed>
