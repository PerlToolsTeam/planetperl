<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-09-01T00:57:49Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): July 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_tony_cook_july_2021"/>
  <id>tag:news.perlfoundation.org,2021-08-31:/post/maintaining_perl_5_tony_cook_july_2021</id>
  <published>2021-08-31T20:13:32</published>
  <updated>2021-08-31T20:13:32</updated>
  <summary>
  <![CDATA[
     Tony reports his July progress on maintaining Perl 5 core: Approximately 23 tickets were reviewed, and 1 patches were applied 19.37 #1420 working on a fix #1420 accessor for the split up last_in_*, start replacing accesses #1420 testing, fix some bugs, need more tests #1420 more tests, debugging ${^LAST_FH} problem #1420 more debugging, fixes, more tests #1420 code review, fix one problem, try to refactor a bit, debugging #1420 debugging 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Tony reports his July progress on maintaining Perl 5 core:
```
Approximately 23 tickets were reviewed, and 1 patches were
applied</p>

<p>[Hours] [Activity]
19.37 #1420 working on a fix</p>

<h1>1420 accessor for the split up last_in_*, start replacing</h1>

<p>accesses</p>

<h1>1420 testing, fix some bugs, need more tests</h1>

<h1>1420 more tests, debugging ${^LAST_FH} problem</h1>

<h1>1420 more debugging, fixes, more tests</h1>

<h1>1420 code review, fix one problem, try to refactor a bit,</h1>

<p>debugging</p>

<h1>1420 debugging intermittent failures</h1>

<h1>1420 try to reproduce crashes</h1>

<h1>1420 reproduce in test, try to reproduce independently,</h1>

<p>stopped failing</p>

<h1>1420 add debugging code and see the problem, attempts to</h1>

<p>fix and testing</p>

<h1>1420 debugging</h1>

<h1>1420 more debugging, track down a related bug</h1>

<p>0.53 #18643 re-test and apply to blead, update perldelta
2.27 #18734 review and comment</p>

<h1>18734 zoom testing session (debugger had problems)</h1>

<h1>18734 research, follow-up comment</h1>

<p>0.58 #18746 review, research and comment
0.32 #18820 review, briefly comment
6.66 #18837 configuration, work on the pp_stat code</p>

<h1>18837 more pp_stat</h1>

<h1>18837 recheck, testing</h1>

<h1>18837 fix some config issues, testing, push for CI</h1>

<h1>18837 review CI results and push a fix</h1>

<h1>18837 review CI results and open pr #19005</h1>

<p>1.10 #18882 review, testing and comment
0.43 #18948 review
4.55 #18953 setup test environment</p>

<h1>18953 fail to reproduce, try setting up a different test</h1>

<p>environment</p>

<h1>18953 more try to reproduce</h1>

<h1>18953 more fail to reproduce, review code and query</h1>

<p>0.52 #18955 review, research and comment
0.75 #18968 edits, testing sample code, update PR
1.23 #18973 review code, testing on FreeBSD
0.67 #18980 comment, some research
1.97 #18984 review suggested change, review code, test an
alternative change and make #18984
0.22 #18995 briefly comment
0.28 #19005 fix some review issues
1.32 comment security list
2.05 feature.pm feature test API
0.27 feature.pm feature test API, make PR
0.90 list catch up
list catch up
1.52 list catchup, comment on security discussion
2.52 more feature.pm, testing, documentation, look at
optimizing to use bundles where possible</p>

<h1>0.50 research interpreter cloning</h1>

<p>50.53 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_dave_mitchell_july_2021"/>
  <id>tag:news.perlfoundation.org,2021-08-31:/post/maintaining_perl_5_dave_mitchell_july_2021</id>
  <published>2021-08-31T20:08:26</published>
  <updated>2021-08-31T20:08:26</updated>
  <summary>
  <![CDATA[
     Dave reports the following for July: In July I managed to mostly catch up on the last few months of unread p5p emails, github notifications etc, and have been keeping up to date with them on a daily basis now. SUMMARY: 16:04 process p5p mailbox 16:04 TOTAL There are 12.6 hours left on the existing grant, 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Dave reports the following for July:</p>

<p>```
In July I managed to mostly catch up on the last few months of unread p5p
emails, github notifications etc, and have been (mostly) keeping up to
date with them on a daily basis now.</p>

<p>SUMMARY:</p>

<h2>16:04 process p5p mailbox</h2>

<p>16:04 TOTAL (HH::MM)</p>

<p>There are 12.6 hours left on the existing grant, (but I've applied
for a new grant).
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Taming the Moose: Method modifiers instead of overrides in object-oriented Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/taming-the-moose-method-modifiers-instead-of-overrides-in-object-oriented-perl-4ag2" type="text/html"/>
    <content type="html">&lt;p&gt;Last month &lt;a href="https://phoenixtrap.com/2021/07/13/taming-the-moose-picking-the-best-way-to-subclass-perl-methods/"&gt;I wrote about using Moose’s &lt;code&gt;override&lt;/code&gt; function&lt;/a&gt; to, well, override a superclass’s method. &lt;a href="https://chris.prather.org/"&gt;Chris Prather&lt;/a&gt; on the &lt;a href="https://kiwiirc.com/nextclient/#irc://irc.perl.org/moose"&gt;#moose IRC channel&lt;/a&gt; suggested soon after that the &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Around-modifiers"&gt;&lt;code&gt;around&lt;/code&gt; method modifier&lt;/a&gt; (or its little sisters &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Before-and-after-Modifiers"&gt;&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;&lt;/a&gt;) might be a better choice if you’re also calling the original method inside. He noted that “at a minimum &lt;code&gt;override&lt;/code&gt; only works if you’re subclassing, &lt;code&gt;around&lt;/code&gt; will apply to composed methods too.”&lt;/p&gt;

&lt;p&gt;His point was that when you decide to compose &lt;a href="https://metacpan.org/pod/Moose::Manual::Roles"&gt;roles&lt;/a&gt; (also know as &lt;a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)"&gt;traits&lt;/a&gt;) instead of or in addition to more traditional inheritance, &lt;code&gt;override&lt;/code&gt; simply doesn’t work: only a method modifier will do. (And as &lt;a href="https://haarg.org/"&gt;Graham Knop&lt;/a&gt; and &lt;a href="https://github.com/karenetheridge"&gt;Karen Etheridge&lt;/a&gt; later remarked on IRC, &lt;code&gt;override&lt;/code&gt; isn’t even an option if you’re using &lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt; as an alternative to Moose.)&lt;/p&gt;

&lt;p&gt;Modifying a role’s method with &lt;code&gt;around&lt;/code&gt; might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::Role::&lt;/span&gt;&lt;span class="nv"&gt;Hungry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;wants_food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is hungry!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;GuineaPig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Local::Role::Hungry&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;splice&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; runs to the front of the cage!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wheek!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Local::Role::Hungry&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;splice&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; runs to the kitchen!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Woof!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is jumping!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Seamus&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@pigs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;GuineaPig&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sx"&gt;qw&amp;lt;Cocoa Ginger Pepper&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$animal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@pigs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$animal&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;wants_food&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above yields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Seamus runs to the kitchen!
Seamus is hungry!
Woof!
Cocoa runs to the front of the cage!
Cocoa is hungry!
Wheek!
Ginger runs to the front of the cage!
Ginger is hungry!
Wheek!
Pepper runs to the front of the cage!
Pepper is hungry!
Wheek!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a little more involved than overriding a &lt;a href="https://perldoc.perl.org/functions/sub"&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/a&gt;, since method modifiers are passed both the consumed role’s original method (&lt;code&gt;$orig&lt;/code&gt; above) and the instance (&lt;code&gt;$self&lt;/code&gt; above) as parameters. It has the same effect, though, and you can call the original method by saying &lt;code&gt;$self-&amp;gt;$orig( parameters... )&lt;/code&gt;. That’s why I used the &lt;a href="https://perldoc.perl.org/functions/splice"&gt;&lt;code&gt;splice&lt;/code&gt; function&lt;/a&gt; so I could pass any remaining parameters as the original &lt;a href="https://perldoc.perl.org/variables/@_"&gt;&lt;code&gt;@_&lt;/code&gt; array&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all you want to do is have something happen either before or after the original method, just use &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is jumping!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that there’s no return value in a &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt; modifier, as those are handled by the original method.&lt;/p&gt;

&lt;p&gt;Modifiers aren’t limited to consuming classes; they can be in roles and modify their consumers’ methods. They also have a couple of other tricks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can pass an &lt;a href="https://perldoc.perl.org/perlref#Square-Brackets"&gt;array reference&lt;/a&gt; to modify multiple methods at once.&lt;/li&gt;
&lt;li&gt;You can use the contents of a variable to specify the modified method name, and use that same variable in the modifier itself.&lt;/li&gt;
&lt;li&gt;You can use a &lt;a href="https://perldoc.perl.org/perlre"&gt;regular expression&lt;/a&gt; to select methods. (Beware if you’re using Moo that its &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;Class::Method::Modifiers&lt;/a&gt; module doesn’t support this.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting these together gives you constructs like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;foo bar baz&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something got called&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$method_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sx"&gt;qw&amp;lt;foo bar baz&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="nv"&gt;$method_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Calling &lt;/span&gt;&lt;span class="si"&gt;$method_name&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="sx"&gt;qr/^request_/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid arguments&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moose comes with great introductory manuals for &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod"&gt;method modifiers&lt;/a&gt; and &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/Roles.pod"&gt;roles&lt;/a&gt;, so be sure to check those out. There’s a lot more to them and a blog can only cover so much.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/taming-the-moose-method-modifiers-instead-of-overrides-in-object-oriented-perl-4ag2</id>
    <published>2021-08-31T14:00:00Z</published>
    <updated>2021-08-31T14:00:00Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="moose"/>
    <category term="traits"/>
  </entry>
  <entry>
    <title>Object::Pad Yuki Kimoto's 2021-08-25 - Default internal data structure of the object</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-yuki-kimotos-2021-08-25---default-internal-data-structure-of-the-object.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10380</id>
    <published>2021-08-25T08:29:02Z</published>
    <updated>2021-08-31T08:59:48Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>Object::Pad Yuki Kimoto's 2021-08-25(I fix this entry because default internal data structure is array reference, not hash reference).</p>

<p> This time is default internal data structure of the object.</p>

<p>Default internal data structure of the Object::Pad is array reference.</p>

<pre>
use strict;
use warnings;
use Data::Dumper;

<p>use Object::Pad;<br />
 <br />
class Point {<br />
   has $x :param = 1;<br />
   has $y :param = 2;<br />
   <br />
   method dump {<br />
      # Default data structure is array reference<br />
      warn Data::Dumper::Dumper $self;<br />
   }<br />
 <br />
   method describe {<br />
      print "A point at ($x, $y)\n";<br />
   }<br />
}</p>

<p>{<br />
  my $x = 5;<br />
  my $y = 10;<br />
  my $point = Point->new(x => $x, y => $y);<br />
  $point->dump;<br />
}</p>

</pre>
]]>
        
    </content>
</entry>
  <entry>
    <title>The ephemeral miniconf - José Joaquín Atria</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-jose-joaquin-atria-2m5h" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#speaker-announcement-jos%C3%A9-joaqu%C3%ADn-atria"&gt;
  &lt;/a&gt;
  Speaker announcement: José Joaquín Atria
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.pinguinorodriguez.cl/"&gt;José Joaquín Atria&lt;/a&gt; is a researcher and programmer based in London.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--taFuRc6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxs5zleif1cmqrg7fv9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--taFuRc6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxs5zleif1cmqrg7fv9c.png" alt="Atria"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He was one of the early speakers to join &lt;a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/"&gt;the ephemeral miniconf&lt;/a&gt; \o/&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bio"&gt;
  &lt;/a&gt;
  Bio
&lt;/h2&gt;

&lt;p&gt;José Joaquín Atria own bio says: &lt;br&gt;
"A Speech Scientist in a previous life, I now work full time as a programmer, and appreciate the stable hours and not having to fund my own work. If you need a climbing buddy, hit me up!"&lt;/p&gt;

&lt;p&gt;Or even "I write code for fun, and some times get paid to do it" ❤️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk"&gt;
  &lt;/a&gt;
  Talk
&lt;/h2&gt;

&lt;p&gt;I'm afraid to declare that I have yet no idea what José Joaquín will talk about 😀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kj4nArBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3unrhdk5rkjpkgbqf4n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kj4nArBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3unrhdk5rkjpkgbqf4n.jpg" alt="Top Secret"&gt;&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-jose-joaquin-atria-2m5h</id>
    <published>2021-08-31T05:20:45Z</published>
    <updated>2021-08-31T05:20:45Z</updated>
    <category term="perl"/>
    <category term="raku"/>
  </entry>
  <entry>
    <title>The ephemeral miniconf - Clement Oudot</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-clement-oudot-2a1a" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#speaker-announcement-clement-oudot"&gt;
  &lt;/a&gt;
  Speaker announcement: Clement Oudot
&lt;/h1&gt;

&lt;p&gt;When I tried to find speakers for &lt;a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/"&gt;the ephemeral miniconf&lt;/a&gt;, I contacted (or "bothered" or "spammed") some french people that I knew could give very interesting talks. And I'm very happy that it worked! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://fr.linkedin.com/in/clementoudot"&gt;Clement Oudot&lt;/a&gt; is a strong Open Source (or even "Open standard") believer, and as such he is part of the board of &lt;a href="https://cnll.fr/"&gt;CNLL&lt;/a&gt; and &lt;a href="https://www.ow2.org/"&gt;OW2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0SZPUEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eidp3uo84blwkt9drdui.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0SZPUEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eidp3uo84blwkt9drdui.jpeg" alt="Clement Oudot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He is also an expert in LDAP and more in general directories, IAM, authentication etc... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk"&gt;
  &lt;/a&gt;
  Talk
&lt;/h2&gt;

&lt;p&gt;Clement will present &lt;a href="https://lemonldap-ng.org/welcome/"&gt;LemonLDAP::NG&lt;/a&gt; which you probably already know since it's a major implementation of the Lightweight Directory Access Protocol.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9XzS9PUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssqgy2c3lvf4qr9d58b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9XzS9PUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssqgy2c3lvf4qr9d58b.png" alt="Announcing Clement Oudot"&gt;&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-clement-oudot-2a1a</id>
    <published>2021-08-31T05:19:33Z</published>
    <updated>2021-08-31T05:19:33Z</updated>
    <category term="perl"/>
    <category term="raku"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 127: Disjoint Sets and Conflict Intervals</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/08/perl-weekly-challenge-127-disjoint-sets-and-conflict-intervals.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10391</id>
    <published>2021-08-30T02:41:56Z</published>
    <updated>2021-08-30T16:38:00Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 127 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-127/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Disjoint Sets</h2>

<p><em>You are given two sets with unique integers.</em></p>

<p><em>Write a script to figure out if they are disjoint.</em></p>

<pre><code>The two sets are disjoint if they don’t have any common members.
</code></pre>

<p><em>Example:</em></p>

<pre><code>Input: @S1 = (1, 2, 5, 3, 4)
       @S2 = (4, 6, 7, 8, 9)
Output: 0 as the given two sets have common member 4.

Input: @S1 = (1, 3, 5, 7, 9)
       @S2 = (0, 2, 4, 6, 8)
Output: 1 as the given two sets do not have common member.
</code></pre>

<h3>Disjoint Sets in Raku</h3>

<p>Raku has built-in <code>Set</code> type and operators, which are perfect match for the task at hand, so that the code doing the work holds in just one code line. The <code>is-disjoint</code> subroutine receives two lists as parameters. The <code>(&amp;)</code> set intersection operator coerces the two lists into <code>Sets</code> and generate a new <code>Set</code> with the common items. The <code>is-disjoint</code> subroutine the returns 1 if the new set is empty and 0 otherwise.</p>

<pre><code>use v6;

sub is-disjoint ($s1, $s2) {
    return ($s1 (&amp;) $s2).elems == 0 ?? 1 !! 0;
}
say is-disjoint (1, 2, 5, 3, 4), (4, 6, 7, 8, 9);
say is-disjoint (1, 3, 5, 7, 9), (0, 2, 4, 6, 8);
</code></pre>

<p>This script generates the following output:</p>

<pre><code>raku ./disjoint.raku
0
1
</code></pre>

<h3>Disjoint Sets in Perl</h3>

<p>Perl doesn&#8217;t have <code>Set</code> operators, but we can use a hash to more or less the same effect. The <code>is_disjoint</code> subroutine in the program below populates a hash with the data from one of the input lists and then loops over the data of the other list to find common items, if any.</p>

<p>use strict;
use warnings;
use feature &#8220;say&#8221;;</p>

<p>sub is<em>disjoint {
    my ($s1, $s2) = @</em>;
    my %h1 = map { $_ => 1 } @$s1;
    for my $d (@$s2) {
        return 0 if exists $h1{$d};
    }
    return 1;
}
say is<em>disjoint [1, 2, 5, 3, 4], [4, 6, 7, 8, 9];
say is</em>disjoint [1, 3, 5, 7, 9], [0, 2, 4, 6, 8];</p>

<p>This script generates the following output:</p>

<pre><code>$ perl  ./disjoint.pl
0
1
</code></pre>

<h2>Task 2: Conflict Intervals</h2>

<p><em>You are given a list of intervals.</em></p>

<p><em>Write a script to find out if the current interval conflicts with any of the previous intervals.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: @Intervals = [ (1,4), (3,5), (6,8), (12, 13), (3,20) ]
Output: [ (3,5), (3,20) ]

    - The 1st interval (1,4) do not have any previous intervals to compare with, so skip it.
    - The 2nd interval (3,5) does conflict with previous interval (1,4).
    - The 3rd interval (6,8) do not conflicts with any of the previous intervals (1,4) and (3,5), so skip it.
    - The 4th interval (12,13) again do not conflicts with any of the previous intervals (1,4), (3,5) and (6,8), so skip it.
    - The 5th interval (3,20) conflicts with the first interval (1,4).

Input: @Intervals = [ (3,4), (5,7), (6,9), (10, 12), (13,15) ]
Output: [ (6,9) ]

    - The 1st interval (3,4) do not have any previous intervals to compare with, so skip it.
    - The 2nd interval (5,7) do not conflicts with the previous interval (3,4), so skip it.
    - The 3rd interval (6,9) does conflict with one of the previous intervals (5,7).
    - The 4th interval (10,12) do not conflicts with any of the previous intervals (3,4), (5,7) and (6,9), so skip it.
    - The 5th interval (13,15) do not conflicts with any of the previous intervals (3,4), (5,7), (6,9) and (10,12), so skip it.
</code></pre>

<p>One thing is not clear to me in the task description and associated examples: are <code>(1,4)</code> and <code>(4, 6)</code> conflicting intervals? They have one common item, but it may be considered that they don&#8217;t really overlap. I will consider that they are conflicting intervals, although it may also be argued that they are not. </p>

<h3>Conflict Intervals in Raku</h3>

<p>If you have a relatively large number of intervals, checking sequentially each interval with every preceding interval may turn out to be costly. So I preferred to implement a hash containing each value of the interval preceding ranges, since hash lookup is very efficient. Of course, this might be a problem for extremely large numbers of intervals (or extremely large intervals), as we may run out of memory. However, in real life situations, we can usually have an idea of the size of the input, and design our algorithm accordingly. </p>

<pre><code>use v6;

my @intervals = (1,4), (3,5), (6,8), (12, 13), (3,20);
my %vals;
my @conflicts;
for @intervals -&gt; $interv {
    my $overlap = False;
    my ($st, $end) = $interv[0,1];
    for $st..$end -&gt; $i {
        $overlap = True and next if %vals{$i}:exists;
        %vals{$i} = 1;
    }
    push @conflicts, $interv if $overlap;
}
say @conflicts;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./conflict_intervals.raku
[(3 5) (3 20)]
</code></pre>

<h3>Conflict Intervals in Perl</h3>

<p>This Perl solution is a port to Perl of the Raku solution above and is based on the same assumptions regarding the size of the input data.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @intervals = ([1,4], [3,5], [6,8], [12, 13], [3,20]);
my %vals;
my @conflicts;
for my $interv (@intervals) {
    my $overlap = 0;
    my ($st, $end) =  @$interv[0..1];
    for my $i ($st..$end) {
        $overlap = 1, next if exists $vals{$i};
        $vals{$i} = 1;
    }
    push @conflicts, $interv if $overlap;
}
say join ", ", @$_ for @conflicts;
</code></pre>

<p>This script displays the following output:</p>

<p>$ perl ./conflict_intervals.pl
    3, 5
    3, 20</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on September 5, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 128</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-128-1ng1" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-128/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-128/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-1-maximum-submatrix"&gt;
  &lt;/a&gt;
  TASK #1 › Maximum Sub-Matrix
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;You are given m x n binary matrix having 0 or 1.&lt;/p&gt;

&lt;p&gt;Write a script to find out maximum sub-matrix having only 0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;This is similar to the second task in &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/#TASK2"&gt;Challenge 126&lt;/a&gt;, so a lot of code comes from that.&lt;/p&gt;

&lt;p&gt;I take input from STDIN, so a file can be piped in to provide the input. Like with challenge 126, I get all the &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; from the input file and check the rows are of the same length.&lt;/p&gt;

&lt;p&gt;I then go through each cell, considering that as the top left of the smaller matrix. If that value is &lt;code&gt;1&lt;/code&gt;, I move to the next cell.&lt;/p&gt;

&lt;p&gt;Now that we have the top left of a smaller matrix, we need to work out what matrices we can make. This is a little complicated, so strap yourself in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the current row, we calculate how many positions to the right we can move before we hit a one or the end of the row. This is the &lt;code&gt;$width&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;When then repeat this for the second row (if that is a &lt;code&gt;0&lt;/code&gt;), and count the positions to the right before we hit a one or the maximum matches from the first row (the &lt;code&gt;$max_width&lt;/code&gt; value).&lt;/li&gt;
&lt;li&gt;We repeat this for subsequent rows, until we reach the last row or a one. &lt;/li&gt;
&lt;li&gt;For each row, we calculate the size of the inner matrix. If it's larger than any previous found matrix, we update the &lt;code&gt;$best_width&lt;/code&gt; and &lt;code&gt;$best_height&lt;/code&gt; values. Both the width and height are positions down/rightward from the top left, so we add one when doing these comparisons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we use the best_width and best_height values to show the output in the appropriate format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;My result from the first example differs from that provided in the task. Turns out there is both a 2 × 3 and a 3 × 2 solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-1.pl &amp;lt; example1.txt 
[ 0 0 ]
[ 0 0 ]
[ 0 0 ]

$ ./ch-1.pl &amp;lt; example2.txt 
[ 0 0 ]
[ 0 0 ]
[ 0 0 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#task-2-minimum-platforms"&gt;
  &lt;/a&gt;
  TASK #2 › Minimum Platforms
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;You are given two arrays of arrival and departure times of trains at a railway station.&lt;/p&gt;

&lt;p&gt;Write a script to find out the minimum number of platforms needed so that no train needs to wait.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;One thing that is not clarified is if a train arrives the same time as another one departs, does this require one platform or two? I've made the assumption that two platforms are required. The wonderful people at &lt;a href="https://www.transport.nsw.gov.au/sydneytrains"&gt;Sydney Trains&lt;/a&gt; would just hold up the second train, but that's a different story.&lt;/p&gt;

&lt;p&gt;I then broke down the task into the following steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take anything that looks like a time, and put it into the &lt;code&gt;@times&lt;/code&gt; array.&lt;/li&gt;
&lt;li&gt;Pair up the arrival times with the matching departure time, and put them in the &lt;code&gt;@trains&lt;/code&gt; array.

&lt;ul&gt;
&lt;li&gt;I also turn the HH:MM format to minutes since midnight.&lt;/li&gt;
&lt;li&gt;If a train appears to depart before it arrives, it means that the time spans midnight. In this scenario, I treat it as two separate trains, one from arrival to 11:59pm and one from midnight to departure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I set the &lt;code&gt;@platform&lt;/code&gt; array to be 1440 occurrences of 0, indicating the number of platforms used at that minute.&lt;/li&gt;
&lt;li&gt;I then work through every minute of every train, and add one to the required platforms for that minute.&lt;/li&gt;
&lt;li&gt;Finally I get the maximum number of platforms required, and display that value.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ./ch-2.pl "(11:20, 14:30)" "(11:50, 15:00)"
1

$ ./ch-2.pl "(10:20, 11:00, 11:10, 12:20, 16:20, 19:00)" "(10:30, 13:20, 12:40, 12:50, 20:20, 21:20)"
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-128-1ng1</id>
    <published>2021-08-30T11:04:31Z</published>
    <updated>2021-08-30T11:04:31Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#527 - New school-year?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/527.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The number of posts has been really low in the last couple of weeks. I really hope that with the new school-year in the northern hemisphere, we'll see an uptick in Perl-related content.</p>
<p>Other:</p>
<p>I just saw a Tweet explaining why the person does not wear a mask. He writes because he is vaccinated he isn't likely to be infected and <b>he accepts the risks</b>. Well, I really try to avoid arguing with strangers on the Internet so I did not write to him, but basically he said that <b>he accepts the risk of endangering others</b>.</p>
<p>In reality he spread two types of viruses. Potentially he spreads the Covid19 virus and for sure he spreads the idea that not caring for others is acceptable. For one, people who are unsure about the masks, seeing him without a mask will more likely stop wearing masks too.</p>
<p>Get vaccinated if you can and wear a mask when among people!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/527.html</id>
    <published>2021-08-30T10:00:00Z</published>
    <updated>2021-08-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The ephemeral miniconf - Stephane Gigandet</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-314d" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#speaker-announcement-stephane-gigandet"&gt;
  &lt;/a&gt;
  Speaker announcement: Stephane Gigandet
&lt;/h1&gt;

&lt;p&gt;If there is one giant Perl flagship that has almost no echo in Perl community... it is &lt;a href="https://world.openfoodfacts.org/"&gt;Open Food Facts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a project that has a social scope and an impact on society. But stop, I don't want to say one more word, I let this task to Stephane!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJzCSxyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwxksw5s6ud9znsq0daw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJzCSxyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwxksw5s6ud9znsq0daw.jpg" alt="Stephane Gigandet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I discovered Stephane at TPRCiC where he delivered a &lt;a href="https://youtu.be/imugl2dSdnU"&gt;lightning talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stephane is not only focused on Open Food Facts but he is the creator a several projects including blog hosting platforms or website for kids.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk"&gt;
  &lt;/a&gt;
  Talk
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTTAbExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94hc70rqt17j2c6c5rc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTTAbExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94hc70rqt17j2c6c5rc4.png" alt="OpenFoodFacts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you guessed, Stephane Gigandet will talk about &lt;a href="https://world.openfoodfacts.org/"&gt;Open Food Facts&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-314d</id>
    <published>2021-08-30T07:38:25Z</published>
    <updated>2021-08-30T07:38:25Z</updated>
    <category term="perl"/>
    <category term="raku"/>
  </entry>
  <entry>
    <title>TWC 127: Intersection on a Sunday Afternoon</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jared_martin/2021/08/twc-127-intersection-on-a-sunday-afternoon.html"/>
    <id>tag:blogs.perl.org,2021:/users/jared_martin//3494.10390</id>
    <published>2021-08-30T01:07:10Z</published>
    <updated>2021-08-30T01:50:55Z</updated>
    <author>
        <name>Jared Martin</name>
        
    </author>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jared_martin/">
        <![CDATA[<p>This is my entry for <h2><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127#TASK1">The Weekly Challenge, week 127</a></h2></p>

<p><strong>Task 1, "Disjoint Sets"</strong> was basically <a href="https://www.perlmonks.org/?node_id=898542">something I've done before somewhere else</a>. In fact, what I'm using is overkill for just determining if two sets intersect. I imagine most people would probably use the <a href="https://perldoc.perl.org/perlfaq4#How-do-I-compute-the-difference-of-two-arrays?-How-do-I-compute-the-intersection-of-two-arrays?">FAQ answer</a>. However, I'm a fan of what cardinal LanX of Perl Monks fame was trying to do in <a href="https://www.perlmonks.org/?node_id=906065">making set intersection a more "organic" operation</a>. I don't know how much those ideas developed, however, so I'll be looking at the other solutions to see if there's anything new.</p>

<p>I actually did use my perlmonks code on real problem a few years ago, in modified form. It does the trick pretty quickly compared to other approaches. Thanks perl hashing!</p>

<p>You can find my code for Task #1 <strong><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-127/jaredor/perl/ch-1.pl">here</a></strong>.</p>

<p><strong>Task 2, "Conflict Intervals"</strong> could have been turned into a repeat of Task 1 if you replaced all the integer intervals with the subset of integers they represented. (So, for example, interval (3, 7) would become subset (3, 4, 5, 6, 7).) But this time I am sure I went with the thundering herd and just did boundary checking on ranges against each other. As a nod to efficiency, I used first instead of grep at one point, but by the time you really need to use first instead of grep, you probably should consider the other big efficiency concern: Every interval is being compared to each interval that was in the list before it.</p>

<p>Conceivably, if you have hundreds or thousands of intervals and if you know that intersections will be high, you might gain some advantage by replacing intervals that intersect with their union. So, for example, if you have (1,3) and (2, 5) as intervals, you can replace them with the equivalent interval, (1,5). Then as you go through the rest of the list you don't have to check as many cases.</p>

<p>But the examples are small and there is no test data set to run against, so it's probably best to exercise the old noodle with a little problem and not soak up too much of your free time with making it a bigger problem. Or so I say ;-)</p>

<p>You can find my code for Task #2 <strong><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-127/jaredor/perl/ch-2.pl">here</a></strong></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Conflicting Lists and Intervals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/29#pwc127" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two sets with unique numbers. Write a script to figure out if they are 
disjoint.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub disjoint{
    my($list1, $list2) = @_;
    my @a = map { my $n = $_; grep  $n == $_ , @{$list2} }  @{$list1};
    return boolean(@a == 0);#boolean() used for better stringification
}

MAIN:{
    my(@S1, @S2);
    @S1 = (1, 2, 5, 3, 4);
    @S2 = (4, 6, 7, 8, 9);
    print disjoint(\@S1, \@S2) . "\n";
    @S1 = (1, 3, 5, 7, 9);
    @S2 = (0, 2, 4, 6, 8);
    print disjoint(\@S1, \@S2) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I cannot think of a way of determining conflicts between these two lists which is all that
more efficient than comparing them in this way. Sorting helps a little in some cases but 
if the overlapping element(s) are at the end of the sorted list you need to traverse the 
entire list anyway. Sorting would help the average case and since we need only find one 
overlapping element and then stop looking this would have some noticeable effect in the 
case of very large lists. But then I'd have to write a for-loop in order to break out of
the loop early and instead I wanted to experiment with this &lt;code&gt;grep&lt;/code&gt; inside a &lt;code&gt;map&lt;/code&gt;
construct! This worked without too much hassle, the only consideration really being to 
assign map's list value alias &lt;code&gt;$_&lt;/code&gt; to a variable so as to not conflict with grep's &lt;code&gt;$_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;code&gt;boolean()&lt;/code&gt; is just to make sure that a 1 or 0 is printed as the final result.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of intervals. Write a script to determine conflicts between the 
intervals.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub conflicts{
    my @intervals = @_;
    my @conflicts;
    @intervals = sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] } @intervals;
    {
        my $interval = pop @intervals;
        my($i, $j) = @{$interval};
        for $interval (@intervals){
            my($m, $n) = @{$interval};
            do { unshift @conflicts, [$i, $j]; last } if $i &gt;= $m &amp;&amp; $i &lt;= $n;
        }
        redo if @intervals;
    }
    return @conflicts;
}

MAIN:{
    my(@Intervals);
    @Intervals = ([1, 4], [3, 5], [6, 8], [12, 13], [3, 20]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
    @Intervals = ([3, 4], [5, 7], [6, 9], [10, 12], [13, 15]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[3, 5] [3, 20]
[6, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The examples given in the problem statement are with the &lt;code&gt;[minimum, maximum]&lt;/code&gt; intervals 
sorted by the maximum value. This makes the problem a bit easier since then we need only
check to see, when working down the sorted list, if the minimum is in one of the other
intervals.&lt;/p&gt;

&lt;p&gt;Since it isn't totally clear if this is something that should be assumed for all inputs
I added a sort in &lt;code&gt;conflicts()&lt;/code&gt; to ensure this is the case.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127/"&gt;Challenge 127&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25818.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25919.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/DisjointSets.html"&gt;Disjoint Sets&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc127</id>
    <published>2021-08-29T17:18:00-04:00</published>
    <updated>2021-08-29T17:18:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4642420324155130713</id>
    <published>2021-08-28T14:39:00.000+02:00</published>
    <updated>2021-08-28T14:39:26.860+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclvi) 7 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049001&lt;/strong&gt; on 2021-08-22&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.048000 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.53&lt;/strong&gt; on 2021-08-26&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.52 was 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.22&lt;/strong&gt; on 2021-08-27&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.21 was 1 month, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2021-08-25&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9010&lt;/strong&gt; on 2021-08-25&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9009 was 1 month, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.82' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::BDD::Cucumber&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Feature-complete Cucumber-style testing in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.82&lt;/strong&gt; on 2021-08-23&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.81 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.606' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.606&lt;/strong&gt; on 2021-08-27&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.604 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4642420324155130713/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclvi-7-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4642420324155130713"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4642420324155130713"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclvi-7-great-cpan-modules-released.html" title="(ccclvi) 7 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6718462377948208344</id>
    <published>2021-08-28T14:36:00.001+02:00</published>
    <updated>2021-08-28T14:36:28.787+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxii) metacpan weekly report - Scalar::List::Utils</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 33&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/28 12:35:57 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::SPF::Iterator" target="_blank"&gt;Mail::SPF::Iterator&lt;/a&gt; - iterative SPF lookup&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor" target="_blank"&gt;Class::Accessor&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=138)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=200)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Strptime" target="_blank"&gt;DateTime::Format::Strptime&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::DumpTrace" target="_blank"&gt;Devel::DumpTrace&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::PDB" target="_blank"&gt;Devel::PDB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eval::WithLexicals" target="_blank"&gt;Eval::WithLexicals&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::All" target="_blank"&gt;IO::All&lt;/a&gt; (+1=66)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Declare" target="_blank"&gt;Keyword::Declare&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kossy" target="_blank"&gt;Kossy&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mercury" target="_blank"&gt;Mercury&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=461)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Session" target="_blank"&gt;MojoX::Session&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::FollowPBP" target="_blank"&gt;MooseX::FollowPBP&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Variables" target="_blank"&gt;Perl6::Variables&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown::Github" target="_blank"&gt;Pod::Markdown::Github&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::PID::File" target="_blank"&gt;Proc::PID::File&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RT::Extension::Memo" target="_blank"&gt;RT::Extension::Memo&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+2=155)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::CleanNamespaces" target="_blank"&gt;Test::CleanNamespaces&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Vars" target="_blank"&gt;Test::Vars&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::Fast" target="_blank"&gt;URI::Fast&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UV" target="_blank"&gt;UV&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Feed" target="_blank"&gt;XML::Feed&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6718462377948208344/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6718462377948208344"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6718462377948208344"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxii-metacpan-weekly-report.html" title="(cdlxxxii) metacpan weekly report - Scalar::List::Utils"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2717803860377742734</id>
    <published>2021-08-28T14:34:00.003+02:00</published>
    <updated>2021-08-28T14:34:26.271+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(diii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-08-28 12:19:35 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68913553" target="_blank"&gt;Modify default Controller/Model paths in Mojolicious&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68890205" target="_blank"&gt;How to check availability of 64-bit integers (for `use integer`)?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68907848" target="_blank"&gt;Perl: How can I edit the structure of a shared_clone?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68893773" target="_blank"&gt;Need explanation for `~0` vs. `2**64` with and without `use integer`&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68889115" target="_blank"&gt;timeout not working in Perl script for function for some domains I'm pinging&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68891238" target="_blank"&gt;perl DBI Oracle UTF8 Charset expected&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68873246" target="_blank"&gt;How does `print readline` differ from `$line = readline; print $line`?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68894228" target="_blank"&gt;How to use "_" underscore in foreach loop to build range&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68897720" target="_blank"&gt;Passing multiple Hashes as argument to Perl subroutine ( Perl 5.16 / Perl 5.30)&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68959716" target="_blank"&gt;How to rearrange dates of the month when they span across end of current month to beginning of next month&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2717803860377742734/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/diii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2717803860377742734"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2717803860377742734"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/diii-stackoverflow-perl-report.html" title="(diii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Object::Pad review Yuki Kimoto's 2021-08-23 - Constructor argument customize</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-23---constructor-argument-customize.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10379</id>
    <published>2021-08-23T10:46:49Z</published>
    <updated>2021-08-23T11:20:15Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<ul>
  <li><a href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-21---constructor-argument.html">Object::Pad review Yuki Kimoto's 2021-08-21 - Constructor default argument</a></li>
</ul>

<p>In this time, I review constructor argument customize. BUILDARGS can customize contructer argument. It is good enough for me. I think existing library that receive hash references as argument will have a slight performance penalty because a BUILDARGS function call.</p>

<p><br />
<b>Point-&gt;new($x, $y)</b></p>

<pre>
use strict;
use warnings;

<p>use Object::Pad;<br />
 <br />
class Point {<br />
   has $x :param = 0;<br />
   has $y :param = 0;<br />
   <br />
   sub BUILDARGS {<br />
     my ($class, $_x, $_y) = @_;<br />
     <br />
     return (x => $_x, y => $_y);<br />
   }<br />
 <br />
   method move {<br />
      my ($dX, $dY) = @_;<br />
      $x += $dX;<br />
      $y += $dY;<br />
   }<br />
 <br />
   method describe {<br />
      print "A point at ($x, $y)\n";<br />
   }<br />
}</p>

<p>{<br />
  my $x = 5;<br />
  my $y = 10;<br />
  my $point = Point->new($x, $y);<br />
  $point->describe;<br />
}</p>

</pre>

<p><b>Point-&gt;new({x => $x, y => $y})</b></p>

<pre>
use strict;
use warnings;

<p>use Object::Pad;<br />
 <br />
class Point {<br />
   has $x :param = 0;<br />
   has $y :param = 0;<br />
   <br />
   sub BUILDARGS {<br />
     my ($class, $args) = @_;<br />
     <br />
     return (%$args);<br />
   }<br />
 <br />
   method move {<br />
      my ($dX, $dY) = @_;<br />
      $x += $dX;<br />
      $y += $dY;<br />
   }<br />
 <br />
   method describe {<br />
      print "A point at ($x, $y)\n";<br />
   }<br />
}</p>

<p>{<br />
  my $x = 5;<br />
  my $y = 10;<br />
  my $point = Point->new({x => $x, y => $y});<br />
  $point->describe;<br />
}</p>

</pre>
]]>
        
    </content>
</entry>
  <entry>
    <title>Object::Pad review Yuki Kimoto's 2021-08-21 - Constructor default argument</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-21---constructor-argument.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10376</id>
    <published>2021-08-21T06:05:17Z</published>
    <updated>2021-08-23T11:20:00Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I start to review Paul Evans's <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> from my personal thinking.</p>

<p>Latest years, Perl core teams positively try to implement Object-Oriented feature to Perl core. I hope my review helps a little.</p>

<p>First time is constructor default arguments.</p>

<pre>
use Object::Pad;
 
class Point {
   has $x :param = 0;
   has $y :param = 0;
 
   method move {
      my ($dX, $dY) = @_;
      $x += $dX;
      $y += $dY;
   }
 
   method describe {
      print "A point at ($x, $y)\n";
   }
}
 
{
  my $point = Point->new(x => 5, y => 10);
  $point->describe;
}

<p># Unsupported hash reference<br />
# I think a little time<br />
# Benefit: a little fast because type check isn't done<br />
{<br />
  my $args = {x => 5, y => 10};<br />
  my $point = Point->new($args);<br />
  $point->describe;<br />
}<br />
# Need the following. Not too bad.<br />
# I can accept hash reference argument feature is none.<br />
{<br />
  my $args = {x => 5, y => 10};<br />
  my $point = Point->new(%$args);<br />
  $point->describe;<br />
}<br />
</pre></p>]]>
        
    </content>
</entry>
  <entry>
    <title>#526 - Politics in Programming?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/526.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I came across a blog post by Curtis titled <a href="https://ovid.github.io/blog/politics-in-programming.html">Politics in Programming</a>. As is always the case, it touched on sensitive topics. You may or may not agree with his point of view but it is worth a read, IMHO.</p>
<p>Let me confess, ever since Cor was renamed to Corinna, I always double check whether there is a double "r" or a double "n" in the name. I get it wrong all the time. Joking apart, I am very happy that Corinna is being discussed on so many different public platforms, a BIG thanks to Curtis and his team.</p>
<p>There was another topic discussed on Facebook, "Data structures in Perl". It brought back some good old memories of when I was first introduced to Perl. I came from a C background, so you would assume the transition would have been smooth. That wasn't the case for me. I had a hard time getting my head around "references" in Perl. Once I passed that hurdle, the next disaster was waiting for me, i.e. "regex". I had no clue about it before. It took me a while to get hold of it. Even after 22 years of working with Perl, I still find regex magic that I have never seen before, thanks to Abigail contributions to <a href="https://github.com/manwar/perlweeklychallenge-club">the weekly challenge</a>. The next big thing I dealt with after regex was "network programming". The best book to understand the subject is <a href="https://www.oreilly.com/library/view/network-programming-with/0201615711/">Network Programming with Perl</a> by Lincoln D. Stein, imho.</p>
<p>Did you notice, I didn't mention OO in Perl yet?</p>
<p>It is only because I got the opportunity to actually use OO programming very late in my career. The first book that I read on the subject was <a href="https://www.manning.com/books/object-oriented-perl">Object Oriented Perl</a> by Damian Conway. It was the first book by Damian that I read and I completely fell in love with it. Of course, how can I miss the next one by Damian, <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Perl Best Practices</a>. I am happy to see Damian giving a thumbs up to the Corinna project headed by Curtis in his recent blog post, <a href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html">A dream realized</a>. About the future of OO in core Perl, I am not too worried as it is in safe hands now.</p>
<p>A fellow member of Team PWC, Adam Russell, started a Discord server for the purposes of discussing more academic Computer Science type topics, as they relate to Perl. If you are keen to join then please follow the <a href="https://discord.gg/Ng9nrdDg">invitation</a>.</p>
<p>School holidays are coming to an end soon, at least in the UK, so enjoy it while it lasts. Don't forget to keep a safe distance and use a mask in public places. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/526.html</id>
    <published>2021-08-23T10:00:00Z</published>
    <updated>2021-08-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Count Numbers / MineSweeper game: The Weekly Challenge 126</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/22#pwc126" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to print count of numbers from 1 to 
$N that don’t contain digit 1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub has_1{
    my($x) = @_;
    return 1 if $x =~ tr/1//d &gt; 0;
    return 0;   
}

sub count_with_1{
    my($n) = @_;
    my $x = 1;  
    my $count = 0; 
    {
        $count += has_1($x); 
        $x += 1;
        redo if $x &lt;= $n; 
    }
    return $count; 
}

sub count_without_1{
    my($n) = @_;
    return $n - count_with_1($n);  
}

MAIN:{
    my $N;
    $N = 15;
    print count_without_1($N) . "\n"; 
    $N = 25;
    print count_without_1($N) . "\n"; 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
13
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Given the flexibility and richness of Perl there were many choices of how to determine the
presence of a '1'. I decided to use &lt;code&gt;tr&lt;/code&gt; which will helpfully return the number of changes
made. In this case, what is returned is the number of 1's deleted. If this number is 
greater than zero then we know a &lt;code&gt;1&lt;/code&gt; was found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a rectangle with points marked with either x or *. Please consider the x as
a land mine. Write a script to print a rectangle with numbers and x as in the Minesweeper 
game.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub initialize_grid{
    my($m, $n) = @_;
    my @grid; 
    for my $i (0 .. $m - 1){
        for my $j (0 .. $n - 1){
            $grid[$i][$j] = "*";   
            $grid[$i][$j] = "x" if rand() &lt;= (1 / 3);   
        }  
    }  
    return @grid; 
}

sub make_grid{
    my($m, $n) = @_;
    my @initial_grid = initialize_grid($m, $n);  
    my @grid = map {[@$_]} @initial_grid; 
    for my $i (0 .. $m - 1){ 
        for my $j (0 .. $n - 1){
            unless($grid[$i][$j] eq "x"){
                my $mine_count = 0;
                $mine_count++ if $i &gt;= 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i - 1][$j - 1] eq "x"; 
                $mine_count++ if $i &gt;= 1 &amp;&amp; $grid[$i - 1][$j] eq "x"; 
                $mine_count++ if $i &gt;=1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i - 1][$j + 1] eq "x"; 
                $mine_count++ if $j &gt;= 1 &amp;&amp; $grid[$i][$j - 1] eq "x"; 
                $mine_count++ if $j &lt; $n - 1 &amp;&amp; $grid[$i][$j + 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i + 1][$j - 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $grid[$i + 1][$j] eq "x" ; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i + 1][$j + 1] eq "x"; 
                $grid[$i][$j] = $mine_count; 
            } 
        }  
    } 
    return (\@initial_grid, \@grid); 
}  

sub print_grid{
    my @grid = @_; 
    for my $row (@grid){
        print "\t" . join(" ", @{$row}) . "\n"  
    } 
} 

MAIN:{
    my($m, $n) = @ARGV;
    my($initial_grid, $grid) = make_grid($m, $n);  
    print "Input:\n"; 
    print_grid(@{$initial_grid});      
    print "Output:\n"; 
    print_grid(@{$grid});      
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 5 10
Input:
        x x * * * * x * * x
        * * x * x x x * x *
        * * * * * * * * * *
        x * x x * * * * * x
        * * x * x * * * x *
Output:
        x x 2 2 2 4 x 3 2 x
        2 3 x 2 x x x 3 x 2
        1 3 3 4 3 3 2 2 2 2
        x 3 x x 2 1 0 1 2 x
        1 3 x 4 x 1 0 1 x 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The grid is randomly determined. Any cell has a 1/3 chance of being a mine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code for finding all adjacent cells, if they exist, is largely taken from my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/09/13#pwc077"&gt;solution to Challenge 077&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the tedious business of finding the adjacent cells is done counting up the "mines" 
and labelling the cells is straightforward!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/"&gt;Challenge 126&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25295.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25444.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.minesweeperonline.net/history.php"&gt;History of Minesweeper&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc126</id>
    <published>2021-08-22T17:39:00-04:00</published>
    <updated>2021-08-22T17:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Raku CI Bot grant repot for July 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-ci-bot-grant-report-2021-07"/>
  <id>tag:news.perlfoundation.org,2021-08-22:/post/raku-ci-bot-grant-report-2021-07</id>
  <published>2021-08-22T08:51:08</published>
  <updated>2021-08-22T08:51:08</updated>
  <summary>
  <![CDATA[
     Patrick Böker has submitted the following grant progress report for his Raku CI Bot grant: In July I worked on the GitHub and OBS integrations. I decided to work on OBS first and tackle Azure once OBS and the system as a whole works. I implemented logic to parse GitHub hook messages and add them to an internal work queue. On the OBS side I added functionality to start test 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Patrick Böker has submitted the following grant progress report for his Raku CI Bot grant:</p>

<hr />

<p>In July I worked on the GitHub and OBS (the Open Build Service) integrations. 
I decided to work on OBS first and tackle Azure once OBS and the system as a 
whole works.</p>

<p>I implemented logic to parse GitHub hook messages and add them to an internal 
work queue. On the OBS side I added functionality to start test runs and query 
for build results. Both accompanied by tests.</p>

<p>I am / will be on vacation for the most part of August. So I'll continue 
working on the Raku CI bot grant in September.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1556743972363638502</id>
    <published>2021-08-21T22:43:00.001+02:00</published>
    <updated>2021-08-21T22:43:53.474+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclv) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/CPANPLUS-0.9912' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CPANPLUS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Ameliorated interface to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9912&lt;/strong&gt; on 2021-08-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.9910 was 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.072&lt;/strong&gt; on 2021-08-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.071 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Keyword-Declare-0.001018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Keyword::Declare&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Declare new Perl keywords...via a keyword...named keyword &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001018&lt;/strong&gt; on 2021-08-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.001017 was 1 year, 6 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.56&lt;/strong&gt; on 2021-08-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.55 was 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210820&lt;/strong&gt; on 2021-08-21&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210723 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MAROS/MooseX-App-1.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MooseX::App&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write user-friendly command line apps with even less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.42&lt;/strong&gt; on 2021-08-15&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.41 was 2 years, 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.78 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.611' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.611&lt;/strong&gt; on 2021-08-18&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Tickit-0.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tickit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Terminal Interface Construction KIT &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.72&lt;/strong&gt; on 2021-08-18&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.71 was 1 year, 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1556743972363638502/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclv-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1556743972363638502"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1556743972363638502"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclv-9-great-cpan-modules-released.html" title="(ccclv) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4278560936122128670</id>
    <published>2021-08-21T22:41:00.002+02:00</published>
    <updated>2021-08-21T22:41:27.350+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxi) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 22&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/21 20:41:02 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::HTTP::Basic::DWIW" target="_blank"&gt;Dancer2::Plugin::Auth::HTTP::Basic::DWIW&lt;/a&gt; - HTTP Basic authentication plugin for Dancer2 that does what I want.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Template::Handlebars" target="_blank"&gt;Dancer2::Template::Handlebars&lt;/a&gt; - Dancer2 wrapper for Handlebars templating engine&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Device::Hue" target="_blank"&gt;Device::Hue&lt;/a&gt; - Perl module for the Philips Hue light system&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Integer::Partition" target="_blank"&gt;Integer::Partition&lt;/a&gt; - Generate all integer partitions of an integer&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MQSeries" target="_blank"&gt;MQSeries&lt;/a&gt; - Interface to IBM's MQSeries Product&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neo4j::Types" target="_blank"&gt;Neo4j::Types&lt;/a&gt; - Common Neo4j type system&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::MQTT" target="_blank"&gt;AnyEvent::MQTT&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Asterisk::AMI" target="_blank"&gt;Asterisk::AMI&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Always" target="_blank"&gt;Carp::Always&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Assert" target="_blank"&gt;Carp::Assert&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::XSAccessor" target="_blank"&gt;Class::XSAccessor&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=279)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::C" target="_blank"&gt;Inline::C&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=460)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=382)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Raisin" target="_blank"&gt;Raisin&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=171)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4278560936122128670/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4278560936122128670"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4278560936122128670"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxi-metacpan-weekly-report.html" title="(cdlxxxi) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>RakuAST Grant Report for June 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jnthn-rakuast-grant-report-2021-06"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/jnthn-rakuast-grant-report-2021-06</id>
  <published>2021-08-19T08:44:09</published>
  <updated>2021-08-19T08:44:09</updated>
  <summary>
  <![CDATA[
     Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's. Jonathan also gave a talk during the first Raku conference on the topic of RakuAST. It is a highly recommended watch. My work on RakuAST and the new RakuAST-based compiler frontend in June saw a further 40 test files from the Raku test suite start to pass in full. I 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's.</p>

<p>Jonathan also gave a talk during the first Raku conference <a href="https://conf.raku.org/talk/147">on the topic of RakuAST.</a> It is a highly recommended watch.</p>

<hr />

<p>My work on RakuAST and the new RakuAST-based compiler frontend in June
saw a further 40 test files from the Raku test suite start to pass in full.
I added RakuAST nodes and compilation to them for the following language
features:</p>

<ul>
<li>Regex back-references</li>
<li>Named regex captures of the form <code>$&lt;foo&gt;=[bar]</code></li>
<li>Regex sigspace</li>
<li>Substitutions (both for <code>s/x/y/</code> and <code>s[x] = 'y'</code> forms)</li>
<li>Postfix, prefix, and infix hyper ops</li>
</ul>

<p>I also did a number of other improvements:</p>

<ul>
<li>Added support for all regex adverbs to the <code>m//</code> and <code>rx//</code> AST nodes
(this came before substitutions, which were made to support the applicable
adverbs right away)</li>
<li>Added compilation of <code>@$foo</code> contextualizers (without parentheses)
to the existing RakuAST contextualizer nodes</li>
<li>Ensured that <code>/&lt;foo&gt;/</code> assertions in regexes find a lexical rule of
that name if it exists before looking for a method</li>
<li>Added support for default parameter values, both with the runtime
semantics and for introspection</li>
<li>Fixed various minor bugs in regex compilation</li>
<li>Reinstated more typed compilation error reporting</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
  <title>LibUV Final Grant Report by Paul Evans</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/libuv-grant-report-final"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/libuv-grant-report-final</id>
  <published>2021-08-19T08:36:19</published>
  <updated>2021-08-19T08:36:19</updated>
  <summary>
  <![CDATA[
     Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant. The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here. The latest release of UV version 2.000 indicates that this project is now fundamentally done. The CPAN version of UV, the libuv binding module, is now sufficiently complete and useable, to allow event systems and 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant.</p>

<p>The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here.</p>

<hr />

<p>The latest release of UV version 2.000 indicates that this project is
now fundamentally done. The CPAN version of UV, the libuv binding
module, is now sufficiently complete and useable, to allow event
systems and other similar modules to make use of the abstractions
provided by libuv.</p>

<p>It's unlikely that most programs would choose to operate directly with
UV itself, but rather via some higher-level event system. There are UV
adapter modules for IO::Async (IO::Async::Loop::UV), Mojo
(Mojo::Reactor::UV), and Future::IO (Future::IO::Impl::UV) at least.</p>

<p>The UV module certainly wraps much of what libuv has to offer, but
there are still some parts missing. libuv can watch filesystems for
changes of files, and provides asynchronous filesystem access access
functions - both of these are currently missing from the Perl binding.
Threadpools are an entire concept that doesn't map very well to the
Perl language, so they are absent too. Finally, libuv lists an entire
category of "miscellaneous functions", most of which are already
available independently in Perl, so there seems little point to
wrapping those provided by libuv.</p>

<p>Finally, we should take note of one thing that doesn't work - the
UV::TCP-&gt;open and UV::UDP-&gt;open functions when running on Windows. The
upshot here is that you cannot create TCP or UDP sockets in your
application independently of libuv and then hand them over to be
handled by the library; this is not permitted. This is because on
Windows, there are fundamentally two different kinds of sockets that
require two different sets of API to access them - ones using
WSA_FLAG_OVERLAPPED, and ones not. libuv needs that flag in order to
perform event-based IO on sockets, and so it won't work with sockets
created without it - which is the usual kind that most other modules,
and perl itself, will create. This means that on Windows, the only
sockets you can use with the UV module are ones created by UV itself -
such as by asking it to connect out to servers, or listen and accept
incoming connections. Fortunately, this is sufficient for the vast
majority of applications.</p>

<p>While approaching the end of this project, I found that there is a
shortage of Win32 experts around Perl. It was difficult to to get some
expert opinion on the Windows-specific testing failures that were
holding back a complete release of this module, as it was unclear
whether the things being tested were supposed to be working or not.</p>

<p>I would like to finish up by saying thanks to The Perl Foundation for
funding me to complete this project.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#525 - Vacation time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/525.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>it seems it is vacation time for many of the authors as the number of posts is smaller than usual.</p>
<p>Enjoy your vacation and remember if you can get vaccinated and in any case, even if you are already vaccinated and even if your country/state/city does not require you to put on a mask, put it on when among people! It is just a small piece of fabric and it might save the life of some other person.</p>
<p>Sure, you might not be contagious, but by having a mask on you also encourage others to put on their mask.</p>
<p>Enjoy your time here!</p></div>
    </content>
    <id>https://perlweekly.com/archive/525.html</id>
    <published>2021-08-16T10:00:00Z</published>
    <updated>2021-08-16T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Returning multiple values or a list from a subroutine in Perl</title>
  <summary type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></summary>
  <updated>2021-08-15T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/returning-a-list-from-a-subroutine"/>  <id>https://perlmaven.com/returning-a-list-from-a-subroutine</id>
  <content type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#524 - Object::Pad</title>
    <link rel="alternate" href="https://perlweekly.com/archive/524.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>It is no longer a secret that I am the biggest fan of the <a href="https://github.com/Ovid/Cor/wiki">Corinna</a> project, headed by Curtis Poe. The motto of the project tells you everything you need to know about it, "Good enough" is not good enough. Having said that we still have to wait for the final push by the team behind the project.</p>
<p>What shall we do in the meantime?</p>
<p>Well, we are encouraged to give <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> a try. Paul Evans is the man behind this distribution. A fellow member of Team PWC, Cheok-Yin Fung, wrote a blog post, <a href="http://blogs.perl.org/users/c_y_fung/2020/09/oo-linked-lists-in-perl.html">OO linked lists in Perl</a>, last year (25th Sep 2020 to be precise). She updated this blog post recently and added another implementation using Object::Pad. This is what I call serious hacking. I have one more similar story to share with you as shared in a <a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/">blog post</a> by Mark Gardner. In this post, Mark shared his experience dealing with Object::Pad. With so much going on about Object::Pad, I gave myself a week to get things in place. But the week went past without any results unfortunately. Don't get me wrong, I am not giving up yet. I will get my hands dirty and share my experience with everyone. In fact, Dave Cross, suggested I should include Object::Pad in the book I am currently working on. Currently the book has solutions implemented in traditional OO and Moo only. I will definitely add Object::Pad in the second revision soon after, promise.</p>
<p>Do you have any stories to share with regard to Object::Pad? If yes then please do share them with us. Or if you haven't tried it then why not give it a go and make-over your existing project to use Object::Pad.</p>
<p>Last but not least, did you attend <a href="https://conf.raku.org/">The Raku Conference</a>? If not then you can still watch the recordings of the three-day event. I also gave a short talk (30 minutes) on day three about "Making of Raku Developer".</p>
<p>Enjoy the school holiday period with your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/524.html</id>
    <published>2021-08-09T10:00:00Z</published>
    <updated>2021-08-09T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Binary search in Perl array</title>
  <summary type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></summary>
  <updated>2021-08-08T10:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/binary-search-in-perl-array"/>  <id>https://perlmaven.com/binary-search-in-perl-array</id>
  <content type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#523 - How to improve your Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/523.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>There were not many posts this week, but some of them were really interesting.</p>
<p>Personally I got a bit overwhelmed with work. It is very interesting that there are organizations where people don't know how to use git properly, where they hardly have any tests and no CI is running, but they already have Kubernetes set up because some consultant thought that would be cool to use it.</p>
<p>On one hand it makes me angry that people don't introduce testing, CI, and CD early in the development process. It would be a lot cheaper, smoother and faster for them, but on the other hand I also like trying to figure out how things happen to work. Sometimes, it seems, by total chance.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/523.html</id>
    <published>2021-08-02T10:00:00Z</published>
    <updated>2021-08-02T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Ugly Numbers / Square Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/01#pwc123" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt;= 1. Write a script to find the $nth Ugly Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_ugly{
    my($x) = @_; 
    for my $factor (prime_factor($x)){
        return false if $factor != 2 &amp;&amp; $factor != 3 &amp;&amp; $factor !=5; 
    }
    return true; 
}

sub nth_ugly{
    my($n) = @_;  
    return 1 if $n == 1; 
    my $ugly_count = 1; 
    my $i = 1;  
    do{
        $i++;
        $ugly_count++ if is_ugly($i);   
    }while($ugly_count != $n);
    return $i;    
} 

MAIN:{
    my($N);
    $N = 7; 
    print nth_ugly($N) . "\n"; 
    $N = 10; 
    print nth_ugly($N) . "\n"; 
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I also worked this problem in Prolog and C++ and, unsurprisingly, the Perl code is the 
shortest. All three solutions followed the same approach but Perl's syntax is naturally 
less verbose without making comprehension of the code more difficult.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given co-ordinates for four points. Write a script to find out if the given 
four points form a square.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;  
use Math::GSL::Vector;

sub unique{
    my %seen;
    return grep {!$seen{$_}++} @_;
} 

sub is_square{
    my @points = @_;
    ##
    # Definitely a square if there are only 2 x and 2 y values. 
    ##
    my @x = unique(map {$_-&gt;[0]} @points);  
    my @y = unique(map {$_-&gt;[1]} @points);  
    return true if @x == 2 &amp;&amp; @y == 2;
    ##
    # sort the points and compute side lengths  
    ##  
    my @sorted_x = sort {$a-&gt;[0] &lt;=&gt; $b-&gt;[0]} @points;  
    my @sorted_y = sort {$a-&gt;[1] &lt;=&gt; $b-&gt;[1]} @points;  
    my($s, $t, $u, $v) = ($sorted_y[@sorted_y - 1], $sorted_x[@sorted_x - 1], $sorted_y[0], $sorted_x[0]);    
    return false if $s-&gt;[0] + $u-&gt;[0] != $t-&gt;[0] + $v-&gt;[0];  
    return false if $s-&gt;[1] + $u-&gt;[1] != $t-&gt;[1] + $v-&gt;[1];  
    return false if $s-&gt;[1] - $u-&gt;[1] != $t-&gt;[0] - $v-&gt;[0];  
    ##
    # compute angles 
    ##
    my $dv_st = new Math::GSL::Vector([$s-&gt;[0] - $t-&gt;[0], $s-&gt;[1] - $t-&gt;[1]]); 
    my $dv_tu = new Math::GSL::Vector([$t-&gt;[0] - $u-&gt;[0], $t-&gt;[1] - $u-&gt;[1]]); 
    my $dv_uv = new Math::GSL::Vector([$u-&gt;[0] - $v-&gt;[0], $u-&gt;[1] - $v-&gt;[1]]); 
    my $dv_vs = new Math::GSL::Vector([$v-&gt;[0] - $s-&gt;[0], $v-&gt;[1] - $s-&gt;[1]]); 
    return false if $dv_st * $dv_tu != 0;
    return false if $dv_tu * $dv_uv != 0;
    return false if $dv_uv * $dv_vs != 0;
    return true;  
}



MAIN:{
    my @points;
    @points = ([10, 20], [20, 20], [20, 10], [10, 10]);  
    print is_square(@points) . "\n";  
    @points = ([12, 24], [16, 10], [20, 12], [18, 16]);  
    print is_square(@points) . "\n";  
    @points = ([-3, 1], [4, 2], [9, -3], [2, -4]);  
    print is_square(@points) . "\n";  
    @points = ([0, 0], [2, 1], [3, -1], [1, -2]);  
    print is_square(@points) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The logic of determining if the points determine a square is clear to most people familiar
with geometry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are there only two each of X and Y co-ordinates? Then that is enough to establish that
we have a square.
&lt;/li&gt;
&lt;li&gt;Otherwise, make sure the side lengths are all equivalent and that the angles between the
sides are all 90 degrees.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code in &lt;code&gt;is_square()&lt;/code&gt; works through that logic with multiple exit points set up along 
the way. Perhaps this is a bit odd looking but I have been doing a lot of logic 
programming in Prolog recently and thought to give a somewhat more logical style to this
perl solution to this problem. Developing a more logical style for Perl is a bit of a work
in progress for me, I will admit!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;unique&lt;/code&gt; function (and it's clever use of &lt;code&gt;grep&lt;/code&gt;!) was taken from a 
&lt;a href="https://perlmaven.com/unique-values-in-an-array-in-perl"&gt;PerlMaven article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/"&gt;Challenge 123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24078.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24559.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Rhombus.html"&gt;Rhombus&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc123</id>
    <published>2021-08-01T17:00:00-04:00</published>
    <updated>2021-08-01T17:00:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
