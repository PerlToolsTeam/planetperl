<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-07-11T05:44:02Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5765642369340104816</id>
    <published>2021-07-10T22:57:00.000+02:00</published>
    <updated>2021-07-10T22:57:18.203+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlix) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PREACTION/Beam-Wire-1.025" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Beam::Wire&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight Dependency Injection Container &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.025&lt;/strong&gt; on 2021-07-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.024 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/NWCLARK/Data-Dumper-2.183" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Data::Dumper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - stringified perl data structures, suitable for both printing and eval &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.183&lt;/strong&gt; on 2021-07-05&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 2.182 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/THINC/DateTime-Format-Flexible-0.34" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DateTime::Format::Flexible&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DateTime::Format::Flexible - Flexibly parse strings and turn them into DateTime objects. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.34&lt;/strong&gt; on 2021-07-07&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.33 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RJBS/Dist-Zilla-6.023" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.023&lt;/strong&gt; on 2021-07-07&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.022 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETHER/Dist-Zilla-Plugin-Git-2.048" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Dist::Zilla::Plugin::Git&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Update your git repository after release &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.048&lt;/strong&gt; on 2021-07-10&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.047 was 9 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RJBS/Email-Sender-2.500" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Email::Sender&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a library for sending email &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.500&lt;/strong&gt; on 2021-07-04&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.500 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETJ/Graph-0.9722" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9722&lt;/strong&gt; on 2021-07-04&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9721 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETJ/GraphQL-0.51" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2021-07-04&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.50 was 2 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.21&lt;/strong&gt; on 2021-07-10&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.20 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.05" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.05&lt;/strong&gt; on 2021-07-10&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.04 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Object-Pad-0.43" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.43&lt;/strong&gt; on 2021-07-03&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETJ/PDL-2.052" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052&lt;/strong&gt; on 2021-07-04&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.051 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RJBS/Perl-PrereqScanner-1.024" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::PrereqScanner&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a tool to scan your Perl code for its prerequisites &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.024&lt;/strong&gt; on 2021-07-03&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/FERKI/Rex-1.13.4" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13.4&lt;/strong&gt; on 2021-07-05&lt;/li&gt;  &lt;li&gt;Votes: 77&lt;/li&gt;  &lt;li&gt;Previous version: 1.13.3 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.67" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.67&lt;/strong&gt; on 2021-07-09&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.66 was 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5765642369340104816/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccxlix-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5765642369340104816"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5765642369340104816"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccxlix-15-great-cpan-modules-released.html" title="(cccxlix) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7483862896190038275</id>
    <published>2021-07-10T22:52:00.002+02:00</published>
    <updated>2021-07-10T22:52:29.863+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxv) metacpan weekly report - PLS</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 28&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/07/10 20:52:10 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::TOTP" target="_blank"&gt;Authen::TOTP&lt;/a&gt; - Interface to RFC6238 two factor authentication (2FA)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cisco::UCS" target="_blank"&gt;Cisco::UCS&lt;/a&gt; - A Perl interface to the Cisco UCS XML API&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::DBSchema" target="_blank"&gt;DBIx::DBSchema&lt;/a&gt; - Database-independent schema objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Mongodbv2" target="_blank"&gt;Mojolicious::Plugin::Mongodbv2&lt;/a&gt; - MongoDB v2 driver in Mojolicious&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OCR::OcrSpace" target="_blank"&gt;OCR::OcrSpace&lt;/a&gt; - Perl Interface to access https://ocr.space/OCRAPI&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=257)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Auth::GoogleAuth" target="_blank"&gt;Auth::GoogleAuth&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Benchmark::Forking" target="_blank"&gt;Benchmark::Forking&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Plugin::Session::Store::Redis::Fast" target="_blank"&gt;Catalyst::Plugin::Session::Store::Redis::Fast&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Diver" target="_blank"&gt;Data::Diver&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::RestApi" target="_blank"&gt;Google::RestApi&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::PNG::QRCode" target="_blank"&gt;Image::PNG::QRCode&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=454)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kubernetes" target="_blank"&gt;Net::Kubernetes&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+2=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Poet" target="_blank"&gt;Poet&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=77)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Approx" target="_blank"&gt;String::Approx&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Differences" target="_blank"&gt;Test::Differences&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Dirs" target="_blank"&gt;Test::Dirs&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Fuzzy" target="_blank"&gt;Text::Fuzzy&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7483862896190038275/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxv-metacpan-weekly-report-pls.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7483862896190038275"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7483862896190038275"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxv-metacpan-weekly-report-pls.html" title="(cdlxxv) metacpan weekly report - PLS"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1931962528504256876</id>
    <published>2021-07-10T22:50:00.000+02:00</published>
    <updated>2021-07-10T22:50:51.608+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-07-10 20:44:02 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68285072" target="_blank"&gt;What's the correct way to deal with multiple inheritence of modules sharing a common "ancestor" in Perl?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68245834" target="_blank"&gt;Perl Checksum Calculation Migration to Java&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68274814" target="_blank"&gt;Dynamically extract pattern unique to each string in a list of strings in bash&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68320818" target="_blank"&gt;Perl - How do you type/execute/run Perl statements directly in the Perl shell/interpreter?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68297780" target="_blank"&gt;Perl OOP: Is it a good idea to outsource methods in your own modules&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68254816" target="_blank"&gt;Printing content of hash of arrays of arrays&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68255627" target="_blank"&gt;How to keep child process active when parent is killed/finished (in windows)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68283283" target="_blank"&gt;How to tell MakeMaker to add exactly the libraries I want?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68329156" target="_blank"&gt;Python subprocess using perl for formatting is giving incomplete output&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68304030" target="_blank"&gt;Perl - How to calculate CRC16 of N bytes from array M-dimensional (with N&amp;lt;M) using Digest::CRC&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1931962528504256876/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdxcviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1931962528504256876"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1931962528504256876"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdxcviii-stackoverflow-perl-report.html" title="(cdxcviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 120: Swap Odd/Even Bits and Clock Angle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/07/perl-weekly-challenge-120-swap-oddeven-bits-and-clock-angle.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10291</id>
    <published>2021-07-10T03:10:58Z</published>
    <updated>2021-07-10T03:12:13Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 120 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-120/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days, on July 11, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Swap Odd/Even Bits</h2>

<p><em>You are given a positive integer <code>$N</code> less than or equal to 255.</em></p>

<p><em>Write a script to swap the odd positioned bit with even positioned bit and print the decimal equivalent of the new binary representation.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 101
Output: 154

Binary representation of the given number is 01 10 01 01.
The new binary representation after the odd/even swap is 10 01 10 10.
The decimal equivalent of 10011010 is 154.

Input: $N = 18
Output: 33

Binary representation of the given number is 00 01 00 10.
The new binary representation after the odd/even swap is 00 10 00 01.
The decimal equivalent of 100001 is 33.
</code></pre>

<h3>Swap Odd/Even Bits in Raku</h3>

<p>We use the <a href="https://docs.raku.org/routine/fmt">fmt</a> method to convert the input numeral into a binary string. We could also use the <code>base</code> method, but the <code>fmt</code> method makes it possible to also specify an output format on 8 digits in one step (with leading 0&#8217;s when needed). Then, we split the binary string into groups of two digits and swap them. Finally, we use the <a href="https://docs.raku.org/routine/parse-base">parse-base</a> to convert back the result into its numeric equivalent.</p>

<pre><code>use v6;

sub swap-bits (UInt $n where * &lt;=255) {
    my $bin = $n.fmt("%08b");
    $bin ~~ s:g/(\d)(\d)/$1$0/;
    return $bin.parse-base: 2; 
}
say "$_ : ", swap-bits $_ for 101, 154, 33, 18;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./swap_bits.raku
101 : 154
154 : 101
33 : 18
18 : 33
</code></pre>

<h3>Swap Odd/Even Bits in Perl</h3>

<p>The Perl program is essentially a port to Perl of the Raku program above. Since Perl doesn&#8217;t have a binary string to numeral conversion, we re-use the <code>bin2dec</code> subroutine implemented last week.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

sub bin2dec {
    my $bin = shift;
    my $sum = 0;
    for my $i (split //, $bin) {
        $sum = $sum * 2 + $i;
    }
    return $sum;
}

for my $test (101, 154, 33, 18) {   
    my $b2 = sprintf "%08b", $test;
    $b2 =~ s/(\d)(\d)/$2$1/g;
    say "$test: ", bin2dec $b2;;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./swap_bits.pl
101: 154
154: 101
33: 18
18: 33
</code></pre>

<h2>Task 2: Clock Angle</h2>

<p><em>You are given time <code>$T</code> in the format hh:mm.</em></p>

<p><em>Write a script to find the smaller angle formed by the hands of an analog clock at a given time.</em></p>

<p><em>HINT: A analog clock is divided up into 12 sectors. One sector represents 30 degree (360/12 = 30).</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $T = '03:10'
Output: 35 degree

The distance between the 2 and the 3 on the clock is 30 degree.
For the 10 minutes i.e. 1/6 of an hour that have passed.
The hour hand has also moved 1/6 of the distance between the 3 and the 4, which adds 5 degree (1/6 of 30).
The total measure of the angle is 35 degree.

Input: $T = '04:00'
Output: 120 degree
</code></pre>

<h3>Clock Angle in Raku</h3>

<p>The general problem is not very difficult, but, as with anything having to do with time, there is a number of edge cases making the solution more complicated than we might initially expect.</p>

<p>Here, we compute the angle of each hand with the origin (00h00) measured clockwise. Then we compute the absolute value of the difference. At he end, if we find an angle larger than 180, we replace it by its complement to 360.</p>

<pre><code>use v6;

sub find-angle (Str $t) {
    my ($h, $m) = split /\:/, $t;
    # We compute angles in degrees from 0h00 and clockwise
    my $m-angle = $m * 6;  # or: $m * 360/60
    my $h-angle = ($h * 360/12 + $m-angle / 12) % 360;
    my $angle = abs ($m-angle - $h-angle);
    return $angle &lt;= 180 ?? $angle !!  360 - $angle;
}
for &lt;03:10 04:00 07:00 15:10 20:44&gt; -&gt; $test {
    say "$test: ", find-angle $test;
}
</code></pre>

<p>This is the output displayed for the built-in test cases:</p>

<pre><code>$ raku ./find-angle.raku
03:10: 35
04:00: 120
07:00: 150
15:10: 35
20:44: 2
</code></pre>

<h3>Clock Angle in Perl</h3>

<p>This is essentially a port to Perl of the Raku program above (although I must admit that there is one edge case that I originally missed in my Raku implementation and that I corrected after having found out about it in the Perl program).</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub find_angle {
    my $time = shift;
    my ($h, $m) = split /:/, $time;
    # angles counted in deg clockwise from the 0/12 position
    my $m_angle = $m * 6; # or: $m * 360/60
    # for the short hand:
    #     1 hr = 360 / 12 = 30 degrees
    #     1 min = #m_angle / (360 / 30) = #m_angle /12
    my $h_angle = ($h * 30 + $m_angle / 12) % 360; 
    my $hands_angle = abs($h_angle - $m_angle);
    return  $hands_angle &lt;= 180 ? $hands_angle : 360 - $hands_angle;
}

for my $t (qw / 03:10 04:00 07:00 15:10 18:00 /) {
    say "$t: ", find_angle $t;
}
</code></pre>

<p>This is the output displayed for the built-in test cases:</p>

<pre><code>$ perl ./find-angle.pl
03:10: 35
04:00: 120
07:00: 150
15:10: 35
18:00: 180
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on July 18, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>How I Uploaded a CPAN Module</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/07/how-i-uploaded-a-cpan-module.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10290</id>
    <published>2021-07-09T11:59:11Z</published>
    <updated>2021-07-09T12:19:18Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perlobj" label="perlobj" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p>So, accumulating effort from Wednesday, today(Friday) I become a <b><a href="https://www.metacpan.org/">CPAN</a></b> contributor!</p>

<p>I got a <b><a href="https://pause.perl.org/">PAUSE</a></b> ID 2 weeks ago. If you are also interested in the Perl ecosystem, you may consider to apply for a PAUSE ID as well.</p>

<p>In this blogpost, I mainly follow the instructions here: </p>
<ul><li><font color="#003366"><a href="https://www.perlmonks.com/?node_id=158999">How to make a CPAN Module Distribution</a>, by tachyon, <a href="https://www.perlmonks.com/">PerlMonks</a>, Apr 14, 2002.</font></li></ul>

<p>Some contents of the PerlMonks article are largely repeated here.</p>

<p>This piece of PerlMonks article is already 19-year-old, but it is 
still valid. One of the good things of the article is that you need not 
install new modules or programs if you are on a *nix system.</p>

<h4> Prerequisites </h4>

<p>One should have some knowledge on modules, packages and, not really necessary, object-oriented Perl ("Perl OO" in short). </p>

<p>Note that the Perl OO I have used in my first product is the "bless" 
Perl OO system, neither Moo nor Moose. Honestly I guess it is better for
 future maintenance if you choose to use Moo or other modern Perl OO 
system.</p>

<p>One should know how to write POD.</p>

<p>One should know how to use some of the <tt>Test::XXXX</tt> suite.</p>

<h5> If you have never heard of any one of key terms above... </h5><div><li><a href="https://metacpan.org/pod/Moo">https://metacpan.org/pod/Moo</a></li><li><a href="https://metacpan.org/pod/Moose">https://metacpan.org/pod/Moose</a></li><li><a href="https://perldoc.perl.org/perlpod">https://perldoc.perl.org/perlpod</a></li><li><a href="https://www.perlmonks.com/?node_id=11106010">Basic Testing Tutorial</a> by hippo, <a href="https://www.perlmonks.com/">PerlMonks</a>, Sep 11, 2019</li></div><div><br /></div>










<h4> Getting Started </h4>

<p>I had focused on typing/coding up three files:</p>

<ol><li><tt>a_perl_script_with_the_to-be_released_package.pl</tt></li><li><tt>a_perl_script_for_testing.pl</tt></li><li><tt>contents_I_would_like_to_see_on_the_description_page_of_the_module_on_metacpan.txt</tt></li></ol>

<p>For assistancy, I wrote a Perl script which did more time-consuming requests or for seeing the output of methods as well. <tt><a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a></tt> was a great help.</p>

<p>After finishing up (1) and (2), I re-organized the codes in (1) and (2) into</p>

<ol><li><tt>Cryptarithm.pm</tt></li><li><tt>test.pl</tt></li></ol>

And I converted the format of (3) into POD format, and checked the content. A helper was <tt><a href="https://metacpan.org/pod/Pod::Html">Pod::Html</a></tt>.

<div style="color:white; background-color:black; padding-left: 5px;"><pre>  use Pod::Html qw/pod2html/;

  pod2html("",
         "--infile=./page.pod",
         "--outfile=./podpage.html");
</pre></div>
<h4> Preparing to be seen by the World </h4>

<p>Almostly exactly follow the instructions on <a href="https://www.perlmonks.com/?node_id=158999">the PerlMonks article by tachyon</a>:</p>

<p>I moved to a directory "<tt>~/build</tt>". Then</p>

<div style="color:white; background-color:black; padding-left: 5px;"><pre>$ h2xs -AX Math::Cryptarithm</pre></div>

<p>After some trivial editing, renaming and directory operations, the structure of the "<tt>~/build</tt>" directory became</p>

<div style="color:white; background-color:black; padding-left: 5px;"><pre>$ tree
.
└── Math-Cryptarithm
    ├── Changes
    ├── lib
    │&nbsp;&nbsp; └── Math
    │&nbsp;&nbsp;     └── Cryptarithm.pm
    ├── Makefile.PL
    ├── MANIFEST
    ├── README
    └── t
        └── test.t</pre></div>


<p>I had mainly edited <tt>Cryptarithm.pm</tt>, put the content of (1) onto it (update the version number!), and then put the POD-formatted content of (3) after <tt>__END__</tt> in <tt>Cryptarithm.pm</tt> .</p>

<h4> Packaging </h4>
<p>Almostly exactly follow the instructions on <a href="https://www.perlmonks.com/?node_id=158999">the PerlMonks article by tachyon</a>:</p>

<div style="color:white; background-color:black; padding-left: 5px;"><pre>$ tar -czf Math-Cryptarithm-0.02.tar.gz Math-Cryptarithm-0.02</pre>
</div>

Then I copied the <tt>Math-Cryptarithm-0.02.tar.gz</tt> to "<tt>~/test</tt>" directory via Linux Desktop Environment. Back to the shell:

<div style="color:white; background-color:black; padding-left: 5px;"><pre>$ cd ~/test
$ tar -xzvf Math-Cryptarithm-0.02.tar.gz
$ cd Math-Cryptarithm-0.02
$ perl Makefile.PL
Checking if your kit is complete...
Looks good
Generating a Unix-style Makefile
Writing Makefile for Math::Cryptarithm
Writing MYMETA.yml and MYMETA.json
$ make
cp lib/Math/Cryptarithm.pm blib/lib/Math/Cryptarithm.pm
Manifying 1 pod document
$ make test
PERL_DL_NONLAZY=1 "/home/linuxbrew/.linuxbrew/Cellar/perl/5.34.0/bin/perl" "-MExtUtils::Command::MM" "-MTest::Harness" "-e" "undef *Test::Harness::Switches; test_harness(0, 'blib/lib', 'blib/arch')" t/*.t
t/test.t .. ok     
All tests successful.
Files=1, Tests=10, 34 wallclock secs ( 0.00 usr  0.02 sys + 34.47 cusr  0.00 csys = 34.49 CPU)
Result: PASS
$ sudo make install
[sudo] password for <i>user_name</i>:
Manifying 1 pod document
Installing /home/<i>user_name</i>/perl5/lib/perl5/Math/Cryptarithm.pm
Installing /home/<i>user_name</i>/perl5/man/man3/Math::Cryptarithm.3
Appending installation info to /home/<i>user_name</i>/perl5/lib/perl5/x86_64-linux-thread-multi/perllocal.pod
</pre></div>

<p>It seemed all ok.</p>

<h4>Interaction with PAUSE </h4>
<p>I uploaded the <tt>.tar.gz</tt> file via <a href="https://pause.perl.org/">https://pause.perl.org/</a> . Soon I got an email</p>

<blockquote>"The uploaded file<br />
<br />
    Math-Cryptarithm-0.02.tar.gz<br />
<br />
has entered CPAN as<br />
<br />
  file: $CPAN/authors/id/C/CY/<i>myPAUSEID</i>/Math-Cryptarithm-0.02.tar.gz<br />
  size: XX bytes<br />
   md5: XX<br />
  sha1: XX<br />
<br />
CPAN Testers will start reporting results in an hour or so:<br />
<br />
  http://matrix.cpantesters.org/?dist=Math-Cryptarithm<br />
<br />
Request entered by: <i>myPAUSEID</i> (<i>my name</i>)<br />
Request entered on: Fri, 09 Jul 2021 08:09:53 GMT<br />
Request completed:  Fri, 09 Jul 2021 08:10:59 GMT<br />
<br />
Thanks,<br />
-- <br />
paused, v1049"</blockquote>

<p>Passing <a href="http://www.cpantesters.org/">the CPAN Testers</a> is NOT necessary for the module to appear on CPAN. </p>

<p>Within three minutes after receiving the above email from PAUSE, I 
got another email from them, with the title "PAUSE indexer report <i>myPAUSEID</i>/Math-Cryptarithm-0.02.tar.gz":</p>

<blockquote>"The following report has been written by the PAUSE namespace indexer.<br />
...<br />
<br />
  User: ...<br />
  Distribution file: Math-Cryptarithm-0.02.tar.gz<br />
  Number of files: 6<br />
  *.pm files: 1<br />
  README: Math-Cryptarithm-0.02/README<br />
  META-File: No META.yml or META.json found<br />
  META-Parser: Parse::CPAN::Meta 1.4414<br />
  META-driven index: no<br />
  Timestamp of file: Fri Jul  9 08:10:58 2021 UTC<br />
  Time of this run: Fri Jul  9 08:12:30 2021 UTC<br />
<br />
Status of this distro: OK<br />
=========================<br />
<br />
<br />
The following packages (grouped by status) have been found in the distro:<br />
<br />
Status: Successfully indexed<br />
============================<br />
...<br />
"
</blockquote>

<p>And I could see my module in <a href="https://metacpan.org/recent">https://metacpan.org/recent</a> . □</p>]]>
        
    </content>
</entry>
  <entry>
    <title>DZone Contributor of the Month award</title>
    <link rel="alternate" href="https://dev.to/mjgardner/dzone-contributor-of-the-month-award-1ce8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="https://dzone.com/">DZone</a> tech publishing site selected me as their Editors’ Pick Contributor of the Month for June 2021! Here’s my (blessedly brief) acceptance speech during their monthly awards ceremony. (Fast-forward to <a href="https://youtu.be/wt-unjqS1oA?t=3288">54:88</a>.)</p>

<p><iframe width="710" height="399" src="https://www.youtube.com/embed/wt-unjqS1oA">
</iframe>
</p>

<p>Unfortunately, they’ve just started to de-prioritize content syndicated from elsewhere due to Google not indexing it. Since every article has to go through a moderation and editing process, this means that I may not be able to fulfill my promise to post new Perl content there every week. You can still find it <a href="https://phoenixtrap.com/tag/perl/">here on phoenixtrap.com</a>, of course. ☺</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/dzone-contributor-of-the-month-award-1ce8</id>
    <published>2021-07-06T18:00:43Z</published>
    <updated>2021-07-06T18:00:43Z</updated>
    <category term="award"/>
    <category term="dzone"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl debugger superpowers, part 2</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-debugger-superpowers-part-2-307j" type="text/html"/>
    <content type="html">&lt;p&gt;In March I wrote &lt;a href="https://phoenixtrap.com/2021/03/09/perl-debugger-superpower/"&gt;&lt;em&gt;The Perl debugger can be your superpower&lt;/em&gt;&lt;/a&gt;, introducing the &lt;a href="https://perldoc.pl/perldebug"&gt;step debugger&lt;/a&gt; as a better way to debug your Perl code rather than littering your source with temporary &lt;code&gt;print&lt;/code&gt; statements or logging. I use the debugger all the time, and I’ve realized that some more techniques are worth covering.&lt;/p&gt;

&lt;p&gt;Although I mentioned a &lt;a href="https://phoenixtrap.com/2021/03/09/perl-debugger-superpower/#caveat"&gt;caveat&lt;/a&gt; when debugging web applications, our apps at work all adhere to the Perl Web Server Gateway Interface (&lt;a href="https://metacpan.org/pod/PSGI"&gt;PSGI&lt;/a&gt;) specification and thus we can use tools like &lt;a href="https://metacpan.org/pod/Test::WWW::Mechanize::PSGI"&gt;Test::WWW::Mechanize::PSGI&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Plack::Test"&gt;Plack::Test&lt;/a&gt; to run tests and debugging sessions in the same Perl process. (Mojolicious users can use something like &lt;a href="https://metacpan.org/pod/Test::Mojo"&gt;Test::Mojo&lt;/a&gt; for the same effect.)&lt;/p&gt;

&lt;p&gt;To demonstrate, let’s get started with something like this which tests that a given route (&lt;code&gt;/say-hello&lt;/code&gt;) returns a certain &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; structure (&lt;code&gt;{"message": "Hello world!"}&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Most&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::WWW::Mechanize::&lt;/span&gt;&lt;span class="nv"&gt;PSGI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;MaybeXS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# name of app's main module&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$mech&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Test::WWW::Mechanize::&lt;/span&gt;&lt;span class="nv"&gt;PSGI&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# a Dancer2 app, so to_app returns a PSGI coderef&lt;/span&gt;
    &lt;span class="s"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_app&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$mech&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_ok&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/say-hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;lives_and&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$mech&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;cmp_deeply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="p"&gt;'}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message is Hello world!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All very fine and well, but what happens if that route starts returning a different message or worse, invalid output that causes &lt;code&gt;decode_json&lt;/code&gt; to fail? Eventually, you’ll rewrite the test in the script to output the offending content when something goes wrong, but right now you want to suss out the root cause.&lt;/p&gt;

&lt;p&gt;Debuggers have the concept of &lt;em&gt;breakpoints&lt;/em&gt;, which are flags that tell the debugger to stop at a certain line of code and wait for instructions. We can set them while running the debugger with the &lt;a href="https://perldoc.pl/perldebug#b-%5Bline%5D-%5Bcondition%5D"&gt;&lt;code&gt;b&lt;/code&gt;&lt;/a&gt; command or continue to a one-time breakpoint with the &lt;a href="https://perldoc.pl/perldebug#c-%5Bline%7Csub%5D"&gt;&lt;code&gt;c&lt;/code&gt;&lt;/a&gt; command, or we can insert them into the code ourselves before running it through the debugger in the first place.&lt;/p&gt;

&lt;p&gt;Add this line right after the &lt;code&gt;lives_and {&lt;/code&gt; line:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;DB::&lt;/span&gt;&lt;span class="nv"&gt;single&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This simulates having typed the &lt;a href="https://perldoc.pl/perldebug#s-%5Bexpr%5D"&gt;&lt;code&gt;s&lt;/code&gt;&lt;/a&gt; command in the debugger at that line, stopping execution at that point. Run our test with &lt;a href="https://perldoc.pl/perlrun#-d"&gt;perl’s &lt;code&gt;-d&lt;/code&gt; option&lt;/a&gt;, and then type &lt;a href="https://perldoc.pl/perldebug#c-%5Bline%7Csub%5D"&gt;&lt;code&gt;c&lt;/code&gt;&lt;/a&gt; to continue to that breakpoint:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -d -Ilib t/test_psgi.t

Loading DB routines from perl5db.pl version 1.60
Editor support available.

Enter h or 'h h' for help, or 'man perldebug' for more help.

[Local::MyApp:7170] core @2021-07-06 07:33:22&amp;gt; Built config from files: /Users/mgardner/Projects/blog/myapp/config.yml /Users/mgardner/Projects/blog/myapp/environments/development.yml in (eval 310)[/Users/mgardner/.plenv/versions/5.34.0/lib/perl5/site_perl/5.34.0/Sub/Quote.pm:3] l. 910
Test2::API::CODE(0x7ffabea39ee8)(/Users/mgardner/.plenv/versions/5.34.0/lib/perl5/site_perl/5.34.0/Test2/API.pm:71):
71: INIT { eval 'END { test2_set_is_end() }; 1' or die $@ }

  DB&amp;lt;1&amp;gt; c

[...]
ok 1 - GET /say-hello
main::CODE(0x7f8069caf2c8)(t/test_psgi.t:14):
15: my $json = decode_json($mech-&amp;gt;content);

  DB&amp;lt;1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;From here we can examine variables, set other breakpoints, or even execute arbitrary lines of code. Let’s see what became of that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET"&gt;HTTP GET&lt;/a&gt; request:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  DB&amp;lt;1&amp;gt; x $mech-&amp;gt;content

0 '{"error":"Undefined subroutine &amp;amp;Local::MyApp::build_frog called at lib/Local/MyApp.pm line 11.\\n"}'

  DB&amp;lt;2&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Aha, something has returned some different JSON indicating an error. Let’s look at the lines around (10–20) the offending line (11):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  DB&amp;lt;2&amp;gt; f lib/Local/MyApp.pm

  DB&amp;lt;3&amp;gt; l 10-20

10: my $method = 'build_frog';
11: $method-&amp;gt;();
12 }
13: catch ($e) {
14: send_as JSON =&amp;gt; {error =&amp;gt; $e};
15 }
16: send_as JSON =&amp;gt; {message =&amp;gt; 'Hello world!'};
17: };
18
19 sub build_frob {
20: return;

  DB&amp;lt;4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Yep, a typo on line 11, and one that wasn’t caught at compile time since it’s generated at runtime.&lt;/p&gt;

&lt;p&gt;Just to be sure (and to demonstrate some other cool debugger features), let’s set another breakpoint while in the debugger and then exercise that route again. Then we’ll check that &lt;code&gt;$method&lt;/code&gt; variable against the list of available methods in the &lt;code&gt;Local::MyApp&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  DB&amp;lt;4&amp;gt; b 11

  DB&amp;lt;5&amp;gt; $mech-&amp;gt;get('/say-hello')

[...]
Local::MyApp::CODE(0x7f8066f2db60)(lib/Local/MyApp.pm:11):
11: $method-&amp;gt;();

  DB&amp;lt;&amp;lt;6&amp;gt;&amp;gt; x $method

0 'build_frog'

  DB&amp;lt;&amp;lt;7&amp;gt;&amp;gt; m Local::MyApp
any
app
body_parameters
build_frob
captures
config
content
[...]
  DB&amp;lt;&amp;lt;8&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;No doubt about it, that variable is being set incorrectly.&lt;/p&gt;

&lt;p&gt;Quit out of the debugger with the &lt;a href="https://perldoc.pl/perldebug#q-or-%5ED"&gt;&lt;code&gt;q&lt;/code&gt;&lt;/a&gt; command, make the fix (we probably want errors to give something other than an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200"&gt;HTTP 200 OK&lt;/a&gt; while we’re at it), and re-run the test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -Ilib t/test_psgi.t

[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; Built config from files: /Users/mgardner/Projects/blog/myapp/config.yml /Users/mgardner/Projects/blog/myapp/environments/development.yml in (eval 309) l. 910
Name "DB::single" used only once: possible typo at t/test_psgi.t line 13.
[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; looking for get /say-hello in /Users/mgardner/.plenv/versions/5.34.0/lib/perl5/site_perl/5.34.0/Dancer2/Core/App.pm l. 35
[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; Entering hook core.app.before_request in (eval 274) l. 1
[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; Entering hook core.app.before_file_render in (eval 274) l. 1
[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; Entering hook core.app.after_file_render in (eval 274) l. 1
[Local::MyApp:8277] core @2021-07-06 07:48:36&amp;gt; Entering hook core.app.after_request in (eval 274) l. 1
ok 1 - GET /say-hello
ok 2 - message is Hello world!
1..2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that &lt;a href="https://perldoc.pl/perldiag#Name-%22%25s::%25s%22-used-only-once:-possible-typo"&gt;warning&lt;/a&gt; about leaving &lt;code&gt;$DB::single&lt;/code&gt; in there. While harmless, it’s a good reminder to remove such lines from your code so that they don’t surprise you or your teammates during future debugging sessions.&lt;/p&gt;

&lt;p&gt;And that’s it. Note that because we’re using PSGI, we were able to set breakpoints in our web app code itself and the debugger stopped there and enabled us to have a look around. And as you’ve seen, once you’re at a breakpoint you can &lt;a href="https://perldoc.pl/perldebug#f-filename"&gt;switch to different files&lt;/a&gt;, &lt;a href="https://perldoc.pl/perldebug#b"&gt;add/remove more breakpoints&lt;/a&gt;, &lt;a href="https://perldoc.pl/perldebug#command6"&gt;run arbitrary code&lt;/a&gt;, and more. The &lt;a href="https://perldoc.pl/perldebug"&gt;perldebug&lt;/a&gt; documentation page has all the details.&lt;/p&gt;

&lt;p&gt;Happy debugging! For your reference, here’s the full app module and test script used in this article:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-debugger-superpowers-part-2-307j</id>
    <published>2021-07-06T14:00:00Z</published>
    <updated>2021-07-06T14:00:00Z</updated>
    <category term="debugging"/>
    <category term="json"/>
    <category term="perl"/>
    <category term="testing"/>
  </entry>
  <entry>
    <title>TWC 119: Les Nybb and the Arrhythmic Trio</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2021/07/twc-119-les-nybb-and-the-arrhythmic-trio.html"/>
    <id>tag:blogs.perl.org,2021:/users/bruce_gray//532.10288</id>
    <published>2021-07-05T07:50:09Z</published>
    <updated>2021-07-05T15:32:37Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="twcperlraku" label="TWC Perl Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which Raku solutions give shape to Perl solutions, and vice versa, and then Raku does what Raku does best.</p>

<p>Task 1: Swap Nibbles - basic and extended solutions in Raku and Perl.</p>

<p>Task 2: Sequence of symbols 123 without adjacent 1&#8217;s. Solutions in Raku and Perl, then a radically different approach that I would have never discovered in anything but Raku.</p>
]]>
        <![CDATA[<p>Special thanks to <a href="https://app.codesignal.com/profile/TheYeti">TheYeti</a> of CodeFights (now CodeSignal), who invited me to start participating in the Weekly Challenge way back in October 2019. That site no longer has messaging or forums, and I don&#8217;t know how to let them know directly, but this week is my response to their invitation. Thank you!</p>

<h1><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/#TASK1">TWC Task #1, Swap Nibbles</a></h1>

<p>Observations:</p>

<ul>
<li>A nibble (which I learned as &#8220;nybble&#8221;) is 4 bits, which is <em>exactly</em> <em>one</em> hex digit. So, in any approach that starts with translating to a binary string, I should consider hexadecimal instead of binary, in case it is clearer or more concise to code for 1|2 hex digits instead of groups of 4|8 bits.</li>
<li>The task deliberately avoids discussing N>=256, so we have some freedom to decide on behavior if we also want to solve for an extended domain. I may choose differently for Perl than for Raku.</li>
</ul>

<h2>Raku</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/raku/ch-1.raku">Util&#8217;s Raku solution</a> for complete program.</p>

<pre><code>multi sub nib ( Int $n where ^256 ) {
    return ( ($n +&amp; 0xF0) +&gt; 4 )
         + ( ($n +&amp; 0x0F) +&lt; 4 );
}

multi sub nib ( Int $n where * &gt;= 0 ) {
    my Str $hex = $n.base(16);
    $hex [R~]= '0' if $hex.chars !%% 2;
    return $hex.comb(2)».flip.join.parse-base(16);
}
</code></pre>

<p>Thoughts, and notable elements:</p>

<ul>
<li><code>multi</code> allows subroutines with &#8220;duplicate&#8221; names; the ambiguity is resolved by comparing the subs&#8217; parameter lists to the arguments used in the actual subroutine call.</li>
<li><code>^256</code> means the range <code>0..255</code></li>
<li>&#8220;Bit-twiddling&#8221; is an approach from the C language. Masking with <code>+&amp; 0xF0</code> is not strictly needed, since <code>+&gt;</code> will right-shift those low bits into the bit bucket. I kept it there for clarity of intent.</li>
<li>To extend the task past 255 (for my own curiosity), I decided to swap nybbles in each byte. This is different from my decision in the Perl code.</li>
<li>The second <code>nib</code> sub would work just fine by itself. I took advantage of Raku&#8217;s <code>multi</code> to separate the solution for the task from my solution to the (invented) extended task.</li>
<li><code>.comb(N)</code> splits a string into a list of sub-strings of length N.</li>
<li><code>.flip</code> reverses a string; <code>'XYZ'.flip</code> gives you <code>'ZYX'</code>.</li>
<li><code>».</code> makes a method (that would work on one thing) work on <em>each</em> thing in a list. </li>
<li><code>.join</code>, without a parameter, joins its list using the empty string as a separator.</li>
<li><code>!%% N</code> means &#8220;is not evenly divisible by N&#8221;, and returns <code>True</code> or <code>False</code>, without needing to tell you what the remainder would be.</li>
<li>Pre-pending zero when <code>$hex</code> is an odd length is the easiest way to assure alignment before breaking into 2-character substrings.</li>
<li>The <code>R</code> meta-operator reverses the operands of its operator. <code>4 / 5</code> is 0.80, but <code>4 R/ 5</code> is the same as <code>5 / 4</code>, or 1.25 .</li>
<li>Just like <code>$foo ~= 9</code> would <em>append</em> nine to the contents of foo, <code>$foo [R~]= 9</code> will <em>prepend</em> nine. <code>R</code> is my least favorite meta-operator, but I have wanted a prepending op for a long time, and I think this could become a good idiom in Raku. Maybe.</li>
<li>I could have used <code>.fmt</code> or <code>sprintf</code> instead of <code>.base(16)</code>. Those would have given opportunity to specify that I want a leading zero, without needing that extra line of <code>[R~]=</code>. However, how can we tell how many digits to request? We cannot just say &#8220;even number of digits&#8221;. We have to calculate the size, which is <code>2*$n.log(16²).ceiling</code>. That code is long enough to need its own line, so nothing is gained in brevity, and some clarity would be lost.</li>
<li>The whole sub could be in one expression by using sprintf&#8217;s <code>.*</code> syntax for separate specification of size, which automatically has leading-zero turned on for hex digits: <code>return sprintf( '%.*X', 2*$n.log(16²).ceiling, $n ).comb(2)».flip.join.parse-base(16);</code>. Now, let&#8217;s pretend I never wrote that.</li>
</ul>

<p>Also, in the code (shown in the GitHub link above, not shown here) that auto-runs a test suite when no argument is given, I use two tricks:</p>

<ul>
<li>Since <code>0x65</code> and <code>101</code> are just two different ways of &#8220;spelling&#8221; the <em>exact</em> <em>same</em> number, I use hex format for the test data. That allows a human to easily calculate by hand the expected result.</li>
<li>Since <code>nib(nib(X))</code> should equal <code>X</code>, any pairs of input and expected output should also be tested in reverse. Instead of repeating the <code>is</code> line with reverse arguments, I kept it DRY (Don&#8217;t Repeat Yourself) by combining the &#8220;hyper-method&#8221; syntax with the <code>.antipair</code> method that swaps key-and-value in a Pair object.</li>
</ul>

<h2>Perl</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/perl/ch-1.pl">Util&#8217;s Perl solution</a> for complete program.</p>

<pre><code>sub nib ( $n ) {
    return   ($n &amp; 0xFFFFFF00)
         + ( ($n &amp; 0xF0) &gt;&gt; 4 )
         + ( ($n &amp; 0x0F) &lt;&lt; 4 );
}
</code></pre>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/perl/ch-1_bigint.pl">Util&#8217;s Perl <code>bigint</code> solution</a> for complete program.</p>

<pre><code>use bigint;
sub nib ( $n ) {
    return   ($n &amp; ~0xFF)
         + ( ($n &amp;  0xF0) &gt;&gt; 4 )
         + ( ($n &amp;  0x0F) &lt;&lt; 4 );
}
</code></pre>

<p>Thoughts, and notable elements:</p>

<ul>
<li>Clearly, this Perl code was influenced by my Raku solution.</li>
<li>Instead of exchanging nybbles within every byte, I decided to only swap within the <em>last</em> byte. This is different from my decision in the Raku code.</li>
<li>I used <code>0xFFFFFF00</code> in my original code, thinking that the mask is large enough to cover all input below <code>bigint</code> range, and that I would figure out how big to extend it later, when I would add larger test cases and <code>use bigint</code>. Then I forgot to extend it, and got failures in the new larger test cases. I learned the trick from <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/abigail/perl/ch-1.pl">Abigail</a> of how to make the mask however-big-you-need-it: bitwise negation via <code>~0xFF</code>.</li>
<li>No 7+ character English words can be made from only the letters A-F, <code>perl -wlnE 'print if /^[a-f]{6,}$/i' unixdict.txt</code> , drastically limiting our options for test constants more clever than <code>0xDEADBEEF</code> .</li>
</ul>

<h1><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/#TASK2">TWC Task #2, Sequence without 1-on-1</a></h1>

<p>Observations:</p>

<ul>
<li>Scanning through 1..∞ , and grep&#8217;ing for the right pattern, will be dirt-simple to write, and dog-slow to run. At N=258, you are already wasting 99.78% of the numbers to get &#8216;121212&#8217;, and the percentage of waste goes up as N grows. In Big-O notation, I think this approach is O(N²). The highest test number we are given is <code>60</code>, so both Perl and Raku will complete it in sub-second speed. I think I can do better, so I will see how much performance I can gain without completely abandoning clarity.</li>
<li>Changing to base-4 (and filtering on <code>!/0|11/</code>) will greatly reduce the percentage of waste, but still have a worse-than-linear performance. I can&#8217;t decide if it&#8217;s Big-O just has a much smaller vanished constant, or is still N-squared for some lowered value of &#8220;squared&#8221;. :^)</li>
<li>Base-3 seems ideal, but is unworkable because we will need to <code>tr/012/123/</code>, and no standard base has leading zeros, so we cannot generate any number with a leading <code>1</code>.</li>
<li>1,2,3 are not &#8220;numbers&#8221; in this problem; they are &#8220;symbols&#8221;. The task could have specified A,B,C or Foo,Bar,Baz or ζ,η,θ and (after tr/// or s///g) the algorithms would be the same. I found it convenient to use 0,1,2 in some circular (modulo) manipulations, to use &#8220;first symbol&#8221;,&#8221;second symbol&#8221;,&#8221;third symbol&#8221; in my thinking, and 1,2,3 mainly in the output.</li>
<li>All the combinations of symbols of length 5 can be generated from all of length 4, by pre-pending 1 to all of length 4, then 2 to all of length 4, then 3 to all of length 4, then filtering out any with adjacent ones. Because you can <em>generate</em> everything of length N from length N-1, I started thinking of each of those groups of same-length combinations as a &#8220;generation&#8221;.</li>
<li>The numbers that represent the start of each generation (like where the final length-5 value <code>33333</code> increments to the first length-6 value <code>121212</code>) are: <code>1,4,12,34,94,258,706,1930,5274,14410,...</code>. That is the OEIS sequence <a href="https://oeis.org/A293005">A293005</a>, which gives a formula that will quickly generate the rest that generation-size sequence, but I did not find it helpful in producing individual elements of the generations.</li>
<li>The count of members of each generation are: <code>1,3,8,22,60,164,448,1224,3344,9136,...</code>. That is the OEIS sequence <a href="https://oeis.org/A028859">A028859</a>, of which the first comment is &#8220;Number of words of length n without adjacent 0&#8217;s from the alphabet {0,1,2}&#8221;. Bingo! Also, the partial sums of this sequence produce <a href="https://oeis.org/A293005">A293005</a> above.</li>
<li>::: (In writing this blog post, I now see that <a href="https://oeis.org/A028859">A028859</a> points us to <a href="https://www.jjj.de/fxt/#fxtbook">the fxtbook: &#8220;Matters Computational&#8221;</a> (formerly titled &#8220;Algorithms for Programmers&#8221;), section 14.9: &#8220;Strings with no two consecutive zeros&#8221;. My 2 A.M. scanning of that section yields no insights, but then I don&#8217;t understand Generating Functions even when I am awake.)</li>
<li>Raku has the <code>Xop</code> meta-operator, which is ideal for combining 1,2,3 with a prior generation to create the next generation.</li>
<li>Raku&#8217;s <code>...</code> sequence operator is designed to concisely support this &#8220;generate the next from the prior&#8221; computation, and allow it to be &#8220;lazy&#8221; (deferred until needed, and generating as much as demanded).</li>
</ul>

<h2>Raku</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/raku/ch-2.raku">Util&#8217;s Raku solution</a> for complete program.</p>

<pre><code>sub s123 ( Int $n where * &gt; 0 ) {
    sub next_generation ( @a ) {
        return [ ( &lt;1 2 3&gt; X~ @a ).grep: {!/11/} ];
    }
    constant @s = ( [""], &amp;next_generation ... * ).map(*.&lt;&gt;).flat;
    return @s[$n];
}
</code></pre>

<p>Notable:</p>

<ul>
<li>The &#8220;decontainerizing&#8221; operator <code>.&lt;&gt;</code> has to be mapped to undo the &#8220;hard&#8221; containerization that happens to each generation. Otherwise, <code>.flat</code> will fail to flatten them all into one nice long lazy stream.</li>
<li>We cannot change <code>.map(*.&lt;&gt;)</code> to <code>».&lt;&gt;</code>, because the hyper-method syntax also implies that the method can be run on any element of the list in any order (the programmer is promising that parallel processing or out-of-order processing will cause no problems). This is not completely compatible with lazily-generated infinite lists, so the compiler disallows it (at least for now).</li>
<li>The <code>@s</code> array is auto-caching. For example, after <code>s123(10_000)</code> is calculated, <code>s123(9_000)</code> can be returned without calculation.</li>
<li>The only filtering needed the <code>/11/</code> specified in the task. There is no &#8220;waste&#8221; from generating non-123 digits.</li>
<li>The performance is now <em>linear</em>: O(N). Whatever time it takes to calculate <code>s123(999)</code>, it should only take 1000x as long to calculate <code>s123(999*1000)</code>. That is a big win, compared to O(N²) which would take a 1000*1000x as long instead of just 1000x.</li>
</ul>

<h2>Perl</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/perl/ch-2.pl">Util&#8217;s Perl solution</a> for complete program.</p>

<p>As I was translating the Raku solution to Perl, I re-read the <code>grep: {!/11/}</code> code and had an epiphany. If /11/ does not already exist in a generation, then the only place it can occur during the production of the next generation is in those with a leading-1. If I keep each generation sub-grouped by leading digit, I can code to leave out the group containing leading-1 while creating the 1-group of the next generation. This will remove the need for the <code>grep</code> completely, leaving only the direct generation of the combinations wanted by the task. I implemented this idea only in the Perl code.</p>

<pre><code>sub s123 ( $n ) {
    state @s;
    state $last = [ [], [], [""] ];
    while ( not defined $s[$n] ) {
        push @s,            @{$last-&gt;[0]},@{$last-&gt;[1]},@{$last-&gt;[2]};

        $last = [
            [ map { "1$_" }               @{$last-&gt;[1]},@{$last-&gt;[2]} ],
            [ map { "2$_" } @{$last-&gt;[0]},@{$last-&gt;[1]},@{$last-&gt;[2]} ],
            [ map { "3$_" } @{$last-&gt;[0]},@{$last-&gt;[1]},@{$last-&gt;[2]} ],
        ];
    }
    return $s[$n];
}
</code></pre>

<p>I would have then used the sub-group idea to improve the Raku code, but the underlying idea pointed to deeper understanding.</p>

<p>More observations, and analysis:</p>

<ul>
<li>I want to use the same approach here that I would use to convert to base-N for any N: modulo, subtract, divide. This gives you one digit at a time, building from smallest digit to largest, in O(log N) time. That cannot work here, because the smallest digit is arrhythmic; every time a /11/ pattern occurs at a higher level, it disrupts the even rhythm of <code>123123123123...</code> that would allow the modulo operation to give the right answer. </li>
<li>Digit-at-a-time can be processed from the other direction. We usually don&#8217;t, because of the extra effort. For example, converting 361 to base 5, we first ask &#8220;what is the highest power of 5 that is not bigger than our target?&#8221; <code>5**4=625</code> <em>is</em> bigger. <code>5**3==125</code> is <em>not</em> bigger. Now, how many 125&#8217;s can we get out of 361? We can extract 2 of them, <code>2*125==250</code>, and <code>361-250=111</code>, so the first digit will be <code>2</code>, and we continue the process with the remaining <code>111</code>. We continue on, <em>not</em> until the remainder is zero, but until we calculate 5**N all the way down to N==0 and so have handled the &#8220;ones&#8221; place. We could do the same thing here, if we just had a way to tell (ahead of time) what input numbers represented each &#8220;left-most digit&#8221;, like 3xxxx, 2xxxx, and 1xxxx. Also, we need the &#8220;distance&#8221; between 3xxxx and 2xxxx (and 2->1 and 1->0) in the source numbers.</li>
<li><p>Instead of producing every number in every generation, we can calculate the <em>counts</em> in each generation using the sub-group idea from above; something like <code>raku -e 'my @s1 = [0,0,1], { [ @^a.sum - @^a[0], @^a.sum, @^a.sum ] } ... *; say .raku for @s1.head(5);'</code></p>

<p>[0, 0, 1]
[1, 1, 1]
[2, 3, 3]
[6, 8, 8]
[16, 22, 22]
[44, 60, 60]</p></li>
<li><p>Using a flattened copy of those 3-sub-grouped counts, and a partial sum of the flattened copy, we can scan to find the first partial sum that cannot fit our target, and from its position calculate both the digit it should correspond to <em>and</em> the amount of the original target that it represents. For example: </p></li>
</ul>

<p>@s2 is a flattened copy of @s1: 0, 0, 1, 1, 1, 1, 2, 3, 3, 6, 8, 8, 16, 22, 22, 44, 60, 60, &#8230;</p>

<p>@s3 is the partial sum of @s2: 0, 0, 1, 2, 3, 4, 6, 9, 12, 18, 26, 34, 50, 72, 94, 138, 198, 258, &#8230;</p>

<p>200 is the target, and falls between @s3[16]==198 and @s3[17]==258;
17 % 3 == 2, so the first digit will be 2+1==&#8221;3&#8221;, and we will be subtracting from 200 the values of @s2[17]==60 (to reduce 200 from representation 3xxxx to 2xxxx), @s2[16]==60 (to reduce from representation 2xxxx to 1xxxx), and @s2[15]==44 (to reduce from representation 1xxxx to xxxx).
60+60+44==164.
200-164==36.
So, first digit is &#8220;3&#8221;, and the remaining target is 36.</p>

<p>36 is the target, and falls between @s3[11]==34 and @s3[12]==50;
12 % 3 == 0, so the next digit will be 0+1==&#8221;1&#8221;, and we will be subtracting from 36 the values of @s2[12]==16 (to reduce 36 from representation 1xxx to xxx).
36-16==20
So, next digit is &#8220;1&#8221;, and the remaining target is 20.</p>

<p>20 is the target, and falls between @s3[9]==18 and @s3[10]==26;
10 % 3 == 1, so the next digit will be 1+1==&#8221;2&#8221;, and we will be subtracting from 20 the values of @s2[10]==8 (to reduce 20 from representation 2xx to 1xx) and @s2[9]==6 (to reduce from representation 1xx to xx).
6+8==14
20-14==6
So, next digit is &#8220;2&#8221;, and the remaining target is 6.</p>

<p>And so on, until target is zero.</p>

<h2>Raku</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/raku/ch-2_logN.raku">Util&#8217;s Raku solution</a> for complete program.</p>

<pre><code>sub s123 ( Int $n is copy where * &gt; 0 ) {
    constant @s1 = [0,0,1], { my \s = @^a.sum; [ s - @^a[0], s, s ] } ... *;
    constant @s2 = @s1.map(*.&lt;&gt;).flat;
    constant @s3 = [\+] @s2;

    return join '', gather {
        while $n &gt; 0 {
            my $k   = @s3.first: :k, * &gt; $n;
            my $pos = $k % 3;

            take $pos + 1; # Digit

            $n -= @s2[ $k + (-$pos .. 0) ].sum
        }

        # Should be impossible, but I cannot prove it.
        die "NEGATIVE N: ", $n if $n &lt; 0;
    }
}
</code></pre>

<p>Using even the fastest linear Perl code, <code>s123(10**120)</code> would take longer than the <a href="https://en.wikipedia.org/wiki/Graphical_timeline_from_Big_Bang_to_Heat_Death">heat death of the universe</a>, <em>if</em> my laptop had enough memory.</p>

<p>Using this new logarithmic Raku code, <code>s123(10**120)</code> takes less than 1 second.</p>

<h2>Perl</h2>

<p>See <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-119/bruce-gray/perl/ch-2_logN.pl">Util&#8217;s Perl solution</a> for complete program.</p>

<p>This Perl code is a straight translation of the Raku logN code, except that @s1 is skipped in favor of generating @s2 directly. In Raku, generating @s2 directly is <em>much</em> harder to understand, due to shifting positions of &#8220;the 3 values of the last generation&#8221; as each element has to look-back a different offset amount. This is the first situation that I have seen Perl&#8217;s &#8220;flatten everything always&#8221; approach allow for clearly better code.</p>

<pre><code>sub s2 ( $n ) {
    state $s2 = [ 0, 0, 1 ];
    while ( not defined $s2-&gt;[$n] ) {
        my $s = sum0 @{$s2}[-3,-2,-1];
        push @{$s2}, $s - $s2-&gt;[-3], $s, $s;
    }
    return $s2-&gt;[$n];
}
sub s3 ( $n ) {
    state $s3 = [ s2(0) + s2(1) ];
    while ( not defined $s3-&gt;[$n] ) {
        push @{$s3}, $s3-&gt;[-1] + s2($#{$s3} + 1);
    }
    return $s3-&gt;[$n];
}
sub s123 ( $n ) {
    my $r;
    while ( $n &gt; 0 ) {
        my $k = first { s3($_) &gt; $n } 0..4200; # Enough for 10**600
        my $pos = $k % 3;

        $r .= $pos + 1; # Digit
        $n -= sum0 map { s2($_) } ($k-$pos) .. $k;
    }

    # Should be impossible, but I cannot prove it.
    die "NEGATIVE N: ", $n if $n &lt; 0;

    return $r;
}
</code></pre>

<p>In closing, I want to point out that although all my Raku code is cleaner than its Perl equivalent, that is due in large part to my solutions having leaned on features that Raku added to its Perl origins, so translating them back to Perl makes them &#8220;wordier&#8221;.</p>

<p>The place where Raku was indispensable was in the support for higher-level thinking and lazy infinite lists.</p>

<p>Re-reading my logN Raku code, the three constant lazy infinite arrays, and the block that uses them, feel elegant, almost obvious.
In reality, it was a treacherous, tortuous trek to tease that algorithm from the torrent of tri-digits. Not remotely obvious. Only elegant at the end. </p>

<p>I can now recreate this code in many languages, but I could not have <em>created</em> it in any language I know, except Raku.</p>

<p><em>/me</em> <em>sleeps</em></p>
]]>
    </content>
</entry>
  <entry>
    <title>Weekly Challenge 120</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-120-3o3i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-120/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-120/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-swap-oddeven-bits">
  </a>
  TASK #1 › Swap Odd/Even bits
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code> less than or equal to 255.</p>

<p>Write a script to swap the odd positioned bit with even positioned bit and print the decimal equivalent of the new binary representation.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>Like last weeks task, there are two ways of tackling this challenge. The first is to convert the number to the binary form, use some regular expression to swap the digits (for the record it would be <code>s/(.)(.)/$2$1/g</code>), and then convert it back a decimal number. And there is nothing wrong with that approach.</p>

<p>My approach was to use the 'bitwise and' <code>&amp;</code> and shift bit operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code> to calculate the value. We take the even values (170 = 2 + 8 + 32 + 128) and shift those one place to the right (the same as dividing by two), and the odd vales ( 85 = 1 + 4 + 16 + 64) and shift them to the left (same as multiplying by 2).</p>

<p>Given that the maximum value is 255, neither are really going to be more efficient than the other in the grand scheme of things.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 101
154

$ ./ch-1.pl 18
33
</code></pre>

</div>



<h2>
  <a href="#task-2-clock-angle">
  </a>
  TASK #2 › Clock Angle
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given time <code>$T</code> in the format <code>hh:mm</code>.</p>

<p>Write a script to find the smaller angle formed by the hands of an analogue clock at a given time.</p>

<p>HINT: A analogue clock is divided up into 12 sectors. One sector represents 30 degree (360 ÷ 12 = 30).</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>I follow these steps:</p>

<ul>
<li>Check the hour is between 1 and 12 and the minute value is between 0 and 59.</li>
<li>If the hour value is 12, change it to zero.</li>
<li>Calculate the angle (from the top) of the minute hand <code>360 * $minute / 60</code>.</li>
<li>Calculate the angle of the hour hand <code>360 * ( $hour / 12 + $minute / 720 )</code>
</li>
<li>Find the absolute difference between these values</li>
<li>If the difference is &gt; 180°, calculate 360 minus the difference. This ensures we have the smallest angle.</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 03:10
35°

$ ./ch-2.pl 04:00
120°
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-120-3o3i</id>
    <published>2021-07-05T13:30:28Z</published>
    <updated>2021-07-05T13:30:28Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Outreachy Internship - Rosheen working on Open Food Facts</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy2021-intro"/>
  <id>tag:news.perlfoundation.org,2021-07-05:/post/outreachy2021-intro</id>
  <published>2021-07-05T12:47:18</published>
  <updated>2021-07-05T12:47:18</updated>
  <summary>
  <![CDATA[
     I am pleased to announce we accepted an intern, Rosheen Naeem, to this year’s Outreachy internship at Open Food Facts. Rosheen will work with Stéphane Gigandet on a project to improve the quality of the Open Food Facts backend to make it more friendly to new developers until August 2021. Rosheen is a software engineer based in Pakistan. She has expertise in web development and technical writing. She brings with 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce we accepted an intern, <a href="https://roshnaeem.github.io/">Rosheen Naeem</a>, to this year’s <a href="https://www.outreachy.org/">Outreachy</a> internship at <a href="https://world.openfoodfacts.org/">Open Food Facts</a>. Rosheen will work with Stéphane Gigandet on a project to improve the quality (templatization, documentation, unit tests etc.) of the Open Food Facts backend (all written in Perl) to make it more friendly to new developers until August 2021.</p>

<p>Rosheen is a software engineer based in Pakistan. She has expertise in web development and technical writing. She brings with herself experience in web development, opensource, game development, and technical course designing. </p>

<p>Rosheen’s contributions can be seen at <a href="https://github.com/openfoodfacts/openfoodfacts-server">openfoodfacts</a> Github repository. Rosheen also published her experience with the Outreachy selection process in her <a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4">Medium article</a>.</p>

<p>Open Food Facts is a free, online and crowdsourced database of food products from around the world. Product data and photos are contributed through the Open Food Facts mobile application or sent by food manufacturers. Open Food Facts then analyze the ingredients, nutrition facts, labels, and packaging of products to compute nutritional or environmental scores such as the Nutri-Score and the Eco-Score.</p>

<p>Please join me in welcoming Rosheen to the Perl &amp; Raku community.</p>

<p>P.S. We also gave <a href="https://docs.google.com/presentation/d/1K1Cvfyl73Agh988wP6UEb5rtibCx6eLZJ8uxseIU_yM/edit?usp=sharing">a talk</a> on our summer activities at the Perl &amp; Raku Conference including Outreachy, Google Season of Docs and Google Summer of Code.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#519 - Crystal conference and course</title>
    <link rel="alternate" href="http://perlweekly.com/archive/519.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I am going to give a presentation at the <a href="https://crystal-lang.org/">Crystal</a> 1.0 <a href="https://crystal-lang.org/conference/">conference</a> alongside Yukihiro 'Matz' Matsumoto and Bruce Perens (just to throw in two names you might be familiar with and to have some honor by association). It is taking place this Thursday. It is my first presentation at an international conference for a long time. Wish me luck!</p>
<p>If you cannot make it to the conference, but you are interested in learning Crystal, I am going to start an experimental programming Crystal course via Zoom. You can <a href="https://code-maven.com/crystal-course">get more information and register here</a></p>
<p>As for Perl, it was a rather quiet week without a lot of posts, but still there is some nice stuff in here</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/519.html</id>
    <published>2021-07-05T10:00:00Z</published>
    <updated>2021-07-05T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Finding a shared vision of Perl</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/shared_vision_perl"/>
  <id>tag:news.perlfoundation.org,2021-07-05:/post/shared_vision_perl</id>
  <published>2021-07-05T07:31:47</published>
  <updated>2021-07-05T07:31:47</updated>
  <summary>
  <![CDATA[
     *Published on behalf of author: Andrew Solomon* The Perl Foundation is conducting research to identify the shared values of the Perl community, and their vision of the Perl ecosystem in years to come. The goal is to provide information on which TPF, community groups, and individuals can make informed decisions and plans for the future. In this blog we’ll explain why this research is needed, what we have learned so 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><em>Published on behalf of author: Andrew Solomon</em></p>

<p>The Perl Foundation (TPF) is conducting research to identify the shared values of the Perl community, and their vision of the Perl ecosystem in years to come. The goal is to provide information on which TPF, community groups, and individuals can make informed decisions and plans for the future.</p>

<p>In this blog we’ll explain why this research is needed, what we have learned so far, how we’re collecting the data, and the next steps.</p>

<h2>Why are we doing this research?</h2>

<p>The Perl ecosystem is a complex, diverse group of people and communities with an equally diverse set of views and values. However each part of this ecosystem has limited awareness of the other parts. One of these parts is TPF which has been established to support Perl through fundraising, marketing, and governance. With a clearer understanding of the Perl ecosystem, TPF and all Perl communities will be able to make better decisions regarding their goals and processes.</p>

<h2>What have we learned so far?</h2>

<p>From the explanation above, it's clear that this research is in its early stages, however we do have the following points on which to do more detailed research. The ideas are all relevant to everyone but they've been categorized into those parties who should lead ongoing research and actions to be taken.</p>

<p>For the Perl Steering Council who support the maintenance of the Perl core:</p>

<ul>
<li>Regular expressions are an important part of Perl</li>
<li>The TIMTOWTDI (aka "Tim Toady" meaning "There Is More Than One Way To Do It") philosophy is both a benefit and a source of conflict</li>
<li>There are very diverse views on the importance of new features vs backward compatibility across versions of Perl. To this they responded:* "...it has long been a source of tension: pushing the language forward versus backward compatability. We’ve been through a painful year, but we’ve come through it with a clear statement of values that says we don’t want to break any running code, unless there’s a good reason. And we’ve also made it clear that we want to drive the language forward, and there’s real appetite for that, I feel."*</li>
</ul>

<p>For TPF and affiliated Perl communities:
* There is a desire for communication, collaboration, diversity and inclusivity
* There is a dwindling visibility/importance of Perl in the broader technical community
* There should be an improved public image and branding
* The Perl ecosystem has conflict and noise with no shared mission statement
* There is a lack of leadership
* "Freedom of speech" and "Code of conduct" were both seen as important
* The Perl Foundation should be governed through democracy and paid membership with increased transparency
* Marketing should focus on highly regarded modules such as DBIx::Class, Mojo, Dancer, Plack...
* There should be an increase in funding for communities and projects
* There should be support for collaboration between communities and industry</p>

<p>For contributors:
* IDEs are important for early career Perl developers
* CPAN is falling behind on various sectors such as data science</p>

<p>For communities and companies
* There should be more training services and learning materials
* There is a sense that the community is small and shrinking
* The communities need more visibility, and should build their own Perl community brands
* There is a sparsity of Perl SDK support by API service providers (e.g. AWS) <em>[A service provider will invest in a Perl SDK if there's evidence - or potential - of a large number of Perl systems integrating their service -- Ed.]</em></p>

<h2>Our Methodology</h2>

<p>Being at an early stage, this research is exploratory. We presented a series of seed questions and used the innovative Gobby platform for participants to share their own thoughts on what needs to be addressed.</p>

<p>These seed questions were:
* What’s your connection with Perl and its ecosystem?
* What do you see as the Perl ecosystem’s core values and initiatives?
* What are your future aspirations for Perl?
* What do you perceive are the main challenges of unifying the Perl community, culture, and governance with a shared vision?
* As an individual, how might you support Perl in the future?
* How could Perl community groups contribute to our long term goals?
* How can The Perl Foundation help the community achieve their long term goals?</p>

<p>One of the interesting features of <a href="https://gobby.io/">Gobby</a> is that participants can vote for other peoples' responses with the effect of moving them higher up the list when viewed by the next participants. However, the number of votes should not be used as part of a quantitative analysis because:
* one person could have filled the survey in multiple times;
* many statements could have multiple interpretations; and
* the most insightful statement may have been added by the last person filling in the survey</p>

<h2>What's next?</h2>

<p>The points above provide a clear set of issues to explore in more detail and work out the best approach to improving things. The next step is to work out the importance of the various issues and how to address them. The TPF will continue to help identify the desired outcomes and provide communities with support to reach these goals.</p>

<p>If you'd like to see the raw data from which this information has been collected, <a href="https://docs.google.com/spreadsheets/d/18syqGFnko9Tz8thMbdGae4OBKr7gLf5mMziUSSmqnRQ/edit?usp=sharing">click here</a>. If you'd like to get involved, please email [surveys@perlfoundation.org](mailto: surveys@perlfoundation.org).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Essence of Perl Text Processing - Perl Book</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/07/essence-of-perl-text-processing---perl-book.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10283</id>
    <published>2021-07-02T09:30:33Z</published>
    <updated>2021-07-05T04:07:04Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        <uri>http://d.hatena.ne.jp/perlcodesample</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I published "Essence of Perl Text Processing" in Japan. This is 2021 new Perl Book(Both Normal Book and EBook).</p>

<p><a href="https://translate.google.com/translate?sl=ja&tl=en&u=https://www.perlri.com/book/perl_text_essense"><img src="https://m.media-amazon.com/images/I/51WLsR3FMTS.jpg"></a></p>

<p><a href="https://translate.google.com/translate?sl=ja&tl=en&u=https://www.perlri.com/book/perl_text_essense">Essence of Perl Text Processing</a></p>

<p>Mascot character is called Mojigaeru(This means String Frag).</p>

<p>"Kaeru(Gaeru/変える)" also means "replace" in Japanese. This expresses Perl is good at string searching and replacing.</p>

<h3>Amazon Web Programming new Ranking #2 in Japan 2021-07-05</h3>

<p>Amazon Web Programming new Ranking #2 in Japan 2021-07-05</p>

<p><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/p/perlcodesample/20210705/20210705062421.png"> </p>

<p>Don't be ashamed of Perl. Be brave.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>TWC 119: Task #1, Swap Nibbles &amp; Task #2, Sequence without 1-on-1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jared_martin/2021/07/twc-119-task-1-swap-nibbles-task-2-sequence-without-1-on-1.html"/>
    <id>tag:blogs.perl.org,2021:/users/jared_martin//3494.10287</id>
    <published>2021-07-05T02:07:26Z</published>
    <updated>2021-07-05T03:19:30Z</updated>
    <author>
        <name>Jared Martin</name>
        
    </author>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jared_martin/">
        <![CDATA[<h2 id="task-1"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/#TASK1">TWC Task #1, Swap Nibbles</a></h2>

<h3><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-119/jaredor/perl/ch-1.pl">jaredor submission for Task #1</a></h3>

<p>Hello everyone, I'm back after a year's absence, good to see everything is going as strong as ever. I have some extra time this weekend, so thought I'd try my hand at an answer again.</p>

<p>But, oh golly, looking back over my earlier posts on earlier problems was just painful--too many details! Going forward I'll just broad-brush things (and I mean it this time). If anyone has a question about details, then ask about them in the comments.</p>

<p>The swap nibbles problem is equivalent to a "swap hex-chars problem" and since we have the <a href="https://perldoc.perl.org/bigint">bigint</a> module then any hex string can be represented by an integer. When a little investigation brought up that every bigint object has an <a href="https://perldoc.perl.org/Math::BigInt#as_hex()">as_hex()</a> method, I found the restriction to positive integers less than 255 too restrictive: I decided to do them all! (Well, not quite all, since there are an infinite number of integers, but you know what I mean.)</p>

<p>There is one more thing: Swapping. I was excited to use a <a href="https://www.perlmonks.org/?node_id=891512">swapping technique</a> that I learned about when I asked for one on <a href="https://www.perlmonks.org/">perlmonks</a> a decade ago. (There are other good ones in that thread too, but this is a one-liner.)<p>

<p>The meat of the script is in the <code>nybble_swap()</code> function.</p>

<pre>
$ ./ch-1.pl --test
ok 1 - First example: 101 -> 86
ok 2 - Second example: 18 -> 33
ok 3 - Composition is identity.
ok 4 - Bytes of twin nybbles are unchanged.
ok 5 - Handles a special 770 digit number.
1..5
</pre>

<h2 id="task-2"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/#TASK2">TWC Task #2, Sequence without 1-on-1</a></h2>

<h3><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-119/jaredor/perl/ch-2.pl">jaredor submission for Task #2</a></h3>

<p>The second task reminded me of my favorite perl book, <a href="https://hop.perl.plover.com/">Higher Order Perl (HOP)</a> and its exposition on <a href="https://hop.perl.plover.com/book/pdf/05FromRecursionToIterators.pdf"><i>Breadth-First Search (BFS)</i></a> (start around page 213). The task given this week is closely related to the problem solved in that section of HOP for finding palindromes of strings composed of the letters A, B, C.</p>

<p>The  main function is <code>seq123()</code> and the helper function to select from the terms is <code>get_nth()</code>.</p>

<pre>
$ ./ch-2.pl --test
ok 1 - First Example: 5 -> 13
ok 2 - Second Example: 10 -> 32
ok 3 - Third Example: 60 -> 2223
ok 4 - First 15 in problem description is correct.
1..4
</pre>

<p>The only thing left to address is my guilt.</p>
<ul>
<li><b>Proof of ascending numerical sort not provided.</b> The terms come out in ascending numerical sort as an effect of construction of the BFS, but that's all the justification I'm going to give here.</li>
<li><b>The approach taken is for the result as a one-off.</b> It doesn't matter if you run fresh from the command line as a user, but the approach is inefficient for the testing functionality because the same (potentially large) BFS list of numbers is being recreated again and again. So yes, I'm nagged by the thought that I should have used memoization in testing the code.</li>
</ul>

<p>I guess I'll just have to give my permission to treat this as fun and not work ;-)</p>]]>
        
    </content>
</entry>
  <entry>
    <title>The Perl Shebang</title>
    <link rel="alternate" href="https://dev.to/grinnz/the-perl-shebang-1ojg" type="text/html"/>
    <content type="html">&lt;p&gt;Often overlooked, the &lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;shebang&lt;/a&gt; of a Perl program is a comment on the first line which tells the (Unix-like) OS how to run the script when invoked directly on the commandline. (It's ignored on Windows, which only looks at the file extension.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.16.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;a+x myscript.pl
./myscript.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there isn't one right answer for what the shebang should be. &lt;code&gt;/usr/bin/perl&lt;/code&gt; may be commonly available, but not always, and may not be the &lt;code&gt;perl&lt;/code&gt; the user prefers.&lt;/p&gt;

&lt;p&gt;For Perl scripts that are distributed to users to run how they wish, use &lt;code&gt;env&lt;/code&gt; to run the &lt;code&gt;perl&lt;/code&gt; that comes first in PATH:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perl scripts distributed on CPAN, however, get installed to a specific &lt;code&gt;perl&lt;/code&gt; with their dependencies, so their shebang must also point to that &lt;code&gt;perl&lt;/code&gt;. This is handled by a shebang rewrite step in the installation process, but it doesn't work for an &lt;code&gt;env&lt;/code&gt; shebang for &lt;a href="https://github.com/Perl-Toolchain-Gang/ExtUtils-MakeMaker/issues/58"&gt;historical reasons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Perl scripts distributed via CPAN installation, you can use any single-word shebang that ends in &lt;code&gt;perl&lt;/code&gt;, even just &lt;code&gt;perl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!perl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While developing and testing, the shebang will not have been rewritten yet, so you can invoke it as &lt;code&gt;perl script/myscript.pl&lt;/code&gt; to run it with your preferred &lt;code&gt;perl&lt;/code&gt; and ignore the shebang. If the script depends on modules in &lt;code&gt;lib/&lt;/code&gt; in the same distribution, it is common to run it during development as &lt;code&gt;perl -Ilib script/myscript.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, when you deploy and install a script manually, it should be run with a specific &lt;code&gt;perl&lt;/code&gt; so that it doesn't suddenly start running with a different &lt;code&gt;perl&lt;/code&gt; from the one it was deployed for, which may not have the script's dependencies installed or may behave subtly differently.&lt;/p&gt;

&lt;p&gt;For Perl scripts deployed to a specific location, use the full path to the &lt;code&gt;perl&lt;/code&gt; that should run it on that machine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="c1"&gt;#!/opt/perl/bin/perl&lt;/span&gt;
&lt;span class="c1"&gt;#!/home/user/perl5/perlbrew/perls/perl-5.34.0/bin/perl&lt;/span&gt;
&lt;span class="c1"&gt;#!/home/user/.plenv/versions/5.34.0/bin/perl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also find Perl scripts with flags specified in the shebang with hyphens. This doesn't work with &lt;code&gt;env&lt;/code&gt; shebangs in many cases, but the two common flags used this way are &lt;code&gt;-w&lt;/code&gt; for warnings and &lt;code&gt;-T&lt;/code&gt; for taint mode. &lt;code&gt;-w&lt;/code&gt; is unnecessary and &lt;a href="https://perldoc.perl.org/warnings#What's-wrong-with-w-and-%24%5EW"&gt;discouraged&lt;/a&gt;; just &lt;code&gt;use warnings;&lt;/code&gt; instead.&lt;/p&gt;

</content>
    <author>
      <name>Dan Book</name>
    </author>
    <id>https://dev.to/grinnz/the-perl-shebang-1ojg</id>
    <published>2021-07-04T22:36:55Z</published>
    <updated>2021-07-04T22:36:55Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Handling of symlinks on Windows (Perl, MSYS2, Cygwin)</title>
    <link rel="alternate" href="https://dev.to/hakonhagland/handling-of-symlinks-on-windows-perl-msys2-cygwin-52h3" type="text/html"/>
    <content type="html">&lt;p&gt;After &lt;a href="https://dev.to/perldean/vscode-as-a-perl-ide-3cco"&gt;reading about&lt;/a&gt; the Perl language server module for VS Code,&lt;br&gt;
I was eager to test it since I had been missing a possibility to debug Perl code from inside VS Code. In the past I have been using emacs as my primary editor for a long time, but am gradually using VS Code more and more now. VS Code has built-in debugging support for the Node.js runtime and can debug JavaScript, TypeScript. For debugging other languages one can install Debugger extensions in the VS Code Marketplace. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=richterger.perl"&gt;Language Server and Debugger for Perl&lt;/a&gt; VS Code extension allows debugging of Perl scripts, see the link above for an extensive list of features. To use the extension you first need to install the Perl module &lt;a href="https://metacpan.org/pod/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt;. I first tried to install it on Ubuntu 21.04. The module installed fine here, but after installation the extension still did not work. I found that the reason was that I was using a custom &lt;code&gt;perl&lt;/code&gt; installed with &lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;. Fortunately, it was easy to fix by going into the extension settings and setting an absolute path to the binary:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HcskR3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otebjaxjdv9xxs8gm8go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HcskR3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otebjaxjdv9xxs8gm8go.png" alt="VS Code extension settings page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I was curious to see if it also would install on Windows. Even if my preferred platform is Linux, I occasionally use Windows. For example when trying to answer questions on Stack Overflow that are related to Perl and Windows. I am using Windows 10 (run from Ubuntu through &lt;a href="https://linuxize.com/post/how-to-install-kvm-on-ubuntu-18-04"&gt;KVM&lt;/a&gt;), Home edition, 21H1, and Strawberry perl version 5.32.1. As anticipated, I quickly ran into issues with installing dependent modules, in particular &lt;a href="https://metacpan.org/pod/IO::AIO"&gt;IO::AIO&lt;/a&gt; was difficult.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1yNfFKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gis6g1fd88xyhzn0wakv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1yNfFKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gis6g1fd88xyhzn0wakv.PNG" alt="cpan Perl::LanguageServer log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I downloaded &lt;a href="https://metacpan.org/pod/IO::AIO"&gt;the source&lt;/a&gt; and tried to install &lt;code&gt;IO::AIO&lt;/code&gt; manually (not using &lt;code&gt;cpanm&lt;/code&gt;) first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;perl Makefile.PL
[...]
*** It seems you are running perl version 5.032001, likely the "official" or
*** "standard" version. While there is nothing wrong with doing that,
*** standard perl versions 5.022 and up are not supported by IO::AIO.
*** While this might be fatal, it might also be all right - if you run into
*** problems, you might want to downgrade your perl or switch to the
*** stability branch.
***
*** If everything works fine, you can ignore this message.
***
***
*** Stability canary mini-FAQ:
***
*** Do I need to do anything?
***    With luck, no. While some distributions are known to fail
***    already, most should probably work. This message is here
***    to alert you that your perl is not supported by IO::AIO,
***    and if things go wrong, you either need to downgrade, or
***    sidegrade to the stability variant of your perl version,
***    or simply live with the consequences.
***
[...]

*** Your platform is not standards compliant. To get this module working, you need to
*** download and install win32 pthread (http://sourceware.org/pthreads-win32/).
***

Generating a gmake-style Makefile
Writing Makefile for IO::AIO
Writing MYMETA.yml and MYMETA.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apparently it wants me to install &lt;a href="https://sourceforge.net/projects/pthreads4w/"&gt;POSIX Threads for Windows&lt;/a&gt;. I also noticed that the &lt;a href="https://metacpan.org/release/MLEHMANN/IO-AIO-4.75/source/Makefile.PL#L67"&gt;Makefile.PL&lt;/a&gt; is calling GNU Autotools &lt;a href="https://en.wikipedia.org/wiki/Configure_script"&gt;configure script&lt;/a&gt; which, as far as I know, cannot be run without a POSIX subsystem like Cygwin or MSYS2. &lt;/p&gt;

&lt;p&gt;Since I already had Cygwin and MSYS2 installed, I decided to give &lt;a href="https://www.msys2.org/"&gt;MSYS2&lt;/a&gt; a try. According to &lt;a href="https://en.wikipedia.org/wiki/Mingw-w64"&gt;wikipedia&lt;/a&gt;, MSYS2 ("minimal system 2") is a software distribution and a development platform for Windows, based on Mingw-w64 and Cygwin, that helps to deploy code from the Unix world on Windows. Instead of providing a full environment like Cygwin does, MSYS2 focuses on being a development and deployment platform.&lt;/p&gt;

&lt;p&gt;From the MSYS2 terminal window, also using &lt;code&gt;perl&lt;/code&gt; version 5.32.1 (but still a different binary than the &lt;code&gt;perl&lt;/code&gt; used by the CMD prompt):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl Makefile.PL
[...]
*** The stability canary says: (nothing, it was driven away by harsh weather)
***
*** It seems you are running perl version 5.032001, likely the "official" or
*** "standard" version. While there is nothing wrong with doing that,
*** standard perl versions 5.022 and up are not supported by IO::AIO.
*** While this might be fatal, it might also be all right - if you run into
*** problems, you might want to downgrade your perl or switch to the
*** stability branch.
***
*** If everything works fine, you can ignore this message.
***
[...]
Continue anyways?  [y]
configure: loading site script /etc/config.site
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking how to run the C preprocessor... gcc -E
[...]
checking for st_birthtimespec... yes
checking for st_gen... no
checking for statx... no
checking for accept4... yes
configure: creating ./config.status
config.status: creating config.h
Generating a Unix-style Makefile
Writing Makefile for IO::AIO
Writing MYMETA.yml and MYMETA.json
$ make
$ make test
[...]
t/03_errors.t ... 1/12 # Failed test 9 in t/03_errors.t at line 57
#  t/03_errors.t line 57 is:       ok (!$_[0]);
# Failed test 10 in t/03_errors.t at line 58
#  t/03_errors.t line 58 is:       ok ("\\test\\" eq readlink $some_link);
t/03_errors.t ... Failed 2/12 subtests
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And more failed tests were to come. Most fails were due to an unexpected behavior of symlinks on Windows and MSYS2. Even if I was able to fix the issue with &lt;code&gt;IO::AIO&lt;/code&gt;, there were other issues with other modules also needed by &lt;code&gt;Perl::LanguageServer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Despite this setback, I saw it as an opportunity to learn more about symlinks on Windows. Apparently there were similar issues with other modules that also needed to be fixed. As I was working with a pull request to &lt;a href="https://github.com/jkeenan/file-copy-recursive-reduced"&gt;file-copy-recursive-reduced&lt;/a&gt; I was encouraged to write this blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#symlinks-on-windows-msys2-and-cygwin"&gt;
  &lt;/a&gt;
  Symlinks on Windows (MSYS2 and Cygwin)
&lt;/h3&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link"&gt;symlink&lt;/a&gt; is a file that contains a reference to another file or directory in the form of an absolute or relative path. The referenced text string is automatically followed by the operating system as a path to another file or directory. This other file or directory is called the "target". So the symlink is a second file that exists independently of its target. If a symlink is deleted, its target remains unaffected. If a symlink points to a target, and sometime later that target is moved, renamed or deleted, the symlink is not automatically updated or deleted, but continues to exist and still points to the now non-existing target. Symlinks pointing to non-existing targets are called broken symlinks.&lt;/p&gt;

&lt;p&gt;On Unix-like operating systems, the target does not have to exist when a symlink is created, so broken symlinks can even be created initially. The ability to create broken symlinks is particularly useful when copying directories. Usually, the algorithm used to copy a directory just copies the files in the order returned by the &lt;code&gt;readdir()&lt;/code&gt; system call and since it is legal to create broken symlinks it does not need to copy the target of a relative symlink before the symlink itself is copied. &lt;/p&gt;

&lt;p&gt;So on Unix-like operating systems symlinks and broken symlinks can always be created, whereas on Windows this is not always the case. Early versions of Windows did not have symlinks of any kind, Windows 95 introduced &lt;a href="https://en.wikipedia.org/wiki/Shortcut_(computing)"&gt;file shortcuts&lt;/a&gt;, Windows XP introduced native symlinks (only enabled by default for kernel mode programs), and &lt;a href="https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/"&gt;starting with&lt;/a&gt; Windows 10 Insider build 14972, native symlinks could be created without needing to elevate the console as administrator (to enable this, go to the Windows settings app and choose &lt;em&gt;"Update &amp;amp; Security"&lt;/em&gt; -&amp;gt; &lt;em&gt;"For developers"&lt;/em&gt;, and turn on &lt;em&gt;"Developer mode"&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Even if the Windows &lt;a href="https://en.wikipedia.org/wiki/Shortcut_(computing)"&gt;shortcut&lt;/a&gt; file is just a metafile used by the Windows File Explorer, it has been used by Cygwin to emulate symlinks. However, the Cygwin shortcut file cannot be read properly by the File Explorer since it lacks many of the expected header fields, whereas a shortcut file created in the File Explorer can be read by Cygwin.&lt;/p&gt;

&lt;p&gt;In addition to this, in Cygwin and MSYS2 there is a further complication to the creation of symlinks. In Cygwin, creation of symlinks depends on an environment variable called &lt;code&gt;CYGWIN&lt;/code&gt;. Depending of the content of this environment variable, the creation of broken symlinks may fail, or the creation of non-broken symlinks may fail if developer mode (see discussion above) is not activated. The environment variable also regulates whether the symlink will be created as a shortcut file or as a native symlink. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#behavior-of-raw-ln-s-endraw-on-cygwin"&gt;
  &lt;/a&gt;
  Behavior of &lt;code&gt;ln -s&lt;/code&gt; on Cygwin
&lt;/h4&gt;

&lt;p&gt;The behavior of the &lt;code&gt;ln --symbolic &amp;lt;target&amp;gt; &amp;lt;destination&amp;gt;&lt;/code&gt; command in Cygwin &lt;a href="https://cygwin.com/cygwin-ug-net/using-cygwinenv.html"&gt;depends on&lt;/a&gt; the environment variable &lt;code&gt;CYGWIN&lt;/code&gt; which is used to configure many global settings for the Cygwin runtime system. It contain options separated by blank characters. The option that is important for the &lt;code&gt;ln -s&lt;/code&gt; command is called &lt;code&gt;winsymlinks&lt;/code&gt;. According to the &lt;a href="https://cygwin.com/cygwin-ug-net/using-cygwinenv.html"&gt;Cygwin documentation&lt;/a&gt;, there are four cases for the &lt;code&gt;winsymlinks&lt;/code&gt; option to consider:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks&lt;/code&gt; is not defined. (Note: this behavior differs from that of MSYS2, see below). This is called the default behavior for Cygwin.&lt;br&gt;
a) If native symlinks are enabled (see discussion above), then this is equivalent to setting &lt;code&gt;winsymlinks&lt;/code&gt; to &lt;code&gt;native&lt;/code&gt; (e.g. &lt;code&gt;CYGWIN=winsymlinks:native&lt;/code&gt;), see 3) below.&lt;br&gt;
b) If native symlinks are not enabled, this is equivalent to setting &lt;code&gt;winsymlinks&lt;/code&gt; to &lt;code&gt;lnk&lt;/code&gt; see 2) below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks&lt;/code&gt; is empty (&lt;code&gt;CYGWIN=winsymlinks&lt;/code&gt;) or &lt;code&gt;winsymlinks&lt;/code&gt; is set to &lt;code&gt;lnk&lt;/code&gt; (e.g. &lt;code&gt;CYGWIN=winsymlinks:lnk&lt;/code&gt;)&lt;br&gt;
Whether &amp;lt;target&amp;gt; exists or not, &lt;code&gt;ln -s&lt;/code&gt; creates  as a Windows shortcut file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks:native&lt;/code&gt;&lt;br&gt;
a) If native symlinks are enabled, and whether &amp;lt;target&amp;gt; exists or not, creates &amp;lt;destination&amp;gt; as a native Windows symlink. Note, this is most similar to the behavior of &lt;code&gt;ln -s&lt;/code&gt; on *nix.&lt;br&gt;
b) If native symlinks are not enabled, it is equivalent to setting &lt;code&gt;winsymlinks&lt;/code&gt; to &lt;code&gt;lnk&lt;/code&gt;, see 2) above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks:nativestrict&lt;/code&gt;&lt;br&gt;
a) If native symlinks are enabled and &amp;lt;target&amp;gt; exists, creates &amp;lt;destination&amp;gt; as a native Windows symlink,&lt;br&gt;
b) else if native symlinks are not enabled or if &amp;lt;target&amp;gt; does not exist, &lt;code&gt;ln -s&lt;/code&gt; fails.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#behavior-of-raw-ln-s-endraw-on-msys2"&gt;
  &lt;/a&gt;
  Behavior of &lt;code&gt;ln -s&lt;/code&gt; on MSYS2
&lt;/h4&gt;

&lt;p&gt;Similiarly to the &lt;code&gt;CYGWIN&lt;/code&gt; environment variable, the &lt;code&gt;MSYS&lt;/code&gt; environment variable is used to configure global settings for the MSYS2 runtime system (since MSYS2 is based on Cygwin). The four cases for the &lt;code&gt;winsymlinks&lt;/code&gt; option to consider is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks&lt;/code&gt; is not defined. The default behavior for MSYS2. (Note: this is not similar to Cygwin) &lt;br&gt;
a) If &amp;lt;target&amp;gt; exists, &amp;lt;target&amp;gt; is (surprise!!) &lt;a href="https://github.com/msys2/MSYS2-packages/issues/249"&gt;copied to&lt;/a&gt; &amp;lt;destination&amp;gt;, so &amp;lt;destination&amp;gt; does not become a symlink but simply a copy of &amp;lt;target&amp;gt;, this happens whether &amp;lt;target&amp;gt; is a file or a directory, or whether native symlinks are enabled or not. &lt;br&gt;
b) If &amp;lt;target&amp;gt; does not exist, &lt;code&gt;ln -s&lt;/code&gt; fails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks&lt;/code&gt; or &lt;code&gt;winsymlinks:lnk&lt;/code&gt; : (Similar to Cygwin, see above)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks:native&lt;/code&gt; : (Similar to Cygwin, see above)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;winsymlinks:nativestrict&lt;/code&gt; : (Similar to Cygwin, see avove)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#behavior-of-symlinks-in-perl-on-windows-msys2-and-cygwin"&gt;
  &lt;/a&gt;
  Behavior of symlinks in Perl on Windows (MSYS2 and Cygwin)
&lt;/h4&gt;

&lt;p&gt;In both MSYS2 and Cygwin,&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     perl -MConfig -E'say $Config{d_symlink}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;prints &lt;code&gt;define&lt;/code&gt; (meaning the &lt;code&gt;symlink&lt;/code&gt; call is implemented), whereas in regular windows (CMD prompt and &lt;code&gt;$^O eq "MSWin32"&lt;/code&gt;) with e.g. strawberry perl, &lt;code&gt;$Config{d_symlink}&lt;/code&gt; is only defined for &lt;code&gt;perl&lt;/code&gt; versions &amp;gt;= 5.33.5, see &lt;a href="https://metacpan.org/release/CORION/perl-5.33.5/view/pod/perldelta.pod#Windows"&gt;perldelta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the perl &lt;code&gt;symlink&lt;/code&gt; function "works" on MSYS2 and Cygwin, and for newer versions of &lt;code&gt;MSWin32&lt;/code&gt;. However, since the newest &lt;a href="https://strawberryperl.com/releases.html"&gt;Strawberry perl release&lt;/a&gt; is currently at 5.32.1, I was not able to test how symlinks behave with &lt;code&gt;MSWin32&lt;/code&gt;. I will therefore in the following focus on Cygwin and MSYS2.&lt;/p&gt;

&lt;p&gt;It would be nice if one could easily check from within a Perl script if developer mode was on and thus native symlinks were enabled. However, the only way I found was to use XS (a C extension) to check the value of the registry key &lt;code&gt;SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the further discussion below, consider the Perl statement:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  symlink $target, $dest;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If &lt;code&gt;$dest&lt;/code&gt; exists, the &lt;a href="https://perldoc.perl.org/functions/symlink"&gt;&lt;code&gt;symlink&lt;/code&gt;&lt;/a&gt; command always fails (returning a value of 0 and setting &lt;code&gt;$!&lt;/code&gt;). So consider the case where &lt;code&gt;$dest&lt;/code&gt; does not exist: There are four cases for the &lt;code&gt;winsymlinks&lt;/code&gt; option contained in the &lt;code&gt;MSYS&lt;/code&gt; or &lt;code&gt;CYGWIN&lt;/code&gt; environment variable to consider, as was done above for the &lt;code&gt;ln -s&lt;/code&gt; command. It turns out that &lt;code&gt;symlink&lt;/code&gt; behaves identically to the &lt;code&gt;ln -s&lt;/code&gt; command, and when &lt;code&gt;ln -s&lt;/code&gt; fails, &lt;code&gt;symlink&lt;/code&gt; also fails and returns a value of 0 and sets &lt;code&gt;$!&lt;/code&gt; (&lt;code&gt;ERRNO&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Also note that the environment variables &lt;code&gt;MSYS&lt;/code&gt; or &lt;code&gt;CYGWIN&lt;/code&gt; cannot/should not be changed from within the Perl script itself. I am not sure why this does not work, but I tested it and it showed undefined behavior in my tests. So the variables should be set before &lt;code&gt;perl&lt;/code&gt; is run, e.g. on the command line:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  MSYS=winsymlinks:native perl p.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What about the perl &lt;code&gt;-l&lt;/code&gt; operator ? Tests show that it does not differentiate between a Windows shortcut file and a native symlink file. So&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  say "symlink" if -l "foobar";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;prints "symlink" for both file types. Further, there seems to be no tool available to determine which of the two file types a given symlink file is. This means that when copying a symlink file, it is difficult to determine if the destination should be a native symlink or a windows shortcut. Hence, copying a symlink can silently convert a native symlink to a shortcut file depending on the setting of the &lt;code&gt;CYGWIN&lt;/code&gt; or &lt;code&gt;MSYS&lt;/code&gt; environment variable and this is also how the &lt;code&gt;cp&lt;/code&gt; command in MSYS2 (or Cygwin) &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; cp -a source destination
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;The behavior of symlinks is more complicated on Windows than on Linux. This is mainly a problem for programs that needs to copy directories. These programs may fail unexpectedly if they do not handle the different options in the &lt;code&gt;CYGWIN&lt;/code&gt; or &lt;code&gt;MSYS2&lt;/code&gt; environment variables. If the user does not set the environment variables, the default (meaning that the user did not set the &lt;code&gt;CYGWIN&lt;/code&gt; variable) behavior on Cygwin is such that it will never fail if the target of the symlink does not exist or if native symlinks are not enabled. However, the default behavior on MSYS2 is different. MSYS2 will by default &lt;em&gt;not&lt;/em&gt; create a symlink when a symlink is apparently created by calling &lt;code&gt;ln -s&lt;/code&gt;. Instead it creates a copy of the target file. If the target file does not exist, &lt;code&gt;ln -s&lt;/code&gt; fails.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilouge"&gt;
  &lt;/a&gt;
  Epilouge
&lt;/h3&gt;

&lt;p&gt;I was in the end able to install &lt;code&gt;Perl::LanguageServer&lt;/code&gt; on MSYS2, but when VS Code tried to use it, it crashed. I believe it was due to the module &lt;code&gt;IO::AIO&lt;/code&gt;, but I have not looked further into the issue. I also discovered a new Perl module called &lt;a href="https://metacpan.org/pod/PLS"&gt;PLS&lt;/a&gt;. This module is currently under &lt;a href="https://www.reddit.com/r/perl/comments/o9yfbp/pls_perl_language_server/"&gt;active development&lt;/a&gt; and implements &lt;a href="https://marketplace.visualstudio.com/items?itemName=FractalBoy.pls"&gt;features like&lt;/a&gt; auto-completion. However, it currently does not implement the &lt;a href="https://microsoft.github.io/debug-adapter-protocol/"&gt;Debug Adapter Protocol&lt;/a&gt; so debugging is not  available. This module also installed fine from my Windows CMD prompt (it uses &lt;a href="https://metacpan.org/pod/IO::Async"&gt;IO::Async&lt;/a&gt; instead of &lt;code&gt;IO::AIO&lt;/code&gt;), but it does not run from VS Code when I tested it. From the &lt;a href="https://www.reddit.com/r/perl/comments/o9yfbp/pls_perl_language_server/"&gt;discussion&lt;/a&gt; on reddit I guess this problem will hopefully be fixed soon.&lt;/p&gt;

</content>
    <author>
      <name>Håkon Hægland</name>
    </author>
    <id>https://dev.to/hakonhagland/handling-of-symlinks-on-windows-perl-msys2-cygwin-52h3</id>
    <published>2021-07-04T16:14:53Z</published>
    <updated>2021-07-04T16:14:53Z</updated>
    <category term="perl"/>
    <category term="windows"/>
    <category term="msys2"/>
    <category term="cygwin"/>
  </entry>
  <entry>
    <title>Packing and Unpacking from vacation: The Weekly Challenge 119</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/04#pwc119" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive integer $N. Write a script to swap the two nibbles of the binary
representation of the given number and print the decimal number of the new binary 
representation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
sub swap_nibbles{
    my($n) = @_;
    my $bits = substr(unpack("B32", pack("N", shift)), 24, 8);
    my $swapped_bits = substr($bits, 4) . substr($bits, 0, 4);
    my $swapped_decimal = unpack("N", pack("B32", substr("0" x 32 . $swapped_bits, -32)));
    print $swapped_decimal . "\n";
}

MAIN:{
    swap_nibbles(101);
    swap_nibbles(18);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
86
33
</code></pre>

<h3>Notes</h3>

<p>I was on vacation recently and did not have time for the last couple of Weekly Challenges,
but as I <a href="https://www.facebook.com/photo/?fbid=10226433361965004&amp;set=gm.4388858307813590&amp;__cft__[0]=AZW5TWFLh6Dc5ccw-efgja3k-RqUoNArTQPRdvY46jJ_h7E4KV90brWjG2pKr5_nBxteShr0np0cW11bsTAqQePFxe1oK1uFbUzlajGp2Te8hzYJbhPu8J_KjlQm8KWbLaFU_B4V5jEeaPwOeqA7J7sWO-BC4ec2wwDtxVIezClyNF9749gccx9Jk5BwI-9SRYk&amp;__tn__=EH-R">posted a meme about</a>
it is hard to take a break!</p>

<p>(The Perl Programmers Facebook group is a lof of fun. It is kept Private by the group 
owner but joining is easy, anyone is allowed provided they are interested in Perl.)</p>

<p>I was able to get through the first part of this week's challenge with the time I had
after getting back from vacation. As I was unpacking my suitcase, co-incidentally enough,
I noticed that the first task is a great use of 
<a href="https://perldoc.perl.org/functions/unpack">pack and unpack</a>! </p>

<p>I have used these functions several times in the past, for example this writeup from 
<a href="https://adamcrussell.livejournal.com/6526.html">Challenge 020</a> has an example and some
links to others. I must admit that from the earliest days of my Perl experience I have
been fascinated by pack! At first it seemed like a bit of black magic and due to its
versatility, in some ways it still retains this mystique.</p>

<p>In the <code>swap_nibbles</code> function the number is packed into <em>Network Byte Order</em> and that
representation is that unpacked bitwise to get the expected binary representation.
After that the two nibbles are swapped using <code>substr</code> to get each 4 bit slice. The process
is then reversed on the swapped bits to get the result we want.</p>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-119/">Challenge 119</a></p>

<p><a href="https://www.pcmag.com/encyclopedia/term/byte-order">Network Byte Order</a></p>

<p><a href="https://www.facebook.com/groups/171594046206725">Perl Programmers Facebook Group</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc119</id>
    <published>2021-07-04T12:04:00-04:00</published>
    <updated>2021-07-04T12:04:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Raku CI Bot Grant Report June 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-ci-bot-grant-2021-06"/>
  <id>tag:news.perlfoundation.org,2021-07-04:/post/raku-ci-bot-grant-2021-06</id>
  <published>2021-07-04T09:04:23</published>
  <updated>2021-07-04T09:04:23</updated>
  <summary>
  <![CDATA[
     Patrick Böker writes about the progress of his Raku CI Bot grant: Building on Khalids work, I improved the GitHub API auto-generation. Implemented and tested the logic to efficiently retrieve, package and store sets of Rakudo, NQP, MoarVM checkouts. I implemented and tested a nifty little helper to aid with asynchronous task processing. It's a trait that tacks onto a method and changes it so:  It runs asynchronously.  
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Patrick Böker writes about the progress of his Raku CI Bot grant:</p>

<hr />

<ul>
<li>Building on Khalids work, I improved the GitHub API auto-generation. 
([khalidelboray/perl6-WebService-GitHub#6](https://github.com/khalidelboray/
perl6-WebService-GitHub/pull/6/files))</li>
<li>Implemented and tested the logic to efficiently retrieve, package and store 
sets of Rakudo, NQP, MoarVM checkouts.</li>
<li>I implemented and tested a nifty little helper to aid with asynchronous task 
processing. It's a trait that tacks onto a method and changes it so:
<ul>
<li>It runs asynchronously.</li>
<li>It never runs multiple times in parallel.</li>
<li>If a call to the method happens while it still runs, a second run is 
queued right after the running one finishes.</li>
<li>Queued runs don't stack. Irrespective for how many calls to the method 
happen, only one run is queued after the current run.
This is the fundamental tool to help with processing tasks robustly and in 
real-time.</li>
</ul></li>
<li>Worked on the database layout and fought with Red.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8742456227300970671</id>
    <published>2021-07-03T17:12:00.001+02:00</published>
    <updated>2021-07-03T17:12:59.979+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlviii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Data-Dumper-2.182' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Dumper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - stringified perl data structures, suitable for both printing and eval &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.182&lt;/strong&gt; on 2021-06-30&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 2.181 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.022&lt;/strong&gt; on 2021-06-28&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.020 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.52&lt;/strong&gt; on 2021-07-01&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.46 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.33&lt;/strong&gt; on 2021-06-28&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.32 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.42&lt;/strong&gt; on 2021-07-01&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.41 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KHW/Pod-Simple-3.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - framework for parsing Pod &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.43&lt;/strong&gt; on 2021-06-28&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 3.42 was 7 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9009&lt;/strong&gt; on 2021-06-29&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9007 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.5.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.5.0&lt;/strong&gt; on 2021-07-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.4.0 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Task-Kensho-0.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Task::Kensho&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A Glimpse at an Enlightened Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.41&lt;/strong&gt; on 2021-07-03&lt;/li&gt;  &lt;li&gt;Votes: 107&lt;/li&gt;  &lt;li&gt;Previous version: 0.40 was 2 years, 7 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Throwable-1.000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Throwable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a role for classes that can be thrown &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000&lt;/strong&gt; on 2021-06-26&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 1.000 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8742456227300970671/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccxlviii-10-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8742456227300970671"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8742456227300970671"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cccxlviii-10-great-cpan-modules.html" title="(cccxlviii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4366630186863772060</id>
    <published>2021-07-03T17:10:00.003+02:00</published>
    <updated>2021-07-03T17:10:20.879+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxiv) metacpan weekly report - PLS</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 38&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/PLS"&gt;PLS&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/07/03 15:09:49 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache2::AuthCookieDBI" target="_blank"&gt;Apache2::AuthCookieDBI&lt;/a&gt; - An AuthCookie module backed by a DBI database.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::Crypto" target="_blank"&gt;Bitcoin::Crypto&lt;/a&gt; - Bitcoin cryptography in Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::CSel" target="_blank"&gt;Data::CSel&lt;/a&gt; - Select tree node objects using CSS Selector-like syntax&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::FA::Number" target="_blank"&gt;Lingua::FA::Number&lt;/a&gt; - Converts English numbers to their Persian (Farsi) HTML/Unicode equivalent&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Silverpeak::Orchestrator" target="_blank"&gt;Net::Silverpeak::Orchestrator&lt;/a&gt; - Silverpeak Orchestrator REST API client library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Deprecate" target="_blank"&gt;Sub::Deprecate&lt;/a&gt; - Enables runtime graceful deprecation notices on sub calls&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ack" target="_blank"&gt;ack&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::DreamyImage" target="_blank"&gt;Acme::DreamyImage&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::AuthCookie" target="_blank"&gt;Apache::AuthCookie&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Util" target="_blank"&gt;Attribute::Util&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::AutoConf" target="_blank"&gt;Config::AutoConf&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::TableReader" target="_blank"&gt;Data::TableReader&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/doxygen::filter::perl::1.73" target="_blank"&gt;doxygen::filter::perl::1.73&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Stream" target="_blank"&gt;File::Stream&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gearman" target="_blank"&gt;Gearman&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Compress" target="_blank"&gt;IO::Compress&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=454)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Amazon::Signature::V4" target="_blank"&gt;Net::Amazon::Signature::V4&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::CIDR" target="_blank"&gt;Net::CIDR&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::ValidationCompiler" target="_blank"&gt;Params::ValidationCompiler&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Create" target="_blank"&gt;PDF::Create&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=113)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlsecret" target="_blank"&gt;perlsecret&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+3=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS::0.8" target="_blank"&gt;PLS::0.8&lt;/a&gt; (+3=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Format" target="_blank"&gt;String::Format&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Random" target="_blank"&gt;String::Random&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Diff" target="_blank"&gt;Text::Diff&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Twig" target="_blank"&gt;XML::Twig&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ZMQ::FFI" target="_blank"&gt;ZMQ::FFI&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4366630186863772060/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxiv-metacpan-weekly-report-pls.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4366630186863772060"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4366630186863772060"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/07/cdlxxiv-metacpan-weekly-report-pls.html" title="(cdlxxiv) metacpan weekly report - PLS"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jun 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/07/01/list-of-new-cpan-distributions-jun-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-OrganizingCPAN">Acme-CPANModules-OrganizingCPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Efforts to organize CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomData">Acme-CPANModules-RandomData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Generating random person (name, title, age, etc)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomPassword">Acme-CPANModules-RandomPassword</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Generating random passwords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RandomPerson">Acme-CPANModules-RandomPerson</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Generating random person (name, title, age, etc)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-ELLEDNERA-Utils">Acme-ELLEDNERA-Utils</a></td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Done for the sake of learning <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;"/></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-boboiboy">Acme-MetaSyntactic-boboiboy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>The BoboiBoy theme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-ozark">Acme-MetaSyntactic-ozark</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>The Ozark theme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy">Acme-PERLANCAR-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Dummy distribution for various testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-Negative">Acme-Version-Negative</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0</td>
<td/>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-Regress">Acme-Version-Regress</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>5.00</td>
<td>3.00</td>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Version-utf8">Acme-Version-utf8</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td/>
<td/>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Extract-Libarchive">Alien-Build-Plugin-Extract-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Alien::Build plugin to extract a tarball using libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SNMP-MIBDEV">Alien-SNMP-MIBDEV</a></td>
<td><a href="https://metacpan.org/author/INPHOBIA">INPHOBIA</a></td>
<td>2.000000</td>
<td>2.000000</td>
<td>Build and install Net-SNMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Wslay">Alien-Wslay</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install Wslay</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Amp-Client">Amp-Client</a></td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-6">App-Bin4TSV-6</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.090</td>
<td>0.090</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-8">App-Bin4TSV-8</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.101</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV-9">App-Bin4TSV-9</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.110</td>
<td>0.111</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Dex">App-Dex</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.002000</td>
<td>0.002000</td>
<td>Directory Execute</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-EPAN">App-EPAN</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Exclusive Perl Archive Nook</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-IODCounterSimpleUtils">App-IODCounterSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities for IOD::Counter::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PMVersionsUtils">App-PMVersionsUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to PMVersions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-SQLiteCounterSimpleUtils">App-SQLiteCounterSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>CLI utilities for SQLite::Counter::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-SQLiteKeyValueStoreSimpleUtils">App-SQLiteKeyValueStoreSimpleUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities for SQLite::KeyValueStore::Simple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Stow-Check">App-Stow-Check</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Distribution for stow-check script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arraydata">App-arraydata</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Show content of ArrayData modules (plus a few other things)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-colgrep">App-colgrep</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-colsummary">App-colsummary</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.058</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-crosstable">App-crosstable</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.110</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-csel">App-csel</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-digitdemog">App-digitdemog</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.050</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-expandtab">App-expandtab</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.010</td>
<td>0.020</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-freq">App-freq</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-podman">App-podman</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>a terminal document viewer for POD and other syntaxes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sdview">App-sdview</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a terminal document viewer for POD and other syntaxes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tabledata">App-tabledata</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Show content of TableData modules (plus a few other things)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-traveller">App-traveller</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.01</td>
<td>a webserver that serves Traveller RPG maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-venn">App-venn</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.120</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-zoo">App-zoo</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>print bar, usually</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Unwrap">Archive-Libarchive-Unwrap</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unwrap files with multiple compression / encoding formats</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Astro-FITS-CFITSIO-FileName">Astro-FITS-CFITSIO-FileName</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.05</td>
<td>parse and generate CFITSIO extended file names.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Perl-Startup">Bencher-Scenario-Perl-Startup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.051</td>
<td>0.051</td>
<td>Benchmark startup time of perls</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSS-Struct-Output-Structure">CSS-Struct-Output-Structure</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Indent printing 'CSS::Struct' structure to CSS code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-PrometheusTiny">Catalyst-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.006</td>
<td>Prometheus metrics for Catalyst</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cfwp-fio">Cfwp-fio</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.4</td>
<td>0.04</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cfwp-zoo">Cfwp-zoo</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.1</td>
<td>0.01</td>
<td>print bar, usually</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ColorTheme-Search-Light">ColorTheme-Search-Light</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Light theme for text viewer/search application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Compress-LZString">Compress-LZString</a></td>
<td><a href="https://metacpan.org/author/POPP">POPP</a></td>
<td>1.44</td>
<td>1.4401</td>
<td>LZ-based compression library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-PrometheusTiny">Dancer2-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Prometheus metrics for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DataStructure">DataStructure</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Collection of useful data-structures in pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deanonymize">Devel-Deanonymize</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>A tool do make anonymous sub visible to Devel::Cover</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-MAX44009">Device-Chip-MAX44009</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>chip driver for MAX44009</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-OPT3001">Device-Chip-OPT3001</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for OPT3001</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-ASDAGO">Dist-Zilla-PluginBundle-Author-ASDAGO</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.001</td>
<td>ASDAGO's Dist::Zilla plugin bundle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-VNEALV">Dist-Zilla-PluginBundle-Author-VNEALV</a></td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A plugin bundle for distributions config as common dist.ini by VNEALV</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-H3">Geo-H3</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.03</td>
<td>0.06</td>
<td>H3 Geospatial Hexagon Indexing System</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-H3-FFI">Geo-H3-FFI</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.02</td>
<td>0.06</td>
<td>Perl FFI binding to H3 library functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graph-Undirected-Hamiltonicity">Graph-Undirected-Hamiltonicity</a></td>
<td><a href="https://metacpan.org/author/ASHWIN">ASHWIN</a></td>
<td>0.1</td>
<td>0.1</td>
<td>decide whether a given Graph::Undirected contains a Hamiltonian Cycle.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hustle-Table">Hustle-Table</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1</td>
<td>v0.2.2</td>
<td>Fast dynamic dispatching to subroutines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IOD-Counter-Simple">IOD-Counter-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A simple counter using IOD/INI file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Imager-IMBarcode-JP">Imager-IMBarcode-JP</a></td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Japan's Intelligent Mail Barcode Generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Schema-Modern">JSON-Schema-Modern</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.512</td>
<td>0.513</td>
<td>Validate data against a schema</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LINE-Notify-Simple">LINE-Notify-Simple</a></td>
<td><a href="https://metacpan.org/author/HOLLY">HOLLY</a></td>
<td>1.0</td>
<td>1.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Util-Find">List-Util-Find</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>List utilities related to finding items</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Features-Dummy">Module-Features-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Dummy feature set, for testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Obrazi">Mojolicious-Plugin-Obrazi</a></td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>0.11</td>
<td>0.12</td>
<td>a gallery generator command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Spotify">Net-Async-Spotify</a></td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Interaction with spotify.com API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Payment-CCAvenue-NonSeamless">Net-Payment-CCAvenue-NonSeamless</a></td>
<td><a href="https://metacpan.org/author/SHARDIWAL">SHARDIWAL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Processing orders using CCAvenue billing page!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-WebSocket-EVx">Net-WebSocket-EVx</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.12</td>
<td>0.18</td>
<td>Perl wrapper around Wslay websocket library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLS">PLS</a></td>
<td><a href="https://metacpan.org/author/MREISNER">MREISNER</a></td>
<td>0.1</td>
<td>0.8</td>
<td>Perl Language Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-Redirect">Plack-App-Redirect</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plack application for redirection.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-TrafficAdvice">Plack-Middleware-TrafficAdvice</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>handle requests for /.well-known/traffic-advice</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-PseudoPod-Book">Pod-PseudoPod-Book</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210620.2051</td>
<td>1.20210620.2051</td>
<td>manages books written in the Pod::PseudoPod format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-PseudoPod-DOM">Pod-PseudoPod-DOM</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210620.2004</td>
<td>1.20210620.2040</td>
<td>an object model for Pod::PseudoPod documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Simple-Words">Pod-Simple-Words</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.07</td>
<td>0.07</td>
<td>Parse words and locations from a POD document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Promise-Me">Promise-Me</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Fork Based Promise with Asynchronous Execution, Async, Await and Shared Data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Require-Util">Require-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to require()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2">SDL2</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQLite-Counter-Simple">SQLite-Counter-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>A simple counter using SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQLite-KeyValueStore-Simple">SQLite-KeyValueStore-Simple</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A simple key-value store using SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ArrayData">Sah-Schemas-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-TableData">Sah-Schemas-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Script-Singleton">Script-Singleton</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ensure only a single instance of a script can run</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Trim-NonRegex">String-Trim-NonRegex</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>String trimming functions that do not use regex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Trim-Regex">String-Trim-Regex</a></td>
<td><a href="https://metacpan.org/author/MBURGER">MBURGER</a></td>
<td>20210604</td>
<td>20210604</td>
<td>Trims the spaces off the leading / trailing string.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Keyword-Combine-Keys">Syntax-Keyword-Combine-Keys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.09</td>
<td>The great new Syntax::Keyword::Combine::Keys!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Locale-US-State">TableData-Locale-US-State</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20200531.0.1</td>
<td>20200531.0.1</td>
<td>US states</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Quote-JamesFT">TableData-Quote-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Adjective">TableDataBundle-Lingua-Word-EN-Adjective</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English adjectives</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Adverb">TableDataBundle-Lingua-Word-EN-Adverb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English adverbs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Lingua-Word-EN-Noun">TableDataBundle-Lingua-Word-EN-Noun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Collection of TableData:: modules that contain English nouns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-GradientIndicator">Tags-HTML-GradientIndicator</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Tags helper for gradient evaluation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-HumanComputerWords">Text-HumanComputerWords</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.04</td>
<td>0.04</td>
<td>Split human and computer words in a naturalish manner</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Wrap-OO">Text-Wrap-OO</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.002</td>
<td>an object oriented interface to Text::Wrap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Time-Local-More">Time-Local-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>More functions for producing Unix epoch timestamp or localtime/gmtime tuple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ToolSet-Math">ToolSet-Math</a></td>
<td><a href="https://metacpan.org/author/GLAI">GLAI</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Bring in common math functions and constants.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Multi">Tree-Multi</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210528</td>
<td>20210629</td>
<td>Multi-way tree in Pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Serial">Tree-Serial</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Perl module for deserializing lists of strings into tree-like structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-Term">Tree-Term</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210629</td>
<td>20210631</td>
<td>Create a parse tree from an array of terms representing an expression.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Tie-Aggregate">Type-Tie-Aggregate</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>0.001</td>
<td>like Type::Tie, but slower and more flexible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cfwp-fio">cfwp-fio</a></td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>v0.0.1</td>
<td>v0.0.3</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/custom-failures-x-alias">custom-failures-x-alias</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>export aliases for custom::failures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mb-Encode">mb-Encode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>provides MBCS encoder and decoder</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perleasyfail">perleasyfail</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000001</td>
<td>0.000002</td>
<td>A collection of cases where core Perl fails its "easy things should be easy" mantra (plus their remedies)</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>104</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>41</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>31</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>11</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CCCACHE">CCCACHE</a></td>
<td>4</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>3</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/VNEALV">VNEALV</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>2</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/INPHOBIA">INPHOBIA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GLAI">GLAI</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/SHARDIWAL">SHARDIWAL</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BEROV">BEROV</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MBURGER">MBURGER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/MREISNER">MREISNER</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/HOLLY">HOLLY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/ASHWIN">ASHWIN</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/POPP">POPP</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-OrganizingCPAN PERLANCAR 0.001 0.001 Efforts to organize CPAN Acme-CPANModules-RandomData PERLANCAR 0.001 0.002 Generating random person (name, title, age, etc) Acme-CPANModules-RandomPassword PERLANCAR 0.001 0.001 Generating random passwords Acme-CPANModules-RandomPerson PERLANCAR 0.001 0.001 Generating random person (name, title, age, etc) Acme-ELLEDNERA-Utils ELLEDNERA 0.01 0.04 Done for the sake of learning 🙂 Acme-MetaSyntactic-boboiboy PERLANCAR … <a href="https://perlancar.wordpress.com/2021/07/01/list-of-new-cpan-distributions-jun-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jun 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1947</id>
    <published>2021-07-01T01:24:22Z</published>
    <updated>2021-07-01T01:24:22Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#518 - Becoming book author?</title>
    <link rel="alternate" href="http://perlweekly.com/archive/518.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I recently came across a <a href="https://davecross.substack.com/p/the-story-of-ebooks-and-me">blog post</a> by Dave Cross where he shared the story of how he got into publishing ebooks. I highly recommend you read his blog post, I find it inspirational, personally. I always wanted to write a technical book on a subject related to Perl. I have high regard for those who are professional authors e.g. Curtis Poe, brian d foy, Gabor Szabo, Dave Cross and many more. Ever since I started the weekly challenge, I became more involved in writing technical blogs. Soon I realised it is not the same as writing a technical book. But the urge inside me to become an author didn't die forever. With Dave's recent blog post fanning the idea once again, I became charged one more time but this time I am seriously thinking about it. I have a topic that I wanted to explore for some time. I discussed it with Gabor and Dave and got very positive responses. So it is official I am now working on my first book, soon to be published by Dave Cross. Fingers crossed. Life is so beautiful when you have friends like Gabor and Dave who always encourage and guide you.</p>
<p>There is another story that I would like to share. Andrew Shitov reached out to me few days ago to ask if I was interested in sharing my Raku story at the upcoming <a href="https://conf.raku.org/">The Raku Conference</a>. I have accepted his offer and am working on my presentation. I haven't submitted my talk yet but will do so soon. Do you have a Raku story to share? If yes, then please do submit your talk before the deadline.</p>
<p>One last story for the week and then I will go away. Many of you know that I have been running the Perl Weekly Challenge for more than 2 years now. It started as a weekly challenge aimed for Perl and Raku community but soon it spread out to other languages. As of today, we now have received contributions in over 50 different languages. Latest addition is the <a href="https://code-maven.com/crystal-binary-palindrom">Crystal programming language</a> by none other than Gabor Szabo himself. A long time ago, someone (I don't remember who), suggested that I should register a generic domain instead of perlweeklychallenge.org. I didn't waste any time and registered the new domain theweeklychallenge.org. Having registered the new domain, I didn't have the courage and expertise to switch over the actively used live site to another domain. I asked about this on Facebook and guess what? Dave Cross came up with step-by-step guide explaining how to do the domain switch. I was still very nervous to take the risk. Then came the final blow with Gabor asking the same question: why don't I move domain to a generic domain. To cut a long story short, Gabor and I spent an hour or so yesterday (Sunday afternoon) and got the domain switched over. So we now have new domain the weekly challenge: <a href="https://theweeklychallenge.org">theweeklychallenge.org</a>. Thank you Gabor and Dave for all the support and guidance.</p>
<p>Enjoy the rest of the newsletter</p></div>
    </content>
    <id>http://perlweekly.com/archive/518.html</id>
    <published>2021-06-28T10:00:00Z</published>
    <updated>2021-06-28T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): May 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_may_2021"/>
  <id>tag:news.perlfoundation.org,2021-06-27:/post/maintaining_perl_may_2021</id>
  <published>2021-06-27T14:04:00</published>
  <updated>2021-06-27T14:04:00</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 36 tickets were reviewed, and 6 patches were applied  0.55 research, comment on https topic in PSC #021 2021-05-21  0.67 #15608 research and comment  0.93 #18660 review suggested test code, research  0.15 #18670 re-check, apply to blead  10.57 #18703 try to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.
```
Approximately 36 tickets were reviewed, and 6 patches were
applied</p>

<p>[Hours]         [Activity]
  0.55          research, comment on https topic in PSC  #021 2021-05-21
  0.67          #15608 research and comment
  0.93          #18660 review suggested test code, research
  0.15          #18670 re-check, apply to blead
 10.57          #18703 try to setup a nixos test environment
                #18703 try to reproduce, reproduce and some debugging,
                think about solutions
                #18703 work on a fix, testing
                #18703 debug some not understood behaviour
                #18703 dig into Configure
                #18703 testing, track down intermittent failure, work on
                updating changes
                #18703 more changes, testing
                #18703 make PRs #18790 and #18791, comment on #18703
  1.60          #18710 review
                #18710 comment
  1.17          #18734 review, research and comment
  1.80          #18739 work on a fix, strange build issues (resolved) and
                push for CI
  0.33          #18748 review and close
  0.05          #18749 apply to blead
  0.38          #18752 review and comment
  0.33          #18785 review and comment
  8.40          #18788 reproduce, try to debug
                #18788 research and comment
                #18788 report #136523 against IO::Async::File, apply
                supplied alt patch against tree, look for similar bugs
                #18788 PR #395 against EU::MM, more look for similar bugs
                #18788 make PR #18798
                #18788 fix File::Copy too, perldelta updates
  0.32          #18789 review and comment
  0.18          #18790 recheck and apply to blead
  0.45          #18798 re-check, testing and apply to blead
  0.37          #18819 apply to blead (disable msvc100 CI), open ticket to
                track the original problem
  1.70          :utf8 code re-check
  2.30          :utf8 debugging and fix, more testing
  1.23          :utf8 debugging, find a related bug and fix (but a test
                fails, probably broken test)
  1.78          :utf8 more code review
  3.45          :utf8 more review
                :utf8 more review
  2.40          :utf8 test for possible bug, debugging
  1.23          cleanup old tonyc/ and smoke-me/tonyc branches (preserved
                what I want to keep in tonycoz mirror)
  1.02          COP memory savings
  1.97          list catch up, debug and comment on submitted security
                issue
  1.50          more Data::Alias, testing with usedtrace, consider how to
                fix, email
  1.85          more Data::Alias, testing, research, discussion with xmath
  1.35          more look at SvPV_shrink_to_cur()
  0.28          more quirks email
  0.22          msvc100: research and comment
  1.22          neilb quirks email
  3.15          review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
  1.40          review github notifications, work up change to remove
                msvc100 from CI, more github notifications while the push
                CIs, look at SvPV_shrink_to_cur()’s interaction with CoW
  0.18          review PSC notes</p>

<h1>  1.65          review rfc docs</h1>

<p>58.13 hours total
 ```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Bericht vom Deutschen Perl-/Raku-Workshop 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Der Deutsche Perl-/Raku-Workshop ("German Perl Workshop", GPW) ist eine Institution in der Perl-Community: Seit 1999 gibt es diese Konferenz rund um Perl (und seit ein paar Jahren Raku). Damit ist der GPW eine der ältesten Perl-Veranstaltungen überhaupt.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021</id>
    <published>2021-06-23T10:00:00Z</published>
    <updated>2021-06-23T10:00:00Z</updated>
  </entry>
  <entry>
    <title>#517 - Commitment and habit</title>
    <link rel="alternate" href="http://perlweekly.com/archive/517.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Flavio Poletti has just completed one year of blogging. Mohammad S. Anwar has been editing the Perl Weekly for more than three years and running the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a> for more than two years.</p>
<p>I am not sure what the secret is, but something about creating a commitment, even if it is an artificial commitment that then you need to stick to. I am sure both of them had times when they thought of sleeping in and not doing the work that day or that week. After all, this is not their paid job, but the commitment kept them going. With time it became easier to do the task and the whole thing became a habit. I wish more people found the strength to do something like this.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/517.html</id>
    <published>2021-06-21T10:00:00Z</published>
    <updated>2021-06-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A List with One Missing Line and Too Many Lines to List: The Weekly Challenge 117</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given text file with rows numbered 1-15 in random order but there is a catch one 
row in missing in the file.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub find_missing{
    my(@numbers) = sort {$a &lt;=&gt; $b} @_;
    for(my $i=0; $i&lt; @numbers - 1; $i++){
        return $numbers[$i] + 1 if $numbers[$i] != $numbers[$i + 1] - 1;   
    }  
}

MAIN:{
    my @line_numbers; 
    while(&lt;DATA&gt;){
        chomp;
        m/([0-9]+),.*/;
        push @line_numbers, $1;
    }
    my $missing = find_missing(@line_numbers);
    print "$missing\n"; 
}

__DATA__
11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My approach here is likely the most common one for this problem I would think. We get a 
list of all the numbers and then iterate through the list to determine which one is 
missing. This code assumes the conditions of the problem hold, that there is always one
missing number.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given size of a triangle. Write a script to find all possible paths from top to 
the bottom right corner. In each step, we can either move horizontally to the right (H), 
or move downwards to the left (L) or right (R).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant FINAL =&gt; "end"; 
use constant DEADEND =&gt; "-1"; 
use constant TRIANGLE_TOP =&gt; q|/\\| ;
use constant TRIANGLE_BOTTOM =&gt; q|/__\\|;

sub find_paths{
    my($n) = @_;
    my %paths;
    my @complete_paths;
    my @vertices; 
    for my $i (0 .. $n){
        for my $j (0 .. $i){
            push @vertices, "$i-$j";
        }
    }
    $paths{""}=["0-0",["0-0"]];    
    my %updated_paths;
    while((keys %paths) &gt; 0){
        %updated_paths = ();
        for my $path (keys %paths){
            my @exists;
            my @visited; 
            my $current = $paths{$path}-&gt;[0];  
            my $visited = $paths{$path}-&gt;[1];
            my @ij = split(/\-/, $current);  
            my($left, $horizontal, $right) = (($ij[0] + 1) . "-" . $ij[1], $ij[0] . "-" . ($ij[1] + 1), ($ij[0] + 1) . "-" . ($ij[1] + 1));
            @exists = grep {$_ eq $left} @vertices;
            @visited = grep {$_ eq $left} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_left = [@{$visited}, $left];
               if($left eq "$n-$n"){
                   push @complete_paths, $path . "L"; 
               }
               else{
                   $updated_paths{$path . "L"} = [$left, $visited_left];     
               }
            }          
            @exists = grep {$_ eq $horizontal} @vertices;
            @visited = grep {$_ eq $horizontal} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_horizontal = [@{$visited}, $horizontal];
               if($horizontal eq "$n-$n"){
                   push @complete_paths, $path . "H"; 
               }
               else{
                   $updated_paths{$path . "H"} = [$horizontal, $visited_horizontal];     
               }
            }           
            @exists = grep {$_ eq $right} @vertices;
            @visited = grep {$_ eq $right} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_right = [@{$visited}, $right];
               if($right eq "$n-$n"){
                   push @complete_paths, $path . "R"; 
               }
               else{
                   $updated_paths{$path . "R"} = [$right, $visited_right];     
               }
            }           
        }  
        %paths = %updated_paths;  
    }   
    return @complete_paths; 
}

sub print_triangle{
    my($n) = @_;
    my $top = TRIANGLE_TOP . "  ";
    for my $i (1 .. $n ){
        print " ";
        print "  " x ($n - $i);
        print $top x $i  ;
        print "\n";
        print "  " x ($n - $i );
        print TRIANGLE_BOTTOM x ($i );
        print "\n";
    }
}

MAIN:{
    my($N);
    $N = 1;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 2;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 3;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 4;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 /\  
/__\
R LH 
   /\  
  /__\
 /\  /\  
/__\/__\
RR LRH RLH LHR LLHH LHLH 
     /\  
    /__\
   /\  /\  
  /__\/__\
 /\  /\  /\  
/__\/__\/__\
RRR LHRR RLHR LRRH RRLH RLRH LRHR LLHRH LLRHH RLHLH LHRLH RLLHH LHLRH LLHHR LHLHR LRLHH LRHLH LHLHLH LHLLHH LLHLHH LLLHHH LLHHLH 
       /\  
      /__\
     /\  /\  
    /__\/__\
   /\  /\  /\  
  /__\/__\/__\
 /\  /\  /\  /\  
/__\/__\/__\/__\

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Here we see a great example of &lt;em&gt;combinatorial explosion&lt;/em&gt;! As the triangle size grows the 
number of possible pathways increases extremely quickly. The number of possible paths when
&lt;code&gt;$N = 10&lt;/code&gt; is 1,037,718. My code finds all of those in about 40 seconds when run on a 2019
MacBook Pro. Performance on more modest hardware is still reasonable.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;$N = 20&lt;/code&gt; the complete number of paths is so large that maintaining a list of paths 
in memory will cause the Perl interpreter to run out of memory and crash. It is simply
not possible to list them all!&lt;/p&gt;

&lt;p&gt;Interestingly it turns out that the original author of the challenge thought simply
&lt;a href="https://twitter.com/e_choroba/status/1406747854983602179?s=20"&gt;counting the paths&lt;/a&gt; would
be sufficient, but the problem was edited to instead list the paths. I have to say that
listing them all, along with my own optional variation of drawing the triangles was fun.
The only downside was a bit of initial surprise, and then realization, about just how 
large the number of paths grows.&lt;/p&gt;

&lt;p&gt;It turns out that this task is a slightly disguised description of what is known as a
&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;. The
possible number of paths, the count that is, can be obtained directly from a closed form
approach. No need to actually traverse the paths!&lt;/p&gt;

&lt;p&gt;What I did here was to effectively do a breadth first traversal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A hash is kept of all paths. Keys are the paths themselves and values are an array 
reference containing the current position and all previously visited nodes on that path.
&lt;/li&gt;
&lt;li&gt;Each path is examined and updated to move to the next position proved that next position
exists and has not yet been visited. (See more on visited positions next).
&lt;/li&gt;
&lt;li&gt;The hash of paths is refreshed by moving paths that are completed to an array. Also, 
this code allows for catching paths which deadend (i.e. end up in a corner which is 
impossible to get out of without backtracking over a visited node). Without horizontal 
leftward movements this is not really possible however. Some CPU cycles can be saved by
eliminating these checks, but I decided to leave them in anyway. Please do note the 
unnecessary extra work, however!
&lt;/li&gt;
&lt;li&gt;The traversal ends when all paths have been exhausted, the loop ends, and the paths are
returned.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-117/"&gt;Challenge 117&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc117</id>
    <published>2021-06-20T23:38:00-04:00</published>
    <updated>2021-06-20T23:38:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Recursion in Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></summary>
  <updated>2021-06-20T10:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/recursion"/>  <id>https://perlmaven.com/recursion</id>
  <content type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grants: May 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_may_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-06-18:/post/grants_may_2021_votes</id>
  <published>2021-06-18T22:25:45</published>
  <updated>2021-06-18T22:25:45</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted: Grant Proposal: Raku Dispatch and Compiler Improvements VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN Grant Proposal: Persistent Data Structures for Raku VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN The Grants Committee is excited to see work begin on these. We accept proposals throughout the year; our 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">Grant Proposal: Raku Dispatch and Compiler Improvements</a> (USD 12,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (27 points), 0 NO votes, 3 ABSTAIN</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Grant Proposal: Persistent Data Structures for Raku</a> (USD 7,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (26 points), 0 NO votes, 3 ABSTAIN</p>

<p>The Grants Committee is excited to see work begin on these.</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Parse paragraphs with Regexp::Grammars</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></summary>
  <updated>2021-06-17T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/regexp-grammars-parse-paragraphs"/>  <id>https://perlmaven.com/regexp-grammars-parse-paragraphs</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#516 - Conference in the Cloud</title>
    <link rel="alternate" href="http://perlweekly.com/archive/516.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The highlight of last week was the Conference in the Cloud. It gave us the opportunity to meet and greet Perl and Raku fans from across the globe. On top of that, we got loads of quality talks by experts. Before I talk about anything else, let me thank and congratulate all the organisers and volunteers for such a successful event. I am personally impressed with the video quality of the live and recorded talks.</p>
<p>For me, I find the timing little bit odd as I am in the UK. The day started at 6:30pm British Summer Time, which is not ideal. At the end of a full day at $work, there is hardly any energy left to attend the talks live. But the best part wasthat the recorded talks were available on YouTube immediately. I find it convenient, as I can watch at my own time. Also I can fast-forward if I want to.</p>
<p>Please find below my personal favourites in no particular order.</p>
<p>1. <a href="https://www.youtube.com/watch?v=fKqxdTbGxYY">perlimports or "Where did that symbol come from?" by Olaf Alders</a></p>
<p>2. <a href="https://www.youtube.com/watch?v=aDUxaBsDcDg">Local dev setup for a complex app using docker-compose by Thomas Klausner</a></p>
<p>3. <a href="https://www.youtube.com/watch?v=go7Ru3QQYYs">Introduction to Perl Data Types by William N. Braswell, Jr.</a></p>
<p>4. <a href="https://www.youtube.com/watch?v=FO5ift28RyE">Rummaging in the clOOset by Curtis Poe</a></p>
<p>5. <a href="https://www.youtube.com/watch?v=kxMfnk3fQlY">Life after Perl (and Raku) by Peter Sergeant</a></p>
<p>6. <a href="https://www.youtube.com/watch?v=FlGpiS39NMY">What's new in Perl? by Ricardo Signes</a></p>
<p>7. <a href="https://www.youtube.com/watch?v=Kc_bP73xNyM">Perl's Amazing Time Machine by Paul Evans</a></p>
<p>8. <a href="https://www.youtube.com/watch?v=ZY8HrAL755M">Valiant - Heroic validations for Moo and DBIC classes by John Napiorkowski</a></p>
<p>9. <a href="https://www.youtube.com/watch?v=y2_bqfLUHDM">Our shared vision of Perl by Andrew Solomon</a></p>
<p>10. <a href="https://www.youtube.com/watch?v=En49kYRDbsg">Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion by Zaki Mughal</a></p>
<p>There are plenty more to watch later. You can find the complete list <a href="https://www.youtube.com/c/YAPCNA/videos">here</a>.</p>
<p>Enjoy the rest of the newsletter and please stay safe.</p></div>
    </content>
    <id>http://perlweekly.com/archive/516.html</id>
    <published>2021-06-14T10:00:00Z</published>
    <updated>2021-06-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Create a lexical warning that can be turned on and off with the "warnings" pragma.</title>
  <summary type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></summary>
  <updated>2021-06-14T08:10:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/create-warning"/>  <id>https://perlmaven.com/create-warning</id>
  <content type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Evolving a Sequence with a Functional Genome: The Weekly Challenge 116</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/13#pwc116" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to split the given number such that the 
difference between two consecutive numbers is always 1, and it shouldn't have a leading 0.
Print the given number if it impossible to split the number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use AI::Genetic;

use constant THRESHOLD =&gt; 0;
use constant NUMBERS   =&gt; "1234";

sub no_op{
    my($x) = @_;
    return (caller(0))[3] if !defined($x);
    return $x;
}

sub get_1{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 1);
}

sub get_2{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 2);
}

sub get_3{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 3);
}

sub get_4{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 4);
}

sub fitness{
    my($genes) = @_;
    my $s = NUMBERS;
    my $fitness = -1 * (length($s) -1);
    my @operands;
    for my $gene (@{$genes}){
        if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
            push @operands, $gene-&gt;($s);
            return -1 * NUMBERS if length($s) &lt; $i;
            $s = substr($s, $i) if length($s) &gt;= $i;
        }
    }
    $s = NUMBERS;
    for(my $i = 0; $i &lt; @operands - 1; $i++){
        if($operands[$i] == ($operands[$i + 1] - 1)){
            $fitness++;
            my $chars = length($operands[$i]);
            $s = substr($s, $chars);
        }
    }
    if($operands[@operands - 1] &amp;&amp; $operands[@operands - 2]){
    if($operands[@operands - 1] == ($operands[@operands - 2] + 1)){
        my $chars = length($operands[@operands - 1]);
        $s = substr($s, $chars);
    }
    }
    $fitness *= length($s);
    return $fitness;
}

sub terminate{
    my($aig) = @_;
    my $top_individual = $aig-&gt;getFittest();
    if($top_individual-&gt;score == THRESHOLD){
        my $genes = $top_individual-&gt;genes();
        my $s = NUMBERS;
        my @operands;
        for my $gene (@{$genes}){
            if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
                push @operands, $gene-&gt;($s);
                $s = substr($s, $i);
            }
        }
        print join(",", @operands) . "\n";
        return true;
    }
    print NUMBERS . "\n";
    return true;
}

MAIN:{
    my $aig = new AI::Genetic(
        -fitness    =&gt; \&amp;fitness,
        -type       =&gt; "listvector",
        -population =&gt; 50000,
        -crossover  =&gt; 0.9,
        -mutation   =&gt; 0.1,
        -terminate  =&gt; \&amp;terminate,
    );
    my $genes = [];
    for (0 .. 7){
        push @{$genes}, [\&amp;get_1, \&amp;get_2, \&amp;get_3, \&amp;get_4, \&amp;no_op],
    }
    $aig-&gt;init(
        $genes
    );
    $aig-&gt;evolve("tournamentUniform", 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1,2,3,4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is slightly similar to the 
&lt;a href="https://adamcrussell.livejournal.com/15036.html"&gt;Only 100, please&lt;/a&gt; task from Challenge
044. In that previous task we are given a string of numbers and asked to split the string
with only + or - operations to arrive at a value of 100. Here we must similarly split
the string of numbers, but the criteria is different. Here we need to assemble the string
into numbers that differ only by 1, if possible.&lt;/p&gt;

&lt;p&gt;As done in that previous challenge we use a not so brutish, yet forceful, approach 
using &lt;a href="https://metacpan.org/pod/AI::Genetic"&gt;AI::Genetic&lt;/a&gt;. In this way our program learns
the best way to achieve our goal given a fitness function which allows it to evaluate
different splitting patterns and smartly choose the next attempt.&lt;/p&gt;

&lt;p&gt;While avoiding evaluating a great many possible combinations, I must admit to a certain 
brutishness here in that I did not spend much time tuning the parameters used. Also, 
the &lt;code&gt;get_&lt;/code&gt; functions will not scale very well for very long strings. It would be possible
to generate these functions in a loop using a functional programming style currying 
approach dependent on the length of the input string. Imagine an input of 1 followed by 
999 0s, then a 1 followed by 998 0s and final 1. This use of AI::Genetic would certainly 
work with such an input given proper &lt;code&gt;get_&lt;/code&gt; functions, very many of which would be quickly
be lost in the evolutionary dust, so to speak.&lt;/p&gt;

&lt;p&gt;The use of function references for the genes is not something I am aware of outside of my
own usage. I like to call this a &lt;em&gt;Functional Genome&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to find out if the given number $N is 
such that sum of squares of all digits is a perfect square. Print 1 if it is otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;

sub sum_squares{
    my($n) = @_;
    my @digits = split(//, $n);
    my $sum = 0;
    map { $sum += ($_ ** 2) } @digits;
    return (ceil(sqrt($sum)) == floor(sqrt($sum)));
}

MAIN:{
    my($N);
    $N = 34;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 50;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 52;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This task is well suited for Perl. We can make quick work of what might be a heavier lift
in other languages by &lt;code&gt;split&lt;/code&gt;-ting the number into individual digits and then using a 
&lt;code&gt;map&lt;/code&gt; to perform the summing of the squares. The &lt;a href="https://perldoc.perl.org/POSIX"&gt;POSIX&lt;/a&gt;
module provides convenient &lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt; functions for checking to see if the result
is a perfect square.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-116/"&gt;Challenge 116&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-044/"&gt;Challenge 044 | Only 100, please&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc116</id>
    <published>2021-06-13T21:17:00-04:00</published>
    <updated>2021-06-13T21:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
