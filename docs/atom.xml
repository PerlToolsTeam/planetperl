<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-04-10T10:47:17Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
  <title>Buffering or autoflush?</title>
  <summary type="html"><![CDATA[<p>
By default every filehandle opened for writing is buffered. We can turn of buffering (or in other words turn on autoflush)
by calling the <b>autoflush</b> method of the filehandle.
<p>
Alternatively we can use <b>select</b> and set <a href="/outout-autoflush">$|, $OUTPUT_AUTOFLUSH to 1</a> to enable autoflush.
<p>
The recommended solution is the one in this article as it makes the code more readable.
<p>
]]></summary>
  <updated>2021-04-10T11:35:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/autoflush"/>  <id>https://perlmaven.com/autoflush</id>
  <content type="html"><![CDATA[<p>
By default every filehandle opened for writing is buffered. We can turn of buffering (or in other words turn on autoflush)
by calling the <b>autoflush</b> method of the filehandle.
<p>
Alternatively we can use <b>select</b> and set <a href="/outout-autoflush">$|, $OUTPUT_AUTOFLUSH to 1</a> to enable autoflush.
<p>
The recommended solution is the one in this article as it makes the code more readable.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>$| or $OUTPUT_AUTOFLUSH - Buffering or autoflush?</title>
  <summary type="html"><![CDATA[<p>
If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel.
<p>
By default STDOUT - the standard output is the selected channel and the default value of the <b>$|</b> variable is 0.
That means it is buffered.
<p>
<b>$OUTPUT_AUTOFLUSH</b> is the name of the variable when the <a href="/english">English</a> module is used.
<p>
]]></summary>
  <updated>2021-04-10T11:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/output-autoflush"/>  <id>https://perlmaven.com/output-autoflush</id>
  <content type="html"><![CDATA[<p>
If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel.
<p>
By default STDOUT - the standard output is the selected channel and the default value of the <b>$|</b> variable is 0.
That means it is buffered.
<p>
<b>$OUTPUT_AUTOFLUSH</b> is the name of the variable when the <a href="/english">English</a> module is used.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Perl One-liner: countdown on the command line:</title>
  <summary type="html"><![CDATA[<p>
This one-line written in Perl will show a coundown on the command line: Try it.
<p>
]]></summary>
  <updated>2021-04-10T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/oneliner-countdown-on-the-command-line"/>  <id>https://perlmaven.com/oneliner-countdown-on-the-command-line</id>
  <content type="html"><![CDATA[<p>
This one-line written in Perl will show a coundown on the command line: Try it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Live Zoom programming Sunday with Gabór Szabó</title>
    <link rel="alternate" href="https://dev.to/mjgardner/live-zoom-programming-sunday-with-gabor-szabo-1m68" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>We’re doing part 2 of pair programming a course management app in Perl and Mojolicious this <strong>Sunday at 10 AM</strong> Central US time. <a href="https://perlmaven.com/course-management-app-in-mojolicious">Get more details and register here.</a></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/live-zoom-programming-sunday-with-gabor-szabo-1m68</id>
    <published>2021-04-09T18:10:29Z</published>
    <updated>2021-04-09T18:10:29Z</updated>
    <category term="perl"/>
    <category term="meetup"/>
    <category term="mojolicious"/>
    <category term="pairprogramming"/>
  </entry>
  <entry>
  <title>.env - the dot env application configuration file</title>
  <summary type="html"><![CDATA[<p>
There are a numeber of frameworks and applications that check if there is a <b>.env</b> file in the root directory
of the project and if there is one, then load it to enhance the content of the Environment variables.
<p>
Perl gives access to the environment variables via the <b>%ENV</b> hash.
<p>
]]></summary>
  <updated>2021-04-09T16:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dot-env"/>  <id>https://perlmaven.com/dot-env</id>
  <content type="html"><![CDATA[<p>
There are a numeber of frameworks and applications that check if there is a <b>.env</b> file in the root directory
of the project and if there is one, then load it to enhance the content of the Environment variables.
<p>
Perl gives access to the environment variables via the <b>%ENV</b> hash.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Test code which is using fork</title>
  <summary type="html"><![CDATA[<p>
There are cases when you have some code using <b>fork</b> the question arises how to test them.
<p>
Here is a simple example:
<p>
]]></summary>
  <updated>2021-04-09T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/test-code-which-is-forking"/>  <id>https://perlmaven.com/test-code-which-is-forking</id>
  <content type="html"><![CDATA[<p>
There are cases when you have some code using <b>fork</b> the question arises how to test them.
<p>
Here is a simple example:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Proxying web feeds with Dancer2</title>
    <link rel="alternate" href="https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I registered the domain dave.org.uk in March 1999 and I've had a web site set up there since very soon after that. Over those twenty-two years, it's had a <a href="https://web.archive.org/web/19990701000000*/https://dave.org.uk/">number of different looks</a> and has been powered by various technologies. For a lot of the time, it was raw HTML; I then think I moved it to Movable Type for a while. But for the last few years, it's been running on WordPress.</p>

<p>I've got a lot of time for WordPress. It's a nice content management system, but I've started to think that it's rather overcomplicated for a site that has mostly turned into a collection of widgets and web feeds that tell people what I've been doing on various other sites.</p>

<p>Regular readers will know I've dabbled a bit with <a href="https://pages.github.com/">GitHub Pages</a> and a few weeks ago, I started to wonder if I'd be better off running this site using those. I set up <a href="https://github.com/davorg/dave.org.uk">a repo</a> and started to investigate.</p>

<p>The big limitation with GitHub pages is that it will only serve static pages. <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">GitHub Actions gives us ways to mitigate that slightly</a>, but that's not what I wanted here. For most of the pages on my site, I wanted to display data from other sites using some kind of Javascript widget.</p>

<p>There are basically two scenarios to deal with. On the <a href="https://dave.org.uk/reading/">Reading</a> page, for example, I'm displaying my recent reading history from my Goodreads account. On the other hand, the <a href="https://dave.org.uk/writing/">Writing</a> page just displays the contents of a web feed. In the WordPress world, I just found <a href="https://en-gb.wordpress.org/plugins/">plugins</a> that did what I wanted, now I'd need to dig a bit deeper and find (or, perhaps, write) widgets to do this.</p>

<p>I found a couple of widgets that did what I wanted (one for Goodreads and another for Instagram) but none of the web feed widgets I could find produced output that I was happy with. So I wrote my own. Actually, I wrote two - one for <a href="https://github.com/davorg/rss_widget">RSS feeds</a> and another for <a href="https://github.com/davorg/rss_widget">Atom feeds</a> (I should really spend the time to combine them into one). And when I was testing my solutions I kept falling over CORS errors.</p>

<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-origin resource sharing</a> (or CORS) is a mechanism that controls how domains are able to reuse resources from a different domain. And the default setting is that they probably can't.</p>

<p>If you think about the RSS widget on my writing page, for example, it reads the <a href="https://dev.to/feed/davorg">RSS feed for my dev.to</a> posts, parses the data and then formats it into HTML which it then inserts into the page. It reads the RSS feed by making an HTTP request to the dev.to site. But CORS, by default, says that if you're not making a request from the domain that hosts the feed (i.e. dev.to) then you can't get that resource by making a Javascript request. You'll get a CORS error. The way to fix it is for the person hosting the feed you're interested in to add a header to the response saying that reuse is OK. The header looks like this:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Access-Control-Allow-Origin: http://www.example.com
</code></pre>

</div>

<p>Or this:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Access-Control-Allow-Origin: *
</code></pre>

</div>

<p>The first allows reuse by requests from example.com; the second allows reuse by anyone (and is probably a bad idea).</p>

<p>So I was getting these CORS errors while testing my RSS and Atom widgets. And they can only be fixed by the people who own the resources (i.e. the web feeds). Now, on the writing page, I was lucky. I own most of the sites where I blog - <a href="https://perlhacks.com/">Perl Hacks</a> and <a href="https://blog.dave.org.uk">Davblog</a> are both WordPress sites that I run. And I found a WordPress plugin that allowed me to add the required headers. I also blog on dev.to (as you'll see from this post!) and, luckily, dev.to already include the correct headers for my widgets to work.</p>

<p>But not every page was as simple. I use <a href="https://trakt.tv/">Trakt.tv</a> to track the films and TV shows that I'm watching. They'll give me an Atom feed of what I've been watching recently, but it comes without the CORS header so I can't use it in my widget.</p>

<p>And then I had an idea.</p>

<p>CORS only blocks requests that come from browsers. Requests that come from back-end programs work just as they always have. So I could set up some kind of proxy system where I request a feed from a server that I control but that server then requests the data from another (non-CORS-friendly) site and passes the data back to the original requester with the CORS header added.</p>

<p>Half an hour dabbling with <a href="https://perldancer.org/">Dancer2</a> and a bit of DNS and nginx configuration and <a href="https://feeds.dave.org.uk/">feeds.dave.org.uk</a> was working. Currently, it only runs two feeds - the Film and TV one I mentioned above and another which tells you what I've been listening to (through the magic of <a href="https://www.last.fm/">Last.fm</a> and their scrobbling service. Last.fm used to provide a web feed of tunes I'd been listening to, but they turned it off a few years ago and now I build a web feed from JSON I get back from their API (<a href="https://github.com/davorg/lastfm-feed">the code to do it is online</a>).</p>

<p>If you go to the <a href="https://feeds.dave.org.uk/">front page</a>, you'll get a list of the available feeds. Clicking on one of those links will give you the required feed with the correct CORS feed added.</p>

<p>The feed proxy code needs a lot of cleaning up, but it does the job. <a href="https://github.com/davorg/feeds">It's on GitHub</a> if you think it might be interesting to you.</p>

<p>And the new version of my site is <a href="https://davorg.dev/dave.org.uk/">coming together fast</a>. I haven't switched the domain over yet, but it can't be that far away.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</id>
    <published>2021-04-08T15:00:18Z</published>
    <updated>2021-04-08T15:00:18Z</updated>
    <category term="cors"/>
    <category term="perl"/>
    <category term="feeds"/>
    <category term="dancer2"/>
  </entry>
  <entry>
    <title>You Need Measurable Goals</title>
    <link rel="alternate" href="https://dev.to/ovid/you-need-measurable-goals-47g9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>One thing I try to reinforce with clients, particularly those who have "big" projects, is that they need measurable success criteria. Sometimes that's dangerous because numbers can be gamed—such as the support manager who won an award for reducing support calls, only to find he had hidden the support phone number on our web site—but if you have <em>measurable</em> goals, you can use that to declare success or failure, rather than punting on the problem.</p>

<p>Case in point is my favorite "successful" project: I was with a company that decided to rewrite a massive Perl system in C++ because Perl was too slow.</p>

<p>Already, I know several of you want to know what "too slow" means in this context, but no, you gotta wait for the punchline.</p>

<p>This project was written years ago and was thus "legacy" code. It was clunky, but critical. Honestly, fixing it would have been cheaper and faster than a rewrite, but you probably know that. The dangers of rewrites are well-known.</p>

<p>But it didn't matter. Perl was too slow, so C++ it was.</p>

<p>And unlike many rewrites, this one was finished. It took them years, but they finished. The new code was a bit of a pig, but they finally lifted the millstone of Perl's performance from around their neck.</p>

<p>But there was a small problem. Turns out the C++ system, years in development, a steaming pile of ones and zeros, and possibly just a wee bit unmaintainable ...</p>

<p>... didn't run any faster than the Perl system it replaced.</p>

<p>You know what makes software slow? Network congestion. I/O issues. SOAP instead of JSON. RPC. Oh, and the database. It's always the database. Unless a system is CPU-bound, changing the programming language will often gain you no performance improvements!</p>

<p>The new project was started years ago, so when I asked, no one was sure if the system that was "too slow" had any performance profiling done to find the bottlenecks.</p>

<p>But management crowned it a success anyway, because now that it was done, no one wanted to admit that its only measurable success criteria showed it to be a complete failure.</p>

<p>When I left the company there was talk—I'm not kidding—about rewriting the system in Perl.</p>

</div>
    </content>
    <author>
      <name>Ovid</name>
    </author>
    <id>https://dev.to/ovid/you-need-measurable-goals-47g9</id>
    <published>2021-04-08T05:30:06Z</published>
    <updated>2021-04-08T05:30:06Z</updated>
    <category term="perl"/>
    <category term="cpp"/>
    <category term="performance"/>
  </entry>
  <entry>
    <title>Regression Testing Table Data with Spreadsheet::Compare</title>
    <link rel="alternate" href="https://dev.to/tomk3003/regression-testing-table-data-with-spreadsheet-compare-34g6" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jo5ZSqSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dok1p7tpj1fz7ow5fk6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jo5ZSqSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dok1p7tpj1fz7ow5fk6z.png" alt="example of a result displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An often used method for regression testing software changes is comparing created data before and after deployment of the change. On systems that produce a lot of data, the deviations as well as the underlying causes may be numerous. &lt;/p&gt;

&lt;p&gt;If you want to do that on a regular basis - e.g. with reference data in a nightly build process or during tests for a new version of a business application - you might want to define a number of fine tuned comparison definitions that help to get a quick overview where to look or what to fix first.&lt;/p&gt;

&lt;p&gt;As an aid to make that task a bit easier, I have uploaded the new module [Spreadsheet::Compare]&lt;a href="https://metacpan.org/pod/Spreadsheet::Compare"&gt;https://metacpan.org/pod/Spreadsheet::Compare&lt;/a&gt;) to CPAN.&lt;/p&gt;

&lt;p&gt;Here a list of the main features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;define a list of comparisons as YAML configuration&lt;/li&gt;
&lt;li&gt;read input data from CSV, fixed record files, databases and various spreadsheet formats (ODS, XLS, XLSX)&lt;/li&gt;
&lt;li&gt;create reports with highlighted deviations in HTML or XLSX format&lt;/li&gt;
&lt;li&gt;filter data (e.g. ignore columns or rows)&lt;/li&gt;
&lt;li&gt;define limits for deviations in numerical values and highlight them in the reports&lt;/li&gt;
&lt;li&gt;provide methods to limit memory usage for large amounts of data&lt;/li&gt;
&lt;li&gt;run comparisons in parallel&lt;/li&gt;
&lt;li&gt;run multiple comparison configurations as a suite&lt;/li&gt;
&lt;li&gt;easily extendable by subclassing Reader or Reporter base classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the documentation of the available modules and configuration options is essentially complete, the module's documentation needs to be extended with a tutorial to elaborate on the possibilities and show how to translate that into configuration values.&lt;/p&gt;

&lt;p&gt;So let's do that:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;By installing Spreadsheet::Compare (e.g. with cpanm)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cpanm Spreadsheet::Compare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will get the basic set of modules, the command line utility &lt;code&gt;spreadcomp&lt;/code&gt; and a number of needed modules as dependencies. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mojolicious&lt;/li&gt;
&lt;li&gt;Excel::Writer::XLSX&lt;/li&gt;
&lt;li&gt;Log::Log4perl&lt;/li&gt;
&lt;li&gt;Text::CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few other modules not automatically installed. You may need those for being able to read certain data formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text::CSV_XS (for significantly better CSV performance)&lt;/li&gt;
&lt;li&gt;DBI and appropriate DBD modules for database connection&lt;/li&gt;
&lt;li&gt;Spreadsheet::Read (for reading Spreadsheet formats) and at least one of:

&lt;ul&gt;
&lt;li&gt;Spreadsheet::ParseODS&lt;/li&gt;
&lt;li&gt;Spreadsheet::ParseXLSX&lt;/li&gt;
&lt;li&gt;Spreadsheet::ParseExcel&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For integration into your own Perl scripts use &lt;code&gt;Spreadsheet::Compare&lt;/code&gt; directly in your scripts. &lt;code&gt;spreadcomp&lt;/code&gt; is just a small wrapper around the main module. The command line options correspond to matching attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spreadcomp:

    Compare spreadsheets or databases and create a report for the detected
    differences. This is the command line frontend script for the Perl
    module Spreadsheet::Compare.
    See https://metacpan.org/pod/Spreadsheet::Compare for more information.

Usage:
        spreadcomp -c &amp;lt;YAML-config-file&amp;gt; [-d] [-j] [-q] [-h] [-m]

        Options:
            -c, --config
                YAML config file for comparison (required)

            -d, --debug
                Set the debug level (optional), possible values are:
                  TRACE, DEBUG, INFO, WARN, ERROR or FATAL
                This can also be set with the environment variable
                  SPREADSHEET_COMPARE_DEBUG

            -j --jobs
                Set the number of concurrent subprocesses to use (optional, defaults to 1)
                This will use threads under Windows which means that the non thread safe
                Text::CSV_XS cannot be used for CSV processing. By using Text::CSV_PP
                processing can be slower than using the default.

            -q --quiet
                Don't show the line counter while running.

            -h, --help
                 Display this message

            -m, --manual
                 Display complete manual (e.g. config file specifications)

            -v, --version
                 Display version number and exit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-simple" class="anchor"&gt;
  &lt;/a&gt;
  Starting simple
&lt;/h2&gt;

&lt;p&gt;For easy creation of sample data I have used the small version of the Northwind database available at&lt;br&gt;
&lt;a href="https://github.com/jpwhite3/northwind-SQLite3"&gt;https://github.com/jpwhite3/northwind-SQLite3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I duplicated the tables &lt;strong&gt;Order&lt;/strong&gt;, and &lt;strong&gt;Product&lt;/strong&gt; as &lt;strong&gt;NewOrder&lt;/strong&gt;, and &lt;strong&gt;NewProduct&lt;/strong&gt; and changed some values to generate some discrepancies. So we are ready to start. Let's create a very basic comparison configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;order"&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;DB&lt;/span&gt;
  &lt;span class="na"&gt;dsns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbi:SQLite:dbname=Northwind_small.sqlite'&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [Order]&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [NewOrder]&lt;/span&gt;
  &lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using just one database and compare the records returned from two different statements. It is also possible to use the same statement but different databases or keep this separate for both.&lt;/p&gt;

&lt;p&gt;The most important part is defining the identity for a record. Here we use the column &lt;code&gt;Id&lt;/code&gt;. The option &lt;code&gt;identity&lt;/code&gt; takes a list of columns, so we could use a combination of columns here that define a unique record.&lt;/p&gt;

&lt;p&gt;Saving this as &lt;code&gt;nw_base1.yml&lt;/code&gt; we can start the first comparison:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;spreadcomp &lt;span class="nt"&gt;-c&lt;/span&gt; nw_base1.yml
0000001660
nw_base1/order
LEF:000830 RIG:000830 SAM:000737 DIF:000092 LIM:000000 MIS:000001 ADD:000001 DUP:000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We didn't configure any reporting yet, so all we get is a short summary about the findings. This looks a bit cryptic but is easily explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the first line is the number of records read, the sum for both sides of the comparison; this is a running counter that
will show progress for larger datasets and can be disabled by the &lt;code&gt;--quiet&lt;/code&gt; command line option.&lt;/li&gt;
&lt;li&gt;the second line is just the file name and the title of the comparison&lt;/li&gt;
&lt;li&gt;the third line shows the results of the comparison

&lt;ul&gt;
&lt;li&gt;LEF: the number of records read from he left side&lt;/li&gt;
&lt;li&gt;RIG: the number of records read from he right side&lt;/li&gt;
&lt;li&gt;SAM: the number of records with an identical match&lt;/li&gt;
&lt;li&gt;DIF: the number of records with deviations&lt;/li&gt;
&lt;li&gt;LIM: the number of deviations below configured limits&lt;/li&gt;
&lt;li&gt;MIS: the number of records on the left without a match on the right&lt;/li&gt;
&lt;li&gt;ADD: the number of records on the right without a match on the left&lt;/li&gt;
&lt;li&gt;DUP: the number of duplicate Id values, the sum of left and right&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-report" class="anchor"&gt;
  &lt;/a&gt;
  Adding a report
&lt;/h2&gt;

&lt;p&gt;So far so good, but to be able to do anything about those differences we need to see the values. So lets add some reporting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;order&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;DB&lt;/span&gt;
  &lt;span class="na"&gt;dsns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbi:SQLite:dbname=Northwind_small.sqlite'&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [Order]&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [NewOrder]&lt;/span&gt;
  &lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Id&lt;/span&gt;
  &lt;span class="na"&gt;reporter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HTML&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could have used &lt;code&gt;reporter: XLSX&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Next try, now with debugging enabled to see, what's going on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;spreadcomp &lt;span class="nt"&gt;-c&lt;/span&gt; nw_base1.yml &lt;span class="nt"&gt;-d&lt;/span&gt; INFO &lt;span class="nt"&gt;-q&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] 
&lt;span class="o"&gt;[&lt;/span&gt;1277406] &lt;span class="o"&gt;==================================================&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] &lt;span class="o"&gt;||&lt;/span&gt; RUNNING TEST &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;order&amp;lt;&amp;lt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] &lt;span class="o"&gt;==================================================&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] loading Spreadsheet::Compare::Reader::DB
&lt;span class="o"&gt;[&lt;/span&gt;1277406] running comparison nw_base1/order
&lt;span class="o"&gt;[&lt;/span&gt;1277406] Reporter Args: &lt;span class="nt"&gt;---&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] connecting to &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;dbi:SQLite:dbname&lt;span class="o"&gt;=&lt;/span&gt;Northwind_small.sqlite&amp;lt;&amp;lt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] connecting to &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;dbi:SQLite:dbname&lt;span class="o"&gt;=&lt;/span&gt;Northwind_small.sqlite&amp;lt;&amp;lt;
&lt;span class="o"&gt;[&lt;/span&gt;1277406] Fetched 830 records from left
&lt;span class="o"&gt;[&lt;/span&gt;1277406] Fetched 830 records from right
&lt;span class="o"&gt;[&lt;/span&gt;1277406] last_pass:1
&lt;span class="o"&gt;[&lt;/span&gt;1277406] saving HTML report to &lt;span class="s1"&gt;'order.html'&lt;/span&gt;
nw_base1/order
LEF:000830 RIG:000830 SAM:000737 DIF:000092 LIM:000000 MIS:000001 ADD:000001 DUP:000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The number in brackets is the process id. This gets relevant when we run the comparisons in parallel processes and need to know wich comparison the debug statement belongs to.&lt;/p&gt;

&lt;p&gt;And this is, what &lt;code&gt;order.html&lt;/code&gt; looks like in a browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXZsX5T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pgt1tx28562i4tmskr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXZsX5T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pgt1tx28562i4tmskr4.png" alt="differences displayed as HTML"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXVsrGCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgzwe51que7fjtl6og6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXVsrGCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgzwe51que7fjtl6og6j.png" alt="missing displayed as HTML"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elDqI26q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hooelqy49df1a08hf48u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elDqI26q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hooelqy49df1a08hf48u.png" alt="additional of diff displayed as HTML"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0KGkZW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eosqe2dsmyhq6tvshwx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0KGkZW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eosqe2dsmyhq6tvshwx4.png" alt="duplicates of diff displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can see exactly which values differ with the rest of the data as context. By default, matching records are not displayed at all. It would just slow things down for large record sets. But there is an option &lt;code&gt;report_all_data&lt;/code&gt; for that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-limits" class="anchor"&gt;
  &lt;/a&gt;
  Using Limits
&lt;/h2&gt;

&lt;p&gt;Sometimes differences below a certain margin may be acceptable or are obscuring the bigger deviations that are more important. For that we can define limits on columns with numerical values. You can have absolute and/or relative limits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;order&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;DB&lt;/span&gt;
  &lt;span class="na"&gt;dsns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbi:SQLite:dbname=Northwind_small.sqlite'&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [Order]&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [NewOrder]&lt;/span&gt;
  &lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Id&lt;/span&gt;
  &lt;span class="na"&gt;reporter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HTML&lt;/span&gt;
  &lt;span class="na"&gt;limit_rel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.1&lt;/span&gt;
    &lt;span class="na"&gt;Freight&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;     &lt;span class="m"&gt;0.08&lt;/span&gt;
  &lt;span class="na"&gt;limit_abs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Limits are defined by column. There is a special column &lt;code&gt;__default__&lt;/code&gt; for setting a baseline. By setting a special limit of &lt;code&gt;none&lt;/code&gt;, the limit will not be checked at all. This is different from an undefined value or the value 0, which means no tolerance at all (this is the default).&lt;/p&gt;

&lt;p&gt;We only want to have relative limits so we disabled the absolute ones with &lt;code&gt;__default__: none&lt;/code&gt;. Then we added a 10% limit as default and an 8% limit for the column Freight.&lt;/p&gt;

&lt;p&gt;Now we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;spreadcomp &lt;span class="nt"&gt;-c&lt;/span&gt; nw_base1.yml &lt;span class="nt"&gt;-q&lt;/span&gt;
nw_base1/order
LEF:000830 RIG:000830 SAM:000737 DIF:000092 LIM:000073 MIS:000001 ADD:000001 DUP:000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So 73 differences are below our relative limits. The report for that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aM4K2eet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqxevrfgjfh3gma2h69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aM4K2eet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqxevrfgjfh3gma2h69.png" alt="differences displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not interested about deviations below the limit, you can set&lt;br&gt;
&lt;code&gt;below_limit_is_equal: 1&lt;/code&gt; and it will look exactly as if the values where equal.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-comparisons" class="anchor"&gt;
  &lt;/a&gt;
  More Comparisons
&lt;/h2&gt;

&lt;p&gt;Now we will add another comparison to the configuration. To save typing we can factor out common settings into a special section wtih the special title &lt;code&gt;__DEFAULT__&lt;/code&gt;. All global values can be later overwritten in the individual sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;           &lt;span class="s"&gt;__GLOBAL__&lt;/span&gt;
  &lt;span class="na"&gt;reporter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;HTML&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;            &lt;span class="s"&gt;DB&lt;/span&gt;
  &lt;span class="na"&gt;dsns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbi:SQLite:dbname=Northwind_small.sqlite'&lt;/span&gt;
  &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;         &lt;span class="s"&gt;HTML&lt;/span&gt;
  &lt;span class="na"&gt;report_diff_row&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Id&lt;/span&gt;
  &lt;span class="na"&gt;limit_rel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.1&lt;/span&gt;
    &lt;span class="na"&gt;Freight&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;     &lt;span class="m"&gt;0.08&lt;/span&gt;
  &lt;span class="na"&gt;limit_abs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="c1"&gt;#=============================================&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;order&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [Order]&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [NewOrder]&lt;/span&gt;
&lt;span class="c1"&gt;#=============================================&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;order details&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [OrderDetails_V]&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;select * from [NewOrderDetails_V]&lt;/span&gt;
  &lt;span class="na"&gt;diff_relative&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;UnitPriceProduct&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added some new options here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;summary: HTML&lt;/code&gt; creates an HTML overview page with links to the single comparisons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;report_diff_row&lt;/code&gt; adds an additional line to each difference showing the deviation for each column (for numerical
values the default is the absolute difference).&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;diff_relative&lt;/code&gt; the relative difference can be shown in the added diff row (per column)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;spreadcomp &lt;span class="nt"&gt;-c&lt;/span&gt; nw_base2.yml &lt;span class="nt"&gt;-q&lt;/span&gt;
nw_base2/order
LEF:000830 RIG:000830 SAM:000737 DIF:000092 LIM:000073 MIS:000001 ADD:000001 DUP:000000
nw_base2/order details
LEF:002155 RIG:002153 SAM:001071 DIF:001082 LIM:001013 MIS:000002 ADD:000000 DUP:000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the summary HTML page &lt;code&gt;nw_base2.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mRscvsHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubj4v0dgn1281fiw0vo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRscvsHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubj4v0dgn1281fiw0vo4.png" alt="summary displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The summary only consists of the same status information as the one given on the command line. But we have a menu on the left where we can browse through the comparisons.&lt;/p&gt;

&lt;p&gt;Here the differences for the second comparison.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ak-hnvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzd0bi5u93jehtgkbesw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ak-hnvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzd0bi5u93jehtgkbesw.png" alt="differences displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-suite" class="anchor"&gt;
  &lt;/a&gt;
  Building a Suite
&lt;/h2&gt;

&lt;p&gt;To be able to handle a large number of comparisons in an organized way, you can use a starting configuration that branches out to subconfigurations with the &lt;code&gt;suite&lt;/code&gt; option. It takes a list of configuration filenames and can have it's own &lt;code&gt;__GLOBAL__&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Here an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;              &lt;span class="s"&gt;__GLOBAL__&lt;/span&gt;
  &lt;span class="na"&gt;reporter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;           &lt;span class="s"&gt;HTML&lt;/span&gt;
  &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;            &lt;span class="s"&gt;HTML&lt;/span&gt;
  &lt;span class="na"&gt;rootdir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;            &lt;span class="s"&gt;${TESTDIR}/suite&lt;/span&gt;
  &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;               &lt;span class="s"&gt;Reference Data&lt;/span&gt;
  &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;              &lt;span class="s"&gt;Current Data&lt;/span&gt;
  &lt;span class="na"&gt;report_filename&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;reports/%{title}.html&lt;/span&gt;
  &lt;span class="na"&gt;summary_filename&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;reports/suite_summary.html&lt;/span&gt;
  &lt;span class="na"&gt;report_diff_row&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;report_line_source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#=============================================&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;suite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DB/Overview.yml&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DB/OrderDetails.yml&lt;/span&gt;
&lt;span class="c1"&gt;#=============================================&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;suite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CSV/Overview.yml&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CSV/OrderDetails.yml&lt;/span&gt;
&lt;span class="c1"&gt;#=============================================&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;suite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;FIX/Overview.yml&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;FIX/OrderDetails.yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the corresponding report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6676HD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb6wu56iaai3pk09ltvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6676HD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb6wu56iaai3pk09ltvj.png" alt="differences displayed as HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more" class="anchor"&gt;
  &lt;/a&gt;
  More?
&lt;/h2&gt;

&lt;p&gt;This should be enough for a short introduction. If there should be any feedback, I could do a part 2 with advanced options. If you want to you can comment here or head over to the &lt;a href="https://github.com/tomk3003/spreadsheet-compare/discussions"&gt;Github Discussions Page&lt;/a&gt;. &lt;/p&gt;

</content>
    <author>
      <name>tomk3003</name>
    </author>
    <id>https://dev.to/tomk3003/regression-testing-table-data-with-spreadsheet-compare-34g6</id>
    <published>2021-04-06T16:08:36Z</published>
    <updated>2021-04-06T16:08:36Z</updated>
    <category term="perl"/>
    <category term="testing"/>
    <category term="spreadsheet"/>
  </entry>
  <entry>
    <title>The attraction of Test::Fatal in Perl</title>
    <link rel="alternate" href="https://dev.to/mjgardner/the-attraction-of-test-fatal-in-perl-16mi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>In February I wrote an <a href="https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/">article surveying exception handling in Perl</a>, recommending that developers <a href="https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/#testing">use Test::Exception</a> to make sure their code behaves as expected. A commenter on Reddit <a href="https://www.reddit.com/r/perl/comments/lq5iu5/exceptional_perl_failure_is_an_option/gofr7u4/?context=3">suggested I check out Test::Fatal</a> as an alternative. <strong>What advantages does it hold over Test::Exception?</strong></p>

<ul>
<li>It only exports one function compared to Test::Exception’s four: <code>exception</code>, which you can then <strong>use with the full suite of regular <a href="https://metacpan.org/pod/Test::More">Test::More</a> functions</strong> as well as other testing libraries such as <a href="https://metacpan.org/pod/Test::Deep">Test::Deep</a>.</li>
<li>It doesn’t override the <code>caller</code> function or use <a href="https://metacpan.org/pod/Sub::Uplevel">Sub::Uplevel</a> to hide your test blocks from the call stack, so if your exception returns a stack trace you’ll get output from the test as well as the thing throwing the exception. The author <strong>considers this a feature</strong> since Sub::Uplevel is “twitchy.”</li>
</ul>

<p>To ease porting, Test::Fatal also includes two functions, <code>dies_ok</code> and <code>lives_ok</code>, replacing Test::Exception’s functions of the same names. <code>dies_ok</code> <strong>does not provide the exception thrown</strong>, though, so if you’re testing that you’ll need to use <code>exception</code> along with a <a href="http://testanything.org/">TAP</a>-emitting function like <code>is()</code> or <code>like()</code>.</p>

<p>And that’s it! <strong>Either is a valid choice</strong>; it comes down to whether you prefer one approach over another. Test::Exception is also included as part of <a href="https://metacpan.org/pod/Test::Most">Test::Most</a>’s requirements, so if you’re using the latter to reduce boilerplate you’ll be getting the former.</p>

<p>Postscript:</p>

<p>I’d be remiss if I didn’t also mention <a href="https://metacpan.org/pod/Test2::Tools::Exception">Test2::Tools::Exception</a>, which is the <strong>preferred way to test exceptions using the <a href="https://metacpan.org/pod/Test2">Test2</a> framework</strong>. If you’re using Test2, ignore all the above and go straight to Test2::Tools::Exception.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/the-attraction-of-test-fatal-in-perl-16mi</id>
    <published>2021-04-06T14:00:00Z</published>
    <updated>2021-04-06T14:00:00Z</updated>
    <category term="programming"/>
    <category term="exceptions"/>
    <category term="perl"/>
    <category term="qa"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 107: Self-Descripting Numbers and List Methods</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-107-self-descripting-numbers-and-list-methods.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10170</id>
    <published>2021-04-06T02:59:07Z</published>
    <updated>2021-04-06T03:04:57Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 107 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (April 11, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Self-Descriptive Numbers</h2>

<p><em>Write a script to display the first three self-descriptive numbers. As per <a href="https://en.wikipedia.org/wiki/Self-descriptive_number">Wikipedia</a>, the definition of Self-descriptive Number is:</em></p>

<blockquote>
  <p><em>In mathematics, a self-descriptive number is an integer m that in a given base b is b digits long in which each digit d at position n (the most significant digit being at position 0 and the least significant at position b−1) counts how many instances of digit n are in m.</em></p>
</blockquote>

<p><em>For example, 1210 is a four-digit self-descriptive number:</em></p>

<pre><code>position 0 has value 1 i.e. there is only one 0 in the number
position 1 has value 2 i.e. there are two 1 in the number
position 2 has value 1 i.e. there is only one 2 in the number
position 3 has value 0 i.e. there is no 3 in the number
</code></pre>

<p>The process of computing self-descriptive numbers can become very slow as the base becomes large. Although this is not really necessary for computing only the first 3 self-descriptive numbers, we can include some simple performance optimization. The Wikipedia article states that a self-descriptive number in base <code>b</code> must be a multiple of that base (or equivalently, that the last digit of the self-descriptive number must be 0). So we can skip the check for any integer whose representation in a given base doesn&#8217;t end with 0. Also, all self-descriptive numbers have digit sums equal to their base. We can filter out those that don&#8217;t match these two conditions.</p>

<p>Some further optimizations (when the base is larger than or equal to 7) are possible as described in my <a href="http://blogs.perl.org/users/laurent_r/2020/01/perl-weekly-challenge-43-olympic-rings-and-self-descripting-numbers.html">blog post</a> of Jan. 19, 2020 on the same subject. They are not needed here.</p>

<h3>Self-Descriptive Numbers in Raku</h3>

<p>We iterate on bases from 2 to infinity (and exit the loop when we reach the target number of self-descriptive numbers). Then, for a given base, we loop over all integers having a number of digits equal to the base. For each such integer, we filter out those not ending with 0 or whose digit sum is not equal to the base. For the integers not filtered out, we check that each digit d at position n counts how many instances of digit n are in such integer.</p>

<pre><code>use v6;
constant MAX = 4;

my $*count = 0;
for 2..Inf -&gt; $base {
    check-self-desc($base);
    last if $*count &gt;= MAX;
}   

sub check-self-desc (Int $base) {
    my $found = False;
    for $base ** ($base -1) .. $base ** $base -1 -&gt; $num {
        my $num-in-b = $num.base($base);
        next unless $num-in-b ~~ /0$/;
        my @digits = $num-in-b.comb;
        next if $base != [+] @digits;
        my $success = True;
        for 0..$base - 1 -&gt; $rank {
            if (+ $num-in-b.indices($rank) != @digits[$rank]) {
                $success = False;
                last;
            }
        }
        if $success {
            say "Number in base $base: $num-in-b; decimal: $num";
            $*count++;
            $found = True;
            return if $*count &gt;= MAX;
        }   
    }
    say "No self-descriptive number for base $base" unless $found;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
</code></pre>

<p>I wanted to investigate a bit more and decided to change <code>MAX</code> to 4 and to measure the process duration:</p>

<pre><code>$ time raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
No self-descriptive number for base 6
Number in base 7: 3211000; decimal: 389305

real    0m5,684s
user    0m0,031s
sys     0m0,030s
</code></pre>

<p>So it takes about 5.7 seconds. If we comment out the two performance optimizations described above, we get the following result:</p>

<pre><code>$ time raku self-descr.raku
No self-descriptive number for base 2
No self-descriptive number for base 3
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
No self-descriptive number for base 6
Number in base 7: 3211000; decimal: 389305

real    0m17,857s
user    0m0,015s
sys     0m0,031s
</code></pre>

<p>So, about 17.9 seconds without the performance enhancement, the optimizations are worth the effort.</p>

<h3>Self-Descriptive Numbers in Perl</h3>

<p>This is a port of the above Raku program to Perl. Since Perl doesn&#8217;t have any built-in function to convert numbers to a given base, we have to implement our own <code>to_base_b</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature qw /say/;
use constant DIGITS =&gt; ('0'..'9', 'A'..'Z');
use constant MAX =&gt; 3;
my $count = 0;

sub to_base_b { # Converts decimal number to base b string
    my($dec, $base) = @_;
    my @digits;
    while ($dec) {
        unshift @digits, (DIGITS)[$dec % $base];
        $dec = int($dec/$base);
    }
    return join "", @digits;
}

sub check_self_desc {
    my $base = shift;
    for my $num ($base ** ($base -1) .. $base ** $base -1) {
        my $num_in_b = to_base_b ($num, $base);
        next unless $num_in_b =~ /0$/;
        my @digits = split //, $num_in_b;
        my $sum = 0;
        $sum += $_ for split //, $num_in_b;
        next if $sum != $base;
        my $success = 1;
        for my $rank (0..$base - 1) {
            my $nb_digits = $digits[$rank];
            my $num_occ = $num_in_b =~ s/$rank/$rank/g;
            if ($num_occ != $nb_digits) {
                $success = 0;
                last;
            }
        }
        if ($success) {
            say "Number in base $base: $num_in_b; decimal: $num" ;
            $count++;
            return if $count &gt;= MAX;
        }
    }
}

for my $base (2..10) {
    check_self_desc($base);
    last if $count &gt;= MAX;
}
</code></pre>

<p>Output:</p>

<pre><code>$ perl self-descr.pl
Number in base 4: 1210; decimal: 100
Number in base 4: 2020; decimal: 136
Number in base 5: 21200; decimal: 1425
</code></pre>

<h2>Task 2: List Methods</h2>

<p><em>Write a script to list methods of a package/class.</em></p>

<p><em>Example</em></p>

<pre><code>package Calc;

use strict;
use warnings;

sub new { bless {}, shift; }
sub add { }
sub mul { }
sub div { }

1;
</code></pre>

<p><em>Output:</em></p>

<pre><code>BEGIN
mul
div
new
add
</code></pre>

<p>The task is not entirely clear. Maybe we are asked to load a class and introspect the available methods, but I&#8217;ll consider it is more probable that we&#8217;re supposed to parse the file and list the methods defined in it. I&#8217;ll also suppose that we should look for methods in the programming language in which they are defined; in other words, we&#8217;ll be looking for Raku methods in Raku and Perl methods in Perl, although we could obviously perform cross-language searches (for example, use Raku to look for methods in a Perl module, or vice-versa).</p>

<h3>List Methods in Raku</h3>

<p>Raku methods are defined with the <code>method</code> keyword. Raku identifiers can contain alphanumeric characters, plus <code>-</code> dashes and <code>'</code> single quotes. In addition we should avoid finding the <code>method</code> keyword somewhere in a comment. We&#8217;ll be looking for the <code>method</code> keyword as the first thing in a code line (except for possible space characters) and capture the identifier coming immediately after.</p>

<pre><code>use v6;

sub MAIN (Str $file-name) {
     for $file-name.IO.lines -&gt; $line {
        say ~$0 if $line ~~ /^\s* method \s+ (&lt;[-'\w]&gt;+)/;
    }
}
</code></pre>

<p>Example output:</p>

<pre><code>$ ./raku find-methods.raku linked_list.raku
make-array
gist
</code></pre>

<h3>List Methods in Perl</h3>

<p>In Perl, methods use the <code>sub</code> keyword.</p>

<pre><code>use strict;
use warnings;
use feature qw /say/;

while (&lt;&gt;) {
    say $1 if /^\s*sub\s+(\w+)/;
}
</code></pre>

<p>Output:</p>

<pre><code>$ echo 'package Calc;
&gt;
&gt; use strict;
&gt; use warnings;
&gt;
&gt; sub new { bless {}, shift; }
&gt; sub add { }
&gt; sub mul { }
&gt;
sub div { }
&gt;
&gt; 1; '  |  perl  find-methods.pl
new
add
mul
div
</code></pre>

<p>Of course, this is so simple that a Perl one-liner would make sense:</p>

<pre><code>$ echo 'package Calc;
&gt;
&gt; use strict;
&gt; use warnings;
&gt;
&gt; sub new { bless {}, shift; }
&gt; sub add { }
&gt; sub mul { }
&gt; sub div { }
&gt;
&gt; 1;'  |  perl -nE 'say $1 if /^\s*sub\s+(\w+)/;'
new
add
mul
div
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 18, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Grant Proposals: March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_march_2021"/>
  <id>tag:news.perlfoundation.org,2021-04-05:/post/grant_proposals_march_2021</id>
  <published>2021-04-05T10:01:49</published>
  <updated>2021-04-05T10:01:49</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the March voting round. The next round of voting will be held starting in early May.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Future is Now! Perl Role in Malaysia</title>
    <link rel="alternate" href="https://job.perl.careers/sx1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an online financial services company, still rapidly expanding after 20 years of impressive growth. With a truly international presence, they’re well known globally in their niche. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/sx1</id>
    <published>2021-04-05T10:00:48Z</published>
    <updated>2021-04-05T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/1r2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/1r2</id>
    <published>2021-04-05T10:00:47Z</published>
    <updated>2021-04-05T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Smart Shopper = Smart Saver. Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/ahf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they share your dedication to finding consumers the best possible deal on electronics, technology, household appliances, and gaming systems. Best of all, they’re looking for candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/ahf</id>
    <published>2021-04-05T10:00:46Z</published>
    <updated>2021-04-05T10:00:46Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/53q" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/53q</id>
    <published>2021-04-05T10:00:45Z</published>
    <updated>2021-04-05T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/mg6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites. This dynamic team is looking for a senior Perl programmer with a strong understanding of Go programming language, paradigms, constructs, and idioms.</div>
    </content>
    <id>https://job.perl.careers/mg6</id>
    <published>2021-04-05T10:00:44Z</published>
    <updated>2021-04-05T10:00:44Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-04-05T10:00:43Z</published>
    <updated>2021-04-05T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 6, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-04-05T10:00:42Z</published>
    <updated>2021-04-05T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-04-05T10:00:41Z</published>
    <updated>2021-04-05T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-04-05T10:00:40Z</published>
    <updated>2021-04-05T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 14, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-04-05T10:00:39Z</published>
    <updated>2021-04-05T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Houston Perl Mongers Online Meeting: Pairwise and Lightning Talks</title>
    <link rel="alternate" href="http://houston.pm.org/announce_meeting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">April 8th, 2021 06:00 PM Central Time (US and Canada)</div>
    </content>
    <id>http://houston.pm.org/announce_meeting.html</id>
    <published>2021-04-05T10:00:38Z</published>
    <updated>2021-04-05T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Presenting Mojolicious Nine Point Oh!</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, March 31, 2021</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/</id>
    <published>2021-04-05T10:00:37Z</published>
    <updated>2021-04-05T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2021.03</title>
    <link rel="alternate" href="https://szabgab.com/report-2021-03.html" type="text/html"/>
    <id>https://szabgab.com/report-2021-03.html</id>
    <published>2021-04-05T10:00:36Z</published>
    <updated>2021-04-05T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Live events</title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">List of live events: Automation with Rex; Web application development with Mojolicious; BDD with Test::BDD::Cucumber.</div>
    </content>
    <id>https://code-maven.com/live</id>
    <published>2021-04-05T10:00:35Z</published>
    <updated>2021-04-05T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Exploring BDD in Perl - using Test::BDD::Cucumber - part 5 - with Erik Hülsmann</title>
    <link rel="alternate" href="https://perlmaven.com/exploring-bdd-in-perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Event scheduled for April 11</div>
    </content>
    <id>https://perlmaven.com/exploring-bdd-in-perl-5</id>
    <published>2021-04-05T10:00:34Z</published>
    <updated>2021-04-05T10:00:34Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-04-05T10:00:33Z</published>
    <updated>2021-04-05T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2021.13 Games Pop</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/</id>
    <published>2021-04-05T10:00:32Z</published>
    <updated>2021-04-05T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Live Video - Maximum Gap by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/h8NppRqAZaE" type="text/html"/>
    <id>https://youtu.be/h8NppRqAZaE</id>
    <published>2021-04-05T10:00:31Z</published>
    <updated>2021-04-05T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Live Video - Fun Time by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/o67LcSa2bC8" type="text/html"/>
    <id>https://youtu.be/o67LcSa2bC8</id>
    <published>2021-04-05T10:00:30Z</published>
    <updated>2021-04-05T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Live Video - Maximum Gap by Lance Wicks</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=E4Bwh-FVTns" type="text/html"/>
    <id>https://www.youtube.com/watch?v=E4Bwh-FVTns</id>
    <published>2021-04-05T10:00:29Z</published>
    <updated>2021-04-05T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Generate Calendar in ICal format</title>
    <link rel="alternate" href="https://perlmaven.com/generate-calendar-in-ical-format" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This example was written in preparation for the <a href="https://perlweekly.com/perlweekly.ical">calendar file provided by the Perl Weekly</a> site that contains all the Perl-related events we are aware of from our <a href="https://perlweekly.com/events.html">events</a> page. There is also a <a href="https://code-maven.com/events.ics">calendar file</a> provided by the Code Maven site that include all the <a href="https://code-maven.com/live">live events</a>.</div>
    </content>
    <id>https://perlmaven.com/generate-calendar-in-ical-format</id>
    <published>2021-04-05T10:00:28Z</published>
    <updated>2021-04-05T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106.</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/03/29/PWC106/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just loved the hack for the Decimal String task. Beautiful.</div>
    </content>
    <id>https://wlmb.github.io/2021/03/29/PWC106/</id>
    <published>2021-04-05T10:00:27Z</published>
    <updated>2021-04-05T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 106</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-106-1cn7" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon shared his research while working on Decimal String task. We all get it for FREE, thank you.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-106-1cn7</id>
    <published>2021-04-05T10:00:26Z</published>
    <updated>2021-04-05T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Decimal</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_106__Maximum_Decimal.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger shared a cool algorithm to deal with the Decimal String task. Thanks for sharing.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_106__Maximum_Decimal.html</id>
    <published>2021-04-05T10:00:25Z</published>
    <updated>2021-04-05T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: quick and easy</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/03/29/PerlWeeklyChallenge106.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca used his Raku skill and made both tasks look like schoolboy tasks. Simply the best.</div>
    </content>
    <id>https://fluca1978.github.io/2021/03/29/PerlWeeklyChallenge106.html</id>
    <published>2021-04-05T10:00:24Z</published>
    <updated>2021-04-05T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap and Decimal String</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent showing his expertise in multiple languages in this blog post. Incredible.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html</id>
    <published>2021-04-05T10:00:23Z</published>
    <updated>2021-04-05T10:00:23Z</updated>
  </entry>
  <entry>
    <title>PWC106 - Decimal String</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/01/pwc106-decimal-string/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio went beyond what was expected in the task. I need to revisit hi blog post to get to the bottom of it.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/01/pwc106-decimal-string/</id>
    <published>2021-04-05T10:00:22Z</published>
    <updated>2021-04-05T10:00:22Z</updated>
  </entry>
  <entry>
    <title>PWC106 - Maximum Gap</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/31/pwc106-maximum-gap/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's style of blogging is really cool as you don't just get a fine solution but also fun discussion as well.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/31/pwc106-maximum-gap/</id>
    <published>2021-04-05T10:00:21Z</published>
    <updated>2021-04-05T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Just Got Poked: Perl Weekly Challenge 106 and Other News</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/03/just-got-poked-perl-weekly-challenge-106-and-other-news.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave raised a notorious issue when printing decimal fractions using sprintf().</div>
    </content>
    <id>https://jacoby.github.io/2021/04/03/just-got-poked-perl-weekly-challenge-106-and-other-news.html</id>
    <published>2021-04-05T10:00:20Z</published>
    <updated>2021-04-05T10:00:20Z</updated>
  </entry>
  <entry>
    <title>String the Gap with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/string-gap.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne always presents his case with reference documents which give you the complete picture. Keep it up.</div>
    </content>
    <id>https://raku-musings.com/string-gap.html</id>
    <published>2021-04-05T10:00:19Z</published>
    <updated>2021-04-05T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/04" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam's notes section for the Decimal String task is an eye-opener for me. I will go back to it later to gain a better understanding.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/04</id>
    <published>2021-04-05T10:00:18Z</published>
    <updated>2021-04-05T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Decimal String</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's discussion about the Decimal String task is too technical and well worth reading. Thanks for sharing this knowledge.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-2.html</id>
    <published>2021-04-05T10:00:17Z</published>
    <updated>2021-04-05T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail once again showed off his skill and presented his solutions in an elegant blog post.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-106-1.html</id>
    <published>2021-04-05T10:00:16Z</published>
    <updated>2021-04-05T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-106/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Once again, Aaron shared some cool Raku magic. Thanks and keep it up.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-106/</id>
    <published>2021-04-05T10:00:15Z</published>
    <updated>2021-04-05T10:00:15Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 106</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-106" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Maximum Gap" and "Decimal String" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-106</id>
    <published>2021-04-05T10:00:14Z</published>
    <updated>2021-04-05T10:00:14Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 107</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with a couple of fun tasks "Self-descriptive Numbers" and "List Methods". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the <a href="https://perlweeklychallenge.org/faq">FAQ</a>.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-107</id>
    <published>2021-04-05T10:00:13Z</published>
    <updated>2021-04-05T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Date::Parse</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/04/date-parse/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shared the power of Date::Parse. Find out the secret for yourself.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/04/date-parse/</id>
    <published>2021-04-05T10:00:12Z</published>
    <updated>2021-04-05T10:00:12Z</updated>
  </entry>
  <entry>
    <title>A pull request for Crypt::LE</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/30/crypt-le-pr/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's contribution to Crypt::LE is very handy. Please check it out.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/30/crypt-le-pr/</id>
    <published>2021-04-05T10:00:11Z</published>
    <updated>2021-04-05T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Distar - A CPAN Distribution Author Tool</title>
    <link rel="alternate" href="https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Check out this introduction to Distar; a new shiny, handy tool for CPAN distribution authors.</div>
    </content>
    <id>https://dev.to/haarg/distar-a-cpan-distribution-author-tool-5e95</id>
    <published>2021-04-05T10:00:10Z</published>
    <updated>2021-04-05T10:00:10Z</updated>
  </entry>
  <entry>
    <title>CPAN utils</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/cpan-utils-4g4p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Coolest collection of CPAN utils ever.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/cpan-utils-4g4p</id>
    <published>2021-04-05T10:00:09Z</published>
    <updated>2021-04-05T10:00:09Z</updated>
  </entry>
  <entry>
    <title>CPAN Report 2020</title>
    <link rel="alternate" href="http://neilb.org/2021/03/03/cpan-report-2021.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil came up withi an extensive report about activity on the CPAN in 2020.</div>
    </content>
    <id>http://neilb.org/2021/03/03/cpan-report-2021.html</id>
    <published>2021-04-05T10:00:08Z</published>
    <updated>2021-04-05T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Monthly Report - March</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Following the tradition, here is my monthly report for March 2020.</div>
    </content>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html</id>
    <published>2021-04-05T10:00:07Z</published>
    <updated>2021-04-05T10:00:07Z</updated>
  </entry>
  <entry>
    <title>The Zen of Test Suites</title>
    <link rel="alternate" href="https://dev.to/ovid/the-zen-of-test-suites-304f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This should be used as a text for any beginner learning to code. I found it very useful and will definitely bookmark it for future reference.</div>
    </content>
    <id>https://dev.to/ovid/the-zen-of-test-suites-304f</id>
    <published>2021-04-05T10:00:06Z</published>
    <updated>2021-04-05T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Security Issues in Perl IP Address distros</title>
    <link rel="alternate" href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Security Issues in Perl IP Address distros.</div>
    </content>
    <id>https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/</id>
    <published>2021-04-05T10:00:05Z</published>
    <updated>2021-04-05T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Switch lots of things on at once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting blog post by Ben talking about boilerplate solutions.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html</id>
    <published>2021-04-05T10:00:04Z</published>
    <updated>2021-04-05T10:00:04Z</updated>
  </entry>
  <entry>
    <title>TPRCIC 2021 - Call for papers</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tprcic2021callforpapers" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Perl and Raku Conference in the Cloud 2021 celebrates all things Perl and Raku from 8-10 June with group meetings (BOFs) on the Monday and Friday either side of the main event.</div>
    </content>
    <id>https://news.perlfoundation.org/post/tprcic2021callforpapers</id>
    <published>2021-04-05T10:00:03Z</published>
    <updated>2021-04-05T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Kent Fredric's CPAN distributions are available for adoption</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil appeals to all CPAN contributors to ask if they are willing to adopt Kent Fredric's distributions.</div>
    </content>
    <id>http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html</id>
    <published>2021-04-05T10:00:02Z</published>
    <updated>2021-04-05T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Code Maven courses</title>
    <link rel="alternate" href="https://code-maven.teachable.com/p/perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl courses by Gabor Szabo</div>
    </content>
    <id>https://code-maven.teachable.com/p/perl</id>
    <published>2021-04-05T10:00:01Z</published>
    <updated>2021-04-05T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#506 - Perl Memory Management</title>
    <link rel="alternate" href="http://perlweekly.com/archive/506.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>One topic that is rarely talked about with reference to Perl is 'Memory Management'. Could it be that, being a developer, you don't need to worry about it? Possibly yes, as Perl garbage collection is very efficient. However you still have to take care of circular data structures manually. To get to the bottom of the matter, one has to be aware of two things, "reference count" and "weak references". Can CPAN help me with this? Yes, there is a module <a href="https://metacpan.org/pod/Devel::Peek">Devel::Peek</a> available on CPAN. This will help you figure out the "reference count". How about "weak references" now? Well, once again CPAN is handy, you have <a href="https://metacpan.org/pod/Scalar::Util">Scalar::Util</a> available on CPAN, which provides the subroutine weaken() to create "weak references". What is the point of creating "weak references"? Well, in Perl, a "weak reference" doesn't affect the "reference count" and in a way helps you stop memory leaks. I have yet to come across a simple working example to demonstrate this behaviour. However, you might find the two recipes Chapter 11.15 and chapter 13.13 from the our old friend, <a href="https://www.oreilly.com/library/view/perl-cookbook-2nd/0596003137/">Perl Cookbook, second edition</a> very useful. There is another post, <a href="https://www.perl.com/article/the-trouble-with-reference-counting">The Trouble with Reference Counting</a> by David Farrell which is also very interesting.</p>
<p>Talking about books, I recommend you take a look at <a href="https://leanpub.com/perl_new_features">Perl New Features</a> by brian d foy. This book will take you to a memorable journey from Perl v5.10 to v5.32.</p>
<p>To all readers in the United Kingdom, enjoy the Monday bank holiday and rest of world start your week on a happy note starting with the weekly newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/506.html</id>
    <published>2021-04-05T10:00:00Z</published>
    <updated>2021-04-05T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 106: Maximum Gap and Decimal String</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-106-maximum-gap-and-decimal-string.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10169</id>
    <published>2021-04-03T02:41:09Z</published>
    <updated>2021-04-04T22:22:00Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 106 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (April 4, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Maximum Gap</h2>

<p><em>You are given an array of integers <code>@N</code>.</em></p>

<p><em>Write a script to display the maximum difference between two successive elements once the array is sorted.</em></p>

<p><em>If the array contains only 1 element then display 0.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: @N = (2, 9, 3, 5)
Output: 4

Input: @N = (1, 3, 8, 2, 0)
Output: 5

Input: @N = (5)
Output: 0
</code></pre>

<p>Trying all combinations would imply an algorithmic complexity of <code>O(n²)</code>, whereas the obviously immediate solution, i.e. first sorting the array has a better algorithmic complexity of <code>O(n log n)</code>. So we will start with sorting the array and then explore the successive gaps to find the largest one.</p>

<h3>Maximum Gap in Raku</h3>

<p>We might start with a standard <code>for</code> loop to find the largest gap , as we would do in C or in Pascal.</p>

<pre><code>use v6;

my @input = 2, 9, 3, 5;
my @sorted = sort @input;
my $max = 0;
for 1..@sorted.end -&gt; $i {
    $max = @sorted[$i] - @sorted[$i-1] if @sorted[$i] - @sorted[$i-1] &gt; $max;
}
say "Max gap: $max";
</code></pre>

<p>This works fine and the output is what we expect:</p>

<pre><code>$ raku max-gap.raku
Max gap: 4
</code></pre>

<p>But we can make the code slightly shorter with functional programming:</p>

<pre><code>my @input = 2, 9, 3, 5;
say 0 and exit if @input &lt;= 1;
my @sorted = sort @input;
my $max = max map { @sorted[$_] - @sorted[$_-1] }, 1..@sorted.end;
say "Max gap: $max";
</code></pre>

<p>The line where <code>$max</code> is declared and defined is a data pipeline and should be read from right to left. We first generate a list of array subscripts from 1 to the index of the last item, the use the <code>map</code> to generate of gaps between each element and the previous one, and finally call the built-in <code>max</code> function on this new list.</p>

<p>We display the same output:</p>

<pre><code>$ raku max-gap2.raku
Max gap: 4
</code></pre>

<p>Raku provides some built-in functions that make it possible to solve the problem in just one single line of code. The <a href="https://docs.raku.org/routine/rotor">rotor</a> routine takes an array or a list as input parameter and returns a sequence of lists, where each sublist is made up of elements of the invocant. You can define the number of items of each sublist and a gap between the sublists. With a negative gap, the sublists overlap. Here, with a number of item equal to 2 and a gap of -1, we get a series of two-items sequence on which we can compare the differences.</p>

<pre><code>say "Max gap = ", &lt;2 9 3 5&gt;.sort.rotor(2 =&gt; -1).map({$_[1] - $_[0]}).max;
</code></pre>

<p>Note that the one-liner program just above doesn&#8217;t handle lists with only one element, but that&#8217;s trivial and left as an exercise to the reader.</p>

<p>Again, this program displays the following:</p>

<pre><code>Max gap: 4
</code></pre>

<h3>Maximum Gap in Perl</h3>

<p>Computing the maximum gap with a traditional <code>for</code> loop:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @input = (2, 9, 3, 5);
my @sorted = sort { $a &lt;=&gt; $b} @input;
my $max = 0;
for my $i (1..$#sorted) {
    $max = $sorted[$i] - $sorted[$i-1] if $sorted[$i] - $sorted[$i-1] &gt; $max;
}
say "Max gap: $max";
</code></pre>

<p>Output:</p>

<pre><code>$ perl max-gap.pl
Max gap: 4
</code></pre>

<p>Just as before, we can also choose a functional programming approach and build a data pipeline:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @input = (2, 9, 3, 5);
my @sorted = sort { $a &lt;=&gt; $b} @input;
my $max = @input &lt;= 1 ? 0 : 
    (sort { $b &lt;=&gt; $a} map { $sorted[$_] - $sorted[$_-1] } 1..$#sorted)[0];
say "Max gap = $max";
</code></pre>

<h3>Maximum Gap in Scala</h3>

<p>Here, again, we use a functional programming approach:</p>

<pre><code>object root extends App {
  val tests = Seq(2, 9, 3, 5)
  val sorted = tests.sorted
  val max = if (sorted.size &lt;= 1) 0 else
    (1 to sorted.length - 1).map(i =&gt; sorted(i) - sorted(i - 1)).max
  println("Max gap is: " + max)
}
</code></pre>

<p>Output:</p>

<pre><code>Max gap is: 4
</code></pre>

<h3>Maximum Gap in Python</h3>

<p>Again the functional programming approach:</p>

<pre><code>tests = [2, 9, 3, 5]
sorted = sorted(tests)
max = 0 if len(sorted) &lt;= 1 else (
    max(map(lambda i: sorted[i] - sorted[i-1], 
    range(1, len(sorted) ))))
print("Max gap = ", max)
</code></pre>

<p>Output:</p>

<pre><code>Max gap =  4
</code></pre>

<h3>Maximum Gap in Julia</h3>

<p>Also a functional approach:</p>

<pre><code>tests = [17, 2, 9, 3, 5]
sorted = sort(tests)
gaps = map(i -&gt; sorted[i] - sorted[i - 1], 2:length(sorted))
@printf("Max gap is %i", maximum(gaps))
</code></pre>

<p>Output:</p>

<pre><code>Max gap is 8
</code></pre>

<h3>Maximum Gap in Ruby</h3>

<p>Functional approach, again:</p>

<pre><code>test = [2, 9, 3, 5]
sorted = test.sort
gaps = (1.upto(sorted.length()-1)).map { |i| sorted[i] - sorted[i - 1] }
print "Max gap is: ", gaps.max
</code></pre>

<p>Output:</p>

<pre><code>Max gap is: 4
</code></pre>

<h3>Maximum Gap in Rust</h3>

<p>Again functional programming approach, except that the <code>test</code> vector must be mutable because the Rust <code>sort</code> method sorts data in-place. There may be some other solution, but I didn&#8217;t find it (I don&#8217;t know Rust well enough).</p>

<pre><code>fn main () {
    let mut test = vec![2, 9, 3, 5];
    test.sort();
    let gaps: Vec&lt;i32&gt; = (1..test.len()).map(|i| test[i] - test[i-1]).collect();
    println!("Max gap is: {:?}",  gaps.iter().max());
}
</code></pre>

<p>This also finds 4 as the maximum gap.</p>

<h2>Task 2: Decimal String</h2>

<p><em>You are given numerator and denominator i.e. <code>$N</code> and <code>$D</code>.</em></p>

<p><em>Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.</em></p>

<p><em>Example</em></p>

<pre><code>Input: $N = 1, $D = 3
Output: "0.(3)"

Input: $N = 1, $D = 2
Output: "0.5"

Input: $N = 5, $D = 66
Output: "0.0(75)"
</code></pre>

<h3>Decimal String in Raku</h3>

<p>Raku has a built-in method, <a href="https://docs.raku.org/routine/base-repeating">base-repeating</a>, provided by role <code>Rational</code>, that just do that:</p>

<pre><code>use v6;

sub MAIN( Int $num, Int $den where $den != 0  ) {
    my ($non-rep, $repeating) = ($num / $den).base-repeating;
    my $suffix = $repeating ?? "($repeating)" !! "";
    printf '%s%s', $non-rep, $suffix;
}
</code></pre>

<p>These are some example outputs for various input values:</p>

<pre><code>$ raku decimal-str.raku 100 25
4

$ raku decimal-str.raku 10 3
3.(3)

$ raku decimal-str.raku 4 625
0.0064

$ raku decimal-str.raku 5 66
0.0(75)
</code></pre>

<h3>Decimal String in Perl</h3>

<p>This turned out to be much more complicated, since we don&#8217;t have any built-in subroutine for that. </p>

<p>My initial idea was to let Perl just perform the division and to look for repeated digit groups (with regular expression or some other means) in the result. But that turned out to be impractical and also wrong for some input values, since Perl only computes only about 15 decimal digits. It might be feasible with a big integer module, but I did not try and decided to go for another method (explained below). I kept, however, the part of the program which counts the initial number of zeros at the beginning (when the denominator is larger than the numerator).</p>

<p>So I decided to compute decimal digits by hand one by one and check at each step whether the remainder of the division has already been seen before. Whenever this happens, we know that the digits found since the last time we&#8217;ve found the same remainder form a repeated grouping of digits and we can stop.</p>

<p>While I was working on that, I came across a Python program (see below) just implementing this. So, out of laziness, I more or less ported to Perl this Python program.</p>

<p>The following program does what is required (provided the input values are positive):</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub compute_dec_str {
    my ($num, $den) = @_;
    die "Please provide positive numbers" if $num &lt; 0 or $den &lt;= 0;
    my $c = 10 * ($num % $den);
    my $quotient = $num/$den;
    # get the quotient leading 0s if any
    $quotient =~ s/(^\d+\.?0*)\d*/$1/;
    $c *= 10 for split " ",  ($quotient =~ /\.(0+)/);
    my (@digits, %passed);
    my $i = 0;
    while (1) {
        if (exists $passed{$c}) {
            my @repeated = @digits[$passed{$c}..$#digits];
            my $result = $quotient . join("", @digits[0..$passed{$c} - 1]);
            if ( @repeated &gt; 1 or $repeated[0] != 0) {
                $result .= "(" . join("", @repeated) . ")";
            }
            $result =~ s/\.$//; # remove trailing dot if any
            return $result;
        }
        push @digits, int($c / $den);
        $passed{$c} = $i;
        $i++;
        $c = 10 * ($c % $den);
    }
}
my $result = compute_dec_str @ARGV;
say $result;
</code></pre>

<p>Output:</p>

<pre><code>$ perl decimal_string.pl 1 33
0.0(30)

$ perl decimal_string.pl 4 625
0.00064

$ perl decimal_string.pl 5 66
0.0(75)
</code></pre>

<h3>Decimal String in Python</h3>

<p>This is the Python program on which I loosely based my Perl solution. It can be found <a href="http://codepad.org/hKboFPd2">there</a>. Please note that this program isn&#8217;t from me, but I don&#8217;t know who the author is.</p>

<pre><code>def divide(m, n):
    quotient, c = str(m // n) + ".", 10 * (m % n)
    while c and c &lt; n:
        c *= 10
        quotient += "0"
    digits = ""
    passed = {}
    i = 0
    while True:
        if c in passed:
            prefix = digits[:passed[c]]
            cycle = digits[passed[c]:]
            result = quotient + prefix + "(" + cycle + ")"
            return result.replace("(0)", "").rstrip(".")
        q, r = c // n, c % n
        passed[c] = i
        digits += str(q)
        i += 1
        c = 10 * r
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 11, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub max_difference_sorted{
    my(@sorted) = @_;
    return 0 if(@sorted == 1);
    my $x = $sorted[1] - $sorted[0];  
    my $y = max_difference_sorted(@sorted[1 .. @sorted - 1]);   
    return ($x &gt; $y)? $x: $y; 
}

sub max_difference{
    my (@numbers) = @_;
    return max_difference_sorted(
        sort { $a &lt;=&gt; $b } @numbers
    ); 
}

MAIN:{
    my (@N);
    @N = (2, 9, 3, 5);
    print max_difference(@N) . "\n"; 
    @N = (1, 3, 8, 2, 0); 
    print max_difference(@N) . "\n"; 
    @N = (5);
    print max_difference(@N) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
5
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I believe this code is straightforward enough! &lt;code&gt;max_difference&lt;/code&gt; performs the sort and &lt;code&gt;max_difference_sorted&lt;/code&gt; recursively finds the largest difference as required.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given numerator and denominator i.e. $N and $D. Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub nd2decimal{
    my($n, $d) = @_;
    my $max_repetend = $d - 1; 
    my $repeats = false; 
    my @factors = prime_factor($d);
    for my $factor (@factors){
        $repeats = true if($factor != 2 &amp;&amp; $factor != 5); 
    } 
    unless($repeats){ 
        return sprintf("%0.${max_repetend}g", $n / $d); 
    }
    else{
        my $x = divide($n, $d, [], []); 
        return $x; 
    }  
}

MAIN:{
    my($N, $D);
    ($N, $D) = (1, 3);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 2);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (5, 66);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 6);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 8);
    print nd2decimal($N, $D) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0.(3)
0.5
0.0(75)
0.1(6)
0.125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 2 is a bit trickier than the first part. The approach here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if it is a repeated decimal by checking if &lt;code&gt;$d&lt;/code&gt; has prime factors other than 2 or 5&lt;/li&gt;
&lt;li&gt;if it is not a repeated decimal then this is quick work, divide and display the solution&lt;/li&gt;
&lt;li&gt;in the case of repeated decimals we essentially implement grade school long division in the &lt;code&gt;divide&lt;/code&gt; function and keep track of remainders. When a remainder is repeated we know that we have found the cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some interesting theoretical properties to repeat decimals but none are particularly helpful in actually computing them. One observation is that the length of the cycle must be smaller than the value of the denominator, whence the use of &lt;code&gt;$d&lt;/code&gt; in the main loop in the &lt;code&gt;divide&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I’m re-using the same &lt;code&gt;prime_factors&lt;/code&gt; function that I used in &lt;a href="https://adamcrussell.livejournal.com/14043.html"&gt;Challenge 041&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Challenge 106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/RepeatingDecimal.html"&gt;Repeating Decimal&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc106</id>
    <published>2021-04-04T17:04:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Two Dist::Zilla questions (META.yml; user config)</title>
    <link href="http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html"/>
    <id>http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html</id>
    <updated>2021-04-03T20:22:49+00:00</updated>
    <category term="perl"/>
    <summary>During the great RT will be shutdown craze earlier this year, I updated my Dist::Zilla setup to use a custom author bundle (Dist::Zilla::PluginBundle::Author::DOMM) so I can unify my Dist::Zilla ...</summary>
    <content type="html">&lt;p&gt;During the great &lt;strong&gt;RT will be shutdown&lt;/strong&gt; craze earlier this year, I updated my &lt;a href="http://dzil.org/"&gt;Dist::Zilla&lt;/a&gt; setup to use a custom author bundle (&lt;a href="https://metacpan.org/pod/Dist::Zilla::PluginBundle::Author::DOMM"&gt;Dist::Zilla::PluginBundle::Author::DOMM&lt;/a&gt;) so I can unify my Dist::Zilla config in one place (instead of copying &lt;code&gt;dist.ini&lt;/code&gt; from project to project, adding &amp;amp; modifying it from time to time, but never backporting improvements to older projects).&lt;/p&gt;

&lt;p&gt;Two of my decisions might have been not too smart (as indicated by &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/7"&gt;various&lt;/a&gt; &lt;a href="https://github.com/domm/Web-Request-Role-JWT/pull/1"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/10"&gt;requests&lt;/a&gt;), so I'm now looking for feedback...&lt;/p&gt;

&lt;h4&gt;&lt;span class="caps"&gt;META.&lt;/span&gt;yml vs &lt;span class="caps"&gt;META.&lt;/span&gt;json?&lt;/h4&gt;

&lt;p&gt;I stopped generating &lt;code&gt;META.yml&lt;/code&gt; files and now only generate &lt;code&gt;META.json&lt;/code&gt;. As far as I can tell, the contents of those two files is identical, so I think it should be enought to include the data once per dist (and I prefer &lt;span class="caps"&gt;JSON &lt;/span&gt;to &lt;span class="caps"&gt;YAML...&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Of course, &lt;span class="caps"&gt;CPANTS &lt;/span&gt;now &lt;a href="https://cpants.cpanauthors.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.009"&gt;complains&lt;/a&gt; about the missing &lt;code&gt;META.yml&lt;/code&gt;. (Which is of course ironic, because it was me who first implemented this &lt;span class="caps"&gt;CPANTS &lt;/span&gt;metric...)&lt;/p&gt;

&lt;p&gt;Maybe some other (old?) tools still need &lt;code&gt;META.yml&lt;/code&gt;? So should I again produce both &lt;code&gt;META.yml&lt;/code&gt; and &lt;code&gt;META.json&lt;/code&gt;?&lt;/p&gt;

&lt;h4&gt;Dist::Zilla user config?&lt;/h4&gt;

&lt;p&gt;During my deep dive into Dist::Zilla plungins and author bundles, I learned that Dist::Zilla looks for per-user configuration in &lt;code&gt;~/.dzil/config.ini&lt;/code&gt;. So I moved some general information (my name &amp;amp; email, default license) from all my &lt;code&gt;dist.ini&lt;/code&gt; files into this central config file.&lt;/p&gt;

&lt;p&gt;But it seems that this makes contributing to my dists even harder, as the &lt;code&gt;dist.ini&lt;/code&gt; file included in the dist now is invalid. Contributors will get a (helpful) error message when running &lt;code&gt;dzil build&lt;/code&gt;, but this is yet another hurdle for potential contributors. I've already got two pull requests to "fix" this.&lt;/p&gt;

&lt;p&gt;On the one hand I would prefer to keep the global config file, so I can easily change data. On the other hand I could just as well run a small command to change whatever value I might want to change on multiple files (using this hot new tool called "Perl", which makes mangling text in multiple files very easy) and thus make contributions easier.&lt;/p&gt;

&lt;p&gt;How are other &lt;span class="caps"&gt;CPAN &lt;/span&gt;authors handling this?&lt;/p&gt;

&lt;h4&gt;Or is it all Dist::Zilla's fault?&lt;/h4&gt;

&lt;p&gt;Some people (like brian d foy in this &lt;a href="https://www.reddit.com/r/perl/comments/mgw033/distar_a_cpan_distribution_author_tool/"&gt;thread&lt;/a&gt; about &lt;a href="https://github.com/p5sagit/Distar"&gt;Distar&lt;/a&gt;, a simpler authoring tool (but it works with ExtUtils::MakeMaker, which is a module I don't want to touch..)) argue that Dist::Zilla is too complex and make contributing very hard (because potential contributors now need to install a lot of Dist::Zilla plugins).&lt;/p&gt;

&lt;p&gt;But I actually like Dist::Zilla a lot (esp after finally coming up with a PluginBundle that fits my workflow). So I will keep using Dist::Zilla, but would really appreciate any feedback on my two questions (&lt;code&gt;META.yml&lt;/code&gt; and user config).&lt;/p&gt;

&lt;p&gt;You can either enter a comment below (if my homegrown comments system works..), or via &lt;a href="https://www.reddit.com/r/perl/comments/mjeej7/two_distzilla_questions_metayml_user_config/"&gt;reddit&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update: user config vs github&lt;/h4&gt;

&lt;p&gt;After applying &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/12"&gt;another patch&lt;/a&gt; supplied by &lt;a href="https://github.com/paultcochrane"&gt;Paul Cochrane&lt;/a&gt; that adds some github testing hooks, it seems to be clear that depending on the user config is a bad idea. Surprisingly, github will &lt;span class="caps"&gt;NOT &lt;/span&gt;set up a &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; so it can "contribute" to my dist (by running it's test suite), see eg &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/runs/2260939037?check_suite_focus=true"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I guess I will stop using the global config file...&lt;/p&gt;</content>
    <category term="CPAN"/>
    <category term="Dist::Zilla"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3613177878497701470</id>
    <published>2021-04-03T15:29:00.000+02:00</published>
    <updated>2021-04-03T15:29:08.708+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxv) 12 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.071' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.071&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.070 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.08&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.07 was 7 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005004&lt;/strong&gt; on 2021-03-29&lt;/li&gt;  &lt;li&gt;Votes: 281&lt;/li&gt;  &lt;li&gt;Previous version: 2.005003 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2015&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 316&lt;/li&gt;  &lt;li&gt;Previous version: 2.2014 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.30&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.29 was 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.034&lt;/strong&gt; on 2021-03-31&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.032 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20210402' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20210402&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20210111 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.56&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 151&lt;/li&gt;  &lt;li&gt;Previous version: 1.55 was 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0936' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0936&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0933 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.2.0&lt;/strong&gt; on 2021-04-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.1.0 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JDB/Win32-OLE-0.1713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Win32::OLE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OLE Automation extensions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1713&lt;/strong&gt; on 2021-04-03&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.1712 was 6 years, 10 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.66&lt;/strong&gt; on 2021-03-30&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3613177878497701470/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3613177878497701470"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxv-12-cpan-great-modules-released.html" title="(cccxxxv) 12 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5658972421208024952</id>
    <published>2021-04-03T15:27:00.001+02:00</published>
    <updated>2021-04-03T15:27:12.018+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxi) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 65&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/03 13:26:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::mokupona" target="_blank"&gt;App::mokupona&lt;/a&gt; - a feed aggregator for Gopher, Gemini, RSS and Atom&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Combine::Keys" target="_blank"&gt;Combine::Keys&lt;/a&gt; - keys on multiple hash references&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::NFSLock" target="_blank"&gt;File::NFSLock&lt;/a&gt; - perl module to do NFS (or not) locking&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::Checkers" target="_blank"&gt;Games::Checkers&lt;/a&gt; - Play the Checkers games&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::JPEG::Size" target="_blank"&gt;Image::JPEG::Size&lt;/a&gt; - find the size of JPEG images&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; - Validate data against a schema, minimally&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Language::FormulaEngine" target="_blank"&gt;Language::FormulaEngine&lt;/a&gt; - Evaluator for spreadsheet-style function expressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Private::Attribute" target="_blank"&gt;MooX::Private::Attribute&lt;/a&gt; - private attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; - add defer block syntax to perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Sparkline" target="_blank"&gt;Text::Sparkline&lt;/a&gt; - Creates text-based sparklines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Request::Role::JWT" target="_blank"&gt;Web::Request::Role::JWT&lt;/a&gt; - Accessors for JSON Web Token (JWT) stored in psgix&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Android::Build" target="_blank"&gt;Android::Build&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::TimeTracker" target="_blank"&gt;App::TimeTracker&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=146)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Augeas" target="_blank"&gt;Config::Augeas&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Plugin::Sysdeps" target="_blank"&gt;CPAN::Plugin::Sysdeps&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::ECDSA" target="_blank"&gt;Crypt::OpenSSL::ECDSA&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=275)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::MAT" target="_blank"&gt;Devel::MAT&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::regenerate" target="_blank"&gt;Dist::Zilla::App::Command::regenerate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Finance::Quote" target="_blank"&gt;Finance::Quote&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::FormBuilder" target="_blank"&gt;HTML::FormBuilder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer" target="_blank"&gt;Importer&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lucy" target="_blank"&gt;Lucy&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Random::Secure" target="_blank"&gt;Math::Random::Secure&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Release" target="_blank"&gt;Module::Release&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=449)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=281)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Singleton" target="_blank"&gt;MooseX::Singleton&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=373)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Protocol::DBus" target="_blank"&gt;Protocol::DBus&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Grammars" target="_blank"&gt;Regexp::Grammars&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Tools" target="_blank"&gt;Search::Tools&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Beautify" target="_blank"&gt;SQL::Beautify&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Diff" target="_blank"&gt;String::Diff&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Binmode" target="_blank"&gt;Sys::Binmode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Telugu::TGC" target="_blank"&gt;Telugu::TGC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Table" target="_blank"&gt;Term::Table&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Termbox" target="_blank"&gt;Termbox&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TermReadKey" target="_blank"&gt;TermReadKey&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Local" target="_blank"&gt;Time::Local&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/urpmi" target="_blank"&gt;urpmi&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ZMQ::LibZMQ3" target="_blank"&gt;ZMQ::LibZMQ3&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5658972421208024952/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5658972421208024952"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxi-metacpan-weekly-report-mojolicious.html" title="(cdlxi) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7484983515154526976</id>
    <published>2021-04-03T15:16:00.002+02:00</published>
    <updated>2021-04-03T15:16:30.114+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-04-03 13:15:37 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66852044" target="_blank"&gt;how to pass command line arguments to perl script file in one-line&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66834101" target="_blank"&gt;How to make a non-interpolate string interpolate in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66889565" target="_blank"&gt;Can I make a variable optional in a perl sub prototype?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66831985" target="_blank"&gt;How to create and to throw exceptions in Perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66858247" target="_blank"&gt;How can I dynamically load Perl modules and use their functions?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66893459" target="_blank"&gt;Dynamic variable names and hash keys&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66837884" target="_blank"&gt;Perl code to delete a multi line XML node&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66840242" target="_blank"&gt;Search in an array of hashes by the hash key and its sorting in Perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66854044" target="_blank"&gt;Why is Perl giving "Can't modify string in scalar output" error?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66874841" target="_blank"&gt;How to add zeros into my file using Perl to make lines the same length?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7484983515154526976/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7484983515154526976"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7484983515154526976"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxiv-stackoverflow-perl-report.html" title="(cdlxxxiv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>TPRCIC 2021 - Call for papers</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic2021callforpapers"/>
  <id>tag:news.perlfoundation.org,2021-04-03:/post/tprcic2021callforpapers</id>
  <published>2021-04-03T03:15:07</published>
  <updated>2021-04-03T03:15:07</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference in the Cloud 2021 celebrates all things Perl and Raku from 8-10 June with group meetings on the Monday and Friday each side of the main event. We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the Cloud 2021</a> celebrates all things Perl and Raku from 8-10 June with group meetings (BOFs) on the Monday and Friday each side of the main event.</p>

<p>We want to hear from you! We know that there are hundreds of people in our community with great things to share about Perl and Raku, database integration, drones, puppies, and any other topics that may be of general interest to Perl and Raku programmers. Take a look at the talk schedules from <a href="https://perlconference.us/tprc-2021-cloud/past-conferences/">previous years</a> to help with additional ideas.</p>

<p>The call for papers is open NOW. You can submit your ideas for a talk to http://perlconference.us/speakers. Deadline for submissions is 18:00 UTC April 30, 2021. <strong>All speakers receive a FREE event pass.</strong></p>

<p>We will be accepting proposals for the following session types:</p>

<ul>
<li>Standard Talks (50 minutes)</li>
<li>Short Talks (20 minutes)</li>
<li>Lightning Talks (5 minutes)</li>
</ul>

<p>Follow the conference on <a href="https://twitter.com/PerlConferences">Twitter</a> and <a href="https://www.facebook.com/theperlconference/">FaceBook</a>, or <a href="https://perlconference.us/tprc-2021-cloud/keep-in-touch/">join our mailing list</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Kent Fredric's CPAN distributions are available for adoption</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/04/kent-fredrics-cpan-distributions.html"/>
    <id>tag:blogs.perl.org,2021:/users/neilb//846.10162</id>
    <published>2021-04-01T04:32:00Z</published>
    <updated>2021-04-02T21:43:09Z</updated>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>As most of you are probably aware,
Kent Fredric sadly passed away earlier this year:
<a href="https://www.facebook.com/kent.fredric/posts/10158837806906830">notice from his family, on Facebook</a>.</p>

<p>Kent was a prolific contributor to CPAN and Perl.
He released more than 150 distributions of his own to CPAN,
but also helped countless other authors and distributions,
with bug reports, puil requests, and more.</p>

<p>When a CPAN author dies,
their indexing permissions are dropped from PAUSE,
and where they had the first-come permission,
that will be passed to the pseudo-user ADOPTME.
This flags the distribution as being available for adoption.</p>

<p>So as of now, all of Kent's distributions are available for adoption.</p>
]]>
        <![CDATA[<p>If you look at <a href="https://metacpan.org/author/KENTNL">Kent's author page</a> on MetaCPAN, you'll see 178 distributions (at the time of writing). This means that he was the last person to release those distributions, but in a few cases he didn't have the first-come permission.</p>

<p>When you look at his author page on MetaCPAN, notice the leftmost column, with the blue bars. The bars are an indication of the distribution's position on the <a href="https://neilb.org/2015/04/20/river-of-cpan.html">CPAN River</a> &mdash; a measure of how many other CPAN distributions use that distribution. The more bars, the more dependent distributions. If you hover your mouse pointer over the bars, you'll see the number of dependents.</p>

<p>As you can see, many of Kent's distributions are relied on by other CPAN distributions, and in some cases by thousands. As a result, the PAUSE admins will consider adoption requests carefully, and try to ensure that such distributions are passed into safe hands.</p>

<h2>How does adoption work?</h2>

<p>When you release a new module, PAUSE assigns you the <strong>first-come</strong> indexing permission for the module. This means that your releases of the module will be considered for inclusion in the CPAN Index, and also that you can give other people the <strong>co-maint</strong> indexing permission. People with co-maint can do releases, but they can't grant co-maint to others. For more on indexing permissions, see the <a href="https://github.com/andk/pause/blob/master/doc/operating-model.md#3-indexing-permissions">relevant section</a> in the <a href="https://github.com/andk/pause/blob/master/doc/operating-model.md">PAUSE Operating Model</a>.</p>

<p>If you want to contribute to someone else's distribution, and do releases of it, then the usual model is that you talk to the person who has the first-come indexing permission, and they'll give you co-maint. You haven't adopted the distribution, you became a contributor.</p>

<p>Adoption of a distribution is the process of being given the first-come indexing permission on all modules in the distribution. Most of the time it is the current maintainer (the person with first-come) who transfers the indexing permissions, but in special circumstances, the PAUSE admins can do this.</p>

<h2>If you want to adopt one of Kent's distributions</h2>

<p>If you want to adopt a distribution, please email the PAUSE admins (modules at perl dor org), and make your case.</p>

<p>If it's a distribution that doesn't have any dependents, then you just need to explain your interest, and demonstrate that you have experience as a CPAN author.</p>

<p>The further up the CPAN River the distribution is, though, the stronger your case will need to be: you should have experience maintaining similar modules, both in terms of dependencies, and the type of module. If your existing distributions are tier 0 or tier 1 (either no blue bars or 1), then you'd have to make a strong case for anything above tier 3.</p>

<p>Here are the sorts of things we'd expect from a tier 3+ author:</p>

<ul>
<li>A good test suite, with attention paid to coverage.</li>
<li>Pays attention to CPAN Testers, and has a suitably green <a href="http://matrix.cpantesters.org/?dist=MIME-Base64">matrix</a>.</li>
<li>Does developer releases to check relevant changes across versions of Perl and different operating systems.</li>
<li>Pays attention to the dependency graph of their distributions (not only the modules that you use directly, but the modules that they use, and so on).</li>
<li>Adheres to CPAN conventions for a well-formed release.</li>
<li>Considers the minimum version of Perl that the distribution should support, and doesn't radically change this overnight.</li>
<li>Pays attention to copyright and licensing.</li>
<li>Thorough documentation, with a SEE ALSO referencing other relevant modules.</li>
<li>Is respectful of contributors, users, competing modules and their authors, and the general Perl community.</li>
</ul>

<p>A more thorough discussion of this topic can be found in Tux's <a href="https://github.com/Tux/Release-Checklist/blob/master/Checklist.md">release checklist</a>.</p>

<p>This is not meant to discourage you from adopting a distribution, rather to encourage you to step up, but not to overreach. If the prospect of adopting a distribution terrifies you with the prospect of breaking half of CPAN, it's probably not the right one for you. At least for now.</p>

<p>If you have used one or more of Kent's distributions,
maybe you could consider adopting one of them,
to keep it maintained going forward.
It's a great way to give back to the Perl community.</p>

<p>If you don't already have a PAUSE account,
maybe this is a good time to <a href="https://pause.perl.org/pause/query?ACTION=request_id">sign up for one</a>?</p>
]]>
    </content>
</entry>
  <entry>
    <title>Monthly Report - March</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10168</id>
    <published>2021-04-02T05:58:20Z</published>
    <updated>2021-04-02T06:28:44Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-03.jpg"/></p>

<p><strong>Celebration time ...</strong></p>

<p>The month of <strong>March</strong> is very special to me. It was in this month 2 years ago, I started my dream project <a href="https://perlweeklychallenge.org/">The Weekly Challenge (a.k.a. Perl Weekly Challenge)</a>.</p>

<p>For <strong>Team PWC</strong>, it was back to back celebrations. We celebrated <strong>100th</strong> week challenge in <strong>February</strong> first followed by completion of <strong>2 years</strong> in <strong>March</strong>. In fact for the second year anniversary, I had planned something bigger but unfortunately it didn't work out for some reason. Having said that, for me the biggest achievement is that we now have a platform where everyone is welcome. It doesn't matter whether you like <strong>Perl</strong> or <strong>Raku</strong> or for that matter any other programming language. And the best part of it, the same person who happens to be an expert in <strong>Perl</strong>, goes on and do it <strong>20+ different languages</strong> as well. Then there is this guy who is very famous for his <strong>Raku</strong> skill, suddenly decided to share solutions in <strong>Perl</strong> as well. How cool it is? This is something you wouldn't have imagine 2 years ago.</p>

<p>Let me share my own story, few years ago at the <strong>London Perl Workshop</strong> event, I was gifted a book on <strong>Raku</strong> for my contributions to <strong>CPAN</strong>. For the next one year, I didn't get chance to read even a single page. Then came the weekly challenge where I got the opportunity to see the work of many <strong>Raku</strong> experts. I was inspired by each one of them and decided to get my hand dirty too. As of today, I contributed <strong>73 Perl</strong> solutions and <strong>67 Raku</strong> solutions. Not a bad stats for a first timer.</p>

<p>Generally <strong>Perl</strong> and <strong>Raku</strong> are the two most popular languages the weekly challenge rely on but that doesn't stop members trying different languages every week. As of today, we have received solutions in <strong>60+ different languages</strong> other than <strong>Perl</strong> and <strong>Raku</strong>. Any guess who tops the list? Well, it is none other than <strong>Python</strong>. I have recently started learning <strong>Python</strong>. Soon I would be contributing in <strong>Python</strong> too. Since the tag line of the weekly challenge is <em><strong>"You don't have to be an expert"</strong></em>, as soon as I feel little comfortable I am going to jump straight away. There is no harm, since nobody is going to judge me here and one day I can be as good as I am in <strong>Perl</strong> today.</p>

<p>It is no longer secret any more, most of my spare time is devoted to the weekly challenge management. It is a tough job and at times, I feel really tired. In the recent weeks, I purposely stayed away for few days without doing any work on the weekly challenge. In the end, I felt bad for not doing anything. I then clear the entire backlog in one sitting. I play with my emotions at times and it is fun. When I am not doing anything serious, I spend time looking at the various <a href="https://perlweeklychallenge.org/chart">charts</a>. It tells me so many interesting stories every time I look at it. For example, if you look at the Leaders board, there is a story behind every names.</p>

<p><strong>Do you think the weekly challenge is the only thing that keeps me busy all the time?</strong></p>

<p>The short answer is <strong>No</strong>. I also take part in the monthly event <strong>"Pull Request Club"</strong>. Submitting <strong>Pull Request</strong> was my hobby before the weekly challenge took over and left no time for anything else. Thanks to the monthly nature of the event, I have successfully managed it till date since the beginning without missing a single month. And when I receive the response like below, do you think I am going to stop any time sooner?</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/prc-comment.png"/></p>

<p>There is another surprise celebration that I am desperate to share with you all but I can't go public unless all the paper work done. I hope to get it done by end of next week. Unfortunately you all have to wait for the next monthly report that is when I will share the surprise with you all.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>3 Pull Requests</strong> submitted in the month of <strong>March 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-03.png"/></p>

<p><strong>2354 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-03.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>672 commits</strong> recorded in the month of <strong>March 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-03.png"/></p>

<p>Overall <strong>2447 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-03.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>February 2021</strong>:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-102">Challenge #102</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103">Challenge #103</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-104">Challenge #104</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105">Challenge #105</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106">Challenge #106</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-101">RECAP Challenge #101</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-102">RECAP Challenge #102</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-103">RECAP Challenge #103</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-104">RECAP Challenge #104</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-105">RECAP Challenge #105</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, although I was supposed to do one to mark the completion of second year of the weekly challenge. I will do it in the coming weeks though.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2021-02">James Smith</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/OData::QueryParams::DBIC">OData::QueryParams::DBIC</a> by <strong>Renee Baecker</strong>. I submitted <a href="https://github.com/reneeb/OData-QueryParams-DBIC/pull/3">one</a> Pull Request and it has been already accepted and merged by <strong>Renee Baecker</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-03.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-03.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/03/monthly-report---february-2.html">Monthly Report - February</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/502.html">Issue #502</a> and <a href="http://perlweekly.com/archive/504.html">Issue #504</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>March 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-03.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CONTRA/Acme-Automatix-0.01"&gt;Acme-Automatix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;The great new Acme::Automatix!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Frameworks-0.001"&gt;Acme-CPANModules-Frameworks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;List of frameworks on CPAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legodcsupervillains-0.02"&gt;Acme-MetaSyntactic-legodcsupervillains&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO DC Super Villains theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legotheincredibles-0.02"&gt;Acme-MetaSyntactic-legotheincredibles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO The Incredibles theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.16"&gt;Alien-uPB-Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.16&lt;/td&gt;
&lt;td&gt;build and find uPB (a.k.a. Unleaded)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-PerlNitpick-0.01"&gt;App-PerlNitpick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;change-suggester about insignificant details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-ThisDist-OnMetaCPAN-0.001"&gt;App-ThisDist-OnMetaCPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;this-dist-on-metacpan and some other CLIs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-dateseq-id-0.001"&gt;App-dateseq-id&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Generate a sequence of dates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WOLDRICH/App-knradio-0.044"&gt;App-knradio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.044&lt;/td&gt;
&lt;td&gt;interface for knradio, 92,2 FM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-depsort-0.001"&gt;App-lcpan-CmdBundle-depsort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;More lcpan subcommands related to sorting by dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Asm-C-20210328"&gt;Asm-C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210328&lt;/td&gt;
&lt;td&gt;Extract macro values and structure details from C programs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Boundary-0.01"&gt;Boundary&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare interface package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Complete-Finance-SE-IDX-0.001"&gt;Complete-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.001"&gt;Crypt-Passphrase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A module for managing passwords in a cryptographically agile manner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Argon2-0.001"&gt;Crypt-Passphrase-Argon2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;An Argon2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Bcrypt-0.001"&gt;Crypt-Passphrase-Bcrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A bcrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-PBKDF2-0.001"&gt;Crypt-Passphrase-PBKDF2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A PBKDF2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Scrypt-0.001"&gt;Crypt-Passphrase-Scrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A scrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Crypt-xxHash-0.01"&gt;Crypt-xxHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;xxHash implementation for Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Decl-Tok-0.01"&gt;Decl-Tok&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Given a line iterator, returns a token stream that tokenizes the lines as first-pass Decl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUCCHISK/Devel-PatchPerl-Plugin-Darwin-v0.1.0"&gt;Devel-PatchPerl-Plugin-Darwin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;patchperl plugin for darwin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/Devel-Util-0.80"&gt;Devel-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;a collection of general-utility development subroutines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LNATION/Game-HeroesVsAliens-0.01"&gt;Game-HeroesVsAliens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A tower defense game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AJNN/Geo-LibProj-FFI-0.01"&gt;Geo-LibProj-FFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Foreign function interface to PROJ coordinate transformation software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/Go-Tokenize-0.01"&gt;Go-Tokenize&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tokenize Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JBERGER/GuacLite-0.01"&gt;GuacLite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Toolkit for implementing a frontend server/client the Apache Guacamole system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RAJ/INI-Reader-Regexp-0.01"&gt;INI-Reader-Regexp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;INI Parser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-AIO-Promiser-0.01_01"&gt;IO-AIO-Promiser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01_01&lt;/td&gt;
&lt;td&gt;Promise interface around IO::AIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-FDSaver-0.01"&gt;IO-FDSaver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Save file descriptors from Perl&amp;acirc;&amp;#8364;&amp;#8482;s garbage collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JCRISTY/Image-Magick-6.9.12"&gt;Image-Magick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v6.9.12&lt;/td&gt;
&lt;td&gt;ImageMagick PERL Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Iterator-Records-Lines-0.01"&gt;Iterator-Records-Lines&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Provides simple record iterators for reading text line by line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DONGXU/JSON-JQ-0.01"&gt;JSON-JQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;jq (&lt;a href="https://stedolan.github.io/jq/" rel="nofollow"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) library binding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ETHER/JSON-Schema-Tiny-0.001"&gt;JSON-Schema-Tiny&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Validate data against a schema, minimally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOBYINK/LINQ-0.000_001"&gt;LINQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_001&lt;/td&gt;
&lt;td&gt;an interpretation of Microsoft&amp;#039;s Language Integrated Query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Linux-Sys-CPU-Affinity-0.01"&gt;Linux-Sys-CPU-Affinity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl XS extension for setupping CPU affinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/List-GroupingPriorityQueue-0.01"&gt;List-GroupingPriorityQueue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;priority queue with grouping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/List-Helpers-XS-0.01"&gt;List-Helpers-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension to provide some usefull functions with arrays&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TONKIN/Log-Any-Adapter-JSON-1.00"&gt;Log-Any-Adapter-JSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;One-line JSON logging of arbitrary structured data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Lyrics-Fetcher-LyricsOVH-0.01"&gt;Lyrics-Fetcher-LyricsOVH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Get song lyrics from api.lyrics.ovh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/MIME-DB-v1.46.0"&gt;MIME-DB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.46.0&lt;/td&gt;
&lt;td&gt;Media Type Database, a port of the mime-db JavaScript package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ZHMYLOVE/Math-LinearApprox-0.01"&gt;Math-LinearApprox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;fast linear approximation of 2D sequential points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PerlTrove-0.001"&gt;Module-Features-PerlTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Perl trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PythonTrove-0.001"&gt;Module-Features-PythonTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Python trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-FeaturesUtil-Check-0.001"&gt;Module-FeaturesUtil-Check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Check feature set specification and feature declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-0.008"&gt;Mojolicious-Plugin-Export&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;Export a Mojolicious website to static files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-Git-0.001"&gt;Mojolicious-Plugin-Export-Git&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export a Mojolicious site to a Git repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OETIKER/Mojolicious-Plugin-GSSAPI-0.1.0"&gt;Mojolicious-Plugin-GSSAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Provide Kerberos authentication for incomming https requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ABELTJE/MooX-Params-CompiledValidators-0.01"&gt;MooX-Params-CompiledValidators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A Moo::Role for using Params::ValidationCompiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/Music-RhythmSet-0.01"&gt;Music-RhythmSet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;sets of rhythms and various generation functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Nasm-X86-20210330"&gt;Nasm-X86&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210330&lt;/td&gt;
&lt;td&gt;Generate Nasm X86 code from Perl.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Maker-1.00"&gt;OPM-Maker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Module/App to build and test OPM packages for Znuny, OTOBO, ((OTRS)) Community edition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Validate-1.00"&gt;OPM-Validate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Validate .opm files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-EPPTCP-0.001"&gt;POE-Filter-EPPTCP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;EPP Frame parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-SimpleXML-1.000"&gt;POE-Filter-SimpleXML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;Simple XML parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Tar-0.001"&gt;Path-Tiny-Archive-Tar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Tar/untar add-on for file path utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/Paws-Credential-AssumeRoleWebIdentity-0.0.2"&gt;Paws-Credential-AssumeRoleWebIdentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Perinci-Sub-XCompletionBundle-Finance-SE-IDX-0.001"&gt;Perinci-Sub-XCompletionBundle-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to the Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Pinto-Remote-SelfContained-0.900"&gt;Pinto-Remote-SelfContained&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;interact with a remote Pinto repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RRA/Pod-Thread-2.00"&gt;Pod-Thread&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;Convert POD data to the HTML macro language thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-HelpDesk-0.01"&gt;RT-Extension-HelpDesk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-HelpDesk Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-TerminalTheme-0.01"&gt;RT-Extension-TerminalTheme&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-TerminalTheme Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Idrac4-v0.1.0"&gt;Rex-Interface-Shell-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Ilo-v0.1.0"&gt;Rex-Interface-Shell-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Idrac4-v0.1.0"&gt;Rex-Shell-Interface-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Ilo-v0.1.0"&gt;Rex-Shell-Interface-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OVID/Search-Typesense-0.01"&gt;Search-Typesense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl interface to Typesense search engine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/SmallRegistry-EPP-0.001-TRIAL"&gt;SmallRegistry-EPP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;SmallRegistry EPP Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOMK/Spreadsheet-Compare-0.10"&gt;Spreadsheet-Compare&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Module for comparing spreadsheet-like datasets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Sub-WrapInType-Attribute-0.01"&gt;Sub-WrapInType-Attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;attribute for Sub::WrapInType&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Defer-0.04"&gt;Syntax-Keyword-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;add defer block syntax to perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/Sys-Binmode-0.01"&gt;Sys-Binmode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Fix Perl&amp;acirc;&amp;#8364;&amp;#8482;s system call character encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Task-Lyrics-Fetcher-0.01"&gt;Task-Lyrics-Fetcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;install all known-to-work Lyrics::Fetcher fetchers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Test2-Tools-Process-0.05"&gt;Test2-Tools-Process&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Unit tests for code that calls exit, exec, system or qx()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PETDANCE/Text-Sparkline-v0.1.0"&gt;Text-Sparkline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Creates text-based sparklines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Text-Table-Tiny-_ModuleFeatures-0.001"&gt;Text-Table-Tiny-_ModuleFeatures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Features declaration for Text::Table::Tiny&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Text-TokenStream-0.01"&gt;Text-TokenStream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;lexer to break text up into user-defined tokens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/WWW-LinkRot-0.01"&gt;WWW-LinkRot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;check web page link rot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/WordList-ID-AnimalName-PERLANCAR-0.004"&gt;WordList-ID-AnimalName-PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;List of animals in Indonesian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/p5-Paws-Credential-Webidentity-0.0.1"&gt;p5-Paws-Credential-Webidentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;79&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;43&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Automatix CONTRA 0.01 The great new Acme::Automatix! Acme-CPANModules-Frameworks PERLANCAR 0.001 List of frameworks on CPAN Acme-MetaSyntactic-legodcsupervillains BINGOS 0.02 LEGO DC Super Villains theme Acme-MetaSyntactic-legotheincredibles BINGOS 0.02 LEGO The Incredibles theme Alien-uPB-Core MBARBON 0.16 build and find uPB (a.k.a. Unleaded) App-PerlNitpick GUGOD 0.01 change-suggester about insignificant details. App-ThisDist-OnMetaCPAN PERLANCAR 0.001 this-dist-on-metacpan and … <a href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1939</id>
    <published>2021-04-01T11:26:07Z</published>
    <updated>2021-04-01T11:26:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Switch lots of things on at once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10161</id>
    <published>2021-03-30T00:37:20Z</published>
    <updated>2021-03-30T03:39:36Z</updated>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    <category term="export" label="export" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="exporter" label="exporter" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="import" label="import" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="signaturesfileslurper" label="signatures. File::Slurper" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>Many people already have codes like</p>

<pre>
use strict;
use warnings;
</pre>

<p>and so on at the top of each script they write. For scripts which I don't intend to publish anywhere, I have a module (which I accidentally called Z not knowing there was already a module of the same name on CPAN), which switches on lots of things at once just by saying</p>

<pre>
use Z;
</pre>

<p>The top bit goes like this:</p>

<pre>
package Z;
use warnings;
use strict;
use utf8;

use Carp;
use Deploy 'do_system';
use File::Slurper qw!read_text write_text read_lines!;
use FindBin '$Bin';
use Getopt::Long;
use Table::Readable ':all';
use v5.32;
no warnings qw(experimental::signatures);
use feature qw(signatures);
</pre>

<p>So far that is all fairly standard stuff, but what Z does is also to import all of the above things into my script using the <code>EXPORT</code> variables from the above modules:</p>

<pre>
our $VERSION = '0.01';

require Exporter;
our @ISA = qw(Exporter);

our @EXPORT = (
    @Carp::EXPORT,
    @Deploy::EXPORT_OK,
    @File::Slurper::EXPORT_OK,
    @FindBin::EXPORT_OK,
    @Getopt::Long::EXPORT,
    @Table::Readable::EXPORT_OK,
);
</pre>

<p>This requires a special <code>import</code> method:</p>

<pre>
sub import
{
    my ($class) = @_;

    strict->import ();
    utf8->import ();
    warnings->import ();
    warnings->unimport (qw(experimental::signatures));
    feature->import ('signatures');

    Carp->import ();
    File::Slurper->import (qw!read_text write_text!);
    FindBin->import ('$Bin');
    Getopt::Long->import ();
    Deploy->import ('do_system');
    Table::Readable->import (':all');

    Z->export_to_level (1);
}
</pre>

<p>To save another bit of boilerplate I also have</p>

<pre>
binmode STDOUT, ":encoding(utf8)";
</pre>

<p>at the end of the module.</p>

<p>This is for personal convenience so it's not something I would use publicly, but perhaps people who want to save themselves a bit of boilerplate might find this useful for making their own "personal module".</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Interview: Trying to Catch Paul "LeoNerd" Evans</title>
    <link rel="alternate" href="https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.leonerd.org.uk/"&gt;Paul &amp;ldquo;LeoNerd&amp;rdquo; Evans&lt;/a&gt;&lt;/strong&gt; is a
&lt;a href="https://metacpan.org/author/PEVANS"&gt;CPAN author&lt;/a&gt;,
&lt;a href="https://leonerds-code.blogspot.com/"&gt;blogger&lt;/a&gt;,
and &lt;a href="https://github.com/leonerd"&gt;core Perl contributor&lt;/a&gt;. He introduced the
&lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;experimental &lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
in Perl 5.32 and the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax in an upcoming version.&lt;/p&gt;

&lt;h2 id="tell-me-a-little-about-yourself-and-your-background-whatever-you-feel-comfortable-sharing"&gt;Tell me a little about yourself and your background; whatever you feel comfortable sharing.&lt;/h2&gt;

&lt;p&gt;Lets see—I&amp;rsquo;m going to do this in reverse chronological order.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m a self-employed contractor, splitting my time between Perl and other computery things, and electronics. Most of the jobs I&amp;rsquo;ve had before I did that were based on Perl, with the minor exception of a little Internet startup company called &amp;ldquo;Google&amp;rdquo;—
maybe you&amp;rsquo;ve heard of them? Sadly they don&amp;rsquo;t do much Perl there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-did-you-first-get-into-programming-perl-and-then-later-hacking-on-perl-s-core"&gt;How did you first get into programming Perl, and then later hacking on Perl&amp;rsquo;s core?&lt;/h2&gt;

&lt;p&gt;I dabbled in a little amount of it at university, during my final year. When I ought to have been studying type systems and other academic stuff I found it much more interesting to be hacking on bits of C and Perl instead, much to the dismay of my supervisors. My first post-study job happened to be in Perl and I&amp;rsquo;ve just stuck with it ever since.&lt;/p&gt;

&lt;p&gt;The core hacking all came as a slow progression from writing Perl code, to writing modules, to the inevitable having to write bits of &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS code&lt;/a&gt; for some of those modules. The deeper you dive into that area the more you find you have to understand how the internals of the interpreter work. The largest amount of time I spent on that was probably while making the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; module—that has to have quite a tight in-depth integration with the interpreter core, in order to successfully suspend and resume running functions, which is the basis of how the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax all works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="you-first-uploaded-the-syntax-keyword-try-module-to-cpan-in-2016-and-at-the-time-there-were-and-are-still-a-number-of-other-modules-with-similar-functionality-you-compared-their-differences-in-the-syntax-keyword-try-documentation-but-were-there-any-particular-issues-that-inspired-you-to-contribute-another-module"&gt;You first uploaded the Syntax::Keyword::Try module to CPAN in 2016, and at the time there were (and are still) a number of other modules with similar functionality. You compared their differences in the Syntax::Keyword::Try documentation, but were there any particular issues that inspired you to contribute another module?&lt;/h2&gt;

&lt;p&gt;Two reasons. The first reason I wrote it just for myself, was a learning exercise to see if I could understand and use this new-fangled &amp;ldquo;&lt;a href="https://perldoc.perl.org/perlapi#wrap_keyword_plugin"&gt;custom keyword&lt;/a&gt;&amp;rdquo; mechanism that was recently added to Perl. Once I had a proof-of-concept working, it didn&amp;rsquo;t take me long to work out how to write it &amp;ldquo;correctly&amp;rdquo;—in the sense that the body of the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks were true blocks, and not closures-in-disguise like all of the pure Perl and even all of the custom syntax modules at the time were all doing. This meant it had a much ligher calling overhead, doesn&amp;rsquo;t interact with &lt;code&gt;@_&lt;/code&gt;, plays nicer with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;, and all sorts of other advantages. From there it didn&amp;rsquo;t take me too long before I had something that I felt had real technical advantages than anything else that came before, so I tried to encourage its use. &lt;a href="irc://irc.freenode.org/perl"&gt;Freenode&amp;rsquo;s #perl channel&lt;/a&gt; in particular were very instrumental in helping that effort, adopting it in their recommendations to new users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="recently-you-ve-spearheaded-adding-native-try-catch-syntax-to-native-perl-and-released-the-feature-compat-try-module-to-offer-the-same-syntax-for-earlier-versions-currently-the-former-is-enabled-by-a-feature-guard-do-you-anticipate-a-time-when-this-will-no-longer-be-the-case-would-that-cause-issues-with-code-that-uses-other-try-catch-syntax-modules"&gt;Recently you&amp;rsquo;ve spearheaded adding native try/catch syntax to native Perl, and released the Feature::Compat::Try module to offer the same syntax for earlier versions. Currently the former is enabled by a feature guard; do you anticipate a time when this will no longer be the case? Would that cause issues with code that uses other try/catch syntax modules?&lt;/h2&gt;

&lt;p&gt;I think it will be quite a while yet before we can see a Perl that would enable it &lt;em&gt;by default&lt;/em&gt;, but I hope very soon it will make its way into the numbered version bundles. That is, I hope that simply&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.36&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be enough to enable the &lt;code&gt;try&lt;/code&gt; syntax, and if and when such a time comes that we decide to bump the major version to 7, that will continue to hold—merely saying&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v7;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be sufficient to get that—along with all the other fancy fun things I hope to see by that time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-do-you-envision-syntax-keyword-try-s-role-going-forward-will-it-be-a-testbed-for-future-native-perl-exception-features"&gt;How do you envision Syntax::Keyword::Try&amp;rsquo;s role going forward? Will it be a testbed for future native Perl exception features?&lt;/h2&gt;

&lt;p&gt;It already is just that. There are more features in Syntax::Keyword::Try than the &amp;ldquo;minimal viable product&amp;rdquo; part that I ported to core in &lt;a href="https://github.com/Perl/perl5/releases/tag/v5.33.7"&gt;5.33&lt;/a&gt;. Two main things come to mind—the typed exception dispatch, and the &lt;code&gt;finally&lt;/code&gt; blocks. I&amp;rsquo;ve lately been looking at some &lt;code&gt;defer&lt;/code&gt; syntax for a more general-purpose version of &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question of how to handle typed dispatch is a more general one, which needs addressing in a wider language context—perhaps including considerations of signatures, &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt; syntax, variable or object slot type assertions, and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="what-s-next-for-you-aside-from-exceptions-in-perl-i-ve-been-reading-about-the-work-you-ve-been-doing-with-curtis-ovid-poe-on-and-your-object-pad-module-would-you-like-to-speak-on-that"&gt;What&amp;rsquo;s next for you aside from exceptions in Perl? I&amp;rsquo;ve been reading about the work you&amp;rsquo;ve been doing with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe on and your Object::Pad module—would you like to speak on that?&lt;/h2&gt;

&lt;p&gt;Yes, object systems seem to be of interest currently—so part of my thoughts are about &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt;. But I&amp;rsquo;m also working on a number of other things. &lt;code&gt;defer&lt;/code&gt; I already mentioned above. Additionally I have some thoughts in the direction of &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;, and a few other bits and pieces. These would mostly be done as CPAN modules at first to experiment with the ideas. I mentioned a lot of them in my recent &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;&amp;ldquo;Perl in 2025&amp;rdquo; talk at FOSDEM&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/</id>
    <published>2021-03-30T01:24:37Z</published>
    <updated>2021-03-30T01:24:37Z</updated>
  </entry>
  <entry>
  <title>Security Issues in Perl IP Address distros</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/security-issues-in-perl-ip-address-distros"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/security-issues-in-perl-ip-address-distros</id>
  <published>2021-03-29T20:51:04</published>
  <updated>2021-03-29T20:51:04</updated>
  <summary>
  <![CDATA[
     **TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.** If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on Dave Rolsky's personal blog. 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><strong>TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.</strong></p>

<p>If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on <a href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/">Dave Rolsky's personal blog</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Outreachy 2021 projects published</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreach-2021-projects"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/outreach-2021-projects</id>
  <published>2021-03-29T20:12:58</published>
  <updated>2021-03-29T20:12:58</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month to make contributions and create a final application. Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products Improve the Perl code quality of Open Food Facts These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. Additionally, Outreachy has one more Perl project sponsored by 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the following Perl Outreachy internship projects. Outreachy interns have about a month (till April 30, 2021 at 4pm UTC) to make contributions and create a final application.</p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-ingredients-analysis-in-open-food-fact">Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products</a></li>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-perl-code-quality-of-open-food-facts">Improve the Perl code quality of Open Food Facts</a></li>
</ul>

<p>These two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. </p>

<p>Additionally, Outreachy has one more Perl project sponsored by <a href="https://matrix.org/">Matrix</a>. </p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/matrix/#extend-and-improve-complement-our-end-to-end-test-">Extend and Improve Complement, our end-to-end test suite</a></li>
</ul>

<p>If you have any questions about the TPF-sponsored projects, feel free to contact Stéphane Gigandet (stephane@openfoodfacts.org) or Makoto Nozaki (makoto@perlfoundation.org).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4523734777886205462</id>
    <published>2021-03-27T18:49:00.000+01:00</published>
    <updated>2021-03-27T18:49:10.026+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiv) 20 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTROUT/App-opan-0.003003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::opan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A CPAN overlay for darkpan and pinning purposes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.003003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.003002 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.43 was 11 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9720&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.9718 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.16&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 4.14 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Markdent-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Markdent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An event-based Markdown parser toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.12&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.11 was 6 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.21&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.20 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210320&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.14&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.12 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.02&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.00 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.17&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.16 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 280&lt;/li&gt;  &lt;li&gt;Previous version: 2.004004 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.010&lt;/strong&gt; on 2021-03-22&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 2.009 was 3 years, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.032&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.029 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.140&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 111&lt;/li&gt;  &lt;li&gt;Previous version: 1.138 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.712&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 7.711001 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BAKERSCOT/String-Util-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;String::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - String processing utility functions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2021-03-26&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.23&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.21 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4523734777886205462/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html" title="(cccxxxiv) 20 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-159827276407573698</id>
    <published>2021-03-27T18:44:00.003+01:00</published>
    <updated>2021-03-27T18:44:38.493+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlx) metacpan weekly report - Hash::Flatten</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten"&gt;Hash::Flatten&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/27 17:43:05 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache2::SSI" target="_blank"&gt;Apache2::SSI&lt;/a&gt; - Apache2 Server Side Include&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::japerl" target="_blank"&gt;App::japerl&lt;/a&gt; - JPerl-again Perl glocalization scripting environment&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::DifferenceSet::Planar" target="_blank"&gt;Math::DifferenceSet::Planar&lt;/a&gt; - object class for planar difference sets&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; - run Perl script in MBCS encoding (not only CJK ;-)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; - Perl client for Playwright&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch::Cxn::NetCurl" target="_blank"&gt;Search::Elasticsearch::Cxn::NetCurl&lt;/a&gt; - A Cxn implementation which uses libcurl via Net::Curl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Typesense" target="_blank"&gt;Search::Typesense&lt;/a&gt; - Perl interface to Typesense search engine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=255)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Applify" target="_blank"&gt;Applify&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::ReverseDependencies" target="_blank"&gt;CPAN::ReverseDependencies&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Firebird" target="_blank"&gt;DBD::Firebird&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eval::Closure" target="_blank"&gt;Eval::Closure&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GDGraph" target="_blank"&gt;GDGraph&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+3=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+2=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+2=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e::RoundTrip" target="_blank"&gt;Jacode4e::RoundTrip&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdent" target="_blank"&gt;Markdent&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Open" target="_blank"&gt;Modern::Open&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Log::Log4perl" target="_blank"&gt;MojoX::Log::Log4perl&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=280)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ" target="_blank"&gt;Net::AMQP::RabbitMQ&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kafka" target="_blank"&gt;Net::Kafka&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=372)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter" target="_blank"&gt;Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ph" target="_blank"&gt;ph&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Profiler::NYTProf" target="_blank"&gt;Plack::Middleware::Profiler::NYTProf&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Clipboard" target="_blank"&gt;Win32::Clipboard&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/159827276407573698/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html" title="(cdlx) metacpan weekly report - Hash::Flatten"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>LibUV Grant: March 2021 Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-libuv-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-report-libuv-2021-03</id>
  <published>2021-03-26T14:41:47</published>
  <updated>2021-03-26T14:41:47</updated>
  <summary>
  <![CDATA[
     Paul Evans' LibUV grant is starting to wrap up. He writes: I've been doing some CPAN releases now, most recent trying to fix a few MSWin32 bugs. I think we're in the final bits now of just trying to finish the thing off and actually get it working. It seems to be mostly fine on Linux now at least.  https://metacpan.org/release/PEVANS/UV-1.905-TRIAL 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul Evans' LibUV grant is starting to wrap up. He writes:</p>

<hr />

<p>I've been doing some CPAN releases now, most recent trying to fix a few
MSWin32 bugs. I think we're in the final bits now of just trying to
finish the thing off and actually get it working. It seems to be mostly
fine on Linux now at least.</p>

<p>https://metacpan.org/release/PEVANS/UV-1.905-TRIAL</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Weekly Challenge 103: Astrology and Audio</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/14#pwc103" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a year $year. Write a script to determine the Chinese Zodiac for the given year $year.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a year $year.
# Write a script to determine the Chinese Zodiac for the given year $year
##
use constant ELEMENTS =&gt; {1 =&gt; q/Wood/, 2 =&gt; q/Fire/, 3 =&gt; q/Earth/, 4 =&gt; q/Metal/, 0 =&gt; q/Water/};
use constant ANIMALS =&gt;  {1 =&gt; q/Rat/, 2 =&gt; q/Ox/, 3 =&gt; q/Tiger/, 4 =&gt; q/Rabbit/, 5 =&gt; q/Dragon/, 6 =&gt; q/Snake/, 7 =&gt; q/Horse/, 8 =&gt; q/Goat/, 9 =&gt; q/Monkey/, 10 =&gt; q/Rooster/, 11 =&gt; q/Dog/, 0 =&gt; q/Pig/}; 

sub chinese_zodiac{
    my($year) = @_;
    return ELEMENTS-&gt;{$year % 5} . " " . ANIMALS-&gt;{($year + 9) % 12};    
} 

MAIN:{
    my($YEAR);
    $YEAR = 2017;
    print chinese_zodiac($YEAR) . "\n";
    $YEAR = 1938;
    print chinese_zodiac($YEAR) . "\n";
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Fire Rooster
Earth Tiger
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;When I first saw the problem statement for this part of the challenge I took a look at the cited Wikipedia article, but it just seemed like a real slog of a read. So I decided to just work backwards from the examples given! Pretty much this seems to boil down to a straightforward modular arithmetic problem. The values are all known and so I hard code then with &lt;code&gt;use constant&lt;/code&gt; and then use them directly.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a program to output which file is currently playing.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub song_times{
    my($file_name) = @_; 
    my %song_times;
    my @song_order;
    my $length = 0; 
    my $index = 0;  
    if(!$file_name){
        while(&lt;DATA&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$index] =  $song; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    else{
        open(FILE, $file_name); 
        while(&lt;FILE&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$song] =  $index; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    return [\%song_times, \@song_order, $length];   
}

sub now_playing{
    my($start_time, $current_time, $file_name) = @_; 
    my($song_times, $song_order, $length_millis);
    $current_time = time() if !$current_time; 
    ($song_times, $song_order, $length_millis) = @{song_times()} if $file_name;   
    ($song_times, $song_order, $length_millis) = @{song_times($file_name)} if !$file_name;   
    my $time_playing = $current_time - $start_time;
    my $cycles = ($time_playing * 1000) / $length_millis;  
    my $current_cycle_millis = ($cycles - int($cycles)) * $length_millis;  
    my $seek_time = 0; 
    for my $song (@{$song_order}){
        $seek_time += $song_times-&gt;{$song};
        if($seek_time &gt; $current_cycle_millis){
            my $position = ($song_times-&gt;{$song} - ($seek_time - $current_cycle_millis)) / 1000; 
            my $hours = int($position/3600);
            my $minutes = int(($position % 3600) / 60);
            my $seconds = int(($position % 3600) % 60);
            $position = sprintf("%02d", $hours) . ":" . sprintf("%02d", $minutes) . ":" . sprintf("%02d", $seconds);    
            return ($song, $position);  
        }   
    }  
}  

MAIN:{
    my($song, $position) =  now_playing(1606134123, 1614591276);   
    print "$song\n$position\n";  
}  

__DATA__
1709363,"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
1723781,"Les Miserables Episode 2: Javert (broadcast date: 1937-07-30)"
1723781,"Les Miserables Episode 3: The Trial (broadcast date: 1937-08-06)"
1678356,"Les Miserables Episode 4: Cosette (broadcast date: 1937-08-13)"
1646043,"Les Miserables Episode 5: The Grave (broadcast date: 1937-08-20)"
1714640,"Les Miserables Episode 6: The Barricade (broadcast date: 1937-08-27)"
1714640,"Les Miserables Episode 7: Conclusion (broadcast date: 1937-09-03)"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
00:10:24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I have to say that I found this deceptively harder to implement than it first appears! I suppose that is always true when working with time.&lt;/p&gt;
&lt;p&gt;In the spirit of good sportsmanship wrote the code to fit the specification given, but then allow for defaults, such as reading from &lt;code&gt;&amp;lt;DATA&amp;gt;&lt;/code&gt; and using the value of &lt;code&gt;time()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way this works here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file list is read in and the times of the songs and the total length of the whole playlist is saved.&lt;/li&gt;
&lt;li&gt;We find out where in the playlist “cycle” we are.&lt;/li&gt;
&lt;li&gt;Given the time of the cycle we “seek” to the position of the current song.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103/"&gt;Challenge 103&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Chinese_zodiac"&gt;Chinese Zodiac&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc103</id>
    <published>2021-03-14T16:46:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
