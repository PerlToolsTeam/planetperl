<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-05-21T08:44:43Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>CPAN Module Tutorials</title>
    <link rel="alternate" href="https://dev.to/davorg/cpan-module-tutorials-2be9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Here's a nice little project that went from a good idea to something useable in a couple of hours.</p>

<p>We all know (I hope) that there are lots of great libraries available on <a href="https://metacpan.org/">MetaCPAN</a>. What isn't sometimes quite as obvious is how to use those libraries. The documentation is usually a pretty good reference but in many cases, what you really want is a good tutorial. And they seem pretty rare on CPAN.</p>

<p>There are, however, hundreds of good tutorials out there on the web. But that doesn't really help the people looking for documentation on MetaCPAN.</p>

<p>Yesterday there was a discussion on the TPF Slack about this very problem. Olaf Alders (who leads the team behind MetaCPAN) said that he would be happy to link to quality posts about modules that are on other sites.</p>

<p>This sounded interesting to me. And I started thinking about a web app where users could submit links to tutorials. The site would then produce an API which MetaCPAN (or, indeed, anyone else) could use to add links to those sites.</p>

<p>I was thinking about a Dancer2 app. Which would require users and authentication and hosting and all the stuff that comes with a web app. But then we realised that (at least as a proof of concept) none of that was actually needed. We could do it all on GitHub.</p>

<p>So now we have <a href="https://github.com/davorg/learncpan/">LearnCPAN</a>. It's just a CSV file with three columns (distribution name, tutorial URL and tutorial title). If you want to submit a new tutorial, then you can simply create a pull request against the repo. Once your PR is merged, there's a simple GitHub Action which parses the CSV file and produces <a href="https://davorg.dev/learncpan/tutorials.json">a JSON file</a> which MetaCPAN can use to add tutorials to a distribution's page.</p>

<p>I've seeded the CSV with a couple of years of examples from the <a href="https://perladvent.org/">Perl Advent Calendar</a>. But it's ready to take your submissions now.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/cpan-module-tutorials-2be9</id>
    <published>2022-05-20T13:45:32Z</published>
    <updated>2022-05-20T13:45:32Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="metacpan"/>
    <category term="tutorials"/>
  </entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 - builtin</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-05-20-auf-dem-weg-zu-perl-536-builtin" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mit Perl 5.36 gibt es ein neues Pragma: `builtin`. Damit lassen sich neue Hilfsfunktionen in das Skript/Modul importieren. Derzeit bietet das Pragma folgende Hilfsfunktionen:</div>
    </content>
    <id>https://blog.perl-academy.de/2022-05-20-auf-dem-weg-zu-perl-536-builtin</id>
    <published>2022-05-20T10:00:00Z</published>
    <updated>2022-05-20T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 165: Line of Best Fit</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/05/perl-weekly-challenge-165-line-of-best-fit.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10790</id>
    <published>2022-05-20T03:31:51Z</published>
    <updated>2022-05-20T03:34:47Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 164 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-164/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on May 22, 2022 at 24:00). This blog post offers some (partial) solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<p>This week, Task 1 and part of Task 2 relate to Scalable Vector Graphics (SVG). I&#8217;ve been using SVG a very long time ago and certainly don&#8217;t remember any of the details. SVG is certainly not very difficult, and I would be delighted to refresh my memory on this subject, but it takes quite a bit of time to assimilate all the possibilities and options, and I don&#8217;t have time for that now. So, I will only cover for the moment the part of the challenge not related to SVG. In the (relatively unlikely) event that I find some time over the weekend, I might come back and fulfill the SVG part.</p>

<p>So, Task 2 is about line of best fit or linear regression.</p>

<p><em>When you have a scatter plot of points, a line of best fit is the line that best describes the relationship between the points, and is very useful in statistics. Otherwise known as linear regression, here is an example of what such a line might look like:</em></p>

<p><img alt="line_of_best_fit.jpg" src="http://blogs.perl.org/users/laurent_r/line_of_best_fit.jpg" width="422" height="319" class="mt-image-none" style="" /></p>

<p><em>The method most often used is known as the <a href="https://www.mathsisfun.com/data/least-squares-regression.html">least squares method</a>, as it is straightforward and efficient, but you may use any method that generates the correct result.</em></p>

<p><em>Calculate the line of best fit for the following 48 points:</em></p>

<pre><code>333,129  39,189 140,156 292,134 393,52  160,166 362,122  13,193
341,104 320,113 109,177 203,152 343,100 225,110  23,186 282,102
284,98  205,133 297,114 292,126 339,112 327,79  253,136  61,169
128,176 346,72  316,103 124,162  65,181 159,137 212,116 337,86
215,136 153,137 390,104 100,180  76,188  77,181  69,195  92,186
275,96  250,147  34,174 213,134 186,129 189,154 361,82  363,89
</code></pre>

<p>If we consider a cloud of <code>n</code> points with coordinates <code>(x, y)</code>, the line of best fit is defined as follows:</p>

<p>The equation for the <em>slope</em> <code>m</code> is:</p>

<pre><code>    n * sum(xy) - sum(x) * sum(y)
m = -----------------------------
    n * sum(x²) - sum(x) * sum(x)
</code></pre>

<p>The <em>y-intercept</em> (i.e. value of <code>y</code> on the vertical axis, when <code>x</code> = 0) <code>b</code> is:</p>

<pre><code>    sum(y) - m * sum(x)
b = -------------------
           n
</code></pre>

<p>The equation of the line is:</p>

<pre><code>y = mx + b
</code></pre>

<h2>Line of Best Fit in Raku</h2>

<p>The following program is just an application of the explanations above. We split the input string on spaces and on commas, to get an array of <code>(x, y)</code> values. The <code>lsm</code> subroutine applies the above least square method formulas to find the slope and intercept. Note that for displaying line of best fit equation, we had to handle two different cases, depending on whether the intercept is positive or negative. Otherwise, for a negative intercept, we would display the line equation as follows:</p>

<pre><code>The equation of the line of best fit is: y = 1.00 x + -1.00
</code></pre>

<p>which is not satisfactory. </p>

<p>Also note the use of the <code>»</code> <a href="https://docs.raku.org/syntax/%3C%3C">hyper operator</a> when reading the input data to apply the second <code>split</code> to each of the values returned by the first <code>split</code>.</p>

<pre><code>my $input =
   '333,129  39,189 140,156 292,134 393,52  160,166 362,122  13,193
    341,104 320,113 109,177 203,152 343,100 225,110  23,186 282,102
    284,98  205,133 297,114 292,126 339,112 327,79  253,136  61,169
    128,176 346,72  316,103 124,162  65,181 159,137 212,116 337,86
    215,136 153,137 390,104 100,180  76,188  77,181  69,195  92,186
    275,96  250,147  34,174 213,134 186,129 189,154 361,82  363,89';

# $input = '1,0 2,1 3,2 4,3'; # test with a negative intercept

my @points = $input.split(/\s+/)».split(/','/);
my ($slope, $intercept) = lsm(@points);
say "Slope: $slope, intercept = $intercept";
my $sign = $intercept &lt; 0 ?? '-' !! '+'; 
printf "The equation of the line of best fit is: y = %.2f x %s %.2f \n", $slope, $sign, $intercept.abs;

sub lsm (@points) {
    my ($s-x, $s-y, $s-xy, $s-x2) = 0 xx 4;
    for @points -&gt; $point {
        my ($x, $y) = $point[0, 1];
        $s-x += $x;
        $s-y += $y;
        $s-xy += $x * $y;
        $s-x2 += $x ** 2;
    }
    my $n = @points.elems;
    my $slope = ($n * $s-xy - $s-x * $s-y) / ($n * $s-x2 - $s-x ** 2);
    my $intercept = ($s-y - $slope * $s-x) / $n;
    return $slope, $intercept;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./lsm.raku
10366, 6497, 1220463, 2847440
Slope: -0.2999565, intercept = 200.132272536
The equation of the line of best fit is: y = -0.30 x + 200.13
</code></pre>

<p>Uncomment the line redefining the input string to display the result with a negative intercept:</p>

<pre><code>$ raku ./lsm.raku
Slope: 1, intercept = -1
The equation of the line of best fit is: y = 1.00 x - 1.00
</code></pre>

<h2>Line of Best Fit in Perl</h2>

<p>We are applying here the same equations as before in Raku. For the final display of the line equation, we also have to handle separate cases, depending on whether the intercept is positive or negative. Perl doesn’t have the <code>»</code> hyper-operator, but it is quite easy to replace it with a <code>map</code>.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $input =
   '333,129  39,189 140,156 292,134 393,52  160,166 362,122  13,193
    341,104 320,113 109,177 203,152 343,100 225,110  23,186 282,102
    284,98  205,133 297,114 292,126 339,112 327,79  253,136  61,169
    128,176 346,72  316,103 124,162  65,181 159,137 212,116 337,86
    215,136 153,137 390,104 100,180  76,188  77,181  69,195  92,186
    275,96  250,147  34,174 213,134 186,129 189,154 361,82  363,89';

# $input = '1,0 2,1 3,2 4,3';   # test with a negative intercept

my @points = map { [split /,/, $_] } split /\s+/, $input;
my ($sl, $inter) = lsm(@points);
say "Slope: $sl, intercept = $inter";
my $sign = $inter &lt; 0 ? '-' : '+';
printf "The equation of the line of best fit is: y = %.2f x %s %.2f \n", $sl, $sign, abs $inter;

sub lsm {
    my @points = @_;
    my ($s_x, $s_y, $s_xy, $s_x2) = (0, 0, 0, 0);
    for my $point (@points) {
        my ($x, $y) = ($point-&gt;[0], $point-&gt;[1]);
        $s_x += $x;
        $s_y += $y;
        $s_xy += $x * $y;
        $s_x2 += $x ** 2;
    }
    my $n = scalar @points;
    my $slope = ($n * $s_xy - $s_x * $s_y) / ($n * $s_x2 - $s_x ** 2);
    my $intercept = ($s_y - $slope * $s_x) / $n;
    return $slope, $intercept;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./lsm.pl
Slope: -0.299956500261231, intercept = 200.132272535582
The equation of the line of best fit is: y = -0.30 x + 200.13
</code></pre>

<p>Uncomment the line redefining the input string to display the result with a negative intercept:</p>

<pre><code>$ perl ./lsm.pl
Slope: 1, intercept = -1
The equation of the line of best fit is: y = 1.00 x - 1.00
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on May 29, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>My Favorite Modules: Time::Piece</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/05/my-favorite-modules-timepiece.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10789</id>
    <published>2022-05-20T02:29:48Z</published>
    <updated>2022-05-20T02:32:56Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><a href="https://metacpan.org/pod/Time::Piece"><code>Time::Piece</code></a> is a date/time module that replaces the built-in functions <a href="https://perldoc.perl.org/perlfunc#gmtime-EXPR"><code>gmtime()</code></a> and <a href="https://perldoc.perl.org/perlfunc#localtime-EXPR"><code>localtime()</code></a>. The replaced functions return a <a href="https://metacpan.org/pod/Time::Piece"><code>Time::Piece</code></a> object, with accessors for the compontents of the time. <code>Time::Piece</code> also provides formatting, parsing, and arithmetic.</p>

<p>This module has been in core since Perl 5.9.5. I was able to get it to pass
tests as far back as 5.8.1, though not 5.8.0 or 5.6.2.</p>

<p>Without this module, you would obtain the current Gregorian year in your local zone like this</p>

<pre>
my $year = ( localtime() )[5] + 1900;
</pre>

<p>or maybe</p>

<pre>
my ( undef, undef, undef, undef, undef, $year ) = localtime();
$year += 1900;
</pre>

<p>Neither is particularly self-documenting, and the latter is much more verbose than we expect of Perl.</p>

<p>But with <code>Time::Piece</code>, the code looks like this:</p>

<pre>
use Time::Piece;

<p>my $year = localtime-&gt;year();<br />
</pre></p>

<p>Yes, this actually gives you the Gregorian year. If you want the Perl year (Gregorian - 1900), you can use the <code>_year()</code> method instead. This is documented and therefore public, despite the leading underscore.</p>

<p>There are, of course, accessors for everything returned by the replaced core functions. In cases where the core function returns a value offset from the usually-displayed value, there are accessors for both.</p>

<p>Date arithmetic is implemented using operator overloading. Subtracting a <code>Time::Piece</code> from another yields a <a href="https://metacpan.org/pod/Time::Seconds"><code>Time::Seconds</code></a> object, which is also part of the <a href="https://metacpan.org/dist/Time-Piece"><code>Time-Piece</code></a> distribution. You can also add seconds to a <code>Time::Piece</code>. Arithmetic takes account of summer time. If executed in zone <code>America/New_York</code>, the following

<pre>
use 5.010;

<p>use Time::Local;<br />
use Time::Piece;</p>

<p># Noon the day before the switch to daylight saving time (in America/New_York)<br />
my $before = localtime( timelocal( 0, 0, 12, 12, 2, 2022 ) );<br />
# Noon the day of the switch to daylight saving time (in America/New_York)<br />
my $after  = localtime( timelocal( 0, 0, 12, 13, 2, 2022 ) );</p>

<p>say 'Before: ', $before-&gt;strftime();<br />
say ' After: ', $after -&gt;strftime();<br />
my $delta = $after - $before;	# A Time::Seconds<br />
say ' Delta: ', $delta-&gt;pretty();	# Only 23 hours.<br />
</pre></p>

<p>prints</p>

<pre>
Before: Sat, 12 Mar 2022 12:00:00 EST
 After: Sun, 13 Mar 2022 12:00:00 EDT
 Delta: 23 hours, 0 minutes, 0 seconds
</pre>

<p>Note that <code>Time::Piece</code> is smart enough to handle objects from different zones. If one of the calls to <code>localtime()</code> in the above code is changed to <code>gmtime()</code> the corresponding time output will change, but the delta will remain the same.</p>

<p>The <code>strftime()</code> method takes the same format string as the <code>strftime()</code> <a href="https://perldoc.perl.org/POSIX.html"><code>POSIX</code></a> subroutine, but without needing to load the <code>POSIX</code> module.

<p>Date parsing is <code>strptime()</code>-style, and by default only parses American English. You can change this to your locale by calling <code>Time::Piece-&gt;use_locale();</code>, but be aware that this is a global setting.</p>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"><code>re</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-develnytprof.html"><code>Devel::NYTProf</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/05/my-favorite-modules-errno.html"><code>Errno</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Use multiple gmail accounts via mutt and (offline) IMAP</title>
    <link href="http://domm.plix.at/perl/2022_05_use_multiple_gmail_accounts_via_mutt_and_offlineimap.html"/>
    <id>http://domm.plix.at/perl/2022_05_use_multiple_gmail_accounts_via_mutt_and_offlineimap.html</id>
    <updated>2022-05-19T14:00:40+00:00</updated>
    <category term="perl"/>
    <summary>I started with a new project recently, which means I have to use yet another Google Workspace (i.e. gmail for businesses). While having the gmail webapp open in multiple Firefox Multi-Account ...</summary>
    <content type="html">&lt;p&gt;I started with a &lt;a href="https://balloon-events.com/"&gt;new project&lt;/a&gt; recently, which means I have to use yet another Google Workspace (i.e. gmail for businesses). While having the gmail webapp open in multiple &lt;a href="https://support.mozilla.org/en-US/kb/containers"&gt;Firefox Multi-Account Containers&lt;/a&gt; is an option, it's not something I like to do. And I don't really like the gmail web interface anyway. I prefer &lt;a href="http://www.mutt.org/"&gt;mutt&lt;/a&gt; (and use it since forever,,,). Some years ago I sort of managed to read gmail mails via &lt;span class="caps"&gt;IMAP, &lt;/span&gt;but couldn't get sending to work. So I decided to give this another try. And it worked!&lt;/p&gt;

&lt;h4&gt;Overview&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I have multiple separate gmail accounts&lt;/li&gt;
&lt;li&gt;I use mutt to read and write email&lt;/li&gt;
&lt;li&gt;I use &lt;a href="http://www.offlineimap.org/"&gt;offlineimap&lt;/a&gt; to download mails via &lt;span class="caps"&gt;IMAP &lt;/span&gt;onto my laptop (so I can read my mails while offline, and search through them on my disk)&lt;/li&gt;
&lt;li&gt;To send mails, I drop them into an exim running on my laptop, which then sends them via the mail service I use&lt;ul&gt;
&lt;li&gt;This did not work for gmail, but I found something that works (see below)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Syncing gmail via offlineimap and an "app password"&lt;/h4&gt;

&lt;p&gt;This seems rather easy, but google does not really like you to use your regular password in automated tools. One solution is to use OAuth2, as described &lt;a href="https://hobo.house/2017/07/17/using-offlineimap-with-the-gmail-imap-api/"&gt;here&lt;/a&gt;. But this seems a bit to much hassle, so I choose the other route, i.e. setting up an "app password". An "app password" is a password that google generates for you so you can use it in various apps (of dubious security).&lt;/p&gt;

&lt;p&gt;To get such an app password, you first have to secure your account with Two Factor Authentication (2FA) (if you haven't already done that):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to https://myaccount.google.com&lt;/li&gt;
&lt;li&gt;Find "2-Step Verification" under the &lt;strong&gt;Security&lt;/strong&gt; headline&lt;/li&gt;
&lt;li&gt;Go through the process. I use the "Google Authenticator" app on my mobile phone&lt;/li&gt;
&lt;li&gt;After you've set this up, you'll find the new option "App passwords" under "Security" / "Signing into Google"&lt;/li&gt;
&lt;li&gt;Select an app ("Mail") and give it a custom name (eg "offlineimap"), click on "generate" and copy the password (you'll never see it again!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can add a new Account to your &lt;code&gt;.offlineimaprc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Account FOO]
localrepository = LocalFoo
remoterepository = RemoteFoo
synclabels = yes

[Repository LocalFoo]
type = Maildir
localfolders = /path/to/mails/Foo

[Repository RemoteFoo]
type = IMAP
remotehost = imap.gmail.com
# if you have a custom domain set up:
remoteuser = foo@example.com
# if you use a plain gmail account:
# remoteuser = foo@gmail.com
remotepass = your-app-password
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you run &lt;code&gt;offlineimap&lt;/code&gt; you might want to consider configuring your gmail labels (i.e. what google uses for mail folders). Google sets up a bunch of (IMO stupid) default labels. It will also duplicate mails, because all mails stay in the Inbox and will be sort-of-copied into folders (if the label matches). So go to your gmail settings (click on the gear-wheel, then "See all settings"), go to "Labels" and uncheck the "Show in &lt;span class="caps"&gt;IMAP&lt;/span&gt;" box on all labels (except Inbox, which you cannot uncheck anyway..). If you have set up mail filters, make sure they have the "Skip Inbox" flag set, otherwise you'll get them twice.&lt;/p&gt;

&lt;p&gt;Now is also a good time to clean up your Inbox (or you'll wait a long time on the first sync..)&lt;/p&gt;

&lt;h4&gt;Configuring mutt&lt;/h4&gt;

&lt;p&gt;The first thing we need to do is to tell mutt about the new folder / labels / &lt;code&gt;mailboxes&lt;/code&gt; (in mutt language..):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+mailboxes =Foo/INBOX +Foo/'[Gmail].Sent Mail' +Foo/some_label&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt; here is the actual directory name of the maildir you specified in offlineimap: &lt;code&gt;localfolders = /path/to/mails/Foo&lt;/code&gt;. You can list all the labels you enabled for &lt;span class="caps"&gt;IMAP &lt;/span&gt;here, and mutt will automatically jump to the mail folder if there is new mail after an offlineimap run.&lt;/p&gt;

&lt;p&gt;Another thing I like to do is to set up a separate "profile" for each account, using a different color and sender for each project. For this I set up a file like this in my &lt;code&gt;~/.mutt/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# file: ~/.mutt/profile_foo
set from=&amp;quot;Thomas Klausner &amp;lt;domm@example.net&amp;gt;&amp;quot;
set use_from
set envelope_from
set signature=~/.foo_signature
color indicator black brightgreen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make sure I use the right sender, and will also alert me as who I am currently writing by setting the indicator to a specific color.&lt;/p&gt;

&lt;p&gt;But how do we enable this profile? Via a &lt;code&gt;folder-hook&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;folder-hook =Foo &amp;quot;source ~/.mutt/profile_foo\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime we enter a folder under &lt;code&gt;Foo&lt;/code&gt;, we source this profile. Nice!&lt;/p&gt;

&lt;h4&gt;Sending mail&lt;/h4&gt;

&lt;p&gt;But how can we now actually send mail using the gmail sender? Thanks to spammers, you cannot just use any sender address with any &lt;span class="caps"&gt;SMTP &lt;/span&gt;server anymore, they are much stricter now (and gmail even more so). So we need to send mails via gmail, using the correct set of credentials. I assume that exim has some setting to do this, but I found an easier way:&lt;/p&gt;

&lt;p&gt;Mutt can send mail not only via localhost, but also directly via &lt;span class="caps"&gt;SMTP&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;All we have to do is add something like this to our &lt;code&gt;~/.mutt/profile_foo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set smtp_url = &amp;quot;smtps://foo@example.com:your-app-password@smtp.gmail.com:465&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we also need to unset &lt;code&gt;smtp_url&lt;/code&gt; for the default account (which uses the local exim). So in the &lt;code&gt;default_profile&lt;/code&gt; just add &lt;code&gt;unset smtp_url&lt;/code&gt;. And load the default profile via another folder hook:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;folder-hook . &amp;quot;source ~/.mutt/profile_default\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's how I prevented going crazy having to juggle multiple gmail accounts!&lt;/p&gt;

&lt;p&gt;One downside of this approach is that the app passwords are now lying around on my disk, so anybody with access to my disk can read/send mails. In case I know my disk has been compromised, I could disable the app passwords in my google account settings. But a nicer approach would be to store them in some password store (I use &lt;a href="https://github.com/gopasspw/gopass"&gt;gopass&lt;/a&gt;) and somehow inject them after unlocking them. This will have to wait for another time...&lt;/p&gt;</content>
    <category term="mutt"/>
    <category term="offlineimap"/>
  </entry>
  <entry>
    <title>Mojolicious</title>
    <link rel="alternate" href="https://dev.to/victoriabispo/mojolicious-12j" type="text/html"/>
    <content type="html">

&lt;p&gt;Durante um ano e meio trabalhei com o &lt;em&gt;mojolicious&lt;/em&gt; em um projeto legado dentro de uma empresa de telecomunicações. Aprendi a fazer diversas coisas com ele e hoje vim contar para vocês como ele funciona.&lt;/p&gt;

&lt;h2&gt;
  
  
  O que é?
&lt;/h2&gt;

&lt;p&gt;O &lt;em&gt;mojolicious&lt;/em&gt; é um &lt;em&gt;framework&lt;/em&gt; composto de um conjunto de componentes para desenvolvimento Web em tempo real com &lt;em&gt;Perl&lt;/em&gt; usando um MVC bem estruturado. Abaixo podemos observar alguns dos seus recursos disponíveis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementação cliente/servidor HTTP e &lt;em&gt;WebSocket&lt;/em&gt; com IPv6, TLS, SNI, IDNA, &lt;em&gt;proxy&lt;/em&gt; HTTP/SOCKS5, &lt;em&gt;socket&lt;/em&gt; de domínio UNIX, &lt;em&gt;Comet (long polling), Promises&lt;/em&gt;/A+, &lt;em&gt;async/await&lt;/em&gt;, &lt;em&gt;keep-alive&lt;/em&gt;, &lt;em&gt;timeout&lt;/em&gt;, suporte a compressão &lt;em&gt;cookie&lt;/em&gt;, &lt;em&gt;multipart&lt;/em&gt; e &lt;em&gt;gzip&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Servidor da Web de E/S sem bloqueio integrado, com suporte a vários &lt;em&gt;loops&lt;/em&gt; de eventos, bem como pré-bifurcação opcional, perfeito para criar serviços da &lt;em&gt;Web&lt;/em&gt; altamente escaláveis.&lt;/li&gt;
&lt;li&gt;Analisador JSON e HTML/XML com suporte a seletores CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Como usar?
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Perlbrew
&lt;/h3&gt;

&lt;p&gt;Recomendo que como primeiro passo para programar em &lt;em&gt;Perl&lt;/em&gt; baixem o gerenciador de instalação &lt;a href="https://perlbrew.pl/"&gt;&lt;em&gt;Perlbrew&lt;/em&gt;&lt;/a&gt;. Ele vai te ajuda-los a ter várias versões do &lt;em&gt;perl&lt;/em&gt; instaladas no seu computador e te auxiliar a administra-las de maneira bem simples.&lt;/p&gt;

&lt;p&gt;Para instalar o &lt;em&gt;Perlbrew&lt;/em&gt; basta executar o seguinte comando no terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://install.perlbrew.pl | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para instalar a versão estável mais recente e usá-la a partir de agora:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew &lt;span class="nb"&gt;install &lt;/span&gt;perl-5.34.0
&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew switch perl-5.34.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para programar com a versão mais atualizada, mas apenas no terminal atual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew &lt;span class="nb"&gt;install &lt;/span&gt;perl-blead
&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew use perl-blead
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para executar &lt;em&gt;meuprograma.pl&lt;/em&gt; em todas as instalações do perl, muito útil ao fazer testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew &lt;span class="nb"&gt;exec &lt;/span&gt;perl meuprograma.pl

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para a folha de dicas de uso básico:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew &lt;span class="nt"&gt;-h&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para mais descrições sobre comandos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perlbrew &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Instalação
&lt;/h3&gt;

&lt;p&gt;A instalação do &lt;em&gt;mojolicious&lt;/em&gt; pode ser feita de maneira rápida no terminal por meio de apenas uma linha:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://cpanmin.us | perl - &lt;span class="nt"&gt;-M&lt;/span&gt; https://cpan.metacpan.org &lt;span class="nt"&gt;-n&lt;/span&gt; Mojolicious
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Hello Word!
&lt;/h3&gt;

&lt;p&gt;Como prometido, abaixo mostro a vocês como é simples escrever uma aplicação Web completa com o &lt;em&gt;mojolicious&lt;/em&gt; utilizando apenas as linhas a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojolicious::&lt;/span&gt;&lt;span class="nv"&gt;Lite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello Word!&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basta salvar o arquivo com a extensão .pl e executa-lo usando &lt;em&gt;morbo&lt;/em&gt; para inicia-lo com servidor web integrado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;morbo hello.pl
Web application available at http://127.0.0.1:3000

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://127.0.0.1:3000/
Hello Word!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👋🏻 Então pessoal, como viram a cima usar o &lt;em&gt;mojolícious&lt;/em&gt; não é tão difícil, e como disse no começo ele pode nos ajudar em diversas coisas. Nos próximos posts irei ensinar a vocês todos os principais recursos desse &lt;em&gt;framework&lt;/em&gt; e as classes que o compõem. fiquem ligados para os próximos posts. Até a próxima.&lt;/p&gt;

</content>
    <author>
      <name>Victoria Ricarte Bispo Beserra</name>
    </author>
    <id>https://dev.to/victoriabispo/mojolicious-12j</id>
    <published>2022-05-16T22:45:44Z</published>
    <updated>2022-05-16T22:45:44Z</updated>
    <category term="perl"/>
    <category term="opensource"/>
    <category term="braziliandevs"/>
  </entry>
  <entry>
    <title>#564 - Issues with OOP?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/564.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>I am a big fan OOP and can't wait to see Modern Object in Perl, <strong>Corinna</strong>, to be part of core Perl. Last update I had was in early January by <strong>Curtis</strong>. You can checkout the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2022/01/msg262335.html">details here</a>.</p>
<p>If you are new to <strong>Corinna</strong> then I would recommend you checkout <a href="https://github.com/Ovid/Cor/wiki/Porting-from-Moose-or-Moo">this post</a> by <strong>Curtis</strong>. Those who don't know, <strong>Curtis</strong> is leading the team working on <strong>Corinna</strong>.</p>
<p>Talking about OOP, I came across another <a href="https://ovid.github.io/articles/common-problems-in-object-oriented-code.html">post</a> by none other than <strong>Curtis</strong> himself sharing the common issues with OO code. This should be taught to anyone starting OO in any language and not just Perl, in my humble opinion. Having read it few times already from start to end in one go, I keep going back to it to keep myself reminded about it all the time. You would definitely want to bookmark it for future reference.</p>
<p>Few weeks ago, I shared post <a href="https://ovid.github.io/articles/why-is-object-oriented-programming-bad.html">Why is Object-Oriented Programming Bad?</a> by Curtis. My favourite line in the post, <strong>"I think there’s a good case to be made that OOP is not nearly as useful as it’s claimed."</strong>. Mind you, this is coming from <strong>Curtis</strong>.</p>
<p>Enough of OO, lets talk about <strong>Exceptions in Perl</strong>, I would like to share the <a href="https://gist.github.com/Ovid/5205534f7dcc52e4d931aaff301b39aa">blog post</a> by <strong>Curtis</strong> (once again), where he points out the common issue in Perl. It reminded me about my recent <a href="https://github.com/manwar/perl-cool-snippets/blob/main/v534/try-catch.pl">post</a> sharing the new try/catch block in <strong>Perl v5.34</strong>.</p>
<p>Last but not the least, please find this <a href="https://gist.github.com/Ovid/0ef90f9f48f04fdad5d2ee8204fab776">gem</a> by <strong>Curtis</strong> talking about testing database operations with a fresh instance of SQLite everytime. I wonder, if this can be shared as <strong>CPAN module</strong>. Just thinking out loud, I know.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/564.html</id>
    <published>2022-05-16T10:00:00Z</published>
    <updated>2022-05-16T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Exercise 1 - Calculator, Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-05-16T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-exercise-1"/>  <id>https://perlmaven.com/dancer2-exercise-1</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Happily Computing Prime Palindrome Numbers</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/05/15#pwc164" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find all prime numbers less than 1000, which are also palindromes in base 10.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Math::Primality qw/is_prime/;

sub palindrome_primes_under{
    my($n) = shift;
    my @palindrome_primes;
    {
        $n--;
        unshift @palindrome_primes, $n if(is_prime($n) &amp;&amp; join("", reverse(split(//, $n))) == $n);
        redo if $n &gt; 1;  
    }
    return @palindrome_primes;
}

MAIN:{
    print join(", ", palindrome_primes_under(1000));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 11, 101, 131, 151, 181, 191, 313, 353, 373, 383, 727, 757, 787, 797, 919, 929
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have become incorrigible in my use of &lt;code&gt;redo&lt;/code&gt;! The novelty just hasn't worn off I 
suppose. There is nothing really wrong with it, of course, it's just not  particularly
modern convention what with it's vaguely &lt;code&gt;goto&lt;/code&gt; like behavior. Anyway, there's not a whole
lot to cover here. All the real work is done in the one line which tests both primality 
and, uh, &lt;em&gt;palindromedary&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the first 8 Happy Numbers in base 10.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use constant N =&gt; 8;

sub happy{
    my $n = shift;
    my @seen;
    my $pdi = sub{
        my $n = shift;
        my $total = 0;
        {
            $total += ($n % 10)**2;
            $n = int($n / 10);
            redo if $n &gt; 0;
        }
        return $total;
    };
    {
        push @seen, $n;
        $n = $pdi-&gt;($n);
        redo if $n &gt; 1 &amp;&amp; (grep {$_ == $n} @seen) == 0; 
    }
    return boolean($n == 1);
}

MAIN:{
    my $i = 0;
    my @happy;
    {
        $i++;
        push @happy, $i if happy($i);
        redo if @happy &lt; N;
    }
    print join(", ", @happy) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 7, 10, 13, 19, 23, 28, 31
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution has even more &lt;code&gt;redo&lt;/code&gt;, huzzah! Again, fairly straightforward bit of code 
which follows the definitions. The happiness check is done using a &lt;em&gt;perfect digit 
invariant&lt;/em&gt; (PDI) function, here rendered as an anonymous inner subroutine. A good chance 
here when looking at this code to remind ourselves that &lt;code&gt;$n&lt;/code&gt; inside that anonymous 
subroutine is in a different scope and does not effect the outer &lt;code&gt;$n&lt;/code&gt;! &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-164/"&gt;Challenge 164&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc164</id>
    <published>2022-05-15T23:58:00-04:00</published>
    <updated>2022-05-15T23:58:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2931979140992569755</id>
    <published>2022-05-14T15:13:00.000+02:00</published>
    <updated>2022-05-14T15:13:23.244+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxcii) 7 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.070&lt;/strong&gt; on 2022-05-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.069 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carmel-v0.1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carmel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN Artifact Repository Manager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.1.56&lt;/strong&gt; on 2022-05-11&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: v0.1.46 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BRTASTIC/Kelp-1.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Kelp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A web framework light, yet rich in nutrients. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.06&lt;/strong&gt; on 2022-05-09&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.05 was 1 year, 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.65&lt;/strong&gt; on 2022-05-09&lt;/li&gt;  &lt;li&gt;Votes: 156&lt;/li&gt;  &lt;li&gt;Previous version: 6.64 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.18' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.18&lt;/strong&gt; on 2022-05-10&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.17 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2022-05-10&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9516' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9516&lt;/strong&gt; on 2022-05-11&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9514 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2931979140992569755/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/05/cccxcii-7-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2931979140992569755"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2931979140992569755"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/05/cccxcii-7-great-cpan-modules-released.html" title="(cccxcii) 7 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4995067099390024437</id>
    <published>2022-05-14T15:09:00.001+02:00</published>
    <updated>2022-05-14T15:09:20.902+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dvi) metacpan weekly report - Carmel</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 37&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel (+5)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/05/14 13:08:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::DTrace::Provider" target="_blank"&gt;Devel::DTrace::Provider&lt;/a&gt; - Create DTrace providers for Perl programs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::OpenSRS" target="_blank"&gt;Net::OpenSRS&lt;/a&gt; - Domain registration via the Tucows OpenSRS HTTPS XML API&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OO::DateTime" target="_blank"&gt;OO::DateTime&lt;/a&gt; - Lightweight normalised datetime data type&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quantum::Superpositions::Lazy" target="_blank"&gt;Quantum::Superpositions::Lazy&lt;/a&gt; - Weighted QM-like superpositions with lazy evaluation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Utmp" target="_blank"&gt;Sys::Utmp&lt;/a&gt; - Object(ish) Interface to UTMP files.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ModuleBuildTiny" target="_blank"&gt;App::ModuleBuildTiny&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+5=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+2=113)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Meta" target="_blank"&gt;CPAN::Meta&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::CSRF" target="_blank"&gt;Dancer2::Plugin::CSRF&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=176)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Domain::PublicSuffix" target="_blank"&gt;Domain::PublicSuffix&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+2=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CookieJar" target="_blank"&gt;HTTP::CookieJar&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPTables::ChainMgr" target="_blank"&gt;IPTables::ChainMgr&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Simple" target="_blank"&gt;Keyword::Simple&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::relative::to" target="_blank"&gt;lib::relative::to&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=286)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=320)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DRI" target="_blank"&gt;Net::DRI&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Whois::Parser" target="_blank"&gt;Net::Whois::Parser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Whois::Raw" target="_blank"&gt;Net::Whois::Raw&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=392)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=136)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Date" target="_blank"&gt;Time::Date&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32" target="_blank"&gt;Win32&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::XPath" target="_blank"&gt;XML::XPath&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4995067099390024437/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/05/dvi-metacpan-weekly-report-carmel.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4995067099390024437"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4995067099390024437"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/05/dvi-metacpan-weekly-report-carmel.html" title="(dvi) metacpan weekly report - Carmel"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9194392388233068842</id>
    <published>2022-05-14T15:08:00.002+02:00</published>
    <updated>2022-05-14T15:08:18.285+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxiv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-05-14 13:07:34 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72205668" target="_blank"&gt;Why does Types::Standard break Scalar::Util::readonly?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72179071" target="_blank"&gt;Perl regex - print only modified line (like sed -n 's///p')&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72188453" target="_blank"&gt;multi replace in postgresql query using perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72161148" target="_blank"&gt;Perl dynamic / symbolic function reference&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72175165" target="_blank"&gt;How to open a filehandle with an existing variable in perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9194392388233068842/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/05/dxxxiv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9194392388233068842"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9194392388233068842"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/05/dxxxiv-stackoverflow-perl-report.html" title="(dxxxiv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 164: Prime Palindromes and Happy Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/05/perl-weekly-challenge-164-prime-palindromes-and-happy-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10786</id>
    <published>2022-05-12T20:28:15Z</published>
    <updated>2022-05-12T20:31:51Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 164 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-164/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on May 15, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Prime Palindromes</h2>

<p><em>Write a script to find all prime numbers less than 1000, which are also palindromes in base 10. Palindromic numbers are numbers whose digits are the same in reverse. For example, 313 is a palindromic prime, but 337 is not, even though 733 (337 reversed) is also prime.</em></p>

<h3>Prime Palindromes in Raku</h3>

<p>We use a data pipeline (chained method invocations) with two <code>grep</code> statements, one to keep palindromes and one to keep prime numbers. This leads to a fairly concise one-line solution:</p>

<pre><code>say (1..^1000).grep({ $_ == .flip }).grep({.is-prime});
</code></pre>

<p>This works because, with such chained method invocations, the output of the first <code>grep</code> is fed as input to the second <code>grep</code>. This script displays the following output:</p>

<pre><code>$ raku ./prime-palindrome.raku
(2 3 5 7 11 101 131 151 181 191 313 353 373 383 727 757 787 797 919 929)
</code></pre>

<p>We can also do it as a Raku one-liner:</p>

<pre><code>$ raku -e 'say (1..^1000).grep({ $_ == .flip }).grep({.is-prime});'
(2 3 5 7 11 101 131 151 181 191 313 353 373 383 727 757 787 797 919 929)
</code></pre>

<h3>Prime Palindromes in Perl</h3>

<p>Perl doesn&#8217;t have a built-in function to determine whether an integer is prime, so we write our own <code>is_prime</code> subroutine. Since we&#8217;re eventually going to test only slightly more than 100 small integers, there is no need to aggressively optimize the performance of this subroutine. The program runs in significantly less than a tenth of a second.</p>

<p>Once we have implemented the <code>is-prime</code> subroutine, we can use a data pipeline (piped function calls) as before to solve the problem in just one code line:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_prime {
    my $num = shift;
    return 1 if $num == 2;
    return 0 unless $num % 2;
    my $test = 3;
    while ($test &lt; $num/2) {
        return 0 if $num % $test == 0;
        $test += 2;
    }
    return 1;
}

say map "$_ ", grep { is_prime $_} grep {$_ == reverse $_} 1..999;
</code></pre>

<p>This data pipeline should be read from right to left: we start with a range of integers between 1 and 999, apply a first filter (<code>grep {$_ == reverse $_}</code>) to keep only the palindromic integers, apply a second filter to retain only the primes, and finally a <code>map</code> to properly format the output (add a space between the values).</p>

<p>This program displays the following output:</p>

<pre><code>$ perl ./prime-palindrome.pl
1 2 3 5 7 11 101 131 151 181 191 313 353 373 383 727 757 787 797 919 929
</code></pre>

<h2>Task 2: Happy Numbers</h2>

<p><em>Write a script to find the first 8 Happy Numbers in base 10. For more information, please check out <a href="https://en.wikipedia.org/wiki/Happy_number">Wikipedia</a>.</em></p>

<p><em>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</em></p>

<p><em>Those numbers for which this process end in 1 are happy numbers, while those numbers that do not end in 1 are unhappy numbers.</em></p>

<p><em>Example:</em></p>

<pre><code>19 is Happy Number in base 10, as shown:

19 =&gt; 1^2 + 9^2
   =&gt; 1   + 81
   =&gt; 82 =&gt; 8^2 + 2^2
         =&gt; 64  + 4
         =&gt; 68 =&gt; 6^2 + 8^2
               =&gt; 36  + 64
               =&gt; 100 =&gt; 1^2 + 0^2 + 0^2
                      =&gt; 1 + 0 + 0
                      =&gt; 1
</code></pre>

<p>Basically, we need a subroutine to perform iteratively the process of replacing the current number with the sum of the squares of its digit. If we find 1, then we&#8217;ve found an happy number and can return a true value to break out of the process. If we find a number that we have already seen, then we have entered into an endless loop, which means that have found an unhappy (or sad) number, and we can return a false value to break out of the process.</p>

<h3>Happy Numbers in Raku</h3>

<p>The <code>is-happy</code> subroutine implements the algorithm described above. We use a <code>SetHash</code> to store the intermediate values and check whether we have entered into an endless loop. Note that we create an infinite lazy list of happy numbers, and then print out the number of happy numbers that we need.</p>

<pre><code>sub is-happy(Int $n is copy) {
    my $seen = SetHash.new;
    loop {
        return True if $n == 1;
        return False if $n ∈ $seen;
        $seen{$n} = True;
        $n = $n.comb.map({$_ ** 2}).sum;
    }
}
my @happy-numbers = grep {is-happy $_}, 1..Inf;
say @happy-numbers[0..7];
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./happy-numbers.raku
(1 7 10 13 19 23 28 31)
</code></pre>

<h3>Happy Numbers in Perl</h3>

<p>In Perl, the <code>is_happy</code> subroutine implements again the algorithm outlined above. We use a plain hash to store the intermediate values and check whether we have entered into an endless loop.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_happy {
    my $n = shift;
    my %seen;
    while (1) {
        return 1 if $n == 1;
        return 0 if exists $seen{$n};
        $seen{$n} = 1;
        my $sum = 0;
        $sum += $_ for map $_ ** 2, split //, $n;
        $n = $sum;
    }
}
my $count = 0;
my $i = 1;
while ($count &lt; 8) {
    if (is_happy $i) {
        print "$i ";
        $count++;
    }
    $i++;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./happy-numbers.pl
1 7 10 13 19 23 28 31
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on May 22, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 - try/catch/finally</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-05-12-auf-dem-weg-zu-perl-536-trycatchfinally" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Es ist nicht schön, wenn man eine Anwendung hat, die vielleicht mittendrin einfach aufhört zu laufen. Vielleicht ist die Anwendung in einen Fehler gelaufen und vielleicht gibt es keine ordentliche Fehlermeldung. Woran hat es gelegen? An welcher Stelle ist der Fehler aufgetreten?</div>
    </content>
    <id>https://blog.perl-academy.de/2022-05-12-auf-dem-weg-zu-perl-536-trycatchfinally</id>
    <published>2022-05-12T10:00:00Z</published>
    <updated>2022-05-12T10:00:00Z</updated>
  </entry>
  <entry>
    <title>My Favorite Modules: Errno</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/05/my-favorite-modules-errno.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10785</id>
    <published>2022-05-11T22:38:35Z</published>
    <updated>2022-05-11T22:40:13Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>The <code>open or die</code> idiom is fairly ubiquitous in Perl. To be useful, the exception should say something about what went wrong: <code>open ... or die "Open error: $!"</code>, for example.</p>

<p>The <a href="https://perldoc.perl.org/variables/$!"><code>$!</code></a> built-in variable (a.k.a. <code>$ERRNO</code> or <code>$OS_ERROR</code> if <a href="https://perldoc.perl.org/English.html"><code>use English;</code></a> is in effect) gives you access to the C language <code>errno</code> variable, which through the magic of Perl interpolates an error message appropriate to the error given.</p>

<p>But there are times when some error analysis is in order. Fortunately, <code>$!</code> is a <a href="https://metacpan.org/pod/Scalar::Util#dualvar"><code>dualvar</code></a>, so if you access it in numeric context rather than string context, you get the actual numeric value of the error code. But for both portability and maintainability you don't want to compare <code>$!</code> to a numeric literal. Thus, <a href="https://perldoc.perl.org/Errno.html"><code>Errno</code></a>. For example:</p>

<pre>
use Errno ':POSIX';

<p>open my $foo, '&lt;:encoding(utf-8)', 'foo/bar'<br />
  or do {<br />
    if ( $! == ENOENT ) { # File not found<br />
      die 'Could not find foo/bar';<br />
    } else {<br />
      die "Could not open foo/bar: $!";<br />
    }<br />
  };<br />
</pre></p>

<p>Because this is Perl, There Is More Than One Way To Do It. The <a href="https://perldoc.perl.org/variables/%25!"><code>%!</code></a> hash is keyed by <code>errno</code> symbols, with the element corresponding to the most-recent error being true:</p>

<pre>
# warn q/$INC{'Errno.pm'} is /, $INC{'Errno.pm'}, "\n";
open my $foo, '&lt;:encoding(utf-8)', 'foo/bar'
  or do {
    if ( $!{ENOENT} ) { # File not found
      die 'Could not find foo/bar';
    } else {
      die "Could not open foo/bar: $!";
    }
  };
</pre>

<p><strong>Note</strong> that Perl loads <code>Errno</code> implicitly when it sees a use of <code>%!</code>. This can be demonstrated by uncommenting the initial <code>warn</code> statement in the snippet.</p>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"><code>re</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-develnytprof.html"><code>Devel::NYTProf</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>#563 - Shall we continue the newsletter?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/563.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago I switched the email sending from an old mailman installation on my own server to Sendgrid. I was hoping to fix the delivery issues, but that did not happen. Some subscribers who have not received the newsletter earlier started to receive it, others stopped receiving it. The big difference is that now I see a report of who has not received it. For example I see many @cpan.org addresses in the bounce list. That's just sad. I got some offers to use other services, free of charge, but frankly I am quite tired of fighting the SPAM filters.</p>
<p>In other news, we really hardly have any items to include in the newsletter. Well, except of the responsed to <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>, the job posts, and the posts of Flavio Poletti.</p>
<p>These two issues together, and I really started to wonder if we should continue publishing the newsletter. What do you think?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/563.html</id>
    <published>2022-05-09T10:00:00Z</published>
    <updated>2022-05-09T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Process GET and POST requests</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-05-09T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-process-get-and-post-requests"/>  <id>https://perlmaven.com/dancer2-process-get-and-post-requests</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Bitwise AndSums and Skip Summations: Somewhat Complicated Uses of Map</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/05/08#pwc163" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of numbers. Write a script to calculate the sum of the bitwise &amp; operator for all unique pairs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings; 

sub sum_bitwise{
    my $sum = 0;
    for my $i (0 .. @_ - 2){
        my $x = $_[$i];
	map {$sum += ($x &amp; $_)} @_[$i + 1 .. @_ - 1];
    }
    return $sum; 
}

MAIN:{
    print sum_bitwise(1, 2, 3) . "\n";  
    print sum_bitwise(2, 3, 4) . "\n";
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
3
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;
Since most of the code for both parts of the challenge was fairly straightforward I thought it was worthwhile to concentrate on how I use map. In both cases are somewhat non-trivial.

Here map is used in lieu of a nested loop. Effectively it is equivalent but the resulting code is more compact. The for loop iterates over the array of numbers. At each iteration the current number is saved as $x. We then need to work pairwise through the rest of the array. To do this we use map over the slice of the array representing the elements after $x. Within the for loop/map $sum is continuously updated with the bitwise &amp; results as required.   

&lt;h2&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Given a list of numbers @n, generate the skip summations.&lt;/em&gt;&lt;p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use  warnings;

sub skip_summations{
    my @lines = ([@_]);
    for my $i (1 .. @_ - 1){
        my @skip = @{$lines[$i - 1]}[1 .. @{$lines[$i - 1]} - 1];
        my $line = [map {my $j = $_; $skip[$j] + unpack("%32I*", pack("I*", @skip[0 .. $j - 1]))} 0 .. @skip - 1];
        push @lines, $line;
    }
    return @lines;
}

MAIN:{
    for my $line (skip_summations(1, 2, 3, 4, 5)){
        print join(" ", @{$line}) . "\n";
    }
    print "\n";
    for my $line (skip_summations(1, 3, 5, 7, 9)){
        print join(" ", @{$line}) . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1 2 3 4 5
2 5 9 14
5 14 28
14 42
42

1 3 5 7 9
3 8 15 24
8 23 47
23 70
70
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;
Again map is used in place of a nested loop. With the use of pack/unpack we further replace work that would take place inside yet another loop. While much more concise it is reasonable to concede a slight loss of readability, for the untrained eye anyway.

The map in the code above works over a list of numbers representing array indices of the previously computed line of summations. For each element we get the slice of the array representing the ones before it and then use pack/unpack to get the sum which is then added to the current element.

Each use of map here generates the next line and so we enclose the map in square brackets [] to place bthe results in an array reference which is the pushed onto the array of alllines to be returned.

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-163/"&gt;Challenge 163&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc163</id>
    <published>2022-05-08T13:52:00-04:00</published>
    <updated>2022-05-08T13:52:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Save the date - Deutscher Perl/Raku Workshop 2023 in Frankfurt am Main - 27.02.2023-1.03.2023</title>
    <link rel="alternate" href="http://blogs.perl.org/users/max_maischein/2022/05/save-the-date---deutscher-perlraku-workshop-2023-in-frankfurt-am-main---27022023-1032023.html"/>
    <id>tag:blogs.perl.org,2022:/users/max_maischein//227.10780</id>
    <published>2022-05-08T13:54:02Z</published>
    <updated>2022-05-08T13:54:59Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <category term="conferences" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="workshopgpw2023" label="workshop gpw2023" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>Hello everybody,</p>

<p>after a long time of waiting it is finally time - we cordially invite you<br />
to the German Perl/Raku Workshop 2023.</p>

<p>Next year's workshop will take place from Monday 28 February to<br />
Wednesday 1. March in the <a href="https://www.saalbau.com/raumangebot/detail/?SAALBAU-Gallus&objekt=52">Saalbau Gallus in Frankfurt am Main</a>.</p>]]>
        <![CDATA[<p>The website and the call for papers are already online at<br />
<a href="https://act.yapc.eu/gpw2023/cfp.html">https://act.yapc.eu/gpw2023/cfp.html</a> . We are looking forward to many interesting<br />
presentations!</p>

<p>Of course, we also do not know if the Covid-19 situation will allow us to<br />
to hold the workshop as usual. However, we hope that despite the<br />
we will have an exciting event.</p>

<p>We are always happy about sponsor support. If you or your<br />
company would like to support the workshop, please contact us. Together we will<br />
a possibility together!</p>

<p>If you have questions to the organizers, you can reach us best<br />
directly at <a href="mailto:orga2023@german-perl-workshop.de">orga2023@german-perl-workshop.de</a> .</p>

<p>We are looking forward to your participation,<br />
Max Maischein for the organizers and Frankfurt.pm</p>

<p>[1] We are still working on<br />
    hotel recommendations and publish them on the website.<br />
</p>]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2957509607510553721</id>
    <published>2022-05-07T16:09:00.000+02:00</published>
    <updated>2022-05-07T16:09:09.129+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxci) 14 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.069' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.069&lt;/strong&gt; on 2022-05-07&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.068 was 11 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carmel-v0.1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carmel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN Artifact Repository Manager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.1.45&lt;/strong&gt; on 2022-05-07&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: v0.1.39 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carton-v1.0.35' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carton&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl module dependency manager (aka Bundler for Perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.0.35&lt;/strong&gt; on 2022-05-07&lt;/li&gt;  &lt;li&gt;Votes: 110&lt;/li&gt;  &lt;li&gt;Previous version: v1.0.34 was 3 years, 10 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.28&lt;/strong&gt; on 2022-05-05&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.27 was 6 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TONYC/Imager-1.015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Imager&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for Generating 24 bit Images &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.015&lt;/strong&gt; on 2022-05-07&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 1.014 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.50&lt;/strong&gt; on 2022-05-03&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 1.48 was 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.17&lt;/strong&gt; on 2022-05-01&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.16 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.079' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.079&lt;/strong&gt; on 2022-05-03&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 2.078 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Perl-Build-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - perl builder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2022-05-05&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.32 was 1 year, 1 month, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.274' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.274&lt;/strong&gt; on 2022-05-02&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.273 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.47&lt;/strong&gt; on 2022-05-05&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.46 was 5 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9514' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9514&lt;/strong&gt; on 2022-05-02&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9513 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v8.3.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v8.3.0&lt;/strong&gt; on 2022-05-04&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v8.1.0 was 2 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/Toadfarm-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Toadfarm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - One Mojolicious app to rule them all &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2022-05-02&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 10 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2957509607510553721/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/05/cccxci-14-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2957509607510553721"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2957509607510553721"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/05/cccxci-14-great-cpan-modules-released.html" title="(cccxci) 14 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8737943991288958054</id>
    <published>2022-05-07T16:06:00.002+02:00</published>
    <updated>2022-05-07T16:06:36.973+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dv) metacpan weekly report - Carmel</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 47&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/05/07 14:06:16 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Business::Stripe::WebCheckout" target="_blank"&gt;Business::Stripe::WebCheckout&lt;/a&gt; - Simple way to implement payments using Stripe hosted checkout&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Device::Chip" target="_blank"&gt;Device::Chip&lt;/a&gt; - an abstraction of a hardware chip IO driver&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Glib::IO" target="_blank"&gt;Glib::IO&lt;/a&gt; - Perl bindings to the GIO library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AmazonS3::Simple" target="_blank"&gt;Net::AmazonS3::Simple&lt;/a&gt; - simple S3 client support signature v4&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=263)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autocroak" target="_blank"&gt;autocroak&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Signature4" target="_blank"&gt;AWS::Signature4&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/boolean" target="_blank"&gt;boolean&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+3=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CBOR::XS" target="_blank"&gt;CBOR::XS&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::AutoConf" target="_blank"&gt;Config::AutoConf&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Convert::Color" target="_blank"&gt;Convert::Color&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::FormValidator" target="_blank"&gt;Dancer2::Plugin::FormValidator&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::TimeZone" target="_blank"&gt;DateTime::TimeZone&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Simple" target="_blank"&gt;Email::Simple&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Glib" target="_blank"&gt;Glib&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Glib::Object::Introspection" target="_blank"&gt;Glib::Object::Introspection&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Compress" target="_blank"&gt;IO::Compress&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=156)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::SomeUtils" target="_blank"&gt;List::SomeUtils&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::UtilsBy" target="_blank"&gt;List::UtilsBy&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch" target="_blank"&gt;Log::Dispatch&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+2=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Amazon::S3" target="_blank"&gt;Net::Amazon::S3&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=169)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=391)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Configure" target="_blank"&gt;Perl::Configure&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Socket" target="_blank"&gt;Socket&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadLine::Gnu" target="_blank"&gt;Term::ReadLine::Gnu&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV" target="_blank"&gt;Text::CSV&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8737943991288958054/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/05/dv-metacpan-weekly-report-carmel.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8737943991288958054"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8737943991288958054"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/05/dv-metacpan-weekly-report-carmel.html" title="(dv) metacpan weekly report - Carmel"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 – Änderungen mit "use v5.36"</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-05-06-auf-dem-weg-zu-perl-536-a-anderungen-mit-use-v536" type="text/html"/>
    <content type="text">Mittels `use v5.&lt;version&gt;` können Features und Standardeinstellungen für die angegebene Perl-Version geladen werden. Und es ist die minimal notwendige Perl-Version. Ein `use v5.10` verlangt, dass das Programm mindestens mit Perl 5.10 ausgeführt wird. Darüber hinaus wird zum Beispiel das Feature `say` aktiviert.</content>
    <id>https://blog.perl-academy.de/2022-05-06-auf-dem-weg-zu-perl-536-a-anderungen-mit-use-v536</id>
    <published>2022-05-06T10:00:00Z</published>
    <updated>2022-05-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Release 1.9.14 of Perl distribution Crypt::OpenSSL::X509</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1914-of-perl-distribution-cryptopensslx509-296h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A new release of the Perl distribution <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a> have been uploaded to CPAN.</p>

<p>The release contains contributions from 5 separate people including myself. </p>

<ul>
<li>9 PRs merged</li>
<li>4 issues addressed</li>
</ul>

<p>The PRs had been building up for some time, so I am very happy I was able to find the time to go through them all. There are still 10 open issues and I hope they can get some attention too. </p>

<p>The biggest challenge is OpenSSL 3 support, where we are not exactly there, but I believe we are at a more stable point now, which is a good starting point for this work.</p>

<p>From the trial release was made (2022-04-26) to now, two bugs were addressed and fixed. Both where introduced with 1.9.14-TRIAL.</p>

<ul>
<li>One should have been caught by me in my review </li>
<li>Another was introduced by me in an attempt to streamline some code</li>
</ul>

<p>So in retrospect, just like with the improvements to the CI work and use of the trial release process, I will work to improve in this area - I am thankful for the PRs, which corrected my errors, but the issues where... obvious and should never have been there.</p>

<p>Luckily the contributors, were quick in addressing these and PRs where received an processed, making it into the final release.</p>

<p>Thanks to all who contributed:</p>

<ul>
<li><a href="https://github.com/ikedas">@ikedas</a></li>
<li>
<a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a> </li>
<li><a href="https://github.com/michal-josef-spacek">@michal-josef-spacek</a></li>
<li><a href="https://github.com/skaji">@skaji</a></li>
</ul>

<h2>
  
  
  Change log
</h2>

<h3>
  
  
  1.9.14 2022-05-03
</h3>

<ul>
<li><p>Applied PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/108">#109</a> from @ikedas fixing a bug found in 1.9.14-TRIAL, where the wrong API was called, propably due to a typo in the name</p></li>
<li><p>Applied PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/108">#108</a> from @skaji a bug found in 1.9.14-TRIAL, where a possible interpolatation was probibited due to quoting</p></li>
<li><p>Applied patch from @ikedas PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/105">#105</a> make the pattern match for LLVM version number in the 12 series a bit more liberal. This was followed up by PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/107">#107</a> by <a class="mentioned-user" href="https://dev.to/jonasbn">@jonasbn</a></p></li>
<li><p>Applied patch from <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a> PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/102">#102</a> adressing issues: <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/45">#45</a> and <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/95">#95</a> with only a more strict use of compiler flags if environment variable <code>AUTHOR_TESTING</code> is set to true</p></li>
<li><p>Added enhancement from @michal-josef-spacek introducing use of <a href="https://metacpan.org/pod/Crypt::OpenSSL::Guess">Crypt::OpenSSL::Guess</a>, which can be used to determine placement of OpenSSL libraries via PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/104">#104</a>. The idea originates from issue <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/97">#97</a> raised by @ikedas and addresses: <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/94">#94</a> also from @ikedas</p></li>
<li><p>The above was followed up by a PR from <a class="mentioned-user" href="https://dev.to/jonasbn">@jonasbn</a> <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/106">#106</a> enabling installation of <code>configure</code> section for CI jobs for both <code>cpanm</code> and <code>cpm</code></p></li>
<li><p>Metadata on bug tracker was updated with release 1.9.13, documentation updated with this release. Addressing issue <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/80">#80</a> raised by @skaji, update by <a class="mentioned-user" href="https://dev.to/jonasbn">@jonasbn</a></p></li>
<li><p>Patch from <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a> via PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/103">#103</a> improving handling of OpenSSL API versions</p></li>
<li><p>Patch from @skaji via PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/100">#100</a> making use of constants in XS code</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1914-of-perl-distribution-cryptopensslx509-296h</id>
    <published>2022-05-03T18:20:21Z</published>
    <updated>2022-05-03T18:20:21Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#562 - Perl Conference</title>
    <link rel="alternate" href="https://perlweekly.com/archive/562.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>I wish all the readers of the weekly newsletter, a very <strong>Happy Idd</strong>. We are celebrating Idd today in England and luckily it is a <strong>Bank Holiday</strong> as well.</p>
<p>I have seen Facebook post about the upcoming <a href="https://perlconference.us/tprc-2022-hou">The Perl and Raku Conference 2022, Houston, TX</a>. With this, I kept wondering why not have <strong>London Perl Workshop 2022</strong> too? Being member of the LPW organizing team, I discussed it with fellow member, <strong>Julien</strong>. Good news is he seems positive about it as well. I don't know whether we have enough time to kickstart the process. Just hoping we get the opportunity to organize the conference. It has been a long time since we last had the gatherings in London. We had German Perl Workshop organized successfully only recently. Although I didn't see a single event report published by attending members unfortunately. I remember last time when I attended the <strong>German Perl Workshop</strong>, there were plenty of post event reports published as per the tradition.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/562.html</id>
    <published>2022-05-02T10:00:00Z</published>
    <updated>2022-05-02T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 162</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/05/01#pwc162" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>Write a script to generate the check digit of a given ISBN-13 code.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;

sub isbn_check_digit{
    my($isbn) = @_;
    my $i = 0;
    my @weights = (1, 3);
    my $check_sum = 0;
    my $check_digit;
    map {$check_sum += $_ * $weights[$i]; $i = $i == 0 ? 1 : 0} split(//, $isbn);
    $check_digit = $check_sum % 10;
    return 10 - $check_digit;
}

MAIN:{
    print isbn_check_digit(978030640615) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
7   
</code></pre>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-162/">Challenge 162</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc162</id>
    <published>2022-05-01T14:34:00-04:00</published>
    <updated>2022-05-01T14:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/05/01/list-of-new-cpan-distributions-apr-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Set">Acme-CPANModules-Set</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules that deal with sets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Symlink">Acme-CPANModules-Symlink</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules that deal with symbolic links (symlinks)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Inabajun-Utils">Acme-Inabajun-Utils</a></td>
<td><a href="https://metacpan.org/author/INABAJUN">INABAJUN</a></td>
<td>0</td>
<td>0.01</td>
<td>The great new Acme::Inabajun::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FizzBuzz">App-FizzBuzz</a></td>
<td><a href="https://metacpan.org/author/TTKCIAR">TTKCIAR</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Maximally codegolfed FizzBuzz</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-git">App-Greple-git</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Greple git module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-subst-desumasu">App-Greple-subst-desumasu</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Japanese DESU/MASU dictionary for App::Greple::subst</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PDF-Overlay">App-PDF-Overlay</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>0.001</td>
<td>0.002</td>
<td>pdfolay – insert a PDF document over/under another document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-RunStopRun">App-RunStopRun</a></td>
<td><a href="https://metacpan.org/author/GRAY">GRAY</a></td>
<td>0.01</td>
<td>0.03</td>
<td>limit CPU usage of processes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Timer">App-Timer</a></td>
<td><a href="https://metacpan.org/author/MANWAR">MANWAR</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Timer for your application.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdim">App-dirdim</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.031</td>
<td>0.031</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dufolder">App-dufolder</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.030</td>
<td>0.031</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-filedays">App-filedays</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.203</td>
<td>0.203</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-pltest">App-pltest</a></td>
<td><a href="https://metacpan.org/author/PFEIFFER">PFEIFFER</a></td>
<td>v0.63.1</td>
<td>v0.63.1</td>
<td>Swiss Army Knife of Perl One-Liners</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-pq">App-pq</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
<td>1</td>
<td>pq is like jq and gq, but with Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-zipdetails">App-zipdetails</a></td>
<td><a href="https://metacpan.org/author/PMQS">PMQS</a></td>
<td>2.101</td>
<td>2.107</td>
<td>display the internal structure of zip files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Data-Cmp">Bencher-Scenario-Data-Cmp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Benchmark Data::Cmp against similar solutions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Data-Undump">Bencher-Scenario-Data-Undump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>0.003</td>
<td>Benchmark Data::Undump against eval() for loading a Data::Dumper output</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Games-Wordlist">Bencher-Scenarios-Games-Wordlist</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.050</td>
<td>0.050</td>
<td>Benchmark startup overhead of Games::Word::Wordlist::* modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Browser-Find-Windows">Browser-Find-Windows</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Find available browser on Windows</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CXC-Exporter-Util">CXC-Exporter-Util</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tagged Based Exporting</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-OPAQUE">Crypt-OPAQUE</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.011</td>
<td>OPAQUE protocol</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-OPRF">Crypt-OPRF</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Oblivious Pseudorandom Functions (OPRFs) using Prime-Order Groups</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-SIGMA">Crypt-SIGMA</a></td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>0.01</td>
<td>0.011</td>
<td>SIGMA protocol</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-FormValidator-Extension-DBIC">Dancer2-Plugin-FormValidator-Extension-DBIC</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>0.80</td>
<td>0.82</td>
<td>Dancer2 FormValidator extension for checking field present in table row using DBIC.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-FormValidator-Extension-Password">Dancer2-Plugin-FormValidator-Extension-Password</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>0.80</td>
<td>0.82</td>
<td>Dancer2 FormValidator extension for validating passwords.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-MAT-Tool-Object-Pad">Devel-MAT-Tool-Object-Pad</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>extend Devel::MAT to analyse Object::Pad-based programs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-Si5351">Device-Chip-Si5351</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for Si5351</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Electronics-PSU-DPSxxxx">Electronics-PSU-DPSxxxx</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>control a DPS power supply</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-CharacterSheetGenerator">Game-CharacterSheetGenerator</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1</td>
<td>a web app to generate character sheets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-App">Getopt-App</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Write and test your script with ease</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-optparse">Getopt-optparse</a></td>
<td><a href="https://metacpan.org/author/MHEARSE">MHEARSE</a></td>
<td>v0.0.2</td>
<td>v1.6.0</td>
<td>optparse style processing of command line options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTTP-CSPHeader">HTTP-CSPHeader</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.1.2</td>
<td>manage dynamic content security policy headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Imager-File-QOI">Imager-File-QOI</a></td>
<td><a href="https://metacpan.org/author/TONYC">TONYC</a></td>
<td>0.010</td>
<td>0.010</td>
<td>QOI image file support for Imager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LWP-Authen-OAuth2-ServiceProvider-MediaWiki">LWP-Authen-OAuth2-ServiceProvider-MediaWiki</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>MediaWiki OAuth2 provider for LWP::Authen::OAuth2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LWP-Authen-OAuth2-ServiceProvider-Wikimedia">LWP-Authen-OAuth2-ServiceProvider-Wikimedia</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wikimedia OAuth2 provider for LWP::Authen::OAuth2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-OK">Log-OK</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Disable inactive logging statements from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Monitoring-Sneck">Monitoring-Sneck</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>a boopable LibreNMS JSON style SNMP extend for remotely running nagios style checks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OPM-Installer">OPM-Installer</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Install ticketsystem (Znuny/OTOBO) add ons</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OPM-Parser">OPM-Parser</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.06</td>
<td>1.06</td>
<td>Parser for the .opm file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OPM-Repository">OPM-Repository</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>parse OPM repositories' framework.xml files to search for add ons</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Option-Option">Option-Option</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.1</td>
<td>v0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-Data-Printer">Plack-App-Data-Printer</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Plack Data::Printer application.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RPC-Switch-Client-Tiny">RPC-Switch-Client-Tiny</a></td>
<td><a href="https://metacpan.org/author/BDZ">BDZ</a></td>
<td>1.52_01</td>
<td>1.55</td>
<td>Lightweight client for the RPC-Switch.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Math-Complex">SPVM-Math-Complex</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Math Functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Suricata-Monitoring">Suricata-Monitoring</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.1.3</td>
<td>LibreNMS JSON SNMP extend and Nagios style check for Suricata stats</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sys-OsRelease">Sys-OsRelease</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.0.1</td>
<td>0.2.0</td>
<td>read operating system details from FreeDesktop.Org standard /etc/os-release file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Telegram-JsonAPI">Telegram-JsonAPI</a></td>
<td><a href="https://metacpan.org/author/CINDY">CINDY</a></td>
<td>1.00</td>
<td>1.02</td>
<td>Telegram TDLib's JSON API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Template-Plugin-CGI">Template-Plugin-CGI</a></td>
<td><a href="https://metacpan.org/author/TODDR">TODDR</a></td>
<td>3.100</td>
<td>3.101</td>
<td>Simple Template Toolkit plugin interfacing to the CGI.pm module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-Self">Types-Self</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>provides a "Self" type constraint, referring to the caller class or role</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UK-Vehicle">UK-Vehicle</a></td>
<td><a href="https://metacpan.org/author/IGIBBS">IGIBBS</a></td>
<td>0.1</td>
<td>0.4</td>
<td>Perl module to query the UK's Vehicle Enquiry Service API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wasm-Wasm3">Wasm-Wasm3</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>Self-contained WebAssembly via wasm3</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/constant-more">constant-more</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Assign values to constants from the command arguments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/module">module</a></td>
<td><a href="https://metacpan.org/author/INABAJUN">INABAJUN</a></td>
<td>0</td>
<td>0</td>
<td>The great new Acme::Inabajun::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/zipdetails">zipdetails</a></td>
<td><a href="https://metacpan.org/author/PMQS">PMQS</a></td>
<td>2.100</td>
<td>2.100</td>
<td>display the internal structure of zip files</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>54</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>33</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ABBYPAN">ABBYPAN</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/PMQS">PMQS</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/INABAJUN">INABAJUN</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/BDZ">BDZ</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/PFEIFFER">PFEIFFER</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TODDR">TODDR</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/MANWAR">MANWAR</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/MHEARSE">MHEARSE</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/IGIBBS">IGIBBS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TTKCIAR">TTKCIAR</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/TONYC">TONYC</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CINDY">CINDY</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GRAY">GRAY</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Set PERLANCAR 0.001 0.001 List of modules that deal with sets Acme-CPANModules-Symlink PERLANCAR 0.001 0.001 List of modules that deal with symbolic links (symlinks) Acme-Inabajun-Utils INABAJUN 0 0.01 The great new Acme::Inabajun::Utils! App-FizzBuzz TTKCIAR 1.00 1.00 Maximally codegolfed FizzBuzz App-Greple-git UTASHIRO 0.01 0.01 Greple git module App-Greple-subst-desumasu UTASHIRO 0.01 0.02 … <a href="https://perlancar.wordpress.com/2022/05/01/list-of-new-cpan-distributions-apr-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1988</id>
    <published>2022-05-01T09:06:16Z</published>
    <updated>2022-05-01T09:06:16Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>More Mastodon, less Twitter</title>
    <link href="http://domm.plix.at/perl/2022_04_more_mastodon_less_twitter.html"/>
    <id>http://domm.plix.at/perl/2022_04_more_mastodon_less_twitter.html</id>
    <updated>2022-04-29T16:05:16+00:00</updated>
    <category term="perl"/>
    <summary type="html">I was getting more and more annoyed with twitter in the last few months (mostly because I had to click "See [some annoying feature] less often" several times a day) and the whole Musk-takeover ...</summary>
    <content type="html">&lt;p&gt;I was getting more and more annoyed with twitter in the last few months (mostly because I had to click "See [some annoying feature] less often" several times a day) and the whole Musk-takeover finally pushed me over the edge. I've set up an account on &lt;a href="https://mastodon.technology/@domm"&gt;Mastodon Technology&lt;/a&gt; and plan to use this nice, open source, federated tool more and more, and leave twitter behind.&lt;/p&gt;

&lt;p&gt;I never really used twitter as a primary platform, but used it to automatically "promote" some of the stuff that's happening on this website. So now I have to port this tools to use Mastodon. Which turned out to be quite easy:&lt;/p&gt;

&lt;h4&gt;Mastodon &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mastodon obviously has an &lt;a href="https://docs.joinmastodon.org/client/intro/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and a nice Perl client, &lt;a href="https://metacpan.org/dist/Mastodon-Client"&gt;Mastodon::Client&lt;/a&gt;. To access the &lt;span class="caps"&gt;API&lt;/span&gt; I had to set up an "app" and get an access token. Easy.&lt;/p&gt;

&lt;h4&gt;Blio Integration&lt;/h4&gt;

&lt;p&gt;This static website is generated using my static site generator, &lt;a href="https://github.com/domm/Blio"&gt;Blio&lt;/a&gt;. I run Blio via a &lt;code&gt;build.pl&lt;/code&gt; script, that does various things besides just building the &lt;span class="caps"&gt;HTML.&lt;/span&gt; Among those things is auto-posting new posts to Twitter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub tweet_new_post {
    my $node = shift;

    my $status = $node-&amp;gt;stash-&amp;gt;{tweet};
    if (!$status &amp;amp;&amp;amp; $node-&amp;gt;stash-&amp;gt;{autotweet}) {
        $status = &amp;quot;New blog post: &amp;quot;.$node-&amp;gt;title;
    }
    return unless $status;
    return if $tweeted{$node-&amp;gt;url};

    my $link = ' '.$blio-&amp;gt;site_url.'/'.$node-&amp;gt;url;

    my $tweet = length($status) &amp;gt; 250  ? substr($status,0,145) : $status;
    $tweet.=$link;
    _tweet($tweet);

    my $fh = $index_file-&amp;gt;opena;
    say $fh $node-&amp;gt;url;
    close $fh;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This checks if a node either contains an explicit &lt;code&gt;tweet&lt;/code&gt; or has the &lt;code&gt;autotweet&lt;/code&gt; flag set (in which case the status is generated from the node title). It checks in a very simple file-based database if this node (&lt;code&gt;$node-&amp;gt;url&lt;/code&gt;) has already been posted and aborts if it has (so I don't end up tweeting the same post multiple times).&lt;/p&gt;

&lt;p&gt;Then I append the link to the new post to the tweet, after maybe shortening the status if it is too long. Now I call &lt;code&gt;_tweet($tweet)&lt;/code&gt;, which uses &lt;a href="https://metacpan.org/pod/Net::Twitter::Lite::WithAPIv1_1"&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/a&gt; to post the message. Finally I add the current node url to the file &lt;span class="caps"&gt;DB.&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;toot!&lt;/h4&gt;

&lt;p&gt;Posting to Mastodon is called &lt;code&gt;tooting&lt;/code&gt;, so let's do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my $toot = length($status) &amp;gt; 450  ? substr($status,0,450) : $status;
   $toot.=$link;
   _toot($toot);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Toots can be longer than tweets, so I've adapted the truncation a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub _toot {
    my ( $status ) = @_;

    eval {
        my $conf = do $blio-&amp;gt;output_dir-&amp;gt;parent-&amp;gt;file('mastodon.conf')-&amp;gt;stringify;
        my $client = Mastodon::Client-&amp;gt;new({
            %$conf,
            coerce_entities =&amp;gt; 1,
        });

        my $post = $client-&amp;gt;post_status( $status );
        return $post;
    };
    if (!$post || $@) {
        say &amp;quot;error while tooting: &amp;quot;.$@;
        return;
    }
    else {
        say &amp;quot;successfully tooted: &amp;quot;.$post-&amp;gt;content;
        return 1;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file &lt;code&gt;mastodon.conf&lt;/code&gt; contains the instance &lt;span class="caps"&gt;URL, &lt;/span&gt;access token etc and is in fact a small Perl snippet which I just load using &lt;code&gt;do&lt;/code&gt;. Using this config, I initiate a new &lt;code&gt;Mastodon::Client&lt;/code&gt;, and call &lt;code&gt;post_status&lt;/code&gt;. Very easy!&lt;/p&gt;

&lt;p&gt;Now I'm very curious if it will work when I publish this post...&lt;/p&gt;</content>
    <category term="Blio"/>
    <category term="automatization"/>
    <category term="fun"/>
    <category term="federation"/>
  </entry>
  <entry>
    <title>Like/Dislike system with Mojolicious</title>
    <link rel="alternate" href="https://dev.to/arslonga/likedislike-system-with-mojolicious-42ph" type="text/html"/>
    <content type="html">&lt;p&gt;This post describes the actual Like/Dislike mechanism in the program based on Mojolicious. Web pages style is created using the Bootstrap framework. The full version of the Mojolicious &lt;code&gt;like-dislike&lt;/code&gt; demo can be downloaded at: &lt;a href="https://github.com/arslonga/like-dislike"&gt;https://github.com/arslonga/like-dislike&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, in the start package &lt;strong&gt;Vote.pm&lt;/strong&gt; we create routers for the post with a certain ID in the section named &lt;code&gt;'first-section'&lt;/code&gt; (for example), and also for &lt;code&gt;like&lt;/code&gt; and &lt;code&gt;dislike&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub startup {
my $self = shift;

my $r = $self-&amp;gt;routes;
...
$r-&amp;gt;any('/first-section/:id' =&amp;gt; [ id =&amp;gt; qr/[0-9]+/ ] )-&amp;gt;to('post#article');
...
$r-&amp;gt;any('/likeartcl')-&amp;gt;to('voting#like');
$r-&amp;gt;any('/dislikeartcl')-&amp;gt;to('voting#dislike');
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A snippet of code in the &lt;strong&gt;Post.pm&lt;/strong&gt; package that describes the &lt;code&gt;'article'&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package Vote::Controller::Post;
use Mojo::Base 'Mojolicious::Controller';
use Session;
use SessCheck;
...
#---------------------------------
sub article {
#---------------------------------
my $self = shift;
my $id = $self-&amp;gt;stash('id');
my($nickname, $status, $client_check, $user_id, $title_alias);


eval{
$nickname = $self-&amp;gt;session('client')-&amp;gt;[0];
$user_id = $self-&amp;gt;session('client')-&amp;gt;[2]; 
};
$client_check = SessCheck-&amp;gt;client( $self, $nickname );
if( !$client_check ){
    $status = ' disabled';
}
$title_alias = (split(/\//, $self-&amp;gt;req-&amp;gt;url))[1];
my $data = $self-&amp;gt;db-&amp;gt;select( 'posts', ['*'], {id =&amp;gt; $id} )-&amp;gt;hash;

$self-&amp;gt;render( 
dat             =&amp;gt; $data,
section_ident   =&amp;gt; $title_alias,
id              =&amp;gt; $id,
like_id         =&amp;gt; 'like_'.$title_alias.'_'.$id,
unlike_id       =&amp;gt; 'unlike_'.$title_alias.'_'.$id,
client_id       =&amp;gt; $user_id,
unlike_btn_name =&amp;gt; 'unlike'.$title_alias.'_'.$id,
like_btn_name   =&amp;gt; 'like'.$title_alias.'_'.$id,
status          =&amp;gt; $status,
liked_cnt       =&amp;gt; $data-&amp;gt;{liked} || 0,
unliked_cnt     =&amp;gt; $data-&amp;gt;{unliked} || 0
);
}#---------------
...
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Template &lt;strong&gt;article.html.ep&lt;/strong&gt; in &lt;strong&gt;/templates/post&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% layout 'vote';

&amp;lt;hr&amp;gt;
&amp;lt;a class="btn btn-info" href="/first-section" role="button"&amp;gt;
&amp;lt;span class="glyphicon glyphicon-arrow-left"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= $dat-&amp;gt;{title} %&amp;gt;&amp;lt;/h2&amp;gt;
    &amp;lt;%= $dat-&amp;gt;{body} %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;div class="ld-box text-right"&amp;gt;

%# Rendering a template that describes a block of code
%# that contains two buttons:
%# 'like' and 'dislike'

&amp;lt;%= include 'voting/vote' %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
//---------- Like/Dislike block ---
async function LikeArtcl(titleAlias, articleId, vote_span, user_id) {
let likedislikeBox = document.querySelector('.ld-box');

  let response = await fetch("/likeartcl?title_alias=" + 
  titleAlias + 
  '&amp;amp;article_id=' + 
  articleId + 
  '&amp;amp;vote_span=' + 
  vote_span + 
  '&amp;amp;user_id=' + 
  user_id);

  if (response.ok) {
    let respRendr = await response.text(); 
    likedislikeBox.innerHTML = respRendr;
  }else {
    alert("Error HTTP: " + response.status);
  }
}

async function UnlikeArtcl(titleAlias, articleId, vote_span, user_id) {
let likedislikeBox = document.querySelector('.ld-box');

  let response = await fetch("/dislikeartcl?title_alias=" + 
  titleAlias + 
  '&amp;amp;article_id=' + 
  articleId + 
  '&amp;amp;vote_span=' + 
  vote_span + 
  '&amp;amp;user_id=' + 
  user_id);

  if (response.ok) {
    let respRendr = await response.text(); 
    likedislikeBox.innerHTML = respRendr;
  }else {
    alert("Error HTTP: " + response.status);
  }
}
//---------- Like/Dislike block END ---
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Package &lt;strong&gt;Session.pm&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package Session;
use Mojo::Base -base;

#---------------------------------
sub user {
#---------------------------------
my($self, $c, $login, $password, $id) = @_;

$c-&amp;gt;session( client =&amp;gt; [$login, $password, $id], expiration =&amp;gt; 120);
return 1;
}#---------------

# 'voting' method of Session called in 'Voting.pm' package (see code fragment below)
#---------------------------------
sub voting {
#---------------------------------
my($self, $c, $user_vote_id, $title_alias_and_id) = @_;
$c-&amp;gt;signed_cookie( $user_vote_id =&amp;gt; $title_alias_and_id, {expires =&amp;gt; time + 120});
return 1;
}#---------------

#---------------------------------
sub client_expire {
#---------------------------------
my($self, $c) = @_;
delete $c-&amp;gt;session-&amp;gt;{'client'};
return 1;
}#---------------
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Package &lt;strong&gt;Vote/Voting.pm&lt;/strong&gt;&lt;br&gt;
Here we render template &lt;code&gt;'voting/vote.html.ep'&lt;/code&gt; that describes code block with &lt;code&gt;'like'&lt;/code&gt; and &lt;code&gt;'dislike'&lt;/code&gt; buttons and &lt;code&gt;'like'&lt;/code&gt; and &lt;code&gt;'dislike'&lt;/code&gt; counts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package Vote::Voting;
use Mojo::Base 'Mojolicious::Controller';
use Mojo::Util qw(trim encode decode);
use Mojo::Cookie;
use Session;

#---------------------------------
sub like {
#---------------------------------
my $self = shift;
my($nickname, $status);
eval{
$nickname = $self-&amp;gt;session('client')-&amp;gt;[0];  
};
my $client_check = SessCheck-&amp;gt;client( $self, $nickname );

my $title_alias = $self-&amp;gt;param('title_alias');
my $article_id  = $self-&amp;gt;param('article_id');
my $user_id     = $self-&amp;gt;param('user_id');

$status = !$client_check ? ' disabled' : '';

my $like_count = $self-&amp;gt;db-&amp;gt;select( 'posts', 
                                  ['liked'], 
                                  {id =&amp;gt; $article_id} )
                                  -&amp;gt;hash-&amp;gt;{liked};
my $unlike_count = $self-&amp;gt;db-&amp;gt;select( 'posts', 
                                    ['unliked'], 
                                    {id =&amp;gt; $article_id} )
                                    -&amp;gt;hash-&amp;gt;{unliked};
my $like_cookie_name = 'like_user'.$user_id.'_'.$title_alias.'_'.$article_id;
my $unlike_cookie_name = 'unlike_user'.$user_id.'_'.$title_alias.'_'.$article_id;

if( !$self-&amp;gt;signed_cookie( $like_cookie_name ) &amp;amp;&amp;amp; $client_check ){
    ++$like_count;
    $self-&amp;gt;db-&amp;gt;update( 'posts', 
                     {'liked' =&amp;gt; $like_count}, 
                     {'id' =&amp;gt; $article_id} );
}

if( $self-&amp;gt;signed_cookie( $unlike_cookie_name ) ){
    --$unlike_count;
    $self-&amp;gt;db-&amp;gt;update( 'posts', 
                     {'unliked' =&amp;gt; $unlike_count}, 
                     {'id' =&amp;gt; $article_id} );
    $self-&amp;gt;signed_cookie( $unlike_cookie_name =&amp;gt; '', {expires =&amp;gt; 1});
}

# Store session for 'like' action where key is 
#'like_user'.$user_id.'_'.$title_alias.'_'.$article_id
# and value is $title_alias.'_'.$article_id
Session-&amp;gt;voting( $self, 
                 'like_user'.$user_id.'_'.$title_alias.'_'.$article_id, 
                 $title_alias.'_'.$article_id 
               );

$self-&amp;gt;render(
template        =&amp;gt; 'voting/vote',
section_ident   =&amp;gt; $title_alias,
id              =&amp;gt; $article_id,
like_id         =&amp;gt; 'like_'.$title_alias.'_'.$article_id,
unlike_id       =&amp;gt; 'unlike_'.$title_alias.'_'.$article_id,
client_id       =&amp;gt; $user_id,
unlike_btn_name =&amp;gt; 'unlike'.$title_alias.'_'.$article_id,
like_btn_name   =&amp;gt; 'like'.$title_alias.'_'.$article_id,
status          =&amp;gt; $status,
liked_cnt       =&amp;gt; $like_count,
unliked_cnt     =&amp;gt; $unlike_count
);
}#---------------

#---------------------------------
sub dislike {
#---------------------------------
my $self = shift;
my($nickname, $status);
eval{
$nickname = $self-&amp;gt;session('client')-&amp;gt;[0];  
};
my $client_check = SessCheck-&amp;gt;client( $self, $nickname );

my $title_alias = $self-&amp;gt;param('title_alias');
my $article_id  = $self-&amp;gt;param('article_id');
my $user_id     = $self-&amp;gt;param('user_id');

$status = !$client_check ? ' disabled' : '';

my $unlike_count = $self-&amp;gt;db-&amp;gt;select( 'posts', 
                                    ['unliked'], 
                                    {id =&amp;gt; $article_id} )
                                    -&amp;gt;hash-&amp;gt;{unliked};
my $like_count = $self-&amp;gt;db-&amp;gt;select( 'posts', 
                                  ['liked'], 
                                  {id =&amp;gt; $article_id} )
                                  -&amp;gt;hash-&amp;gt;{liked};
my $like_cookie_name = 'like_user'.$user_id.'_'.$title_alias.'_'.$article_id;
my $unlike_cookie_name = 'unlike_user'.$user_id.'_'.$title_alias.'_'.$article_id;

if( !$self-&amp;gt;signed_cookie( $unlike_cookie_name ) &amp;amp;&amp;amp; $client_check ){
    ++$unlike_count;
    $self-&amp;gt;db-&amp;gt;update( 'posts', 
                     {'unliked' =&amp;gt; $unlike_count}, 
                     {'id' =&amp;gt; $article_id} );
}

if( $self-&amp;gt;signed_cookie( $like_cookie_name ) ){
    --$like_count;
    $self-&amp;gt;db-&amp;gt;update( 'posts', 
                     {'liked' =&amp;gt; $like_count}, 
                     {'id' =&amp;gt; $article_id} );
    $self-&amp;gt;signed_cookie( $like_cookie_name =&amp;gt; '', {expires =&amp;gt; 1});
}

# Store session for 'dislike' action where key is 
#'unlike_user'.$user_id.'_'.$title_alias.'_'.$article_id
# and value is $title_alias.'_'.$article_id
Session-&amp;gt;voting( $self, 
                 'unlike_user'.$user_id.'_'.$title_alias.'_'.$article_id, 
                 $title_alias.'_'.$article_id );

$self-&amp;gt;render(
template        =&amp;gt; 'voting/vote',
section_ident   =&amp;gt; $title_alias,
id              =&amp;gt; $article_id,
like_id         =&amp;gt; 'like_'.$title_alias.'_'.$article_id,
unlike_id       =&amp;gt; 'unlike_'.$title_alias.'_'.$article_id,
client_id       =&amp;gt; $user_id,
unlike_btn_name =&amp;gt; 'unlike'.$title_alias.'_'.$article_id,
like_btn_name   =&amp;gt; 'like'.$title_alias.'_'.$article_id,
status          =&amp;gt; $status,
unliked_cnt     =&amp;gt; $unlike_count,
liked_cnt       =&amp;gt; $like_count
);
}#---------------
1;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Template &lt;strong&gt;voting/vote.html.ep&lt;/strong&gt;&lt;br&gt;
Use it for both rendering &lt;code&gt;'like'&lt;/code&gt; and &lt;code&gt;'dislike'&lt;/code&gt; actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;%# voting/vote.html.ep

&amp;lt;button type="button" name="&amp;lt;%= $like_btn_name %&amp;gt;" 
onclick="Voting('&amp;lt;%= $section_ident %&amp;gt;', 
                   '&amp;lt;%= $id %&amp;gt;', 
                   '&amp;lt;%= $like_id %&amp;gt;', 
                   '&amp;lt;%= $client_id %&amp;gt;'); 
                   this.disabled='disabled';" 
                   id="chevron_stl"&amp;lt;%= $status %&amp;gt;&amp;gt;
&amp;lt;span id="&amp;lt;%= $section_ident.'_'.$client_id.'-up' %&amp;gt;" 
class="glyphicon glyphicon-chevron-up" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;span id="&amp;lt;%= $like_id %&amp;gt;" class="like_unlike"&amp;gt;&amp;lt;%= $liked_cnt %&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;button type="button" name="&amp;lt;%= $unlike_btn_name %&amp;gt;" 
onclick="Voting('&amp;lt;%= $section_ident %&amp;gt;', 
                     '&amp;lt;%= $id %&amp;gt;', 
                     '&amp;lt;%= $unlike_id %&amp;gt;', 
                     '&amp;lt;%= $client_id %&amp;gt;'); 
                     this.disabled='disabled';" 
                     id="chevron_stl"&amp;lt;%= $status %&amp;gt;&amp;gt;
&amp;lt;span id="&amp;lt;%= $section_ident.'_'.$client_id.'-down' %&amp;gt;" 
class="glyphicon glyphicon-chevron-down" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;span id="&amp;lt;%= $unlike_id %&amp;gt;" class="like_unlike"&amp;gt;&amp;lt;%= $unliked_cnt %&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Use the combination of article ID, user ID, and kind of action (like or dislike) to create a unique voting ID. This voting ID can be a key of signed cookie.&lt;/p&gt;

&lt;p&gt;A simplified like/dislike system implemented in my project &lt;strong&gt;MornCat CMS&lt;/strong&gt; at &lt;a href="https://github.com/arslonga/my_blog"&gt;https://github.com/arslonga/my_blog&lt;/a&gt; &lt;/p&gt;

</content>
    <author>
      <name>arslonga</name>
    </author>
    <id>https://dev.to/arslonga/likedislike-system-with-mojolicious-42ph</id>
    <published>2022-04-29T07:38:42Z</published>
    <updated>2022-04-29T07:38:42Z</updated>
    <category term="mojolicious"/>
    <category term="perl"/>
    <category term="javascript"/>
    <category term="webdev"/>
  </entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 – Signaturen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-04-28-auf-dem-weg-zu-perl-536-a-signaturen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Nicht einmal 1 Monat, dann wird es die nächste Version von Perl 5 geben: Perl 5.36. Um die Wartezeit etwas zu verkürzen, werden wir hier ein paar Neuerungen vorstellen. Der erste Teil hat dann aber etwas zum Thema, das gar nicht mehr so neu ist: (Methoden-)Signaturen. Schon seit Perl 5.20 (also rund acht Jahre) gibt es die Signaturen. Aber jetzt endlich sind sie nicht mehr als "experimentell" gekennzeichnet.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-04-28-auf-dem-weg-zu-perl-536-a-signaturen</id>
    <published>2022-04-28T10:00:00Z</published>
    <updated>2022-04-28T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Moo - Orientação de objeto minimalista</title>
    <link rel="alternate" href="https://dev.to/victoriabispo/moo-orientacao-de-objeto-minimalista-6el" type="text/html"/>
    <content type="html">

&lt;p&gt;Como começar a programar em &lt;strong&gt;&lt;em&gt;Perl&lt;/em&gt;&lt;/strong&gt; da maneira correta. &lt;del&gt;(Diferente de mim)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/victoriabispo/perl-orientado-a-objeto-1bd1/"&gt;Perl Orientado a Objeto Part I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/victoriabispo/perl-orientado-a-objeto-part-ii-2o54"&gt;Perl Orientado a Objeto Part II&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/victoriabispo/perl-orientado-a-objeto-part-iii-4fe2"&gt;Perl Orientado a Objeto Part III&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/victoriabispo/moo-orientacao-de-objeto-minimalista-6el"&gt;Moo - Orientação de objeto minimalista&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  O que é o &lt;em&gt;Moo&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Diferente do &lt;em&gt;&lt;a href="https://dev.to/victoriabispo/perl-orientado-a-objeto-part-iii-4fe2"&gt;Moose&lt;/a&gt;&lt;/em&gt;, que vimos anteriormente, o &lt;em&gt;Moo&lt;/em&gt; é um sistema de orientação a objetos extremamente leve. Permitindo definições de objetos e funções de maneira bem simples. Tem um sub-conjunto do &lt;em&gt;Moose o Moo&lt;/em&gt; evita depender de qualquer módulo XS para permitir implantações simples. Fornece quase dois terços do &lt;em&gt;Moose.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Quando usar o &lt;em&gt;Moo&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Como dito a cima, o &lt;em&gt;Moo&lt;/em&gt; deve ser utilizado quando a aplicação preza por rapidez ao carregar pacotes e não tem necessidade de utilização de todos os metaprotocolos do &lt;em&gt;Moose.&lt;/em&gt; A seguir exemplifico alguns casos que o podemos escolher o &lt;em&gt;Moo:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quando uma linha de comando ou script CGI onde a inicialização rápida é essencial;&lt;/li&gt;
&lt;li&gt;Código projetado para ser implantado como um único arquivo via &lt;a href="https://metacpan.org/pod/App::FatPacker"&gt;App::FatPacker&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Um módulo CPAN que pode ser usado por outros nas situações acima;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Incompatibilidades do &lt;em&gt;Moo&lt;/em&gt; para o &lt;em&gt;Moose&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Se o &lt;em&gt;Moo&lt;/em&gt; detectar que o &lt;em&gt;Moose&lt;/em&gt; está sendo carregado, ele registrará automaticamente metaclasses para seus pacotes &lt;em&gt;Moo&lt;/em&gt; , então você poderá usá-los no código do &lt;em&gt;Moose&lt;/em&gt; sem modificação.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;Moo&lt;/em&gt; não dará suporte para &lt;em&gt;initializer, super, override, inner e augment&lt;/em&gt; pelos seus criadores considerarem más idéias ou práticas de programação no &lt;em&gt;Perl.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Usando o Moo nos exemplos dos artigos anteriores
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Performances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Declare the attributes&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="c1"&gt;# Declare read and write at runtime&lt;/span&gt;
    &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No name&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="c1"&gt;# Attribute default value&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="c1"&gt;# Declare as integer&lt;/span&gt;
  &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$qtd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$qtd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$qtd&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$qtd&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No audience or invalid value&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Attribute default value&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# Declare read and write at runtime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Sub-rotinas importadas
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Extends
&lt;/h3&gt;

&lt;p&gt;Declara uma classe base. A classe será carregada, mas nenhum erro será acionado se a classe não puder ser encontrada e já houver subs na classe.&lt;/p&gt;

&lt;p&gt;Chamar &lt;em&gt;extends&lt;/em&gt; mais de uma vez irá SUBSTITUIR suas superclasses, não adicionar a elas como '&lt;em&gt;use base'&lt;/em&gt; ou &lt;em&gt;‘use parent’&lt;/em&gt; faria.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Performances&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  With
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Performances::Tragedy&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Performances::Comedy&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Indica que a classe atual compõe uma ou mais funções da &lt;em&gt;Performances&lt;/em&gt; &lt;a href="https://metacpan.org/pod/Moo::Role"&gt;&lt;/a&gt;. Um erro será gerado se essas funções não puderem ser compostas porque possuem definições de método conflitantes. As funções serão carregadas usando o mesmo mecanismo que os &lt;em&gt;extends&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  Has
&lt;/h3&gt;

&lt;p&gt;Declara um atributo para a Classe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;is&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obrigatório para a declaração , pode ser &lt;em&gt;ro, lazy, rwp&lt;/em&gt; ou &lt;em&gt;rw.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;ro&lt;/em&gt; - significa "somente leitura" e gera um acessador que morre se você tentar escrever nele - ou seja, apenas um &lt;em&gt;getter&lt;/em&gt; - padronizando &lt;em&gt;reader&lt;/em&gt; o nome do atributo.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;lazy&lt;/em&gt; - gera um leitor como &lt;em&gt;ro&lt;/em&gt;, mas também define &lt;em&gt;lazy&lt;/em&gt;  como 1 e &lt;em&gt;builder&lt;/em&gt; como &lt;em&gt;&lt;em&gt;build&lt;/em&gt;${attribute_name&lt;/em&gt;} permitir atributos gerados sob demanda.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;rwp&lt;/em&gt; -significa "ler-escrever protegido" e gera um leitor como &lt;em&gt;ro&lt;/em&gt;, mas também define &lt;em&gt;writer&lt;/em&gt; para &lt;em&gt;&lt;em&gt;set&lt;/em&gt;${attribute_name}&lt;/em&gt; atributos que são projetados para serem escritos de dentro da classe, mas somente leitura de fora.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;rw&lt;/em&gt; - significa "ler-escrever" e gera um &lt;em&gt;getter/setter&lt;/em&gt; normal padronizando o &lt;em&gt;accessor&lt;/em&gt; o nome do atributo especificado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;isa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um &lt;em&gt;coderef&lt;/em&gt; que é usado para validar o atributo. Ao contrário do &lt;em&gt;Moose&lt;/em&gt;, o &lt;em&gt;Moo&lt;/em&gt; não inclui um sistema de tipo básico, então ao invés de fazer &lt;em&gt;isa ⇒ ‘str’&lt;/em&gt;, deve-se fazer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Performances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Declare the attributes&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="c1"&gt;# Declare read and write at runtime&lt;/span&gt;
    &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No name&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;[0] is not a name!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;looks_like_name&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Attribute type&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;coerce&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um coderef que se destina a coagir o atributo. A ideia básica é fazer algo como o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Performances&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Declare the attributes&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;[0] is not a number!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;looks_like_number&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;coerce&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Attribute type for audience always ever &lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observe que o &lt;em&gt;Moo&lt;/em&gt; sempre executará sua coerção: isso é para permitir que &lt;em&gt;as&lt;/em&gt; entradas de &lt;em&gt;isa&lt;/em&gt; sejam usadas puramente para captura de bugs, enquanto as coerções são sempre estruturais para seu código. No entanto, aplicamos a verificação de isa após a execução da coerção para garantir que ela retornou um valor válido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;trigger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um coderef que será chamado sempre que o atributo for definido. Isso inclui o construtor, mas não os valores padrão ou construídos. O coderef será invocado no objeto com o novo valor como argumento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um &lt;em&gt;coderef&lt;/em&gt; que será chamado com &lt;em&gt;$self&lt;/em&gt; como seu único argumento para preencher um atributo se nenhum valor para esse atributo for fornecido ao construtor. Como alternativa, se o atributo for &lt;em&gt;lazy&lt;/em&gt;, será &lt;em&gt;default&lt;/em&gt; executado quando o atributo for recuperado pela primeira vez se nenhum valor ainda tiver sido fornecido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;predicate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um nome de método que retornará true se um atributo tiver um valor. Se você definir  como apenas 1, o &lt;em&gt;predicate&lt;/em&gt; será nomeado automaticamente &lt;em&gt;has_${attr_name}&lt;/em&gt; se o nome do seu atributo não começar com um sublinhado ou &lt;em&gt;has_${attr_name_without_underscore}&lt;/em&gt; se começar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um nome de método que limpará o atributo. Se você definir  como apenas 1, o &lt;em&gt;clear&lt;/em&gt; será nomeado automaticamente &lt;em&gt;clear_${attr_name&lt;/em&gt;} se o nome do seu atributo não começar com um sublinhado ou  &lt;em&gt;&lt;em&gt;clear&lt;/em&gt;${attr_name_without_the_underscore}&lt;/em&gt; se começar. &lt;br&gt;
&lt;strong&gt;NOTA:&lt;/strong&gt; Se o atributo for &lt;em&gt;laze&lt;/em&gt;, ele será gerado novamente &lt;em&gt;default ou&lt;/em&gt;  &lt;em&gt;buider&lt;/em&gt; na próxima vez que for acessado. Se não for, será &lt;em&gt;undef&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um booleano. Definir se desejar que os valores do atributo sejam capturados lentamente. Isso geralmente é uma boa ideia se você tiver um &lt;a href="https://metacpan.org/pod/Moo#builder"&gt;"construtor"&lt;/a&gt; que requer que outro atributo seja definido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um booleano . Definir se o atributo deve ser passado na instanciação do objeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O valor deste atributo será p nome do método que retorna o valor do atributo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;writer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O valor deste atributo será o nome do método para definir o valor do atributo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;weak_ref&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um booleano . Definir se desejar que a referência que o atributo contém seja enfraquecida. Use isso quando referências circulares, que causam vazamentos de memória, são possíveis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;init_arg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe o nome da chave a ser procurada no momento da instanciação do objeto. Um uso comum disso é fazer com que um atributo sublinhado tenha um nome de inicialização não sublinhado. &lt;em&gt;undef&lt;/em&gt; significa que passar o valor na instanciação é ignorado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;moosify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recebe um &lt;em&gt;coderef&lt;/em&gt; ou uma matriz de &lt;em&gt;coderefs&lt;/em&gt; que se destina a transformar as especificações de atributos fornecidas, se necessário, ao atualizar para uma função ou classe &lt;em&gt;Moose&lt;/em&gt;. Você não deve precisar disso por padrão, mas é fornecido como um meio de extensibilidade possível.&lt;/p&gt;

&lt;h3&gt;
  
  
  before, around e after
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;before&lt;/strong&gt; chamado antes do método que está modificando. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;around&lt;/strong&gt; chamado em vez do método que está modificando. O método que você está substituindo é passado como o primeiro argumento (chamado $orig por convenção). Cuidado com os valores de retorno contextuais de $orig.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;after&lt;/strong&gt; é chamado após o método que está modificando. &lt;/p&gt;

&lt;p&gt;👋🏻 Então pessoal, hoje definimos o &lt;em&gt;Moo,&lt;/em&gt; mostramos onde ele pode ser usado e quais suas incompatibilidades com o &lt;em&gt;Moose&lt;/em&gt;. Qualquer dúvida, ou sugestão para os próximos artigos, podem deixar nos comentários. Até a próxima.&lt;/p&gt;

</content>
    <author>
      <name>Victoria Ricarte Bispo Beserra</name>
    </author>
    <id>https://dev.to/victoriabispo/moo-orientacao-de-objeto-minimalista-6el</id>
    <published>2022-04-26T15:55:16Z</published>
    <updated>2022-04-26T15:55:16Z</updated>
    <category term="perl"/>
    <category term="opensource"/>
    <category term="braziliandevs"/>
    <category term="oop"/>
  </entry>
  <entry>
    <title>#561 - Switching to Sendgrid</title>
    <link rel="alternate" href="https://perlweekly.com/archive/561.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I have just switched from using Mailman to Sendgrid to distribute the Perl Weekly. I hope this will improve the delivery rate. I was wondering what system should I use to maintain the list of registered people and got to the conclusion that, at least for the time being, I'll use a flat file and I'll manually maintain it. We'll see how that works.&lt;/p&gt;
&lt;p&gt;In other news, my son started his own start-up company. He and his partner are building a tool for private investors so instead of chasing data sources they can spend more of their time on the decision making process. It would be nice of you if you checked out their site called &lt;a href="https://torto.ai/welcome?utm_source=perlweekly&amp;utm_medium=email&amp;utm_campaign=perlweeklyintro"&gt;torto.ai&lt;/a&gt;. If would give a huge boost to them and would help them find investors if you also subscribed to their system. You could also use the code &lt;b&gt;perlweeklyApr20&lt;/b&gt; until 1st of May which gives 20% off.&lt;/p&gt;
&lt;p&gt;Enjoy your week!&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/561.html</id>
    <published>2022-04-25T10:00:00Z</published>
    <updated>2022-04-25T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Testing 404 and 500 error responses</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-04-25T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-testing-404-and-500-responses"/>  <id>https://perlmaven.com/dancer2-testing-404-and-500-responses</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Are Abecedarians from Abecedaria?</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/04/24#pwc161" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Output or return a list of all abecedarian words in the dictionary, sorted in decreasing 
order of length.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub abecedarian{
    sort {$b-&gt;[1] &lt;=&gt; $a-&gt;[1]} map {[$_, length($_)]} grep{chomp; $_ eq join("", sort {$a cmp $b} split(//, $_))} @_;
}

MAIN:{
    open(DICTIONARY, "dictionary");
    for my $abc (abecedarian(&amp;lt;DICTIONARY&amp;gt;)){
        print $abc-&gt;[0] . " length: " . $abc-&gt;[1] . "\n";
    }
    close(DICTIONARY);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
abhors length: 6
accent length: 6
accept length: 6
access length: 6
accost length: 6
almost length: 6
begins length: 6
    .
    .
    .
ox length: 2
qt length: 2
xx length: 2
a length: 1
m length: 1
x length: 1    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The Power of Perl! This problem reduces to one (one!) line of code, plus a few more to 
manage reading the data and printing the results. &lt;/p&gt;

&lt;p&gt;Reading from left to right what is happening? Well, we are sorting, in descending order, 
an array of array references based on the value of the element at index 1. Where does this 
array of array refs come from? From a &lt;code&gt;map&lt;/code&gt; which takes in an array of strings and stores 
each string in an array ref with it's length. Where Does the array fo strings come from? 
From the &lt;code&gt;grep&lt;/code&gt; which takes the list of strings sent to &lt;code&gt;sub abecedarian&lt;/code&gt; as arguments, 
splits them into characters, sorts the characters, and then sees if the characters in 
sorted order are in the same order as the original word demonstrating that the word fits 
the definition of Abecedarian.&lt;/p&gt;

&lt;p&gt;Ordinarily I will make an effort to avoid these more complicated expressions but in this 
case the reading of it seems to proceed in a straightforward way as a chain of easily 
understood sub-expressions.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Using the provided dictionary generate at least one pangram.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Lingua::EN::Tagger;

sub pangram{
    my %tagged_words;
    my $tagger = new Lingua::EN::Tagger;
    for my $word (@_){
        chomp($word);
        my $tagged_text = $tagger-&gt;add_tags($word);
        $tagged_text =~ m/&lt;([a-z]*)&gt;([a-z]*&lt;)/;
        my $tag = $1;
        if($tagged_words{$tag}){
            push @{$tagged_words{$tag}}, $word;
        }
        else{
            $tagged_words{$tag} = [$word];
        }
    }
    ##
    # generate sentences from random words in a (somewhat) grammatical way
    ##
    my $sentence;
    my @dets = @{$tagged_words{det}};
    my @adjs = @{$tagged_words{jj}};
    my @nouns = @{$tagged_words{nn}};
    my @verbs = @{$tagged_words{vb}};
    my @cons = @{$tagged_words{cc}};
    my @adverbs = @{$tagged_words{vb}};
    do{
        my $det0 = $dets[rand @dets];
        my $adj0 = $adjs[rand @adjs];
        my $noun = $nouns[rand @nouns];
        my $verb = $verbs[rand @verbs];
        my $det1 = $dets[rand @dets];
        my $adj1 = $adjs[rand @adjs];
        my $object0 = $nouns[rand @nouns];
        my $conj = $cons[rand @cons];
        my $det2 = $dets[rand @dets];
        my $adj2 = $adjs[rand @adjs];
        my $object1 = $nouns[rand @nouns];
        my $adverb = $adverbs[rand @adverbs];
        my %h;
        for my $c (split(//, "$det0$adj0$noun$verb$det1$adj1$object0$conj$det2$adj2$object1")){
            $h{$c} = undef;
        }
        $sentence = "$det0 $adj0 $noun $verb $det1 $adj1 $object0 $conj $det2 $adj2 $object1" if keys %h == 26;        
    }while(!$sentence);
    return $sentence;
}

MAIN:{
    open(DICTIONARY, "dictionary");
    print pangram(&amp;lt;DICTIONARY&amp;gt;) . "\n";
    close(DICTIONARY);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
each toxic windpipe jeopardize some quick wafted less every favorable arrangement
$ perl perl/ch-2.pl
each exaggerated wilier jeopardize all marketable enunciate and every quirky forgiveness
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I made this a bit ore complicated then it could have been, although I didn't really get 
into the "Bonus" questions (see the original problem statement on the Weekly Challenge 
site for details). The main complication I chose to take on here is that I wanted to have 
the generated pangrams to be reasonably grammatically correct. To simplify things I chose
a single template that the generated sentence can take on. The words for the sentences 
are then chosen at random according to the template. Amazingly this works! As part of this
simplification words that need to match in number (plural, singular) will not quite
line up. This is certainly doable, but represented more work than I was willing to put in
at the time.&lt;/p&gt;

&lt;p&gt;In order to get words to fit the template I make a first pass through the dictionary and 
assign parts of speech. This is another simplification, and seems to be a little rough. 
This is likely due to the fact that Lingua::EN::Tagger is very sophisticated and uses both 
its own dictionary and statistical techniques to determine parts of speech from bodies
of text. Given just one word at a time its powers are not able to be used fully. &lt;/p&gt;

&lt;p&gt;Since words are chosen completely at random the process to generate a valid pangram can 
take several minutes. The sentences generated can take on a slightly poetic aspect, there
are some decent verses amidst all the chaos! &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-161/"&gt;Challenge 161&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Lingua::EN::Tagger"&gt;Lingua::EN::Tagger&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc161</id>
    <published>2022-04-24T16:10:00-04:00</published>
    <updated>2022-04-24T16:10:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
