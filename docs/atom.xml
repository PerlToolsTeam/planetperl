<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-06-25T09:46:24Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 118: Binary Palindrome</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/06/perl-weekly-challenge-118-binary-palindrome.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10273</id>
    <published>2021-06-24T03:11:16Z</published>
    <updated>2021-06-24T03:13:26Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 118 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-118/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of  days (June 27, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Binary Palindrome</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to find out if the binary representation of the given integer is Palindrome. Print 1 if it is otherwise 0.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5
Output: 1 as binary representation of 5 is 101 which is Palindrome.

Input: $N = 4
Output: 0 as binary representation of 4 is 100 which is NOT Palindrome.
</code></pre>

<h3>Binary Palindrome in Raku</h3>

<p>In Raku, the <a href="https://docs.raku.org/routine/base">base</a> method converts the invocant number to a string representation of the number in the given base. So we need to compare compare the binary representation of the number to its reverse string (using the <a href="https://docs.raku.org/routine/flip">flip</a> routine). The code for doing that is a simple Raku one-liner. The <code>+</code> sign is used to <em>numify</em> Boolean values returned by the comparison (i.e. convert <code>True</code>and <code>False</code> values to 1 and 0, respectively).</p>

<pre><code>use v6;

for 1..12 -&gt; $test {
    say "$test -&gt; ", + ($test.base(2) eq $test.base(2).flip);
}
</code></pre>

<p>This is the output with the 12 test cases:</p>

<pre><code>$ raku ./bin-palindrome.raku
1 -&gt; 1
2 -&gt; 0
3 -&gt; 1
4 -&gt; 0
5 -&gt; 1
6 -&gt; 0
7 -&gt; 1
8 -&gt; 0
9 -&gt; 1
10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
</code></pre>

<h3>Binary Palindrome in Perl</h3>

<p>The Perl implementation is quite similar to the Raku implementation, except that we use the <code>sprintf</code> built-in function to convert the number to a binary representation of the input number.</p>

<pre><code>use strict;
use warnings;
use feature "say";

for my $test (1..12) {
    my $bin_num = sprintf "%b", $test;
    say "$test -&gt; ", $bin_num eq reverse ($bin_num) ? 1 : 0;
}
</code></pre>

<p>This is the output with the 12 test cases:</p>

<pre><code>$ perl ./bin-palindrome.pl
1 -&gt; 1
2 -&gt; 0
3 -&gt; 1
4 -&gt; 0
5 -&gt; 1
6 -&gt; 0
7 -&gt; 1
8 -&gt; 0
9 -&gt; 1
10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
</code></pre>

<h2>Task 2: Adventure of Knight</h2>

<p><em>A knight is restricted to move on an 8×8 chessboard. The knight is denoted by N and its way of movement is the same as what it is defined in Chess.</em> </p>

<p><code>*</code> represents an empty square. <code>x</code> represents a square with treasure.</p>

<pre><code>The Knight’s movement is unique. It may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L).
</code></pre>

<p><em>There are 6 squares with treasures.</em></p>

<p><em>Write a script to find the path such that Knight can capture all treasures. The Knight can start from the top-left square.</em></p>

<pre><code>  a b c d e f g h
8 N * * * * * * * 8
7 * * * * * * * * 7
6 * * * * x * * * 6
5 * * * * * * * * 5
4 * * x * * * * * 4
3 * x * * * * * * 3
2 x x * * * * * * 2
1 * x * * * * * * 1
  a b c d e f g h
</code></pre>

<p><em>BONUS: If you believe that your algorithm can output one of the shortest possible path.</em></p>

<p>I have secured a Raku program solving the <a href="https://en.wikipedia.org/wiki/Knight's_tour">knight&#8217;s tour problem</a>, using <a href="https://en.wikipedia.org/wiki/Knight%27s_tour#Warnsdorff's_rule">Warnsdorff&#8217;s rule</a>. Since this program guarantees that the knight visits every square exactly once, we&#8217;re guaranteed to find all treasures in a relatively limited number of moves. But it is rather unlikely to find the shortest possible path. I&#8217;ll try to look for an optimal path, but this appears to require an entirely different algorithm. I&#8217;m very busy this week: I have meetings late on Thursday and Friday evenings and I have a fully booked weekend, with at best a couple of hours free on Saturday night. In short, I&#8217;m really not sure that I&#8217;ll be able to complete task 2 in time. This is the reason I decided to publish this blog post with solutions to only task 1. I&#8217;ll update this post if I succeed to complete task 2 in due time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Independence Day, i.e. July 4, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 118</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-118-4hg9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-118/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-118/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-binary-palindrome">
  </a>
  TASK #1 › Binary Palindrome
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code>.</p>

<p>Write a script to find out if the binary representation of the given integer is Palindrome. Print <code>1</code> if it is otherwise <code>0</code>.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Compared to the second task, this is pretty straight forward. Convert the integer into a binary representation using <code>sprintf '%b'</code>, and then compare this string to the reversed string.</p>

<p>The only thing up for debate is whether an even number (the last bit is 0) could be considered a palindrome if it was left padded by one or more zeros. For example, the binary value for 6 (110) could be written as 0110 which is palindromic. For the purpose of this task, I'm not doing that.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 5
1

$ ./ch-1.pl 4
</code></pre>

</div>



<h2>
  <a href="#task-2-adventure-of-knight">
  </a>
  TASK #2 › Adventure of Knight
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>A knight is restricted to move on an 8×8 chessboard. The knight is denoted by N and its way of movement is the same as what it is defined in Chess. * represents an empty square. x represents a square with treasure.</p>

<p>The Knight’s movement is unique. It may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L).</p>

<p>There are 6 squares with treasures.</p>

<p>Write a script to find the path such that Knight can capture all treasures. The Knight can start from the top-left square.</p>

<p>BONUS: If you believe that your algorithm can output one of the shortest possible path.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This is by far the most amount of code I've written for a challenge, beating my previous code for the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-076/#TASK2">word search</a> task in week 076. I guess I'll find out once I've submitted my pull request if I'm on the mark or over engineered it. It would be a lot smaller if I wasn't trying to get the bonus points :)</p>

<p>The first thing what is the input. Rather than parsing a file for <code>*</code> and <code>x</code>, I specify the treasure spots in chess notation (a1 = bottom left, f8 = top right). While the task specifies six pieces of treasure, you can specify as many or as few as required.</p>

<p>Then the task is broken up into these sub tasks:</p>

<ul>
<li>The <code>_input_to_targets</code> subroutine converts the chess notation into cell positions (a1 = 0,0, a8 = 0,7). It also adds a8 as the starting position, and checks that there are no duplicates.</li>
<li>The next thing to do is find all the intermediate moves (if any) between every two points. For six pieces of treasure (7 points including the knight's origin), there are 42 (6 × 7) combinations. Thankfully we only need to calculate half of them, as the other half are just the reverse order. This is done in the <code>_get_intermediate_moves</code> subroutine.</li>
<li>The way this subroutine works is it starts with the starting point. It then adds a move in each of the eight directions the knight can move, providing the it is still within the bounds of the board and the cell it lands on has not already been seen. If none of these result in hitting the target, these moves have another move added to them. We continue this until we hit the target. We now know the shortest path between all points of interest on the board.</li>
<li>The next task is to figure out all the permutations of the order to reach the treasure. I don't like using modules that aren't part of core Perl, so I rolled my own <code>_get_permutation</code> function that was copied from the second task of week 109. For six pieces of treasure, there are 720 (6!) possible permutations, since we must always start at the top left position.</li>
<li>For each permutation of moves we need to find the number of moves required to collect all the treasure. This is done by using the intermediate moves between two pieces of treasure, and the cell itself. If this is the shortest path or the first permutation, we store the moves in the <code>@least_moves</code> array.</li>
<li>Finally we display the results. For this I convert the grid position to chess notation with the <code>_cn</code> function. If the cell has a piece of treasure, then I put asterisks around the cell.</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl e6 d4 c3 a2 b2 b1
The shortest path is 12 steps
*a8* » c7 » *e6* » *d4* » b5 » *c3* » *a2* » c3 » *b1* » c3 » d1 » *b2*
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-118-4hg9</id>
    <published>2021-06-23T16:52:38Z</published>
    <updated>2021-06-23T16:52:38Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Bericht vom Deutschen Perl-/Raku-Workshop 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Der Deutsche Perl-/Raku-Workshop ("German Perl Workshop", GPW) ist eine Institution in der Perl-Community: Seit 1999 gibt es diese Konferenz rund um Perl (und seit ein paar Jahren Raku). Damit ist der GPW eine der ältesten Perl-Veranstaltungen überhaupt.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-06-23-bericht-vom-deutschen-perl-raku-workshop-2021</id>
    <published>2021-06-23T10:00:00Z</published>
    <updated>2021-06-23T10:00:00Z</updated>
  </entry>
  <entry>
    <title>What they say in Java is just as true in Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/aristotle/2021/06/stringbuilder.html"/>
    <id>tag:blogs.perl.org,2021:/users/aristotle//15.10272</id>
    <published>2021-06-22T22:18:15Z</published>
    <updated>2021-06-23T02:41:19Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Stupid Tricks" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/aristotle/">
        <![CDATA[<pre><code>use Benchmark::Dumb 'cmpthese';

( $bar, $quux ) = qw( bar quux );

cmpthese( 0.0002, {
  conc =&gt; q{
    my $str = "xxx ";
    (((( $str .= "foo" ).= $::bar ).= "baz" ).= $::quux ).= "qux";
  },
  intp =&gt; q{
    my $str = "xxx ";
    $str .= "foo${::bar}baz${::quux}qux";
  },
} );
</code></pre>

<p>I don’t recall ever seeing anyone mention this.</p>

<p>(It is, of course, obvious, and it is, of course, irrelevant in most contexts, especially as it is, of course, not a huge difference. Perl structurally tends to make it less likely to make this mistake in an <a href="https://accidentallyquadratic.tumblr.com/">accidentally quadratic</a> way compared to how Java tends to be written, anyway. And anyhow, instead of micro-optimising Perl code this way, we all rewrite it – of course – in C… right?)</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Deprecating 32-bit perl</title>
    <link rel="alternate" href="https://dev.to/drhyde/deprecating-32-bit-perl-3512" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I announced recently that for one of my perl modules, <a href="https://metacpan.org/dist/Number-Phone">Number::Phone</a>, I would be dropping support for 32-bit versions of perl. On the mailing list that I have for users I heard nary a peep, but when I announced it in public groups I got some pushback, so I thought it would be a good idea to explain why I'm doing this, and also why I don't think it's a problem.</p>

<p>So first, why? It's quite simple really. Bundled with Number::Phone is a lot of data. The 25MB (compressed) distribution tarball expands to 123MB, of which 98MB is one single data file. Disk space is cheap this century, so I didn't worry about this for ages, until one of the users asked if I could split that data file out into a separate optional add-on, as it was taking most of the space in his Docker containers, and was a substantial financial cost for him. Splitting it out would require a long deprecation cycle, so as a temporary work-around I have provided <a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.7003/source/README.md">a build-time option</a> to leave out that file when you install the module and save disk space in exchange for reduced functionality. But I really want to provide full functionality and save disk space.</p>

<p>The large file is a <a href="https://metacpan.org/dist/DBM-Deep">DBM::Deep</a> database. DBM::Deep is a fantastic tool, it provides an on-disk representation of an arbitrary data structure of arrays, dictionaries and scalars. You can access all the data completely transparently, and it eats hardly any memory. You can even add, edit and delete bits of the structure. An on-disk data structure that requires minimal memory is exactly what I wanted. However, editability comes with costs. In particular it costs lots of disk space. Not only do you have to allow space for data structures to grow (at minimum this requires space for extra pointers to data that would be added at the end of the file), to edit in a reasonable time also means that you have to potentially store the same data a great many times if the same value appears in multiple places.</p>

<p>But I don't need editability. It's enough that I can create a database once, and the users only need to be able to read it. So I created a replacement. <a href="https://metacpan.org/pod/Data::CompactReadonly">Data::CompactReadonly</a> stores in 6.1MB what DBM::Deep needs 98MB for. Database creation is slower and requires more memory than with DBM::Deep, but I don't care about that. Database access for users requires no more memory than DBM::Deep if you accept it being about half the speed, or if you can accept it using a bit of memory it is four times faster than DBM::Deep. And that's an early version, I've put some work into optimisation, but I'm sure I can wring some more performance out.</p>

<p>I didn't want to just write something for use by Number::Phone though, I wanted a general-purpose tool. To be general-purpose it has to support 64-bit values, and because I am lazy the current version <em>requires</em> 64-bit integers. I may find the tuits to get rid of that requirement at some point, but I'm not going to put much effort into that, because ...</p>

<p>... I doubt I have any 32-bit users. Perl has supported 64-bit architectures since <a href="https://metacpan.org/release/RGARCIA/perl-5.6.2/view/INSTALL#64-bit-support.">at least 2003</a>, and also supports 64-bit integers on many platforms that only have 32-bit pointers. I gave a 2 year deprecation warning, so by the time I release a version that requires 64-bit integers they will have been available on all reasonable platforms and many thoroughly unreasonable ones for just a few months short of <em>twenty years</em>. It hasn't been possible to even buy reasonable server-grade 32-bit hardware for a decade or more and even unreasonable hobbyist servers like the common cheap ARM boxes can run a perl with 64-bit integers.</p>

<p>So there you are, that's why I'm deprecating 32-bit perl, and why I don't think anyone will notice when I stop supporting it.</p>

</div>
    </content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/deprecating-32-bit-perl-3512</id>
    <published>2021-06-22T22:45:38Z</published>
    <updated>2021-06-22T22:45:38Z</updated>
    <category term="perl"/>
    <category term="32bit"/>
    <category term="deprecation"/>
  </entry>
  <entry>
    <title>Perl can escape the Lisp Curse</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-can-escape-the-lisp-curse-3o77" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Ten years ago Rudolf Winestock wrote <a href="http://winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a>, an essay that “attempt[ed] to reconcile the power of the <a href="https://lisp-lang.org/">Lisp programming language</a> with the inability of the Lisp community to reproduce their pre-<a href="http://c2.com/cgi/wiki?AiWinter">AI Winter</a> achievements.”</p>

<p>His conclusion? The <strong>power and expressiveness</strong> of Lisp have conspired to keep its developers individually productive, but <strong>collectively unable to organize their work</strong> into complete, standardized, well-documented, ‑tested, and ‑maintained packages that they could coalesce into interoperable and widely-adopted solutions. Everything from object systems to types to asynchronous non-blocking programming and concurrency is up for grabs and has multiple competing implementations.</p>

<p>These social effects have <strong>doomed Lisp to also-ran status</strong> in an industry where “employers much prefer that workers be fungible, rather than maximally productive.” Free tooling support has lagged; although <a href="http://www.gnu.org/software/emacs/">Emacs</a> can be hacked endlessly to do anything, there is no out-of-the-box integrated development environment or batteries-included defaults to <strong>immediately ease new programmers into their job</strong>.</p>

<p>Does this all sound familiar to Perl developers?</p>

<p>Perl is <strong>renowned for its expressive capabilities</strong> , enshrined in the <a href="https://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it">TIMTOWTDI</a> (There Is More Than One Way To Do It) design principle. Stories abound of the productivity achieved by Perl programmers stitching together modules from <a href="https://www.cpan.org/">CPAN</a> with their own code. Select an <a href="https://metacpan.org/pod/Moose">object</a> <a href="https://metacpan.org/pod/Moo">system</a> (or <a href="https://perldoc.pl/perlobj">don’t</a>), maybe throw in an <a href="https://metacpan.org/pod/Syntax::Keyword::Try">exception</a> <a href="https://metacpan.org/pod/Try::Tiny">handler</a> (or <a href="https://perldoc.pl/functions/eval">don’t</a>), and you too can have a codebase that fellow developers critique for not following their favored techniques. Meanwhile, <strong>managers are struggling to fill the rest of the team</strong> with new programmers looking for IDE support and finding only a grab-bag of <a href="https://www.vim.org/">Vim</a> extensions.</p>

<p>But there’s hope.</p>

<p>Perl has started <strong><a href="https://perldoc.pl/perlsyn#Try-Catch-Exception-Handling">incorporating</a> <a href="https://github.com/Ovid/Cor/wiki">features</a> expected of modern programming languages</strong> into its core while <a href="https://metacpan.org/pod/XS::Parse::Keyword">making room</a> for further experimentation via CPAN. The <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (from Microsoft of all places!) has <a href="https://metacpan.org/pod/Perl::LanguageServer">enabled Perl IDE features</a> in text editors to <strong>boost productivity for new and experienced developers</strong> alike. And there’s a <a href="https://github.com/Perl/RFCs/blob/master/docs/process.md">pilot Request For Comment process</a> for further improvements.</p>

<p>These efforts point to a future where <strong>Perl’s expressive strength is married with sensible defaults and features</strong> <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260068.html">without breaking backward compatibility</a>. Maybe the curse can be overcome.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-can-escape-the-lisp-curse-3o77</id>
    <published>2021-06-22T14:00:00Z</published>
    <updated>2021-06-22T14:00:00Z</updated>
    <category term="perl"/>
    <category term="lisp"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>#517 - Commitment and habit</title>
    <link rel="alternate" href="http://perlweekly.com/archive/517.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Flavio Poletti has just completed one year of blogging. Mohammad S. Anwar has been editing the Perl Weekly for more than three years and running the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a> for more than two years.</p>
<p>I am not sure what the secret is, but something about creating a commitment, even if it is an artificial commitment that then you need to stick to. I am sure both of them had times when they thought of sleeping in and not doing the work that day or that week. After all, this is not their paid job, but the commitment kept them going. With time it became easier to do the task and the whole thing became a habit. I wish more people found the strength to do something like this.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/517.html</id>
    <published>2021-06-21T10:00:00Z</published>
    <updated>2021-06-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A List with One Missing Line and Too Many Lines to List: The Weekly Challenge 117</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given text file with rows numbered 1-15 in random order but there is a catch one 
row in missing in the file.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub find_missing{
    my(@numbers) = sort {$a &lt;=&gt; $b} @_;
    for(my $i=0; $i&lt; @numbers - 1; $i++){
        return $numbers[$i] + 1 if $numbers[$i] != $numbers[$i + 1] - 1;   
    }  
}

MAIN:{
    my @line_numbers; 
    while(&lt;DATA&gt;){
        chomp;
        m/([0-9]+),.*/;
        push @line_numbers, $1;
    }
    my $missing = find_missing(@line_numbers);
    print "$missing\n"; 
}

__DATA__
11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My approach here is likely the most common one for this problem I would think. We get a 
list of all the numbers and then iterate through the list to determine which one is 
missing. This code assumes the conditions of the problem hold, that there is always one
missing number.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given size of a triangle. Write a script to find all possible paths from top to 
the bottom right corner. In each step, we can either move horizontally to the right (H), 
or move downwards to the left (L) or right (R).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant FINAL =&gt; "end"; 
use constant DEADEND =&gt; "-1"; 
use constant TRIANGLE_TOP =&gt; q|/\\| ;
use constant TRIANGLE_BOTTOM =&gt; q|/__\\|;

sub find_paths{
    my($n) = @_;
    my %paths;
    my @complete_paths;
    my @vertices; 
    for my $i (0 .. $n){
        for my $j (0 .. $i){
            push @vertices, "$i-$j";
        }
    }
    $paths{""}=["0-0",["0-0"]];    
    my %updated_paths;
    while((keys %paths) &gt; 0){
        %updated_paths = ();
        for my $path (keys %paths){
            my @exists;
            my @visited; 
            my $current = $paths{$path}-&gt;[0];  
            my $visited = $paths{$path}-&gt;[1];
            my @ij = split(/\-/, $current);  
            my($left, $horizontal, $right) = (($ij[0] + 1) . "-" . $ij[1], $ij[0] . "-" . ($ij[1] + 1), ($ij[0] + 1) . "-" . ($ij[1] + 1));
            @exists = grep {$_ eq $left} @vertices;
            @visited = grep {$_ eq $left} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_left = [@{$visited}, $left];
               if($left eq "$n-$n"){
                   push @complete_paths, $path . "L"; 
               }
               else{
                   $updated_paths{$path . "L"} = [$left, $visited_left];     
               }
            }          
            @exists = grep {$_ eq $horizontal} @vertices;
            @visited = grep {$_ eq $horizontal} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_horizontal = [@{$visited}, $horizontal];
               if($horizontal eq "$n-$n"){
                   push @complete_paths, $path . "H"; 
               }
               else{
                   $updated_paths{$path . "H"} = [$horizontal, $visited_horizontal];     
               }
            }           
            @exists = grep {$_ eq $right} @vertices;
            @visited = grep {$_ eq $right} @{$visited};
            if(@exists &amp;&amp; !@visited){
               my $visited_right = [@{$visited}, $right];
               if($right eq "$n-$n"){
                   push @complete_paths, $path . "R"; 
               }
               else{
                   $updated_paths{$path . "R"} = [$right, $visited_right];     
               }
            }           
        }  
        %paths = %updated_paths;  
    }   
    return @complete_paths; 
}

sub print_triangle{
    my($n) = @_;
    my $top = TRIANGLE_TOP . "  ";
    for my $i (1 .. $n ){
        print " ";
        print "  " x ($n - $i);
        print $top x $i  ;
        print "\n";
        print "  " x ($n - $i );
        print TRIANGLE_BOTTOM x ($i );
        print "\n";
    }
}

MAIN:{
    my($N);
    $N = 1;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 2;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 3;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
    $N = 4;
    print_triangle($N);
    for my $path (find_paths($N)){
        print "$path ";
    } 
    print "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 /\  
/__\
R LH 
   /\  
  /__\
 /\  /\  
/__\/__\
RR LRH RLH LHR LLHH LHLH 
     /\  
    /__\
   /\  /\  
  /__\/__\
 /\  /\  /\  
/__\/__\/__\
RRR LHRR RLHR LRRH RRLH RLRH LRHR LLHRH LLRHH RLHLH LHRLH RLLHH LHLRH LLHHR LHLHR LRLHH LRHLH LHLHLH LHLLHH LLHLHH LLLHHH LLHHLH 
       /\  
      /__\
     /\  /\  
    /__\/__\
   /\  /\  /\  
  /__\/__\/__\
 /\  /\  /\  /\  
/__\/__\/__\/__\

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Here we see a great example of &lt;em&gt;combinatorial explosion&lt;/em&gt;! As the triangle size grows the 
number of possible pathways increases extremely quickly. The number of possible paths when
&lt;code&gt;$N = 10&lt;/code&gt; is 1,037,718. My code finds all of those in about 40 seconds when run on a 2019
MacBook Pro. Performance on more modest hardware is still reasonable.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;$N = 20&lt;/code&gt; the complete number of paths is so large that maintaining a list of paths 
in memory will cause the Perl interpreter to run out of memory and crash. It is simply
not possible to list them all!&lt;/p&gt;

&lt;p&gt;Interestingly it turns out that the original author of the challenge thought simply
&lt;a href="https://twitter.com/e_choroba/status/1406747854983602179?s=20"&gt;counting the paths&lt;/a&gt; would
be sufficient, but the problem was edited to instead list the paths. I have to say that
listing them all, along with my own optional variation of drawing the triangles was fun.
The only downside was a bit of initial surprise, and then realization, about just how 
large the number of paths grows.&lt;/p&gt;

&lt;p&gt;It turns out that this task is a slightly disguised description of what is known as a
&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;. The
possible number of paths, the count that is, can be obtained directly from a closed form
approach. No need to actually traverse the paths!&lt;/p&gt;

&lt;p&gt;What I did here was to effectively do a breadth first traversal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A hash is kept of all paths. Keys are the paths themselves and values are an array 
reference containing the current position and all previously visited nodes on that path.
&lt;/li&gt;
&lt;li&gt;Each path is examined and updated to move to the next position proved that next position
exists and has not yet been visited. (See more on visited positions next).
&lt;/li&gt;
&lt;li&gt;The hash of paths is refreshed by moving paths that are completed to an array. Also, 
this code allows for catching paths which deadend (i.e. end up in a corner which is 
impossible to get out of without backtracking over a visited node). Without horizontal 
leftward movements this is not really possible however. Some CPU cycles can be saved by
eliminating these checks, but I decided to leave them in anyway. Please do note the 
unnecessary extra work, however!
&lt;/li&gt;
&lt;li&gt;The traversal ends when all paths have been exhausted, the loop ends, and the paths are
returned.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-117/"&gt;Challenge 117&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://math.ucr.edu/home/baez/qg-fall2007/pascal.html"&gt;Quantum Pascal's Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc117</id>
    <published>2021-06-20T23:38:00-04:00</published>
    <updated>2021-06-20T23:38:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>The Perl echo chamber, marketing and … is Perl really dying?</title>
    <link rel="alternate" href="https://dev.to/cosimo/the-perl-echo-chamber-marketing-and-is-perl-really-dying-4cp9" type="text/html"/>
    <content type="html">&lt;p&gt;Recently I came across &lt;a href="https://twitter.com/OvidPerl/status/1406653683006386180?s=20"&gt;this tweet from Curtis/Ovid&lt;/a&gt;, which references &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/06/msg260597.html"&gt;longer post&lt;/a&gt; about a proposal to integrate &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;a better, more modern object-oriented “system”&lt;/a&gt; (Corinna) in Perl 5.&lt;/p&gt;

&lt;p&gt;The proposal itself is &lt;strong&gt;not&lt;/strong&gt; what I’d like to address here. I haven’t followed Corinna’s evolution. I believe it goes in a positive direction for the language, FWIW.&lt;/p&gt;

&lt;p&gt;From that original tweet, a comment from &lt;a href="https://twitter.com/consttype"&gt;Rafael&lt;/a&gt; followed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[…] but I’m still wondering what are the real factors that make companies seek an exit strategy from Perl 5. Who makes this kind of expensive decision, and why? I suspect obscure OO syntax is not a major one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what I replied with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is indicative of the fundamental problem in the Perl echo chamber. Some people still have no idea why companies are moving away from Perl. If you want to hear the perspective from someone who has seen this happen in multiple companies, let me know :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sorry for this premise, but I was afraid what follows would make no sense otherwise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-perl-dying-today"&gt;
  &lt;/a&gt;
  Why is Perl dying today?
&lt;/h2&gt;

&lt;p&gt;First of all, I don’t think “ is dying” is a useful question to ask, nor it is indicative of anything particularly interesting. I’m sure everyone reading this will have encountered plenty of “C is dying”, “Java is dying” or similar, and yet, C and Java are still being used everywhere. In one sense, no language really dies ever. In Perl’s situation, things are slightly different though, as (I believe) Python slowly conquered Perl’s space over time.&lt;/p&gt;

&lt;p&gt;What does it mean for a language to die, or to be dead?&lt;/p&gt;

&lt;p&gt;From an &lt;strong&gt;end user point of view&lt;/strong&gt; , let’s say a random programmer employed in a company or freelance, a language could be dying if a task they want to accomplish using that language is hard because there are no supporting libraries for it (think CPAN or PyPi), or the libraries are so old they don’t work anymore. That situation surely conveys the idea that the language is not in use anymore, or very few people must be using that language. One would expect that a common task in 2021 must be easy to accomplish with a language worth using in 2021.&lt;/p&gt;

&lt;p&gt;What about a &lt;strong&gt;company&lt;/strong&gt; ‘s point of view? The reality is that companies don’t have an opinion on languages, only people do. Teams do have an opinion on languages. The group dynamics inside a team influence what languages are acceptable for current and new projects.&lt;/p&gt;

&lt;p&gt;Is Perl dying then?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience"&gt;
  &lt;/a&gt;
  My experience
&lt;/h2&gt;

&lt;p&gt;Some years ago I was a &lt;a href="https://metacpan.org/author/COSIMO"&gt;fairly active member of the Perl community&lt;/a&gt;, I attended and presented at various Perl conferences around Europe, talking about my experience using Perl at a few &lt;a href="https://www.over-log.it/"&gt;small&lt;/a&gt; and &lt;a href="https://opera.com"&gt;large&lt;/a&gt; companies.&lt;/p&gt;

&lt;p&gt;I remember picking up Perl for the first time based on a suggestion from my manager back then. He gave me a hard copy print-out of the whole of Perl 5.004 man pages, and said: “We are going to use this language. It’s amazing, take some time to study it and we’ll start!”. This was 1998, and I had such a fantastic time :-). I was such a noob, but Perl was amazing. It could do everything you needed and then some, and it was easy and simple. The language was fast already back then, and it got faster over time. At that point in time, I was working in a very small company, we were three people initially, and we ended up writing a complete web framework from scratch that is still in use today, after more than 20 years. If that’s not phenomenal, I don’t know what is. It’d be cool to talk about this framework: it was more advanced than anything that’s ever been done even considering it’s 2021… a story for another time.&lt;/p&gt;

&lt;p&gt;And by the way, we were running our Perl code on *anything*, and I mean anything, Windows PCs, Linux, Netware and even AS/400, a limited subset of it at least, at a time when Java’s “write once, run everywhere” was just an empty marketing promise. Remember this was the time of Netscape Navigator and Java applets. Ramblings, I know, but perhaps useful to understand where things have gone wrong.&lt;/p&gt;

&lt;p&gt;In 2007, I left my job in Italy and moved to Norway to work for Opera Software. Back then, Opera’s browser was still running the Presto engine, and a little department inside Opera was in charge of web services. That’s where I was headed. Most services there were written in Perl. Glorious times for me, I would learn an awful lot there, meet a lot of skilled developers. Soon after I started working there, 2007, some colleagues were already making fun of Perl. It’s a “write-only language”, “not meant for serious stuff”, “lack of web frameworks”, etc… Those were the times when Python frameworks started to emerge, some of which would eventually disappear. I remember a few colleagues strongly arguing to move to this Python framework called &lt;a href="https://www.pylonsproject.org/"&gt;Pylons&lt;/a&gt;, and then eventually to Django.&lt;/p&gt;

&lt;p&gt;I believe this general attitude towards Perl originated from different factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;personal preference towards other languages and/or dislike towards Perl&lt;/li&gt;
&lt;li&gt;the desire to be working with the latest “hip” framework or language&lt;/li&gt;
&lt;li&gt;the discomfort of maintaining an aging codebase with problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These factors exist and are legitimate reasons to want to move away from any language or framework. I’m not saying they are justified, but I do understand why people wanted that. In our field, I have seen it’s quite common to try and avoid the objective difficulties of maintaining a legacy project, going the greener way of an overly optimistic rewrite, which normally ends in tears.&lt;/p&gt;

&lt;p&gt;Throughout the years, I noticed other contributing factors to the progressive abandonment of Perl, even in companies like Opera.&lt;br&gt;&lt;br&gt;
I’ll mention two that I experienced directly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Outdated or non existent supporting libraries&lt;/li&gt;
&lt;li&gt;Teams composition&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a time a few years ago, when CPAN was awesome, the best language support system in existence and every other language community was envying it. CPAN pretty much was selling Perl by itself. In my case, the libraries on CPAN educated me and made me adopt a testing culture that no other language (in my knowledge) had before Perl. Today, seeing npm modules being installed without running tests makes me uncomfortable :-)&lt;/p&gt;

&lt;p&gt;Then over time (years) a shift happened. You would search on CPAN for a library that would help you with a common task and you wouldn’t find anything, or you would only find quick hacks that didn’t really work properly. In my case, I remember the first example of that being OAuth2. If I had to speculate, I would say this is a product of many elements, one of which is the average age of Perl programmers getting higher.&lt;/p&gt;

&lt;p&gt;Another related shift I remember from those years is companies publishing their APIs/SDKs started dismissing Perl, at first relying on some CPAN module to eventually appear, then completely omitting Perl support. In the beginning, we politely complained to those companies, trying to make a point, but unfortunately there was no turning back. These days almost no SDK comes with a Perl component.&lt;/p&gt;

&lt;p&gt;The second major aspect I have experienced is related to teams. In 2012 I was tasked with writing my first ever greenfield project, entirely from scratch, a project that would turn out to be one of the things I’m most proud of, &lt;strong&gt;Opera Discover&lt;/strong&gt; , an online news recommendation system for the Opera browser, still working today! A team of three veteran engineers (myself included) was assembled, and there and then, we were faced with a decision: what language should we use for this?&lt;/p&gt;

&lt;p&gt;While I was most experienced in Perl and knew Python a little, the other two colleagues didn’t know Perl. They had experience in C++ mostly, as this was Opera after all. We were chosen not based on our programming language expertise, rather (I suppose) based on our capability to tackle such a big and complex project. While I could have proposed that the project be written in Perl, in good conscience I knew that choice was not viable. Django was readily available and could provide a wide range of functionality we actually needed. No alternative in the Perl world could come close to such a good value proposition. The fact that Python was (like Perl had been for me!) a very accessible choice, simple to pick up, easily installed on any Linux system, and with plenty of solid up-to-date libraries, made the choice obvious.&lt;/p&gt;

&lt;p&gt;With the Discover project, I started learning Python properly as a day-to-day programming language. I remember being horrified (and making fun of) the httplib2/httplib3 situation initially. Then I learned about the requests module and forgot all about it. This is to say, Python also has its quirks of course. The disastrous Python 2 vs Python 3 decision in the Python community caused a lot of grief and uncertainty for people (Perl could have learned something from that…). Nowadays, that’s a non-argument, everything runs on Python 3 and if you still haven’t moved, you will soon.&lt;/p&gt;

&lt;p&gt;In general, having learned Python quite well, my mindset with regards to programming and my job changed completely. I’m not a Perl programmer. I’m not a Python programmer either. I can use different tools whenever they are more suited to what I need to do. In fact, in my last four years I have written software in NodeJS and Java of all things… I used to despise and make fun of Java, but I had never worked on any professional project before. While I do maintain that Java has some horrible aspects, contrary to my expectations, I have enjoyed working with it, it has an efficient runtime, awesome threading, solid libraries and debugging/inspection tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;While I do understand Ovid’s point about wanting to keep the business going, and enjoying Perl as a language, I have personally moved on many years ago. I still use Perl for the occasional script when it’s convenient, but for other use cases, like web APIs, I prefer Python and FastAPI, PyTorch for machine learning, etc.. so my conclusion is that it’s the libraries and the ecosystem that drive language use, and &lt;strong&gt;not the language itself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A better OO system will unfortunately do nothing for Perl (in my opinion at least). Better marketing will without a doubt do nothing for Perl. As if a prettier website could change the situation and the aspects I talked about… it can’t! The situation we have in front of us in 2021 is the result of technological and social changes started at least a decade ago.&lt;/p&gt;

&lt;p&gt;I realize this may be an incoherent post. Sorry about that, I tried to write it right away or it would have probably never come out.&lt;br&gt;&lt;br&gt;
If you have questions or comments, let me know and I’ll try to address them if I can.&lt;/p&gt;

&lt;p&gt;Most importantly, I do not wish to convince anyone that what I wrote is true. It is simply my experience. If there’s one thing I wish people would take from it, it’s to move away from the thought of yourself being a “X Programmer” and broaden your horizons and set of tools available to you. It was a tremendously positive move for myself, one I wished I had done before.&lt;/p&gt;

&lt;p&gt;Peace.&lt;/p&gt;

</content>
    <author>
      <name>Cosimo Streppone</name>
    </author>
    <id>https://dev.to/cosimo/the-perl-echo-chamber-marketing-and-is-perl-really-dying-4cp9</id>
    <published>2021-06-20T19:29:52Z</published>
    <updated>2021-06-20T19:29:52Z</updated>
    <category term="development"/>
    <category term="languages"/>
    <category term="marketing"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Recursion in Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></summary>
  <updated>2021-06-20T10:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/recursion"/>  <id>https://perlmaven.com/recursion</id>
  <content type="html"><![CDATA[<p>
<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Recursion</a> in computer science is when a function calls itself
to resolve the problem. Each recursive call usually tries to solve a simpler version of the original problem till we reach a point
where the solution is obvious and does not need any further recursive calls.
<p>
A probably well known game of Google is that if you search for <a href="https://www.google.com/search?q=recursion">Recursion</a>
that will offer to redirect you to "recursion" again, ad infinitum. Probably the only escape from this is to click on the
definition of <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a> in Wikipedia</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 117: Missing Row and Possible Paths</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/06/perl-weekly-challenge-117-missing-row-and-possible-paths.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10270</id>
    <published>2021-06-19T22:33:40Z</published>
    <updated>2021-06-19T22:35:14Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 117 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-117/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of  days (June 20, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Missing Row</h2>

<p><em>You are given text file with rows numbered 1-15 in random order but there is a catch one row in missing in the file.</em></p>

<pre><code>11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five
</code></pre>

<p><em>Write a script to find the missing row number.</em></p>

<p>If the numbers are really 1 to 15 and if only one number is missing, then we could sum the numbers that we have and subtract the result from the sum of all integers between 1 and 15 (120), which would give us the missing number. </p>

<p>However, I&#8217;ll work on a task that is a bit more general: rather than only 1 to 15, I&#8217;ll use a range from 1 to any larger integer, and I&#8217;ll also suppose that there can be more than 1 number missing.</p>

<h3>Missing Row in Raku</h3>

<p>I will simulate the input file as a string variable. We read the input data and store in the <code>%seen</code> hash the row numbers. At the end, we go through the range and print out numbers that are not in the hash.</p>

<pre><code>use v6;

my $file = "11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five";

my %seen;
my $max = 0;

for $file.lines -&gt; $line {
    my $num = $line ~~ /^(\d+)/;
    %seen{$num} = 1;
    $max = $num if $num &gt; $max;
}
for 1..$max -&gt; $i {
    say "Missing number = ", $i unless %seen{$i}:exists;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>raku ./missing_row.raku
Missing number = 12
</code></pre>

<h3>Missing Row in Perl</h3>

<p>This is essentially a port to Perl of the Raku program above, except that we store the input in a <code>__DATA__</code> section:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my %seen;
my $max = 0;

while (my $line = &lt;DATA&gt;) {
    my $num = $1 if $line =~ /^(\d+)/;
    $seen{$num} = 1;
    $max = $num if $num &gt; $max;
}
for my $i (1..$max) {
    say "Missing number = ", $i unless exists $seen{$i};
}

__DATA__
11, Line Eleven
1, Line one
9, Line Nine
13, Line Thirteen
2, Line two
6, Line Six
8, Line Eight
10, Line Ten
7, Line Seven
4, Line Four
14, Line Fourteen
3, Line three
15, Line Fifteen
5, Line Five
</code></pre>

<p>This program displays the same output as the Raku program:</p>

<pre><code>$ perl missing_row.pl
Missing number = 12
</code></pre>

<h2>Task 2 - Find Possible Paths</h2>

<p><em>You are given size of a triangle.</em></p>

<p><em>Write a script to find all possible paths from top to the bottom right corner.</em></p>

<p><em>In each step, we can either move horizontally to the right (H), or move downwards to the left (L) or right (R).</em></p>

<p><em>BONUS: Try if it can handle triangle of size 10 or 20.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $N = 2

           S
          / \
         / _ \
        /\   /\
       /__\ /__\ E

Output: RR, LHR, LHLH, LLHH, RLH, LRH
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $N = 1

           S
          / \
         / _ \ E

Output: R, LH
</code></pre>

<p>First, I will not try the bonus, because the result would just be insanely large: a triangle of size 10 has more than one million possible paths and a triangle of size 20 has billions or possibly trillions of paths.</p>

<h3>Possible Paths in Raku</h3>

<p>We use the recursive <code>visit</code> subroutine to build all possible paths.</p>

<pre><code>use v6;

sub visit ($row, $col, $path) {
    print "$path " and return if $row == $col == $*end;
    visit($row + 1, $col + 1, "{$path}R") if $row &lt; $*end and $col &lt; $*end;
    visit($row, $col + 1, "{$path}H") if $col &lt; $row;
    visit($row + 1, $col, "{$path}L") if $row &lt; $*end;
}   

sub MAIN(UInt $size = 3) {
    my $*end = $size;
    visit(0, 0, '');
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>raku ./possible_path.raku 3
RRR RRLH RLRH RLHR RLHLH RLLHH LRRH LRHR LRHLH LRLHH LHRR LHRLH LHLRH LHLHR LHLHLH LHLLHH LLRHH LLHRH LLHHR LLHHLH LLHLHH LLLHHH
</code></pre>

<p>We can also find the number of paths with an input value of 10:</p>

<pre><code>raku ./possible_path.raku 10 | wc
      0 1037718 18474633
</code></pre>

<h3>Possible Paths in Perl</h3>

<p>This a port to Perl of the above Raku program:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $end = shift // 3;

sub visit  { 
    my ($row, $col, $path) = @_;
    print "$path " and return if $row == $end and $col == $end;
    visit($row + 1, $col + 1, "${path}R") if $row &lt; $end and $col &lt; $end;
    visit($row, $col + 1, "${path}H") if $col &lt; $row;
    visit($row + 1, $col, "${path}L") if $row &lt; $end;
}   

visit(0, 0, '');
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl possible_path.pl 3
RRR RRLH RLRH RLHR RLHLH RLLHH LRRH LRHR LRHLH LRLHH LHRR LHRLH LHLRH LHLHR LHLHLH LHLLHH LLRHH LLHRH LLHHR LLHHLH LLHLHH LLLHHH

$ perl possible_path.pl 2
RR RLH LRH LHR LHLH LLHH
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, June 27, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5091723297877540193</id>
    <published>2021-06-19T18:36:00.000+02:00</published>
    <updated>2021-06-19T18:36:43.208+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlvi) 25 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Cmd-0.334' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - write command line apps with less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.334&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.333 was 3 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997004&lt;/strong&gt; on 2021-06-13&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 0.997003 was 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Uni-9.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Uni&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - command-line utility to find or display Unicode characters &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.005&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 9.004 was 11 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.020&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.017 was 7 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-Plugin-PodWeaver-4.009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::PodWeaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave your Pod together from configuration and Dist::Zilla &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.009&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.008 was 5 years, 1 month, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Sender-1.300036' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Sender&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a library for sending email &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.300036&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.300035 was 8 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.20&lt;/strong&gt; on 2021-06-18&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.17 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.55&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.54 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/MIME-Lite-3.033' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MIME::Lite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy-dandy MIME mailing class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.033&lt;/strong&gt; on 2021-06-12&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 3.031 was 1 year, 7 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.5' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.5&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.4 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.006&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.005 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.04&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.03 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.01&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.00 was 3 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.051' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.051&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.050 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.025&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.024 was 2 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.018&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 4.017 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/POE-Component-IRC-6.93' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;POE::Component::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A fully event-driven IRC client module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.93&lt;/strong&gt; on 2021-06-15&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.92 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.62&lt;/strong&gt; on 2021-06-16&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.61 was 1 month, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.713&lt;/strong&gt; on 2021-06-14&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 7.712 was 2 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Sub-Exporter-0.988' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Exporter&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a sophisticated exporter for custom-built routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.988&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.987 was 7 years, 8 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.028&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.027 was 2 years, 9 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/Text-CSV-2.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comma-separated values manipulator (using XS or PurePerl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.01&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 69&lt;/li&gt;  &lt;li&gt;Previous version: 2.00 was 2 years, 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Throwable-0.201' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Throwable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a role for classes that can be thrown &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.201&lt;/strong&gt; on 2021-06-19&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.200013 was 5 years, 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Toadfarm-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Toadfarm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - One Mojolicious app to rule them all &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2021-06-17&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 1 year, 8 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.074&lt;/strong&gt; on 2021-06-18&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.073 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5091723297877540193/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvi-25-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5091723297877540193"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5091723297877540193"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlvi-25-great-cpan-modules-released.html" title="(cccxlvi) 25 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5740516172480212572</id>
    <published>2021-06-19T18:31:00.006+02:00</published>
    <updated>2021-06-19T18:32:36.961+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxii) metacpan weekly report - Object::Pad </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad"&gt;Object::Pad&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/19 16:31:02 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::TopoSort" target="_blank"&gt;DBIx::Class::TopoSort&lt;/a&gt; - The addition of topological sorting to DBIx::Class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PERLANCAR::Parse::Arithmetic" target="_blank"&gt;PERLANCAR::Parse::Arithmetic&lt;/a&gt; - Parse arithmetic expmatchsion&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::TrafficAdvice" target="_blank"&gt;Plack::Middleware::TrafficAdvice&lt;/a&gt; - handle requests for /.well-known/traffic-advice&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=256)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Netdisco" target="_blank"&gt;App::Netdisco&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Core" target="_blank"&gt;autobox::Core&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beam::Wire" target="_blank"&gt;Beam::Wire&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::RPC::Client" target="_blank"&gt;Bitcoin::RPC::Client&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Eksblowfish" target="_blank"&gt;Crypt::Eksblowfish&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Types" target="_blank"&gt;Data::Types&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Hash::Utils" target="_blank"&gt;Deep::Hash::Utils&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gimp" target="_blank"&gt;Gimp&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Fold" target="_blank"&gt;Hash::Fold&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Merge::Simple" target="_blank"&gt;Hash::Merge::Simple&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Path" target="_blank"&gt;Hash::Path&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=453)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MongoDB" target="_blank"&gt;MongoDB&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+3=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Table" target="_blank"&gt;PDF::Table&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Deflater" target="_blank"&gt;Plack::Middleware::Deflater&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Induce" target="_blank"&gt;Scalar::Induce&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Util::Numeric" target="_blank"&gt;Scalar::Util::Numeric&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Selenium::Remote::Driver" target="_blank"&gt;Selenium::Remote::Driver&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Compile" target="_blank"&gt;Test::Compile&lt;/a&gt; (+2=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Shortcut" target="_blank"&gt;Win32::Shortcut&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5740516172480212572/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5740516172480212572"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5740516172480212572"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxii-metacpan-weekly-report.html" title="(cdlxxii) metacpan weekly report - Object::Pad "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4734648723221607122</id>
    <published>2021-06-19T18:21:00.001+02:00</published>
    <updated>2021-06-19T18:21:53.633+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-06-19 16:21:19 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67983013" target="_blank"&gt;Replacing all occurrence after nth occurrence in a line in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/7]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68007873" target="_blank"&gt;What version of Perl introduced try / catch?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67979980" target="_blank"&gt;Parsing command line args, but not validating&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68005293" target="_blank"&gt;Overlooping script: how to solve?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67964935" target="_blank"&gt;How to properly parse regular expression in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67984174" target="_blank"&gt;Why does Test::LeakTrace say this Perl code is leaking memory?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67989766" target="_blank"&gt;Intellij Perl5 add Perl5 interpreter&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68005764" target="_blank"&gt;Regex on Perl to capture this type of value (a)(2)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67971552" target="_blank"&gt;Test::BDD::Cucumber::Harness::Html breaks UTF-8 characters&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67970972" target="_blank"&gt;sed or Perl one liner + how to replace path in file only when full match&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/4]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4734648723221607122/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxcv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4734648723221607122"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4734648723221607122"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxcv-stackoverflow-perl-report.html" title="(cdxcv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Next stable DBD::SQLite will be released around the end of July</title>
    <link rel="alternate" href="http://blogs.perl.org/users/kenichi_ishigaki/2021/06/next-stable-dbdsqlite-will-be-released-around-the-end-of-july.html"/>
    <id>tag:blogs.perl.org,2021:/users/kenichi_ishigaki//264.10269</id>
    <published>2021-06-19T01:48:45Z</published>
    <updated>2021-06-19T01:49:55Z</updated>
    <author>
        <name>Kenichi Ishigaki</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/kenichi_ishigaki/">
        <![CDATA[<p>DBD::SQLite 1.67_07 (with SQLite 3.36.0) is a release candidate for the next stable DBD::SQLite. This release has a notable change to improve how to deal with Unicode/Latin-1 characters, contributed by Felipe Gasper. If you write a <b>new</b> application, it is recommended to use one of the newly added modes like this:</p>

<pre>
use DBI;
use DBD::SQLite::Constants qw(:dbd_sqlite_string_mode);

<p>my $dbh = DBI->connect("dbi:SQLite:$dbname", "", "", {<br />
    sqlite_string_mode => DBD_SQLITE_STRING_MODE_UNICODE_FALLBACK,<br />
    # or <br />
    # sqlite_string_mode => DBD_SQLITE_STRING_MODE_BYTES,<br />
    ...<br />
});<br />
</pre></p>

<p>These two new modes are, however, slightly incompatible with the old sqlite_unicode's behavior. If you want to use them with existing databases, you might need to convert them first (by retrieving all the data with the old flag and inserting them into new databases with a new mode, etc).</p>

<p>See <a href="https://github.com/DBD-SQLite/DBD-SQLite/blob/1.67_07/Changes">Changes</a> for other fixes and changes.</p>

<p>This release also updates bundled SQLite from 3.32.3 to 3.36.0, which means now you can use built-in math functions and ALTER TABLE DROP COLUMN among others.</p>

<p>I'll wait for about a month as always, and release 1.68 around the end of July if there's no blocker nor request to wait for more. Thank you for your patience.<br />
</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Grants: May 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_may_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-06-18:/post/grants_may_2021_votes</id>
  <published>2021-06-18T22:25:45</published>
  <updated>2021-06-18T22:25:45</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted: Grant Proposal: Raku Dispatch and Compiler Improvements VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN Grant Proposal: Persistent Data Structures for Raku VOTING RESULTS: Approved. 7 YES vote 0 NO votes, 3 ABSTAIN The Grants Committee is excited to see work begin on these. We accept proposals throughout the year; our 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has concluded voting on the May 2021 round. Two grant requests were submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">Grant Proposal: Raku Dispatch and Compiler Improvements</a> (USD 12,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (27 points), 0 NO votes, 3 ABSTAIN</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Grant Proposal: Persistent Data Structures for Raku</a> (USD 7,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (26 points), 0 NO votes, 3 ABSTAIN</p>

<p>The Grants Committee is excited to see work begin on these.</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Parse paragraphs with Regexp::Grammars</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></summary>
  <updated>2021-06-17T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/regexp-grammars-parse-paragraphs"/>  <id>https://perlmaven.com/regexp-grammars-parse-paragraphs</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Regexp::Grammars">Regexp::Grammars</a> can be scary. Let's try to have a simple and useful example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Tau Station considered Dangerous: Game Review</title>
    <link rel="alternate" href="http://blogs.perl.org/users/enkidu/2021/06/tau-station-considered-dangerous-game-review.html"/>
    <id>tag:blogs.perl.org,2021:/users/enkidu//1614.10265</id>
    <published>2021-06-17T15:36:06Z</published>
    <updated>2021-06-16T02:51:36Z</updated>
    <author>
        <name>Enkidu</name>
        
    </author>
    <category term="Advocacy" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Moose" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/enkidu/">
        <![CDATA[<p>I thought I’d try out Tau Station for a couple of days and get a quick blog post out of it.  That was three months and 11 levels ago.  It took 2 months to wind down my obsessive nature and if not for Tau, I could have pushed a couple of new module versions to CPAN by now.  That’s rather the reason that I don’t play games in the first place, so I can’t give great comparisons.</p>

<p>To sum up, <a href="https://taustation.space/">Tau Station</a> is a web-based, second-person adventure with resource management in real-time: a <a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">Choose-your-own-Adventure book</a> crossed with <a href="http://freeciv.org/">Freeciv</a>.  Oh, and it’s free.  Well, freemium, but the least obtrusive freemium game I’ve ever seen.  </p>
]]>
        <![CDATA[<p>At first, I used it as a rationalization.    Every time I saw something that wasn’t amazing, I’d tell myself “But it’s free”.  After a while, I started wondering “How is this free?”  After 3 days and on the verge of screaming <a href="https://en.wikipedia.org/wiki/Attack_of_the_Killer_App">Shut up and take my money</a>, I see the shopping cart icon that I ignore everywhere on t’Internet and the lightbulb flickers on.
For me that’s a symptom of a Good UI - when you start to think about the question, the answer presents itself.  They’ve put a lot of thought into Accessibility and the mobile version is as close to being as good as the desktop as you can get.</p>

<p>I spent a month playing free (on principle) and it’s challenging but rewarding.  Stumping up the cash only really buys you time.  Playing free doesn’t get you locked out of anything, really, which is astounding.  I’m not as tight-fisted with Perl projects, so I’d always planned on making a donation, but as the month went on, I started making plans on what I could be doing with the various levels of backer.  And yes, playing faster is fun.  The virtual coffee mug is cute, one of the many small details in the background that make me smile.</p>

<p>The nice thing about the missions is that they maintain a sense of fun with references to Eighties movies, literary and historical figures as well as generating tension with a few crucial decisions.  The first day I’m still trying to figure out how I want to play this role and then get confronted with ethical decisions that have consequences (I’d never considered my position on Robotic Rights before)</p>

<p>In the early days, I found myself scurrying back and forth between work and my room trying to pay for university courses.   Also like real life, I found myself running to catch a shuttle, trying to remember everything I need, get a visa and some spending credits.  The only difference between that and reality is I’d go to the Gym more times a day in the game than I’ve been in the last year and I’ve also written more blog posts there than here.</p>

<p>Players have written spoiler-free guides to Tau which you can search for or you can make it a voyage of discovery.  There is enough complexity to keep it engaging over time and a welcoming community for those that like to be social.  It’s a great game for the newly furloughed.  It interrupts your thinking, but doesn’t take over your life.  Good for waiting in the checkout or at the bus stop.   My only suggestion is that if you play free, take notes.  I made myself persona non grata at one station and now I can’t remember which one to avoid.</p>

<p>The one thing that I’d ask is, please, for the sake of the Community, find your NON-Perl friends and say “Check this game out.  I think it’s written in <code>$your_favourite_language</code>, too”  </p>

<p>-</p>

<p>Other <a href="https://www.goodreads.com/book/show/17938417-to-be-or-not-to-be">second person adventures</a> are available.</p>
]]>
    </content>
</entry>
  <entry>
    <title>4 Steps to Blogging Outside the Perl Bubble</title>
    <link rel="alternate" href="https://dev.to/mjgardner/4-steps-to-blogging-outside-the-perl-bubble-37ng" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The following is adapted from my lightning talk “Blogging Outside the Bubble” at last week’s <a href="https://perlconference.us/tprc-2021-cloud/">Perl and Raku Conference in the Cloud 2021</a>. You can <a href="https://phoenixtrap.com/2021/06/09/slides-from-blogging-outside-the-bubble-perl-talk/">watch the presentation and download the slides here</a>. Also, a tip: most of this applies to anyone who wants to start a blog.</em></p>

<p>Let’s say you’re a Perl developer distraught at the <strong>continued decline in usage and mindshare</strong> of your favorite language.</p>

<p>You know that <strong>you do good work and that your tools and techniques are sound</strong>, but the world outside of Perl-specific <a href="https://www.reddit.com/r/perl/">forums</a>, <a href="https://www.cpan.org/">software archives</a>, <a href="https://www.facebook.com/groups/perlcommunity">social media groups</a>, and <a href="//ircs://irc.libera.chat:6697/perl">IRC channels</a> regards it as antiquated, out-of-date, or worse, that IT epithet <em>legacy</em>. (And the newer developers haven’t even <em>heard</em> of <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>!)</p>

<p>Let’s say you’re <strong>worried about your professional prospects</strong> both at your current employer and with possible future employers. Even though you know or can easily be trained in other languages, Perl is still your favorite.</p>

<p><em><strong>Let’s say you’re me.</strong></em></p>

<p>What do you do?</p>

<h2>
  <a href="#step-1-get-a-blog">
  </a>
  Step 1: Get a blog
</h2>

<p>There are two basic types of blogs: standardized format and customizable. If you’re just starting and you want to <strong>spend more time writing</strong> and less time fiddling with templates and software, choose standardized. Here are some sites that enable you to publish your work while getting out of your way and that have developer-centric communities. Pick one and set up an account:</p>

<ul>
<li><a href="http://blogs.perl.org/">blogs.perl.org</a></li>
<li><a href="https://dev.to/">Dev.to</a></li>
<li><a href="https://dzone.com/">DZone</a></li>
<li><a href="https://medium.com/">Medium</a></li>
</ul>

<p>If you want <strong>more customization options</strong>, you could try:</p>

<ul>
<li>
<a href="https://wordpress.com/start">WordPress.com</a> (hosted, but lets you change some things around)</li>
<li>
<a href="https://docs.github.com/pages">GitHub Pages</a> (good if you’re already used to collaborative software development there, but requires more setup including blog generation software)</li>
<li>Or your preferred hosting provider—look for ready-to-go blogging apps like WordPress</li>
</ul>

<p><strong>What did I choose?</strong> I set up WordPress on a <a href="https://www.hostgator.com/web-hosting">shared plan at HostGator</a> (full disclosure: I work there). They also offer <a href="https://www.hostgator.com/managed-wordpress-hosting">easy managed WordPress hosting</a> for a bit more, but I like to tinker.</p>

<p>And yes, the WordPress software is based on <a href="https://www.php.net/">PHP</a>. <strong>Don’t sweat that it’s not Perl.</strong> PHP doesn’t have to “lose” for Perl to “win.”</p>

<h2>
  <a href="#step-2-write">
  </a>
  Step 2: Write
</h2>

<p>Finding a topic to write about can seem hard, but <strong>it doesn’t have to be</strong>. <a href="https://perlweeklychallenge.org/">The Perl (and Raku) Weekly Challenge</a> publishes two new programming challenges every week. Work on those and publish your solution along with commentary.</p>

<p>Or write about whatever you’re working on or would like to work on. Write about your favorite <a href="https://www.cpan.org/">Perl module</a> or <a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/">feature</a>. <strong>It doesn’t matter if someone else wrote about it; you have a unique perspective.</strong></p>

<p>Coming up with a pithy title for your posts may be harder—you want to be <a href="https://en.wikipedia.org/wiki/Clickbait">clickbait</a>-y but honest, and you want to <strong>mention Perl</strong> so that search engines associate your posts with the topic.</p>

<p>The important thing to do is <strong>write something</strong>. And length doesn’t matter; one or two paragraphs is fine.</p>

<h2>
  <a href="#step-3-promote">
  </a>
  Step 3: Promote
</h2>

<p>Here’s the bad news: no one is going to find your blog posts on their own. You need to <strong>put them in front of readers</strong> where they already are.</p>

<p>This means posting links on social networks like <a href="https://twitter.com/">Twitter</a>, <a href="https://facebook.com/">Facebook</a>, and <a href="https://linkedin.com/">LinkedIn</a>. It means <a href="https://www.facebook.com/groups">discussion</a> <a href="https://www.linkedin.com/groups">groups</a> and <a href="https://en.wikipedia.org/wiki/Hashtag">#hashtags</a> (like <code>#perl</code>, <code>#programming</code>, <code>#webdev</code>, etc.) on those social networks. It means news forums like <a href="https://reddit.com/">Reddit</a> and <a href="https://news.ycombinator.com/">Hacker News</a>. And it means posting inside and <strong>outside of Perl-specific groups</strong>. Here are a couple of examples of the latter:</p>

<ul>
<li><a href="https://www.linkedin.com/groups/77237/">LinkedIn FOSS (Free and Open Source Software) Professionals</a></li>
<li>Reddit <a href="https://www.reddit.com/r/coding/">r/coding</a>, <a href="https://www.reddit.com/r/programming/">r/programming</a>, <a href="https://www.reddit.com/r/webdev/">r/webdev</a>
</li>
</ul>

<p>This social promotion might get tedious after a while, so look into plugins for your blogging platform and services like <a href="https://ifttt.com/">IFTTT</a> and <a href="https://zapier.com/">Zapier</a> that will monitor your blog’s news feed and <strong>automatically post on your behalf</strong>.</p>

<p>Also, remember when I <a href="https://phoenixtrap.com/2021/06/15/blogging-outside-the-perl-bubble/#getablog">said above</a> that there were blogging sites with developer-centric communities? Even if your main blog isn’t on one of them, <strong>set up accounts and cross-post</strong>. I repost my articles on <a href="https://dev.to/mjgardner">Dev.to</a>, <a href="https://dzone.com/users/4518905/mjgardner.html">DZone</a>, and <a href="https://markjgardner.medium.com/">Medium</a>; all of these offer ways to import posts from your main site. One caveat: their importers don’t seem to be very smart when it comes to source code, so you may need to do a bit of editing and reformatting after import.</p>

<p>Lastly, I would be remiss if I didn’t mention the <a href="https://perlweekly.com/">Perl Weekly</a> newsletter. Every Monday a fresh batch of Perl content is sent to people’s inboxes and <strong>you could be part of it</strong>. <a href="//mailto:gabor@szabgab.com">Contact editor Gábor Szabó</a> about publishing links to your new blog.</p>

<h2>
  <a href="#step-4-repeat">
  </a>
  Step 4: Repeat
</h2>

<p>Remember that <strong>consistency builds trust from your audience</strong>. Make time to write regularly and publish posts as often as you can manage. I set a goal to publish at least once a week and have kept up this pace <a href="https://phoenixtrap.com/2021/01/23/debugging-a-web-application-in-perl/">since January of this year</a>. You can often find new topics as you monitor and participate in the social forums in which you’re promoting your blog, especially in the comments. <a href="https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/">Even negative comments can drive new topics.</a></p>

<p>Did this article inspire you to start a blog? Do you have more questions? <strong>Let me know in the comments below!</strong></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/4-steps-to-blogging-outside-the-perl-bubble-37ng</id>
    <published>2021-06-15T14:00:00Z</published>
    <updated>2021-06-15T14:00:00Z</updated>
    <category term="blogging"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#516 - Conference in the Cloud</title>
    <link rel="alternate" href="http://perlweekly.com/archive/516.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The highlight of last week was the Conference in the Cloud. It gave us the opportunity to meet and greet Perl and Raku fans from across the globe. On top of that, we got loads of quality talks by experts. Before I talk about anything else, let me thank and congratulate all the organisers and volunteers for such a successful event. I am personally impressed with the video quality of the live and recorded talks.</p>
<p>For me, I find the timing little bit odd as I am in the UK. The day started at 6:30pm British Summer Time, which is not ideal. At the end of a full day at $work, there is hardly any energy left to attend the talks live. But the best part wasthat the recorded talks were available on YouTube immediately. I find it convenient, as I can watch at my own time. Also I can fast-forward if I want to.</p>
<p>Please find below my personal favourites in no particular order.</p>
<p>1. <a href="https://www.youtube.com/watch?v=fKqxdTbGxYY">perlimports or "Where did that symbol come from?" by Olaf Alders</a></p>
<p>2. <a href="https://www.youtube.com/watch?v=aDUxaBsDcDg">Local dev setup for a complex app using docker-compose by Thomas Klausner</a></p>
<p>3. <a href="https://www.youtube.com/watch?v=go7Ru3QQYYs">Introduction to Perl Data Types by William N. Braswell, Jr.</a></p>
<p>4. <a href="https://www.youtube.com/watch?v=FO5ift28RyE">Rummaging in the clOOset by Curtis Poe</a></p>
<p>5. <a href="https://www.youtube.com/watch?v=kxMfnk3fQlY">Life after Perl (and Raku) by Peter Sergeant</a></p>
<p>6. <a href="https://www.youtube.com/watch?v=FlGpiS39NMY">What's new in Perl? by Ricardo Signes</a></p>
<p>7. <a href="https://www.youtube.com/watch?v=Kc_bP73xNyM">Perl's Amazing Time Machine by Paul Evans</a></p>
<p>8. <a href="https://www.youtube.com/watch?v=ZY8HrAL755M">Valiant - Heroic validations for Moo and DBIC classes by John Napiorkowski</a></p>
<p>9. <a href="https://www.youtube.com/watch?v=y2_bqfLUHDM">Our shared vision of Perl by Andrew Solomon</a></p>
<p>10. <a href="https://www.youtube.com/watch?v=En49kYRDbsg">Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion by Zaki Mughal</a></p>
<p>There are plenty more to watch later. You can find the complete list <a href="https://www.youtube.com/c/YAPCNA/videos">here</a>.</p>
<p>Enjoy the rest of the newsletter and please stay safe.</p></div>
    </content>
    <id>http://perlweekly.com/archive/516.html</id>
    <published>2021-06-14T10:00:00Z</published>
    <updated>2021-06-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Create a lexical warning that can be turned on and off with the "warnings" pragma.</title>
  <summary type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></summary>
  <updated>2021-06-14T08:10:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/create-warning"/>  <id>https://perlmaven.com/create-warning</id>
  <content type="html"><![CDATA[<p>
Since the release of Perl 5.6 in 2000 we can and should use the <span class="inline_code">warnings</span> pragma.
It allows the turning on and off of warnings in lexical blocks, that is withing any set of curly praces.
<p>
It also allows us to create our own warnings together with our own warning categories.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Evolving a Sequence with a Functional Genome: The Weekly Challenge 116</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/13#pwc116" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to split the given number such that the 
difference between two consecutive numbers is always 1, and it shouldn't have a leading 0.
Print the given number if it impossible to split the number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use AI::Genetic;

use constant THRESHOLD =&gt; 0;
use constant NUMBERS   =&gt; "1234";

sub no_op{
    my($x) = @_;
    return (caller(0))[3] if !defined($x);
    return $x;
}

sub get_1{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 1);
}

sub get_2{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 2);
}

sub get_3{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 3);
}

sub get_4{
    my($s) = @_;
    return (caller(0))[3] if !defined($s);
    return substr($s, 0, 4);
}

sub fitness{
    my($genes) = @_;
    my $s = NUMBERS;
    my $fitness = -1 * (length($s) -1);
    my @operands;
    for my $gene (@{$genes}){
        if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
            push @operands, $gene-&gt;($s);
            return -1 * NUMBERS if length($s) &lt; $i;
            $s = substr($s, $i) if length($s) &gt;= $i;
        }
    }
    $s = NUMBERS;
    for(my $i = 0; $i &lt; @operands - 1; $i++){
        if($operands[$i] == ($operands[$i + 1] - 1)){
            $fitness++;
            my $chars = length($operands[$i]);
            $s = substr($s, $chars);
        }
    }
    if($operands[@operands - 1] &amp;&amp; $operands[@operands - 2]){
    if($operands[@operands - 1] == ($operands[@operands - 2] + 1)){
        my $chars = length($operands[@operands - 1]);
        $s = substr($s, $chars);
    }
    }
    $fitness *= length($s);
    return $fitness;
}

sub terminate{
    my($aig) = @_;
    my $top_individual = $aig-&gt;getFittest();
    if($top_individual-&gt;score == THRESHOLD){
        my $genes = $top_individual-&gt;genes();
        my $s = NUMBERS;
        my @operands;
        for my $gene (@{$genes}){
            if(my($i) = $gene-&gt;() =~ m/get_([1-4])/){
                push @operands, $gene-&gt;($s);
                $s = substr($s, $i);
            }
        }
        print join(",", @operands) . "\n";
        return true;
    }
    print NUMBERS . "\n";
    return true;
}

MAIN:{
    my $aig = new AI::Genetic(
        -fitness    =&gt; \&amp;fitness,
        -type       =&gt; "listvector",
        -population =&gt; 50000,
        -crossover  =&gt; 0.9,
        -mutation   =&gt; 0.1,
        -terminate  =&gt; \&amp;terminate,
    );
    my $genes = [];
    for (0 .. 7){
        push @{$genes}, [\&amp;get_1, \&amp;get_2, \&amp;get_3, \&amp;get_4, \&amp;no_op],
    }
    $aig-&gt;init(
        $genes
    );
    $aig-&gt;evolve("tournamentUniform", 1000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1,2,3,4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is slightly similar to the 
&lt;a href="https://adamcrussell.livejournal.com/15036.html"&gt;Only 100, please&lt;/a&gt; task from Challenge
044. In that previous task we are given a string of numbers and asked to split the string
with only + or - operations to arrive at a value of 100. Here we must similarly split
the string of numbers, but the criteria is different. Here we need to assemble the string
into numbers that differ only by 1, if possible.&lt;/p&gt;

&lt;p&gt;As done in that previous challenge we use a not so brutish, yet forceful, approach 
using &lt;a href="https://metacpan.org/pod/AI::Genetic"&gt;AI::Genetic&lt;/a&gt;. In this way our program learns
the best way to achieve our goal given a fitness function which allows it to evaluate
different splitting patterns and smartly choose the next attempt.&lt;/p&gt;

&lt;p&gt;While avoiding evaluating a great many possible combinations, I must admit to a certain 
brutishness here in that I did not spend much time tuning the parameters used. Also, 
the &lt;code&gt;get_&lt;/code&gt; functions will not scale very well for very long strings. It would be possible
to generate these functions in a loop using a functional programming style currying 
approach dependent on the length of the input string. Imagine an input of 1 followed by 
999 0s, then a 1 followed by 998 0s and final 1. This use of AI::Genetic would certainly 
work with such an input given proper &lt;code&gt;get_&lt;/code&gt; functions, very many of which would be quickly
be lost in the evolutionary dust, so to speak.&lt;/p&gt;

&lt;p&gt;The use of function references for the genes is not something I am aware of outside of my
own usage. I like to call this a &lt;em&gt;Functional Genome&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a number $N &gt;= 10. Write a script to find out if the given number $N is 
such that sum of squares of all digits is a perfect square. Print 1 if it is otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;

sub sum_squares{
    my($n) = @_;
    my @digits = split(//, $n);
    my $sum = 0;
    map { $sum += ($_ ** 2) } @digits;
    return (ceil(sqrt($sum)) == floor(sqrt($sum)));
}

MAIN:{
    my($N);
    $N = 34;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 50;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
    $N = 52;
    if(sum_squares($N)){
        print "1\n";
    }
    else{
        print "0\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This task is well suited for Perl. We can make quick work of what might be a heavier lift
in other languages by &lt;code&gt;split&lt;/code&gt;-ting the number into individual digits and then using a 
&lt;code&gt;map&lt;/code&gt; to perform the summing of the squares. The &lt;a href="https://perldoc.perl.org/POSIX"&gt;POSIX&lt;/a&gt;
module provides convenient &lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt; functions for checking to see if the result
is a perfect square.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-116/"&gt;Challenge 116&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-044/"&gt;Challenge 044 | Only 100, please&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc116</id>
    <published>2021-06-13T21:17:00-04:00</published>
    <updated>2021-06-13T21:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1598123085089261731</id>
    <published>2021-06-12T16:40:00.000+02:00</published>
    <updated>2021-06-12T16:40:41.587+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlv) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.068' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.068&lt;/strong&gt; on 2021-06-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.067 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301004&lt;/strong&gt; on 2021-06-06&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 0.301003 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.22&lt;/strong&gt; on 2021-06-10&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 10.21 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.29&lt;/strong&gt; on 2021-06-07&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.28 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJATRIA/Mojolicious-Plugin-Authentication-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Authentication&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A plugin to make authentication a bit easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2021-06-10&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.36 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/POE-Component-IRC-6.92' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;POE::Component::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A fully event-driven IRC client module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.92&lt;/strong&gt; on 2021-06-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.91 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9006&lt;/strong&gt; on 2021-06-11&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9005 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.073' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.073&lt;/strong&gt; on 2021-06-07&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.072 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1598123085089261731/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlv-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1598123085089261731"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1598123085089261731"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlv-8-great-cpan-modules-released.html" title="(cccxlv) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7513320527226951476</id>
    <published>2021-06-12T16:35:00.003+02:00</published>
    <updated>2021-06-12T16:35:28.594+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxi) metacpan weekly report - Perl::LanguageServer</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 149&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/12 14:33:40 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased::factory" target="_blank"&gt;aliased::factory&lt;/a&gt; - shorter versions of a class tree's constructors&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alt::common::sense::TOBYINK" target="_blank"&gt;Alt::common::sense::TOBYINK&lt;/a&gt; - provides a clean-room reimplementation of common::sense&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Acmeman" target="_blank"&gt;App::Acmeman&lt;/a&gt; - manages ACME certificates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Env" target="_blank"&gt;App::Env&lt;/a&gt; - manage application specific environments&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pathed" target="_blank"&gt;App::pathed&lt;/a&gt; - munge the Bash PATH environment variable&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Arguments" target="_blank"&gt;Arguments&lt;/a&gt; - Perl subroutine type-checking&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argv" target="_blank"&gt;Argv&lt;/a&gt; - Provide an OO interface to an arg vector&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Overload" target="_blank"&gt;Attribute::Overload&lt;/a&gt; - Attribute that makes overloading easier&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Property" target="_blank"&gt;Attribute::Property&lt;/a&gt; - Easy lvalue accessors with validation. ($foo-&amp;gt;bar = 42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::SubName" target="_blank"&gt;Attribute::SubName&lt;/a&gt; - Naming anonymous subroutines via attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::TieClasses" target="_blank"&gt;Attribute::TieClasses&lt;/a&gt; - Attribute wrappers for CPAN Tie classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beekeeper" target="_blank"&gt;Beekeeper&lt;/a&gt; - Framework for building applications with a microservices architecture&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Boulder" target="_blank"&gt;Boulder&lt;/a&gt; - An API for hierarchical tag/value structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Builder" target="_blank"&gt;Builder&lt;/a&gt; - Build XML, HTML, CSS and other outputs in blocks&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/callee" target="_blank"&gt;callee&lt;/a&gt; - support recursive anonymous functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cfwp::fio" target="_blank"&gt;Cfwp::fio&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Complex" target="_blank"&gt;Class::Accessor::Complex&lt;/a&gt; - Arrays, hashes, booleans, integers, sets and more&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Dynamic" target="_blank"&gt;Class::Dynamic&lt;/a&gt; - Rudimentary support for coderefs in @ISA&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Factory::Enhanced" target="_blank"&gt;Class::Factory::Enhanced&lt;/a&gt; - More functionality for Class::Factory&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::SingletonMethod" target="_blank"&gt;Class::SingletonMethod&lt;/a&gt; - Extend individual objects with additional methods&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Std::Slots" target="_blank"&gt;Class::Std::Slots&lt;/a&gt; - Provide signals and slots for standard classes.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Wrap" target="_blank"&gt;Class::Wrap&lt;/a&gt; - Proxy an entire class's methods.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Closure::Loop" target="_blank"&gt;Closure::Loop&lt;/a&gt; - redo, last, next for closure based loops&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Container" target="_blank"&gt;Data::Container&lt;/a&gt; - Base class for objects containing a list of items&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Domain" target="_blank"&gt;Data::Domain&lt;/a&gt; - Data description and validation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DRef" target="_blank"&gt;Data::DRef&lt;/a&gt; - Delimited-key access to complex data structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Inherited" target="_blank"&gt;Data::Inherited&lt;/a&gt; - Hierarchy-wide accumulation of list and hash results&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Miscellany" target="_blank"&gt;Data::Miscellany&lt;/a&gt; - Collection of miscellaneous subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Object::AutoWrap" target="_blank"&gt;Data::Object::AutoWrap&lt;/a&gt; - Autogenerate accessors for R/O object data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Pack" target="_blank"&gt;Data::Pack&lt;/a&gt; - Pack data structures so only real content remains&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::PathSimple" target="_blank"&gt;Data::PathSimple&lt;/a&gt; - Navigate and manipulate data structures using paths&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Semantic" target="_blank"&gt;Data::Semantic&lt;/a&gt; - Common API for data with semantics attached to them&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::SmartMunge" target="_blank"&gt;Data::SmartMunge&lt;/a&gt; - Munge scalars, hashes and arrays in flexible ways&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Template" target="_blank"&gt;Data::Template&lt;/a&gt; - Generate data structures from templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Decision::Depends" target="_blank"&gt;Decision::Depends&lt;/a&gt; - Perform actions based upon file dependencies&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::MD6" target="_blank"&gt;Digest::MD6&lt;/a&gt; - Perl interface to the MD6 Algorithm&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/fields::aliased" target="_blank"&gt;fields::aliased&lt;/a&gt; - create aliases for object fields&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Attributes" target="_blank"&gt;File::Attributes&lt;/a&gt; - Manipulate file metadata&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Attributes::Recursive" target="_blank"&gt;File::Attributes::Recursive&lt;/a&gt; - Inherit file attributes from parent&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Upwards" target="_blank"&gt;File::Find::Upwards&lt;/a&gt; - Look for a file in the current directory and upwards&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Attribute" target="_blank"&gt;Getopt::Attribute&lt;/a&gt; - Attribute wrapper for Getopt::Long&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Inherited" target="_blank"&gt;Getopt::Inherited&lt;/a&gt; - Handling inherited command-line options&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/import" target="_blank"&gt;import&lt;/a&gt; - import all modules with the same package prefix, aliasing it away.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer::Zim::Lexical" target="_blank"&gt;Importer::Zim::Lexical&lt;/a&gt; - Import functions as lexical subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/like" target="_blank"&gt;like&lt;/a&gt; - Declare support for an interface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Loop::Control" target="_blank"&gt;Loop::Control&lt;/a&gt; - FIRST and NEXT functions for loops&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mic" target="_blank"&gt;Mic&lt;/a&gt; - Simplified OOP with emphasis on modularity and loose coupling.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Changes" target="_blank"&gt;Module::Changes&lt;/a&gt; - Machine-readable Changes file&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Changes::ADAMK" target="_blank"&gt;Module::Changes::ADAMK&lt;/a&gt; - Parse a traditional Changes file (as ADAMK interpretes it)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::BigIP" target="_blank"&gt;Net::BigIP&lt;/a&gt; - REST interface for BigIP&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Accessor" target="_blank"&gt;Object::Accessor&lt;/a&gt; - Per object accessors&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Extend" target="_blank"&gt;Object::Extend&lt;/a&gt; - add and override per-object methods&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/once" target="_blank"&gt;once&lt;/a&gt; - Execute code only once throughout the program's lifetime&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/overload::reify" target="_blank"&gt;overload::reify&lt;/a&gt; - Provide named methods for inherited overloaded operators&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Export" target="_blank"&gt;Perl6::Export&lt;/a&gt; - Implements the Perl 6 'is export(...)' trait&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/pkg" target="_blank"&gt;pkg&lt;/a&gt; - transparently use packages and inner packages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Property::Lookup" target="_blank"&gt;Property::Lookup&lt;/a&gt; - Object property lookup across multiple layers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/rubyisms" target="_blank"&gt;rubyisms&lt;/a&gt; - Steal some features from Ruby&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Soo" target="_blank"&gt;Soo&lt;/a&gt; - Simple object oriented system for Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::AliasedUnderscore" target="_blank"&gt;Sub::AliasedUnderscore&lt;/a&gt; - transform a subroutine that operates on $_ into&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Become" target="_blank"&gt;Sub::Become&lt;/a&gt; - Syntactic sugar to allow a sub to replace itself&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::CharacterProperties" target="_blank"&gt;Sub::CharacterProperties&lt;/a&gt; - Support for user-defined character properties&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Documentation" target="_blank"&gt;Sub::Documentation&lt;/a&gt; - Collect documentation for subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Replace" target="_blank"&gt;Sub::Replace&lt;/a&gt; - Replace subroutines in packages with controlled effects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/uninit" target="_blank"&gt;uninit&lt;/a&gt; - Warn about uninitialized variables&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UNIVERSAL::ref" target="_blank"&gt;UNIVERSAL::ref&lt;/a&gt; - Turns ref() into a multimethod&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Mystic" target="_blank"&gt;Var::Mystic&lt;/a&gt; - Monitor your state, tracked in colour&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version::Limit" target="_blank"&gt;version::Limit&lt;/a&gt; - Perl extension for fine control of permitted versions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Shortcut" target="_blank"&gt;Win32::Shortcut&lt;/a&gt; - Perl Module to deal with Windows Shortcuts&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/with" target="_blank"&gt;with&lt;/a&gt; - Lexically call methods with a default object.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased" target="_blank"&gt;aliased&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alt" target="_blank"&gt;Alt&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ElasticSearch::Utilities" target="_blank"&gt;App::ElasticSearch::Utilities&lt;/a&gt; (+2=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/as" target="_blank"&gt;as&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Handlers" target="_blank"&gt;Attribute::Handlers&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Types" target="_blank"&gt;Attribute::Types&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Brickyard" target="_blank"&gt;Brickyard&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Constructor" target="_blank"&gt;Class::Accessor::Constructor&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Generate" target="_blank"&gt;Class::Generate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Mix" target="_blank"&gt;Class::Mix&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Monkey" target="_blank"&gt;Class::Monkey&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Null" target="_blank"&gt;Class::Null&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::ReturnValue" target="_blank"&gt;Class::ReturnValue&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Helpers" target="_blank"&gt;CLI::Helpers&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Argon2" target="_blank"&gt;Crypt::Argon2&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::URandom" target="_blank"&gt;Crypt::URandom&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Find" target="_blank"&gt;Data::Find&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Focus" target="_blank"&gt;Data::Focus&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Reach" target="_blank"&gt;Data::Reach&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DhMakePerl" target="_blank"&gt;DhMakePerl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect::Simple" target="_blank"&gt;Expect::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ExtAttr" target="_blank"&gt;File::ExtAttr&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filter" target="_blank"&gt;Filter&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Inflator" target="_blank"&gt;Hash::Inflator&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::SharedMem" target="_blank"&gt;Hash::SharedMem&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Type" target="_blank"&gt;Hash::Type&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Box" target="_blank"&gt;Import::Box&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer::Zim" target="_blank"&gt;Importer::Zim&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::AIO" target="_blank"&gt;IO::AIO&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/latest" target="_blank"&gt;latest&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Categorize" target="_blank"&gt;List::Categorize&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MARC::Record" target="_blank"&gt;MARC::Record&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=85)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=46)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=319)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TaggedAttributes" target="_blank"&gt;MooX::TaggedAttributes&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace" target="_blank"&gt;namespace&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/nonsense" target="_blank"&gt;nonsense&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nothing::Tiny" target="_blank"&gt;Nothing::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Result" target="_blank"&gt;Object::Result&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/optimize" target="_blank"&gt;optimize&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/optimizer" target="_blank"&gt;optimizer&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::WorkUnit" target="_blank"&gt;Parallel::WorkUnit&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=378)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Export::Attrs" target="_blank"&gt;Perl6::Export::Attrs&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Gather" target="_blank"&gt;Perl6::Gather&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Rules" target="_blank"&gt;Perl6::Rules&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Slurp" target="_blank"&gt;Perl6::Slurp&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+3=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Progress::Any" target="_blank"&gt;Progress::Any&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quantum::Superpositions" target="_blank"&gt;Quantum::Superpositions&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Properties" target="_blank"&gt;Scalar::Properties&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scope::With" target="_blank"&gt;Scope::With&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::Object" target="_blank"&gt;Set::Object&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell" target="_blank"&gt;Shell&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Perl" target="_blank"&gt;Shell::Perl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::Lite" target="_blank"&gt;SOAP::Lite&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/StreamFinder" target="_blank"&gt;StreamFinder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Genius" target="_blank"&gt;Sub::Genius&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword" target="_blank"&gt;Term::ReadPassword&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/true" target="_blank"&gt;true&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::TinyX::Facets" target="_blank"&gt;Type::TinyX::Facets&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Pairs" target="_blank"&gt;Var::Pairs&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Variable::Magic" target="_blank"&gt;Variable::Magic&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Version::Next" target="_blank"&gt;Version::Next&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::RSS" target="_blank"&gt;XML::RSS&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7513320527226951476/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7513320527226951476"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7513320527226951476"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxi-metacpan-weekly-report.html" title="(cdlxxi) metacpan weekly report - Perl::LanguageServer"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#515 - Events and blog posts</title>
    <link rel="alternate" href="http://perlweekly.com/archive/515.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>As I can see <a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the cloud</a> starts tomorrow. I am a bit confused as don't remember a lot of promotion of the event.</p>
<p>Some people complain that the content created by the Perl Weekly Challenge has flooded the Perl Weekly Newsletter. I'd say if there was more Perl content outside of the PWC that we can share then we could consider reducing the amount of space the PWC takes up.</p>
<p>BTW that reminds me, I think the <a href="https://perlweekly.com/events.html">events</a> page and the events section at the bottom of the newsletter is shrinkig as the event organizers rarely send updates. I guess having these links did not bring them visitors.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/515.html</id>
    <published>2021-06-07T10:00:00Z</published>
    <updated>2021-06-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 115</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/05#pwc115" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of strings. Write a script to find out if the given strings can be
chained to form a circle. Print 1 if found otherwise 0. A string $S can be put before 
another string $T in circle if the last character of $S is same as first character of $T.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub build_graph{
    my @words;
    my %first_letter_name;
    my $graph = new Graph();
    while(my $s = &lt;DATA&gt;){
        chomp($s);
        my $first_letter = substr($s, 0, 1);
        if($first_letter_name{$first_letter}){
            push @{$first_letter_name{$first_letter}}, $s;
        }
        else{
            $first_letter_name{$first_letter} = [$s];
        }
        push @words, $s;
    }
    for my $word (@words){
        $graph-&gt;add_vertex($word) if !$graph-&gt;has_vertex($word);
        my $child_nodes = $first_letter_name{substr($word, -1)};
        for my $n (@{$child_nodes}){
            $graph-&gt;add_vertex($n) if !$graph-&gt;has_vertex($n);
            $graph-&gt;add_weighted_edge($word, $n, (-1 * length($n))) if !$graph-&gt;has_edge($word, $n);
            $graph-&gt;delete_edge($word, $n) if $graph-&gt;has_a_cycle();
        }
    }
    return $graph;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ ]" if @a == 1;
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]" if @a &gt; 1;
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = build_graph();
    my @cc = $graph-&gt;weakly_connected_components();
    print "1\n" if @cc == 1;
    print "0\n" if @cc != 1;
    display_graph($graph);
}

__DATA__
ab
bea
cd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
+----+     +-----+
| ab | ==&gt; | bea |
+----+     +-----+
+----+
| cd | ==&gt;
+----+
$ perl perl/ch-1.pl
1
+-----+     +-----+     +----+
| dea | ==&gt; | abc | ==&gt; | cd |
+-----+     +-----+     +----+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is very similar to the 
&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt; task from Challenge
025. This task is actually a part of that previous challenge in that here we do not need
to compute the longest possible chain of strings; we just need to confirm that the chain
exists.&lt;/p&gt;

&lt;p&gt;The approach here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read in the words and construct the directed graph
&lt;/li&gt;
&lt;li&gt;check to see that the number of &lt;em&gt;connected components&lt;/em&gt; is one. If so, print 1. Otherwise
print 0.
&lt;/li&gt;
&lt;li&gt;display the graph (an optional data visualization step)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function used to determine the number of connected components is 
&lt;code&gt;weakly_connected_components()&lt;/code&gt;. This is because the chain is constructed as a directed
graph and the idea of a connected component is defined for undirected graphs. Weakly
connected components are determined by whether or not the nodes are connected if we ignore
the direction of the edges. This is what we want for our use case here, as opposed to
&lt;em&gt;strongly connected components&lt;/em&gt;. To determine strongly connected components we would
need bi-directional edges for each link in the chain. No need to overcomplicate this with
extra edges...the desired result is obtained just fine as is!&lt;/p&gt;

&lt;p&gt;In the example output the first run shows two connected components, therefor no chain
exists. In the second output the chain is shown, there is one connected component.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of positive integers (0-9), single digit. Write a script to find the
largest multiple of 2 that can be formed from the list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub largest_multiple_2{
    my @numbers = @_;
    return unless grep { $_ % 2 == 0 } @numbers;
    my @sorted = sort {$b &lt;=&gt; $a} @numbers;
    if(@sorted &gt;= 2){
        my $ultima = @sorted[@sorted - 1];
        if($ultima % 2 != 0){
            my $swap_index = -1;
            for(my $i = @sorted - 2; $i &gt;= 0; $i--){
                $swap_index = $i if $sorted[$i] % 2 == 0;
                last if $swap_index &gt; 0;
            }
            $sorted[@sorted - 1] = $sorted[$swap_index];
            $sorted[$swap_index] = $ultima;
        }
    }
    return join("", @sorted);
}

MAIN:{
    my @N;
    @N = (1, 0, 2, 6);
    print largest_multiple_2(@N) . "\n";
    @N = (1, 4, 2, 8);
    print largest_multiple_2(@N) . "\n";
    @N = (4, 1, 7, 6);
    print largest_multiple_2(@N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6210
8412
7614
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Suppose we did not have the "multiple of 2" restriction and instead had to arrange a list
of numbers to have maximal value when concatenated together. The solution, then, would be
to sort the numbers in descending order and concatenate the digits in this sorted order.&lt;/p&gt;

&lt;p&gt;Here we can still use that same logic but more care is needed. &lt;/p&gt;

&lt;p&gt;First, let's remind ourselves that we can check to see if any number is a multiple of 2 by
checking if it's rightmost digit is a multiple of 2 (including 0).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to make sure we have at least one digit which is a multiple of 2. If not, then
there is no need to continue.
&lt;/li&gt;
&lt;li&gt;Sort the numbers, but then inspect the final digit in descending order. Is it a multiple
of 2? If so, then we are done!
&lt;/li&gt;
&lt;li&gt;If the final digit is not a multiple of 2 then search the sorted list starting from the
final digit and working "upwards". We had previously made sure we had at least one 
multiple of 2 so we are certain to find one. When we find it we need to swap it with the 
final digit to insure that the entire number itself is a multiple of 2.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115/"&gt;Challenge 115&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/WeaklyConnectedComponent.html"&gt;Weakly Connected Component&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc115</id>
    <published>2021-06-05T23:34:00-04:00</published>
    <updated>2021-06-05T23:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>RakuAST Grant Report for May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/20201-05-rakuast-grant-report"/>
  <id>tag:news.perlfoundation.org,2021-06-02:/post/20201-05-rakuast-grant-report</id>
  <published>2021-06-02T09:13:04</published>
  <updated>2021-06-02T09:13:04</updated>
  <summary>
  <![CDATA[
     Regarding his RakuAST Grant, Jonathan Worthington reports some awesome progress for May 2021. Side note: due to a bug in the Markdown rendering in this blog post, the less-than and greater-than characters in code blocks are double-encoded. Please refer to this gist for a correctly rendered version. Anyway, here is Jonathan's report: During May I focused on filling out the regex part of RakuAST, with the result that the majority 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding his RakuAST Grant, Jonathan Worthington reports some awesome progress for May 2021.</p>

<p>Side note: due to a bug in the Markdown rendering in this blog post, the less-than and greater-than characters in code blocks are double-encoded. Please refer <a href="https://gist.github.com/jnthn/891c19667c88ba1efb21ccbae36de616">to this gist</a> for a correctly rendered version.</p>

<p>Anyway, here is Jonathan's report:</p>

<hr />

<p>During May I focused on filling out the regex part of RakuAST, with
the result that the majority of the constructs found in Raku regexes now
have AST nodes and can be compiled by the RakuAST-based compiler
frontend. Of note, I did AST nodes for:</p>

<ul>
<li>Declarations in regexes (<code>:my $foo</code>)</li>
<li>Code-based assertions (<code>and</code>)</li>
<li>The <code>\e</code>, <code>\f</code>, <code>\h</code>, <code>\r</code>, <code>\t</code>, <code>\v</code>, and <code>\0</code> escape sequences</li>
<li>Character classes, including the common &lt;[a..z_]&gt; style,
Unicode properties (<code>&lt;:l&gt;</code>), rules <code>&amp;lt;+rulename&amp;gt;</code>, and the
combination of these using <code>+</code> and <code>-</code></li>
<li>Regex code evaluation (<code>&amp;lt;{ ... }&amp;&amp;gt;</code>)</li>
<li>Variable interpolation, both as data (<code>$x</code>) and in an assertion syntax
as code (<code>&amp;lt;$code&amp;gt;</code>)</li>
<li>Internal modifiers (<code>:i</code>, <code>:m</code>, etc.)</li>
<li>Calls to lexical rules (<code>&amp;lt;&amp;rulename&amp;gt;</code>), including passing of
arguments</li>
</ul>

<p>Furthermore, I corrected a mistake in handling of backtracking
modifiers, and added a missing action method in the new compiler
frontend that blocked regexes passing arguments from compiling.</p>

<p>Away from the regex language itself, I:</p>

<ul>
<li>Implemented a mechanism for an AST node to specify it would like
to participate in <code>CHECK</code> time and report problems</li>
<li>Implemented construction and collection of typed exceptions,
both at CHECK time, but also so that the new compiler frontend
can produce them. Probably some things that are done in
the compiler frontend might want to become <code>CHECK</code>-time things
in the AST nodes, since they can happen in synthetically
constructed programs too. Those that are purely syntactic are
often not possible to represent in the AST.</li>
<li>Added RakuAST nodes for <code>token</code>/<code>rule</code> declarations, so that
grammars can now be expressed and compiled in RakuAST (without
protoregexes so far, however)</li>
<li>Correctly set the scope on routine declarations</li>
<li>Added missing operator properties for bitshifts, so they can be
compiled</li>
</ul>

<p>All of this work won a rather underwhelming 17 extra fully passing
spectest files; as has been previously noted, the test files are
quite good at depending on a lot of language features.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal Recap: May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_recap_may_2021"/>
  <id>tag:news.perlfoundation.org,2021-06-01:/post/grant_proposal_recap_may_2021</id>
  <published>2021-06-01T21:02:55</published>
  <updated>2021-06-01T21:02:55</updated>
  <summary>
  <![CDATA[
     The Grants Committee has received the following grant proposals for the May 2021 round: Raku Dispatch and Compiler Improvements Persistent Data Structures for Raku Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities. Review the proposals at their individual links and please comment there by June 6, 2021. The Committee members will start the voting process following that and the 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has received the following grant proposals for the May 2021 round:
* <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">Raku Dispatch and Compiler Improvements</a>
* <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Persistent Data Structures for Raku</a></p>

<p>Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities.</p>

<p>Review the proposals at their individual links and please comment there by June 6, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – May 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/06/01/list-of-new-cpan-distributions-may-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/0.07-TRIAL2">0.07-TRIAL2</a></td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>0</td>
<td>0</td>
<td>Parse and format MySQL dates and times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/0.07-TRIAL3">0.07-TRIAL3</a></td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>0</td>
<td>0</td>
<td>Parse and format MySQL dates and times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-HTMLTable">Acme-CPANModules-HTMLTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that generate HTML tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-ManagingMultipleRepositories">Acme-CPANModules-ManagingMultipleRepositories</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Managing multiple repositories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-PERLANCAR-Dummy">Acme-CPANModules-PERLANCAR-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A dummy Acme::CPANModules list for testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModulesBundle-Import-MJGARDNER">Acme-CPANModulesBundle-Import-MJGARDNER</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acme::CPANModules::* created from MJGARDNER's posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CoC-Dice">Acme-CoC-Dice</a></td>
<td><a href="https://metacpan.org/author/BEDOSHI">BEDOSHI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Dice role module for CoC TRPG.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-C">Acme-Prereq-C</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Module for testing CPAN module prerequisites </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-D">Acme-Prereq-D</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-E">Acme-Prereq-E</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-F">Acme-Prereq-F</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>v1.0.0</td>
<td>v2.0.0</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-Itself">Acme-Prereq-Itself</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-Regress">Acme-Prereq-Regress</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>5.00</td>
<td>3.00</td>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-WCSLIB">Alien-WCSLIB</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a really awesome library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libsdl2">Alien-libsdl2</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1.0</td>
<td>1.02</td>
<td>Find or download and install libsdl2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV">App-Bin4TSV</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.011</td>
<td>0.340</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPAN-Get">App-CPAN-Get</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for getting of dist from CPAN.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPANModuleSite">App-CPANModuleSite</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>v0.0.9</td>
<td>Automatically create a web site for a CPAN module.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-RcloneUtils">App-RcloneUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-XScreenSaver-DBus">App-XScreenSaver-DBus</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1.0.0</td>
<td>1.0.3</td>
<td>main application class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ansiecho">App-ansiecho</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Command to produce ANSI terminal code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cal-idn">App-cal-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.134</td>
<td>0.136</td>
<td>Display Indonesian calendar on the command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cpanm-cpanmodules">App-cpanm-cpanmodules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Install all modules listed in an Acme::CPANModules::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cpanm-task">App-cpanm-task</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Install Task modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-genpw-ind">App-genpw-ind</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>0.007</td>
<td>Generate password from combination of Indonesian words</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sitelenmute">App-sitelenmute</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
<td>3.02</td>
<td>a static image gallery creator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive">Archive-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Modern Perl bindings to libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Extract">Archive-Libarchive-Extract</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>An archive extracting mechanism (using libarchive)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Peek">Archive-Libarchive-Peek</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Peek into archives without extracting them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Objectify">Array-Objectify</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>objectify an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Number-Prime-First1000">ArrayData-Number-Prime-First1000</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of first 1000 prime numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Word-ID-KBBI">ArrayData-Word-ID-KBBI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Indonesian words from Kamus Besar Bahasa Indonesia</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayDataBundle-Char-Latin1">ArrayDataBundle-Char-Latin1</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>ArrayData::* modules that contain Latin1 characters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayDataRole-BinarySearch-LinesInHandle">ArrayDataRole-BinarySearch-LinesInHandle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Role to be mixed in by ArrayData::* class that puts the elements as lines in a filehandle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Data-1D">Bin-Data-1D</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.120</td>
<td>0.130</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-File-Dir">Bin-File-Dir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.202</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-File-Time">Bin-File-Time</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.210</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Gen-Rand">Bin-Gen-Rand</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Li">Bin-Li</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.114</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Subtotal">Bin-Subtotal</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.200</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-TSV-Conv">Bin-TSV-Conv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.300</td>
<td>0.310</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-TSV-Util">Bin-TSV-Util</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Text-Color-Plus">Bin-Text-Color-Plus</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.051</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bundle-Bin4TSV">Bundle-Bin4TSV</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.330</td>
<td>0.340</td>
<td>Bundle related to "Bin4TSV"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Rclone">Complete-Rclone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Completion routines related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Contextual-Diag">Contextual-Diag</a></td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>0.01</td>
<td>0.04</td>
<td>diagnosing perl context</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIC-Violator">DBIC-Violator</a></td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>0.900</td>
<td>0.900</td>
<td>Violate DBIC's most private moments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-Storage-DBI-mysql-Retryable">DBIx-Class-Storage-DBI-mysql-Retryable</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>MySQL-specific DBIC storage engine with retry support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Connector-Retry-MySQL">DBIx-Connector-Retry-MySQL</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>MySQL-specific DBIx::Connector with retry support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-Syntax-ParamKeywords">Dancer2-Plugin-Syntax-ParamKeywords</a></td>
<td><a href="https://metacpan.org/author/CROMEDOME">CROMEDOME</a></td>
<td>0.1.0</td>
<td>0.2.0</td>
<td>Parameter keywords for the lazy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Dataset-ChordProgressions">Data-Dataset-ChordProgressions</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0108</td>
<td>Provide access to hundreds of possible chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-AS3935">Device-Chip-AS3935</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for AS3935</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-BorderStyle">Dist-Zilla-Plugin-BorderStyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building distribution that has BorderStyle modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DjVu-Detect">DjVu-Detect</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Detect DjVu file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FFI-C-Stat">FFI-C-Stat</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Object-oriented FFI interface to native stat and lstat</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Faster-Maths">Faster-Maths</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>make mathematically-intense programs faster</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Function-Runner">Function-Runner</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Define functions at a higher level and run them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Entities">Game-Entities</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.003</td>
<td>A simple entity registry for ECS designs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Games-Simutrans-Pakset">Games-Simutrans-Pakset</a></td>
<td><a href="https://metacpan.org/author/WLINDLEY">WLINDLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Represents an entire Pakset for the Simutrans game</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-Auto-Long-Usage">Getopt-Auto-Long-Usage</a></td>
<td><a href="https://metacpan.org/author/KSTRZEROK">KSTRZEROK</a></td>
<td>0.01</td>
<td>0.03</td>
<td>generate usage strings from Getopt::Long specs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashData">HashData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Specification for HashData::*, modules that contains hash data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashDataBundle-CPAN">HashDataBundle-CPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>HashData::* modules related to CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashDataRoles-Standard">HashDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Standard set of roles for HashData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IO-BufferedSelect2">IO-BufferedSelect2</a></td>
<td><a href="https://metacpan.org/author/CDRAKE">CDRAKE</a></td>
<td>1.1</td>
<td>1.1</td>
<td>Line-buffered select interface with stream-reading facility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-ger-Format-HashArgs">Log-ger-Format-HashArgs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>0.005</td>
<td>Log using hash arguments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MIDI-Bassline-Walk">MIDI-Bassline-Walk</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0207</td>
<td>Generate walking basslines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MakeWithPerl">MakeWithPerl</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210528</td>
<td>20210534</td>
<td>Make with Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Random-Free">Math-Random-Free</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>0.2.0</td>
<td>Free drop-in replacement for Math::Random</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-CHI-Route">Mojolicious-Plugin-CHI-Route</a></td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>0.04</td>
<td>0.05</td>
<td>Route Caching in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-DigitalOcean">Net-Async-DigitalOcean</a></td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>0.03</td>
<td>0.04</td>
<td>Async client for DigitalOcean REST APIv2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-BigIP">Net-BigIP</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.2</td>
<td>0.2</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Telnet2">Net-Telnet2</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>3.04_1</td>
<td>3.05</td>
<td>Interact with TELNET port or other TCP ports</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenSMTPd-Filter">OpenSMTPd-Filter</a></td>
<td><a href="https://metacpan.org/author/ANDREW">ANDREW</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Easier filters for OpenSMTPd in perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Matlab">PDL-IO-Matlab</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.006</td>
<td>0.006</td>
<td>Read and write Matlab format data files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDLx-Bin1D">PDLx-Bin1D</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.20</td>
<td>0.24</td>
<td>one dimensional binning functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-Lnk">Parse-Lnk</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.02</td>
<td>0.06</td>
<td>A cross-platform, depencency free, Windows shortcut (.lnk) meta data parser.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Community">Perl-Critic-Community</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>Community-inspired Perl::Critic policies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-InputOutput-ProhibitHighPrecedentLogicalOperatorErrorHandling">Perl-Critic-Policy-InputOutput-ProhibitHighPrecedentLogicalOperatorErrorHandling</a></td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>0.02</td>
<td>0.02</td>
<td>prohibits logical error handling in open statements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-RegularExpressions-ProhibitHighPrecedentLogicalOperatorErrorHandling">Perl-Critic-Policy-RegularExpressions-ProhibitHighPrecedentLogicalOperatorErrorHandling</a></td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>0.02</td>
<td>0.02</td>
<td>prohibits logical error handling in open statements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Plugin-ArrayData">Pod-Weaver-Plugin-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Plugin to use when building ArrayData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rclone-Util">Rclone-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Role-TinyCommons-BinarySearch-LinesInHandle">Role-TinyCommons-BinarySearch-LinesInHandle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Provide has_item() that uses binary search</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Scalar-Type">Scalar-Type</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>v0.1.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Template-Tiny-Strict">Template-Tiny-Strict</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1.15</td>
<td>1.18</td>
<td>Template Toolkit reimplemented in as little code as possible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Archive-Libarchive">Test-Archive-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Testing tools for Archive::Libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Table-Read-RelationOn-Tiny">Text-Table-Read-RelationOn-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>v1.0.3</td>
<td>Read binary "relation on (over) a set" from a text table.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Tree-Indented">Text-Tree-Indented</a></td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>0.01</td>
<td>0.02</td>
<td>render a tree data structure in the classic indented view</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-From-ObjArray">Tree-From-ObjArray</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Build a tree of objects from a nested array of objects</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UniEvent-HTTP">UniEvent-HTTP</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.0.0</td>
<td>v1.0.1</td>
<td>extremely fast sync/async http client and server framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UniEvent-HTTP-Manager">UniEvent-HTTP-Manager</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.0.0</td>
<td>v1.0.1</td>
<td>extremely fast asynchronous preforking / threading event based web server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-ID-FruitName-PERLANCAR">WordList-ID-FruitName-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>List of fruit names in Indonesian</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YuiRestClient">YuiRestClient</a></td>
<td><a href="https://metacpan.org/author/QEYAST">QEYAST</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Perl module to interact with YaST applications via libyui-rest-api.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Zapp">Zapp</a></td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Plan building, job creating web app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/bin4tsv">bin4tsv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.01</td>
<td>0.0124</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/uHTML">uHTML</a></td>
<td><a href="https://metacpan.org/author/OKELLO">OKELLO</a></td>
<td>0</td>
<td>0</td>
<td/>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>95</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>44</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>24</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>5</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/CDRAKE">CDRAKE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/KSTRZEROK">KSTRZEROK</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CROMEDOME">CROMEDOME</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/ANDREW">ANDREW</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/WLINDLEY">WLINDLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/OKELLO">OKELLO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/QEYAST">QEYAST</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/BEDOSHI">BEDOSHI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract 0.07-TRIAL2 XMIKEW 0 0 Parse and format MySQL dates and times 0.07-TRIAL3 XMIKEW 0 0 Parse and format MySQL dates and times Acme-CPANModules-HTMLTable PERLANCAR 0.001 0.001 Modules that generate HTML tables Acme-CPANModules-ManagingMultipleRepositories PERLANCAR 0.001 0.001 Managing multiple repositories Acme-CPANModules-PERLANCAR-Dummy PERLANCAR 0.001 0.001 A dummy Acme::CPANModules list for testing Acme-CPANModulesBundle-Import-MJGARDNER PERLANCAR … <a href="https://perlancar.wordpress.com/2021/06/01/list-of-new-cpan-distributions-may-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – May 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1945</id>
    <published>2021-06-01T00:41:22Z</published>
    <updated>2021-06-01T00:41:22Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#514 - Is OOP bad?</title>
    <link rel="alternate" href="http://perlweekly.com/archive/514.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>First things first, I am a big fan of OOP in general. However I do agree OOP is not always the best choice. Since Perl promotes the idea of TIMTOWTDI (There's more than one way to do it), we have plenty of options to pick from. I have come across many Perl haters in the past complaining about lack of proper OOP support in Perl. With the introduction of postmodern object system for Perl, <a href="https://metacpan.org/pod/Moose">Moose</a>, we finally had structured OOP support. I must confess I prefer <a href="https://metacpan.org/pod/Moo">Moo</a> which is known as minimalist object orientation.</p>
<p>Fast forward to now, Curtis Poe joined hands with other Perl masters and came up with <a href="https://github.com/Ovid/Cor/wiki/Corinna-Overview">Corinna</a>. It is proposed to be part of core Perl soon. I can't wait for that to happen. I sincerely applaud the efforts of each and every contributor of Corinna. I beleive it will be the best addition to the Perl core in recent times. I am confident it will be the highlight of the future Perl7.</p>
<p>In the last week <a href="https://perlweekly.com/archive/513.html">edition</a> of the weekly newsletter, Gabor reminded me that I forgot to celebrate the special <a href="https://perlweekly.com/archive/512.html">512th edition</a>. What a shame, I missed the opportunity. I blame my busy routine for the missed opportunity. I am looking forward to my personal 100th edition of the weekly newsletter. This is the 79th edition for the record, not far off from the target.</p>
<p>Happy to see, the COVID-19 situation in India is getting better. I pray to ALLAH s.w.t for the complete protection from COVID-19. Please look after yourself and your loved ones.</p>
<p>To all our readers in the UK, enjoy your bank holiday with the weekly newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/514.html</id>
    <published>2021-05-31T10:00:00Z</published>
    <updated>2021-05-31T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 7</title>
  <summary type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-7"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-7</id>
  <content type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grant Proposal: Persistent Data Structures for Raku</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku"/>
  <id>tag:news.perlfoundation.org,2021-05-30:/post/grant_proposal_persistent_data_structures_for_raku</id>
  <published>2021-05-30T20:58:00</published>
  <updated>2021-05-30T20:58:00</updated>
  <summary>
  <![CDATA[
     Name Daniel Sockwell Synopsis Immutable, persistent data structures give a program certain superpowers that it's very hard to have in any other way: they allow the program to "time travel" they allow let the program share data across threads or asynchronously save it to disk without needing locks; they enable a much more purely functional style of programming which results in code that many software developers find much easier to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Name</h2>

<p>Daniel Sockwell</p>

<h2>Synopsis</h2>

<p>Immutable, persistent data structures give a program certain superpowers that it's very hard to have
in any other way: they allow the program to "time travel" (view previous application state); they
allow let the program share data across threads or asynchronously save it to disk without needing
locks; they enable a much more purely functional style of programming – which results in code that
many software developers find much easier to reason about.  Because of these benefits, many
languages with strong support for functional programming (Clojure, Elm, Haskell, etc) offer
persistent data structures in their standard library.  And many multiparadigm languages that attempt
to support programming in a fuctional style (C++, JavaScript, Java, Rust, Go, etc.) have
well-maintained and popular libraries offering persistent data structures.</p>

<p>However, despite these benefits and despite the extremely strong support Raku generally provides for
functional programming, Raku does not provide any persistent data structures, either in core or in a
library.  I am therefore seeking a grant to create a persistent data structures library for Raku.</p>

<p>If this grant is funded, I will build this library as an external module that can be used as soon as
I have completed it.  Additionally, I will structure the module in such a way that it can later be
upstreamed into Rakudo if we decide that persistent data types are valuable enough to include in
Roast/the core language (though accepting this grant proposal would, of course, not commit Raku to
adding these types, and the types would provide most of the same benefits as a standalone library).</p>

<h3>The Problem</h3>

<p>As part of its support for functional programming, Raku provides several immutable data types – most
notably, Lists, Maps, and Sets.  These types work well, but they suffer from two well-known
problems: (1) shallow clones with interior mutability and (2) expensive copies.</p>

<p>The problem of interior mutability can be seen in the following code</p>

<pre><code>my Map $m1 = :key[].Map;
my Map $m2 = $m1.clone; 
$m2&lt;key&gt;.push: 2;
say $m1; # OUTPUT: «Map.new((key =&amp;gt; [2]))»
</code></pre>

<p>That is, neither immutability nor clones are deep, so changes to $m2 end up causing changes to $m1.
This behavior is not a bug; it is the intentional (and correct) consequence of the semantics of
immutable types, Scalars, and clone.  This correct behavior, however, negates much of the benefit
that <em>deeply</em> immutable types can provide in terms of reasoning about the code and safely sharing
data between threads.</p>

<p>You can overcome this problem (albeit at the cost of some verbosity) by manually deep-cloning
data and/or ensuring that all the components of a type are themselves immutable.  However, solving
this problem leads you directly to the second: a deep clone of an immutable object is very
expensive, because it involves literally copying the entire object (even if the copy is only
slightly different).  This makes using large immutable objects in Raku much slower than using their
mutable equivalents.</p>

<p>Because copying immutable data structures is both syntactically annoying and computationally
expensive, copying data is a less appealing prospect in Raku than in languages with persistent data
structures.  This, in turn, means that Raku programs are less likely make immutable copies of data
and are more likely to share access to a mutable copy.  This is a shame in any context, because it
makes code harder to reason about and thus more likely to contain bugs.  But it's especially
problematic in concurrent programs – when programs share (rather than copy) data between threads,
they have to use locks, which is both slower and more cumbersome.  Since Raku otherwise offers
excellent support for concurrent programming, the expense of copying large data structures is a real
problem. </p>

<h3>The Solution</h3>

<p>I mentioned that the problems of interior mutability and expensive copies are well known and,
fortunately, they also have a well-known solution: <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">persistent data
structures</a> that provide structural
sharing.  The basic idea is that when you copy an immutable object, you don't need to <em>literally</em>
copy all the data in it, you just need to point back to the copied object (which can't change
because it's immutable).  Then, the copy only needs to remember and ways it differs from the
original rather than the entire object.  (At a high level, this is similar to how some version
control systems or commands work – for example, with git-send-email, you don't send a new copy, just
a patch). </p>

<p>Many early persistent data structures provided these benefits, but only at an unacceptably high
cost.  For example, a linked-list qualifies as a persistent data structure because you can add a
node to the list without mutating it and multiple modified "copies" of a linked list can share much
of their data without making literal copies (aka "tail sharing").  However, the performance profile
of a linked list (especially its lack of cache coherence, given the relative cost of a cache miss on
modern hardware) make it an extremely poor fit for most general purpose programming tasks today.</p>

<p>However, in the past two decades, a new bread of persistent data structures have been developed –
and these new structures combine the safely and cheap copying of previous data structures with a
much-improved performance profile.</p>

<h2>Prior Art</h2>

<p>I have no interest in reinventing the wheel and persistent data structures have a long history both
in academic computer science and in practical language implementations.  Most notably, Phil Bagwell
described a practical design for a persistent data structures in a 2001 paper titled Idle Hash
Trees.  This design describes a specific data structure called a Hash Array Mapped Trie.  Here's a
simplified description of how a HAMT works:</p>

<ul>
<li>create a tree where each node contains either
<ul>
<li>a sparse array of length 32 with references to further nodes.</li>
<li>a final value (i.e., it's a leaf node).</li>
</ul></li>
<li>To store the values of an array into the tree created above, parse the index of each element as
a base 32 number and then convert that number into a list of digits.  Starting at the root of
the tree, look at the array element that matches the value of the last digit and go to (or
create) the node referenced by that element.  When you have done so, remove the digit from your
list and repeat.  Once you are out of digit, store the value in the current node.</li>
<li>^^^^ created a binary Trie, hence the name.</li>
<li>Storing the values of a Hash is similar, except that the hash key must first be hashed into a 32
bit integer and the final nodes need to be buckets to handle hash collisions.</li>
<li>This data structure is immutable, but supports creating a copy with certain values added (or
deleted).  Doing so only requires copying the nodes in the path from the root node to the
inserted/deleted/changed node; the rest of the tree (which is unchanged) is shared between the
copies.</li>
<li>Note that the above omits some details, such as the use of a bitmap &amp; dense array in place of
the sparse array.  For a more detailed explanation of how this works, refer to either the
original paper or to https://hypirion.com/musings/understanding-persistent-vector-pt-1</li>
</ul>

<p>In algorithmic terms, this data structure provides access to nodes in O(log₃₂(n)) time.  A very
pedantic academic might say that this should still be considered O(log(n)) time, but in practice it is
much closer to O(n) – an HAMT with 6 levels can store over a billion items.  Memory use (compared to
full copying) is reduced by a similar factor. </p>

<p>In 2007, Clojure was released with HAMT-based persistent data structures backing all of its
fundamental collection types.  Since then, HAMT-based data structures have been developed for many
languages, either as a core part of the language or as a third-party library.</p>

<p>While Raku does not have HAMT-based (or any) persistent data structures, it does have a few related
features.  First, it has strong support for laziness which can, in some cases, give Lists/Arrays
performance gains similar to those they would get from a persistent data structure (Jonathan
Worthington helpfully explained this distinction to me on StackOverflow:
https://stackoverflow.com/a/67035827/10173009).  This does not apply in all cases and does not apply
at all to Hashes/Maps/Sets/etc. Second, Rakudo currently implements the Str type in a way that has
some conceptual similarities to persistent data structures, though it does not offer the same
guarantees and that implementation is not required by the Raku specification.  Third, Jonathan
Worthington has also implemented a trio of concurrent data structures that use tail sharing (a
similar technique for creating persistent data structures).  These modules – and, in particular, the
Concurrent::Trie module – could be useful when implementing HAMT based data structures.</p>

<p>Given this prior art, implementing HAMT-based data structures will have a clear roadmap, even if
much implementation work remains to be done.</p>

<h2>Deliverables</h2>

<p>The primary deliverable from this grant would be a collection of persistent data types based on Hash
Array Mapped Tries (which, for type-naming purposes, I tentatively plan to refer to as Hash
Array-mapped Tries, yielding the abbreviation 'Hat' rather than 'HAMT').  I would plan to deliver
some or all of the following (time/budget permitting, as discussed in the schedule below), along
with corresponding pod6 documentation suitable for future inclusion on docs.raku.org and
corresponding tests suitable for future inclusion in Roast:</p>

<ul>
<li>ListHat (persistent Array)</li>
<li>MapHat  (persistent Hash)</li>
<li>SetHat  (persistent SetHash)</li>
<li>BagHat  (persistent BagHash)</li>
<li>MixHat  (persistent MixHash)</li>
</ul>

<p>(Note: I don't love these names, since being backed by a HAMT is an implementation detail.  But I
would like to find a name that's short and memorable enough to make the types easy to use;
"PersistentList"s seem unlikely to get much use.  I'm open to ideas here.)</p>

<p>This covers the Raku collection types other than Pairs; creating new Pairs is already simple enough
that creating a PairHat type would be pointless</p>

<p>Time permitting, I would also deliver benchmarks comparing the performance of the *Hat types with
that of the corresponding deeply copied immutable types.</p>

<h2>Project Details</h2>

<h3>Proposed API for deliverable types</h3>

<p>In general, when implementing immutable types, the copying API can be designed along two lines: it
can either require the user to use explicit copying operations, or it can offer an API that mirrors
the API of mutable types but that returns a new value rather than mutating one in place.  The
current Raku immutable types provide an API of the first type.  This API allows code like:</p>

<pre><code>my List $list = (1, 2, 3);
my $new = |$l, |(4, 5, 6);  # correct
my $new = $l.push: 4, 5, 6; # NO - throws an error
</code></pre>

<p>This design choice makes sense for the existing immutable types, given that they don't provide
inexpensive copying and that Raku's | operator makes combining collections easier.  It also helps
new users more quickly realize the difference between mutable and immutable types. However, even
with the | operator, creating copies of immutable types can become syntactically cumbersome,
especially if the type might be empty.</p>

<pre><code># mutable
class Foo {
    has @!values;
    method add($val) { @!values.push($val) }
}

# immutable 
class Bar {
    has List $!values;
    method add($val) { $!values = (|($!values // Empty), |($val // Empty)) }
} 
</code></pre>

<p>Again, this tradeoff makes sense for the existing types because copies are relatively expensive and
so it makes sense to have syntax that implicitly discourages their use in non-trivial cases.
However, since the *Hat types are designed for inexpensive copies, it makes sense to provide the
second type of API:</p>

<pre><code>my ListHat $l = (1, 2, 3);
my $new = $l.push: 4, 5, 6;
</code></pre>

<p>This approach is similar to the one taken by many libraries that add persistent data structures to
languages that aren't purely functional; as one example, immutable.js.  In other languages, this
has the downside of creating a trap:</p>

<pre><code>my Array $a = 1, 2, 3;
$a.push: 4; # works
my ListHat $l = 1, 2, 3;
$l.push: 4; # seems to work, but actualy does nothing
</code></pre>

<p>However, Raku offers the <code>is pure</code> trait; by implementing the relevant methods for the *Hat types
with that trait, the incorrect line would generate a warning that a pure function was used in sink
context.</p>

<p>I would also plan to offer an API for "batching" operations (which lets the data structure improve
performance by skipping intermediate copies).  I'm less sure of this part of the API, but think that
an API similar to the one provided by Immer could be a good fit:</p>

<pre><code>my MapHat $m = (:key1&lt;val1&gt; :key2&lt;val2&gt;);
my $m2 = $m.next: $draft -&amp;gt; { $draft&lt;key2&gt; = 'new val' };
# Or, more concisely
my $m3 = $m.next: *&lt;key2&gt; = 'new val';
# $m2 and $m3 are both {:key&lt;val1&gt; :key2('new val')}
</code></pre>

<p>(This API is inspired by the JavaScript Immer, not the identically-named-but-unrelated C++ library,
which provides a more traditional batch API based on a .commit method)</p>

<p>Of course, I am sure I will learn more in the course of the implementation, so all of the APIs shown
above could change/evolve, but I present it here as a general guideline.</p>

<h3>Limitations on scope</h3>

<p>To keep the project limited in scope, there are two sets of features that I explicitly do <em>not</em> plan
to include in the work for this grant (though either could be added later on).</p>

<p>First, I do not plan to implant the CHAMP optimizations to the HAMT data structure.  This
optimization, which was described in the academic literature in 2015, further reduces memory use and
increases the data's cache locality (which, given the relative significance of cache misses on
modern CPUs, provides a speed boost as well).  However, it also significantly increases the
implementation complexity.  Perhaps because of that complexity or perhaps just because it was more
recently presented, CHAMPs have not been as widely implemented in non-academic settings. Moreover,
adding the CHAMP optimizations would not change the overall performance profile, appropriate uses,
or API of the data structure, so we could add it later if we determine that the performance gains
justify the added complexity.</p>

<p>Similarly, I do not plan to implement the *Hat types in a way that requires them to be included in
Rakudo.  As illustrated by Jonathan Worthington's Concurrent::Stack, Concurrent::Queue, and
Concurrent::Trie data structures, it is entirely possible to implement performant Raku data
structures entirely is userland code, and I plan to follow that approach.</p>

<p>It's possible that integrating more tightly with the compiler/VM could further increase performance.
However I believe that it makes sense to defer that work until a working userland implementation
proves the value of persistent data types via an external library.  Creating an external library
will also allow users to provide feedback on the *Hat types earlier and, if necessary, allow us to
evolve their API without breaking Raku's stability guarantees.</p>

<h2>Proposed Schedule and Grant Amount</h2>

<p>I propose to work on this grant for 10 hours/week for 14 weeks our until the completion of all
deliverables described above and to work for a reduced rate of $50/hour.  Thus, I am seeking a grant
of up to $7,000 (or less, if the implementation is completed before the end of the 14 weeks).</p>

<h2>Benefits to the Raku Community</h2>

<p>As mentioned above, adding persistent data types to Raku would have multiple benefits.  First and
most directly, these types would significantly improve the performance of Raku code that uses
immutable data.  Second, the new types would provide a more ergonomic API for copying immutable
types.</p>

<p>Together, these two direct benefits would encourage Raku programmers to make greater use of
immutable types and other functional programming idioms.  This, in turn, would generally increase
the likelihood that any given Raku module is robust and thread-safe (even if it was not written with
thread safety in mind).  Increased thread safety will help make the Raku ecosystem more suitable for
concurrent workloads (already a strength, given Raku's strong concurrency and parallelism primitives
and the existence of excellent concurrent modules such as Cro).</p>

<p>In addition to these practical benefits, adding these types (especially if they are eventually added
to core Raku) will help in Raku's marketing/adoption efforts.  Languages that have implemented
persistent data types include Clojure, Elm, Haskell, and Scala; all of these languages are (1)
functional and (2) modern – two traits that it would be both helpful and accurate for more
developers to associate with Raku.</p>

<p>Finally, on a more personal note, this grant would benefit a project for which I am not seeking
funding.  I am independently working on Épée, a web framework for Raku inspired by React, Svelte,
Pollen, and Hoplon (and both inspired by and designed to integrate smoothly with Cro).  Épée uses
immutable data via deep copies and thus would see performance benefits from my work on this grant.
I mention this both as a benefit of the grant and to say that, although Épée would benefit from this
grant, that benefit would not be high enough to make implementing these data structures worthwhile
if the grant is not accepted (that is, I am not seeking a grant for work that I plan to do anyway!).
I believe that my perspective as a future user of the API with a concrete use-case in mind would
prove helpful during my work on this grant.</p>

<h2>Biography</h2>

<p>I am a contributor to Rakudo, Roast, and the Raku documentation; I serve on the Raku Steering
Council and the Yet Another Society Legal Committee.  Prior to becoming a programmer, I was a
practicing attorney at Davis Polk &amp; Wardwell, one of the top law firms in New York City – but
decided to become a software developer after helping the firm build a web application that dealt
with data breach law.  I have used JavaScript and Rust professionally, but now focus primarily on
writing free software in Raku.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Weekly Challenge 114</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/30#pwc114" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find out the next Palindrome 
Number higher than the given integer $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub next_palindrome{
    my($n) = @_;
    {
        $n++;
        return $n if $n eq join("", reverse(split(//, $n)));
        redo;
    }
}

MAIN:{
    my($N);
    $N = 1234;
    print next_palindrome($N) . "\n";
    $N = 999;
    print next_palindrome($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1331
1001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is probably the most straight forward approach to this task. Here we iterate
upwards from our starting point and check each number using 
&lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt;. Since we are guaranteed of 
eventually finding a palindrome the loop is 
done (via &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;) without any exit criteria or 
bounds checking other than returning when one is found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find the next higher integer 
having the same number of 1 bits in binary representation as $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub count_bits{
    my($n) = @_;
    my $total_count_set_bit = 0;
    while($n){
        my $b = $n &amp; 1;
        $total_count_set_bit++ if $b;
        $n = $n &gt;&gt; 1;
    }
    return $total_count_set_bit;
}

sub next_same_bits{
    my($n) = @_;
    my $number_bits = count_bits($n);
    {
        my $next = $n + 1;
        return $next if count_bits($next) == $number_bits;
        $n = $next;
        redo;
    }
}

MAIN:{
    my($N);
    $N = 3;
    print next_same_bits($N) . "\n";
    $N = 12;
    print next_same_bits($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
5
17
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;count_bits&lt;/code&gt; subroutine is based on code written for 
&lt;a href="https://adamcrussell.livejournal.com/18587.html"&gt;Challenge 079&lt;/a&gt;. Otherwise, the approach
to this task is very similar to what was done in the first one this week.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114/"&gt;Challenge 114&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc114</id>
    <published>2021-05-30T16:01:00-04:00</published>
    <updated>2021-05-30T16:01:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>TPRCIC Newsletter 26 May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic-newsletter-26-may-2021"/>
  <id>tag:news.perlfoundation.org,2021-05-25:/post/tprcic-newsletter-26-may-2021</id>
  <published>2021-05-25T12:31:36</published>
  <updated>2021-05-25T12:31:36</updated>
  <summary>
  <![CDATA[
     Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter. This issue: The schedule is available Submit a Lightning Talk Volunteers needed Do you want to host a virtual BoF? Order your conference shirt About the Conference in the Cloud Get your tickets How to Reach Us See you real soon The conference is in just 2 weeks! We're really looking forward to seeing everyone again. We’ve 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/99958ba268cb98cef73fd7773128f8164b29031b/logo-tpc-2021-colors.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter.</p>

<p>This issue:
* <a href="https://perlconference.us/tprc-2021-cloud/schedule/">The schedule is available</a>
* <a href="http://perlconference.us/papers">Submit a Lightning Talk</a>
* Volunteers needed ( virtual moderators, hosts ) 
* Do you want to host a virtual BoF? 
* Order your conference <a href="https://www.cafepress.com/perlandrakuconference">shirt</a>
* About the Conference in the Cloud
* <a href="https://tprc2021cic.sched.com/tickets?iframe=no">Get your tickets</a>
* How to Reach Us</p>

<h1>See you real soon</h1>

<p>The conference is in just 2 weeks! We're really looking forward to seeing everyone again. 
We’ve got a lot of great talks lined up! The schedule is available on our <a href="https://perlconference.us/tprc-2021-cloud/schedule/">website</a>. </p>

<h1>Give a Lightning Talk</h1>

<p>Lightning Talks are short, 5 minute, talks that may be serious, funny, or both. They may be given by experienced speakers already giving full length talks or by first time speakers just starting out (this is a great way to get started if you have something to say). Adding the virtual component to lightning talks should add for some extra fun! If you are a first time speaker you will win a tie with an experienced speaker when the schedule is made, if it comes to it. Today’s first time speaker could be tomorrow’s keynote speaker! <a href="http://perlconference.us/papers">Sign up here</a>.</p>

<h1>Volunteers Needed</h1>

<p>The Conference in the Cloud needs some volunteers! Email <a href="admin@perlconference.us">admin@perlconference.us</a> to volunteer. Right now we need volunteers to help moderate rooms and coordinate day-of things:
* Room moderators - Monitor the chat and help coordinate audience participation during a virtual presentation.
* Room Hosts - Help coordinate speakers and manage the live stream to YouTube</p>

<h1>Host a Birds of a Feather (BoF)</h1>

<p>Do you have a topic you'd like to host for a virtual Birds of Feather (BoF) meeting? We'd love to help! Virtual meeting space will be reserved for BoFs on a first come, first served basis.</p>

<p>Start by proposing and then promoting your BOF on the <a href="http://perlconference.us/wiki">conference wiki</a>. TPRC staff is happy to help facilitate a meeting space if you need it. Just reach out to us on TPF Slack or email us at <a href="admin@perlconference.us">admin@perlconference.us</a> </p>

<h1>Order your conference shirt</h1>

<p>We designed a logo and we’re sharing it with the community! Order a shirt or other cloud conference items at <a href="https://www.cafepress.com/perlandrakuconference">CafePress</a>. We aren’t making any money (neither is TPF) on these products but we have designed a logo if you’d like to buy a momento!</p>

<h1>About the Conference in the Cloud</h1>

<p>The 2021 Perl and Raku Conference in the Cloud will be on June 8-10. If you see #TPRCiC around on social media, that’s our tag for the conference.
At the Conference in the Cloud there will be Perl, Raku, and other related technology topics, just like you’ve seen at our in-person conferences. The Conference in the Cloud is organized and run by volunteers just like The Perl and Raku Conference. Presentations are also given by volunteers. The presentations at the conference were submitted during our Call For Presentations (CFP) and selected by organizers who volunteered to be on our talks-committee. We will have 2 or more tracks at this event with presentations (20-50 minutes long) on a variety of technical topics throughout each day.</p>

<h2>Registration Cost</h2>

<p>By paying a $10 fee attendees can interact live with speakers and other attendees (during BOFs, panels, and Q&amp;A). The $10.00 fee is inclusive of the entire event. This fee helps secure a safe event, and covers the minor costs of hosting it.</p>

<h2>Conference Time</h2>

<p>In order to accommodate the most time zones possible, we have decided to go with 11AM to 6PM EDT or 15:00 to 22:00 UTC. Sched now supports time zones in their interface. Be sure to login and select your time zone!</p>

<h2>Hosting Platform</h2>

<p>The Perl and Raku Conference in the Cloud (TPRCiC) is going to be an online, interactive event hosted on the Zoom platform. The broadcast will be recorded and streamed simultaneously to <a href="https://www.youtube.com/yapcna">YouTube</a>. </p>

<p>Access to the interactive conference on Zoom will only be granted to people who register in advance, agree to the Code of Conduct, and pay a $10 registration fee for the whole conference. Presentations will be streamed live to <a href="https://www.youtube.com/yapcna">YouTube</a> so those who can’t pay the fee or won’t use Zoom, can still access most conference content. <a href="https://github.com/perlconference/tpc-2020-cloud/wiki#bofs">BOFs</a> will not be available on <a href="https://www.youtube.com/yapcna">YouTube</a>.</p>

<h1>Get Your Ticket</h1>

<p>Event tickets are available on eventbrite for $10. The $10.00 fee is inclusive of the entire 3-day event. This fee helps secure a safe event, and covers the minor costs of hosting it. <a href="https://tprc2021cic.sched.com/tickets">Sign up today</a>! </p>

<h1>How to Reach #TPRCiC Organizers</h1>

<ul>
<li>Visit our website: https://perlconference.us/</li>
<li>Follow us on Twitter: <a href="https://twitter.com/PerlConferences">@PerlConferences</a></li>
<li>Like us on Facebook: The Perl Foundation (<a href="https://www.facebook.com/tpf.perl">@tpf.perl</a>)</li>
<li>Subscribe to the mailing list: https://perlconference.us/tprc-2021-cloud/keep-in-touch/</li>
<li>Send any questions about The Perl Conference to <a href="https://perlconference.us/tprc-2021-cloud/contact-us/">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
</feed>
