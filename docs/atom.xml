<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-06-12T20:46:32Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1598123085089261731</id>
    <published>2021-06-12T16:40:00.000+02:00</published>
    <updated>2021-06-12T16:40:41.587+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlv) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.068' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.068&lt;/strong&gt; on 2021-06-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.067 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301004&lt;/strong&gt; on 2021-06-06&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 0.301003 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.22&lt;/strong&gt; on 2021-06-10&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 10.21 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.29&lt;/strong&gt; on 2021-06-07&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.28 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJATRIA/Mojolicious-Plugin-Authentication-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Authentication&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A plugin to make authentication a bit easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2021-06-10&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.36 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/POE-Component-IRC-6.92' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;POE::Component::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A fully event-driven IRC client module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.92&lt;/strong&gt; on 2021-06-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.91 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9006&lt;/strong&gt; on 2021-06-11&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9005 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.073' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.073&lt;/strong&gt; on 2021-06-07&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.072 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1598123085089261731/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlv-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1598123085089261731"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1598123085089261731"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxlv-8-great-cpan-modules-released.html" title="(cccxlv) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7513320527226951476</id>
    <published>2021-06-12T16:35:00.003+02:00</published>
    <updated>2021-06-12T16:35:28.594+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxi) metacpan weekly report - Perl::LanguageServer</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 149&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/12 14:33:40 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased::factory" target="_blank"&gt;aliased::factory&lt;/a&gt; - shorter versions of a class tree's constructors&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alt::common::sense::TOBYINK" target="_blank"&gt;Alt::common::sense::TOBYINK&lt;/a&gt; - provides a clean-room reimplementation of common::sense&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Acmeman" target="_blank"&gt;App::Acmeman&lt;/a&gt; - manages ACME certificates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Env" target="_blank"&gt;App::Env&lt;/a&gt; - manage application specific environments&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pathed" target="_blank"&gt;App::pathed&lt;/a&gt; - munge the Bash PATH environment variable&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Arguments" target="_blank"&gt;Arguments&lt;/a&gt; - Perl subroutine type-checking&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argv" target="_blank"&gt;Argv&lt;/a&gt; - Provide an OO interface to an arg vector&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Overload" target="_blank"&gt;Attribute::Overload&lt;/a&gt; - Attribute that makes overloading easier&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Property" target="_blank"&gt;Attribute::Property&lt;/a&gt; - Easy lvalue accessors with validation. ($foo-&amp;gt;bar = 42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::SubName" target="_blank"&gt;Attribute::SubName&lt;/a&gt; - Naming anonymous subroutines via attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::TieClasses" target="_blank"&gt;Attribute::TieClasses&lt;/a&gt; - Attribute wrappers for CPAN Tie classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beekeeper" target="_blank"&gt;Beekeeper&lt;/a&gt; - Framework for building applications with a microservices architecture&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Boulder" target="_blank"&gt;Boulder&lt;/a&gt; - An API for hierarchical tag/value structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Builder" target="_blank"&gt;Builder&lt;/a&gt; - Build XML, HTML, CSS and other outputs in blocks&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/callee" target="_blank"&gt;callee&lt;/a&gt; - support recursive anonymous functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cfwp::fio" target="_blank"&gt;Cfwp::fio&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Complex" target="_blank"&gt;Class::Accessor::Complex&lt;/a&gt; - Arrays, hashes, booleans, integers, sets and more&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Dynamic" target="_blank"&gt;Class::Dynamic&lt;/a&gt; - Rudimentary support for coderefs in @ISA&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Factory::Enhanced" target="_blank"&gt;Class::Factory::Enhanced&lt;/a&gt; - More functionality for Class::Factory&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::SingletonMethod" target="_blank"&gt;Class::SingletonMethod&lt;/a&gt; - Extend individual objects with additional methods&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Std::Slots" target="_blank"&gt;Class::Std::Slots&lt;/a&gt; - Provide signals and slots for standard classes.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Wrap" target="_blank"&gt;Class::Wrap&lt;/a&gt; - Proxy an entire class's methods.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Closure::Loop" target="_blank"&gt;Closure::Loop&lt;/a&gt; - redo, last, next for closure based loops&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Container" target="_blank"&gt;Data::Container&lt;/a&gt; - Base class for objects containing a list of items&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Domain" target="_blank"&gt;Data::Domain&lt;/a&gt; - Data description and validation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DRef" target="_blank"&gt;Data::DRef&lt;/a&gt; - Delimited-key access to complex data structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Inherited" target="_blank"&gt;Data::Inherited&lt;/a&gt; - Hierarchy-wide accumulation of list and hash results&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Miscellany" target="_blank"&gt;Data::Miscellany&lt;/a&gt; - Collection of miscellaneous subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Object::AutoWrap" target="_blank"&gt;Data::Object::AutoWrap&lt;/a&gt; - Autogenerate accessors for R/O object data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Pack" target="_blank"&gt;Data::Pack&lt;/a&gt; - Pack data structures so only real content remains&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::PathSimple" target="_blank"&gt;Data::PathSimple&lt;/a&gt; - Navigate and manipulate data structures using paths&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Semantic" target="_blank"&gt;Data::Semantic&lt;/a&gt; - Common API for data with semantics attached to them&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::SmartMunge" target="_blank"&gt;Data::SmartMunge&lt;/a&gt; - Munge scalars, hashes and arrays in flexible ways&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Template" target="_blank"&gt;Data::Template&lt;/a&gt; - Generate data structures from templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Decision::Depends" target="_blank"&gt;Decision::Depends&lt;/a&gt; - Perform actions based upon file dependencies&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::MD6" target="_blank"&gt;Digest::MD6&lt;/a&gt; - Perl interface to the MD6 Algorithm&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/fields::aliased" target="_blank"&gt;fields::aliased&lt;/a&gt; - create aliases for object fields&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Attributes" target="_blank"&gt;File::Attributes&lt;/a&gt; - Manipulate file metadata&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Attributes::Recursive" target="_blank"&gt;File::Attributes::Recursive&lt;/a&gt; - Inherit file attributes from parent&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Upwards" target="_blank"&gt;File::Find::Upwards&lt;/a&gt; - Look for a file in the current directory and upwards&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Attribute" target="_blank"&gt;Getopt::Attribute&lt;/a&gt; - Attribute wrapper for Getopt::Long&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Inherited" target="_blank"&gt;Getopt::Inherited&lt;/a&gt; - Handling inherited command-line options&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/import" target="_blank"&gt;import&lt;/a&gt; - import all modules with the same package prefix, aliasing it away.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer::Zim::Lexical" target="_blank"&gt;Importer::Zim::Lexical&lt;/a&gt; - Import functions as lexical subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/like" target="_blank"&gt;like&lt;/a&gt; - Declare support for an interface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Loop::Control" target="_blank"&gt;Loop::Control&lt;/a&gt; - FIRST and NEXT functions for loops&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mic" target="_blank"&gt;Mic&lt;/a&gt; - Simplified OOP with emphasis on modularity and loose coupling.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Changes" target="_blank"&gt;Module::Changes&lt;/a&gt; - Machine-readable Changes file&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Changes::ADAMK" target="_blank"&gt;Module::Changes::ADAMK&lt;/a&gt; - Parse a traditional Changes file (as ADAMK interpretes it)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::BigIP" target="_blank"&gt;Net::BigIP&lt;/a&gt; - REST interface for BigIP&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Accessor" target="_blank"&gt;Object::Accessor&lt;/a&gt; - Per object accessors&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Extend" target="_blank"&gt;Object::Extend&lt;/a&gt; - add and override per-object methods&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/once" target="_blank"&gt;once&lt;/a&gt; - Execute code only once throughout the program's lifetime&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/overload::reify" target="_blank"&gt;overload::reify&lt;/a&gt; - Provide named methods for inherited overloaded operators&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Export" target="_blank"&gt;Perl6::Export&lt;/a&gt; - Implements the Perl 6 'is export(...)' trait&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/pkg" target="_blank"&gt;pkg&lt;/a&gt; - transparently use packages and inner packages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Property::Lookup" target="_blank"&gt;Property::Lookup&lt;/a&gt; - Object property lookup across multiple layers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/rubyisms" target="_blank"&gt;rubyisms&lt;/a&gt; - Steal some features from Ruby&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Soo" target="_blank"&gt;Soo&lt;/a&gt; - Simple object oriented system for Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::AliasedUnderscore" target="_blank"&gt;Sub::AliasedUnderscore&lt;/a&gt; - transform a subroutine that operates on $_ into&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Become" target="_blank"&gt;Sub::Become&lt;/a&gt; - Syntactic sugar to allow a sub to replace itself&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::CharacterProperties" target="_blank"&gt;Sub::CharacterProperties&lt;/a&gt; - Support for user-defined character properties&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Documentation" target="_blank"&gt;Sub::Documentation&lt;/a&gt; - Collect documentation for subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Replace" target="_blank"&gt;Sub::Replace&lt;/a&gt; - Replace subroutines in packages with controlled effects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/uninit" target="_blank"&gt;uninit&lt;/a&gt; - Warn about uninitialized variables&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UNIVERSAL::ref" target="_blank"&gt;UNIVERSAL::ref&lt;/a&gt; - Turns ref() into a multimethod&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Mystic" target="_blank"&gt;Var::Mystic&lt;/a&gt; - Monitor your state, tracked in colour&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version::Limit" target="_blank"&gt;version::Limit&lt;/a&gt; - Perl extension for fine control of permitted versions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Shortcut" target="_blank"&gt;Win32::Shortcut&lt;/a&gt; - Perl Module to deal with Windows Shortcuts&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/with" target="_blank"&gt;with&lt;/a&gt; - Lexically call methods with a default object.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased" target="_blank"&gt;aliased&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alt" target="_blank"&gt;Alt&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ElasticSearch::Utilities" target="_blank"&gt;App::ElasticSearch::Utilities&lt;/a&gt; (+2=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/as" target="_blank"&gt;as&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Handlers" target="_blank"&gt;Attribute::Handlers&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Types" target="_blank"&gt;Attribute::Types&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Brickyard" target="_blank"&gt;Brickyard&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Constructor" target="_blank"&gt;Class::Accessor::Constructor&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Generate" target="_blank"&gt;Class::Generate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Mix" target="_blank"&gt;Class::Mix&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Monkey" target="_blank"&gt;Class::Monkey&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Null" target="_blank"&gt;Class::Null&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::ReturnValue" target="_blank"&gt;Class::ReturnValue&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Helpers" target="_blank"&gt;CLI::Helpers&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Argon2" target="_blank"&gt;Crypt::Argon2&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::URandom" target="_blank"&gt;Crypt::URandom&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Find" target="_blank"&gt;Data::Find&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Focus" target="_blank"&gt;Data::Focus&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Reach" target="_blank"&gt;Data::Reach&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DhMakePerl" target="_blank"&gt;DhMakePerl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect::Simple" target="_blank"&gt;Expect::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ExtAttr" target="_blank"&gt;File::ExtAttr&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filter" target="_blank"&gt;Filter&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Inflator" target="_blank"&gt;Hash::Inflator&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::SharedMem" target="_blank"&gt;Hash::SharedMem&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Type" target="_blank"&gt;Hash::Type&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Box" target="_blank"&gt;Import::Box&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer::Zim" target="_blank"&gt;Importer::Zim&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::AIO" target="_blank"&gt;IO::AIO&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/latest" target="_blank"&gt;latest&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Categorize" target="_blank"&gt;List::Categorize&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MARC::Record" target="_blank"&gt;MARC::Record&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=85)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=46)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=319)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TaggedAttributes" target="_blank"&gt;MooX::TaggedAttributes&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace" target="_blank"&gt;namespace&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/nonsense" target="_blank"&gt;nonsense&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nothing::Tiny" target="_blank"&gt;Nothing::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Result" target="_blank"&gt;Object::Result&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/optimize" target="_blank"&gt;optimize&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/optimizer" target="_blank"&gt;optimizer&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::WorkUnit" target="_blank"&gt;Parallel::WorkUnit&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=378)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Export::Attrs" target="_blank"&gt;Perl6::Export::Attrs&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Gather" target="_blank"&gt;Perl6::Gather&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Rules" target="_blank"&gt;Perl6::Rules&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Slurp" target="_blank"&gt;Perl6::Slurp&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+3=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Progress::Any" target="_blank"&gt;Progress::Any&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quantum::Superpositions" target="_blank"&gt;Quantum::Superpositions&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Properties" target="_blank"&gt;Scalar::Properties&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scope::With" target="_blank"&gt;Scope::With&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::Object" target="_blank"&gt;Set::Object&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell" target="_blank"&gt;Shell&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Perl" target="_blank"&gt;Shell::Perl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SOAP::Lite" target="_blank"&gt;SOAP::Lite&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/StreamFinder" target="_blank"&gt;StreamFinder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Genius" target="_blank"&gt;Sub::Genius&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword" target="_blank"&gt;Term::ReadPassword&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/true" target="_blank"&gt;true&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::TinyX::Facets" target="_blank"&gt;Type::TinyX::Facets&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Pairs" target="_blank"&gt;Var::Pairs&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Variable::Magic" target="_blank"&gt;Variable::Magic&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Version::Next" target="_blank"&gt;Version::Next&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::RSS" target="_blank"&gt;XML::RSS&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7513320527226951476/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7513320527226951476"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7513320527226951476"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxxi-metacpan-weekly-report.html" title="(cdlxxi) metacpan weekly report - Perl::LanguageServer"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8748110905288315264</id>
    <published>2021-06-12T16:31:00.000+02:00</published>
    <updated>2021-06-12T16:31:44.903+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxciv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-06-12 13:39:23 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67896519" target="_blank"&gt;What is the best way in Perl to iterate a loop and extract pairs or triples&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67878256" target="_blank"&gt;Perl sorting Alpha characters in a special way&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67853526" target="_blank"&gt;Trimming carriage return (\r) in Perl&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67900007" target="_blank"&gt;Is there any way to change the value of constant in Perl?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67898644" target="_blank"&gt;search for a key value pair and append the value to other keys in unix&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67872282" target="_blank"&gt;Read a file line by line for an exact match using perl script&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67915259" target="_blank"&gt;Counting number of lines with conditions&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67901677" target="_blank"&gt;How do I use Perl IPC::Run3 to read stdout and stderr from a subprocess?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67903415" target="_blank"&gt;Using Conditional Operators inside push in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67874180" target="_blank"&gt;Error Git SVN clone: Use of uninitialized value $sha1&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8748110905288315264/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxciv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8748110905288315264"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8748110905288315264"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdxciv-stackoverflow-perl-report.html" title="(cdxciv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>My TPRCiC 2021 review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/tprcic-2021-review-56k3" type="text/html"/>
    <content type="html">&lt;p&gt;Last year I wrote a &lt;a href="https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187"&gt;(poignant?) review of TPRCiC&lt;/a&gt; as one of my first blog posts.&lt;/p&gt;

&lt;p&gt;Once again this year, I attended &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;The Perl and Raku Conference in the Cloud&lt;/a&gt; (and I even talked 😱 🙊), so here we go again for the review!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fresh-starters"&gt;
  &lt;/a&gt;
  Fresh starters
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#elasticsearch-data-exploration-in-your-terminal"&gt;
  &lt;/a&gt;
  Elasticsearch Data Exploration in Your Terminal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/reyjrar"&gt;Brad Lhotsky&lt;/a&gt; came with a very &lt;strong&gt;solid&lt;/strong&gt; &lt;a href="https://youtu.be/cexwpN3N2j0"&gt;talk&lt;/a&gt;... 👍&lt;/p&gt;

&lt;p&gt;With a live demo (he's mad). That worked! (he's &lt;del&gt;lucky&lt;/del&gt; good 😁) &lt;/p&gt;

&lt;p&gt;And the overall was very nice to listen (he's maybe experimented at this exercise - EDIT: yes he is).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dT7Gfj_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lfos8wi3z01nl4wqav9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dT7Gfj_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lfos8wi3z01nl4wqav9.png" alt="Brad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I enjoyed the topic (&lt;a href="https://www.elastic.co/elasticsearch/"&gt;ElasticSearch&lt;/a&gt;), the comparisons and expertise about this technology and other related ones.&lt;/p&gt;

&lt;p&gt;And... Yes... A working &lt;em&gt;live&lt;/em&gt; demo... What else?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openfoodfacts"&gt;
  &lt;/a&gt;
  OpenFoodFacts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fr.openfoodfacts.org/"&gt;OpenFoodFacts&lt;/a&gt; well deserved his &lt;a href="https://youtu.be/imugl2dSdnU"&gt;lightning talk&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stephanegigandet"&gt;Stephane Giganded&lt;/a&gt; presented this project (does it really need to be introduced?) discussed about GSOC (or similar) and sent a call to volunteers!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Fu4GHXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3qhk2gr3zinrj7qc1hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Fu4GHXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3qhk2gr3zinrj7qc1hq.png" alt="Stephane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-dishes"&gt;
  &lt;/a&gt;
  Main dishes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#perlimports"&gt;
  &lt;/a&gt;
  perlimports
&lt;/h3&gt;

&lt;p&gt;I love when programming languages are doing cross pollination. This was the beginning of the story about &lt;a href="https://metacpan.org/dist/App-perlimports/view/script/perlimports"&gt;perlimports&lt;/a&gt; from &lt;a href="https://www.olafalders.com/"&gt;Olaf Alders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;His &lt;a href="https://youtu.be/fKqxdTbGxYY"&gt;talk&lt;/a&gt; was very comprehensive from basic importing concepts to the implementation problems through vim integration and various features of his &lt;strong&gt;must have&lt;/strong&gt; new tool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vS5oV1E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmsbs0yhrqcktgjagtw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vS5oV1E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmsbs0yhrqcktgjagtw7.png" alt="Olaf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I prefered this talk over his last year talk... Sorry to the "&lt;em&gt;last-year-olaf&lt;/em&gt;":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDzqFT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7g3asdrzxe93s8svy1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDzqFT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7g3asdrzxe93s8svy1.jpeg" alt="Olaf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new
&lt;/h3&gt;

&lt;p&gt;One of our pumpkings &lt;a href="https://github.com/rjbs"&gt;rjbs&lt;/a&gt; gave a very common (in programming languages conferences) &lt;strong&gt;"what's new"&lt;/strong&gt; &lt;a href="https://youtu.be/FlGpiS39NMY"&gt;talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you follow the status of Perl, you know it has been a difficult year for the language. I won't go into details. I never talked about it on this blog so far (and will probably never do). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bYQ6-iLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5mbgi22ht9op4ek54q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYQ6-iLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5mbgi22ht9op4ek54q1.png" alt="Rik"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rik highlighted this state of things very well and did it very transparently. I personally feel like he is very diplomatic and has a strong sense of duty.&lt;/p&gt;

&lt;p&gt;The second part of the talk was about changelog, there is &lt;code&gt;try/catch&lt;/code&gt; 🎉 and various smaller things that are still cool when explained by Rik!&lt;/p&gt;

&lt;p&gt;(everything is cool when explained by rik ❤️ #fanboy)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raku-syntax-i-miss-in-other-languages"&gt;
  &lt;/a&gt;
  Raku syntax I miss in other languages
&lt;/h3&gt;

&lt;p&gt;I also enjoyed very much this talk. I know a little bit of Raku, and I have to admit that it's clearly a super powerful language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01HNN1iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k93l3k6hydmyn87p0yrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01HNN1iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k93l3k6hydmyn87p0yrn.png" alt="Leon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Leont"&gt;Leon Timmermans&lt;/a&gt; delivered a very nice talk and he's really good at spotlighting the features of &lt;a href="https://www.raku.org/"&gt;Raku&lt;/a&gt; like named arguments, zip operator, junction, smart match etc etc etc... (there is so much)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-setup-for-a-complex-app-using-dockercompose"&gt;
  &lt;/a&gt;
  Local setup for a complex app using docker-compose
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://youtu.be/ARpLPQWblAM"&gt;presentation&lt;/a&gt; from &lt;a href="https://github.com/domm"&gt;Thomas Klausner&lt;/a&gt; is for me the perfect example of &lt;strong&gt;"Simple slides... Great presentation!"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qq7n37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61t9c8055hpewzzylbgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qq7n37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61t9c8055hpewzzylbgq.png" alt="Domm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He described how he managed a multi-tier application with docker-compose (it's more about service description than containerization) for reproducible local setup.&lt;/p&gt;

&lt;p&gt;And he delivered his talk in a very &lt;em&gt;pleasant&lt;/em&gt; way... Congrats 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dessert"&gt;
  &lt;/a&gt;
  Dessert
&lt;/h2&gt;

&lt;p&gt;I loved last year &lt;strong&gt;octology&lt;/strong&gt; lightning talk and &lt;a href="https://github.com/pip"&gt;pip&lt;/a&gt; striked again!&lt;/p&gt;

&lt;p&gt;This time with a 20min &lt;a href="https://youtu.be/FgS6IXq-xVE"&gt;talk&lt;/a&gt;. I have to admit I haven't understood everything, it's always a kind of mystic/psychedelic art... And that's what I love.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opycpMn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zmbzxm0m4sh8iecogn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opycpMn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zmbzxm0m4sh8iecogn.png" alt="Pip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-not-hungry-anymore-but"&gt;
  &lt;/a&gt;
  I'm not hungry anymore but...
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rummaging-in-the-clooset"&gt;
  &lt;/a&gt;
  Rummaging in the clOOset
&lt;/h3&gt;

&lt;p&gt;One of the most important talk of this conference is definitely the &lt;a href="https://youtu.be/FO5ift28RyE"&gt;Rummaging in the clOOset&lt;/a&gt; talk from &lt;a href="https://ovid.github.io/"&gt;Curtis "Ovid" Poe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wjYxjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwby0ph9kzkae8h8b0w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wjYxjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwby0ph9kzkae8h8b0w6.png" alt="Ovid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;His talk discussed Object Oriented and Corinna (the incoming core Object Oriented implementation). Taking example from other languages and from important leaders then going more into details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsVTMeP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rdramy3zyn5vbnu9ver.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsVTMeP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rdramy3zyn5vbnu9ver.png" alt="Mixins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly the beginning of the talk was a bit choppy but it does not ruined anything!&lt;/p&gt;

&lt;p&gt;The connection issues were even the subject to funny comments:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d96AkpNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f6vt5fhxpi9g7bglg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d96AkpNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f6vt5fhxpi9g7bglg1.png" alt="Brexit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or even 😂&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80hT1jfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6m7skcsl0dgjm3hzh5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80hT1jfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6m7skcsl0dgjm3hzh5e.png" alt="Baguette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#even-you-can-release-perl"&gt;
  &lt;/a&gt;
  Even you can release Perl
&lt;/h3&gt;

&lt;p&gt;A very nice &lt;a href="https://youtu.be/LaNZu1aBEzE"&gt;talk&lt;/a&gt; from &lt;a href="https://github.com/Corion"&gt;Max Maischein&lt;/a&gt; around release management, pumpking and perl packaging... From the inside! &lt;/p&gt;

&lt;p&gt;With the real manual administrative details 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoAOYVaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej14v4y31sxd9omeqwme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoAOYVaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej14v4y31sxd9omeqwme.png" alt="Max"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very interesting 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perls-amazing-time-machine"&gt;
  &lt;/a&gt;
  Perl's Amazing Time Machine
&lt;/h3&gt;

&lt;p&gt;And finally the &lt;a href="https://youtu.be/Kc_bP73xNyM"&gt;talk&lt;/a&gt; from &lt;a href="http://leonerds-code.blogspot.com/"&gt;Paul Evans&lt;/a&gt; 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbPXlTdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joz73lgtbte8a1ji9q4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbPXlTdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joz73lgtbte8a1ji9q4m.png" alt="Paul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AMAZING!&lt;/p&gt;

&lt;p&gt;Always very smart and technical!&lt;/p&gt;

&lt;p&gt;I feel smarter when I listen to his presentations 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossplatform-native-guis-tradepayoffs-integradistribution"&gt;
  &lt;/a&gt;
  Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/zmughal"&gt;Zaki Mughal&lt;/a&gt; delivered a comprehensive and fun (even a song) &lt;a href="https://youtu.be/En49kYRDbsg"&gt;talk&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHTfSKZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f9z575mowzca7v8kvrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHTfSKZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f9z575mowzca7v8kvrm.png" alt="Zaki"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The topic was GUI, human interactions, how to build...In a multiplatforms way... A lot of things actually! 😁&lt;/p&gt;

&lt;p&gt;Ok I'm &lt;em&gt;biaised&lt;/em&gt; since &lt;strong&gt;sivoais&lt;/strong&gt; (his nickname) is also a kind of "buddy" of mine 😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folklore"&gt;
  &lt;/a&gt;
  Folklore
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cut-by-the-gong"&gt;
  &lt;/a&gt;
  Cut by the gong
&lt;/h3&gt;

&lt;p&gt;Leonerd gave a talk about errors to avoid when doing a slide deck. While it was very interesting, it was kind of ironic that his slide about managing time was cut by the gong! (meaning the end of 5 minutes lightning talk)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD6aqjX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imvao0y21lux0tfwyfu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD6aqjX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imvao0y21lux0tfwyfu9.png" alt="Gong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the beginning I thought it was prepared 😁&lt;/p&gt;

&lt;p&gt;And for the record, the master of the gong:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptBcp1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsfac5wwps4rk6fkkmji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptBcp1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsfac5wwps4rk6fkkmji.png" alt="Master of the gong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esperanto"&gt;
  &lt;/a&gt;
  Esperanto
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#how-to-pronounce-perl-openfoodfact"&gt;
  &lt;/a&gt;
  How to pronounce Perl (OpenFoodFact)
&lt;/h4&gt;

&lt;p&gt;French people (including me) tends to say "pairl" for Perl when American (or just all others 😄) say more something like "Purl". But it is far from "Paul" which would more pronounce like "Pol" 😀&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-back-slash-affair-exploring-textbased-protocols"&gt;
  &lt;/a&gt;
  The &lt;strong&gt;back&lt;/strong&gt; slash affair (Exploring Text-Based Protocols)
&lt;/h4&gt;

&lt;p&gt;Could we decide once for all? 😁 &lt;/p&gt;

&lt;p&gt;south-west to north-est / is "slash"&lt;br&gt;
north-west to south-est \ is "&lt;strong&gt;back&lt;/strong&gt; slash"&lt;/p&gt;

&lt;p&gt;Anyway the &lt;a href="https://youtu.be/8fjYawHyNZY"&gt;talk&lt;/a&gt; from &lt;a href="http://jberger.github.io/"&gt;Joel Berger&lt;/a&gt; was very interesting 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Once again, I enjoyed so much these 3 great days of conference!&lt;br&gt;
I'm very proud for having joined the speaker side 💪 (have you seen?)&lt;/p&gt;

&lt;p&gt;Kudos/Hugs/👍/💪 to organizers and sponsors.&lt;/p&gt;

&lt;p&gt;EDIT: I realized that I shared almost all but my talks (because hey I'm not mad enough to review my own talks 😝), but maybe you would be interested in watching them, so here are the links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/LacGq8NB9Y4"&gt;My big year of Github Actions &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/zFJcVtiwCh4"&gt;Answering questions about CPAN that nobody asked&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/tprcic-2021-review-56k3</id>
    <published>2021-06-10T22:02:34Z</published>
    <updated>2021-06-10T22:02:34Z</updated>
    <category term="perl"/>
    <category term="tpc"/>
    <category term="yapcna"/>
    <category term="review"/>
  </entry>
  <entry>
    <title>Visualization of perl development history</title>
    <link rel="alternate" href="https://dev.to/gugod/visualization-of-perl-development-history-4afm" type="text/html"/>
    <content type="html">&lt;p&gt;About 10 years ago I tried &lt;a href="https://gource.io/"&gt;gource&lt;/a&gt; and made a visualization of the commit history of &lt;a href="https://github.com/Perl/perl5"&gt;perl5.git&lt;/a&gt;. It was when grouce was new, shiny and cool: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jl9HVEJl_-w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;10 years passed like a blink and it has been a remarkable decade for perl5.git. As we see the growth of commit volume, there is also stable pace of releasees thanks to the standardization of release procedure. With relocation of communication platform, participation and small fixes seems to be much easier. While it has not be a perfectly stable decade, it is a good one.&lt;/p&gt;

&lt;p&gt;So as a 10-yearly review, here's the updated version of that gource visualization on perl5.git, all the way to mid 2021: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8udGUs7TnEM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;These are the commands used to produce that video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/src/perl5
gource -s 0.01 --auto-skip-seconds 0.1 -r 30 -f --user-scale 3 --file-idle-time 0 --hide bloom,filenames,dirnames --date-format '%Y' -o ~/var/gource-perl.ppm
ffmpeg  -an -y -f image2pipe -vcodec ppm -i ~/var/gource-perl.ppm -r 30.000 ~/var/gource-out.webm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;本篇文章為 &lt;a href="https://gugod.org/2021/06/perl-development-history-visualized/"&gt;perl 開發歷史紀錄之視覺化&lt;/a&gt; 之英文版&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/visualization-of-perl-development-history-4afm</id>
    <published>2021-06-10T06:32:06Z</published>
    <updated>2021-06-10T06:32:06Z</updated>
    <category term="perl"/>
    <category term="gource"/>
  </entry>
  <entry>
    <title>I’ll attend the Perl and Raku Conference In the Cloud</title>
    <link rel="alternate" href="https://dev.to/smonff/i-ll-attend-the-perl-conference-in-the-cloud-jlh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This year, I am unemployed so let’s try to attend and follow the <a href="https://perlconference.us/tprc-2021-cloud/">Perl and Raku Conference In the Cloud</a>. Feeling quite bored since those days, I am not too much into computer stuff but more like gardening, fixing my house, take care of my cat,  cooking and do wood work, but let’s try.</p>

<p>I bought a ticket.</p>

</div>
    </content>
    <author>
      <name>🌌 Sébastien Feugère ☔</name>
    </author>
    <id>https://dev.to/smonff/i-ll-attend-the-perl-conference-in-the-cloud-jlh</id>
    <published>2021-06-09T13:53:27Z</published>
    <updated>2021-06-09T13:53:27Z</updated>
    <category term="conference"/>
    <category term="yapc"/>
    <category term="tprc"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Moving Perl Mojolicious routes to their own module</title>
    <link rel="alternate" href="https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2" type="text/html"/>
    <content type="html">&lt;p&gt;A mentee asked me over the weekend if there was a way within a &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; web application to store the &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Routing"&gt;routes&lt;/a&gt; separately from the main application class. Here’s one way. &lt;strong&gt;These instructions assume you’re using &lt;a href="https://www.perl.org/get.html"&gt;Perl 5.34&lt;/a&gt; and &lt;a href="https://metacpan.org/release/SRI/Mojolicious-9.19"&gt;Mojolicious 9.19&lt;/a&gt;&lt;/strong&gt; (the latest as of this writing) via the terminal command line on a Linux, Unix, or macOS system; make the appropriate changes if this doesn’t apply to you.&lt;/p&gt;

&lt;p&gt;First, if you haven’t already, &lt;a href="https://docs.mojolicious.org/Mojolicious/Command/Author/generate/app"&gt;create your Mojolicious app&lt;/a&gt; at your shell prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mojo generate app Local::RouteDemo
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/script
  [write] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo
  [chmod] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo 744
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo.pm
  [exist] /Users/mgardner/Projects/blog/local_route_demo
  [write] /Users/mgardner/Projects/blog/local_route_demo/local-route_demo.yml
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller/Example.pm
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/t
  [write] /Users/mgardner/Projects/blog/local_route_demo/t/basic.t
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/public
  [write] /Users/mgardner/Projects/blog/local_route_demo/public/index.html
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts/default.html.ep
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/example
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/example/welcome.html.ep
$ cd local_route_demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new Perl module in your editor for storing your routes. Here we’re using &lt;code&gt;Local::RouteDemo::Routes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch lib/Local/RouteDemo/Routes.pm
$ $EDITOR lib/Local/RouteDemo/Routes.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the module with a function that will create the routes you want, given a &lt;a href="https://docs.mojolicious.org/Mojolicious/Routes"&gt;Mojolicious::Routes&lt;/a&gt; object. Here we’re just bringing over the default route created when we created our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="sx"&gt;qw(all -experimental::signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Exporter&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;@EXPORT_OK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw(make_routes)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;make_routes&lt;/span&gt; &lt;span class="p"&gt;($router) {&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Example#welcome&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="c1"&gt;# add more routes here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adjust the application class to load your new Routes module and call its &lt;a href="https://perldoc.pl/Exporter"&gt;exported&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;RouteDemo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# This method will run once at server start&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Load configuration from config file&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NotYAMLConfig&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure the application&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;# Make routes&lt;/span&gt;
    &lt;span class="nv"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, run your tests and/or manually test your routes to be sure everything works OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ prove -vlr t
t/basic.t .. [2021-06-07 12:21:55.36917] [58779] [debug] [elVGykGVWlOt] GET "/"
[2021-06-07 12:21:55.36972] [58779] [debug] [elVGykGVWlOt] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:21:55.37137] [58779] [debug] [elVGykGVWlOt] Rendering template "example/welcome.html.ep"
[2021-06-07 12:21:55.37343] [58779] [debug] [elVGykGVWlOt] Rendering template "layouts/default.html.ep"
[2021-06-07 12:21:55.37495] [58779] [debug] [elVGykGVWlOt] 200 OK (0.005772s, 173.250/s)

ok 1 - GET /
ok 2 - 200 OK
ok 3 - content is similar
1..3
ok
All tests successful.
Files=1, Tests=3, 1 wallclock secs ( 0.02 usr 0.01 sys + 0.38 cusr 0.11 csys = 0.52 CPU)
Result: PASS
$ script/local_route_demo get /
[2021-06-07 12:22:29.55930] [58889] [debug] [f3YoaFhkwJ42] GET "/"
[2021-06-07 12:22:29.55990] [58889] [debug] [f3YoaFhkwJ42] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:22:29.56059] [58889] [debug] [f3YoaFhkwJ42] Rendering template "example/welcome.html.ep"
[2021-06-07 12:22:29.56269] [58889] [debug] [f3YoaFhkwJ42] Rendering template "layouts/default.html.ep"
[2021-06-07 12:22:29.56432] [58889] [debug] [f3YoaFhkwJ42] 200 OK (0.005004s, 199.840/s)
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Welcome&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Welcome to the Mojolicious real-time web framework!&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
  This page was generated from the template "templates/example/welcome.html.ep"
  and the layout "templates/layouts/default.html.ep",
  &amp;lt;a href="/"&amp;gt;click here&amp;lt;/a&amp;gt; to reload the page or
  &amp;lt;a href="/index.html"&amp;gt;here&amp;lt;/a&amp;gt; to move forward to a static page.
&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find &lt;a href="https://github.com/mjgardner/local_route_demo"&gt;a git repository of this work on GitHub&lt;/a&gt;, and here’s a &lt;a href="https://github.com/mjgardner/local_route_demo/commit/ea1226793ae689ce7e049b36caaebccabb581c57"&gt;commit of all the changes made to the default Mojolicious application&lt;/a&gt; so you can see the differences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jberger.github.io/"&gt;Joel Berg­er&lt;/a&gt; from the Mojo­li­cious project told me at &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;The Perl and Raku Con­fer­ence&lt;/a&gt; that it would be more idiomat­ic to use a &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Routing#Application-plugins"&gt;Mojo­li­cious plu­g­in&lt;/a&gt; rather than a plain mod­ule with an export, so here you go:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mjgardner/local_route_demo/blob/master/lib/Local/RouteDemo.pm"&gt;lib/Local/RouteDemo.pm&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;RouteDemo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# This method will run once at server start&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Load configuration from config file&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NotYAMLConfig&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure the application&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;# Add routes from plugin&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Local::RouteDemo::Plugin::Routes&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/mjgardner/local_route_demo/blob/master/lib/Local/RouteDemo/Plugin/Routes.pm"&gt;lib/Local/RouteDemo/Plugin/Routes.pm&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::Plugin::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious::Plugin&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt; &lt;span class="p"&gt;($self, $app, $conf) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Example#welcome&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="c1"&gt;# add more routes here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2</id>
    <published>2021-06-08T14:00:00Z</published>
    <updated>2021-06-08T14:00:00Z</updated>
    <category term="mojolicious"/>
    <category term="perl"/>
    <category term="webdev"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 115: String Chain and Largest Multiple</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/06/-perl-weekly-challenge-115-string-chain-and-largest-multiple.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10246</id>
    <published>2021-06-05T03:24:45Z</published>
    <updated>2021-06-07T22:50:24Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 115 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of  days (June 6, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: String Chain</h2>

<p><em>You are given an array of strings.</em></p>

<p><em>Write a script to find out if the given strings can be chained to form a circle. Print 1 if found otherwise 0.</em></p>

<pre><code>A string $S can be put before another string $T in circle if the last character of $S is same as first character of $T.
</code></pre>

<p><em>Examples:</em></p>

<pre><code>Input: @S = ("abc", "dea", "cd")
Output: 1 as we can form circle e.g. "abc", "cd", "dea".

Input: @S = ("ade", "cbd", "fgh")
Output: 0 as we can't form circle.
</code></pre>

<p>I interpreted the task as follows: find a string chain among the input strings. In other words, I looked for a possible chain among the input strings, even if some of the input strings are not part of the circular string. Reading again the task specification, it appears that the circular chain should contain all input strings (or perhaps the task was updated after I originally read it). Anyway, the task as described above is significantly easier than what I did, but I have no time this week to redo it.</p>

<h3>String Chains in Raku</h3>

<p>Since we&#8217;re looking for possible partial circular chains, we need to look at all combinations of strings. The <code>find-circle</code> subroutine uses the <code>combinations</code> and <code>permutations</code> built-in methods of Raku and for each permutation generated, the <code>test-chain</code> subroutine checks that they form a circle. There can be several solutions, but since we&#8217;re only required to print O or 1, we stop as soon as we&#8217;ve found one solution.</p>

<pre><code>my @s = "abc", "dea", "cd";

sub test-chain (@input) {
    return False if (substr @input[0], 0, 1) 
        ne substr @input[*-1], (@input[*-1]).chars - 1, 1;
    for 1..@input.end -&gt; $i {
        return False if (substr @input[$i], 0, 1)
            ne substr @input[$i-1], (@input[$i-1]).chars -1, 1;
    }
    True;
}

sub find-circle (@in) {
    for @in.combinations(2..@in.elems) -&gt; $combin {
        for $combin.permutations -&gt; $permute {
            next unless test-chain $permute;
            say $permute;
            return 1;
        }
    }
    return 0;
}

say find-circle @s;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku chain-str.raku
(abc cd dea)
1
</code></pre>

<p>I admit that I lazily used a brute-force approach here, that wouldn&#8217;t scale up too well for a large number of input string. There are better ways to solve the task, as we will see in the Perl implementation.</p>

<h3>String Chains in Perl</h3>

<p>Looking at porting the above program into Perl, my first idea was to implement the Raku built-in <code>combinations</code>/<code>permutations</code> methods in Perl. Nothing complicated, but a bit of a pain in the neck. Thinking about that, however, another idea came to me: in a circular chain of strings, the list of first letters is the same as the list of last letters. So, if we can make a list of first letters that are also last letters, then we have a solution.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @s = ("abc", "dea", "cd", "xyz");

sub find_circle {
    # remove useless strings starting and ending with the same letter
    my @s = grep { not /^(\w)\w+$0$/} @_;
    my %first = map { (substr $_, 0, 1) =&gt; 1 } @s;
    say Dumper \%first;
    my %last = map { (substr $_, -1, 1) =&gt; 1 } grep { exists $first{substr $_, -1, 1 }}  @s;
    return scalar keys %last &gt; 1 ? 1 : 0;
}
say find_circle @s;
</code></pre>

<p>Output:</p>

<pre><code>$ perl chain-str.pl
1
</code></pre>

<h2>Task 2: Largest multiple</h2>

<p><em>You are given a list of positive integers (0-9), single digit.</em></p>

<p><em>Write a script to find the largest multiple of 2 that can be formed from the list.</em></p>

<p><em>Examples:</em></p>

<pre><code>Input: @N = (1, 0, 2, 6)
Output: 6210

Input: @N = (1, 4, 2, 8)
Output: 8412

Input: @N = (4, 1, 7, 6)
Output: 7614
</code></pre>

<p>I think that the simplest way to get the largest number from a list of digits is to sort the digits in descending order and concatenate them. Since we additionally need the number to be even, we can, if needed, swap the last digit with the last even digit. Note that the problem has no solution if all digits are odd.</p>

<h3>Largest Multiple in Raku</h3>

<p>This is a Raku implementation of the algorithm described above:</p>

<pre><code>sub find-largest (@in) {
    my @sorted = @in.sort.reverse;
    return @sorted if @sorted[*-1] %% 2;
    for (0..@in.end).reverse -&gt; $i {
        # swap smallest even digit with last digit
        if @sorted[$i] %% 2 {
            @sorted[$i, *-1] = @sorted[*-1, $i];
            return @sorted;
        }
    }
    return (); # Failed, no even digit
}
for &lt;1 0 2 6&gt;, &lt;1 3 2 6&gt;, 
    &lt;1 3 5 7&gt;, &lt;1 4 2 8&gt; -&gt; @test {
    my @result = find-largest @test;
    print @test, ": ";
    if @result.elems &gt; 0 {
        say "Solution: ", @result.join('');
    } else {
        say "No solution"; 
    }
}
</code></pre>

<p>This program displays the following output for the given test cases:</p>

<pre><code>$ raku ./mult-of-2.raku
1 0 2 6: Solution: 6210
1 3 2 6: Solution: 6312
1 3 5 7: No solution
1 4 2 8: Solution: 8412
</code></pre>

<h3>Largest Multiple in Perl</h3>

<p>This is an implementation of the same algorithm in Perl:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub find_largest {
    my @sorted = reverse sort @_;
    return @sorted if $sorted[-1] % 2 == 0;
    for my $i (reverse 0..$#sorted) {
        # swap smallest even digit with last digit
        if ($sorted[$i] % 2 == 0) {
            @sorted[$i, -1] = @sorted[-1, $i];
            return @sorted;
        }
    }
    return (); # Failed, no even digit
}
for my $test ( [qw&lt;1 0 2 6&gt;], [qw&lt;1 3 2 6&gt;], 
               [qw&lt;1 3 5 7&gt;], [qw&lt;1 4 2 8&gt;] ) {
    my @result = find_largest(@$test);
    print @$test, ": ";
    if (@result &gt; 0) {
        say "Solution: ", join '', @result;
    } else {
        say "No solution"; 
    }
}
</code></pre>

<p>This program displays the following output for given test cases:</p>

<pre><code>$ perl  multiple-of2.pl
1026: Solution: 6210
1326: Solution: 6312
1357: No solution
1428: Solution: 8412
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, June 13, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 116</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-116-1mf7" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-116/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-116/sgreen">My solutions</a></p>

<h1>
  <a href="#tipsy">
  </a>
  Tipsy
</h1>

<p>The <a href="https://perlconference.us/tprc-2021-cloud/">Perl Conference</a> is this week, and there are many speakers I'm looking forward too. I do have a ticket to support the effort, but won't watch too many live. The event is 1am - 8am AEST, which kinda sucks for me.</p>

<p>On to this week's task.</p>

<h1>
  <a href="#what-is-a-number">
  </a>
  What is a number?
</h1>

<p>Ask I stranger on a street (in a Covid safe way of course!) to pick a number between one and 6, and they are likely to say one of six answers (one, two, three, four, five or six). Never 3.4, or 2.6. This was featured in an episode of <a href="https://en.wikipedia.org/wiki/Numbers_(TV_series)">Numb3rs</a>. We are programmers, and think differently. So whenever a task mentions numbers, I always consider the case of a non-whole number. No, I don't think about <a href="https://en.wikipedia.org/wiki/Complex_number">complex numbers</a> :P</p>

<h1>
  <a href="#task-1-number-sequence">
  </a>
  TASK #1 › Number Sequence
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a number <code>$N</code> &gt;= 10.</p>

<p>Write a script to split the given number such that the difference between two consecutive numbers is always 1 and it shouldn’t have leading 0.</p>

<p>Print the given number if it impossible to split the number.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>Firstly, the straight forward bit. I have a loop called <code>$length</code> from 1 to the length of the number. Within this loop I have an array <code>@sequence</code>. The array starts with the first <code>$length</code> digits, and adds the next number to the array until the length of all the digits in the sequence is equal or greater than the length of the input. If the numbers match, we have a solution. If they don't we increase the <code>$length</code> and try again.</p>

<p>However, it would appear that the number <code>910.011</code> would also be a valid solution (9, 10.0, 11). The difference between these numbers is always one and doesn't have any leading zeros. This <code>hack</code> only works if the digits after the decimal point is 0 or we have a single value.</p>

<p>Based on this, I have some extra logic in the code to handle the situation where the regular expression <code>\.0+</code> (a dot followed by one or more zeros) appears in the code. Maybe I'm just overthinking this, or maybe it's intentional.</p>

<p>As Colin noted in this week's <a href="https://perlweeklychallenge.org/blog/review-challenge-113/">Perl review</a>, "Given any ambiguity in a text, given enough people and enough time every possible position will eventually be witnessed. It's just a given to me now"</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 1234
1,2,3,4

$ ./ch-1.pl 91011
9,10,11

$ ./ch-1.pl 10203
10203

$ ./ch-1.pl 910.011
9,10.0,11
</code></pre>

</div>



<h1>
  <a href="#task-2-sum-of-squares">
  </a>
  TASK #2 › Sum of Squares
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a number <code>$N</code> &gt;= 10.</p>

<p>Write a script to find out if the given number <code>$N</code> is such that sum of squares of all digits is a perfect square. Print <code>1</code> if it is otherwise <code>0</code>.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This is relatively straight forward. If the number is not an integer, we remove the decimal point. It servers no use for the purpose of this task (assuming $N &gt;= 10).</p>

<p>We can find the square of all digits using the code <code>sum( map { $_**2 } split //, $number )</code>, which separates the digits, gets the square and sums up all the results.</p>

<p>We then use the <code>sqrt</code> function to get the square root of the sum. If this is an integer, we print <code>1</code>, otherwise we print <code>0</code>.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 34
1

$ ./ch-2.pl 50
1

$ ./ch-2.pl 52
0

$ ./ch-2.pl 30.4
1
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-116-1mf7</id>
    <published>2021-06-07T11:54:58Z</published>
    <updated>2021-06-07T11:54:58Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Let’s do an experiment! Perl role in Canberra, Australia</title>
    <link rel="alternate" href="https://job.perl.careers/4ej" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Applying this clever approach to the use of their innovative genotyping software, this thoughtful company helps to develop new species of plants. They deliver cost-efficient genotyping technology that promotes the development of better, stronger crops adapted to suit their environment. You’ll be familiar with modern tooling and might have experience with Ansible, AWS, and Linux containers.</div>
    </content>
    <id>https://job.perl.careers/4ej</id>
    <published>2021-06-07T10:00:28Z</published>
    <updated>2021-06-07T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Not All Heroes Wear Capes. Perl in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/7t1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client takes the legwork out of the hunt for the best bargain, offering one of the largest product and price comparison platforms in German-speaking countries. They’re looking for a heroic Perl programmer to develop and deliver quality content and all the info users need to find their gadgets for the right price.</div>
    </content>
    <id>https://job.perl.careers/7t1</id>
    <published>2021-06-07T10:00:27Z</published>
    <updated>2021-06-07T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Cooking Up Something Good. Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/vv3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With a knack for tailoring content to a variety of site aesthetics, our client sets a banquet of advertising delights for over 349 million consumers around the world. If your mouth is watering at the thought of joining this dynamic team and you’re a senior Perl programmer with a solid understanding of Go programming languages, they just might set a place for you at the table.</div>
    </content>
    <id>https://job.perl.careers/vv3</id>
    <published>2021-06-07T10:00:26Z</published>
    <updated>2021-06-07T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Doers Wanted. Perl Developer role in Pittsburgh, PA</title>
    <link rel="alternate" href="https://job.perl.careers/dj8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you’re a Perl software engineer who enjoys distilling broadly defined objectives into actionable tasks, this might just be your next career move. This client is looking for someone who will design and build the tools their customers need. You’ll coordinate implementation, testing, deployment, and maintenance across multiple systems.</div>
    </content>
    <id>https://job.perl.careers/dj8</id>
    <published>2021-06-07T10:00:25Z</published>
    <updated>2021-06-07T10:00:25Z</updated>
  </entry>
  <entry>
    <title>A Gem of a Perl role. Remote within UK &amp; EU</title>
    <link rel="alternate" href="https://job.perl.careers/lku" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This role is 100% remote and it’s open to residents of the United Kingdom, Switzerland, and the European Economic Area. If your communication skills in English are out of this world, you’re in! Also, who even wants to get dressed for the office anymore, right? You’ll need experience writing great Perl, along with valid HTML, Javascript, and CSS.</div>
    </content>
    <id>https://job.perl.careers/lku</id>
    <published>2021-06-07T10:00:24Z</published>
    <updated>2021-06-07T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, July 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-06-07T10:00:23Z</published>
    <updated>2021-06-07T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, June 30, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-06-07T10:00:22Z</published>
    <updated>2021-06-07T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, June 9, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-06-07T10:00:21Z</published>
    <updated>2021-06-07T10:00:21Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-06-07T10:00:20Z</published>
    <updated>2021-06-07T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Crystal 1.0 Conference</title>
    <link rel="alternate" href="https://crystal-lang.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In my spare time I have been learning Crystal and writing a web application. The result is that I'll be also presenting at the Crystal conference.</div>
    </content>
    <id>https://crystal-lang.org/</id>
    <published>2021-06-07T10:00:19Z</published>
    <updated>2021-06-07T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Automation, Dockerization, CI/CD for your team</title>
    <link rel="alternate" href="https://www.linkedin.com/posts/szabgab_test-automation-ci-activity-6802518496128331777-QUXo" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">About 10 days ago I posted on LinkedIn that I am open for new clients that need help in (test) automation, Dockerization, implementing CI/CD, or in code improvements. Especially in Perl or Python. To my pleasant surprise quite a few people upvoted my post, some shared it. I got 7 requests and have already started to work at one of these clients. Nevertheless I still have some extra time and would be also interested to have an overseas client. So if your company needs such help, let's talk.</div>
    </content>
    <id>https://www.linkedin.com/posts/szabgab_test-automation-ci-activity-6802518496128331777-QUXo</id>
    <published>2021-06-07T10:00:18Z</published>
    <updated>2021-06-07T10:00:18Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/06/cccxliv-12-great-cpan-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/06/cdlxx-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/06/cdxciii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-06-07T10:00:17Z</published>
    <updated>2021-06-07T10:00:17Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 115</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-115" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "String Chain" and "Largest Multiple" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-115</id>
    <published>2021-06-07T10:00:16Z</published>
    <updated>2021-06-07T10:00:16Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 116</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-116" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with a couple of fun tasks "Number Sequence" and "Sum of Squares". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-116</id>
    <published>2021-06-07T10:00:15Z</published>
    <updated>2021-06-07T10:00:15Z</updated>
  </entry>
  <entry>
    <title>RakuAST Grant Report for May 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/20201-05-rakuast-grant-report" type="text/html"/>
    <id>https://news.perlfoundation.org/post/20201-05-rakuast-grant-report</id>
    <published>2021-06-07T10:00:14Z</published>
    <updated>2021-06-07T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal Recap: May 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposal_recap_may_2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposal_recap_may_2021</id>
    <published>2021-06-07T10:00:13Z</published>
    <updated>2021-06-07T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Suggestions on improving the Perl Weekly Challenge</title>
    <link rel="alternate" href="https://brtastic.xyz/blog/article/improving-pwc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With some discussion <a href="https://www.reddit.com/r/perl/comments/nqjlot/suggestions_on_improving_the_perl_weekly_challenge/">here</a>. I would especially point out that after the initial angry response and the clarification Diab Jerius appologized. That shows a much higher maturity than we have seen in recent weeks. (Diab was also right that the original blog post without the background could have been misunderstood.)</div>
    </content>
    <id>https://brtastic.xyz/blog/article/improving-pwc</id>
    <published>2021-06-07T10:00:12Z</published>
    <updated>2021-06-07T10:00:12Z</updated>
  </entry>
  <entry>
    <title>What's your preferred way to "dir(obj)" i.e. list methods/subroutines of an object?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/ns4eky/whats_your_preferred_way_to_dirobj_ie_list/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Python provides excellent ways to introspect an object. Perl less so. This makes it difficult to create editing tools and makes the life of people who are not yet experts in the specific libraries (which is basically everyone) harder.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/ns4eky/whats_your_preferred_way_to_dirobj_ie_list/</id>
    <published>2021-06-07T10:00:11Z</published>
    <updated>2021-06-07T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Mojolicious::Plugin::Authentication</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/06/06/mojolicious-plugin-authentication/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Notes/tutorial for using Mojolicious::Plugin::Authentication.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/06/06/mojolicious-plugin-authentication/</id>
    <published>2021-06-07T10:00:10Z</published>
    <updated>2021-06-07T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Crypt::Argon2</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/06/05/crypt-argon2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Using Crypt::Argon2 is probably a better alternative to Bcrypt password hashing.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/06/05/crypt-argon2/</id>
    <published>2021-06-07T10:00:09Z</published>
    <updated>2021-06-07T10:00:09Z</updated>
  </entry>
  <entry>
    <title>VSCode as a Perl IDE </title>
    <link rel="alternate" href="https://dev.to/perldean/vscode-as-a-perl-ide-3cco" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I have been using VSCode for some time now though not for Perl yet.</div>
    </content>
    <id>https://dev.to/perldean/vscode-as-a-perl-ide-3cco</id>
    <published>2021-06-07T10:00:08Z</published>
    <updated>2021-06-07T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Crypt::URandom</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/06/04/crypt-urandom/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Crypt::URandom might come handy for portability.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/06/04/crypt-urandom/</id>
    <published>2021-06-07T10:00:07Z</published>
    <updated>2021-06-07T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Open, sysopen, read, sysread... oh my!</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/06/01/open-sysopen-etc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">open and read are usually fine</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/06/01/open-sysopen-etc/</id>
    <published>2021-06-07T10:00:06Z</published>
    <updated>2021-06-07T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Should Perl die gracefully?</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A provocative title essentially that does not talk about exception handling. Or does it?</div>
    </content>
    <id>https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/</id>
    <published>2021-06-07T10:00:05Z</published>
    <updated>2021-06-07T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Random bytes and co.</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/31/random-bytes-and-co/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Generating some randomness for seeds, using some salt for flavoring.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/31/random-bytes-and-co/</id>
    <published>2021-06-07T10:00:04Z</published>
    <updated>2021-06-07T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Part 7 video of pair programming a Perl web app</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/05/31/part-7-video-of-pair-programming-a-perl-web-app/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">To see the full series, check <a href="https://perlmaven.com/course-management-app-in-mojolicious">here</a>.</div>
    </content>
    <id>https://phoenixtrap.com/2021/05/31/part-7-video-of-pair-programming-a-perl-web-app/</id>
    <published>2021-06-07T10:00:03Z</published>
    <updated>2021-06-07T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.301004 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released-1.html" type="text/html"/>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released-1.html</id>
    <published>2021-06-07T10:00:02Z</published>
    <updated>2021-06-07T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.301003 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released.html" type="text/html"/>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released.html</id>
    <published>2021-06-07T10:00:01Z</published>
    <updated>2021-06-07T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#515 - Events and blog posts</title>
    <link rel="alternate" href="http://perlweekly.com/archive/515.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>As I can see <a href="https://perlconference.us/tprc-2021-cloud/">The Perl and Raku Conference in the cloud</a> starts tomorrow. I am a bit confused as don't remember a lot of promotion of the event.</p>
<p>Some people complain that the content created by the Perl Weekly Challenge has flooded the Perl Weekly Newsletter. I'd say if there was more Perl content outside of the PWC that we can share then we could consider reducing the amount of space the PWC takes up.</p>
<p>BTW that reminds me, I think the <a href="https://perlweekly.com/events.html">events</a> page and the events section at the bottom of the newsletter is shrinkig as the event organizers rarely send updates. I guess having these links did not bring them visitors.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/515.html</id>
    <published>2021-06-07T10:00:00Z</published>
    <updated>2021-06-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Dancer2 0.301004 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released-1.html"/>
    <id>tag:blogs.perl.org,2021:/users/jason_a_crome//712.10248</id>
    <published>2021-06-06T22:32:33Z</published>
    <updated>2021-06-06T22:36:09Z</updated>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>On behalf of the Dancer Core Team, I'd like to announce the availability of Dancer2 0.301004. This is a maintenance release with two bug fixes only: one corrects an omission from the tutorial, and the other adds a missing dependency to Dancer2's cpanfile.</p>

<p>You can read the complete [changelog](https://metacpan.org/changes/distribution/Dancer2) <br />
here. If you need help, please reach out on IRC (irc.perl.org#dancer) or our <br />
[mailing list](https://lists.perldancer.org).</p>

<p>Happy Dancing!  <br />
Jason/CromeDome<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>The Weekly Challenge 115</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/05#pwc115" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of strings. Write a script to find out if the given strings can be
chained to form a circle. Print 1 if found otherwise 0. A string $S can be put before 
another string $T in circle if the last character of $S is same as first character of $T.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub build_graph{
    my @words;
    my %first_letter_name;
    my $graph = new Graph();
    while(my $s = &lt;DATA&gt;){
        chomp($s);
        my $first_letter = substr($s, 0, 1);
        if($first_letter_name{$first_letter}){
            push @{$first_letter_name{$first_letter}}, $s;
        }
        else{
            $first_letter_name{$first_letter} = [$s];
        }
        push @words, $s;
    }
    for my $word (@words){
        $graph-&gt;add_vertex($word) if !$graph-&gt;has_vertex($word);
        my $child_nodes = $first_letter_name{substr($word, -1)};
        for my $n (@{$child_nodes}){
            $graph-&gt;add_vertex($n) if !$graph-&gt;has_vertex($n);
            $graph-&gt;add_weighted_edge($word, $n, (-1 * length($n))) if !$graph-&gt;has_edge($word, $n);
            $graph-&gt;delete_edge($word, $n) if $graph-&gt;has_a_cycle();
        }
    }
    return $graph;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ ]" if @a == 1;
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]" if @a &gt; 1;
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = build_graph();
    my @cc = $graph-&gt;weakly_connected_components();
    print "1\n" if @cc == 1;
    print "0\n" if @cc != 1;
    display_graph($graph);
}

__DATA__
ab
bea
cd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
+----+     +-----+
| ab | ==&gt; | bea |
+----+     +-----+
+----+
| cd | ==&gt;
+----+
$ perl perl/ch-1.pl
1
+-----+     +-----+     +----+
| dea | ==&gt; | abc | ==&gt; | cd |
+-----+     +-----+     +----+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Task #1 is very similar to the 
&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt; task from Challenge
025. This task is actually a part of that previous challenge in that here we do not need
to compute the longest possible chain of strings; we just need to confirm that the chain
exists.&lt;/p&gt;

&lt;p&gt;The approach here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read in the words and construct the directed graph
&lt;/li&gt;
&lt;li&gt;check to see that the number of &lt;em&gt;connected components&lt;/em&gt; is one. If so, print 1. Otherwise
print 0.
&lt;/li&gt;
&lt;li&gt;display the graph (an optional data visualization step)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function used to determine the number of connected components is 
&lt;code&gt;weakly_connected_components()&lt;/code&gt;. This is because the chain is constructed as a directed
graph and the idea of a connected component is defined for undirected graphs. Weakly
connected components are determined by whether or not the nodes are connected if we ignore
the direction of the edges. This is what we want for our use case here, as opposed to
&lt;em&gt;strongly connected components&lt;/em&gt;. To determine strongly connected components we would
need bi-directional edges for each link in the chain. No need to overcomplicate this with
extra edges...the desired result is obtained just fine as is!&lt;/p&gt;

&lt;p&gt;In the example output the first run shows two connected components, therefor no chain
exists. In the second output the chain is shown, there is one connected component.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of positive integers (0-9), single digit. Write a script to find the
largest multiple of 2 that can be formed from the list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub largest_multiple_2{
    my @numbers = @_;
    return unless grep { $_ % 2 == 0 } @numbers;
    my @sorted = sort {$b &lt;=&gt; $a} @numbers;
    if(@sorted &gt;= 2){
        my $ultima = @sorted[@sorted - 1];
        if($ultima % 2 != 0){
            my $swap_index = -1;
            for(my $i = @sorted - 2; $i &gt;= 0; $i--){
                $swap_index = $i if $sorted[$i] % 2 == 0;
                last if $swap_index &gt; 0;
            }
            $sorted[@sorted - 1] = $sorted[$swap_index];
            $sorted[$swap_index] = $ultima;
        }
    }
    return join("", @sorted);
}

MAIN:{
    my @N;
    @N = (1, 0, 2, 6);
    print largest_multiple_2(@N) . "\n";
    @N = (1, 4, 2, 8);
    print largest_multiple_2(@N) . "\n";
    @N = (4, 1, 7, 6);
    print largest_multiple_2(@N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6210
8412
7614
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Suppose we did not have the "multiple of 2" restriction and instead had to arrange a list
of numbers to have maximal value when concatenated together. The solution, then, would be
to sort the numbers in descending order and concatenate the digits in this sorted order.&lt;/p&gt;

&lt;p&gt;Here we can still use that same logic but more care is needed. &lt;/p&gt;

&lt;p&gt;First, let's remind ourselves that we can check to see if any number is a multiple of 2 by
checking if it's rightmost digit is a multiple of 2 (including 0).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to make sure we have at least one digit which is a multiple of 2. If not, then
there is no need to continue.
&lt;/li&gt;
&lt;li&gt;Sort the numbers, but then inspect the final digit in descending order. Is it a multiple
of 2? If so, then we are done!
&lt;/li&gt;
&lt;li&gt;If the final digit is not a multiple of 2 then search the sorted list starting from the
final digit and working "upwards". We had previously made sure we had at least one 
multiple of 2 so we are certain to find one. When we find it we need to swap it with the 
final digit to insure that the entire number itself is a multiple of 2.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115/"&gt;Challenge 115&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/9171.html"&gt;Pokemon Name Ladder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/WeaklyConnectedComponent.html"&gt;Weakly Connected Component&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc115</id>
    <published>2021-06-05T23:34:00-04:00</published>
    <updated>2021-06-05T23:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1994220107847254290</id>
    <published>2021-06-05T16:39:00.001+02:00</published>
    <updated>2021-06-05T16:39:49.845+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxliv) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/App-lcpan-1.066' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::lcpan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage your local CPAN mirror &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.066&lt;/strong&gt; on 2021-05-31&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.034 was 1 year, 11 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/CGI-4.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CGI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handle Common Gateway Interface requests and responses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.53&lt;/strong&gt; on 2021-06-03&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.52 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301003&lt;/strong&gt; on 2021-06-03&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 0.301002 was 1 month, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2021-05-31&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.50 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BOOK/Git-Repository-1.325' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Git::Repository&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to Git repositories &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.325&lt;/strong&gt; on 2021-05-31&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.324 was 1 year, 9 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.28&lt;/strong&gt; on 2021-06-04&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.26 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.19&lt;/strong&gt; on 2021-06-02&lt;/li&gt;  &lt;li&gt;Votes: 452&lt;/li&gt;  &lt;li&gt;Previous version: 9.18 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.7003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.7003&lt;/strong&gt; on 2021-06-02&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.7002 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.050' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.050&lt;/strong&gt; on 2021-06-02&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.048 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/POE-Component-IRC-6.91' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;POE::Component::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A fully event-driven IRC client module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.91&lt;/strong&gt; on 2021-06-05&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.90 was 3 years, 9 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.25&lt;/strong&gt; on 2021-06-01&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.24 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.4.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.4.0&lt;/strong&gt; on 2021-06-04&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.3.0 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1994220107847254290/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxliv-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1994220107847254290"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1994220107847254290"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cccxliv-12-great-cpan-modules-released.html" title="(cccxliv) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-112782186026138787</id>
    <published>2021-06-05T16:36:00.001+02:00</published>
    <updated>2021-06-05T16:36:58.135+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxx) metacpan weekly report </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 107&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/06/05 14:35:54 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Boolean" target="_blank"&gt;Acme::Boolean&lt;/a&gt; - There is more then one way to be true.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alter" target="_blank"&gt;Alter&lt;/a&gt; - Alter Ego Objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLASS" target="_blank"&gt;CLASS&lt;/a&gt; - Alias for __PACKAGE__&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor::Lazy" target="_blank"&gt;Class::Accessor::Lazy&lt;/a&gt; - class accessors generation with lazy accessors and fast mode support.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::ArrayObjects" target="_blank"&gt;Class::ArrayObjects&lt;/a&gt; - utility class for array based objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Axelerator" target="_blank"&gt;Class::Axelerator&lt;/a&gt; - Evade OO taxes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Closure" target="_blank"&gt;Class::Closure&lt;/a&gt; - Encapsulated, declarative class style&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Constructor" target="_blank"&gt;Class::Constructor&lt;/a&gt; - Simplify the creation of object constructors&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::FakeAttributes" target="_blank"&gt;Class::FakeAttributes&lt;/a&gt; - Provide fake attributes for non-hash-based objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Field" target="_blank"&gt;Class::Field&lt;/a&gt; - Class Field Accessor Generator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Implements" target="_blank"&gt;Class::Implements&lt;/a&gt; - pretend that your class is another class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Object" target="_blank"&gt;Class::Object&lt;/a&gt; - each object is its own class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Property" target="_blank"&gt;Class::Property&lt;/a&gt; - Perl implementation of class properties.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Rebless" target="_blank"&gt;Class::Rebless&lt;/a&gt; - Rebase deep data structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tie::InsideOut" target="_blank"&gt;Class::Tie::InsideOut&lt;/a&gt; - Inside-out objects on the cheap using tied hashes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum::fields" target="_blank"&gt;enum::fields&lt;/a&gt; - Perl extension for defining constants for use in Array-based objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Enumeration" target="_blank"&gt;Enumeration&lt;/a&gt; - Yet Another enumeration class implementation.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/exact::class" target="_blank"&gt;exact::class&lt;/a&gt; - Simple class interface extension for exact&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Declare" target="_blank"&gt;Exporter::Declare&lt;/a&gt; - Exporting done right&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExportTo" target="_blank"&gt;ExportTo&lt;/a&gt; - export any function/method to any namespace&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HashBang" target="_blank"&gt;HashBang&lt;/a&gt; - Write your own language interpreters&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Import" target="_blank"&gt;Lexical::Import&lt;/a&gt; - clean imports from package-exporting modules&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::EMA" target="_blank"&gt;Math::EMA&lt;/a&gt; - compute the exponential moving average&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mo::xxx" target="_blank"&gt;Mo::xxx&lt;/a&gt; - Add XXX support to classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::WebSocket::EV" target="_blank"&gt;Net::WebSocket::EV&lt;/a&gt; - Perl wrapper around Wslay websocket library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/no" target="_blank"&gt;no&lt;/a&gt; - Now `use no` is not a `no no`&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Realize::Later" target="_blank"&gt;Object::Realize::Later&lt;/a&gt; - Delayed realization of objects&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::InputOutput::ProhibitHighPrecedentLogicalOperatorErrorHandling" target="_blank"&gt;Perl::Critic::Policy::InputOutput::ProhibitHighPrecedentLogicalOperatorErrorHandling&lt;/a&gt; - prohibits logical error handling in open statements&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::RegularExpressions::RequireDefault" target="_blank"&gt;Perl::Critic::Policy::RegularExpressions::RequireDefault&lt;/a&gt; - Always use the /a or /aa modifier with regular expressions.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perldoc" target="_blank"&gt;Perldoc&lt;/a&gt; - Documentation Framework for Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::App::SourceViewer" target="_blank"&gt;Plack::App::SourceViewer&lt;/a&gt; - The Source Code Viewer for Plack&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::AutoRefresh" target="_blank"&gt;Plack::Middleware::AutoRefresh&lt;/a&gt; - Reload pages in browsers when files are modified&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::REPL" target="_blank"&gt;Plack::Middleware::REPL&lt;/a&gt; - REPL when your application throws errors or warnings&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prometheus::Tiny" target="_blank"&gt;Prometheus::Tiny&lt;/a&gt; - A tiny Prometheus client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/rig" target="_blank"&gt;rig&lt;/a&gt; - Bundle up your favorite modules and imports into one call&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Exporter::Lexical" target="_blank"&gt;Sub::Exporter::Lexical&lt;/a&gt; - to export lexically-available subs with Sub::Exporter&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Mage" target="_blank"&gt;Sub::Mage&lt;/a&gt; - Multi-Use utility for manipulating subroutines, classes and more.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/the" target="_blank"&gt;the&lt;/a&gt; - This is teh, best module evar!&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/asa" target="_blank"&gt;asa&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Assert::Conditional" target="_blank"&gt;Assert::Conditional&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::Simple::LDAP" target="_blank"&gt;Authen::Simple::LDAP&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Core" target="_blank"&gt;autobox::Core&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Lambda" target="_blank"&gt;AWS::Lambda&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bible::OBML::Gateway" target="_blank"&gt;Bible::OBML::Gateway&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/boolean" target="_blank"&gt;boolean&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Accessor" target="_blank"&gt;Class::Accessor&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Enum" target="_blank"&gt;Class::Enum&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::MethodMaker" target="_blank"&gt;Class::MethodMaker&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::OOorNO" target="_blank"&gt;Class::OOorNO&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Const::Fast" target="_blank"&gt;Const::Fast&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/decorators" target="_blank"&gt;decorators&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum" target="_blank"&gt;enum&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum::hash" target="_blank"&gt;enum::hash&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum::prefix" target="_blank"&gt;enum::prefix&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/exact" target="_blank"&gt;exact&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Auto" target="_blank"&gt;Exporter::Auto&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Lexical" target="_blank"&gt;Exporter::Lexical&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Lite" target="_blank"&gt;Exporter::Lite&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Simple" target="_blank"&gt;Exporter::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Share" target="_blank"&gt;File::Share&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/forks" target="_blank"&gt;forks&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Tiny" target="_blank"&gt;Form::Tiny&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::IP" target="_blank"&gt;Geo::IP&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gloom" target="_blank"&gt;Gloom&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gravatar::URL" target="_blank"&gt;Gravatar::URL&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Into" target="_blank"&gt;Import::Into&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Importer" target="_blank"&gt;Importer&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/inc" target="_blank"&gt;inc&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::Module" target="_blank"&gt;Inline::Module&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::YAML" target="_blank"&gt;Inline::YAML&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jemplate" target="_blank"&gt;Jemplate&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONY" target="_blank"&gt;JSONY&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Var" target="_blank"&gt;Lexical::Var&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingy" target="_blank"&gt;Lingy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mixin" target="_blank"&gt;mixin&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Pluggable" target="_blank"&gt;Module::Pluggable&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moops" target="_blank"&gt;Moops&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ" target="_blank"&gt;Net::AMQP::RabbitMQ&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Phone" target="_blank"&gt;Number::Phone&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Sub" target="_blank"&gt;Object::Sub&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/only" target="_blank"&gt;only&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=378)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl5" target="_blank"&gt;perl5&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=223)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::App::Proxy" target="_blank"&gt;Plack::App::Proxy&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Session::Simple" target="_blank"&gt;Plack::Middleware::Session::Simple&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::ProcessTable" target="_blank"&gt;Proc::ProcessTable&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PSGI" target="_blank"&gt;PSGI&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Safe::Isa" target="_blank"&gt;Safe::Isa&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::Properties" target="_blank"&gt;Scalar::Properties&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Spiffy" target="_blank"&gt;Spiffy&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Import" target="_blank"&gt;Sub::Import&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SUPER" target="_blank"&gt;SUPER&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Differences" target="_blank"&gt;Test::Differences&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=170)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Smoke" target="_blank"&gt;Test::Smoke&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Toolkit" target="_blank"&gt;Toolkit&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ToolSet" target="_blank"&gt;ToolSet&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XXX" target="_blank"&gt;XXX&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/112782186026138787/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/112782186026138787"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/112782186026138787"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/06/cdlxx-metacpan-weekly-report.html" title="(cdlxx) metacpan weekly report "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Let's be friend ...</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/06/let.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10245</id>
    <published>2021-06-05T03:23:46Z</published>
    <updated>2021-06-05T03:31:13Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlweeklychallenge" label="perl weekly challenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/lets-be-friend.jpg"/></p>

<p>Let me share my views in response to the questions raised.</p>

<p><a href="https://perlweeklychallenge.org/blog/lets-be-friend/">https://perlweeklychallenge.org/blog/lets-be-friend</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Dancer2 0.301003 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/06/dancer2-0301003-released.html"/>
    <id>tag:blogs.perl.org,2021:/users/jason_a_crome//712.10244</id>
    <published>2021-06-03T18:30:42Z</published>
    <updated>2021-06-03T18:51:25Z</updated>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>On behalf of the Dancer Core Team, I'd like to announce the availability of Dancer2 0.301003. While there are a number of bug fixes and documentation improvements in this release, there are two new features that I'd like to point out:</p>

<ul>
<li><p><strong>Git support from the CLI:</strong> When scaffolding a new Dancer2 app from the command line, you can now initialize a new Git repository and set the remote all at once. Passing the <code>--git</code> option to <code>dancer2 gen</code> will initialize a new repository, and <code>--remote</code> will take a URL for your remote repository (<code>git://</code> and <code>https://</code> are both supported). </p></li>
<li><p><strong>Out-of-the-box Docker support:</strong> There are a lot of ways to containerize your Dancer2 application, but sometimes we all need a little help getting started. Using the <code>--docker</code> argument to <code>dancer2 gen</code> creates a Dockerfile for your application based on the latest stable Perl image available. Once your application is generated, there are instructions for how to run your app via <code>plackup</code> or Docker.</p></li>
</ul>

<p>You can read the complete <a href="https://metacpan.org/changes/distribution/Dancer2">changelog</a> 
here. If you need help, please reach out on IRC (irc.perl.org#dancer) or our 
<a href="https://lists.perldancer.org">mailing list</a>.</p>

<p>I'd like to thank Oliver Marketing for their contributions towards the development of Dancer2, and our community for the ideas, questions, bug reports, and support of the Core Team and what we do. Thanks for making our little slice of the greater Perl community a nice place to be.</p>

<p>Happy Dancing! <br />
Jason/CromeDome</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Monthly Report - May</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/06/monthly-report---may-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10243</id>
    <published>2021-06-03T05:29:04Z</published>
    <updated>2021-06-03T05:41:36Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-05.jpg"/></p>

<p><strong>Time to celebrate ...</strong></p>

<p>As you all know, I joined <a href="https://www.oleeo.com/">Oleeo</a> last month, it was busy getting my head around the code base and infrastructure. I had to slow down my activities with regard to the routine <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a> tasks.</p>

<p>I would like to talk about two happy interactions last month. Ever since I started the <strong>Perl Weekly Challenge</strong> project, I hardly find time to contribute to CPAN whether it is my personal distributions or others. The only time I contribute to others work is when I get my monthly assignment from <strong>Pull Request Club</strong>. Lets get back to the subject, last month, I received <a href="https://rt.cpan.org/Ticket/Display.html?id=136670">RT #136670</a> from <strong>James Wright</strong> with regard to my distribution <a href="https://metacpan.org/pod/App::Search::BackPAN">App::Search::BackPAN</a>. He pointed out the code is broken and doesn't return expected result. He even proposed the fix, which is always handy. The very same day, I had the patch uploaded to <strong>CPAN</strong>. It feels nice that someone is using my distribution and on top of that cares to raise an issue they encounter. It brought back the good old memories when I used to upload patches to <strong>CPAN</strong> every day. I did that <strong>1027 days</strong> nonstop in the past.</p>

<p>The second happy moment came when a colleague in my new office, <strong>Oleeo</strong>, asked for help with my distribution <a href="https://metacpan.org/pod/Test::Excel">Test::Excel</a>. She wanted to compare two excel files only certain cells and ignoring rest. My existing code would only work if you provide sheet name in the specification. Since she was generating the Excel file runtime, the sheet name is not always known before. I did quick patch and added the feature to support her requirements. With little help, she finally had what we was after to begin with. I was very happy to be able to help her.</p>

<p><strong>How's everything else going on in new office?</strong></p>

<p>Well, things are moving slowly but steady. First couple of weeks, I looked at some of the core Perl libraries to familiarize myself. After a long time, I saw code doing <strong>hash slicing</strong>. I must admit, it confused me initially. Right now I doing some DevOps basic, getting my hand dirty with <strong>Ansible</strong>. So far so good, I hope to write some Perl code soon. The work environment is very relax and friendly. There is always someone to help you in difficult times.</p>

<p>Talking about my live coding sessions, I could only do few as I am too busy with my office work. Generally I don't get comment on my videos but this time I was lucky. <strong>Dave Cross</strong> commented in one of my recent videos and suggested cool hack. I am so grateful to him for his advice.</p>

<p>As I mentioned above, I don't get time to contribute to others distribution on <strong>CPAN</strong>, my only adventure is when I receive the monthly assignment from <strong>Pull Request Club</strong>. I noticed that most of the time, I get distributions by one author, <strong>Renee Baecker</strong>. He is my personal favourite too as I get instant response to my <strong>Pull Request</strong>. The acceptance of <strong>Pull Request</strong> is always guaranteed. I must admit, my contributions is only limited to basics and nothing extravagant. I know there are players who do serious contributions. I used to do as well in the past when I had time.</p>

<p>Some of my personal favourites with maximum acceptance rate.</p>

<ul>
<li><strong>Renee Baecker</strong>: PR submitted (104), Merged PR (96)</li>
<li><strong>Gabor Szabo</strong>: PR submitted (101), Merged PR (101)</li>
<li><strong>Dave Cross</strong>: PR submitted (32), Merged PR (32)</li>
<li><strong>Olaf Alders</strong>: PR submitted (21), Merged PR (21)</li>
</ul>

<p>That's it for now. Stay safe and healthy.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>4 Pull Requests</strong> submitted in the month of <strong>May 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-05.png"/></p>

<p><strong>2353 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-05.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>672 commits</strong> recorded in the month of <strong>May 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-05.png"/></p>

<p>Overall <strong>3803 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-05.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>May 2021</strong>:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111">Challenge #111</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112">Challenge #112</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113">Challenge #113</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114">Challenge #114</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115">Challenge #115</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-110">RECAP Challenge #110</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-111">RECAP Challenge #111</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-112">RECAP Challenge #112</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-113">RECAP Challenge #113</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-114">RECAP Challenge #114</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, I created <strong>3 videos</strong> working on various tasks of the weekly challenges.</p>

<h4>Perl Weekly Challenge - 111 (Task #2: Ordered Letters)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6wSYM6RrId4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br><br></p>

<h4>Perl Weekly Challenge - 114 (Task #1: Next Palindrome Number)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DrXU7nPOk8s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br><br></p>

<h4>Perl Weekly Challenge - 114 (Task #2: Higher Integer Set Bits)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wpxOxswh9YE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br></p>

<p>There are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2021-04">Aaron Smith</a> as the Champion of <strong>The Weekly Challenge</strong>. <br />
Little late, we got one more interview done with <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2021-03">Tyler Wardhaugh</a>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/MySQL::Workbench::DBIC">MySQL::Workbench::DBIC</a> by <strong>Renee Baecker</strong>. I submitted <a href="https://github.com/reneeb/MySQL-Workbench-DBIC/pull/17">one</a> Pull Request and it has already been accepted and merged by <strong>Renee Baecker</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-05.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-05.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/05/monthly-report---april-2.html">Monthly Report - April</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited three editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/510.html">Issue #510</a>, <a href="http://perlweekly.com/archive/512.html">Issue #512</a> and <a href="http://perlweekly.com/archive/514.html">Issue #514</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>May 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-05.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>RakuAST Grant Report for May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/20201-05-rakuast-grant-report"/>
  <id>tag:news.perlfoundation.org,2021-06-02:/post/20201-05-rakuast-grant-report</id>
  <published>2021-06-02T09:13:04</published>
  <updated>2021-06-02T09:13:04</updated>
  <summary>
  <![CDATA[
     Regarding his RakuAST Grant, Jonathan Worthington reports some awesome progress for May 2021. Side note: due to a bug in the Markdown rendering in this blog post, the less-than and greater-than characters in code blocks are double-encoded. Please refer to this gist for a correctly rendered version. Anyway, here is Jonathan's report: During May I focused on filling out the regex part of RakuAST, with the result that the majority 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding his RakuAST Grant, Jonathan Worthington reports some awesome progress for May 2021.</p>

<p>Side note: due to a bug in the Markdown rendering in this blog post, the less-than and greater-than characters in code blocks are double-encoded. Please refer <a href="https://gist.github.com/jnthn/891c19667c88ba1efb21ccbae36de616">to this gist</a> for a correctly rendered version.</p>

<p>Anyway, here is Jonathan's report:</p>

<hr />

<p>During May I focused on filling out the regex part of RakuAST, with
the result that the majority of the constructs found in Raku regexes now
have AST nodes and can be compiled by the RakuAST-based compiler
frontend. Of note, I did AST nodes for:</p>

<ul>
<li>Declarations in regexes (<code>:my $foo</code>)</li>
<li>Code-based assertions (<code>and</code>)</li>
<li>The <code>\e</code>, <code>\f</code>, <code>\h</code>, <code>\r</code>, <code>\t</code>, <code>\v</code>, and <code>\0</code> escape sequences</li>
<li>Character classes, including the common &lt;[a..z_]&gt; style,
Unicode properties (<code>&lt;:l&gt;</code>), rules <code>&amp;lt;+rulename&amp;gt;</code>, and the
combination of these using <code>+</code> and <code>-</code></li>
<li>Regex code evaluation (<code>&amp;lt;{ ... }&amp;&amp;gt;</code>)</li>
<li>Variable interpolation, both as data (<code>$x</code>) and in an assertion syntax
as code (<code>&amp;lt;$code&amp;gt;</code>)</li>
<li>Internal modifiers (<code>:i</code>, <code>:m</code>, etc.)</li>
<li>Calls to lexical rules (<code>&amp;lt;&amp;rulename&amp;gt;</code>), including passing of
arguments</li>
</ul>

<p>Furthermore, I corrected a mistake in handling of backtracking
modifiers, and added a missing action method in the new compiler
frontend that blocked regexes passing arguments from compiling.</p>

<p>Away from the regex language itself, I:</p>

<ul>
<li>Implemented a mechanism for an AST node to specify it would like
to participate in <code>CHECK</code> time and report problems</li>
<li>Implemented construction and collection of typed exceptions,
both at CHECK time, but also so that the new compiler frontend
can produce them. Probably some things that are done in
the compiler frontend might want to become <code>CHECK</code>-time things
in the AST nodes, since they can happen in synthetically
constructed programs too. Those that are purely syntactic are
often not possible to represent in the AST.</li>
<li>Added RakuAST nodes for <code>token</code>/<code>rule</code> declarations, so that
grammars can now be expressed and compiled in RakuAST (without
protoregexes so far, however)</li>
<li>Correctly set the scope on routine declarations</li>
<li>Added missing operator properties for bitshifts, so they can be
compiled</li>
</ul>

<p>All of this work won a rather underwhelming 17 extra fully passing
spectest files; as has been previously noted, the test files are
quite good at depending on a lot of language features.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal Recap: May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_recap_may_2021"/>
  <id>tag:news.perlfoundation.org,2021-06-01:/post/grant_proposal_recap_may_2021</id>
  <published>2021-06-01T21:02:55</published>
  <updated>2021-06-01T21:02:55</updated>
  <summary>
  <![CDATA[
     The Grants Committee has received the following grant proposals for the May 2021 round: Raku Dispatch and Compiler Improvements Persistent Data Structures for Raku Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities. Review the proposals at their individual links and please comment there by June 6, 2021. The Committee members will start the voting process following that and the 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has received the following grant proposals for the May 2021 round:
* <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">Raku Dispatch and Compiler Improvements</a>
* <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Persistent Data Structures for Raku</a></p>

<p>Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities.</p>

<p>Review the proposals at their individual links and please comment there by June 6, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – May 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/06/01/list-of-new-cpan-distributions-may-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/0.07-TRIAL2">0.07-TRIAL2</a></td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>0</td>
<td>0</td>
<td>Parse and format MySQL dates and times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/0.07-TRIAL3">0.07-TRIAL3</a></td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>0</td>
<td>0</td>
<td>Parse and format MySQL dates and times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-HTMLTable">Acme-CPANModules-HTMLTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that generate HTML tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-ManagingMultipleRepositories">Acme-CPANModules-ManagingMultipleRepositories</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Managing multiple repositories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-PERLANCAR-Dummy">Acme-CPANModules-PERLANCAR-Dummy</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A dummy Acme::CPANModules list for testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModulesBundle-Import-MJGARDNER">Acme-CPANModulesBundle-Import-MJGARDNER</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acme::CPANModules::* created from MJGARDNER's posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CoC-Dice">Acme-CoC-Dice</a></td>
<td><a href="https://metacpan.org/author/BEDOSHI">BEDOSHI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Dice role module for CoC TRPG.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-C">Acme-Prereq-C</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Module for testing CPAN module prerequisites </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-D">Acme-Prereq-D</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-E">Acme-Prereq-E</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-F">Acme-Prereq-F</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>v1.0.0</td>
<td>v2.0.0</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-Itself">Acme-Prereq-Itself</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Module for testing CPAN module prerequisites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Prereq-Regress">Acme-Prereq-Regress</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>5.00</td>
<td>3.00</td>
<td>Module for testing CPAN Pause indexing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-WCSLIB">Alien-WCSLIB</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a really awesome library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libsdl2">Alien-libsdl2</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1.0</td>
<td>1.02</td>
<td>Find or download and install libsdl2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bin4TSV">App-Bin4TSV</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.011</td>
<td>0.340</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPAN-Get">App-CPAN-Get</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for getting of dist from CPAN.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPANModuleSite">App-CPANModuleSite</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>v0.0.9</td>
<td>Automatically create a web site for a CPAN module.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-RcloneUtils">App-RcloneUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-XScreenSaver-DBus">App-XScreenSaver-DBus</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1.0.0</td>
<td>1.0.3</td>
<td>main application class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ansiecho">App-ansiecho</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Command to produce ANSI terminal code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cal-idn">App-cal-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.134</td>
<td>0.136</td>
<td>Display Indonesian calendar on the command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cpanm-cpanmodules">App-cpanm-cpanmodules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Install all modules listed in an Acme::CPANModules::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cpanm-task">App-cpanm-task</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Install Task modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-genpw-ind">App-genpw-ind</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>0.007</td>
<td>Generate password from combination of Indonesian words</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sitelenmute">App-sitelenmute</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
<td>3.02</td>
<td>a static image gallery creator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive">Archive-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Modern Perl bindings to libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Extract">Archive-Libarchive-Extract</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>An archive extracting mechanism (using libarchive)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-Libarchive-Peek">Archive-Libarchive-Peek</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Peek into archives without extracting them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Objectify">Array-Objectify</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>objectify an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Number-Prime-First1000">ArrayData-Number-Prime-First1000</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of first 1000 prime numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Word-ID-KBBI">ArrayData-Word-ID-KBBI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Indonesian words from Kamus Besar Bahasa Indonesia</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayDataBundle-Char-Latin1">ArrayDataBundle-Char-Latin1</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>ArrayData::* modules that contain Latin1 characters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayDataRole-BinarySearch-LinesInHandle">ArrayDataRole-BinarySearch-LinesInHandle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Role to be mixed in by ArrayData::* class that puts the elements as lines in a filehandle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Data-1D">Bin-Data-1D</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.120</td>
<td>0.130</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-File-Dir">Bin-File-Dir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.202</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-File-Time">Bin-File-Time</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.210</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Gen-Rand">Bin-Gen-Rand</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Li">Bin-Li</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.114</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Subtotal">Bin-Subtotal</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.200</td>
<td>0.200</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-TSV-Conv">Bin-TSV-Conv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.300</td>
<td>0.310</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-TSV-Util">Bin-TSV-Util</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.100</td>
<td>0.100</td>
<td>pattern searcher given which column to seek together with regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bin-Text-Color-Plus">Bin-Text-Color-Plus</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.050</td>
<td>0.051</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bundle-Bin4TSV">Bundle-Bin4TSV</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.330</td>
<td>0.340</td>
<td>Bundle related to "Bin4TSV"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Rclone">Complete-Rclone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Completion routines related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Contextual-Diag">Contextual-Diag</a></td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>0.01</td>
<td>0.04</td>
<td>diagnosing perl context</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIC-Violator">DBIC-Violator</a></td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>0.900</td>
<td>0.900</td>
<td>Violate DBIC's most private moments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-Storage-DBI-mysql-Retryable">DBIx-Class-Storage-DBI-mysql-Retryable</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>MySQL-specific DBIC storage engine with retry support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Connector-Retry-MySQL">DBIx-Connector-Retry-MySQL</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>MySQL-specific DBIx::Connector with retry support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-Syntax-ParamKeywords">Dancer2-Plugin-Syntax-ParamKeywords</a></td>
<td><a href="https://metacpan.org/author/CROMEDOME">CROMEDOME</a></td>
<td>0.1.0</td>
<td>0.2.0</td>
<td>Parameter keywords for the lazy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Dataset-ChordProgressions">Data-Dataset-ChordProgressions</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0108</td>
<td>Provide access to hundreds of possible chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-AS3935">Device-Chip-AS3935</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for AS3935</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-BorderStyle">Dist-Zilla-Plugin-BorderStyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building distribution that has BorderStyle modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DjVu-Detect">DjVu-Detect</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Detect DjVu file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FFI-C-Stat">FFI-C-Stat</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Object-oriented FFI interface to native stat and lstat</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Faster-Maths">Faster-Maths</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>make mathematically-intense programs faster</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Function-Runner">Function-Runner</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Define functions at a higher level and run them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Entities">Game-Entities</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.003</td>
<td>A simple entity registry for ECS designs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Games-Simutrans-Pakset">Games-Simutrans-Pakset</a></td>
<td><a href="https://metacpan.org/author/WLINDLEY">WLINDLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Represents an entire Pakset for the Simutrans game</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-Auto-Long-Usage">Getopt-Auto-Long-Usage</a></td>
<td><a href="https://metacpan.org/author/KSTRZEROK">KSTRZEROK</a></td>
<td>0.01</td>
<td>0.03</td>
<td>generate usage strings from Getopt::Long specs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashData">HashData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Specification for HashData::*, modules that contains hash data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashDataBundle-CPAN">HashDataBundle-CPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>HashData::* modules related to CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HashDataRoles-Standard">HashDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Standard set of roles for HashData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IO-BufferedSelect2">IO-BufferedSelect2</a></td>
<td><a href="https://metacpan.org/author/CDRAKE">CDRAKE</a></td>
<td>1.1</td>
<td>1.1</td>
<td>Line-buffered select interface with stream-reading facility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-ger-Format-HashArgs">Log-ger-Format-HashArgs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>0.005</td>
<td>Log using hash arguments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MIDI-Bassline-Walk">MIDI-Bassline-Walk</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0207</td>
<td>Generate walking basslines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MakeWithPerl">MakeWithPerl</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210528</td>
<td>20210534</td>
<td>Make with Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Random-Free">Math-Random-Free</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>0.2.0</td>
<td>Free drop-in replacement for Math::Random</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-CHI-Route">Mojolicious-Plugin-CHI-Route</a></td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>0.04</td>
<td>0.05</td>
<td>Route Caching in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-DigitalOcean">Net-Async-DigitalOcean</a></td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>0.03</td>
<td>0.04</td>
<td>Async client for DigitalOcean REST APIv2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-BigIP">Net-BigIP</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.2</td>
<td>0.2</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Telnet2">Net-Telnet2</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>3.04_1</td>
<td>3.05</td>
<td>Interact with TELNET port or other TCP ports</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenSMTPd-Filter">OpenSMTPd-Filter</a></td>
<td><a href="https://metacpan.org/author/ANDREW">ANDREW</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Easier filters for OpenSMTPd in perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Matlab">PDL-IO-Matlab</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.006</td>
<td>0.006</td>
<td>Read and write Matlab format data files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDLx-Bin1D">PDLx-Bin1D</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.20</td>
<td>0.24</td>
<td>one dimensional binning functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-Lnk">Parse-Lnk</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.02</td>
<td>0.06</td>
<td>A cross-platform, depencency free, Windows shortcut (.lnk) meta data parser.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Community">Perl-Critic-Community</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>Community-inspired Perl::Critic policies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-InputOutput-ProhibitHighPrecedentLogicalOperatorErrorHandling">Perl-Critic-Policy-InputOutput-ProhibitHighPrecedentLogicalOperatorErrorHandling</a></td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>0.02</td>
<td>0.02</td>
<td>prohibits logical error handling in open statements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-RegularExpressions-ProhibitHighPrecedentLogicalOperatorErrorHandling">Perl-Critic-Policy-RegularExpressions-ProhibitHighPrecedentLogicalOperatorErrorHandling</a></td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>0.02</td>
<td>0.02</td>
<td>prohibits logical error handling in open statements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Plugin-ArrayData">Pod-Weaver-Plugin-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Plugin to use when building ArrayData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rclone-Util">Rclone-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to rclone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Role-TinyCommons-BinarySearch-LinesInHandle">Role-TinyCommons-BinarySearch-LinesInHandle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Provide has_item() that uses binary search</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Scalar-Type">Scalar-Type</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>v0.1.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Template-Tiny-Strict">Template-Tiny-Strict</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1.15</td>
<td>1.18</td>
<td>Template Toolkit reimplemented in as little code as possible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Archive-Libarchive">Test-Archive-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Testing tools for Archive::Libarchive</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Table-Read-RelationOn-Tiny">Text-Table-Read-RelationOn-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>v1.0.3</td>
<td>Read binary "relation on (over) a set" from a text table.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Tree-Indented">Text-Tree-Indented</a></td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>0.01</td>
<td>0.02</td>
<td>render a tree data structure in the classic indented view</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-From-ObjArray">Tree-From-ObjArray</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Build a tree of objects from a nested array of objects</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UniEvent-HTTP">UniEvent-HTTP</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.0.0</td>
<td>v1.0.1</td>
<td>extremely fast sync/async http client and server framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UniEvent-HTTP-Manager">UniEvent-HTTP-Manager</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.0.0</td>
<td>v1.0.1</td>
<td>extremely fast asynchronous preforking / threading event based web server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-ID-FruitName-PERLANCAR">WordList-ID-FruitName-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>List of fruit names in Indonesian</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YuiRestClient">YuiRestClient</a></td>
<td><a href="https://metacpan.org/author/QEYAST">QEYAST</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Perl module to interact with YaST applications via libyui-rest-api.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Zapp">Zapp</a></td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Plan building, job creating web app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/bin4tsv">bin4tsv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.01</td>
<td>0.0124</td>
<td>Produce the crosstable from the 2 column data. Can also sum up a additional column by -3 switch option.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/uHTML">uHTML</a></td>
<td><a href="https://metacpan.org/author/OKELLO">OKELLO</a></td>
<td>0</td>
<td>0</td>
<td/>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>95</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>44</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>24</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>5</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JONASBN">JONASBN</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/XMIKEW">XMIKEW</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/CDRAKE">CDRAKE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/KSTRZEROK">KSTRZEROK</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CROMEDOME">CROMEDOME</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/ANDREW">ANDREW</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/WLINDLEY">WLINDLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DRRHO">DRRHO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/OKELLO">OKELLO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/QEYAST">QEYAST</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/BEDOSHI">BEDOSHI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract 0.07-TRIAL2 XMIKEW 0 0 Parse and format MySQL dates and times 0.07-TRIAL3 XMIKEW 0 0 Parse and format MySQL dates and times Acme-CPANModules-HTMLTable PERLANCAR 0.001 0.001 Modules that generate HTML tables Acme-CPANModules-ManagingMultipleRepositories PERLANCAR 0.001 0.001 Managing multiple repositories Acme-CPANModules-PERLANCAR-Dummy PERLANCAR 0.001 0.001 A dummy Acme::CPANModules list for testing Acme-CPANModulesBundle-Import-MJGARDNER PERLANCAR … <a href="https://perlancar.wordpress.com/2021/06/01/list-of-new-cpan-distributions-may-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – May 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1945</id>
    <published>2021-06-01T00:41:22Z</published>
    <updated>2021-06-01T00:41:22Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 7</title>
  <summary type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-7"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-7</id>
  <content type="html"><![CDATA[<p>
The 7th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grant Proposal: Persistent Data Structures for Raku</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku"/>
  <id>tag:news.perlfoundation.org,2021-05-30:/post/grant_proposal_persistent_data_structures_for_raku</id>
  <published>2021-05-30T20:58:00</published>
  <updated>2021-05-30T20:58:00</updated>
  <summary>
  <![CDATA[
     Name Daniel Sockwell Synopsis Immutable, persistent data structures give a program certain superpowers that it's very hard to have in any other way: they allow the program to "time travel" they allow let the program share data across threads or asynchronously save it to disk without needing locks; they enable a much more purely functional style of programming which results in code that many software developers find much easier to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Name</h2>

<p>Daniel Sockwell</p>

<h2>Synopsis</h2>

<p>Immutable, persistent data structures give a program certain superpowers that it's very hard to have
in any other way: they allow the program to "time travel" (view previous application state); they
allow let the program share data across threads or asynchronously save it to disk without needing
locks; they enable a much more purely functional style of programming – which results in code that
many software developers find much easier to reason about.  Because of these benefits, many
languages with strong support for functional programming (Clojure, Elm, Haskell, etc) offer
persistent data structures in their standard library.  And many multiparadigm languages that attempt
to support programming in a fuctional style (C++, JavaScript, Java, Rust, Go, etc.) have
well-maintained and popular libraries offering persistent data structures.</p>

<p>However, despite these benefits and despite the extremely strong support Raku generally provides for
functional programming, Raku does not provide any persistent data structures, either in core or in a
library.  I am therefore seeking a grant to create a persistent data structures library for Raku.</p>

<p>If this grant is funded, I will build this library as an external module that can be used as soon as
I have completed it.  Additionally, I will structure the module in such a way that it can later be
upstreamed into Rakudo if we decide that persistent data types are valuable enough to include in
Roast/the core language (though accepting this grant proposal would, of course, not commit Raku to
adding these types, and the types would provide most of the same benefits as a standalone library).</p>

<h3>The Problem</h3>

<p>As part of its support for functional programming, Raku provides several immutable data types – most
notably, Lists, Maps, and Sets.  These types work well, but they suffer from two well-known
problems: (1) shallow clones with interior mutability and (2) expensive copies.</p>

<p>The problem of interior mutability can be seen in the following code</p>

<pre><code>my Map $m1 = :key[].Map;
my Map $m2 = $m1.clone; 
$m2&lt;key&gt;.push: 2;
say $m1; # OUTPUT: «Map.new((key =&amp;gt; [2]))»
</code></pre>

<p>That is, neither immutability nor clones are deep, so changes to $m2 end up causing changes to $m1.
This behavior is not a bug; it is the intentional (and correct) consequence of the semantics of
immutable types, Scalars, and clone.  This correct behavior, however, negates much of the benefit
that <em>deeply</em> immutable types can provide in terms of reasoning about the code and safely sharing
data between threads.</p>

<p>You can overcome this problem (albeit at the cost of some verbosity) by manually deep-cloning
data and/or ensuring that all the components of a type are themselves immutable.  However, solving
this problem leads you directly to the second: a deep clone of an immutable object is very
expensive, because it involves literally copying the entire object (even if the copy is only
slightly different).  This makes using large immutable objects in Raku much slower than using their
mutable equivalents.</p>

<p>Because copying immutable data structures is both syntactically annoying and computationally
expensive, copying data is a less appealing prospect in Raku than in languages with persistent data
structures.  This, in turn, means that Raku programs are less likely make immutable copies of data
and are more likely to share access to a mutable copy.  This is a shame in any context, because it
makes code harder to reason about and thus more likely to contain bugs.  But it's especially
problematic in concurrent programs – when programs share (rather than copy) data between threads,
they have to use locks, which is both slower and more cumbersome.  Since Raku otherwise offers
excellent support for concurrent programming, the expense of copying large data structures is a real
problem. </p>

<h3>The Solution</h3>

<p>I mentioned that the problems of interior mutability and expensive copies are well known and,
fortunately, they also have a well-known solution: <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">persistent data
structures</a> that provide structural
sharing.  The basic idea is that when you copy an immutable object, you don't need to <em>literally</em>
copy all the data in it, you just need to point back to the copied object (which can't change
because it's immutable).  Then, the copy only needs to remember and ways it differs from the
original rather than the entire object.  (At a high level, this is similar to how some version
control systems or commands work – for example, with git-send-email, you don't send a new copy, just
a patch). </p>

<p>Many early persistent data structures provided these benefits, but only at an unacceptably high
cost.  For example, a linked-list qualifies as a persistent data structure because you can add a
node to the list without mutating it and multiple modified "copies" of a linked list can share much
of their data without making literal copies (aka "tail sharing").  However, the performance profile
of a linked list (especially its lack of cache coherence, given the relative cost of a cache miss on
modern hardware) make it an extremely poor fit for most general purpose programming tasks today.</p>

<p>However, in the past two decades, a new bread of persistent data structures have been developed –
and these new structures combine the safely and cheap copying of previous data structures with a
much-improved performance profile.</p>

<h2>Prior Art</h2>

<p>I have no interest in reinventing the wheel and persistent data structures have a long history both
in academic computer science and in practical language implementations.  Most notably, Phil Bagwell
described a practical design for a persistent data structures in a 2001 paper titled Idle Hash
Trees.  This design describes a specific data structure called a Hash Array Mapped Trie.  Here's a
simplified description of how a HAMT works:</p>

<ul>
<li>create a tree where each node contains either
<ul>
<li>a sparse array of length 32 with references to further nodes.</li>
<li>a final value (i.e., it's a leaf node).</li>
</ul></li>
<li>To store the values of an array into the tree created above, parse the index of each element as
a base 32 number and then convert that number into a list of digits.  Starting at the root of
the tree, look at the array element that matches the value of the last digit and go to (or
create) the node referenced by that element.  When you have done so, remove the digit from your
list and repeat.  Once you are out of digit, store the value in the current node.</li>
<li>^^^^ created a binary Trie, hence the name.</li>
<li>Storing the values of a Hash is similar, except that the hash key must first be hashed into a 32
bit integer and the final nodes need to be buckets to handle hash collisions.</li>
<li>This data structure is immutable, but supports creating a copy with certain values added (or
deleted).  Doing so only requires copying the nodes in the path from the root node to the
inserted/deleted/changed node; the rest of the tree (which is unchanged) is shared between the
copies.</li>
<li>Note that the above omits some details, such as the use of a bitmap &amp; dense array in place of
the sparse array.  For a more detailed explanation of how this works, refer to either the
original paper or to https://hypirion.com/musings/understanding-persistent-vector-pt-1</li>
</ul>

<p>In algorithmic terms, this data structure provides access to nodes in O(log₃₂(n)) time.  A very
pedantic academic might say that this should still be considered O(log(n)) time, but in practice it is
much closer to O(n) – an HAMT with 6 levels can store over a billion items.  Memory use (compared to
full copying) is reduced by a similar factor. </p>

<p>In 2007, Clojure was released with HAMT-based persistent data structures backing all of its
fundamental collection types.  Since then, HAMT-based data structures have been developed for many
languages, either as a core part of the language or as a third-party library.</p>

<p>While Raku does not have HAMT-based (or any) persistent data structures, it does have a few related
features.  First, it has strong support for laziness which can, in some cases, give Lists/Arrays
performance gains similar to those they would get from a persistent data structure (Jonathan
Worthington helpfully explained this distinction to me on StackOverflow:
https://stackoverflow.com/a/67035827/10173009).  This does not apply in all cases and does not apply
at all to Hashes/Maps/Sets/etc. Second, Rakudo currently implements the Str type in a way that has
some conceptual similarities to persistent data structures, though it does not offer the same
guarantees and that implementation is not required by the Raku specification.  Third, Jonathan
Worthington has also implemented a trio of concurrent data structures that use tail sharing (a
similar technique for creating persistent data structures).  These modules – and, in particular, the
Concurrent::Trie module – could be useful when implementing HAMT based data structures.</p>

<p>Given this prior art, implementing HAMT-based data structures will have a clear roadmap, even if
much implementation work remains to be done.</p>

<h2>Deliverables</h2>

<p>The primary deliverable from this grant would be a collection of persistent data types based on Hash
Array Mapped Tries (which, for type-naming purposes, I tentatively plan to refer to as Hash
Array-mapped Tries, yielding the abbreviation 'Hat' rather than 'HAMT').  I would plan to deliver
some or all of the following (time/budget permitting, as discussed in the schedule below), along
with corresponding pod6 documentation suitable for future inclusion on docs.raku.org and
corresponding tests suitable for future inclusion in Roast:</p>

<ul>
<li>ListHat (persistent Array)</li>
<li>MapHat  (persistent Hash)</li>
<li>SetHat  (persistent SetHash)</li>
<li>BagHat  (persistent BagHash)</li>
<li>MixHat  (persistent MixHash)</li>
</ul>

<p>(Note: I don't love these names, since being backed by a HAMT is an implementation detail.  But I
would like to find a name that's short and memorable enough to make the types easy to use;
"PersistentList"s seem unlikely to get much use.  I'm open to ideas here.)</p>

<p>This covers the Raku collection types other than Pairs; creating new Pairs is already simple enough
that creating a PairHat type would be pointless</p>

<p>Time permitting, I would also deliver benchmarks comparing the performance of the *Hat types with
that of the corresponding deeply copied immutable types.</p>

<h2>Project Details</h2>

<h3>Proposed API for deliverable types</h3>

<p>In general, when implementing immutable types, the copying API can be designed along two lines: it
can either require the user to use explicit copying operations, or it can offer an API that mirrors
the API of mutable types but that returns a new value rather than mutating one in place.  The
current Raku immutable types provide an API of the first type.  This API allows code like:</p>

<pre><code>my List $list = (1, 2, 3);
my $new = |$l, |(4, 5, 6);  # correct
my $new = $l.push: 4, 5, 6; # NO - throws an error
</code></pre>

<p>This design choice makes sense for the existing immutable types, given that they don't provide
inexpensive copying and that Raku's | operator makes combining collections easier.  It also helps
new users more quickly realize the difference between mutable and immutable types. However, even
with the | operator, creating copies of immutable types can become syntactically cumbersome,
especially if the type might be empty.</p>

<pre><code># mutable
class Foo {
    has @!values;
    method add($val) { @!values.push($val) }
}

# immutable 
class Bar {
    has List $!values;
    method add($val) { $!values = (|($!values // Empty), |($val // Empty)) }
} 
</code></pre>

<p>Again, this tradeoff makes sense for the existing types because copies are relatively expensive and
so it makes sense to have syntax that implicitly discourages their use in non-trivial cases.
However, since the *Hat types are designed for inexpensive copies, it makes sense to provide the
second type of API:</p>

<pre><code>my ListHat $l = (1, 2, 3);
my $new = $l.push: 4, 5, 6;
</code></pre>

<p>This approach is similar to the one taken by many libraries that add persistent data structures to
languages that aren't purely functional; as one example, immutable.js.  In other languages, this
has the downside of creating a trap:</p>

<pre><code>my Array $a = 1, 2, 3;
$a.push: 4; # works
my ListHat $l = 1, 2, 3;
$l.push: 4; # seems to work, but actualy does nothing
</code></pre>

<p>However, Raku offers the <code>is pure</code> trait; by implementing the relevant methods for the *Hat types
with that trait, the incorrect line would generate a warning that a pure function was used in sink
context.</p>

<p>I would also plan to offer an API for "batching" operations (which lets the data structure improve
performance by skipping intermediate copies).  I'm less sure of this part of the API, but think that
an API similar to the one provided by Immer could be a good fit:</p>

<pre><code>my MapHat $m = (:key1&lt;val1&gt; :key2&lt;val2&gt;);
my $m2 = $m.next: $draft -&amp;gt; { $draft&lt;key2&gt; = 'new val' };
# Or, more concisely
my $m3 = $m.next: *&lt;key2&gt; = 'new val';
# $m2 and $m3 are both {:key&lt;val1&gt; :key2('new val')}
</code></pre>

<p>(This API is inspired by the JavaScript Immer, not the identically-named-but-unrelated C++ library,
which provides a more traditional batch API based on a .commit method)</p>

<p>Of course, I am sure I will learn more in the course of the implementation, so all of the APIs shown
above could change/evolve, but I present it here as a general guideline.</p>

<h3>Limitations on scope</h3>

<p>To keep the project limited in scope, there are two sets of features that I explicitly do <em>not</em> plan
to include in the work for this grant (though either could be added later on).</p>

<p>First, I do not plan to implant the CHAMP optimizations to the HAMT data structure.  This
optimization, which was described in the academic literature in 2015, further reduces memory use and
increases the data's cache locality (which, given the relative significance of cache misses on
modern CPUs, provides a speed boost as well).  However, it also significantly increases the
implementation complexity.  Perhaps because of that complexity or perhaps just because it was more
recently presented, CHAMPs have not been as widely implemented in non-academic settings. Moreover,
adding the CHAMP optimizations would not change the overall performance profile, appropriate uses,
or API of the data structure, so we could add it later if we determine that the performance gains
justify the added complexity.</p>

<p>Similarly, I do not plan to implement the *Hat types in a way that requires them to be included in
Rakudo.  As illustrated by Jonathan Worthington's Concurrent::Stack, Concurrent::Queue, and
Concurrent::Trie data structures, it is entirely possible to implement performant Raku data
structures entirely is userland code, and I plan to follow that approach.</p>

<p>It's possible that integrating more tightly with the compiler/VM could further increase performance.
However I believe that it makes sense to defer that work until a working userland implementation
proves the value of persistent data types via an external library.  Creating an external library
will also allow users to provide feedback on the *Hat types earlier and, if necessary, allow us to
evolve their API without breaking Raku's stability guarantees.</p>

<h2>Proposed Schedule and Grant Amount</h2>

<p>I propose to work on this grant for 10 hours/week for 14 weeks our until the completion of all
deliverables described above and to work for a reduced rate of $50/hour.  Thus, I am seeking a grant
of up to $7,000 (or less, if the implementation is completed before the end of the 14 weeks).</p>

<h2>Benefits to the Raku Community</h2>

<p>As mentioned above, adding persistent data types to Raku would have multiple benefits.  First and
most directly, these types would significantly improve the performance of Raku code that uses
immutable data.  Second, the new types would provide a more ergonomic API for copying immutable
types.</p>

<p>Together, these two direct benefits would encourage Raku programmers to make greater use of
immutable types and other functional programming idioms.  This, in turn, would generally increase
the likelihood that any given Raku module is robust and thread-safe (even if it was not written with
thread safety in mind).  Increased thread safety will help make the Raku ecosystem more suitable for
concurrent workloads (already a strength, given Raku's strong concurrency and parallelism primitives
and the existence of excellent concurrent modules such as Cro).</p>

<p>In addition to these practical benefits, adding these types (especially if they are eventually added
to core Raku) will help in Raku's marketing/adoption efforts.  Languages that have implemented
persistent data types include Clojure, Elm, Haskell, and Scala; all of these languages are (1)
functional and (2) modern – two traits that it would be both helpful and accurate for more
developers to associate with Raku.</p>

<p>Finally, on a more personal note, this grant would benefit a project for which I am not seeking
funding.  I am independently working on Épée, a web framework for Raku inspired by React, Svelte,
Pollen, and Hoplon (and both inspired by and designed to integrate smoothly with Cro).  Épée uses
immutable data via deep copies and thus would see performance benefits from my work on this grant.
I mention this both as a benefit of the grant and to say that, although Épée would benefit from this
grant, that benefit would not be high enough to make implementing these data structures worthwhile
if the grant is not accepted (that is, I am not seeking a grant for work that I plan to do anyway!).
I believe that my perspective as a future user of the API with a concrete use-case in mind would
prove helpful during my work on this grant.</p>

<h2>Biography</h2>

<p>I am a contributor to Rakudo, Roast, and the Raku documentation; I serve on the Raku Steering
Council and the Yet Another Society Legal Committee.  Prior to becoming a programmer, I was a
practicing attorney at Davis Polk &amp; Wardwell, one of the top law firms in New York City – but
decided to become a software developer after helping the firm build a web application that dealt
with data breach law.  I have used JavaScript and Rust professionally, but now focus primarily on
writing free software in Raku.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Weekly Challenge 114</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/30#pwc114" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find out the next Palindrome 
Number higher than the given integer $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub next_palindrome{
    my($n) = @_;
    {
        $n++;
        return $n if $n eq join("", reverse(split(//, $n)));
        redo;
    }
}

MAIN:{
    my($N);
    $N = 1234;
    print next_palindrome($N) . "\n";
    $N = 999;
    print next_palindrome($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1331
1001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is probably the most straight forward approach to this task. Here we iterate
upwards from our starting point and check each number using 
&lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt;. Since we are guaranteed of 
eventually finding a palindrome the loop is 
done (via &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;) without any exit criteria or 
bounds checking other than returning when one is found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find the next higher integer 
having the same number of 1 bits in binary representation as $N.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub count_bits{
    my($n) = @_;
    my $total_count_set_bit = 0;
    while($n){
        my $b = $n &amp; 1;
        $total_count_set_bit++ if $b;
        $n = $n &gt;&gt; 1;
    }
    return $total_count_set_bit;
}

sub next_same_bits{
    my($n) = @_;
    my $number_bits = count_bits($n);
    {
        my $next = $n + 1;
        return $next if count_bits($next) == $number_bits;
        $n = $next;
        redo;
    }
}

MAIN:{
    my($N);
    $N = 3;
    print next_same_bits($N) . "\n";
    $N = 12;
    print next_same_bits($N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
5
17
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;count_bits&lt;/code&gt; subroutine is based on code written for 
&lt;a href="https://adamcrussell.livejournal.com/18587.html"&gt;Challenge 079&lt;/a&gt;. Otherwise, the approach
to this task is very similar to what was done in the first one this week.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114/"&gt;Challenge 114&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc114</id>
    <published>2021-05-30T16:01:00-04:00</published>
    <updated>2021-05-30T16:01:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>TPRCIC Newsletter 26 May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcic-newsletter-26-may-2021"/>
  <id>tag:news.perlfoundation.org,2021-05-25:/post/tprcic-newsletter-26-may-2021</id>
  <published>2021-05-25T12:31:36</published>
  <updated>2021-05-25T12:31:36</updated>
  <summary>
  <![CDATA[
     Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter. This issue: The schedule is available Submit a Lightning Talk Volunteers needed Do you want to host a virtual BoF? Order your conference shirt About the Conference in the Cloud Get your tickets How to Reach Us See you real soon The conference is in just 2 weeks! We're really looking forward to seeing everyone again. We’ve 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/99958ba268cb98cef73fd7773128f8164b29031b/logo-tpc-2021-colors.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Welcome to the latest ‘The Perl and Raku Conference in the Cloud’ newsletter.</p>

<p>This issue:
* <a href="https://perlconference.us/tprc-2021-cloud/schedule/">The schedule is available</a>
* <a href="http://perlconference.us/papers">Submit a Lightning Talk</a>
* Volunteers needed ( virtual moderators, hosts ) 
* Do you want to host a virtual BoF? 
* Order your conference <a href="https://www.cafepress.com/perlandrakuconference">shirt</a>
* About the Conference in the Cloud
* <a href="https://tprc2021cic.sched.com/tickets?iframe=no">Get your tickets</a>
* How to Reach Us</p>

<h1>See you real soon</h1>

<p>The conference is in just 2 weeks! We're really looking forward to seeing everyone again. 
We’ve got a lot of great talks lined up! The schedule is available on our <a href="https://perlconference.us/tprc-2021-cloud/schedule/">website</a>. </p>

<h1>Give a Lightning Talk</h1>

<p>Lightning Talks are short, 5 minute, talks that may be serious, funny, or both. They may be given by experienced speakers already giving full length talks or by first time speakers just starting out (this is a great way to get started if you have something to say). Adding the virtual component to lightning talks should add for some extra fun! If you are a first time speaker you will win a tie with an experienced speaker when the schedule is made, if it comes to it. Today’s first time speaker could be tomorrow’s keynote speaker! <a href="http://perlconference.us/papers">Sign up here</a>.</p>

<h1>Volunteers Needed</h1>

<p>The Conference in the Cloud needs some volunteers! Email <a href="admin@perlconference.us">admin@perlconference.us</a> to volunteer. Right now we need volunteers to help moderate rooms and coordinate day-of things:
* Room moderators - Monitor the chat and help coordinate audience participation during a virtual presentation.
* Room Hosts - Help coordinate speakers and manage the live stream to YouTube</p>

<h1>Host a Birds of a Feather (BoF)</h1>

<p>Do you have a topic you'd like to host for a virtual Birds of Feather (BoF) meeting? We'd love to help! Virtual meeting space will be reserved for BoFs on a first come, first served basis.</p>

<p>Start by proposing and then promoting your BOF on the <a href="http://perlconference.us/wiki">conference wiki</a>. TPRC staff is happy to help facilitate a meeting space if you need it. Just reach out to us on TPF Slack or email us at <a href="admin@perlconference.us">admin@perlconference.us</a> </p>

<h1>Order your conference shirt</h1>

<p>We designed a logo and we’re sharing it with the community! Order a shirt or other cloud conference items at <a href="https://www.cafepress.com/perlandrakuconference">CafePress</a>. We aren’t making any money (neither is TPF) on these products but we have designed a logo if you’d like to buy a momento!</p>

<h1>About the Conference in the Cloud</h1>

<p>The 2021 Perl and Raku Conference in the Cloud will be on June 8-10. If you see #TPRCiC around on social media, that’s our tag for the conference.
At the Conference in the Cloud there will be Perl, Raku, and other related technology topics, just like you’ve seen at our in-person conferences. The Conference in the Cloud is organized and run by volunteers just like The Perl and Raku Conference. Presentations are also given by volunteers. The presentations at the conference were submitted during our Call For Presentations (CFP) and selected by organizers who volunteered to be on our talks-committee. We will have 2 or more tracks at this event with presentations (20-50 minutes long) on a variety of technical topics throughout each day.</p>

<h2>Registration Cost</h2>

<p>By paying a $10 fee attendees can interact live with speakers and other attendees (during BOFs, panels, and Q&amp;A). The $10.00 fee is inclusive of the entire event. This fee helps secure a safe event, and covers the minor costs of hosting it.</p>

<h2>Conference Time</h2>

<p>In order to accommodate the most time zones possible, we have decided to go with 11AM to 6PM EDT or 15:00 to 22:00 UTC. Sched now supports time zones in their interface. Be sure to login and select your time zone!</p>

<h2>Hosting Platform</h2>

<p>The Perl and Raku Conference in the Cloud (TPRCiC) is going to be an online, interactive event hosted on the Zoom platform. The broadcast will be recorded and streamed simultaneously to <a href="https://www.youtube.com/yapcna">YouTube</a>. </p>

<p>Access to the interactive conference on Zoom will only be granted to people who register in advance, agree to the Code of Conduct, and pay a $10 registration fee for the whole conference. Presentations will be streamed live to <a href="https://www.youtube.com/yapcna">YouTube</a> so those who can’t pay the fee or won’t use Zoom, can still access most conference content. <a href="https://github.com/perlconference/tpc-2020-cloud/wiki#bofs">BOFs</a> will not be available on <a href="https://www.youtube.com/yapcna">YouTube</a>.</p>

<h1>Get Your Ticket</h1>

<p>Event tickets are available on eventbrite for $10. The $10.00 fee is inclusive of the entire 3-day event. This fee helps secure a safe event, and covers the minor costs of hosting it. <a href="https://tprc2021cic.sched.com/tickets">Sign up today</a>! </p>

<h1>How to Reach #TPRCiC Organizers</h1>

<ul>
<li>Visit our website: https://perlconference.us/</li>
<li>Follow us on Twitter: <a href="https://twitter.com/PerlConferences">@PerlConferences</a></li>
<li>Like us on Facebook: The Perl Foundation (<a href="https://www.facebook.com/tpf.perl">@tpf.perl</a>)</li>
<li>Subscribe to the mailing list: https://perlconference.us/tprc-2021-cloud/keep-in-touch/</li>
<li>Send any questions about The Perl Conference to <a href="https://perlconference.us/tprc-2021-cloud/contact-us/">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl / Unix One-liner Cage Match, Part 2</title>
    <link rel="alternate" href="https://perl.com/article/perl-one-liners-part-2/" type="text/html"/>
    <content type="html">

&lt;p&gt;In &lt;a href="https://www.perl.com/article/perl-one-liners-part-1/"&gt;Part 1&lt;/a&gt;, I compared Perl&amp;rsquo;s regexp features with sed and Awk. In this concluding part, I&amp;rsquo;ll cover examples that make use of Perl&amp;rsquo;s extensive built-in features and third-party modules.&lt;/p&gt;

&lt;h2 id="bigger-library"&gt;Bigger library&lt;/h2&gt;

&lt;p&gt;Perl has a much bigger collection of built-in functions compared to Awk. For command-line usage, I often need &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. I like that arrays and hashes are distinct in Perl and applying &lt;code&gt;sort&lt;/code&gt; on these data types is much simpler compared to Awk.&lt;/p&gt;

&lt;h3 id="append-items-to-a-list"&gt;Append items to a list&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/49765879/4082052"&gt;This problem&lt;/a&gt; wants to append columns to rows that have too few, like the &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; rows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;a,10,12,13
b,20,22
c,30
d,33&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This appends zeros to list by using the &lt;code&gt;/e&lt;/code&gt; again. This time, the Perl in the replacement counts the number of commas, and subtracts that from 3 to find out how many more columns it needs. The &lt;code&gt;x&lt;/code&gt; is the string replication operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s|$|&amp;#34;,0&amp;#34; x (3 - tr/,//)|e&amp;#39;&lt;/span&gt; ip.txt
a,10,12,13
b,20,22,0
c,30,0,0
d,33,0,0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reversing-things"&gt;Reversing things&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://stackoverflow.com/q/45571828/4082052"&gt;reverse complement DNA sequence for a specific field&lt;/a&gt;, I need to select part of the string, complement it, and turn it around. I want to work on the third column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;ABC DEF GATTAG GHK
ABC DEF GGCGTC GHK
ABC DEF AATTCC GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use the &lt;code&gt;tr&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; in the replacement side (with &lt;code&gt;/e&lt;/code&gt; again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/^(\H+\h+){2}\K\H+/reverse $&amp;amp;=~tr|ATGC|TACG|r/e&amp;#39;&lt;/span&gt; test.txt
ABC DEF CTAATC GHK
ABC DEF GACGCC GHK
ABC DEF GGAATT GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, I can use &lt;code&gt;-a&lt;/code&gt;, which automatically splits on whitespace and puts the result in &lt;code&gt;@F&lt;/code&gt;. I work on the third element then output &lt;code&gt;@F&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;$F[2]=reverse $F[2]=~tr/ATGC/TACG/r; print &amp;#34;@F&amp;#34;&amp;#39;&lt;/span&gt; test.txt
ABC DEF CTAATC GHK
ABC DEF GACGCC GHK
ABC DEF GGAATT GHK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sort-a-csv-row"&gt;Sort a CSV row&lt;/h3&gt;

&lt;p&gt;How about &lt;a href="https://stackoverflow.com/q/48920626/4082052"&gt;sorting rows in csv file without header &amp;amp; first column&lt;/a&gt;? Here&amp;rsquo;s some simple comma-separated values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;id,h1,h2,h3,h4,h5,h6,h7
&lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;,zebra,1,papa,4,dog,3,apple
&lt;span style="color:#ae81ff"&gt;102&lt;/span&gt;,2,yahoo,5,kangaroo,7,ape&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;-a&lt;/code&gt; again, but also &lt;code&gt;-F,&lt;/code&gt; to make comma as the field separator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -F, -lane &lt;span style="color:#e6db74"&gt;&amp;#39;print join &amp;#34;,&amp;#34;, $.==1 ? @F : (shift @F, sort @F)&amp;#39;&lt;/span&gt; ip.txt
id,h1,h2,h3,h4,h5,h6,h7
&lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;,1,3,4,apple,dog,papa,zebra
&lt;span style="color:#ae81ff"&gt;102&lt;/span&gt;,2,5,7,ape,kangaroo,yahoo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$.&lt;/code&gt; variable keeps track of the input line number. I use this to skip the first line (the header). In all other lines, I make a list of the first element of &lt;code&gt;@F&lt;/code&gt; and the sorted list of the rest of the elements. Note that the numbers to be sorted in this example have the same number of digits, otherwise it wouldn&amp;rsquo;t work.&lt;/p&gt;

&lt;h3 id="insert-incremental-row-and-column-labels"&gt;Insert incremental row and column labels&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/48985854/4082052"&gt;Insert a row and a column in a matrix&lt;/a&gt; needs to add numerical labels with a fixed interval:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, I use &lt;code&gt;map&lt;/code&gt; to generate the header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;print join &amp;#34;\t&amp;#34;, &amp;#34;&amp;#34;, map {20.00+$_*0.33} 0..$#F if $.==1;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print join &amp;#34;\t&amp;#34;, 100+(0.33*$i++), @F&amp;#39;&lt;/span&gt; matrix.txt
        &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;      &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.33   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.66   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.99   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.32   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.65
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;     &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.33  &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.66  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.99  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;

&lt;span style="color:#75715e"&gt;# with formatting and alternate way to join print arguments&lt;/span&gt;
$ perl -lane &lt;span style="color:#e6db74"&gt;&amp;#39;BEGIN{$,=&amp;#34;\t&amp;#34;; $st=0.33}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print &amp;#34;&amp;#34;, map {sprintf &amp;#34;%.2f&amp;#34;, 20+$_*$st} 0..$#F if $.==1;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              print sprintf(&amp;#34;%.2f&amp;#34;, 100+($st*$i++)), @F&amp;#39;&lt;/span&gt; matrix.txt
        &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.00   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.33   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.66   &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;.99   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.32   &lt;span style="color:#ae81ff"&gt;21&lt;/span&gt;.65
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.00  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.33  &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.66  &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;.99  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;       &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="using-perl-modules"&gt;Using Perl modules&lt;/h2&gt;

&lt;p&gt;Apart from built-in functions, Standard or CPAN modules come in handy too. Load those with &lt;code&gt;-M&lt;/code&gt; and put the import list after a &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#75715e"&gt;# randomize word list after filtering&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;floor bat to dubious four pact feed&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MList::Util&lt;span style="color:#f92672"&gt;=&lt;/span&gt;shuffle -lanE &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                    say join &amp;#34;:&amp;#34;, shuffle grep {/[au]/} @F&amp;#39;&lt;/span&gt;
bat:four:pact:dubious

&lt;span style="color:#75715e"&gt;# remove duplicate elements while retaining input order&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;3,b,a,3,c,d,1,d,c,2,2,2,3,1,b&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MList::Util&lt;span style="color:#f92672"&gt;=&lt;/span&gt;uniq -F, -lanE &lt;span style="color:#e6db74"&gt;&amp;#39;say join &amp;#34;,&amp;#34;, uniq @F&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,b,a,c,d,1,2

&lt;span style="color:#75715e"&gt;# apply base64 decoding only for a portion of the string&lt;/span&gt;
$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;123 aGVsbG8gd29ybGQK&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MMIME::Base64 -ane &lt;span style="color:#e6db74"&gt;&amp;#39;print decode_base64 $F[1]&amp;#39;&lt;/span&gt;
hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cpan"&gt;CPAN&lt;/h2&gt;

&lt;p&gt;The Comprehensive Perl Archive Network (&lt;a href="https://www.cpan.org"&gt;CPAN&lt;/a&gt;) has a huge collection of modules for various use cases.  Here are some examples.&lt;/p&gt;

&lt;h3 id="extract-ipv4-addresses"&gt;Extract IPv4 addresses&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Regexp::Common"&gt;Regexp::Common&lt;/a&gt; has recipes for common things you want to match. Here&amp;rsquo;s some text with dotted-decimal IP addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243 &lt;span style="color:#ae81ff"&gt;555&lt;/span&gt;.4.3.1 &lt;span style="color:#ae81ff"&gt;34242534&lt;/span&gt;.23.42.42
foo &lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123 baz &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.4.4.3123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s easy to extract the IPv4 addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MRegexp::Common&lt;span style="color:#f92672"&gt;=&lt;/span&gt;net -nE &lt;span style="color:#e6db74"&gt;&amp;#39;say $&amp;amp; while /$RE{net}{IPv4}/g&amp;#39;&lt;/span&gt; ipv4.txt
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243
&lt;span style="color:#ae81ff"&gt;55&lt;/span&gt;.4.3.1
&lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;.23.42.42
&lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123
&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.4.4.31&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can match only if the IPv4 address isn&amp;rsquo;t surrounded by digit characters, so I don&amp;rsquo;t match in the middle of &lt;code&gt;34242534.23.42.42&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MRegexp::Common&lt;span style="color:#f92672"&gt;=&lt;/span&gt;net -nE &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;        say $&amp;amp; while /(?&amp;lt;!\d)$RE{net}{IPv4}(?!\d)/g&amp;#39;&lt;/span&gt; ipv4.txt
&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.5.52.243
&lt;span style="color:#ae81ff"&gt;234&lt;/span&gt;.233.54.123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="real-csv-processing"&gt;Real CSV processing&lt;/h3&gt;

&lt;p&gt;Earlier I did some simple CSV processing, but if I want to do it for real I can use &lt;a href="https://metacpan.org/pod/Text::CSV_XS"&gt;Text::CSV_XS&lt;/a&gt; to make sure everything happens correctly. This one handles the quoted field &lt;code&gt;fox,42&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;eagle,&amp;#34;fox,42&amp;#34;,bee,frog\n1,2,3,4&amp;#39;&lt;/span&gt;

&lt;span style="color:#75715e"&gt;# note that neither -n nor -p are used here&lt;/span&gt;
$ printf &lt;span style="color:#e6db74"&gt;&amp;#39;%b&amp;#39;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MText::CSV_XS -E &lt;span style="color:#e6db74"&gt;&amp;#39;say $row-&amp;gt;[1]
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                     while $row = Text::CSV_XS-&amp;gt;new-&amp;gt;getline(*ARGV)&amp;#39;&lt;/span&gt;
fox,42
&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="processing-xml"&gt;Processing XML&lt;/h3&gt;

&lt;p&gt;Processing XML files is another format that&amp;rsquo;s easy to mess up. Many people try to do this with regexp, but that can easily go wrong. Here&amp;rsquo;s an example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&amp;lt;doc&amp;gt;
    &amp;lt;greeting type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;ask&amp;#34;&lt;/span&gt;&amp;gt;Hi there. How are you?&amp;lt;/greeting&amp;gt;
    &amp;lt;greeting type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;reply&amp;#34;&lt;/span&gt;&amp;gt;I am good.&amp;lt;/greeting&amp;gt;
    &amp;lt;color&amp;gt;
        &amp;lt;blue&amp;gt;flower&amp;lt;/blue&amp;gt;
        &amp;lt;blue&amp;gt;sand stone&amp;lt;/blue&amp;gt;
        &amp;lt;light-blue&amp;gt;sky&amp;lt;/light-blue&amp;gt;
        &amp;lt;light-blue&amp;gt;water&amp;lt;/light-blue&amp;gt;
    &amp;lt;/color&amp;gt;
&amp;lt;/doc&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;xpath&lt;/code&gt; (a Perl program) and &lt;code&gt;xmllint&lt;/code&gt; can be used for processing XML files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ xpath -e &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
Found &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; nodes in sample.xml:
-- NODE --
flower
-- NODE --
sand stone
$ xpath -q -e &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone

$ xmllint --xpath &lt;span style="color:#e6db74"&gt;&amp;#39;//blue/text()&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt; module will help if you need Perl&amp;rsquo;s power:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -MXML::LibXML -E &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    $ip = XML::LibXML-&amp;gt;load_xml(location =&amp;gt; $ARGV[0]);
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    say $_-&amp;gt;to_literal() for $ip-&amp;gt;findnodes(&amp;#34;//blue&amp;#34;)&amp;#39;&lt;/span&gt; sample.xml
flower
sand stone

$ perl -MXML::LibXML -E &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    $ip = XML::LibXML-&amp;gt;load_xml(location =&amp;gt; $ARGV[0]);
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;    say uc $_-&amp;gt;to_literal() for $ip-&amp;gt;findnodes(&amp;#34;//blue&amp;#34;)&amp;#39;&lt;/span&gt; sample.xml
FLOWER
SAND STONE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="processing-json"&gt;Processing JSON&lt;/h3&gt;

&lt;p&gt;JSON files have the same issue. You don&amp;rsquo;t want to do regexes on this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;greeting&amp;#34;:&amp;#34;hi&amp;#34;,&amp;#34;marks&amp;#34;:[78,62,93],&amp;#34;fruit&amp;#34;:&amp;#34;apple&amp;#34;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Various JSON modules, such as &lt;a href="http://metacpan.org/pod/Cpanel::JSON::XS"&gt;Cpanel::JSON::XS&lt;/a&gt; can handle this. For example, pretty printing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | cpanel_json_xs
&lt;span style="color:#f92672"&gt;{&lt;/span&gt;
   &lt;span style="color:#e6db74"&gt;&amp;#34;fruit&amp;#34;&lt;/span&gt; : &lt;span style="color:#e6db74"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;,
   &lt;span style="color:#e6db74"&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt; : &lt;span style="color:#e6db74"&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;,
   &lt;span style="color:#e6db74"&gt;&amp;#34;marks&amp;#34;&lt;/span&gt; : &lt;span style="color:#f92672"&gt;[&lt;/span&gt;
      &lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;,
      &lt;span style="color:#ae81ff"&gt;62&lt;/span&gt;,
      &lt;span style="color:#ae81ff"&gt;93&lt;/span&gt;
   &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;span style="color:#f92672"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;rsquo;s a particular selection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | perl -MCpanel::JSON::XS -0777 -E &lt;span style="color:#e6db74"&gt;&amp;#39;$ip=decode_json &amp;lt;&amp;gt;;
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;              say join &amp;#34;:&amp;#34;, @{$ip-&amp;gt;{marks}}&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;:62:93&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s easier to put that in a script (although that&amp;rsquo;s not really a one-liner anymore). I use a Bash function as a shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ pj&lt;span style="color:#f92672"&gt;()&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt; perl -MCpanel::JSON::XS -0777 -E &lt;span style="color:#e6db74"&gt;&amp;#39;$ip=decode_json &amp;lt;&amp;gt;;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$@&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; ; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;

$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | pj &lt;span style="color:#e6db74"&gt;&amp;#39;say $ip-&amp;gt;{fruit}&amp;#39;&lt;/span&gt;
apple
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | pj &lt;span style="color:#e6db74"&gt;&amp;#39;say join &amp;#34;:&amp;#34;, @{$ip-&amp;gt;{marks}}&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;78&lt;/span&gt;:62:93&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A non-Perl example of the same thing is &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;, but that&amp;rsquo;s something you have to install separately and might not be available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style="color:#e6db74"&gt;&amp;#39;.fruit&amp;#39;&lt;/span&gt;
&lt;span style="color:#e6db74"&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$s&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | jq &lt;span style="color:#e6db74"&gt;&amp;#39;.marks | join(&amp;#34;:&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;span style="color:#e6db74"&gt;&amp;#34;78:62:93&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;

&lt;p&gt;Perl is usually slower compared to specialized tools, but the regexp engine performs better for certain cases of backreferences and quantifiers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ time LC_ALL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;C grep -xE &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]..)\1&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f1
real    0m0.074s

$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /^([a-z]..)\1$/&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f2
real    0m0.024s

$ time LC_ALL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;C grep -xP &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]..)\1&amp;#39;&lt;/span&gt; /usr/share/dict/words &amp;gt; f3
real    0m0.010s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl&amp;rsquo;s hash implementation performs better compared to Awk&amp;rsquo;s associative arrays for large number of keys. The &lt;code&gt;SCOWL-wl.txt&lt;/code&gt; file used below was created using &lt;a href="http://app.aspell.net/create"&gt;app.aspell.net&lt;/a&gt;. &lt;code&gt;words.txt&lt;/code&gt; is from &lt;code&gt;/usr/share/dict/words&lt;/code&gt;. Mawk is usually faster, but GNU Awk does better in this particular case.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ wc -l words.txt SCOWL-wl.txt
  &lt;span style="color:#ae81ff"&gt;99171&lt;/span&gt; words.txt
 &lt;span style="color:#ae81ff"&gt;662349&lt;/span&gt; SCOWL-wl.txt
 &lt;span style="color:#ae81ff"&gt;761520&lt;/span&gt; total

&lt;span style="color:#75715e"&gt;# finding common lines between two files&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# Case 1: shorter file passed as the first argument&lt;/span&gt;
$ time mawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t1
real    0m0.296s
$ time gawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t2
real    0m0.210s
$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;if(!$#ARGV){$h{$_}=1; next}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                 print if exists $h{$_}&amp;#39;&lt;/span&gt; words.txt SCOWL-wl.txt &amp;gt; t3
real    0m0.189s

&lt;span style="color:#75715e"&gt;# Case 2: longer file passed as the first argument&lt;/span&gt;
$ time mawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f1
real    0m0.539s
$ time gawk &lt;span style="color:#e6db74"&gt;&amp;#39;NR==FNR{a[$0]; next} $0 in a&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f2
real    0m0.380s
$ time perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;if(!$#ARGV){$h{$_}=1; next}
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                 print if exists $h{$_}&amp;#39;&lt;/span&gt; SCOWL-wl.txt words.txt &amp;gt; f3
real    0m0.351s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="other-things-to-read"&gt;Other things to read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My ebook on &lt;a href="https://learnbyexample.github.io/learn_perl_oneliners/"&gt;Perl one-liners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/hachiojipm/awesome-perl"&gt;Awesome Perl&lt;/a&gt; has a curated list of awesome Perl5 frameworks, libraries and software&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://grantm.github.io/perl-libxml-by-example/"&gt;Perl XML::LibXML by example&lt;/a&gt; for a detailed book on &lt;code&gt;XML::LibXML&lt;/code&gt; module&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;[image from &lt;a href="https://www.flickr.com/photos/ljsilver71/14139619905/in/photolist-nxtfo6-xDEB2-2hdZdFv-XPjLeQ-6nGeoM-29v1fwo-puR1K-2kNaM6P-nxtgeK-a2nLuc-qvDmkw-nfYDTu-6R6FQB-2i1Psj2-74Nwsu-2kNam6c-c2EsqS-2i1PsgB-nvqjK1-2i1RTpS-2i1T2RR-2i1S2Wr-2i1Psik-2gcee9c-2i1PHci-23p4pKV-2i4eukR-urRBFS-nzf35k-6R6Fmp-nvqicm-pvqAaK-6RaKuU-2i1S8S9-2i1Tbr1-2i1Psd5-2i1S9WP-2i1T2LL-nfYwEo-2i1RTnx-2i1RTbW-2i1PsbB-2i1S2VE-2i1S8Tg-2tFtHH-2i1Psku-2i1TbFV-614Rh8-2i1S8Va-27YK5Fj"&gt;Riccardo Maria Mantero&lt;/a&gt; on Flickr, (CC BY-NC-ND 2.0)]&lt;/em&gt;&lt;/p&gt;
</content>
    <id>https://perl.com/article/perl-one-liners-part-2/</id>
    <published>2021-05-25T02:54:23Z</published>
    <updated>2021-05-25T02:54:23Z</updated>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): April 2021 Report </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-2021-04"/>
  <id>tag:news.perlfoundation.org,2021-05-24:/post/tony-2021-04</id>
  <published>2021-05-24T13:32:51</published>
  <updated>2021-05-24T13:32:51</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 39 tickets were reviewed.  2.66 #16249 read code, try to work up some implementation  #16249 more implementation  0.80 review list discussion, comment on #17999 re walking  backwards through UTF-8  0.73 #18588 debugging  1.43 #18670 review CI results, reproduce on Win32, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.</p>

<pre>
Approximately 39 tickets were reviewed.

[Hours]         [Activity]
  2.66          #16249 read code, try to work up some implementation
                #16249 more implementation
  0.80          review list discussion, comment on #17999 re walking
                backwards through UTF-8
  0.73          #18588 debugging
  1.43          #18670 review CI results, reproduce on Win32, testing, add
                debug code
                #18670 find issue, fix, testing, push to PR
  0.32          #18671 research, comment and approve
  0.42          #18685 review, research and comment
  0.38          #18692 review, research and approve (in freeze, so not
                applied)
  1.91          #18694 try to reproduce, comment on upstream ticket
                #18694 follow-up
  0.73          #18697 comment
  0.85          #18702 review, research
                #18702 more research and approve
  2.92          #18703 set up to test, start build
                #18703 comment
  1.55          #18734 ask for more information
                #18734 review supplied config.sh, research multiarch,
                write up how to produce a backtrace
  1.32          cygwin locale debugging
  0.62          Data::Alias - finish fix, comment on cpan ticket 130156,
                comment on blocker thread
  2.18          Data::Alias - more work on fix
  1.45          Data::Alias - parser debugging
  0.33          Data::Alias - test a fix, comment on D::A ticket 130156
                with a patch and comment on blocker thread on p5p
  2.13          Data::Alias - work on fix
  2.78          Data::Alias - work on PR, post PR and write up, look at
                parsing issue, reproduce
  1.02          Data::Alias debugging
  2.13          Data::Alias fix compilation errors, debug crash
  0.63          debug cygwin issue
  1.25          debug cygwin locale test silent exit, email to khw
  0.25          github notifications
  0.22          list catch up
  1.02          look at khw’s cygwin export problem, email to khw
  0.70          lower cop memory usage
  1.72          lower COP memory usage again
  0.90          more Data::Alias
  1.50          more Data::Alias debugging
  2.03          more Data::Alias debugging, work on a fix, start write up
                for list
  1.43          more debug cygwin
  3.40          more lower cop memory usage
                more lower cop memory usage
  1.13          no feature stringification
  2.12          no feature stringification - debugging, list catch up
  0.27          reply trim vote
  1.97          review github notifications
                review github notifications
                review github notifications
                review github notifications
                review github notifications
  1.32          review p5p discussion
  1.65          try to reproduce cygwin blead failure, reproduce, fix test
                and fix utime(handle), make PR 18749
======
 52.17 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 6</title>
  <summary type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-23T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-6"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-6</id>
  <content type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Weekly Challenge 113</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/23#pwc113" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive integer $N and a digit $D. Write a script to check if $N can be 
represented as a sum of positive integers having $D at least once. If check passes print 
1 otherwise 0.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
sub is_represented{
    my($n, $d) = @_;
    my @contains = grep { grep { $_ == $d } split(//) } (1 .. $n);
    return $n == unpack("%32C*", pack("C*",  @contains));
}

MAIN:{
    print is_represented(25, 7) + 0 . "\n";
    print is_represented(24, 7) + 0 . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0
1
</code></pre>

<h3>Notes</h3>

<p>I've been trying to avoid using regexes in these challenges recently, to help promote
some increased creativity. Here I use a nested grep to determine which numbers contain the
digit <code>$d</code>.</p>

<p>I also use one of my favorite ways to sum a list of numbers using <code>unpack</code> and <code>pack</code>!</p>

<p>By default the false value in the first example will print as an empty string. The <code>+ 0</code>
forces a numification to 0 (or 1 too) which then stringifies to what we expect.</p>

<h2>Part 2</h2>

<p><em>You are given a Binary Tree. Write a script to replace each node of the tree with the sum
of all the remaining nodes.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub dfs_update{
    my($graph, $vertex, $graph_updated, $previous) = @_;
    my @successors = $graph-&gt;successors($vertex);
    for my $successor (@successors){
        my $sum_remaining = sum_remaining($graph, $vertex);
        $graph_updated-&gt;add_edge($previous, $sum_remaining) if $previous;
        dfs_update($graph, $successor, $graph_updated, $sum_remaining);
    }
    $graph_updated-&gt;add_edge($previous, sum_remaining($graph, $vertex)) if !@successors;
}

sub sum_remaining{
    my($graph, $visited) = @_;
    my $sum = 0;
    for my $vertex ($graph-&gt;vertices()){
        $sum += $vertex if $vertex != $visited;
    }
    return $sum;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]";
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = new Graph();
    my $graph_updated = new Graph();
    my $root = 1;
    $graph-&gt;add_edge($root, 2);
    $graph-&gt;add_edge($root, 3);
    $graph-&gt;add_edge(2, 4);
    $graph-&gt;add_edge(4, 7);
    $graph-&gt;add_edge(3, 5);
    $graph-&gt;add_edge(3, 6);
    dfs_update($graph, $root, $graph_updated);
    display_graph($graph);
    display_graph($graph_updated);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
+---+     +---+     +---+     +---+
| 1 | ==&gt; | 2 | ==&gt; | 4 | ==&gt; | 7 |
+---+     +---+     +---+     +---+
  H
  H
  v
+---+     +---+
| 3 | ==&gt; | 5 |
+---+     +---+
  H
  H
  v
+---+
| 6 |
+---+
+----+     +----+     +----+     +----+
| 27 | ==&gt; | 26 | ==&gt; | 24 | ==&gt; | 21 |
+----+     +----+     +----+     +----+
  H
  H
  v
+----+     +----+
| 25 | ==&gt; | 22 |
+----+     +----+
  H
  H
  v
+----+
| 23 |
+----+
</code></pre>

<h3>Notes</h3>

<p>Whenever I work these sort of problems with Trees and Graphs I use the 
<a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod">Graph</a> module. My main 
motivation is to maintain a consistent interface so the code I write is more re-usable for
the many problems that can be solved using a graph based approach. The problem at hand
is a clear candidate as it is explicitly stated as such. Sometimes, however, graph
problems are somewhat in disguise although the use of a graph representation will yield the
best solution.</p>

<p>The core of the solution is done via a Depth First traversal of the tree. Each vertex, as
it is visited is used to generate a new edge on a tree constructed with the conditions of
the problem statement.</p>

<p>The original and updated trees are visualized with 
<a href="https://metacpan.org/pod/Graph::Easy">Graph::Easy</a>.</p>

<h2>References</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113/">Challenge 113</a></p>

<p><a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth First Traversal</a></p>

<p><a href="https://www.oreilly.com/library/view/mastering-algorithms-with/1565923987/">Mastering Algorithms with Perl</a>
is an excellent book with a very in depth chapter on Graphs.</p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc113</id>
    <published>2021-05-23T15:33:00-04:00</published>
    <updated>2021-05-23T15:33:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 112</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/16#pwc112" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to convert the given absolute path to the simplified canonical path.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to convert the given absolute path to the simplified canonical path.
# The canonical path format:
#     - The path starts with a single slash '/'.
#     - Any two directories are separated by a single slash '/'.
#     - The path does not end with a trailing '/'.
#     - The path only contains the directories on the path from the root directory to the target file or directory
##
sub leading_slash{
    my($path) = @_;
    $path = "/" . $path if substr($path, 0, 1) ne "/";
    return $path;  
}

sub single_seperator{
    my($path) = @_;
    $path =~ s#\/\/#\/#;
    return $path;  
}

sub trailing_slash{
    my($path) = @_;
    chop($path) if substr($path, length($path) - 1, 1) eq "/";
    return $path; 
}

sub up_stay{
    my($path) = @_;
    my @directories = split(/\//, substr($path, 1)); 
    my @temp_path; 
    for my $d (@directories){
        push @temp_path, $d if $d ne "." &amp;&amp; $d ne ".."; 
        pop @temp_path if $d eq ".."; 
        next if $d eq ".";      
    }  
    return "/" . join("/", @temp_path);   
}

sub canonical_path{
    my($path) = @_; 
    return up_stay(trailing_slash(single_seperator(leading_slash($path))));  
} 

MAIN:{
    while(&lt;DATA&gt;){
        chomp;
        print canonical_path($_) . "\n"; 
    }  
}

__DATA__
/a/
/a/b//c/
/a/b/c/../..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
/a
/a/b/c
/a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The challenge I set for myself here was to completely avoid any use of regular 
expressions! I think I pulled it off, more or less. I am not quite sure I covered every
possible corner case, but it works for the examples given.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given $n steps to climb. Write a script to find out the distinct ways to climb 
to the top. You are allowed to climb either 1 or 2 steps at a time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given $n steps to climb
# Write a script to find out the distinct ways to climb to the top.
# You are allowed to climb either 1 or 2 steps at a time.
##
use Array::Compare;
use Algorithm::Combinatorics q/variations_with_repetition/;

sub steps{
    my($k) = @_;
    my @data = (0, 1, 2);
    my @steps;
    my $comparison = new Array::Compare();
    my $iterator = variations_with_repetition(\@data, $k);
    while(my $combination = $iterator-&gt;next()){
        if(unpack("%32C*", pack("C*", @{$combination})) == $k){
            my $step = [grep {$_ != 0} @{$combination}];
            push @steps, $step if(!grep {$comparison-&gt;compare($_, $step)} @steps);
        }
    }
    return @steps;
}

MAIN:{
    my @steps;
    @steps = steps(3);
    print "k = 3\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(4);
    print "\nk = 4\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(5);
    print "\nk = 5\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
k = 3
1 step + 2 steps
2 steps + 1 step
1 step + 1 step + 1 step

k = 4
2 steps + 2 steps
1 step + 1 step + 2 steps
1 step + 2 steps + 1 step
2 steps + 1 step + 1 step
1 step + 1 step + 1 step + 1 step

k = 5
1 step + 2 steps + 2 steps
2 steps + 1 step + 2 steps
2 steps + 2 steps + 1 step
1 step + 1 step + 1 step + 2 steps
1 step + 1 step + 2 steps + 1 step
1 step + 2 steps + 1 step + 1 step
2 steps + 1 step + 1 step + 1 step
1 step + 1 step + 1 step + 1 step + 1 step
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Rather than pursue some sort of algorithmic elegance and optimization I decided to 
try what is effectively a brute force approach. For small values of &lt;code&gt;$k&lt;/code&gt; this works quite
nicely with the above example output generated in about a second on very modest hardware
(an approximately 20 year old 450Mhz G4 Power Macintosh). Naturally we face a 
&lt;em&gt;combinatorial explosion&lt;/em&gt; for larger values of &lt;code&gt;$k&lt;/code&gt;. For larger input values consider
a graph search with memoization!&lt;/p&gt;

&lt;p&gt;Overview of this brute force approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate all arrays of numbers of length &lt;code&gt;$k&lt;/code&gt; using digits 0, 1, and 2.
&lt;/li&gt;
&lt;li&gt;Keep all those arrays that sum to &lt;code&gt;$k&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove zeroes from these matching arrays
&lt;/li&gt;
&lt;li&gt;Remove duplicate arrays 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combinations are generated using 
&lt;a href="https://metacpan.org/pod/Algorithm::Combinatorics"&gt;Algorithm::Combinatorics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Duplicate array removal is facilitated by 
&lt;a href="https://metacpan.org/pod/Array::Compare"&gt;Array::Compare&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112/"&gt;Challenge 112&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc112</id>
    <published>2021-05-16T18:10:00-04:00</published>
    <updated>2021-05-16T18:10:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Disk space usage of CPAN authors (May 16, 2021 edition)</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" type="text/html"/>
    <content type="html">&lt;p&gt;Prompted by &lt;a href="http://neilb.org/2021/05/10/delete-your-old-releases.html"&gt;this post&lt;/a&gt; on PAUSE running out of disk space, I thought I&amp;#039;d refresh my own post &amp;quot;&lt;a href="https://perlancar.wordpress.com/2019/12/26/top-50-authors-by-disk-space-on-backpan/"&gt;Top 50 authors by disk space on BackPAN&amp;quot;&lt;/a&gt; (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. &lt;/p&gt;
&lt;p&gt;&lt;h2&gt;On CPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="https://www.cpan.org/indices/find-ls.gz" rel="nofollow"&gt;https://www.cpan.org/indices/find-ls.gz&lt;/a&gt; (~14MB as of this writing), but more readily used: &lt;a href="https://www.cpan.org/indices/du-k.gz" rel="nofollow"&gt;https://www.cpan.org/indices/du-k.gz&lt;/a&gt; (~80KB as of this writing). &lt;/p&gt;
&lt;p&gt;Total size of CPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;.&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;29.0GB
&lt;/pre&gt;
&lt;p&gt; So, CPAN is not that big by today&amp;#039;s standards and I would guess that it&amp;#039;s growing at a relatively regular pace. Also the first post does not give details on the spec of PAUSE&amp;#039;s server nor the exact thing that caused the disk to be full, but anyway. &lt;/p&gt;
&lt;p&gt;Total size of &lt;tt&gt;authors/id/&lt;/tt&gt; directory: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;28.0GB
&lt;/pre&gt;
&lt;p&gt; Not much surprise here. The &lt;tt&gt;authors/id/&lt;/tt&gt; directory is where CPAN authors upload to. Outside of this directory, it&amp;#039;s mostly just indices (&lt;tt&gt;modules/&lt;/tt&gt;, &lt;tt&gt;indices/&lt;/tt&gt;) or stuffs like old scripts (&lt;tt&gt;scripts/&lt;/tt&gt;) and ancient Perl sources/binaries (&lt;tt&gt;src/&lt;/tt&gt;, &lt;tt&gt;ports/&lt;/tt&gt;). &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and $total = $F[0]; $F[1] =~ m!authors/id/./../(\w+)! or next; $sizes{$1}=$F[0]; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $sizes{$_}/1024, $sizes{$_}/$total*100 for sort { $sizes{$b}&amp;lt;=&amp;gt;$sizes{$a} } keys %sizes }&amp;#039; | head -n50
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;     SHAY 2397.8MB ( 8.4%)
   LSKATZ 1144.4MB ( 4.0%)
     RJBS  938.6MB ( 3.3%)
 XSAWYERX  778.9MB ( 2.7%)
TIEDEMANN  612.7MB ( 2.1%)
      LDS  535.6MB ( 1.9%)
    GIBUS  460.2MB ( 1.6%)
  TMILLER  362.7MB ( 1.3%)
   BINGOS  322.3MB ( 1.1%)
  ABIGAIL  321.8MB ( 1.1%)
   OLIVER  311.3MB ( 1.1%)
PERLANCAR  296.2MB ( 1.0%)
 WOLFSAGE  268.9MB ( 0.9%)
    JESSE  259.6MB ( 0.9%)
    FLORA  239.3MB ( 0.8%)
  VANSTYN  208.2MB ( 0.7%)
SUNDQUIST  192.7MB ( 0.7%)
   STEVEB  191.4MB ( 0.7%)
   DGINEV  189.7MB ( 0.7%)
 CJFIELDS  183.1MB ( 0.6%)
 PAWAPAWA  179.3MB ( 0.6%)
  NWCLARK  177.0MB ( 0.6%)
      SRI  176.7MB ( 0.6%)
      ARC  169.4MB ( 0.6%)
    ETHER  158.5MB ( 0.6%)
 JDDPAUSE  146.0MB ( 0.5%)
 DAGOLDEN  137.3MB ( 0.5%)
      KAL  133.3MB ( 0.5%)
   RENEEB  132.1MB ( 0.5%)
   ABRETT  131.8MB ( 0.5%)
     TVDW  129.2MB ( 0.5%)
   ZEFRAM  127.1MB ( 0.4%)
 GRIBUSER  124.4MB ( 0.4%)
    MOTIF  122.9MB ( 0.4%)
   STEVAN  116.0MB ( 0.4%)
 MIYAGAWA  109.7MB ( 0.4%)
  DROLSKY  109.1MB ( 0.4%)
     DAPM  109.0MB ( 0.4%)
  ATOOMIC  105.9MB ( 0.4%)
   CORION   94.1MB ( 0.3%)
 LBROCARD   93.3MB ( 0.3%)
      MGV   92.4MB ( 0.3%)
    ADAMK   88.5MB ( 0.3%)
  RGARCIA   88.1MB ( 0.3%)
     LETO   86.6MB ( 0.3%)
 BRMILLER   79.6MB ( 0.3%)
  ASLEWIS   78.7MB ( 0.3%)
      JWB   77.1MB ( 0.3%)
 GENEHACK   77.0MB ( 0.3%)
 AUTRIJUS   76.8MB ( 0.3%)
&lt;/pre&gt;
&lt;h2&gt;On BackPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="http://backpan.cpantesters.org/backpan-full-index.txt.gz" rel="nofollow"&gt;http://backpan.cpantesters.org/backpan-full-index.txt.gz&lt;/a&gt; (~14MB as of this writing) &lt;/p&gt;
&lt;p&gt;Total size of files on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;/.+ \d+ (\d+)$/ or next; $size+=$1; END { printf &amp;quot;%.1fGB\n&amp;quot;, $size/1024/1024/1024 }&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;78.5GB
&lt;/pre&gt;
&lt;p&gt; This is a 9.50% increase from Dec 26, 2019. &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;m!authors/id/./../(\w+)/.+ (\d+) (\d+)$! or next; $size{$1}+=$3; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $size{$_}/1024/1024, $size{$_}/1024/1024/73445.3*100 for sort { $size{$b}&amp;lt;=&amp;gt;$size{$a} } keys %size }&amp;#039; | head -n50
 REEDFISH 9607.0MB (13.1%)
     SHAY 2423.3MB ( 3.3%)
   LSKATZ 1771.1MB ( 2.4%)
     RJBS 1761.0MB ( 2.4%)
      ZDM 1724.6MB ( 2.3%)
PERLANCAR 1322.5MB ( 1.8%)
   AJPAGE 1218.4MB ( 1.7%)
 XSAWYERX 1185.4MB ( 1.6%)
TIEDEMANN 1090.9MB ( 1.5%)
      KAL  957.1MB ( 1.3%)
DCANTRELL  873.4MB ( 1.2%)
      LDS  767.1MB ( 1.0%)
   BINGOS  747.7MB ( 1.0%)
    JKEGL  692.0MB ( 0.9%)
      INA  639.6MB ( 0.9%)
    JESSE  625.7MB ( 0.9%)
BTMCINNES  615.8MB ( 0.8%)
   DGINEV  575.2MB ( 0.8%)
  DROLSKY  546.8MB ( 0.7%)
      SRI  539.1MB ( 0.7%)
 JDDPAUSE  520.5MB ( 0.7%)
      CHM  495.5MB ( 0.7%)
 PAWAPAWA  474.2MB ( 0.6%)
 AREIBENS  470.2MB ( 0.6%)
    GIBUS  459.7MB ( 0.6%)
  RKELSCH  452.3MB ( 0.6%)
  NWCLARK  435.6MB ( 0.6%)
  TMILLER  433.5MB ( 0.6%)
   OLIVER  428.6MB ( 0.6%)
 CJFIELDS  427.6MB ( 0.6%)
   STEVEB  426.6MB ( 0.6%)
     AMBS  397.5MB ( 0.5%)
    ADAMK  374.4MB ( 0.5%)
EARONESTY  370.6MB ( 0.5%)
 MLEHMANN  355.6MB ( 0.5%)
     JGNI  353.6MB ( 0.5%)
 DANKOGAI  349.0MB ( 0.5%)
    ETHER  339.8MB ( 0.5%)
   NHORNE  334.9MB ( 0.5%)
  ABIGAIL  327.2MB ( 0.4%)
  ASLEWIS  315.2MB ( 0.4%)
  GRAHAMC  295.0MB ( 0.4%)
  MARTIMM  293.3MB ( 0.4%)
 MIYAGAWA  290.8MB ( 0.4%)
    HISSO  276.6MB ( 0.4%)
   CORION  271.8MB ( 0.4%)
  VANSTYN  271.1MB ( 0.4%)
 WOLFSAGE  269.2MB ( 0.4%)
      ETJ  268.6MB ( 0.4%)
 DBAURAIN  267.5MB ( 0.4%)
&lt;/pre&gt;
&lt;p&gt; Some authors have mentioned that they would like to have their old releases purged from BackPAN as well, but from what I see so far this does not seem to have happened yet. &lt;/p&gt;
&lt;p&gt;Also if you see, some authors have not done much purging. I remember someone produced percentage number of an individual author&amp;#039;s CPAN/BackPAN usage as a measure of &amp;quot;cleanup&amp;quot;, but can&amp;#039;t remember who and where.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Prompted by this post on PAUSE running out of disk space, I thought I'd refresh my own post "Top 50 authors by disk space on BackPAN" (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. On CPAN Source: https://www.cpan.org/indices/find-ls.gz (~14MB as of this writing), but more … <a href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" class="more-link">Continue reading <span class="screen-reader-text">Disk space usage of CPAN authors (May 16, 2021 edition)</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1943</id>
    <published>2021-05-16T08:48:50Z</published>
    <updated>2021-05-16T08:48:50Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="backpan"/>
  </entry>
</feed>
