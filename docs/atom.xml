<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-12-17T16:41:22Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Advent Calendar - December 17, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-17/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 16 | Day 17 |  The gift is presented by Laurent Rosenfeld. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 194&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 These are some answers to the Week 194 of the Perl Weekly Challenge organized by Mohammad S. Anwar.
Spoiler Alert: This weekly challenge deadline is due in a few days from now (on December 11, 2022 at 23:59).</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-17/</id>
    <published>2022-12-17T00:00:00Z</published>
    <updated>2022-12-17T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Advent Calendar 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">| 2019 | 2020 | 2021 | 2022 |  Welcome to our 4th Advent Calendar. I promise to present interesting topic every day contributed by esteemed members of Team PWC.                         MON
 TUE
 WED
 THU
 FRI
 SAT
 SUN</div>
    </content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022/</id>
    <published>2022-12-17T00:00:00Z</published>
    <updated>2022-12-17T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-12-17T00:00:00Z</published>
    <updated>2022-12-17T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Naughty or Nice Networks</title>
    <link href="http://perladvent.org/2022/2022-12-17.html"/>
    <id>http://perladvent.org/2022/2022-12-17.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;The wise old elf was taking a breather from all the busy preparations and was just looking forward to a richly deserved hot toddy when he heard a familiar knock at the door. He allowed himself the briefest of sighs.&lt;/p&gt;

&lt;p&gt;&amp;quot;Come in, Wispy!&amp;quot;&lt;/p&gt;

&lt;p&gt;In scuttled Wispy Crinkletops wearing a worried expression.&lt;/p&gt;

&lt;p&gt;&amp;quot;You know the wonderful new web portal we set up so that people could write to us directly with their wishes? Well, not all the messages received have been about that. Lots are from people looking to sell us things - and mostly useless things at that! And there are some others which are just so ... rude. How could anyone be so mean?&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;Now, now. Don&amp;#39;t get all flustered. You know that this sort of thing is why the boss keeps a Naughty List as well as a Nice List.&amp;quot;. The wise old elf thought for a moment and then asked, &amp;quot;Did you look to see if these all came from the same IP address?&amp;quot;.&lt;/p&gt;

&lt;p&gt;Wispy composed herself and then nodded. &amp;quot;I did check but they were from quite a big number of different addresses so it would take forever to try to deal with them all.&amp;quot;.&lt;/p&gt;

&lt;p&gt;&amp;quot;Hmmm. Can you show me the list?&amp;quot;&lt;/p&gt;

&lt;p&gt;Again Wispy nodded and produced a sizeable sheaf of 11 by 14 fanfold. The wise old elf smiled kindly and ran his eyes down the list. Some definite patterns were detectable and he hit upon an idea.&lt;/p&gt;

&lt;p&gt;&amp;quot;Even though there are a lot of different addresses, it looks like only a dozen or so netblocks are involved. We can use &lt;a href="https://metacpan.org/module/Net::CIDR::Lite"&gt;Net::CIDR::Lite&lt;/a&gt; to filter those.&amp;quot;. He turned to his terminal and quickly constructed some code. Wispy peered over his shoulder to see.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;CGI::Fast&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Net::CIDR::Lite&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# Build list of netblocks&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$naughty&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Net::CIDR::Lite&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$naughty&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="magic"&gt;$_&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="words"&gt;qw{10.52.192.0/18 172.26.64.0/20 192.168.188.0/23}&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;while&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$fcgi&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;CGI::Fast&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # Test for presence in the list&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$naughty&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;find&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$ENV&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;REMOTE_ADDR&lt;/span&gt;&lt;span class="structure"&gt;}))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;triage&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$fcgi&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;next&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;warn&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;DEBUG: $ENV{REMOTE_ADDR} is not from a known naughty netblock.\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;process_form&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$fcgi&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;triage&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;	# Push the message onto the moderation queue&lt;br /&gt;&lt;/span&gt;	&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;process_form&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;	# Not from a known naughty netblock, so assume to be nice&lt;br /&gt;&lt;/span&gt;	&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The wise old elf explained, &amp;quot;This allows any number of ranges to be combined into a single list for comparison against the client address. You don&amp;#39;t need to store every single address in the naughty blocks.&amp;quot;&lt;/p&gt;

&lt;p&gt;Wispy was impressed but could see one or two problems. &amp;quot;We don&amp;#39;t use &lt;a href="https://metacpan.org/module/CGI::Fast"&gt;FCGI&lt;/a&gt; for the web form - it&amp;#39;s all &lt;a href="https://metacpan.org/module/PSGI"&gt;PSGI&lt;/a&gt; now.&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;It&amp;#39;s only an illustration, Wispy - you can use this method with any handler.&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;There were IPv6 addresses in the list too. Can we add those?&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;You would need 2 separate objects to hold v4 and v6 addresses but the principle is the same.&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;I can never remember the netmasks, though.&amp;quot; moaned Wispy, crestfallen.&lt;/p&gt;

&lt;p&gt;The wise old elf smiled. &amp;quot;You don&amp;#39;t have to use netmasks, just a simple range will do. You can even mix and match, like this:&amp;quot;&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="symbol"&gt;$naughty&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_any&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="magic"&gt;$_&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="words"&gt;qw{10.52.192.0/18 172.26.64.0-172.26.79.255 192.168.188.0/23}&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Wispy brightened as she could see that this would save time and effort and keep all those naughty girls and boys where they deserved to be. She thanked the wise old elf and headed off to implement the filter, leaving him to enjoy his hot toddy in peace.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-17T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Pete Houston</name>
    </author>
  </entry>
  <entry>
    <title>How to use React with Perl/Mojolicious web frame work</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/how-to-use-react-with-perlmojolicious-web-frame-work-8id" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>How to use React with <a href="https://mojolicious.org/">Mojolicious</a> web frame work.</p>

<p>Let's added the following code into a template file <code>foo.html.ep</code> of Mojolicious after downloading React.</p>

<h2>
  
  
  HTML Body
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>&lt;div id="like_button_container"&gt;&lt;/div&gt;
</code></pre>

</div>



<h2>
  
  
  HTML Header
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>  &lt;script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin&gt;&lt;/script&gt;
  &lt;script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin&gt;&lt;/script&gt;

  &lt;script src="like_button.js"&gt;&lt;/script&gt;
</code></pre>

</div>



<h2>
  
  
  JavaScript
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>const domContainer = document.querySelector('#like_button_container');
const root = ReactDOM.createRoot(domContainer);
root.render(e(LikeButton));
</code></pre>

</div>



<h2>
  
  
  See also
</h2>

<p>I use the codes of the following site.</p>

<p><a href="https://ja.reactjs.org/docs/add-react-to-a-website.html#add-react-in-one-minute">https://ja.reactjs.org/docs/add-react-to-a-website.html#add-react-in-one-minute</a></p>

<h2>
  
  
  For Beginners
</h2>

<p>Mojolicious is a Perl web frame work that support async I/O like node.js.</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/how-to-use-react-with-perlmojolicious-web-frame-work-8id</id>
    <published>2022-12-16T23:05:00Z</published>
    <updated>2022-12-16T23:05:00Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
    <category term="react"/>
    <category term="javascript"/>
  </entry>
  <entry>
    <title>This Week in PSC (091)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2022/12/this-week-in-psc-091.html"/>
    <id>tag:blogs.perl.org,2022:/users/psc//4112.10971</id>
    <published>2022-12-16T22:00:45Z</published>
    <updated>2022-12-16T22:02:42Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<ul>
<li>Continued discussing the lack of reviews for PRs. Maybe we need a bit of a defined process for how to review small/medium/big PRs
<li>Paul suggested he might find time to begin implementing <tt>qt{}</tt> strings soon
<li>HTTPS support in core still needs a project manager to help coördinate the efforts
</ul>

<p>We won't be meeting next week due to the Christmas holidays. Next meeting may be 30th or may be in 2023.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>FOSDEM</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdemstand"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/fosdemstand</id>
  <published>2022-12-16T13:28:59</published>
  <updated>2022-12-16T13:28:59</updated>
  <summary>
  <![CDATA[
     FOSDEM 2023 is in person on February 4th and 5th and TPRF is seeking volunteers to help run the The Perl/Raku Foundation stand. We are looking for people that can share information about Perl/Raku and hand out TPRF provided materials. If you are interested in assisting, please contact hello@perlfoundation.org with your avaiblitiy or for more information. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/ed20b87e4006fc60edb450ad8dad59759453cb86/megaphone.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><a href="https://fosdem.org/2023/">FOSDEM 2023</a> is in person on February 4th and 5th and TPRF is seeking volunteers to help run the The Perl/Raku Foundation stand. We are looking for people that can share information about Perl/Raku and hand out TPRF provided materials. If you are interested in assisting, please contact hello@perlfoundation.org with your avaiblitiy or for more information. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) November 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_november_2022"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/maintaining_perl_tonyc_november_2022</id>
  <published>2022-12-16T12:32:35</published>
  <updated>2022-12-16T12:32:35</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/11/01 Tuesday  0.97 github notifications  2.70 #20457 review, testing, research, comments  0.38 #20446 look over latest push, discussion in private on irc  with dmq  4.05 2022/11/02 Wednesday  0.38 review list discussion  0.30 #20271 apply to blead, perldelta  0.47 #20469 review and approve  0.78 #20411 review CI results, minor clean up, make PR 20473,  comment  1.17 #19964 review 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:
```
[Hours]         [Activity]
2022/11/01      Tuesday
 0.97           github notifications
 2.70           #20457 review, testing, research, comments
 0.38           #20446 look over latest push, discussion in private on irc</p>

<h1>                with dmq</h1>

<p> 4.05</p>

<p>2022/11/02      Wednesday
 0.38           review list discussion
 0.30           #20271 apply to blead, perldelta
 0.47           #20469 review and approve
 0.78           #20411 review CI results, minor clean up, make PR 20473,
                comment
 1.17           #19964 review CI results, work on fixes
 0.55           #19964 more fixes, polish, push for CI
 0.70           #20426 testing</p>

<h1> 1.03           #20426 try to find cause</h1>

<p> 5.38</p>

<p>2022/11/03      Thursday
 0.22           #20473 apply to blead, perldelta
 0.58           #20451 review, testing, comments
 1.63           look at removing feature bundle optimization</p>

<h1> 2.25           more remove feature bundle optimization</h1>

<p> 4.68</p>

<p>2022/11/07      Monday
 0.32           #20451 review and approve
 0.92           #20490 work up a patch for Devel::NYTProf
 0.38           #20415 research and comment
 0.32           #20483 review and comment
 2.00           more feature bundle, set default bundle, work on hooking</p>

<h1>                on fetching in magic</h1>

<p> 3.94</p>

<p>2022/11/08      Tuesday
 0.32           github notifications
 0.17           #20483 review updated commit and approve
 0.30           #20474 apply to blead, perldelta updates
 0.67           feature bundle, look into magic handling
 1.65           more look into magic handling, start on an alternate</p>

<h1>                approach</h1>

<p> 3.11</p>

<p>2022/11/09      Wednesday
 0.27           github notifications
 1.23           yet another alternate approach (which should work, but is
                more expensive)
 2.90           more feature bundle, debugging, make a lot of tests fail</p>

<h1>                and consider approaches</h1>

<p> 4.40</p>

<p>2022/11/10      Thursday
 1.15           #20489 testing, review code and documentation, long
                comment
 1.10           #20476 research, work on code</p>

<h1> 2.08           #20476 more code, debugging, testing</h1>

<p> 4.33</p>

<p>2012/11/11      Sunday
 1.07           #20476 minor re-work, testing, push for CI, make PR 20500</p>

<h1> 0.48           look into porting/copyright.t failure on win32, PR #20501</h1>

<p> 1.55</p>

<p>2012/11/14      Wednesday
 0.90           #20496 review, comments
 0.33           #20505 review, briefly comment
 0.47           #20502 follow-up
 0.32           perlsecpolicy and ibb - make PR #20508
 0.03           #20504 start update 32-bit build environment
 0.38           #20502 configure.gnu and extra arguments, PR #20509
 0.60           #20504 work out fix, testing, push for CI
 0.42           #20467 review, research and comment
 0.22           #20415 review and apply to blead</p>

<h1> 0.72           #20503 review code, try to find bugs, testing, comment</h1>

<p> 4.39</p>

<p>2022/11/15      Tuesday
 1.12           add length tests for SvPV(byte|utf8)* macros
 0.25           update svpv_magic.t too, testing, push for CI
 0.52           github notifications</p>

<h1> 1.08           #20513 research, comment</h1>

<p> 2.97</p>

<p>2022/11/16      Wednesday
 0.13           #20496 review and approve
 1.90           #20513 testing, look at warnings, comment on #20410
 0.83           #20410 look at warning fixes</p>

<h1> 1.20           #20410 more work on warning fixes</h1>

<p> 4.06</p>

<p>2022/11/17      Thursday
 0.17           github notifications
 0.15           #20504 review CI results and make PR 20519
 0.15           SvPV variant length tests: review CI results, make PR
                20520
 2.10           #20410 resolve the HEK_KEY() always true warnings, look
                into the array bounds warnings (hello macro hell)
 1.47           #20410 fix the rest, open PR #20522
 2.00           #20506 debugging, comment, work on a fix, testing, push</p>

<h1>                for CI</h1>

<p> 6.04</p>

<p>2022/11/18      Friday</p>

<h1> 0.70           #20410 prevent warning in Devel::PPPort</h1>

<p> 0.70</p>

<p>2022/11/21      Monday
 3.73           #20528 testing, reproduce, debugging, diagnose, testing
 0.33           #20528 make PR #20531
 0.15           #20530 comment
 0.55           #20471 review, research, comment
 0.55           #20022 review, research</p>

<h1> 0.83           #20523 review, research, testing, comment</h1>

<p> 6.14</p>

<p>2022/11/22      Tuesday
 0.18           #20530 follow-up comment
 1.38           #20506 look at CI results, work on fixes, push for CI
 0.45           #20518 research, testing</p>

<h1> 2.02           #20518 research, work on a skip patch and testing</h1>

<p> 4.03</p>

<p>2022/11/23      Wednesday
 0.98           #20518 more testing, commit, push for CI, comment
 0.77           #20536 review and conditionally approve
 0.25           #20532 apply to blead, perldelta
 1.28           #20533 testing, debugging, work on a fix, testing
 1.68           #20533 more fixes, clean up some old code, update
                documentation, testing, push to update other symlink</p>

<h1>                branch</h1>

<p> 4.96</p>

<p>2022/11/24      Thursday
 0.62           github notifications
 1.05           look at builtin::ceil/floor overloading
 0.90           research and follow-up on lto thread</p>

<h1> 0.83           more overloading</h1>

<p> 3.40</p>

<p>2022/11/28      Monday
 0.55           github notifications
 0.43           #20518 make some comment changes suggested by jkeenan and
                open PR 20553
 0.28           #20539 re-word perlport changes
 1.18           #20503 performance testing
 0.23           #20542 review, comment
 0.67           #20512 review
 0.32           #20541 review and approve, research and comment</p>

<h1> 0.98           #20544 review, testing and comment</h1>

<p> 4.64</p>

<p>2022/11/29      Tuesday
 0.17           #20546 review and approve
 0.38           #20545 review and approve
 0.25           #20548 review and approve, notice CI failure, try to
                reproduce and comment
 0.30           #20555 review and approve
 0.23           #20540 review and comment
 0.73           #20395 research, work on a fix
 1.97           #20395 work on a simpler fix, testing, push for CI</p>

<h1> 0.78           more floor/ceil overloading</h1>

<p> 4.81</p>

<p>2022/11/30      Wednesday
 0.08           github notifications
 0.12           #20395 review CI results, make PR 20562
 0.47           #20558 review, research and comment
 0.30           #20561 review and approve
 1.57           more floor/ceil overloading - struggling with test
                failures, debugging</p>

<h1> 1.10           more floor/ceil overloading - debugging</h1>

<p> 3.64</p>

<p>Which I calculate is 81.22 hours.</p>

<p>Approximately 48 tickets were reviewed or worked on, and 5 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): November 2022 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_nov_2022"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/maintaining_perl_dave_mitchell_nov_2022</id>
  <published>2022-12-16T12:28:00</published>
  <updated>2022-12-16T12:28:00</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during November covered by my TPF perl core maintenance grant. This month I restarted work in earnest on making the stack reference counted. I have reached the point where: Around 250 PP functions have been wrapped this means that the original functions will continue to work in the new regime, albeit more slowly. Each wrapped function can later be individually 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during November covered by my TPF
perl core maintenance grant.</p>

<p>This month I restarted work in earnest on making the stack reference
counted. I have reached the point where:</p>

<p>Around 250 PP functions have been wrapped - this means that the original
functions will continue to work in the new regime, albeit more slowly.
Each wrapped function can later be individually worked on to remove the
wrapper and regain performance.</p>

<p>The remaining 50 or so PP functions were either so trivial that they
didn't need wrapping, or (for most of them) so complex that they needed to
be hand-crafted to work on both a RC and non-RC stack environment. The
ones needing work included most of the pp_enterfoo() and pp_leavefoo()
functions, along with things like map, grep, sort, goto etc. Fixing these
complex functions is what has mostly been consuming my time.</p>

<p>At the moment these functions don't actually do reference counting: all
the new inline functions which push and pop items off the stack etc
currently skip the RC++ or RC-- bit. But I am nearly at the stage where I
will actually turn on ref-counting, at which point I will have the fun of
fixing all the things I blindly changed which it turns out were wrong.</p>

<p>The Programmer's Credo:</p>

<pre><code> We choose to do these things not because they are easy,
 but because we thought they would be easy.
</code></pre>

<p><code>
SUMMARY:
      0:36 diagnose smoke failures in dist/Tie-File/t/29a_upcopy.t
      1:00 fix stderr build noise
     33:53 make stack reference counted
     12:36 process p5p mailbox
      1:20 review OPpEMPTYAVHV_IS_HV
      0:10 review PR #20526
    ------
     49:35 TOTAL (HH::MM)
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Day 16: Moving from Travis-CI to GitHub Actions for Marpa::R2</title>
    <link rel="alternate" href="https://dev.to/szabgab/day-16-moving-from-travis-ci-to-github-actions-for-marpar2-21cj" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/Marpa::R2"&gt;Marpa::R2&lt;/a&gt; can parse any language whose grammar can be written in BNF. It used Travis-CI, but since Travis-CI discontinued its free offering for Open Source project the project was without CI.&lt;/p&gt;

&lt;p&gt;I &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/289"&gt;asked&lt;/a&gt; the author if he would be interested in a GitHub Actions configuration.&lt;/p&gt;

&lt;h2&gt;
  
  
  A warning during build
&lt;/h2&gt;

&lt;p&gt;I tried to build the module locally and run its tests locally, but I encountered some issues:&lt;/p&gt;

&lt;p&gt;First I noticed that there are some &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/290"&gt;warning during the build&lt;/a&gt; emitted by one of the dependencies. As it turns out upgrading the dependency solved this issue, but the latest package of the dependency also had a minor issue. The version numbers in the different files were slightly confusing. So I &lt;a href="https://github.com/Perl/perl5/issues/20609"&gt;reported that too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apparently that was already fixed, it was just not released yet.&lt;/p&gt;

&lt;h2&gt;
  
  
  An error - missing files
&lt;/h2&gt;

&lt;p&gt;The next thing I encountered was that some files were &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/291"&gt;missing&lt;/a&gt;. That made the tests fail. The author first thought that the issue was somehow cause by me mixing versions, but soon found that the files were &lt;code&gt;not added to git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is one of the reasons to have CI.&lt;/p&gt;

&lt;p&gt;This can happen to any one of us.&lt;/p&gt;

&lt;p&gt;Maybe not to you, but someone else on your team or to a contributor to your project&lt;/p&gt;

&lt;h2&gt;
  
  
  Should the tip of the main branch be usable?
&lt;/h2&gt;

&lt;p&gt;The author made an interesting &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/291#issuecomment-1353354424"&gt;comment&lt;/a&gt; on the  &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/291"&gt;issue&lt;/a&gt; about the missing files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FYI many programmers make a point of the tip of their main branch being something usable. I am NOT one of them, so pulling from my repo, instead of a distribution, is risky.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what I think about it:&lt;/p&gt;

&lt;p&gt;I would say it is a good practice to ensure all the test are always passing on the tip of the main branch.  Otherwise one would risk starting to think that "some tests always fail" which could lead to some test failing that &lt;em&gt;should not fail&lt;/em&gt; go unnoticed for a long period of time.&lt;/p&gt;

&lt;p&gt;Also it upsets the CI and we don't want to do that.&lt;/p&gt;

&lt;p&gt;Actually, one of the reasons of having a CI to have something look over our shoulders and make sure that all the tests are always passing on a clean environment.&lt;/p&gt;

&lt;p&gt;And then comes the point, if all the tests are passing, doesn't that mean that the version is usable?&lt;/p&gt;

&lt;p&gt;I am looking forward the continuation of this discussion.&lt;/p&gt;

&lt;h2&gt;
  
  
  Pull-Request
&lt;/h2&gt;

&lt;p&gt;Once those issues were fixed adding the GitHub Action configuration file and converting the commands from the Travis-CI config file to GitHub Actions was not difficult. At one point the author commented that he wants the code to run on Windows and macOS as well, but it is difficult as he does not have access to those operating systems. I figured configuring GitHub Actions to run on those OS-es as well will help him with that task. I was also expecting the test or even maybe the compilation to fail on at lest one of them. So I was a bit surprised that everything worked.&lt;/p&gt;

&lt;p&gt;Well, I still managed to make a few mistakes and thus had to try it several time, but after a while I got it right and sent the &lt;a href="https://github.com/jeffreykegler/Marpa--R2/issues/291"&gt;pull-request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To my surprise the author closed it as he is planning to move the repo to a GitHub organization.&lt;/p&gt;

&lt;p&gt;It is unclear to me why that stops him from accepting the PR so I asked him on the PR.&lt;/p&gt;

&lt;h2&gt;
  
  
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;In any case, I included the configuration files here. This time, I went a bit further than in the previous cases of my recent GitHub Actions pull-requests.&lt;br&gt;
I also went beyond what was in the Travis-CI configuration file.&lt;/p&gt;

&lt;p&gt;This time I create two configuration file.&lt;/p&gt;

&lt;p&gt;In the first one we use multiple version of perl in Docker containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;42&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;fail-fast&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;perl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.10'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.20'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.30'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.36'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.36-threaded'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# See options here: https://hub.docker.com/_/perl/&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OS Perl ${{matrix.perl}}&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;perl:${{matrix.perl}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v3&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Perl Version&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;perl -v&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Modules&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cpanm Config::AutoConf # optional dependency&lt;/span&gt;
        &lt;span class="s"&gt;cd cpan&lt;/span&gt;
        &lt;span class="s"&gt;cpanm --installdeps --quiet --notest .&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Errors on Ubuntu&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;${{ failure() &amp;amp;&amp;amp; startsWith( matrix.runner, 'ubuntu-')}}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
         &lt;span class="s"&gt;cat /home/runner/.cpanm/work/*/build.log&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build Marpa and execute tests&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;AUTHOR_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;RELEASE_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;set -x&lt;/span&gt;
        &lt;span class="s"&gt;(cd cpan/xs/ &amp;amp;&amp;amp; make)  # generate necessary files&lt;/span&gt;

        &lt;span class="s"&gt;cd cpan/&lt;/span&gt;
        &lt;span class="s"&gt;perl Build.PL&lt;/span&gt;
        &lt;span class="s"&gt;./Build&lt;/span&gt;
        &lt;span class="s"&gt;./Build test&lt;/span&gt;
        &lt;span class="s"&gt;./Build distmeta&lt;/span&gt;
        &lt;span class="s"&gt;./Build disttest&lt;/span&gt;
        &lt;span class="s"&gt;MARPA_USE_PERL_AUTOCONF=1 ./Build disttest&lt;/span&gt;
        &lt;span class="s"&gt;./Build dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second one we use the 3 different operating systems: Windows, Linux and macOS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Platforms&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;#  schedule:&lt;/span&gt;
&lt;span class="c1"&gt;#    - cron: '42 5 * * *'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;platform-test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;fail-fast&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;perl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.30'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
            &lt;span class="na"&gt;perl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.36'&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{matrix.runner}}&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OS ${{matrix.runner}} Perl ${{matrix.perl}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v3&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up perl&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shogo82148/actions-setup-perl@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;perl-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.perl }}&lt;/span&gt;
          &lt;span class="na"&gt;distribution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ ( matrix.runner == 'windows-latest' &amp;amp;&amp;amp; 'strawberry' ) || 'default' }}&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Perl Version&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;perl -v&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Modules&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cpanm Config::AutoConf # optional dependency&lt;/span&gt;
        &lt;span class="s"&gt;cd cpan&lt;/span&gt;
        &lt;span class="s"&gt;cpanm --installdeps --quiet --notest .&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Errors on Windows&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;${{ failure() &amp;amp;&amp;amp; matrix.runner == 'windows-latest' }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
         &lt;span class="s"&gt;ls -l C:/Users/&lt;/span&gt;
         &lt;span class="s"&gt;ls -l C:/Users/RUNNER~1/&lt;/span&gt;
         &lt;span class="s"&gt;cat C:/Users/runneradmin/.cpanm/work/*/build.log&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Errors on Ubuntu&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;${{ failure() &amp;amp;&amp;amp; matrix.runner == 'ubuntu-latest' }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
         &lt;span class="s"&gt;cat /home/runner/.cpanm/work/*/build.log&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Errors on OSX&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;${{ failure() &amp;amp;&amp;amp; matrix.runner == 'macos-latest' }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
         &lt;span class="s"&gt;cat  /Users/runner/.cpanm/work/*/build.log&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Make - generate necessary files&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cd cpan&lt;/span&gt;
        &lt;span class="s"&gt;cd xs&lt;/span&gt;
        &lt;span class="s"&gt;make&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;AUTHOR_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;RELEASE_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cd cpan&lt;/span&gt;
        &lt;span class="s"&gt;perl Build.PL&lt;/span&gt;
        &lt;span class="s"&gt;perl Build&lt;/span&gt;
        &lt;span class="s"&gt;perl Build test&lt;/span&gt;
        &lt;span class="s"&gt;perl Build distmeta&lt;/span&gt;
        &lt;span class="s"&gt;perl Build disttest&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests with autoconf&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;MARPA_USE_PERL_AUTOCONF&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cd cpan&lt;/span&gt;
        &lt;span class="s"&gt;perl Build disttest&lt;/span&gt;

    &lt;span class="c1"&gt;#- name: Build dist&lt;/span&gt;
    &lt;span class="c1"&gt;#  env:&lt;/span&gt;
    &lt;span class="c1"&gt;#    perl Build dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You don't have to have a CI if you remember always running your tests. You don't even need to have access to Windows and macOS to make your code work there if you are a really good&lt;br&gt;
programmer as Jeffrey Kegler, the author of Marpa. And even then you might forget to add some of the files to git.&lt;/p&gt;

&lt;p&gt;However, most of us aren't as focused on the details and most of would not be able to build a project like Marpa. For sure I know I wouldn't.&lt;/p&gt;

&lt;p&gt;So we need the hand-holding and the discipline a CI can provide.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/day-16-moving-from-travis-ci-to-github-actions-for-marpar2-21cj</id>
    <published>2022-12-16T06:11:00Z</published>
    <updated>2022-12-16T06:11:00Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="devops"/>
    <category term="ci"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 16, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-16/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 15 | Day 16 | Day 17 |  The gift is presented by Jaldhar H. Vyas. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 188&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Challenge 1: Divisible Pairs You are given list of integers @list of size $n and divisor $k.
Write a script to find out count of pairs in the given list that satisfies the following rules.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-16/</id>
    <published>2022-12-16T00:00:00Z</published>
    <updated>2022-12-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Relocatable Perl</title>
    <link href="http://perladvent.org/2022/2022-12-16.html"/>
    <id>http://perladvent.org/2022/2022-12-16.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;On May 2022, perl v5.36 was &lt;a href="https://rjbs.cloud/blog/2022/05/perl-5.36/"&gt;released&lt;/a&gt;. Now I always write perl with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use v5.36;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I&amp;#39;m very excited to use new features.&lt;/p&gt;

&lt;p&gt;Unfortunately I don&amp;#39;t think too many people use perl v5.36 yet. This is because &lt;i&gt;system&lt;/i&gt; perls are often out-of-date, so people don&amp;#39;t have many chances to use the latest perl.&lt;/p&gt;

&lt;p&gt;It is true that you, an experienced Perl hacker, could build perl v5.36 by yourself. But people who are not very familiar with Perl rarely build perl from source.&lt;/p&gt;

&lt;p&gt;Some programming languages, including &lt;a href="https://nodejs.org/en/download/"&gt;nodejs&lt;/a&gt; and &lt;a href="https://go.dev/dl/"&gt;golang&lt;/a&gt;, provide their pre-built binaries. This helps people get started and use the latest version of the languages.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;So what if perl also provides its pre-built binaries?&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Because perl itself does not depend on external libraries (expect for glibc on linux, etc.), it seems that we can prepare portable perl binaries for each OS/arch. Additionally, since v5.10, perl can be built with &lt;a href="https://metacpan.org/pod/release/XSAWYERX/perl-5.26.0/pod/perl5100delta.pod#Relocatable-installations"&gt;relocatable INC&lt;/a&gt; so that we can relocate the perl tree wherever we want.&lt;/p&gt;

&lt;p&gt;Well, I prepared pre-built &lt;a href="https://github.com/skaji/relocatable-perl"&gt;relocatable-perls&lt;/a&gt; for&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;linux amd64&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux arm64&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS amd64&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS arm64 (for M1/M2 chips)&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are these useful? Let&amp;#39;s give it a try!&lt;/p&gt;

&lt;h2 id="Install-relocatable-perls"&gt;Install relocatable-perls&lt;/h2&gt;

&lt;p&gt;There are 3 ways to install relocatable-perls.&lt;/p&gt;

&lt;h3 id="Manually"&gt;Manually&lt;/h3&gt;

&lt;p&gt;You can manually download tarballs for your OS/arch from &lt;a href="https://github.com/skaji/relocatable-perl/releases/latest"&gt;release page&lt;/a&gt;. For example, if you use macOS with the M1 chip, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ curl -fsSL -o perl-darwin-arm64.tar.xz https://github.com/skaji/relocatable-perl/releases/latest/download/perl-darwin-arm64.tar.xz
  $ tar xf perl-darwin-arm64.tar.xz
  $ mv perl-darwin-arm64 ~/wherever-you-want
  $ ~/wherever-you-want/bin/perl -v
  This is perl 5, version 36, subversion 0 (v5.36.0) built for darwin-2level&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="One-liner"&gt;One liner&lt;/h3&gt;

&lt;p&gt;A helper script &lt;a href="https://github.com/skaji/relocatable-perl/blob/main/perl-install"&gt;perl-install&lt;/a&gt; helps you to install relocatable-perls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ curl -fsSL https://raw.githubusercontent.com/skaji/relocatable-perl/main/perl-install | bash -s ~/perl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs the latest relocatable-perl into &lt;code&gt;~/perl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="plenv"&gt;plenv&lt;/h3&gt;

&lt;p&gt;If you use &lt;a href="https://github.com/tokuhirom/plenv"&gt;plenv&lt;/a&gt;, then &lt;a href="https://github.com/skaji/plenv-download"&gt;plenv-download&lt;/a&gt; may be useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ git clone https://github.com/skaji/plenv-download $(plenv root)/plugins/plenv-download
  $ plenv download latest
  Downloading https://github.com/skaji/relocatable-perl/releases/download/5.36.0.1/perl-darwin-amd64.tar.xz
  Unpacking /Users/skaji/env/plenv/cache/relocatable-5.36.0.1/perl-darwin-amd64.tar.xz
  Successfully installed 5.36.0.1&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="How-to-use-relocatable-perls"&gt;How to use relocatable-perls&lt;/h2&gt;

&lt;p&gt;You can use relocatable-perls just like your usual perls. I have been using relocatable-perls for 8 years and don&amp;#39;t have any particular problems.&lt;/p&gt;

&lt;p&gt;Relocatable-perls come with &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanm&lt;/a&gt; so that you are ready to use CPAN modules!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cpanm -nq Plack
  $ plackup -p 8080 -e &amp;#39;sub {[200,[],[&amp;quot;hello world!&amp;quot;]]}&amp;#39;
  HTTP::Server::PSGI: Accepting connections at http://0:8080/&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="Conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think pre-built binaries helps people get started with perl and use the latest version of perl. I prepared &lt;a href="https://github.com/skaji/relocatable-perl"&gt;relocatable-perls&lt;/a&gt; so that you can give it a try now!&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-16T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Shoichi Kaji</name>
    </author>
  </entry>
  <entry>
    <title>News: Perl Advent Calendar 2022</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/news-perl-advent-calendar-2022-1d5b" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl Advent Calendar 2022 is announced at <a href="https://www.reddit.com/r/perl/comments/zmn7oi/perl_advent_calendar_2022_day_15_create/">reddit</a>.</p>

<p><a href="https://perladvent.org/2022/2022-12-15.html">Perl Advent Calendar 2022</a></p>

<h2>
  
  
  For Programming Beginners
</h2>

<p>Advent Calendars are engineer's events to write technical articles The Year-End.</p>

<p>Perl Advent Calendar is the one of them.</p>

<h2>
  
  
  See Also
</h2>

<p><a href="https://qiita.com/advent-calendar/2022/perl">Perl Advent Calendar 2022 in Japan</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/news-perl-advent-calendar-2022-1d5b</id>
    <published>2022-12-15T23:38:32Z</published>
    <updated>2022-12-15T23:38:32Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
    <category term="programming"/>
    <category term="news"/>
  </entry>
  <entry>
    <title>SPVM 0.9666 is released</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-09666-is-released-13ph" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM"&gt;SPVM&lt;/a&gt; 0.9666 is released.&lt;/p&gt;

&lt;h2&gt;
  
  
  New Features and Enhancement
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/Changes"&gt;Changes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.9666 2022-12-16
  [Bug Fix]
    * Fixed the bug that SPVM don't work on Windows Server 2020/2022.
  [Prerequirement Changes]
    * SPVM needs ExtUtils::CBuilder 0.280236+.
  [New Features]
    * The string in the config mode allow "-"
      Foo.my_mode-azAZ09.config
  [Changes]
    * Added --no-build-spvm-modules option to Makefile.PL that is generated by the spvmdist command.
    * Added --meta option to Makefile.PL that is generated by the spvmdist command.
    * Changed the Name, Usage, Description that is generated by the spvmdist command.

      =head1 Name

      SPVM::$class_name - foo

      =head1 Description

      C&amp;lt;SPVM::$class_name&amp;gt; is the L&amp;lt;SPVM&amp;gt;'s C&amp;lt;$class_name&amp;gt; class.

      =head1 Usage

        use $class_name;
    * Removed cpanm from MANIFEST.skip that is generated by the spvmdist command.
  [Build Process Improvement]
    * Added --no-build-spvm-modules option to Makefile.PL.
    * Added --no-precompile-tests option to Makefile.PL.
    * Added --meta option to Makefile.PL.
  [Test Improvement]
    * Solo tests use spvmcc command.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  For Programming Beginners
&lt;/h2&gt;

&lt;h3&gt;
  
  
  What Is SPVM?
&lt;/h3&gt;

&lt;p&gt;SPVM is a static typed programming language that can be installed from Perl/CPAN.&lt;/p&gt;

&lt;h3&gt;
  
  
  How potential dose SPVM have?
&lt;/h3&gt;

&lt;p&gt;Growth is expected in the fields of Bio Tech, AI/ML, Apple/iPhone/iPad Apps, Google/Android Apps, IoT Device, Connected Car, Smart Device, Smart Home, etc.&lt;/p&gt;

&lt;p&gt;This is because SPVM can produce an executable file that supports cross platforms and make easy to calculate arrays and bind C/C++ &lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-09666-is-released-13ph</id>
    <published>2022-12-15T23:31:40Z</published>
    <updated>2022-12-15T23:31:40Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
    <category term="programming"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Perl: load_file:Invalid access to memory location on Windows Server 2020/2022</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/perl-loadfileinvalid-access-to-memory-location-on-windows-server-20202022-2l2e" type="text/html"/>
    <content type="html">&lt;p&gt;I got this error on Windows Server 2020/2022 to load DLLs that is generated by &lt;a href="https://metacpan.org/pod/ExtUtils::CBuilder"&gt;ExtUtils::CBuilder&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't load dynamic_lib file "D:\a\SPVM\SPVM\SPVM-0.9665\blib\lib/SPVM/Format__precompile.xs.dll": load_file:Invalid access to memory location at D:\a\SPVM\SPVM\SPVM-0.9665\blib\lib/SPVM/Builder.pm line 262.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is fixed in the latest ExtUtils::CBuilder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/dist/ExtUtils-CBuilder/changes"&gt;Changes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Revision history for Perl extension ExtUtils::CBuilder.

0.280236 - 2021-02-12

  Fix:

  - Remove image-base generation on Win32/gcc and instead use GCC's built-in
    `--enable-auto-image-base` linker option.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  For Programming Beginners
&lt;/h2&gt;

&lt;p&gt;ExtUtils::CBuilder is a Perl module to generate shared libraries on Linux/Mac or Dynamic link libraries on Windows.&lt;/p&gt;

&lt;p&gt;This is a wrapper of C or C or C.&lt;/p&gt;

&lt;p&gt;They are compilers and linkers to compile C/C++ source codes and link them to output an executable file or a shared library.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/perl-loadfileinvalid-access-to-memory-location-on-windows-server-20202022-2l2e</id>
    <published>2022-12-15T23:01:05Z</published>
    <updated>2022-12-15T23:01:05Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
    <category term="programming"/>
    <category term="mingw"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 195:  Special Integers and Most Frequent Even</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2022/12/perl-weekly-challenge-195-special-integers-and-most-frequent-even.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10970</id>
    <published>2022-12-15T20:49:59Z</published>
    <updated>2022-12-15T20:52:41Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 195 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-195/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 18, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Special Integers</h2>

<p><em>You are given a positive integer, <code>$n &gt; 0</code>.</em></p>

<p><em>Write a script to print the count of all special integers between 1 and <code>$n</code>.</em></p>

<blockquote>
  <p><em>An integer is special when all of its digits are unique.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 15
Output: 14 as except 11 all other integers between 1 and 15 are spcial.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 35
Output: 32 as except 11, 22, 33 all others are special.
</code></pre>

<h2>Special Integers in Raku</h2>

<p>The <code>is-special</code> subroutine stores the digits into a set (<code>$h</code>), which has the property of removing duplicates. At the end, if the set has the same number of elements as the number of characters in the input number, then there is no duplicate: the number is special and the subroutine returns a <code>True</code> value. Otherwise, it returns a <code>False</code> value.</p>

<pre><code>sub is-special ($n) {
    # return True if $n.chars == 1;
    my $h = set $n.comb;
    return $h.elems == $n.chars;
}

for 15, |(32..45), 1232, 1233, 1234 -&gt; $m {
    my $count = $m &lt;= 9 ?? $m !!  9;
    for 10..$m -&gt; $i {
        $count++ if is-special $i;
    }
    say "$m \t -&gt; $count";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./special-numbers.raku
15       -&gt; 14
32       -&gt; 30
33       -&gt; 30
34       -&gt; 31
35       -&gt; 32
36       -&gt; 33
37       -&gt; 34
38       -&gt; 35
39       -&gt; 36
40       -&gt; 37
41       -&gt; 38
42       -&gt; 39
43       -&gt; 40
44       -&gt; 40
45       -&gt; 41
1232     -&gt; 802
1233     -&gt; 802
1234     -&gt; 803
</code></pre>

<p>Note that, as we go from 32 to 33, the number of special integers remains the same, as 33 is obviously not a special number. The same behavior is observed when we reach 44 or 1233.</p>

<h2>Special Integers in Perl</h2>

<p>The <code>is_special</code> subroutine stores the digits into a hash (<code>$h</code>), which has the property of removing duplicates. At the end, if the hash has the same number of elements as the number of characters in the input number, then there as no duplicate: the number is special and the subroutine returns a <code>True</code> value. Otherwise, it returns a <code>False</code> value.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub is_special {
    my $n = shift;
    # return True if length $n == 1;
    my %h = map { $_ =&gt; 1} split //, $n;
    return scalar %h == length $n;
}

for my $m (15, 32..45, 1232, 1233, 1234) {
    my $count = $m &lt;= 9 ? $m : 9;
    for my $i (10..$m) {
        $count++ if is_special $i;
    }
    say "$m \t -&gt; $count";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./special-numbers.pl
15       -&gt; 14
32       -&gt; 30
33       -&gt; 30
34       -&gt; 31
35       -&gt; 32
36       -&gt; 33
37       -&gt; 34
38       -&gt; 35
39       -&gt; 36
40       -&gt; 37
41       -&gt; 38
42       -&gt; 39
43       -&gt; 40
44       -&gt; 40
45       -&gt; 41
1232     -&gt; 802
1233     -&gt; 802
1234     -&gt; 803
</code></pre>

<h2>Task 2: Most Frequent Even Number</h2>

<p><em>You are given a list of numbers, <code>@list</code>.</em></p>

<p><em>Write a script to find most frequent even numbers in the list. In case you get more than one even numbers then return the smallest even integer. For all other case, return -1.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (1,1,2,6,2)
Output: 2 as there are only 2 even numbers 2 and 6 and of those 2 appears the most.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1,3,5,7)
Output: -1 since no even numbers found in the list
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (6,4,4,6,1)
Output: 4 since there are only two even numbers 4 and 6. They both appears the equal number of times, so pick the smallest.
</code></pre>

<h3>Most Frequent Even Number in Raku</h3>

<p>The <code>find-frequent-int</code> subroutine does almost all of the work (the rest is just setting the test cases and displaying the result). This subroutine first discard the odd integers and fills an histogram hash with counters for each even integer. If the histogram is empty (i.e. there is no even integer in the input list), then the subroutine returns <code>-1</code>. Otherwise, the sort does essentially all the work: it sorts the histogram hash in descending order of values and then (in case of a draw) in ascending order of keys. It then simply returns the first hash key, which is bound to be the highest frequency and the smallest integer when there is a frequency draw.  </p>

<pre><code>sub find-frequent-int (@in) {
    my %histo = map { $_ =&gt; ++%histo{$_} }, 
                grep { $_ %% 2 }, @in;
    return -1 if %histo.elems &lt; 1;
    return ( sort { %histo{$^b} &lt;=&gt; %histo{$^a} 
                  || $^a &lt;=&gt; $^b }, 
          %histo.keys ).first;
}
for &lt; 1 1 2 6 2&gt;, &lt;1 3 5 7&gt;, &lt;6 4 4 6 1&gt;, &lt; 8 4 8 6 4 6&gt;,
    &lt; 8 4 8 6 4 6 8&gt;, &lt; 6 4 8 6 4 6 8&gt; -&gt; @test {
    say @test, " =&gt; ", find-frequent-int @test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./frequent-even.raku
(1 1 2 6 2) =&gt; 2
(1 3 5 7) =&gt; -1
(6 4 4 6 1) =&gt; 4
(8 4 8 6 4 6) =&gt; 4
(8 4 8 6 4 6 8) =&gt; 8
(6 4 8 6 4 6 8) =&gt; 6
</code></pre>

<h3>Most Frequent Even Number in Perl</h3>

<p>This is essentially a port to Perl of the above Raku program. The <code>find_frequent_int</code> subroutine does almost all of the work (the rest is just setting the test cases and displaying the result). This subroutine first discard the odd integers and fills an histogram hash with counters for each even integer. If the histogram is empty (i.e. there is no even integer in the input list), then the subroutine returns <code>-1</code>. Otherwise, the sort does essentially all the work: it sorts the histogram hash in descending order of values and then (in case of a draw) in ascending order of keys. It then simply returns the first hash key, which is bound to be the highest frequency and the smallest integer when there is a frequency draw.  </p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub find_frequent_int {
    my %histo;
    %histo = map { $_ =&gt; ++$histo{$_} } 
             grep { $_ % 2 == 0 } @_;
    return -1 if scalar %histo &lt; 1;
    return ( sort { $histo{$b} &lt;=&gt; $histo{$a} 
                    || $a &lt;=&gt; $b } keys %histo)[0];
}
for my $test ([&lt;1 1 2 6 2&gt;], [&lt;1 3 5 7&gt;], [&lt;6 4 4 6 1&gt;], 
    [&lt;8 4 8 6 4 6&gt;], [&lt;8 4 8 6 4 6 8&gt;], [&lt;6 4 8 6 4 6 8&gt;]) {
    say "@$test =&gt; ", find_frequent_int @$test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl frequent-even.pl
1 1 2 6 2 =&gt; 2
1 3 5 7 =&gt; -1
6 4 4 6 1 =&gt; 4
8 4 8 6 4 6 =&gt; 4
8 4 8 6 4 6 8 =&gt; 8
6 4 8 6 4 6 8 =&gt; 6
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 25, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent Calendar - December 15, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-15/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 14 | Day 15 | Day 16 |  The gift is presented by E. Choroba. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 189&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Array Degree The Task 2 was rather interesting in the week 189.
You are given an array of 2 or more non-negative integers.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-15/</id>
    <published>2022-12-15T00:00:00Z</published>
    <updated>2022-12-15T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Create Professional Slideshows with Mojolicious::Plugin::RevealJS</title>
    <link href="http://perladvent.org/2022/2022-12-15.html"/>
    <id>http://perladvent.org/2022/2022-12-15.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h3 id="Install-and-run-a-Mojolicious-server"&gt;Install and run a Mojolicious server&lt;/h3&gt;

&lt;p&gt;Santa&amp;#39;s elf had a problem. He had to write a presentation very fast and show it to a bunch of new elves. The email assigning this to him was sent by Santa himself. The elf started to look on MetaCPAN and found this module: &lt;a href="https://metacpan.org/pod/Mojolicious::Plugin::RevealJS"&gt;Mojolicious::Plugin::RevealJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He quickly typed the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cpanm Mojolicius Mojolicious::Plugin::RevealJS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now he could generate a Mojo lite app using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mojo generate lite-app slide_show&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because the elf was trained in the ancient arts of the elders he could open new file with vim and paste this code in:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Mojolicious::Lite&lt;/span&gt; &lt;span class="word"&gt;-signatures&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;static&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;paths&lt;/span&gt;&lt;span class="structure"&gt;([&lt;/span&gt;&lt;span class="single"&gt;'.'&lt;/span&gt;&lt;span class="structure"&gt;]);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;plugin&lt;/span&gt; &lt;span class="single"&gt;'RevealJS'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;any&lt;/span&gt; &lt;span class="single"&gt;'/'&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;template&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'presentation'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;layout&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'revealjs'&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;start&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Then he swiftly created two folders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir templates
    mkdir examples&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="Use-html-Markdown-to-generate-content"&gt;Use html/Markdown to generate content&lt;/h3&gt;

&lt;p&gt;After that the file for the presentation was generated:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim templates/presentation.html.ep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally he could add his first slides to the presentation using html:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;section&amp;gt;
    &amp;lt;h4&amp;gt; Create Professional Slideshows with Mojolicious::Plugin::RevealJS&amp;lt;/h4&amp;gt;
    &amp;lt;p&amp;gt;by Trif Dragos&amp;lt;/p&amp;gt;
    &amp;lt;/section&amp;gt;

    &amp;lt;section&amp;gt;
    &amp;lt;h2&amp;gt;About this talk&amp;lt;/h2&amp;gt;
        &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;Install and run a Mojolicius server&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Configure Mojolicious::Plugin::RevealJS&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Use html/MarkDown to generate content&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Add code snippets in your presentation&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Add notes visible only for the author of the presentation&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;morbo slide_show&lt;/code&gt; command he could start the server. Only after that he was able to access the presentation on his local host: &lt;a href="http://127.0.0.1:3000"&gt;http://127.0.0.1:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time was ticking. The elf need to speed things up. So, instead of HTML tags, he used Markdown format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    %= markdown_section begin
    #### Create Professional Slideshows with Mojolicious::Plugin::RevealJS
    % end

    %= markdown_section begin
    * Install and run a Mojolicius server
    * Configure Mojolicious::Plugin::RevealJS
    % end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details on how to do this in Markdown format he used this link: &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown-Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="Add-code-snippets-in-your-presentation"&gt;Add code snippets in your presentation&lt;/h3&gt;

&lt;p&gt;Finally he wanted to insert code snippets in his work. For this he use the &lt;code&gt;include_code&lt;/code&gt; statement which points to the file to include and the correct syntax highlighting to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;section&amp;gt;
    &amp;lt;section&amp;gt;
        %= include_code &amp;#39;examples/test.pl&amp;#39;,  language =&amp;gt; &amp;#39;perl&amp;#39;
    &amp;lt;/section&amp;gt;
    &amp;lt;section&amp;gt;
        %= include_code &amp;#39;examples/app.js&amp;#39;, language =&amp;gt; &amp;#39;javascript&amp;#39; 
    &amp;lt;/section&amp;gt;
    &amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disaster! The &lt;code&gt;examples/test.pl&lt;/code&gt; file has too much code in it. The new elves will be lost forever if they see this. He opened the file and added some magic comments to it:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;lib&lt;/span&gt; &lt;span class="single"&gt;'lib'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Foo&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;feature&lt;/span&gt; &lt;span class="single"&gt;'say'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# reveal begin object_creation&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$o&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Foo&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# reveal end object_creation&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$o&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;print_foo_bar&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$o&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;test&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="symbol"&gt;$o&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;test&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="symbol"&gt;$o&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;test&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;After the &lt;code&gt;section&lt;/code&gt; key was added to the &lt;code&gt;include_code&lt;/code&gt; statement:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%= include_code &amp;#39;examples/test.pl&amp;#39;, language =&amp;gt; &amp;#39;pl&amp;#39;, section =&amp;gt; &amp;#39;object_creation&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Only this line &lt;code&gt;my $o = Foo-&amp;gt;new();&lt;/code&gt; between those comments was visible in the presentation.&lt;/p&gt;

&lt;h3 id="Add-notes-visible-only-for-the-author-of-the-presentation"&gt;Add notes visible only for the author of the presentation:&lt;/h3&gt;

&lt;p&gt;Finally he added some notes to each slide:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;section&amp;gt;
    &amp;lt;h4&amp;gt; Create Professional Slideshows with Mojolicious::Plugin::RevealJS&amp;lt;/h4&amp;gt;
    &amp;lt;p&amp;gt;by Trif Dragos&amp;lt;/p&amp;gt;
    %= markdown_section begin
    Note:
    my notes
    %end
    &amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when he pressed &lt;code&gt;s&lt;/code&gt;, he could see the notes from each slide in a new window, which also allowed him to control his presentation.&lt;/p&gt;

&lt;h2 id="Bibliography"&gt;Bibliography:&lt;/h2&gt;

&lt;dl&gt;

&lt;dt&gt;&lt;a href="https://www.perl.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App-revealup/"&gt;Create professional with App revealup&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://www.perl.com/article/134/2014/11/13/Advanced-slideshow-maneuvers/"&gt;Advanced slideshow maneuvers&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;

&lt;/dd&gt;
&lt;/dl&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-15T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>drd.trif</name>
    </author>
  </entry>
  <entry>
    <title>Let the Elves Import Your Packages</title>
    <link href="http://perladvent.org/2022/2022-12-14.html"/>
    <id>http://perladvent.org/2022/2022-12-14.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Same as every year, the last few days before Christmas are very busy for the Elves. Those little tinkers are best known for hand-crafting all the presents kids dreamed of, but they also run small but repetitive errands for Santa.&lt;/p&gt;

&lt;p&gt;Did you know he doesn&amp;#39;t need to manually import every single Perl package he has written? Yep, elves do that for him. It&amp;#39;s effortless - he just whispers the namespace and his little helpers take care of the rest.&lt;/p&gt;

&lt;p&gt;At around 2003, Santa managed to spy on the Elves to figure out how they do it. In his infinite generosity, he shared their method with some Perl module authors who later refined it. It was released to the world as &lt;i&gt;EaaPM&lt;/i&gt; (Elves as a Perl Module) named &lt;a href="https://metacpan.org/module/all"&gt;all&lt;/a&gt;. Fourteen long years have passed since the method was perfected and Santa can still use this module without any issues, thanks to Perl&amp;#39;s excellent backwards compatibility.&lt;/p&gt;

&lt;p&gt;So, what was the method you might ask? Simple. You just had to write &lt;code&gt;use all &amp;#39;NAMESPACE&amp;#39;;&lt;/code&gt; and busy elves would go through your &lt;code&gt;@INC&lt;/code&gt; recursively and import everything they found under that namespace. They had one significant limitation though - no matter how much they practiced, they couldn&amp;#39;t get the hang of importing symbols into the caller. You could tell it just wasn&amp;#39;t their thing.&lt;/p&gt;

&lt;p&gt;How can you benefit from the module? Let&amp;#39;s say you have packages, which are all classes:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::Toy&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::ElectronicDevice&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::BoardGame&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::SportsEquipment&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::Candy&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Present::Book&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can just replace all of those lines with one of the following, which will all do the same:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;all&lt;/span&gt; &lt;span class="single"&gt;'Present'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;all&lt;/span&gt; &lt;span class="single"&gt;'Present::*'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;all&lt;/span&gt; &lt;span class="word"&gt;of&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Present'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It&amp;#39;s Straightforward, Stable and Santa-approved - &lt;code&gt;&amp;#39;S&amp;#39; x 3&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Before I go, let me tell you a story of little Timmy.&lt;/p&gt;

&lt;p&gt;Timmy enjoyed programming, especially in Perl. He had his own personal project, on which he spent a lot of his free time. The project grew and grew, and Timmy had implemented self-made tools that would resemble the Elvish method. Little did he know, he had circular imports in his code.&lt;/p&gt;

&lt;p&gt;One day Timmy stumbled upon &lt;a href="https://metacpan.org/module/all"&gt;all&lt;/a&gt; module while enjoying metacpan. &lt;i&gt;&amp;quot;It&amp;#39;s so old and unmaintained, but I&amp;#39;m going to try it anyway&amp;quot;&lt;/i&gt; he thought while finding and replacing all his in-house code. When his tests all failed, he searched for two hours trying to figure out what was wrong with the module.&lt;/p&gt;

&lt;p&gt;But the module wasn&amp;#39;t broken. Funnily enough, it was his code that was to blame and the module just made it visible. Timmy humbly fixed his architecture and had more confidence in his code ever since. You see, the way Elves work may seem sloppy at first glance, but they actually do their work very well. The moral of the story is: don&amp;#39;t fix something that isn&amp;#39;t broken, especially if actual magic is involved.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-14T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Bartosz Jarzyna</name>
    </author>
  </entry>
  <entry>
    <title type="html">Santa&amp;#39;s Helper Embrace the Shell</title>
    <link href="http://perladvent.org/2022/2022-12-13.html"/>
    <id>http://perladvent.org/2022/2022-12-13.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Santa&amp;#39;s workshop is very busy and everyone on staff is expected to contribute beyond just their traditional roles. Even Santa&amp;#39;s reindeer take on additional tasks throughout the year.&lt;/p&gt;

&lt;p&gt;Santa and the elves have been busy this year making vast improvements to their processes, incorporating modern technology such as Perl into their daily workflows.&lt;/p&gt;

&lt;p&gt;To improve their real-time efficiency when it comes to irregular activity, debugging, and general proof-of-concept research, everyone has been working to improve their command line fu. Much of what they do involves working with structured data set, such as JSON files.&lt;/p&gt;

&lt;h3 id="Typical-reindeer"&gt;Typical reindeer...&lt;/h3&gt;

&lt;p&gt;The reindeer have been helping by extracting important data from the elves&amp;#39; structured notes stored in JSON format. The reindeer need to get the GPS coordinates for the next deliveries in the route.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {&amp;quot;children&amp;quot;:[{&amp;quot;list&amp;quot;:&amp;quot;naughty&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Tom&amp;quot;,&amp;quot;position&amp;quot;:[40.7414728,-74.0055813]},{&amp;quot;location&amp;quot;:[40.7565323,-73.9904037],&amp;quot;name&amp;quot;:&amp;quot;Dick&amp;quot;,&amp;quot;list&amp;quot;:&amp;quot;nice&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;Harry&amp;quot;,&amp;quot;list&amp;quot;:&amp;quot;nice&amp;quot;,&amp;quot;location&amp;quot;:[40.7411595,-74.0097167]}]}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reindeer use this data to determine the next deliveries on Santa&amp;#39;s route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl -nE &amp;#39;while (s/&amp;quot;name&amp;quot;:&amp;quot;([^&amp;quot;]+)&amp;quot;,&amp;quot;list&amp;quot;:&amp;quot;nice&amp;quot;,&amp;quot;(position|location)&amp;quot;:\[([^,]+),([^\]]+)//) { say &amp;quot;$1\t$3\t$4&amp;quot; }&amp;#39; &amp;lt; route.json
    Harry   40.7411595      -74.0097167&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The elves confirmed that Tom, who is naughty, did not get added to Santa&amp;#39;s route, but they also noticed that Dick, who is nice, is missing from the list! The reindeers with their poor JSON parser almost caused Dick to get missed! D:&lt;/p&gt;

&lt;p&gt;The elves knew this was not a sustainable approach. They decided that they must adopt better tooling to avoid any tragedies with incorrectly skipping a delivery for a child on Christmas day.&lt;/p&gt;

&lt;h3 id="The-elves-find-jp"&gt;The elves find &lt;code&gt;jp&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The elves discovered a new command line tool for parsing these JSON files and it allows the use of pointers to drill down to the specific data of interest. This new tool is called &lt;code&gt;jp&lt;/code&gt; -- for JSON Pointer.&lt;/p&gt;

&lt;p&gt;The key features for &lt;code&gt;jp&lt;/code&gt; -- made possible by &lt;a href="https://docs.mojolicious.org/Mojo/JSON"&gt;Mojo::JSON&lt;/a&gt; from the wonderful &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; framework -- are that the elves can use a simple JSON pointer to get at any specific data in their JSON data structure, but then also use Perl data structures to apply logic for ensuring that they extract exactly the right data and not accidentally route Santa to someone on his naughty list.&lt;/p&gt;

&lt;p&gt;The elves first want to look at all of the data in a more natural columnar CSV-type format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ ./jp -r &amp;#39;/children/\d+&amp;#39; /name /list /position /location &amp;lt; advent.json 
    Tom     naughty [40.7414728,-74.0055813]
    Dick    nice    [40.7565323,-73.9904037]
    Harry   nice    [40.7411595,-74.0097167]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now they could easily pipe that to grep to remove the naughty folks, but we can do better better than that, and avoid skipping any nice children whose name contains the word naughty.&lt;/p&gt;

&lt;p&gt;With a little Perl, &lt;code&gt;jp&lt;/code&gt; transforms into a powerful command line tool that Santa and the elves can count on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ ./jp -p -r &amp;#39;/children/\d+&amp;#39; -E &amp;#39;$_-&amp;gt;grep(sub{$_-&amp;gt;jp(&amp;quot;/list&amp;quot;) eq &amp;quot;nice&amp;quot;})&amp;#39; /name /position/0 /location/0 /position/1 /location/1 &amp;lt; advent.json 
    /children/1     Dick    40.7565323      -73.9904037
    /children/2     Harry   40.7411595      -74.0097167&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="Conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;jp&lt;/code&gt; is a very new tool and the elves are the first in history to discover its existence. They understand that there may be bugs or additional functionality that it lacks, and they are excited to make contributions to improve &lt;code&gt;jp&lt;/code&gt; and share those improvements with all the children and everyone else in the world. They have confidence in the tool and their ability to make contributions because it is pretty well documented and comes with a very easy to use test suite that already tests most of &lt;code&gt;jp&lt;/code&gt;&amp;#39;s functionality.&lt;/p&gt;

&lt;h4 id="Download"&gt;Download&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;jp&lt;/code&gt; is available today on &lt;a href="https://github.com/stefanadams/jp"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id="Usage"&gt;Usage&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;jp&lt;/code&gt; has a detailed help listing, optionally including examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ ./jp -hh
    Usage: ./jp [OPTIONS] [POINTERS]

        Options:
        -A               Dereference JSON arrays into columns
        -C               No collection
        -E eval-string   Evaluate the Perl eval string
                        These functions and variables, in addition to standard Perl functions and variables, are:
            $_            A Mojo::Collection of [JP OBJECTS]
            D             Dump an object to inspect it
            out           Print to stdout and include it in test inspection
            c             Create a new Mojo::Collection object
            f             Create a new Mojo::File object
            l             Create a new Mojo::URL object
            r             Alias to Mojo::Util::dumper
            traverse      Imported from Data::Traverse, if available
        -I exact-match   Compare the results exactly against the supplied text
        -M test-message  Specify a message in the test output
        -R regex         Compare the results against the supplied regex
        -S               Do not sort
        -T eval-string   Compare the results against the supplied Perl eval string
        -U               Remove undef
        -d delimiter     Delimiter to use in columnar output
        -h               Display this help, one more to include examples
        -i               Ignore case in regex JSON pointers
        -k tail-number   Display the bottom n results, n can be negative
        -n head-number   Display the top n results, n can be negative
        -p               Include the pointer in the columnar output
        -r regex-pointer A regex JSON pointer for selecting multiple targets
        -v               Increase verbosity
        
        Jp Objects:
        An object with pointer and value attributes. The primary method to use for this object when iterating a collection
        is the `jp` method which is used to further expand the JSON object by pointer. See the example commented
        &amp;quot;Filtering&amp;quot; for a very practical use case of the Jp object which allows further filtering the results of the regex
        pointer (-r) by iterating the $_ Mojo::Collection of Jp objects with the use of the `grep` method and using a
        JSON Pointer with the `jp` method on each Jp object.

        Pointers:
        Any remaining non-flag arguments are considered JSON pointers and used to narrow the selection from the selected
        JSON string for columnar output.

        Examples:
        (All examples read example.json from stdin, as shown by the first example)

        # Use a JSON pointer to get a value from the JSON data structure
        $ jp /artifactory/0/password &amp;lt; example.json
        s3cr3t

        # Use a JSON pointer to get a value from the JSON data structure, defaults to /
        $ jp
        {&amp;quot;Version&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;artifactory&amp;quot;:[{...},{...},{...}]}

        # Use a regex in the pointer to reduce the JSON data structure and return each result, one per line
        $ jp -n 1 -r &amp;#39;/artifactory/\d+&amp;#39;
        {...}

        # Use a regex in the pointer to reduce the JSON data structure and include the pointer for all records found
        $ jp -n 1 -p -r &amp;#39;/artifactory/\d+&amp;#39; /user /password
        /artifactory/0  12345 s3cr3t

        # Filtering
        $ jp -Aip -n -1 -d: -E &amp;#39;$_-&amp;gt;grep(sub{$_-&amp;gt;jp(&amp;quot;/isdefault&amp;quot;)})&amp;#39; -r &amp;#39;/Artifactory/\d&amp;#39; /user /password
        /artifactory/1:54321:s3cr3t5

        # Treat the execution as a test
        $ jp -n 1 -E &amp;#39;$_-&amp;gt;tap(sub{out $_-&amp;gt;size})-&amp;gt;tap(sub{out $_-&amp;gt;size})&amp;#39; -r &amp;#39;/artifactory/\d+&amp;#39; /user /password \
            -T &amp;#39;3\n3\n12345\ts3cr3t&amp;#39;
        ok: &amp;#39;Test /user /password&amp;#39; is &amp;#39;3\n3\n12345\ts3cr3t&amp;#39;

        # A syntax error in the -E Perl eval is handled gracefully (final tap method is missing a closing &amp;#39;)&amp;#39;)
        $ jp -v -n 1 -E &amp;#39;$_-&amp;gt;tap(sub{out $_-&amp;gt;size})-&amp;gt;tap(sub{die 123}&amp;#39; -r &amp;#39;/artifactory/\d+&amp;#39; /user /password 
        syntax error in -E eval

        # Don&amp;#39;t sort by pointer, sort arbitrarily as specified in the -E Perl eval
        $ jp -v -S -U -p -r &amp;#39;/markers/\d&amp;#39; -E &amp;#39;$_-&amp;gt;sort(sub{$a-&amp;gt;jp(&amp;quot;/location/0&amp;quot;, &amp;quot;/position/0&amp;quot;) &amp;lt;=&amp;gt; $b-&amp;gt;jp(&amp;quot;/location/0&amp;quot;, &amp;quot;/position/0&amp;quot;)})&amp;#39; /location /position &amp;lt;&amp;lt;EOF
        {&amp;quot;markers&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;Google, 8th Avenue&amp;quot;,&amp;quot;position&amp;quot;:[40.7414728,-74.0055813]},{&amp;quot;name&amp;quot;:&amp;quot;Microsoft, Times Square&amp;quot;,&amp;quot;location&amp;quot;:[40.7565323,-73.9904037]},{&amp;quot;name&amp;quot;:&amp;quot;Tesla, Washington Street&amp;quot;,&amp;quot;location&amp;quot;:[40.7411595,-74.0097167]},{&amp;quot;name&amp;quot;:&amp;quot;Amazon New York&amp;quot;,&amp;quot;location&amp;quot;:[40.7532822,-74.0010696]}]}
        EOF&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-13T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Stefan Adams</name>
    </author>
  </entry>
  <entry>
    <title>#594 - Advent Calendar</title>
    <link rel="alternate" href="https://perlweekly.com/archive/594.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The <strong>Advent Calendar</strong> celebration begins with the start of <strong>December</strong>. For all <strong>Perl</strong> fans, we have <a href="https://perladvent.org/2022">Perl Advent Calendar 2022</a>, thanks to the hard work of <strong>Olaf Alders</strong> and his team. I am sure you have checked out the amazing daily source of fun.</p>
<p>As of today, we have got through <strong>12 days</strong>.</p>
<p><strong>Do you have any favourite so far?</strong></p>
<p>Well I do have mine. To me the best part is the festive flavour in every article. I find it amusing and fun to read the story. I have contributed in the past but never got around to add the spice. I would blame the lack of background knowledge. This year's calendar started with <strong>Toby Inkster</strong> creation <a href="https://perladvent.org/2022/2022-12-01.html">Silent Mite</a>. What a cool way to start the calendar. If you look at closely all the contributions so far, you would notice a fresh air with lots of positive energy. One name stands out very prominently this year is <strong>Thibault DUPONCHELLE</strong>. His first contribution, <a href="https://perladvent.org/2022/2022-12-03.html">Santa is on GitHub</a> was a nice way to begin the journey. Then found a gem from a very dear friend of mine, <strong>Julien Fiegehenn</strong> talking about good old friend <strong>CGI</strong>. In fact, I have seen him presenting the subject <a href="https://perladvent.org/2022/2022-12-04.html">northpole.cgi</a> at the <strong>Perl Conference</strong>. I found another piece of work by <strong>Thibault DUPONCHELLE</strong> about <strong>MongoDB</strong>. I found the <strong>Day 5</strong> contribution <a href="https://perladvent.org/2022/2022-12-05.html">Catching dreams</a> is worth checking, if you want to explore <strong>MongoDB</strong>. If I am not mistaken then few years ago, <strong>Dave Cross</strong> shared his creation <a href="https://metacpan.org/pod/SVG::ChristmasTree">SVG::ChristmasTree</a> in <strong>Perl Advent Calendar</strong>. I was happy to see it part of this year calendar too, not directly though. <strong>Day 8</strong> started with <a href="https://perladvent.org/2022/2022-12-08.html">A Perlmas Tree</a> by <strong>Maximilian Lika</strong>. I found <strong>Day 11</strong> contribution very technical dealing with <strong>signal ALRM</strong>. Not an easy subject to discuss in the <strong>Advent Calendar</strong> in my humble opinion. Thanks <strong>OODLER</strong> for the fine contribution, <a href="https://perladvent.org/2022/2022-12-11.html">Wake up! Time to open presents!</a>.</p>
<p>If you are still looking for more <strong>Advent Calendar</strong> theme fun then I would highly recommend, <a href="https://theweeklychallenge.org/blog/advent-calendar-2022">The Weekly Challenge Advent Calendar</a>. Like in the past, this year also, it has contributions from <strong>Team PWC</strong> hand picked by me. I am sure you would find it interesting.</p>
<p>I am working on something that I would love to be part of this year <strong>Perl Advent Calendar</strong>. Hopefully it would be ready soon. Well I am also working on something similar for <strong>Raku Advent Calendar</strong>. It would be an achievement if I can get both done on time. Please wish me luck.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/594.html</id>
    <published>2022-12-12T10:00:00Z</published>
    <updated>2022-12-12T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>TWC 194: Bag Time!</title>
    <link rel="alternate" href="https://blogs.perl.org/users/bruce_gray/2022/12/twc-194-bag-time.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10969</id>
    <published>2022-12-12T02:18:17Z</published>
    <updated>2022-12-12T03:52:49Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which analysis speeds, and mis-leads.</p>
]]>
        <![CDATA[<p>(Still editing!)</p>

<blockquote>
  <p>Old Mr. Kringle is soon gonna jingle <br />
The bells that'll tingle all your troubles away <br />
Everybody's waitin' for the man with the bag <br />
'cause Christmas is coming again
-- <a href="https://www.youtube.com/watch?v=TF01VuvBfq8">The Brian Setzer Orchestra</a></p>
</blockquote>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-194/#TASK1">Digital Clock</a></h1>

<h2>Task</h2>

<p>Given time in the format <code>hh:mm</code> with one missing digit, find the highest digit <code>0-9</code> that makes it a valid time.</p>

<h2>Observations</h2>

<p>Example #4 says <code>'2?:00'</code> should return <code>3</code>, which tells us that we should work with 24-hour time, and that <code>24:00</code> is not allowed as a alternate expression of <code>00:00 the-next-day</code>.</p>

<ul>
<li>Question mark in 4th digit place, the answer is 9.</li>
<li>Question mark in 3th digit place, the answer is 5.</li>
<li>Question mark in 2th digit place, the answer is 9 or 3, depending on whether the 1st digit is 0|1 or 2.</li>
<li>Question mark in 1st digit place, the answer is 2 or 1, depending on whether the 2nd digit is 0..3 or 4..9.</li>
</ul>

<p>There are only 24<em>60=1440 possible times, but only (10</em>60)+( 3<em>60)+(24</em>10)+(24* 6) = 1164 possible (valid) inputs.</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<pre><code>sub is_time_valid ( Str $s --&gt; Bool ) {
    constant $valid_times = ( ^24 X ^60 ).map( *.fmt('%02d', ':') ).Set;
    return $s ∈ $valid_times;
}
sub task1 ( Str $s --&gt; UInt ) {
    return (9…0).first: { $s.subst( '?', $_ ).&amp;is_time_valid };
}
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<hr />

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-194/#TASK2">Frequency Equalizer</a></h1>

<h2>Task</h2>

<p>Given a string, determine whether removing only one character can make the frequency of the remaining characters the same.</p>

<h2>Observations</h2>

<p>The test cases led many participants to shortcut the analysis and produce concise solutions that would fail one of these cases:</p>

<ul>
<li>'aaaaab', 1</li>
</ul>

<p>The count of <code>a</code> (<code>5</code>) is not within striking distance of the count of <code>b</code> (1), but because <code>b</code> is the only solo character, removing it would succeed.</p>

<ul>
<li>'aaabbbcc', 0</li>
</ul>

<p><code>3</code> can be reduced to <code>2</code> be removing <code>1</code>, but there are <em>two</em> letters that each have <code>3</code>, so the frequency cannot be made equal with just one character removed.</p>

<p>Alternately, one of the groups has only one letter in it (<code>c</code>), and <code>abs(3-2) == 1</code>, but in the wrong direction; you would have to <em>add</em> a <code>c</code> to equalize.</p>

<ul>
<li>'abcd', 1</li>
</ul>

<p>Removing <em>any</em> of the letters leaves us with equal frequency.</p>

<h3>Generating test cases</h3>

<p>Of interest to me were methods to generate minimal sets of test cases:</p>

<pre><code>raku -e 'my @a = "a".."e"; for ( [X] (@a xx 5) ) { say .join if [le] .list and (.join ~~ /^a+[b+[c+[d+[e+]?]?]?]?$/)}' | m
aaaaa aaaab aaabb aaabc aabbb aabbc aabcc aabcd abbbb abbbc abbcc abbcd abccc abccd abcdd abcde
</code></pre>

<p>Longer code, but more efficient to run:</p>

<pre><code>raku -e 'my $w = 5; my $f = "\%0{$w}b"; for ^(2 ** $w) { my @bin = .fmt($f).comb;
my $c = "a";
my $out = "a";
for @bin {
    $c++ if +$_;
    $out ~= $c;
}
say $out;
}'
</code></pre>

<p>The above is not fully minimal; it misses the nuance that <code>aabbc</code> and <code>aabcc</code> both are "two of two, and one of one". We need partitioning!</p>

<pre><code>perl -MList::Util=zip -MInteger::Partition -wE 'my $i = Integer::Partition-&gt;new(shift); while (my $p = $i-&gt;next){say map { $_-&gt;[0] x $_-&gt;[1] } zip [("a".."z")[keys @$p]], $p}' 5
aaaaa
aaaab
aaabb
aaabc
aabbc
aabcd
abcde
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<pre><code># Best compromise between performance, complexity, reducing chance to "get it wrong",
# and likelihood of a maintenance programmer to reverse-engineer the original requirements.
sub task2 ( Str $s --&gt; Bool ) {
    my BagHash $b = $s.comb.BagHash;
    my @k = $b.keys;

    for @k -&gt; $k {
        $b.remove: $k;
        return True if $b.values.unique.elems == 0|1;
        $b.add:    $k;
    }
    return False;
}
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<p>Translation of my Raku solution, with <code>%h</code> as a improvised <code>Bag</code>.
The code <code>grep { $_ != 0 }</code> is needed to adapt to the hash entry not disappearing when the value goes to <code>0</code>.</p>

<pre><code>use v5.36;
use List::Util qw&lt;uniq&gt;;
sub task2 ($s) {
    my %h;
    $h{$_}++ for split '', $s;
    my @k = keys %h;

    for my $k (@k) {
        $h{$k}--;

        my $c = 0 + grep { $_ != 0 } uniq values %h;

        return 1 if $c == 0
                 or $c == 1;

        $h{$k}++;
    }
    return 0;
}
</code></pre>

<blockquote>
  <p>He'll make this December the one you'll remember <br />
The best and the merriest you ever did have <br />
Everybody's waitin', they're all congregating <br />
Waitin' for the man with the bag
-- <a href="https://voctave.net/videos/2/">#Voctave</a> {A Cappella, and Breath-taking; We got to see them in concert last week!}</p>
</blockquote>
]]>
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 194:  Digital Clock and Frequency Equalizer</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2022/12/perl-weekly-challenge-194-digital-clock-and-frequency-equalizer.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10968</id>
    <published>2022-12-10T21:02:07Z</published>
    <updated>2022-12-10T21:03:21Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 194 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-194/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 11, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Digital Clock</h2>

<p><em>You are given time in the format <code>hh:mm</code> with one missing digit.</em></p>

<p><em>Write a script to find the highest digit between <code>0-9</code> that makes it valid time.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $time = '?5:00'
Output: 1

Since 05:00 and 15:00 are valid time and no other digits can fit in the missing place.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $time = '?3:00'
Output: 2
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: $time = '1?:00'
Output: 9
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: $time = '2?:00'
Output: 3
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: $time = '12:?5'
Output: 5
</code></pre>

<p><em>Example 6</em></p>

<pre><code>Input: $time =  '12:5?'
Output: 9
</code></pre>

<p>The task is quite easy, but a little painful because of the number of cases to be tested.</p>

<h3>Digital Clock in Raku</h3>

<p>The <code>highest-digit</code> subroutine splits the input qstring into the hour and minute component and figures out in which component the missing digit (the question mark) is.</p>

<p><em>If the missing digit is in the hour component</em>, and if the first digit is missing, then the subroutine returns 1 if the second digit if more than 3 and 2 otherwise. If the second digit is missing, then it returns 3 if the first digit is 2, and 9 otherwise.</p>

<p><em>If the missing digit is in the minute component</em>, then the suboutine returns 5 if it is the first digit that is missing, and 9 if it is the second digit.</p>

<pre><code>sub highest-digit ($in) {
    my ($h, $m) = $in.split(/\:/);
    # say $h, " ", $m;
    if $h ~~ /\?/ {
        my ($h1, $h2) = $h.comb('');
        if $h1 eq '?' {
            return $h2 &gt; 3 ?? 1 !! 2;
        } elsif $h2 eq '?' {
            return $h1 == 2 ?? 3 !! 9;
        }
    } elsif $m ~~ /\?/ {
        my ($m1, $m2) = $m.comb('');
        return 5 if $m1 eq '?'; 
        return 9 if $m2 eq '?'; 
    }        
}

for &lt;?5:00 ?3:00 1?:00 2?:00 12:?5 12:5? 14:?9&gt; -&gt; $t {
    say "$t =&gt; ", highest-digit($t);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./highest-digit.raku
?5:00 =&gt; 1
?3:00 =&gt; 2
1?:00 =&gt; 9
2?:00 =&gt; 3
12:?5 =&gt; 5
12:5? =&gt; 9
14:?9 =&gt; 5
</code></pre>

<h3>Digital Clock in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the Raku section for explanations on the way the program works.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub highest_digit  {
    my ($h, $m) = split /\:/, $_[0];
    # say $h, " ", $m;
    if ($h =~ /\?/) {
        my ($h1, $h2) = split //, $h;
        if ($h1 eq '?') {
            return $h2 &gt; 3 ? 1 : 2;
        } elsif ($h2 eq '?') {
            return $h1 == 2 ? 3 : 9;
        }
    } elsif ($m =~ /\?/) {
        my ($m1, $m2) = split //, $m;
        return 5 if $m1 eq '?'; 
        return 9 if $m2 eq '?'; 
    }        
}

for my $t (qw&lt;?5:00 ?3:00 1?:00 2?:00 12:?5 12:5? 14:?9&gt;) {
    say "$t =&gt; ", highest_digit($t);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./highest-digit.pl
?5:00 =&gt; 1
?3:00 =&gt; 2
1?:00 =&gt; 9
2?:00 =&gt; 3
12:?5 =&gt; 5
12:5? =&gt; 9
14:?9 =&gt; 5
</code></pre>

<h2>Task 2: Frequency Equalizer</h2>

<p><em>You are given a string made of alphabetic characters only, <code>a-z</code>.</em></p>

<p><em>Write a script to determine whether removing only one character can make the frequency of the remaining characters the same.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $s = 'abbc'
Output: 1 since removing one alphabet 'b' will give us 'abc' where each alphabet frequency is the same.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $s = 'xyzyyxz'
Output: 1 since removing 'y' will give us 'xzyyxz'.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $s = 'xzxz'
Output: 0 since removing any one alphabet would not give us string with same frequency alphabet.
</code></pre>

<p>Basically, to answer the question, we need to find out whether all the characters have the same frequency, except for one which occurs once more than the others.</p>

<h3>Frequency Equalizer in Raku</h3>

<p>We first build the <code>%histo</code> histogram of the letters of the input string. Then we store the sorted values (ascending order) in the <code>@frequencies</code> array and check whether all the values except the last (the largest) are equal and the last value is one more than the others.</p>

<pre><code>sub remove-one ($st) {
    my %histo;
    %histo{$_}++ for $st.comb;
    my @frequencies = %histo.values.sort;
    my $largest = @frequencies.pop;
    return 1 if $largest - 1 == @frequencies.all;
    return 0;
}
for &lt;abbc xyzyyxz xzxz&gt; -&gt; $test {
    say "$test.fmt("%-10s") =&gt; ", remove-one($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./freq-analyzer.raku
abbc       =&gt; 1
xyzyyxz    =&gt; 1
xzxz       =&gt; 0
</code></pre>

<h3>Frequency Equalizer in Perl</h3>

<p>We first build the <code>%histo</code> histogram of the letters of the input string. Then we store the sorted values (<em>descending</em> order) in the <code>@frequencies</code> array and check whether all the values except the first (the largest) are equal and the first value is one more than the others. Note that we cannot use an <code>all</code> junction in Perl, so we simply loop over the values (except the first) to check that they are all equal</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub remove_one {
    my %histo;
    $histo{$_}++ for split //, shift;
    my @frequencies = sort { $b &lt;=&gt; $a } values %histo;
    my $largest = shift @frequencies;
    for my $count (@frequencies) {
        return 0 if $largest - 1 != $count;
    }
    return 1;
}
for my $test (&lt;abbc xyzyyxz xzxz&gt;) {
    printf "%-10s =&gt; %d\n", $test, remove_one($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./freq-analyzer.pl
abbc       =&gt; 1
xyzyyxz    =&gt; 1
xzxz       =&gt; 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 18, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5239354894593758389</id>
    <published>2022-12-10T21:38:00.000+01:00</published>
    <updated>2022-12-10T21:38:00.558+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxii) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060000&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.059001 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.030&lt;/strong&gt; on 2022-12-10&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.029 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.13&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 5.12 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.712&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 1.711 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/Module-Build-0.4232' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build and install Perl modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.4232&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.4231 was 2 years, 10 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-IRC-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IRC Client for the Mojo IOLoop &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 1 year, 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.26&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.25 was 1 year, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.08&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.07 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.74&lt;/strong&gt; on 2022-12-04&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/parent-0.239' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;parent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Establish an ISA relationship with base classes at compile time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.239&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.238 was 2 years, 9 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.144&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: 1.142 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9665' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9665&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9664 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.28&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 0.27 was 9 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v8.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v8.10.0&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: v8.9.0 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Test-WWW-Mechanize-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Testing-specific WWW::Mechanize subclass &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2022-12-05&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 7 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000138' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000138&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000136 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5239354894593758389/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxii-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5239354894593758389"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5239354894593758389"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxii-16-great-cpan-modules-released.html" title="(cdxxii) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-797398133988045957</id>
    <published>2022-12-10T21:34:00.005+01:00</published>
    <updated>2022-12-10T21:34:55.088+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxv) metacpan weekly report - Value::Diff</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 47&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Value::Diff"&gt;Value::Diff&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/10 20:33:58 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::TimeZone::Catalog::Extend" target="_blank"&gt;DateTime::TimeZone::Catalog::Extend&lt;/a&gt; - Extend DateTime::TimeZone catalog&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Babble" target="_blank"&gt;Dist::Zilla::Plugin::Babble&lt;/a&gt; - EXPERIMENTAL Automatic Babble substitution in Dist::Zilla&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::UK::Postcode::Regex" target="_blank"&gt;Geo::UK::Postcode::Regex&lt;/a&gt; - regular expressions for handling British postcodes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Lint" target="_blank"&gt;Git::Lint&lt;/a&gt; - lint git commits and messages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::HTMX" target="_blank"&gt;Mojolicious::Plugin::HTMX&lt;/a&gt; - Mojolicious Plugin for htmx&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Password::AutoMigration" target="_blank"&gt;Text::Password::AutoMigration&lt;/a&gt; - generate and verify Password with any contexts&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CGIThis" target="_blank"&gt;App::CGIThis&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sdview" target="_blank"&gt;App::sdview&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Babble" target="_blank"&gt;Babble&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catmandu" target="_blank"&gt;Catmandu&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Frame" target="_blank"&gt;Data::Frame&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=142)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KCP" target="_blank"&gt;KCP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mango" target="_blank"&gt;Mango&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+2=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::GitHub" target="_blank"&gt;Net::GitHub&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Range" target="_blank"&gt;Number::Range&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+2=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=399)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pithub" target="_blank"&gt;Pithub&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=164)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ProgressBar::Simple" target="_blank"&gt;Term::ProgressBar::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep::Type" target="_blank"&gt;Test::Deep::Type&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=171)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URL::Social" target="_blank"&gt;URL::Social&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O::More" target="_blank"&gt;Util::H2O::More&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Value::Diff" target="_blank"&gt;Value::Diff&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/797398133988045957/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxv-metacpan-weekly-report-valuediff.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/797398133988045957"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/797398133988045957"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxv-metacpan-weekly-report-valuediff.html" title="(dxxxv) metacpan weekly report - Value::Diff"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2342464762934455369</id>
    <published>2022-12-10T21:31:00.001+01:00</published>
    <updated>2022-12-10T21:31:24.215+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-12-10 20:31:03 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74732086" target="_blank"&gt;How do I extract an array from a 2D array in Perl?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74716732" target="_blank"&gt;Get a list of classes derived from given base class in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74750192" target="_blank"&gt;`perl -pe` match only start of file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74747671" target="_blank"&gt;Perl executable crashes even though file is not missing&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74678226" target="_blank"&gt;In perl is \*STDIN the same as STDIN?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2342464762934455369/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2342464762934455369"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2342464762934455369"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxiii-stackoverflow-perl-report.html" title="(dlxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Kephra: goto (last) edit</title>
    <link rel="alternate" href="https://blogs.perl.org/users/lichtkind/2022/12/kephra-goto-last-edit.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10962</id>
    <published>2022-12-10T02:01:15Z</published>
    <updated>2022-12-10T02:28:25Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Kephra" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>Welcome to my musings: how editing should be (aimed to all users of an editor as food for thought). After <a href="https://blogs.perl.org/users/lichtkind/2022/11/kephra-select-all.html">select all</a> I will today choose as feature of the day: <strong>goto edit</strong> (Strg+E) by which I mean jump to the location where you did the last change to the document. In latest <a href="https://metacpan.org/release/LICHTKIND/Kephra-0.404">version 0.404</a> I even extended the feature to make it more productive.</p>]]>
        <![CDATA[<p>This feature can be implemented in 2 minutes so why even talk about it except bragging about it? If you think about editing strategically (first principles - step one - making requirements less dumb), you see that its not really about moving the caret to some position somewhere or selecting some text. Editing is ultimately an information game. How to get and organize information and apply them in the most effective way.</p>

<p>One little question in that game is for instance: how to get an overview which methods are in this file? Do I want an outline box on the margin, that shows me all the names with signatures or do I want a key command that folds all subroutines so I have an overview inside the edit field? I prefer the second. Even aesthetically I dislike everything that shrinks the space for the main thing (edit field) but also practically. An outline forces me to use the mouse if i want to do anything else than looking at it. Why not stay in the edit field and use all the powerful key combinations for search and and change in place. And when I'm at the wanted method why not plop - unfold all methods again and off I go? I think this style of work makes Vi(m) so powerful. But in TIMTOWTDI manner I may provide an outline anyway.</p>

<p>The preferred way to edit also includes going on tangents, look for information in many ways, which will include moving through the document. Already you can for instance search without the search bar - just mark the term and skip with (Shift+) F3. And it's good to be able to continue your current work after that search just by one key stroke.</p>

<p> But sometimes its actually more than one position you want to jump between. That is why now Strg+E now jumps to the second last edit, in case you are already at the position of the last edit. This saves you in many cases from using position marker or memorize the line number. But also makes sure Strg+E does always something potentially useful instead of nothing.<br />
</p>]]>
    </content>
</entry>
  <entry>
    <title>#593 - Perl on DEV.to</title>
    <link rel="alternate" href="https://perlweekly.com/archive/593.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I registered to <a href="https://dev.to/">DEV.to</a> in 2017, more than 5 years ago. Posted a few articles with rather limited success: less than 10 people looked at the articles. Then in 2020 I posted a few more articles. On one of them <a href="https://dev.to/szabgab/tests-are-awesome-3i63">Tests are awesome!</a> I got as many as 300 readers, but the others have not received much love so I did not continue publishing. In 2021 I had another experiment when I published <a href="https://dev.to/szabgab/perl-modules-with-their-own-web-site-2gmo">Perl modules with their own web site</a> on which there were some 600 visitors. Primarily the readers of the Perl Weekly newsletter. I published a few more articles with readers in the low 10s. A few weeks ago I started to publish again. This time several of my articles got above 100 viewers and one, <a href="https://dev.to/szabgab/open-source-development-courses-5d4b">Open Source Development Courses</a> is already above 1100 viewers. I started to get around 600 readers a day. That's already really valuable!</p>
<p>So what happened? There were a couple of changes: 1. There are more people on DEV. 2. I publish a lot more articles that appeal to a wider range of people. 3. There is a sort-of network effect. The more people up-vote and bookmark (the two kinds of reactions on DEV) my articles the more people will see it.</p>
<p>The nice thing about DEV is that I can republish the articles I published elsewhere (e.g. on <a href="https://perlmaven.com/">PerlMaven</a>, on <a href="https://code-maven.com/">Code-Maven</a>, or <a href="https://blogs.perl.org/">blogs.perl.org</a>), and also I can set the canonical URL of each article on DEV to the original one on my blog. That way I get the visitors on DEV as well, but the 'Google juice' the articles receive will flow over to my sites. It seems like a win-win for DEV and authors who have blogs elsewhere. You can even configure DEV to pull your RSS feed and create drafts from your articles published elsewhere. I even started to republish the content of the <a href="https://dev.to/szabgab/perl-weekly-591-less-than-50-use-ci-4966">Perl Weekly</a>.</p>
<p>So here is what I suggest. If you already write about Perl elsewhere, republish those articles on DEV and tag them with <b>perl</b>. If you are primarily a reader of articles, then register on <a href="https://dev.to/">DEV</a> and start up-voting the <a href="https://dev.to/t/perl">Perl-related posts</a> you like. You can even follow a few authors there, get notified when they have new posts, and up-vote those to encourage them to write even more.</p>
<p>Alternatively, you can watch the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>. It already follows the <b>perl</b> tag on DEV.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/593.html</id>
    <published>2022-12-05T10:00:00Z</published>
    <updated>2022-12-05T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1808027491351841833</id>
    <published>2022-12-04T08:55:00.000+01:00</published>
    <updated>2022-12-04T08:55:16.047+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxi) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.74&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.73 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.27&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.25 was 1 year, 6 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.90&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 6.89 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DDICK/Firefox-Marionette-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Firefox::Marionette&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Automate the Firefox browser with the Marionette protocol &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 3 years, 4 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.882' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.882&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 1.881 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.879' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.879&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.878 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.013&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 2.010 was 1 year, 8 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.8007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8007&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8006 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.71 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.057' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.057&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.056 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.144&lt;/strong&gt; on 2022-12-01&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.142 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.142' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.142&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 1.140 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.67&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.66 was 3 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9664' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9664&lt;/strong&gt; on 2022-11-30&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9662 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000136' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000136&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000133 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1808027491351841833/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html" title="(cdxxi) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1836666147745065918</id>
    <published>2022-12-04T08:51:00.001+01:00</published>
    <updated>2022-12-04T08:51:11.510+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxiv) metacpan weekly report - Perl::Dist::APPerl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 56&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/04 07:50:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; - Faster accept, socket, listen with file descriptors, not handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tee" target="_blank"&gt;IO::Tee&lt;/a&gt; - Multiplex output to multiple output handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KCP" target="_blank"&gt;KCP&lt;/a&gt; - Perl extension for skywind3000/kcp&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Joystick" target="_blank"&gt;Linux::Joystick&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Logging::Simple" target="_blank"&gt;Logging::Simple&lt;/a&gt; - Simple debug logging by number, with customizable labels and formatting&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/results" target="_blank"&gt;results&lt;/a&gt; - why throw exceptions when you can return them?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::RunAlone" target="_blank"&gt;Role::RunAlone&lt;/a&gt; - prevent multiple instances of a script from running&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM::Numpy" target="_blank"&gt;SPVM::Numpy&lt;/a&gt; - Numpy is the Python/NumPy porting to Perl/SPVM&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Plugin::Cache" target="_blank"&gt;Template::Plugin::Cache&lt;/a&gt; - cache output of templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Terminal::Identify" target="_blank"&gt;Terminal::Identify&lt;/a&gt; - Perl extension for recognising the terminal emulator in use.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=62)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CSVUtils" target="_blank"&gt;App::CSVUtils&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::grindperl" target="_blank"&gt;App::grindperl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/bareword::filehandles" target="_blank"&gt;bareword::filehandles&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=76)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Sender" target="_blank"&gt;Email::Sender&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Simple" target="_blank"&gt;Email::Simple&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::ParseXS" target="_blank"&gt;ExtUtils::ParseXS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Ordered" target="_blank"&gt;Hash::Ordered&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/indirect" target="_blank"&gt;indirect&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Metrics::Any" target="_blank"&gt;Metrics::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=292)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Getopt" target="_blank"&gt;MooseX::Getopt&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/multidimensional" target="_blank"&gt;multidimensional&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IMAP::Simple" target="_blank"&gt;Net::IMAP::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Server" target="_blank"&gt;Net::Server&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Bangs" target="_blank"&gt;Perl::Critic::Bangs&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Pulp" target="_blank"&gt;Perl::Critic::Pulp&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlfaq" target="_blank"&gt;perlfaq&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Greylist" target="_blank"&gt;Plack::Middleware::Greylist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Tree" target="_blank"&gt;Pod::Tree&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tee" target="_blank"&gt;Tee&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Harness" target="_blank"&gt;Test::Harness&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=107)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Vlc::Engine" target="_blank"&gt;Vlc::Engine&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML::PrettyPrint" target="_blank"&gt;XML::LibXML::PrettyPrint&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1836666147745065918/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html" title="(dxxxiv) metacpan weekly report - Perl::Dist::APPerl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>The Weekly Challenge 193</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/12/03#pwc193" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, $n &gt; 0. Write a script to find all possible binary numbers of 
size $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub binary_numbers_size_n{
    my($n) = @_;
    my @numbers = map {
        sprintf("%0${n}b", $_)
    } 0 .. 2**$n - 1;
    return @numbers;
}

MAIN:{
    say join(", ", binary_numbers_size_n(2));
    say join(", ", binary_numbers_size_n(3));
    say join(", ", binary_numbers_size_n(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
00, 01, 10, 11
000, 001, 010, 011, 100, 101, 110, 111
0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I think it's fair to say that &lt;code&gt;sprintf&lt;/code&gt; is doing most of the work here! For those 
unfamiliar, the format string &lt;code&gt;"%0${n}b"&lt;/code&gt; means &lt;em&gt;print the number as binary of length $n,
left pad with 0s&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of strings of same length, @s. Write a script to find the odd string 
in the given list. Use positional alphabet values starting 
with 0, i.e. a = 0, b = 1, ... z = 25.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub odd_string{
    my(@strings) = @_;
    my %differences;
    for my $string (@strings){
        my $current;
        my $previous;
        my @differences;
        map {
            unless($previous){
                $previous = $_;
            }
            else{
                $current = $_;
                push @differences, ord($current) - ord($previous);
                $previous = $current;
            }        
        } split(//, $string);
        my $key = join(",", @differences);
        my $size_before = keys %differences;
        $differences{$key} = undef;
        my $size_after = keys %differences;
        return $string if $size_before &gt; 0 &amp;&amp; $size_after - $size_before == 1;
    }
    return undef;
}

MAIN:{
    say odd_string(qw/adc wzy abc/);
    say odd_string(qw/aaa bob ccc ddd/);
    say odd_string(qw/aaaa bbbb cccc dddd/) || "no odd string found";
    say odd_string(qw/aaaa bbob cccc dddd/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
abc
bob
no odd string found
bbob
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is one main assumption here and that is that the list of strings is going to be of
length three or more. If the array has length one then can we say that single string is 
"odd" in and of itself? And if we have only two strings and they aren't the same which is 
the the odd one?&lt;/p&gt;

&lt;p&gt;The basic steps of this solution are:&lt;/p&gt;

&lt;p&gt;1) For each string split it into an array of characters.&lt;/p&gt;

&lt;p&gt;2) Compute the differences. This is done in the &lt;code&gt;map&lt;/code&gt;. I'll concede that this is a 
somewhat unusual use of &lt;code&gt;map&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;3) Transform the differences into a single string to be used as a hash key using &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4) If we add this differences based key to the hash and the hash size changes by 
1 (assuming it is a non-empty hash) then we know we have found the unique "odd string" 
which is then returned.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-193/"&gt;Challenge 193&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc193</id>
    <published>2022-12-03T19:04:00-05:00</published>
    <updated>2022-12-03T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AI-TensorFlow-Libtensorflow">AI-TensorFlow-Libtensorflow</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Bindings for Libtensorflow deep learning library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStructuredData">Acme-CPANModules-DiffingStructuredData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules to diff structured data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStuffs">Acme-CPANModules-DiffingStuffs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules/applications to diff various stuffs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RenamingFiles">Acme-CPANModules-RenamingFiles</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of Perl modules (and scripts) to rename multiple files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WrappingText">Acme-CPANModules-WrappingText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules and utilities to wrap text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Font-Uni">Alien-Font-Uni</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.0_1</td>
<td>0.3</td>
<td>provide Unifont trutype file or location</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libui">Alien-libui</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install libui: A portable GUI library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-psl">Alien-psl</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install psl (Public Suffix List Library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GUI-Cellgraph">App-GUI-Cellgraph</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.01_0</td>
<td>0.02</td>
<td>draw pattern by cellular automaton</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox">App-OpenMbox</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.12</td>
<td>0.12</td>
<td>The methods for email management used in OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ParseCommandLineUtils">App-ParseCommandLineUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for parsing command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-StringQueryToRegexpUtils">App-StringQueryToRegexpUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for String::Query::To::Regexp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TextWrapUtils">App-TextWrapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to text wrapping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Business-PagOnline">Business-PagOnline</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library for Unicredit's PagOnline payment system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Popt">CLI-Popt</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse CLI parameters via popt(3)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clearbuilt-Excelerator">Clearbuilt-Excelerator</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2.0000</td>
<td>2.0001</td>
<td>Write XLSX files in a Clearbuilt-standard way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Random">Complete-Random</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Complete from a list of random string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-PseudoEnum">DBIx-Class-PseudoEnum</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0002</td>
<td>Schema-based enumerations independent of database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ViewCache">Dancer2-Plugin-ViewCache</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Create a code for a guest user to use to view a page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-TimeZone-Catalog-Extend">DateTime-TimeZone-Catalog-Extend</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Extend DateTime::TimeZone catalog</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deprecations-Environmental">Devel-Deprecations-Environmental</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>1.000</td>
<td>deprecations for your code's surroundings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Util-Current">Dist-Util-Current</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Guess the current Perl distribution name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Test-Prereqs-Latest">Dist-Zilla-Plugin-Test-Prereqs-Latest</a></td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Tests your module has up to date dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Experian-IDAutho">Experian-IDAutho</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2.53</td>
<td>2.53</td>
<td>Experian's ID Authenticate service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Food-Ratio">Food-Ratio</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.01</td>
<td>calculate ingredient ratios</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Metrics">Future-AsyncAwait-Metrics</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>report metrics from Future::AsyncAwait to Metrics::Any</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Marad">Game-Marad</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a board game for two players</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TileMap">Game-TileMap</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Representation of tile-based two-dimensional rectangular maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-FIT">Geo-FIT</a></td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1.01</td>
<td>1.03</td>
<td>Decode Garmin FIT files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphics-Layout-Kiwisolver">Graphics-Layout-Kiwisolver</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>API for Kiwisolver constraint solver</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Blitz">HTML-Blitz</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>high-performance, selector-based, content-aware HTML template engine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Macro-Simple">Macro-Simple</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.003</td>
<td>preprocessor-like macros in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Markdown-ODF">Markdown-ODF</a></td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Create ODF documents from Markdown</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-BlackScholesMerton">Math-Business-BlackScholesMerton</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1.25</td>
<td>1.25</td>
<td>Algorithm of Math::Business::BlackScholesMerton for binary and non-binary options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-Lookback">Math-Business-Lookback</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The Black-Scholes formula for Lookback options.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-WebSocketProxy-Backend-ConsumerGroups">Mojo-WebSocketProxy-Backend-ConsumerGroups</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Class for communication with backend by sending messaging through redis streams.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-HTMX">Mojolicious-Plugin-HTMX</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Mojolicious Plugin for htmx</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Blockchain">Net-Async-Blockchain</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>base for blockchain subscription clients.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-FattureInCloud">Net-FattureInCloud</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library with MINIMAL interface to use FattureInCloud (FIC) API version 2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenTelemetry-TraceContext-W3C">OpenTelemetry-TraceContext-W3C</a></td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>0.01</td>
<td>0.02</td>
<td>W3C Trace Context implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-List-Rule">Path-List-Rule</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Path::Iterator::Rule on an list of paths</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Perl">Perinci-Sub-XCompletionBundle-Perl</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Riap">Perinci-Sub-XCompletionBundle-Riap</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Riap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls">Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1.002</td>
<td>1.002</td>
<td>Don't call fully qualified function methods without parens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Dist-APPerl">Perl-Dist-APPerl</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Actually Portable Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Greylist">Plack-Middleware-Greylist</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.3.0</td>
<td>throttle requests with different rates based on net blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI">REFECO-Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>0.002</td>
<td>0.004</td>
<td>Contract ABI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Runtime-Debugger">Runtime-Debugger</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.10</td>
<td>Debug perl wihle its running.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Numpy">SPVM-Numpy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Numpy is the Python/NumPy porting to Perl/SPVM</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-Load">SQL-Load</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>This module is a simple SQL file loader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Simple-Filter-Macro">Simple-Filter-Macro</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.08</td>
<td>Perl extension for creating macro modules that are expanding use declarations inline in Perl code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Socket-More">Socket-More</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Interface and scoped passive addressing routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Query-To-Regexp">String-Query-To-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Convert query to regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Boolean">Sub-Boolean</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>1.000000</td>
<td>make XS true/false subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Subunit">Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Table-View">Tags-HTML-Table-View</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for table view.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-QRCode-Compact">Term-QRCode-Compact</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>create QR codes for display in the terminal</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Subunit">Test-Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-ULID">Types-ULID</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>ULID type constraints</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Value-Diff">Value-Diff</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>find out the difference between two Perl values</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebSerivce-SendBird">WebSerivce-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-CustomerIO">WebService-Async-CustomerIO</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>unofficial support for the Customer.io service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Onfido">WebService-Async-Onfido</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Webservice to connect to Onfido API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Segment">WebService-Async-Segment</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Unofficial support for the Segment service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-SmartyStreets">WebService-Async-SmartyStreets</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Access SmartyStreet API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-GAMSTOP">WebService-GAMSTOP</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.003</td>
<td>0.003</td>
<td>GAMSTOP API Client Implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/results">results</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.002</td>
<td>why throw exceptions when you can return them?</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-TensorFlow-Libtensorflow ZMUGHAL 0.0.1 0.0.2 Bindings for Libtensorflow deep learning library Acme-CPANModules-DiffingStructuredData PERLANCAR 0.001 0.001 List of modules to diff structured data Acme-CPANModules-DiffingStuffs PERLANCAR 0.001 0.001 List of modules/applications to diff various stuffs Acme-CPANModules-RenamingFiles PERLANCAR 0.001 0.001 List of Perl modules (and scripts) to rename multiple files Acme-CPANModules-WrappingText PERLANCAR 0.001 0.001 … <a href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2002</id>
    <published>2022-12-01T00:44:15Z</published>
    <updated>2022-12-01T00:44:15Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>#592 - Perl Blogging?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/592.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>We all know not many people blog about <strong>Perl</strong> anymore. Are we doing anything to get it back on track? Well, unfortunately again, nothing is happening on that front either.</p>
<p>But, hey, there is still hope and handful of <strong>Perl</strong> fans doing their best. One of them is our chief editor, <strong>Gabor Szabo</strong>. He has been running <a href="https://perlmaven.com">Perl Maven</a> for years now and many of us benefitted from his work. He recently started blogging on <a href="https://dev.to/szabgab">Dev.To</a>. I request all the <strong>Perl</strong> fans to follow him and like blog post. I didn't have the account there before so I decided to create <a href="https://dev.to/manwar">personal account</a>. Although I no longer blog at all but this is going to change soon. Earlier I used to blog on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a> but then I moved to <a href="https://theweeklychallenge.org/blogs">The Weekly Challenge</a> recently.</p>
<p>Talking about blogging, how can I miss one name, <strong>Flavio Poletti</strong>? He has been blogging daily for years now. Feel free to check out his <a href="https://github.polettix.it/ETOOBUSY">work here</a>. Kudos to him for his effort.</p>
<p>I would like to mention another name, <strong>Olaf Alders</strong>, for his hard work in reviving the good old friend, <a href="https://perladvent.org">Perl Advent Calendar</a>. <strong>Julien</strong> has been helping him in the project too. I remember there was a <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">call for papers</a> by him. If you have time and something to share about your favourite <strong>CPAN</strong> module then please do contribute. I have booked one slot for myself for this year <strong>Advent Calendar</strong>. Hopefully, I will submit my article on time.</p>
<p>Last but not the least, I would like to thank all the members of <strong>Team PWC</strong> for creating friendly and positive vibes for years now. As of today, they have published <strong>3000+ blog posts</strong> sharing creative ideas and solutions. If you are interested then please do checkout <a href="https://theweeklychallenge.org/recaps">blog posts</a>.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/592.html</id>
    <published>2022-11-28T10:00:00Z</published>
    <updated>2022-11-28T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Flipping to Redistribute</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/27#pwc192" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find the binary flip.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub int2bits{
    my($n) = @_;
    my @bits;
    while($n){
        my $b = $n &amp; 1;
        unshift @bits, $b;
        $n = $n &gt;&gt; 1;
    }
    return @bits
}

sub binary_flip{
    my($n) = @_;
    my @bits = int2bits($n);
    @bits = map {$_^ 1} @bits;
    return oct(q/0b/ . join(q//, @bits));
}

MAIN:{
    say binary_flip(5);
    say binary_flip(4);
    say binary_flip(6);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
3
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There was once a time when I was positively terrified of bitwise operations. Anything at 
that level seemed a bit like magic. Especially spooky were the bitwise algorithms detailed 
in &lt;a href="https://en.wikipedia.org/wiki/Hacker%27s_Delight"&gt;Hacker's Delight&lt;/a&gt;! Anyway, has time
has gone on I am a bit more confortable with these sorts of things. Especially when, like
this problem, the issues are fairly straightforward.&lt;/p&gt;

&lt;p&gt;The code here does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converts a given integer into an array of bits via &lt;code&gt;int2bits()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flips the bits using an xor operation (the &lt;code&gt;map&lt;/code&gt; in &lt;code&gt;binary_flip()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;converts the array of flipped bits to the decimal equivalent via &lt;code&gt;oct()&lt;/code&gt; which, despite 
the name, handles any decimal, binary, octal, and hex strings as input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers greater than or equal to zero, @list. Write a script to 
distribute the number so that each members are same. If you succeed then print the total 
moves otherwise print -1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use POSIX;

sub equal_distribution{
    my(@integers) = @_;
    my $moves;
    my $average = unpack("%32I*", pack("I*",  @integers)) / @integers; 
    return -1 unless floor($average) ==  ceil($average);
    {
        map{
            my $i = $_;
            if($integers[$i] &gt; $average &amp;&amp; $integers[$i] &gt; $integers[$i+1]){$integers[$i]--; $integers[$i+1]++; $moves++}
            if($integers[$i] &lt; $average &amp;&amp; $integers[$i] &lt; $integers[$i+1]){$integers[$i]++; $integers[$i+1]--; $moves++}
        } 0 .. @integers - 2;
        redo unless 0 == grep {$average != $_} @integers;
    }
    return $moves;
}

MAIN:{
    say equal_distribution(1, 0, 5);
    say equal_distribution(0, 2, 0);
    say equal_distribution(0, 3, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
-1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules that must be followed are:&lt;/p&gt;

&lt;p&gt;1) You can only move a value of '1' per move&lt;/p&gt;

&lt;p&gt;2) You are only allowed to move a value of '1' to a direct neighbor/adjacent cell.&lt;/p&gt;

&lt;p&gt;First we compute the average of the numbers in the list. Provided that the average is a
non-decimal (confirmed by comparing &lt;code&gt;floor&lt;/code&gt; to &lt;code&gt;ceil&lt;/code&gt;) we know we can compute the 
necessary "distribution".&lt;/p&gt;

&lt;p&gt;The re-distribution itself is handled just by following the rules and continuously looping
until all values in the list are the same. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/functions/oct"&gt;oct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-192/"&gt;Challenge 192&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc192</id>
    <published>2022-11-27T19:04:00-05:00</published>
    <updated>2022-11-27T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Raku Advent Calendar submission deadline approaching!</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuadvent"/>
  <id>tag:news.perlfoundation.org,2022-11-24:/post/rakuadvent</id>
  <published>2022-11-24T13:36:27</published>
  <updated>2022-11-24T13:36:27</updated>
  <summary>
  <![CDATA[
     The Christmas season is almost here, and that means a fresh batch of Raku Advent Calendar posts. Every year since 2009, the Raku community has hosted an annual Advent event, in the spirit of Perl and other projects, consisting of daily articles starting on the 1st of December and ending on the 25th. The Raku community has had so many great posts and, hopefully, this year will live up to 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Christmas season is almost here, and that means a fresh batch of
Raku Advent Calendar posts.  Every year since 2009, the Raku community
has hosted an annual Advent event, in the spirit of Perl and other
projects, consisting of daily articles starting on the 1st of December and ending
on the 25th.  The Raku community has had so many great posts and, hopefully, this year will live up to that same high standard.</p>

<p>But, to do that, Raku needs your help: If you'd like to write a post,
please <strong>sign up on the Raku Advent Calendar <a href="https://github.com/Raku/advent/blob/master/raku-advent-2022/authors.md">GitHub
repo</a></strong>.
  The deadline for post submission is December 1st (next week!).  However,
if you would like to post but cannot meet that deadline, please sign up
anyway and reach out about when you can submit a post – it's likely that we can make the timing work.</p>

<p>Let’s all write some great posts and have a Merry Raku Advent indeed!</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_october_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-23:/post/maintaining_perl_tonyc_october_2022</id>
  <published>2022-11-23T09:01:16</published>
  <updated>2022-11-23T09:01:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/10/01 Saturday  0.12 github notifications  0.22 #20355 comment  0.13 #20362 ask for more info  0.47 2022/10/03 Monday  1.05 #20207 LogFile::Read, Nagios::Cmd patches  0.23 #20207 Log::Procmail patch  0.05 #20346 Text::PerlPP look at test report and comment  1.33 2022/10/06 Thursday  0.07 github notifications  0.67 #20355 long comment  1.03 #20362 review new info, research and comment  0.80 #20026 research 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/10/01      Saturday
 0.12           github notifications
 0.22           #20355 comment</p>

<h1> 0.13           #20362 ask for more info</h1>

<p> 0.47</p>

<p>2022/10/03      Monday
 1.05           #20207 LogFile::Read, Nagios::Cmd patches
 0.23           #20207 Log::Procmail patch</p>

<h1> 0.05           #20346 Text::PerlPP - look at test report and comment</h1>

<p> 1.33</p>

<p>2022/10/06      Thursday
 0.07           github notifications
 0.67           #20355 long comment
 1.03           #20362 review new info, research and comment
 0.80           #20026 research and comment
 0.18           #20356 review and approve
 0.30           #20290 review testing (was going to merge, but) comment on
                test noise
 0.23           #20367 review and approve</p>

<h1> 0.30           #20309 review and comment</h1>

<p> 3.58</p>

<p>2022/10/10      Monday
 0.23           #20290 review updates and apply to blead, perldelta
 0.23           #20372 testing, comment
 0.70           #20370 review and approve
 0.17           #20380 review and approve
 2.00           #20362 re-work test-dist-modules (based on Bram’s PR)
 2.83           #20362 fix, restart, not using system perl, add missing
                file for threads, threads-shared, debugging, move file
                data to <strong>DATA</strong>, testing</p>

<h1> 0.05           #20362 fixes and push  for more CI</h1>

<p> 6.21</p>

<p>2022/10/11      Tuesday
 1.72           #20362 clean up commits, add more logging, testing
 3.28           #20362 look into failures, fix build issue with threads,
                threads-shared, fix probing bug on darwin, try fix for
                emulation not happening (macos system perl doesn’t -</p>

<h1>                DPERL_DARWIN)</h1>

<p> 5.00</p>

<p>2022/10/12      Wednesday
 0.75           #20372 research and comment (and some #p5p discussion)
 2.98           #20362 look into EU:PXS failure and update EU::CBuilder,
                commit clean up, polish</p>

<h1> 1.78           #20362 more polish, final test, post PR #20385</h1>

<p> 5.51</p>

<p>2022/10/13      Thursday
 0.08           #20304 review and approve
 0.68           github notifications
 0.28           #20362 changes to avoid conflict with #20304
 0.30           #20388 review, research and comment briefly
 0.52           #20390 review and comment
 0.30           #20387 review, research and approve</p>

<h1> 1.75           #20346 testing, debugging</h1>

<p> 3.91</p>

<p>2022/10/17      Monday
 0.35           #20362/#20385 follow-up on PR comments
 0.13           #20403 review and approve
 0.35           #20388 review and comment
 0.40           #20402 review and approve
 0.50           #20404 review, research and approve
 0.33           #20393 review and comment
 0.60           #20351 apply to blead, perldelta
 1.45           look into blead test failure (Test::More related?), cannot
                reproduce</p>

<h1> 0.35           look over RFC discussions</h1>

<p> 4.46</p>

<p>2022/10/18      Tuesday
 0.30           github notifications
 0.40           #20199 apply to blead, perldelta and open related #20408
 0.47           #20397 review and approve
 0.38           #20408 comment</p>

<h1> 1.97           #19964 re-work, testing</h1>

<p> 3.52</p>

<p>2022/10/19      Wednesday
 0.92           #19964 fixes, testing, push for CI
 0.13           github notifications
 0.68           #20409 why hasn’t this been an issue before - testing,
                only in miniperl, comment
 0.20           rfc pr #30 review and comments
 0.43           #20399 research
 0.43           #19964 look into test failures</p>

<h1> 0.95           #20412 review, research and comment</h1>

<p> 3.74</p>

<p>2022/10/20      Thursday
 1.70           #20411 reproduce, debugging
 2.83           #20411 look into why the save stack is getting so large,
                try some fixes, look into supplied solution, work on</p>

<h1>                better solution, testing</h1>

<p> 4.53</p>

<p>2022/10/24      Monday
 0.38           github notifications
 0.85           rfc #17 review and comments
 0.13           #20417 review and approve
 0.65           #20398 review
 0.10           #20398 more review and comment
 0.08           #20429 review and approve
 0.18           #20428 review and comment
 0.03           #20424 review and approve with comment
 0.67           #20415 review and approve
 0.57           #20385 rebase, testing and apply manually to blead
 0.42           #20363 recheck, issues with blead, fix B::Op_private</p>

<h1>                version, investigate other problems</h1>

<p> 4.06</p>

<p>2022/10/25      Tuesday
 0.33           github notifications
 0.22           #20427 review and comment
 0.58           look into dist-modules macos failures, make PR 20436
 0.35           rfc #17 look at changes
 0.57           #20434 review and comment</p>

<h1> 0.50           #20435 review and comments</h1>

<p> 2.55</p>

<p>2022/10/26      Wednesday
 1.37           #20440 review, testing, long comment
 0.65           #20427 follow-up, some #p5p discussion
 0.03           #20435 briefly comment
 0.68           #20365 review
 1.03           #20365 try to track down issue, more testing, comments
 0.80           #20346 look over still failing modules, retest
                Mojolicioous::Plugin::RenderCGI and comment
 0.33           #20427 discussion, review patch and approve</p>

<h1> 0.12           #20440 approve modified PR</h1>

<p> 5.01</p>

<p>2022/10/27      Thursday
 2.53           #20365 alt branch review, testing, comments at
                https://github.com/Perl/perl5/commit/d6b8be71272aafbbaa17b
                b27be4ac484f8726651</p>

<h1> 1.43           #20411 try to make patch crash</h1>

<p> 3.96</p>

<p>2022/10/28      Friday</p>

<h1> 0.85           #20446 review updates, testing, comments</h1>

<p> 0.85</p>

<p>2022/10/31      Monday
 1.88           #19814 review, performance testing, comment
 1.30           #20446 review updates, minor comments
 0.58           #20457 review, comments
 0.32           #20459 comment
 0.37           #20460 review discussion and comment
 0.22           #20378 review, research and comment
 0.25           #20451 review and comment
 0.62           #20411 polish, testing, push for CI</p>

<h1> 0.87           security list - research, comment</h1>

<p> 6.41</p>

<p>Which I calculate is 65.1 hours.</p>

<p>Approximately 51 tickets were reviewed or worked on, and 4 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Read dates from Excel file using Perl</title>
  <summary type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></summary>
  <updated>2022-11-23T05:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/read-dates-from-excel"/>  <id>https://perlmaven.com/read-dates-from-excel</id>
  <content type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#591 - Less than 50% use CI</title>
    <link rel="alternate" href="https://perlweekly.com/archive/591.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>One of the best things about programming is that you can get almost immediate feedback from your work. The compiler tells you immediately if your code has syntax errors. Your tests can tell you within minutes if your code does what you expected on your computer. Your CI system can tell you within another few minutes if your code works on various other environments.</p>
<p>In the Perl community writing test became the norm. You rarely find any Open Source Perl code without tests. People write test even for code that only they use. Even for code they consider 'toys'. Yet with CI we are still far from it. On our <a href="https://perlweekly.com/metacpan.html">stats page</a> you can see that 12% are missing their link to VCS (some of those do have VCS they are just missing the link), but 45-60% (depending on the week) of CPAN releases have no CI configured.</p>
<p>From experience I know that corporations are way behind the curve in terms of test writing. So I can only imagine how few use Continuous Integration. There is a lot of work to be done.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/591.html</id>
    <published>2022-11-21T10:00:00Z</published>
    <updated>2022-11-21T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Twice Largest Once Cute </title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/20#pwc191" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers, @list. Write a script to find out whether the largest 
item in the list is at least twice as large as each of the other items.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub twice_largest{
    my(@list_integers) = @_;
    my @sorted_integers = sort {$a &lt;=&gt; $b} @list_integers;
    for my $i (@sorted_integers[0 .. @sorted_integers - 1]){
        unless($sorted_integers[@sorted_integers - 1] == $i){
            return -1 unless $sorted_integers[@sorted_integers - 1] &gt;= 2 * $i; 
        }
    }
    return 1;
}

MAIN:{
    say twice_largest(1, 2, 3, 4);
    say twice_largest(1, 2, 0, 5);
    say twice_largest(2, 6, 3, 1);
    say twice_largest(4, 5, 2, 3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
-1
1
1
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;For Part 1 I at first couldn't see how to avoid a basic O(n^2) nested for loop. After I 
took a nap I think the best approach is what I have here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sort the list O(n log n)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get the max element from the sorted list O(1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterate over the sorted list, stop and return false if at any point an element times 
two is not less then max. return true if all elements (other than $max itself) pass the 
test. O(n)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So total worst case dominated by the sort O(n log n). &lt;/p&gt;

&lt;p&gt;(And the nap was required because I was on an overnight camping trip with my son's Cub 
Scout pack the previous day and barely slept at all!)&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, 0 &amp;lt; $n &amp;lt;= 15. Write a script to find the number of orderings 
of numbers that form a cute list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;

sub cute_list{
    my($n) = @_;
    my %cute;
    tie %cute, "Hash::MultiKey";
    for my $i (1 .. $n){
        $cute{[$i]} = undef;
    }
    my $i = 1;
    {
        $i++;
        my %cute_temp;
        tie %cute_temp, "Hash::MultiKey";
        for my $j (1 .. $n){
            for my $cute (keys %cute){
                if(0 == grep {$j == $_} @{$cute}){
                    if(0 == $j % $i || 0 == $i % $j){
                        $cute_temp{[@{$cute}, $j]} = undef;
                    }    
                }
            }
        }
        %cute = %cute_temp;
        untie %cute_temp;
        redo unless $i == $n;
    }
    return keys %cute;
}

MAIN:{
    say cute_list(2) . q//;
    say cute_list(3) . q//;
    say cute_list(5) . q//;
    say cute_list(10) . q//;
    say cute_list(11) . q//;
    say cute_list(15) . q//;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
10
700
750
24679
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution with a dynamic programming style approach seems to work pretty well. 
cute(11) runs in less than a second (perl 5.34.0, M1 Mac Mini 2020) which is pretty good
compared to some other reported run times that have been posted to social media this week.&lt;/p&gt;

&lt;p&gt;Some may notice that the solution here bears a striking resemblance to the one for 
&lt;a href="http://rabbitfarm.com/cgi-bin/blosxom/2021/06/20"&gt;TWC 117&lt;/a&gt;! The logic there was a bit 
more complicated, since multiple paths could be chosen. The overall idea is the same 
though: as we grow the possible lists we are able to branch and create new lists (paths).&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-191/"&gt;Challenge 191&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc191</id>
    <published>2022-11-20T21:50:00-05:00</published>
    <updated>2022-11-20T21:50:00-05:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
