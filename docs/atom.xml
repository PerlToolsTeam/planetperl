<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-12T12:46:16Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/243f8ce6f4073bdaa704088694d9fb7597ba9448</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/243f8ce6f4073bdaa704088694d9fb7597ba9448"/>
    <title>
        perl5376delta - Remove erroneous hyphen (fixes #21014)
    </title>
    <updated>2023-04-12T09:37:44Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/5769356?s=30&amp;v=4"/>
    <author>
      <name>Grinnz</name>
      <uri>https://github.com/Grinnz</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;perl5376delta - Remove erroneous hyphen (fixes #21014)&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75990100</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Find minimum and maximum values in a hash</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="hashmap"/>
        <author>
            <name>Callie</name>
            <uri>https://stackoverflow.com/users/9788900</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75990100/find-minimum-and-maximum-values-in-a-hash"/>
        <published>2023-04-11T21:00:26Z</published>
        <updated>2023-04-12T08:43:37Z</updated>
        <summary type="html">
            &lt;p&gt;I have a hash which stores strings as keys and their occurrence as values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$VAR1 = {
          'ABCD' =&amp;gt; 2,
          'EFGH' =&amp;gt; 7,
          'IJKL' =&amp;gt; 17,
          'MNOP' =&amp;gt; 2,
           'OPMN' =&amp;gt; 300,
           'QRST' =&amp;gt; 300,
           'DEAC' =&amp;gt; 300
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I want to find minimum and maximum of the values for this hash. Eg min = 2 and max = 300&lt;/p&gt;
&lt;p&gt;I tried following code which gave error &lt;code&gt;Can't use string (&amp;quot;17&amp;quot;) as an ARRAY ref while &amp;quot;strict refs&amp;quot; in use at&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$minAssigned = min(@{$countPat{$pat4C}});

$maxAssigned = max(@{$countPat{$pat4C}});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How can I resolve this error. Also once I have these numbers I want to loop through the values of the same hash minAssigned to maxAssigned times and print the total occurrence of the values. For example the value 2 occurs 2 times, Value 17 occurs 1 time, value 300 occurs 3 times.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75974097</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Merge two regexes with variable number of capture groups</title>
            <category scheme="https://stackoverflow.com/tags" term="regex"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="regex-group"/>
        <author>
            <name>Erik Bennett</name>
            <uri>https://stackoverflow.com/users/4114394</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75974097/merge-two-regexes-with-variable-number-of-capture-groups"/>
        <published>2023-04-10T03:27:14Z</published>
        <updated>2023-04-12T07:15:45Z</updated>
        <summary type="html">
            &lt;p&gt;I'm trying to match either&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(\S+)(=)([fisuo])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(\S+)(!)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then have the results placed in a list (capture groups).  All of my attempts result in extra, unwanted captures.&lt;/p&gt;
&lt;p&gt;Here's some code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
#-*- cperl -*-
# $Id: test7,v 1.1 2023/04/10 02:57:12 bennett Exp bennett $
#

use strict;
use warnings;
use Data::Dumper;

foreach my $k ('debugFlags=s', 'verbose!') {
    my @v;

    # Below is the offensive looking code.  I was hoping for a regex
    # which would behave like this:

    if(@v = $k =~ m/^(\S+)(=)([fisuo])$/) {
      printf STDERR (&amp;quot;clownMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    } elsif(@v = $k =~ m/^(\S+)(!)$/) {
      printf STDERR (&amp;quot;clownMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    }

    @v = ();

    # This is one of my failed, aspirational matches.  I think I know
    # WHY it fails, but I don't know how to fix it.
    
    if(@v = $k =~ m/^(?:(\S+)(=)([fisuo]))|(?:(\S+)(!))$/) {
      printf STDERR (&amp;quot;hopefulMatch = '$k' =&amp;gt; %s\n\n&amp;quot;, Dumper(\@v));
    }
    printf STDERR &amp;quot;===\n&amp;quot;;
}

exit(0);
__END__
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clownMatch = 'debugFlags=s' =&amp;gt; $VAR1 = [
          'debugFlags',
          '=',
          's'
        ];


hopefulMatch = 'debugFlags=s' =&amp;gt; $VAR1 = [
          'debugFlags',
          '=',
          's',
          undef,
          undef
        ];


===
clownMatch = 'verbose!' =&amp;gt; $VAR1 = [
          'verbose',
          '!'
        ];


hopefulMatch = 'verbose!' =&amp;gt; $VAR1 = [
          undef,
          undef,
          undef,
          'verbose',
          '!'
        ];


===
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are more details in the code comments.  The output is at the bottom of the code section.  And the '!' character is just that.  I'm not confusing it with some other not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update Mon Apr 10 23:15:40 PDT 2023:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the wise input of several readers, it seems that this question decomposes into a few smaller questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can a regex return a variable number of capture groups?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I haven't heard one way or the other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should one use a regex in this way, if it could?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not without a compelling reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For my purposes, should I use a regex to create what is really a lexical-analyzer/parser?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No.  I was using a regex for syntax checking and got carried away.&lt;/p&gt;
&lt;p&gt;I learned a good deal, though.  I hope moderators see fit to keep this post as a cautionary tale.&lt;/p&gt;
&lt;p&gt;Everyone deserves points on this one, and can claim that they were robbed, citing this paragraph.  @Schwern gets the points for being first.  Thanks.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75874475</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">How do I get the current year with Perl?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>Fontane</name>
            <uri>https://stackoverflow.com/users/16726223</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75874475/how-do-i-get-the-current-year-with-perl"/>
        <published>2023-03-29T07:46:27Z</published>
        <updated>2023-04-12T06:23:49Z</updated>
        <summary type="html">
            &lt;p&gt;in a script, the variables are defined with &amp;quot;my&amp;quot;.&lt;/p&gt;
&lt;p&gt;I now have the variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $timestamp = time();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inserted and would now like to output the year.&lt;/p&gt;
&lt;p&gt;With&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $timestamp = time();
my $year=$timestamp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the timestamp is displayed correctly in the &lt;code&gt;print&lt;/code&gt; section with &lt;code&gt;$year&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How do I have to define &lt;code&gt;$year&lt;/code&gt; so that the date, e.g. &lt;code&gt;date(Y)&lt;/code&gt; is output?&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75989888</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Why doesn't Perl sort numbers in numerical order?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>user1211092</name>
            <uri>https://stackoverflow.com/users/20661227</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75989888/why-doesnt-perl-sort-numbers-in-numerical-order"/>
        <published>2023-04-11T20:26:13Z</published>
        <updated>2023-04-12T06:03:21Z</updated>
        <summary type="html">
            &lt;p&gt;I have to write code that takes user input and turns it into an array, then have the largest number multiply everything in the array. When I input any number &amp;lt;=9 the code runs fine. But when I enter anything over 9 the code &amp;quot;drops&amp;quot; it as the largest value, if that makes any sense.&lt;/p&gt;
&lt;p&gt;In my code, I sorted the array then had the last value (the largest) multiply the whole array&lt;/p&gt;
&lt;p&gt;input numbers (user input): 1 3 5 7 2 4 6 8 10&lt;/p&gt;
&lt;p&gt;final (after being sorted and multiplied: 8, 80, 16, 24, 32, 40, 48, 56, 64&lt;/p&gt;
&lt;p&gt;You can see that 10 is the largest number (and should be the last because of the sort), but for some reason 10 is pushed to the first position and 8 is made the last/largest value. If I were to add 9 anywhere in the input, 9 would be made the last/largest number instead of 8, as it should.&lt;/p&gt;
&lt;p&gt;I even tried this on an online complier and the result was the same&lt;/p&gt;
&lt;p&gt;Why is anything greater than 9 doing this? And how do I fix this?&lt;/p&gt;
&lt;p&gt;Also, code looks bad because this is my first day touching Perl lol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;input numbers: &amp;quot;);
$nums = &amp;lt;STDIN&amp;gt;;

@converted = split(' ', $nums); #turned user input into an array

@sorted = sort(@converted);

$multi = @sorted[-1]; #puts the last/largest number of the array in $multi

foreach $x (@sorted){ #loops through the array and multiplies everything by the last/largest value
    $x = $x * $multi
}

print(&amp;quot;final: &amp;quot;);
print join(', ', @sorted); #just added commas to make it readable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know there's an easier way to do this with the min max stuff but it wasn't working when I tried it&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <author>
      <name>/u/uid1357</name>
      <uri>https://www.reddit.com/user/uid1357</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/uid1357"&gt; /u/uid1357 &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://metacpan.org/release/ZEFRAM/Tuple-Munge-0.001/view/lib/Tuple/Munge.pm"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12ja4b3/tuples_in_perl/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12ja4b3</id>
    <link href="https://www.reddit.com/r/perl/comments/12ja4b3/tuples_in_perl/"/>
    <updated>2023-04-12T04:37:45+00:00</updated>
    <published>2023-04-12T04:37:45+00:00</published>
    <title>Tuples in Perl</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75979451</id>
        <re:rank scheme="https://stackoverflow.com">2</re:rank>
        <title type="text">DBIx::Class how to retrieve generated UUID on create?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="dbix-class"/>
        <author>
            <name>Rawley Fowler</name>
            <uri>https://stackoverflow.com/users/12283863</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75979451/dbixclass-how-to-retrieve-generated-uuid-on-create"/>
        <published>2023-04-10T17:51:26Z</published>
        <updated>2023-04-12T00:19:50Z</updated>
        <summary type="html">
            &lt;p&gt;I have an application that uses &lt;code&gt;DBIx::Class&lt;/code&gt;, currently when I create an object that corresponds to a table I get back the object but the &lt;code&gt;id&lt;/code&gt; column will be set to &lt;code&gt;0&lt;/code&gt; instead of to the &lt;code&gt;UUID&lt;/code&gt; that's generated on the database level. How can I properly retrieve the &lt;code&gt;id&lt;/code&gt; column when I create a new record?&lt;/p&gt;
&lt;p&gt;Here is my table:&lt;/p&gt;
&lt;pre class="lang-sql prettyprint-override"&gt;&lt;code&gt;CREATE TABLE IF NOT EXISTS log (
    id VARCHAR(36) DEFAULT (UUID()) PRIMARY KEY,
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is my &lt;code&gt;DBIx::Class&lt;/code&gt; schema:&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;__PACKAGE__-&amp;gt;load_components(qw/InflateColumn::DateTime PK::Auto Core/);

__PACKAGE__-&amp;gt;table('log');
__PACKAGE__-&amp;gt;add_columns(
    id =&amp;gt; {
        data_type         =&amp;gt; 'varchar',
        size              =&amp;gt; 36,
        unique            =&amp;gt; 1,
        is_auto_increment =&amp;gt; 1
    },
    qw/.../ # other columns
);
__PACKAGE__-&amp;gt;set_primary_key('id');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I go to insert, like (&lt;code&gt;log_repository&lt;/code&gt; is my resultset):&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;my $log = $self-&amp;gt;log_repository-&amp;gt;create($json);

print $log-&amp;gt;get_column('id'); # 0 instead of valid UUID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How can I retrieve the &lt;code&gt;UUID&lt;/code&gt; on create?&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/860210169cb4fd06724f7e233d39f0636adb2366</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/860210169cb4fd06724f7e233d39f0636adb2366"/>
    <title>
        Porting/epigraphs - Add epigraph for 5.36.1-RC2
    </title>
    <updated>2023-04-11T19:58:41Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Porting/epigraphs - Add epigraph for 5.36.1-RC2&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/81542b3af316ff17825132488c1e21fb63ad1167</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/81542b3af316ff17825132488c1e21fb63ad1167"/>
    <title>
        5.36.1-RC2 today
    </title>
    <updated>2023-04-11T19:02:57Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;5.36.1-RC2 today&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Data::Table - Weekly Travelling in CPAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/c_y_fung/2023/04/datatable---weekly-travelling-in-cpan.html"/>
    <id>tag:blogs.perl.org,2023:/users/c_y_fung//3481.11074</id>
    <published>2023-04-11T15:30:50Z</published>
    <updated>2023-04-11T15:42:59Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<div style="text-align: center;">Destination: <a href="https://metacpan.org/pod/Data::Table">Data::Table</a></div>
<strong>Date of Latest Release: Feb 12, 2020<br>
Distribution: Data-Table<br>
Module version: 0.38<br>
Main Contributors: Yingyao Zhou (EZDB), Guangzhou Zou<br>
License: [perl]
</strong>

<p><br />
Near the Christmas in 2022, I played a data engineering challenge called "Hanukkah of Data 5783". You can find it on <a href="https://hanukkah.bluebird.sh/5783">https://hanukkah.bluebird.sh/5783</a> . Players can download data of either .CSV, .JSON or .SQLITE format.</p>

<p>The first* task is like this:</p>

<blockquote>... And their phone number was their last name spelled out. I didn’t know what that meant, but apparently before there were smartphones, people had to remember phone numbers or write them down. If you wanted a phone number that was easy-to-remember, you could get a number that spelled something using the letters printed on the phone buttons: like 2 has “ABC”, and 3 “DEF”, etc."</blockquote>

<p><small>* There is a "zeroth" task on the calendar year.</small></p>

<p><br />
I didn't mind perish my skill on SQL, but these kinds of things immediately I thought of Perl, maybe there would be a subroutine like this: </p>

<pre>sub phonebutton {
    return 2 if $_[0] =~ /[abc]/;
    return 3 if $_[0] =~ /[def]/;
    return 4 if $_[0] =~ /[ghi]/;
    return 5 if $_[0] =~ /[jkl]/;
    return 6 if $_[0] =~ /[mno]/;
    return 7 if $_[0] =~ /[pqrs]/;
    return 8 if $_[0] =~ /[tuv]/;
    return 9 if $_[0] =~ /[wxyz]/;
}</pre>

<p>But what tools in Perl ecosystem could help me?</p>

<p>I found the CPAN module Data::Table. It is a tool for .xls and .csv file.</p>

<p>I use Data::Table to solve all those challenges. Data::Table has a very nice cookbook by its main author and can be found on <a href="https://sites.google.com/site/easydatabase/">https://sites.google.com/site/easydatabase/</a> .</p>

<p>Spoiler Alert: The following is how I solved one of the "Hanukkah of Data 5783" challenge. Here I suggest you reading the Data::Table cookbook (it is really nicely formatted and organized!) and try the Hanukkah of Data(it is really fun!) on yourself.<br />
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>

<p></p>

<p></p>

<p>Puzzle statement on Day 5: <a href="https://hanukkah.bluebird.sh/5783/5/">https://hanukkah.bluebird.sh/5783/5/</a></p>

<p>The point is to find a lady living in <i>Queens Village</i> and having a habit of buying a lot of pet food. There is a category of product started with "<i>PET</i>". So my strategy was looking for the top few people spending the greatest amount of money or buying largest amount of pet food over the course of time.</p>

<p>I had to combine three tables: the table of customer details (including name, phone number, birthday, living area, customer ID), the table of orders and the table of items on each item. To <i>combine</i> tables, there is usually a JOIN operation. Relational database users know there are <tt>LEFT_JOIN</tt>, <tt>RIGHT_JOIN</tt>, <tt>INNER_JOIN</tt> and <tt>FULL_JOIN</tt>(<tt>OUTER_JOIN</tt>). Data::Table supports these JOINs.</p>

<p>Use of <tt>subTable()</tt> makes the operations less consuming.</p>

<p><tt>sort([header], Data::Table::NUMBER, Data::Table::DESC)</tt> helped me to look for those pet lovers.</p>

<p>Here is my code:</p>

<pre>
# Day 5 of "Hanukkah of Data 5783"
use v5.30.0;
use warnings;

<p>use Data::Table;<br />
use List::Util qw/sum/;</p>

<p>my $t = Data::Table::fromCSV("noahs-customers.csv");<br />
my $u = Data::Table::fromCSV("noahs-orders.csv");<br />
my $v = Data::Table::fromCSV("noahs-orders_items.csv");</p>

<p>my $t_p = $t->match_pattern_hash(<br />
    '$_{citystatezip} =~ /Queens Village/'<br />
);</p>

<p>say $t_p->nofRow;</p>

<p>my $v_p = $v->match_pattern_hash(<br />
    '$_{sku} =~ /^PET/'<br />
);</p>

<p>my $u_p = $u->subTable([0..$u->nofRow-1], ["orderid", "customerid"]);</p>

<p>my $r = $t_p->join($u_p, Data::Table::INNER_JOIN, ['customerid'], ['customerid'])<br />
            ->join($v_p, Data::Table::LEFT_JOIN, ['orderid'], ['orderid'])<br />
            ->group(['customerid'], ['qty'], [ sum ], ['numofpetfood']);</p>

<p>$r->sort('numofpetfood', Data::Table::NUMBER, Data::Table::DESC);</p>

<p>say  $r->elm(0, "name"), " ", $r->elm(0, "phone"), " ", $r->elm(0, "numofpetfood");<br />
say  $r->elm(1, "name"), " ", $r->elm(1, "phone"), " ", $r->elm(1, "numofpetfood");<br />
</pre></p>

<p><br />
The difference of amount of purchases between the first pet food frequent buyer and the second pet food frequent buyer is huge. So there is no doubt who the person the puzzle is looking for.</p>

<p>I have put my solution of each day as <a href="https://gist.github.com/E7-87-83/c33a7e1575ec233b8b3e8a2a24a0ec1a">gists</a> on GitHub.</p>

<div style="text-align: center;">THE HIGHLIGHTED PERL MODULES OF WEEK 15 OF 2023:<br>Data::Table</div>]]>
        
    </content>
</entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/nicholas_hubbard</name>
      <uri>https://www.reddit.com/user/nicholas_hubbard</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12im0mz/4_more_unrelated_perl_tidbits/"&gt; &lt;img src="https://external-preview.redd.it/yrFV3Ep9KxK6Vge37BmqDw7K-4S9cEbeWwYL6yNBrak.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=1c3be97c0ea817482e582f8ac70e83327f27150b" alt="4 More Unrelated Perl Tidbits" title="4 More Unrelated Perl Tidbits" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/nicholas_hubbard"&gt; /u/nicholas_hubbard &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://dev.to/nicholasbhubbard/4-more-unrelated-perl-tidbits-ijm"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12im0mz/4_more_unrelated_perl_tidbits/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12im0mz</id>
    <media:thumbnail url="https://external-preview.redd.it/yrFV3Ep9KxK6Vge37BmqDw7K-4S9cEbeWwYL6yNBrak.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1c3be97c0ea817482e582f8ac70e83327f27150b"/>
    <link href="https://www.reddit.com/r/perl/comments/12im0mz/4_more_unrelated_perl_tidbits/"/>
    <updated>2023-04-11T14:43:12+00:00</updated>
    <published>2023-04-11T14:43:12+00:00</published>
    <title>4 More Unrelated Perl Tidbits</title>
  </entry>
  <entry>
    <title>4 More Unrelated Perl Tidbits</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/4-more-unrelated-perl-tidbits-ijm" type="text/html"/>
    <content type="html">&lt;p&gt;Last year I wrote an article titled &lt;a href="https://dev.to/nicholasbhubbard/4-unrelated-perl-tidbits-2766"&gt;4 Unrelated Perl Tidbits&lt;/a&gt;, where I talked about some random Perl facts I learned about from reading &lt;a href="https://www.oreilly.com/library/view/programming-perl-4th/9781449321451/"&gt;Programming Perl&lt;/a&gt;. In this article I will talk about 4 more random and interesting Perl features I have learned about since.&lt;/p&gt;

&lt;h3&gt;
  
  
  Built-Ins Can Be Overridden with Lexical Subroutines
&lt;/h3&gt;

&lt;p&gt;Perl version 5.18 introduced &lt;a href="https://perldoc.perl.org/perlsub#Lexical-Subroutines"&gt;lexical subroutines&lt;/a&gt;, which are often sometimes referred to as "my subs". An interesting characteristic of lexical subs is that unlike regular subroutines, they can override built-ins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;printing is banned&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
printing is banned
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If anybody has seen a legitimate use of this feature then please comment below.&lt;/p&gt;

&lt;h3&gt;
  
  
  Recursive Anonymous Subroutines With __SUB__
&lt;/h3&gt;

&lt;p&gt;Perl version 5.16 introduced the &lt;a href="https://perldoc.perl.org/functions/__SUB__"&gt;__SUB__&lt;/a&gt; special token that holds a reference to the current subroutine. You can use &lt;code&gt;__SUB__&lt;/code&gt; to make a recursive call in an anonymous subroutine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;higher_order_subroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;__SUB__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Goto Searches For Labels In The Dynamic Scope
&lt;/h3&gt;

&lt;p&gt;The following example shows that &lt;a href="https://perldoc.perl.org/functions/goto"&gt;goto&lt;/a&gt; searches for its label argument from within the current &lt;a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scope"&gt;dynamic scope&lt;/a&gt;. Note that this program just goes on forever printing &lt;code&gt;hello from after LABEL&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;goto&lt;/span&gt; &lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;LABEL:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello from after LABEL&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
hello from after LABEL
hello from after LABEL
hello from after LABEL
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is another feature that you should leave a comment about if you have seen a legitimate usage of it.&lt;/p&gt;

&lt;h3&gt;
  
  
  Regex Modifier For Only Portions Of The Regex
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;(?M:)&lt;/code&gt; pattern in a regex to turn on the modifier specified by &lt;code&gt;M&lt;/code&gt;, only inside the parentheses. For example, the following two regexs are the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;
&lt;span class="sr"&gt;/(?i:foo)/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also turn a modifier off with &lt;code&gt;(?-M:)&lt;/code&gt;, which is shown in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(?-i:foo)/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;does not match&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
does not match
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This feature is useful if you want to turn a modifier on/off for only a portion of the regex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;fooBAR&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(?-i:foo)bar/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;does not match&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
matches
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/4-more-unrelated-perl-tidbits-ijm</id>
    <published>2023-04-11T14:39:40Z</published>
    <updated>2023-04-11T14:39:40Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <author>
      <name>/u/davorg</name>
      <uri>https://www.reddit.com/user/davorg</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I&amp;#39;ve mentioned my &lt;a href="https://psc.perlhacks.com/"&gt;list of PSC meeting minutes&lt;/a&gt; before, but there were several meetings missing from my list until I went and &lt;a href="https://github.com/davorg/psc/commit/d5944fa4107800304c5191de24bdf1cee78b9c57"&gt;tracked down a lot more of them&lt;/a&gt; this morning.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/davorg"&gt; /u/davorg &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12iggc7/perl_steering_committee_meeting_minutes/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12iggc7/perl_steering_committee_meeting_minutes/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12iggc7</id>
    <link href="https://www.reddit.com/r/perl/comments/12iggc7/perl_steering_committee_meeting_minutes/"/>
    <updated>2023-04-11T11:14:38+00:00</updated>
    <published>2023-04-11T11:14:38+00:00</published>
    <title>Perl Steering Committee meeting minutes</title>
  </entry>
  <entry>
    <author>
      <name>/u/leonerduk</name>
      <uri>https://www.reddit.com/user/leonerduk</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/leonerduk"&gt; /u/leonerduk &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-103.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12ie6xy/this_week_in_psc_103_perl_steering_council/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12ie6xy</id>
    <link href="https://www.reddit.com/r/perl/comments/12ie6xy/this_week_in_psc_103_perl_steering_council/"/>
    <updated>2023-04-11T09:22:02+00:00</updated>
    <published>2023-04-11T09:22:02+00:00</published>
    <title>This week in PSC (103) | Perl Steering Council [blogs.perl.org]</title>
  </entry>
  <entry>
    <title>Some hats icons</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/11/some-hats-icons/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I drew some basic icons of hats.</p>
</blockquote>

<p>A couple of days ago I discovered <a href="/ETOOBUSY/2021-04-09/libresprite/">LibreSprite</a> and I started playing a
bit with it.</p>

<p>So… here’s what came out: <em>Hats icons (and an explosion)</em>.</p>

<p><img src="/ETOOBUSY/assets/images/hats.png" alt="Hats"/></p>

<p>The image above is dedicated to the public domain.</p>

<p xmlns:dct="http://purl.org/dc/terms/" xmlns:vcard="http://www.w3.org/2001/vcard-rdf/3.0#">
  <a rel="license" href="http://creativecommons.org/publicdomain/zero/1.0/">
    <img src="https://licensebuttons.net/p/zero/1.0/80x15.png" style="border-style: none;" alt="CC0"/>
  </a>
  <br/>
  To the extent possible under law,
  <a rel="dct:publisher" href="https://etoobusy.polettix.it/">
    <span property="dct:title">Flavio Poletti</span></a>
  has waived all copyright and related or neighboring rights to
  <span property="dct:title">Hats icons (and an explosion)</span>.
This work is published from:
<span property="vcard:Country" datatype="dct:ISO3166" content="IT" about="https://etoobusy.polettix.it/">
  Italia</span>.
</p>

<p>The are also available individually <a href="/ETOOBUSY/assets/images/hats-and-an-explosion.tar.gz">here</a>.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/11/some-hats-icons/</id>
    <published>2023-04-11T06:00:00+02:00</published>
    <updated>2023-04-11T06:00:00+02:00</updated>
    <category term="png"/>
    <category term="icons"/>
    <category term="drawing"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 212: Jumping Letters</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-212-jumping-letters.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11073</id>
    <published>2023-04-11T02:36:04Z</published>
    <updated>2023-04-11T02:38:56Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 212 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-212/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 16, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Jumping Letters</h2>

<p><em>You are given a word having alphabetic characters only, and a list of positive integers of the same length.</em></p>

<p><em>Write a script to print the new word generated after jumping forward each letter in the given word by the integer in the list. The given list would have exactly the number as the total alphabets in the given word.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $word = 'Perl' and @jump = (2,22,19,9)
Output: Raku

'P' jumps 2 place forward and becomes 'R'.
'e' jumps 22 place forward and becomes 'a'. (jump is cyclic, i.e. after 'z' you go back to 'a')
'r' jumps 19 place forward and becomes 'k'.
'l' jumps 9 place forward and becomes 'u'.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $word = 'Raku' and @jump = (24,4,7,17)
Output: 'Perl'
</code></pre>

<h3>Jumping Letters in Raku</h3>

<p>The <a href="https://docs.raku.org/routine/ord.html">ord</a> routine translates a letter into its ASCII code (well, really, it&#8217;s a Unicode code point, but it is equivalent for our purpose here with values less than 128). The <a href="https://docs.raku.org/routine/chr.html">chr</a> performs the inverse operation. So we can simply convert each letter of the input, add the relevant jump value and convert the result back to a letter. One little complication is that we need to subtract 26 from the code point if it gets beyond the upper case and lower case letter ranges after having added the jump value. </p>

<pre><code>sub jump-letter ($letter, $val) {
    my $new_ascii = $letter.ord + $val;
    return ($new_ascii - 26).chr if $new_ascii &gt; 'z'.ord;
    return ($new_ascii - 26).chr if $letter le 'Z'
        and $new_ascii &gt; 'Z'.ord;
    return $new_ascii.chr;
}
my @test = "Perl", &lt;2 22 19 9&gt;;
for ("Perl", &lt;2 22 19 9&gt;), ("Raku", &lt;24 4 7 17&gt;) -&gt; @test {
    printf "%-10s =&gt; ", "@test[0]";
    for @test[0].comb Z @test[1].Array -&gt; $a {
        print jump-letter $a[0], $a[1];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./jumping-letters.raku
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h3>Jumping Letters in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the previous section if you need some explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub jump_letter  {
    my ($letter, $val) = @_;
    my $new_ascii = ord($letter) + $val;
    return chr($new_ascii - 26) if $new_ascii &gt; ord 'z';
    return chr($new_ascii - 26) if $letter le 'Z'
        and $new_ascii &gt; ord 'Z';
    return chr $new_ascii;
}

for my $test (["Perl", [&lt;2 22 19 9&gt;]], ["Raku", [&lt;24 4 7 17&gt;]]) {
    printf "%-10s =&gt; ", "$test-&gt;[0]";
    my @letters = split //, $test-&gt;[0];
    for my $i (0..$#letters) {
        print jump_letter $letters[$i], $test-&gt;[1][$i];
    }
    say " ";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./jumping-letters.pl
Perl       =&gt; Raku
Raku       =&gt; Perl
</code></pre>

<h2>Task 2: Rearrange Groups</h2>

<p><em>You are given a list of integers and group size greater than zero.</em></p>

<p><em>Write a script to split the list into equal groups of the given size where integers are in sequential order. If it can’t be done then print -1.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1,2,3,5,1,2,7,6,3) and $size = 3
Output: (1,2,3), (1,2,3), (5,6,7)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1,2,3) and $size = 2
Output: -1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (1,2,4,3,5,3) and $size = 2
Output: (1,2,3), (3,4,5)
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: @list = (1,5,2,6,4,7) and $size = 3
Output: -1
</code></pre>

<p>First, I think that example 3 above is wrong. I believe that <code>size</code> should probably be 3 for the example to make sense.</p>

<p>Second, even though I started working on this second task (and think I probably have a working solution in Raku), I have no time today to complete this task, and probably won&#8217;t have time for several days. I still wanted to make my solutions to task 1 available today. I&#8217;ll hopefully write a new blog post or update this one later on.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 23, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/59263afd09be08ea9299818aa68c778e7fb40402</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/59263afd09be08ea9299818aa68c778e7fb40402"/>
    <title>
        Porting/epigraphs - Add epigraph for 5.36.1-RC1
    </title>
    <updated>2023-04-10T20:24:50Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Porting/epigraphs - Add epigraph for 5.36.1-RC1&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/0e8942e97021daa08b2da0883ca27ccfe0f55733</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/0e8942e97021daa08b2da0883ca27ccfe0f55733"/>
    <title>
        5.36.1-RC1 today
    </title>
    <updated>2023-04-10T19:00:31Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/2174531?s=30&amp;v=4"/>
    <author>
      <name>steve-m-hay</name>
      <uri>https://github.com/steve-m-hay</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;5.36.1-RC1 today&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/oalders</name>
      <uri>https://www.reddit.com/user/oalders</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/12hkceg/perl_weekly_issue_611_test_coverage_on_cpan_digger/"&gt; &lt;img src="https://external-preview.redd.it/zOGtkObbP9xZ1Cst3eDSUcvIdrEQ8L7uE4G7KPc9XsQ.jpg?width=320&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=9fa43038fc9b13ebd218d1491ffd87911386c561" alt="Perl Weekly Issue #611 - Test coverage on CPAN Digger" title="Perl Weekly Issue #611 - Test coverage on CPAN Digger" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/oalders"&gt; /u/oalders &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://perlweekly.com/archive/611.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12hkceg/perl_weekly_issue_611_test_coverage_on_cpan_digger/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_12hkceg</id>
    <media:thumbnail url="https://external-preview.redd.it/zOGtkObbP9xZ1Cst3eDSUcvIdrEQ8L7uE4G7KPc9XsQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=9fa43038fc9b13ebd218d1491ffd87911386c561"/>
    <link href="https://www.reddit.com/r/perl/comments/12hkceg/perl_weekly_issue_611_test_coverage_on_cpan_digger/"/>
    <updated>2023-04-10T14:24:15+00:00</updated>
    <published>2023-04-10T14:24:15+00:00</published>
    <title>Perl Weekly Issue #611 - Test coverage on CPAN Digger</title>
  </entry>
  <entry>
    <title>Perl Weekly #611 - Test coverage on CPAN Digger</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-611-test-coverage-on-cpan-digger-53el" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/611.html"&gt;Perl Weekly 611&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Happy Easter and Happy Passover!&lt;/p&gt;

&lt;p&gt;In Hungary Easter Monday is the time to go out and &lt;a href="https://medium.com/globetrotters/the-curious-tradition-of-sprinkling-women-so-they-can-grow-5b3e69e0d30d"&gt;sprinkle women with water&lt;/a&gt;. Back when I grew up I was not aware that it is in order so they can grow, but whatever. Nor did I know that it was a pre-Christian (aka. Pagan) tradition.&lt;/p&gt;

&lt;p&gt;Celebrating Passover, among other things, requires cleaning your house, your car, your office. This is what turned into the big spring cleaning tradition in many parts of the world. I cleaned my &lt;a href="https://github.com/notifications"&gt;GitHub notifications&lt;/a&gt;. I had some 600 entries there. Luckily most of them were just updates and did not require any action from me.&lt;/p&gt;

&lt;p&gt;During the last week I spent way too much time on sending pull-requests to CPAN modules, but I also got around to improve the &lt;a href="https://cpan-digger.perlmaven.com/"&gt;CPAN::Digger&lt;/a&gt;. It does not store the generated html files in the git repository any more and it now includes the test coverage numbers from &lt;a href="http://cpancover.com/"&gt;CPANCover&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It makes it easy to find a CPAN package that needs contributors to increase the test coverage. I also believe that in most cases the author of a package that was recently released (and thus appear on the CPAN Digger) will more likely be active on the package and thus more likely to accept your contribution.&lt;/p&gt;

&lt;p&gt;I recently saw a post asking &lt;a href="https://dev.to/bekahhw/why-arent-you-contributing-to-open-source-3nk8"&gt;Why aren’t you contributing to open source?&lt;/a&gt; There were a number of interesting answers, but the top most one was focusing way more on 'releasing your own open source', while I think there is a huge open field &lt;b&gt;contributing to an existing open source project&lt;/b&gt; without the burden of maintaining it.&lt;/p&gt;

&lt;p&gt;Another comment talked about the difficulty with the agreements one needs to sign on the big, corporation-created projects, such as React. Actually only a very small fraction of open source projects are from corporations and only a very small fraction requires any signed agreements. Avoid those. Pick one that does not require any such agreement. Pick one that is not a huge, well known project.&lt;/p&gt;

&lt;p&gt;Enjoy your week!&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Gabor Szabo.&lt;/p&gt;

&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/dimitrios_kechagias/2023/03/weatherweatherkit-and-weatherastro7timer.html"&gt;Weather::WeatherKit and Weather::Astro7Timer&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/tobyink/increasing-perls-visibility-redux-17g6"&gt;Increasing Perl’s Visibility, Redux&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;How to easily create a web-site for your CPAN distribution.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/dkechag/replacing-the-dark-sky-weather-api-weatherkit-7timer-and-more-3o"&gt;Replacing the Dark Sky weather API: WeatherKit, 7Timer and other free APIs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A bunch of interesting Perl modules.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/j1/2023/04/reinvent-the-rest.html"&gt;Reinvent the REST&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;What an MVP for a REST API would look like using Catalyst.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/austin_62/crash-city-2ebd"&gt;Crash City&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Analyzing NYC Traffic Collision Data on the Linux Command Line with SoQL and Curl&lt;/p&gt;




&lt;h2&gt;
  
  
  CPAN
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/04/webscraper---weekly-travelling-in-cpan.html"&gt;Web::Scraper - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As its name say, it is for scraping the web. Most recent release almost 10 years ago, but apparently still working well.&lt;/p&gt;




&lt;h2&gt;
  
  
  Perl
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-103.html"&gt;This week in PSC (103)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Paul, Philippe, and Ricardo had our mostly-weekly Zoom call.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-212"&gt;The Weekly Challenge - 212&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks "Jumping Letters" and "Rearrange Groups". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-211"&gt;RECAP - The Weekly Challenge - 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Toeplitz Matrix" and "Split Same Average" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/same-toeplitz.html"&gt;The Same Toeplitz&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Diagram made it so simple to follow the logic. Great work, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/boblied/pwc-211-2-geared-to-the-average-rather-than-the-exceptional-2hcg"&gt;Geared toward the average rather than the exceptional&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Dealing with the maths behind the task is clever move. Very smart approach, well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/06/pwc211-toepliz-matrix/"&gt;PWC211 - Toepliz Matrix&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice trick to deal with matrix, very smart. The end result is so easy to follow. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/07/pwc211-split-same-average/"&gt;PWC211 - Split Same Average&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Too much maths involved in the discussion. However it does take the complexity away. Cool.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/04/perl_weekly_challenge_week_211.html"&gt;Perl Weekly Challenge: Week 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Line-by-line code commentary is the best part of the blog. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-211/james-smith#readme"&gt;The Weekly Challenge 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;High performance solution is the forte of James. You must check out.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-211-toeplitz-matrix-and-split-same-average.html"&gt;Perl Weekly Challenge 211: Toeplitz Matrix and Split Same Average&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Back to blogging after the break (one week only). We missed you so much. Thanks for sharing your knowledge.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/04/03/PWC211/"&gt;Perl Weekly Challenge 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lots of Perl magic in the solution, just love it. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/211"&gt;Striped arrays and balanced splits&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Well documented with examples as always. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/04/robbie-hatleys-perl-solutions-to-weekly.html"&gt;The Weekly Challenge #211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Short and sweet discussion of the issues and solutions. Love it. Keep it going.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/04/The_Weekly_Challenge_211__Splitting_Toeplitz.html"&gt;Perl and Raku being the choice of language for the blog this week. Enjoy the discussion.&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/weekly-challenge-211-1np1"&gt;Weekly Challenge 211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice use of CPAN module to get the job done. Well done.&lt;/p&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxxxix-11-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dli-metacpan-weekly-report-expect.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dlxxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/hss"&gt;Perl to Node Cross-training? Yes Please! UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our client is looking for Perl developers, Node engineers, and those with stellar Python and SQL skills. They embrace flexibility, and their ideal candidate will, too. Perl may be your core competency, but if you’re interested in cross-training to Node, you may be the full package that this client wants on their team.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/65c"&gt;Bold, beautiful, and… brainy? Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our client provides online trading services and with offices in Dubai, Malta, and Malaysia, they’ve got the global reach that may provide the challenge you’re looking for. They know that a seasoned Perl pro is just what their team needs as they expand, and that’s where you come in. They’ve got a work-sponsored visa and relocation package to get you where you need to be.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/pdy"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-611-test-coverage-on-cpan-digger-53el</id>
    <published>2023-04-10T06:54:03Z</published>
    <updated>2023-04-10T06:54:03Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #211</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-211.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11072</id>
    <published>2023-04-10T03:56:42Z</published>
    <updated>2023-04-10T04:18:09Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlweeklychallengepracticechallenge" label="#perlweeklychallenge #practice #challenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>A couple <em>very very</em> last-minute solutions to the Weekly Challenge #211. I was crammed for time, so I didn't get to these until the last minute.</p>

<h3>Challenge #1</h3>

<p>For challenge number 1 I had an idea of the method I would use, but since I've been experimenting with it anyway, I asked ChatGPT for its ideas as well. Because of my lack of time, I wanted to get some help with the design process. ChatGPT is amazing at both developing and describing an algorithm in simple terms to make it understandable. I based my solution somewhat off the AI's algorithm, but I did write it entirely by hand. It's pretty simple, it just iterates across the matrix and makes sure everything matches its diagonal neighbor prior to it.</p>

<p>Another thing you might notice this week is that I actually put my solutions into functions, not just a basic script. Anyways, here it is:</p>

<pre><code>#!/bin/perl

use strict;
use v5.28;

my @matrix1 = (
    [4, 3, 2, 1],
    [5, 4, 3, 2],
    [6, 5, 4, 3],
);

my @matrix2 = ([1, 2, 3], [3, 2, 1]);

say 'Is Matrix1 a Toeplitz matrix? : ' . (is_toeplitz(@matrix1) ? 'TRUE' : 'FALSE');
say 'Is Matrix2 a Toeplitz matrix? : ' . (is_toeplitz(@matrix2) ? 'TRUE' : 'FALSE');

sub is_toeplitz {
    my @matrix = @_;

    my $rows = scalar @matrix;
    my $cols = scalar @{$matrix[0]};

    for (my $r = 1; $r &lt; $rows; $r++) {
        for (my $c = 1; $c &lt; $cols; $c++) {
            if ($matrix[$r][$c] != $matrix[$r - 1][$c - 1]) {return 0;}
        }
    }
    return 1;
}
</code></pre>

<h3>Challenge #2</h3>

<p>For the second challenge, I had no idea of the algorithm to use, so I did some more research on it and found an algorithm to achieve the result. This sorts the numbers, adds the largest ones first, then adds alternating ends to each list to bring the average together. Interestingly, once both arrays match, it continues adding to the first array, so the solution that it finds to the first example is to put 1, 3, 4, 5, 6, and 8 all in the first array and only 2 and 7 in the second. It still works well and is a single pass, so it is quite efficient.</p>

<pre><code>#!/bin/perl

use strict;
use v5.28;

use List::Util 'sum';

if ($#ARGV &gt; 0) {can_split(@ARGV) ? say 'true' : say 'false'};

sub can_split {
    my @nums = sort {$b &lt;=&gt; $a} (@_);
    my $maxindex = scalar @nums;
    my $avg = sum(@nums) / scalar(@nums);
    my (@list1, @list2, $sum1, $sum2);

    for (my $i = 0; $i &lt; $maxindex; $i++) {
        if (scalar @list1 == 0) {
            push @list1, @nums[0];
            $sum1 += @nums[0];
            splice @nums, 0, 1;
        } elsif (scalar @list2 == 0) {
            push @list2, @nums[0];
            $sum2 += @nums[0];
            splice @nums, 0, 1;
        } else {
            if (abs(($sum1 / @list1) - $avg) &gt;= abs(($sum2 / @list2) - $avg)) {
                if ($sum1 / @list1 &lt;= $avg) {
                    push @list1, @nums[0];
                    $sum1 += @nums[0];
                    splice @nums, 0, 1;
                } else {
                    push @list1, @nums[$#nums];
                    $sum1 += @nums[$#nums];
                    splice @nums, $#nums, 1;
                }
            } else {
                if ($sum2 / @list2 &lt;= $avg) {
                    push @list2, @nums[0];
                    $sum2 += @nums[0];
                    splice @nums, 0, 1;
                } else {
                    push @list2, @nums[$#nums];
                    $sum2 += @nums[$#nums];
                    splice @nums, $#nums, 1;
                }
            }
        }
    }
    $sum1 / scalar @list1 == $sum2 / scalar @list2 ? return 1 : return 0;

}
</code></pre>

<p>That's all for this week! If I have time I'll see you all next week with more solutions!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 211: Toeplitz Matrix and Split Same Average</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-211-toeplitz-matrix-and-split-same-average.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11071</id>
    <published>2023-04-10T03:56:18Z</published>
    <updated>2023-04-10T04:12:01Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 211 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-211/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Toeplitz Matrix</h2>

<p><em>You are given a matrix <code>m x n</code>.</em></p>

<p><em>Write a script to find out if the given matrix is Toeplitz Matrix.</em></p>

<blockquote>
  <p><em>A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input: @matrix = [ [4, 3, 2, 1],
                   [5, 4, 3, 2],
                   [6, 5, 4, 3],
                 ]
Output: true
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @matrix = [ [1, 2, 3],
                   [3, 2, 1],
                 ]
Output: false
</code></pre>

<p>One way to do that is to find if any item of the matrix has the same value as the item immediately above and immediately left. We return <code>False</code> for any case where this is not the case, and <code>True</code> if we get to the end of the loop.</p>

<h3>Toeplitz Matrix in Raku</h3>

<p>The implementation is fairly straight forward:</p>

<pre><code>sub is-toeplitz (@in) {
    for 1..@in.end -&gt; $i {
        for 1..@in[0].end -&gt; $j {
            # say "$i $j @in[$i][$j] @in[$i-1][$j-1]";
            return False if @in[$i][$j] != @in[$i-1][$j-1];
        }
    }
    return True;
}


for ( &lt;4 3 2 1&gt;, &lt;5 4 3 2&gt;, &lt;6 5 4 3&gt; ), 
    ( &lt;3 2 1 0&gt;, &lt;4 3 2 1&gt;, &lt;5 4 3 2&gt; ),
    ( &lt;3 2 1 0&gt;, &lt;4 3 2 1&gt;, &lt;5 5 3 2&gt; ),
    ( &lt;1 2 3&gt;, &lt;3 2 1&gt; ) -&gt; @test {
    say @test;
    say is-toeplitz(@test), "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./toeplitz-matrix.raku
((4 3 2 1) (5 4 3 2) (6 5 4 3))
True

((3 2 1 0) (4 3 2 1) (5 4 3 2))
True

((3 2 1 0) (4 3 2 1) (5 5 3 2))
False

((1 2 3) (3 2 1))
False
</code></pre>

<h3>Toeplitz Matrix in Perl</h3>

<p>This is a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_toeplitz {
    my @in = @_;
    my $j_max = scalar @{$in[0]} - 1;
    for my $i (1..$#in) {
        for my $j (1..$j_max) {
            # say "$i $j $in[$i][$j] $in[$i-1][$j-1]";
            return "false" if $in[$i][$j] != $in[$i-1][$j-1];
        }
    }
    return "true";
}

for my $test 
    ( [ [&lt;4 3 2 1&gt;], [&lt;5 4 3 2&gt;], [&lt;6 5 4 3&gt;] ], 
      [ [&lt;3 2 1 0&gt;], [&lt;4 3 2 1&gt;], [&lt;5 4 3 2&gt;] ],
      [ [&lt;3 2 1 0&gt;], [&lt;4 3 2 1&gt;], [&lt;5 5 3 2&gt;] ],
      [ [&lt;1 2 3&gt;], [&lt;3 2 1&gt;] ] ) {
    say "[ ", (join ", ", map "[@$_]", @$test), " ]";
    say is_toeplitz(@$test), "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./toeplitz-matrix.pl
[ [4 3 2 1], [5 4 3 2], [6 5 4 3] ]
true

[ [3 2 1 0], [4 3 2 1], [5 4 3 2] ]
true

[ [3 2 1 0], [4 3 2 1], [5 5 3 2] ]
false

[ [1 2 3], [3 2 1] ]
false
</code></pre>

<h2>Task 2: Split Same Average</h2>

<p><em>You are given an array of integers.</em></p>

<p><em>Write a script to find out if the given can be split into two separate arrays whose average are the same.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @nums = (1, 2, 3, 4, 5, 6, 7, 8)
Output: true

We can split the given array into (1, 4, 5, 8) and (2, 3, 6, 7).
The average of the two arrays are the same i.e. 4.5.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (1, 3)
Output: false
</code></pre>

<p>Let us notice that each sub-array should have the same average as the full array&#8217;s average. So, we simply need to find a sub-array that has the same average, the other sub-array is bound to have the same average.</p>

<p>An additional comment is that there can be several solutions. In the case of the <code>(1, 2, 3, 4, 5, 6, 7, 8)</code> array, we find solution not the same as the one in the task specification, i.e.  <code>[(1 2 3 6 7 8) (4 5)]</code>, but it is also a correct solution to the task, as both arrays have an average of 4.5.</p>

<h3>Split Same Average in Raku</h3>

<pre><code>sub avg (@a) { return ([+] @a) / @a.elems; }

sub find-partition (@current, @left) {
    return if @left.elems &lt;= 1;
    # say "Current: ", avg @current if @current.elems &gt; 0;
    if @current.elems &gt; 0 and $*target == avg @current  {
        push @*result, @current;
        return;
    }
    for 0..@left.end -&gt; $i {
        find-partition( (@current, @left[$i]).flat, 
            (@left[0..$i-1, $i+1..@left.end]).flat);
        return if @*result.elems &gt; 0;
    }
}

sub start-partition (@in) {
    my $*target = avg @in;
    my @*result;
    my @current;
    find-partition @current, @in;
    return @*result;
}

for &lt;1 2 3 4 5 6 7 8&gt;, &lt;1 2 3&gt;, &lt;1 3&gt; -&gt; @test {
    my @output = start-partition @test;
    print @test, " =&gt; ";
    if @output.elems == 0 {
        say "false";
    } else {
        print "true : ";
        push @output, (@test (-) @output[0]).keys;
        say @output;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku  ./split-same-avg.raku
1 2 3 4 5 6 7 8 =&gt; true : [(1 2 3 6 7 8) (4 5)]
1 2 3 =&gt; true : [(2) (1 3)]
1 3 =&gt; false
</code></pre>

<h3>Split Same Average in Perl</h3>

<pre><code>use strict;
use warnings;
use feature "say";

my ($target, @result);

sub avg {
    my $nb_elems = scalar @_;
    my $sum = shift;
    $sum += $_ for @_;
    return $sum / $nb_elems;
}

sub find_partition {
    my @current = @{$_[0]};
    my @left = @{$_[1]};
    return if scalar @left &lt;= 1;
    if (scalar @current &gt; 0 and $target == avg(@current)) {
        push @result, @current;
        return;
    }
    for my $i (0..$#left) {
        find_partition( [@current, $left[$i]], [@left[0..$i-1, $i+1..$#left]]);
        return if @result &gt; 0;
    }
}

sub start_partition {
    my @in = @_;
    $target = avg @in;
    @result = ();
    my @current;
    find_partition [@current], [@in];
    return @result;
}

for my $test ([&lt;1 2 3 4 5 6 7 8&gt;], [&lt;1 2 3&gt;], [&lt;1 3&gt;]) {
    my @output = start_partition @$test;
    print "@$test =&gt; ";
    if (scalar @output == 0) {
        say "false";
    } else {
        print "true : [@output] ";
        my %out = map { $_ =&gt; 1 } @output;
        say "[", join " ", grep { not exists $out{$_} } @$test, "]";
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./split-same-avg.pl
1 2 3 4 5 6 7 8 =&gt; true : [1 2 3 6 7 8] [4 5 ]
1 2 3 =&gt; true : [2] [1 3 ]
1 3 =&gt; false
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 16, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Rearviewmirror on Kasai!</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/10/rearviewmirror-on-kasai/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I took a look back at an old project, described in <a href="/ETOOBUSY/2019/12/29/kasai/">Kasai!</a>.</p>
</blockquote>

<p>I remember when a lot of my time was spent over re-creating a prototype for
old hand-held games from my childhood. What I didn’t remember until a few
minutes ago was that it more or less happened in coincidence with my
resolution to write one post per day back at the end of 2019.</p>

<p>It does not surprise me: I was probably looking for something <em>different</em> to
do after proving myself that I could put up a workable prototype.</p>

<p>I can, anyway, provide some of the then sought feedback to the past me,
which I hope will be sufficiently constructive.</p>

<ol>
  <li>
    <p>Dumping <em>a lot</em> of code without even a <code class="language-plaintext highlighter-rouge">README.md</code> in the repository is
the best way to get something ignored and higly disrespectful of whoever
you could happen to be talking to. Pile on with a systematic (systemic?)
lack of documentation and we’re set up for failure. <strong>Admittedly</strong>, I can
think that the blog post served the role of the <code class="language-plaintext highlighter-rouge">README.md</code> and that the
lack of documentation for the code does no harm to people who just want
to try out the game.</p>
  </li>
  <li>
    <p>The timing approach seems <em>weird</em> and needs some reworking. When the game
speeds up, so does the pause after a miss and I sort of remember that
this was not the experience at the time (like two beeps, the savers
flashing together with the missed person). Also, acceleration through the
game might be smoother.</p>
  </li>
  <li>
    <p>There does not seem to be any mechanism to get lives back, which seems to
go against memory.</p>
  </li>
  <li>
    <p>Overall I enjoyed playing the game again, though, so it’s a nice
prototype. I would like to see different combinations, as well as games
of <em>type B</em> (together with people going down from the lower floor too).</p>
  </li>
</ol>

<p>There you go, past me! Well… I guess that in lack of past me, I’ll have to
read and use this beautiful feedback… or ignore it for another three
years and some.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/10/rearviewmirror-on-kasai/</id>
    <published>2023-04-10T06:00:00+02:00</published>
    <updated>2023-04-10T06:00:00+02:00</updated>
    <category term="perl"/>
    <category term="game"/>
    <category term="handheld"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #211</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-211-46f1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A couple <em>very very</em> last-minute solutions to the Weekly Challenge #211. I was crammed for time, so I didn't get to these until the last minute. Amusingly, I got the PR submitted 2 minutes before the deadline.</p>

<h3>
  
  
  Challenge #1
</h3>

<p>For challenge number 1 I had an idea of the method I would use, but since I've been experimenting with it anyway, I asked ChatGPT for its ideas as well. Because of my lack of time, I wanted to get some help with the design process. ChatGPT is amazing at both developing and describing an algorithm in simple terms to make it understandable. I based my solution somewhat off the AI's algorithm, but I did write it entirely by hand. It's pretty simple, it just iterates across the matrix and makes sure everything matches its diagonal neighbor prior to it.</p>

<p>Another thing you might notice this week is that I actually put my solutions into functions, not just a basic script. Anyways, here it is:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/bin/perl

use strict;
use v5.28;

my @matrix1 = (
    [4, 3, 2, 1],
    [5, 4, 3, 2],
    [6, 5, 4, 3],
);

my @matrix2 = ([1, 2, 3], [3, 2, 1]);

say 'Is Matrix1 a Toeplitz matrix? : ' . (is_toeplitz(@matrix1) ? 'TRUE' : 'FALSE');
say 'Is Matrix2 a Toeplitz matrix? : ' . (is_toeplitz(@matrix2) ? 'TRUE' : 'FALSE');

sub is_toeplitz {
    my @matrix = @_;

    my $rows = scalar @matrix;
    my $cols = scalar @{$matrix[0]};

    for (my $r = 1; $r &lt; $rows; $r++) {
        for (my $c = 1; $c &lt; $cols; $c++) {
            if ($matrix[$r][$c] != $matrix[$r - 1][$c - 1]) {return 0;}
        }
    }
    return 1;
}
</code></pre>

</div>
<h3>
  
  
  Challenge #2
</h3>

<p>For the second challenge, I had no idea of the algorithm to use, so I did some more research on it and found an algorithm to achieve the result. This sorts the numbers, adds the largest ones first, then adds alternating ends to each list to bring the average together. Interestingly, once both arrays match, it continues adding to the first array, so the solution that it finds to the first example is to put 1, 3, 4, 5, 6, and 8 all in the first array and only 2 and 7 in the second. It still works well and is a single pass, so it is quite efficient.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/bin/perl

use strict;
use v5.28;

use List::Util 'sum';

if ($#ARGV &gt; 0) {can_split(@ARGV) ? say 'true' : say 'false'};

sub can_split {
    my @nums = sort {$b &lt;=&gt; $a} (@_);
    my $maxindex = scalar @nums;
    my $avg = sum(@nums) / scalar(@nums);
    my (@list1, @list2, $sum1, $sum2);

    for (my $i = 0; $i &lt; $maxindex; $i++) {
        if (scalar @list1 == 0) {
            push @list1, @nums[0];
            $sum1 += @nums[0];
            splice @nums, 0, 1;
        } elsif (scalar @list2 == 0) {
            push @list2, @nums[0];
            $sum2 += @nums[0];
            splice @nums, 0, 1;
        } else {
            if (abs(($sum1 / @list1) - $avg) &gt;= abs(($sum2 / @list2) - $avg)) {
                if ($sum1 / @list1 &lt;= $avg) {
                    push @list1, @nums[0];
                    $sum1 += @nums[0];
                    splice @nums, 0, 1;
                } else {
                    push @list1, @nums[$#nums];
                    $sum1 += @nums[$#nums];
                    splice @nums, $#nums, 1;
                }
            } else {
                if ($sum2 / @list2 &lt;= $avg) {
                    push @list2, @nums[0];
                    $sum2 += @nums[0];
                    splice @nums, 0, 1;
                } else {
                    push @list2, @nums[$#nums];
                    $sum2 += @nums[$#nums];
                    splice @nums, $#nums, 1;
                }
            }
        }
    }
    $sum1 / scalar @list1 == $sum2 / scalar @list2 ? return 1 : return 0;

}
</code></pre>

</div>

<p>That's all for this week! If I have time I'll see you all next week with more solutions!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-211-46f1</id>
    <published>2023-04-09T23:19:22Z</published>
    <updated>2023-04-09T23:19:22Z</updated>
    <category term="perl"/>
    <category term="perlweeklychalleng"/>
    <category term="toeplitz"/>
    <category term="average"/>
  </entry>
  <entry>
    <title>PWC 211 #2 Geared toward the average rather than the exceptional</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-211-2-geared-to-the-average-rather-than-the-exceptional-2hcg" type="text/html"/>
    <content type="html">&lt;p&gt;Task 2 of the &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/#TASK2"&gt;Perl Weekly Challenge&lt;/a&gt; is a problem that benefits from analysis before opening the editor.  The statement sounds easy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given an array of integers. Write a script to find&lt;br&gt;
out if the given array can be split into two separate arrays&lt;br&gt;
whose average are the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My mind immediately starts thinking about combinations of &lt;em&gt;n&lt;/em&gt; things taken &lt;em&gt;k&lt;/em&gt; at a time, the efficiency of calculating sums and averages. The factorials involved in that are going to blow up for anything bigger than the small lists given as examples, and there's potential nastiness in comparing floating point values, which these averages are likely to be.&lt;/p&gt;

&lt;h2&gt;
  
  
  "Mr. Miller, are we ever going to use algebra in real life?"
&lt;/h2&gt;

&lt;p&gt;So let's start with some math.  We have a list of length &lt;em&gt;N&lt;/em&gt;.  Let's call the sum of the numbers in that list &lt;em&gt;S&lt;/em&gt;.  Now we want to partition the list into two subsets; let's say they have sizes &lt;em&gt;Na&lt;/em&gt; and &lt;em&gt;Nb&lt;/em&gt;, and the sum of each subset is &lt;em&gt;Sa&lt;/em&gt; and &lt;em&gt;Sb&lt;/em&gt;.  Clearly &lt;em&gt;N&lt;/em&gt; = &lt;em&gt;Na&lt;/em&gt; + &lt;em&gt;Nb&lt;/em&gt; and &lt;em&gt;S&lt;/em&gt; = &lt;em&gt;Sa&lt;/em&gt; + &lt;em&gt;Sb&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The condition we're aiming for is that both subsets have the same average: &lt;em&gt;Sa&lt;/em&gt;/&lt;em&gt;Na&lt;/em&gt; = &lt;em&gt;Sb&lt;/em&gt;/&lt;em&gt;Nb&lt;/em&gt;.  Starting with that and substituting for &lt;em&gt;Sb&lt;/em&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sa/Na = Sb/Nb&lt;br&gt;
Sa/Na = (S - Sa)/Nb&lt;br&gt;
Sa × Nb = (S - Sa) × Na = S×Na - Sa×Na&lt;br&gt;
Sa×Na + Sa×Nb = S×Na&lt;br&gt;
Sa×(Na + Nb) = S × Na&lt;br&gt;
Sa × N = S × Na&lt;br&gt;
Sa/Na = S/N&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if there is any solution that makes &lt;em&gt;Sa&lt;/em&gt;/&lt;em&gt;Na&lt;/em&gt; = &lt;em&gt;Sb&lt;/em&gt;/&lt;em&gt;Nb&lt;/em&gt; true, then at least one of the solutions must be that each of the subsets has the same average as the overall average. We could similarly reach &lt;em&gt;Sb&lt;/em&gt;/&lt;em&gt;Nb&lt;/em&gt; = &lt;em&gt;S&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt; if we start by substituting (&lt;em&gt;S&lt;/em&gt;-&lt;em&gt;Sb&lt;/em&gt;) for &lt;em&gt;Sa&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;So what does this buy us?  First of all, it gives us an easy way to test for a solution:  if any subset has an average that's the same as &lt;em&gt;S&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt;, we can stop. We don't even have to check the average of the complementary set.  If the first subset has sum &lt;em&gt;Sa&lt;/em&gt;, count &lt;em&gt;Na&lt;/em&gt;, and average &lt;em&gt;S&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt;, then the other partition must also have average &lt;em&gt;S&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sa/Na = S/N&lt;br&gt;
(S-Sb)/(N-Nb) = S/N&lt;br&gt;
N×(S-Sb) = S×(N-Nb)&lt;br&gt;
S×N - Sb×N = S×N - S×Nb&lt;br&gt;
Sb×N = S×Nb&lt;br&gt;
Sb/Nb = S/N&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Furthermore, instead of having to find every possible subset, which would be 2&lt;sup&gt;N&lt;/sup&gt; possibilities, we only have to look at subsets up to size &lt;code&gt;floor(N/2)&lt;/code&gt;, which is a huge reduction in operation count.&lt;/p&gt;

&lt;p&gt;There's another helpful thing that results from this. The average number that we're testing for is likely to be a floating point value.  We don't really want to test for equality of floating point numbers; the road to hell is paved with floating point comparisons.&lt;/p&gt;

&lt;p&gt;Knowing that we are looking for &lt;em&gt;S&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt; = &lt;em&gt;Sa&lt;/em&gt;/&lt;em&gt;Na&lt;/em&gt;, it must be true that &lt;em&gt;Sa&lt;/em&gt; = (&lt;em&gt;S&lt;/em&gt;×&lt;em&gt;Na&lt;/em&gt;)/&lt;em&gt;N&lt;/em&gt;; and since &lt;em&gt;Sa&lt;/em&gt; must be an integer (since all the terms in the sum are integers), it must be true that (&lt;em&gt;S&lt;/em&gt;×&lt;em&gt;Na&lt;/em&gt;) % &lt;em&gt;N&lt;/em&gt; = 0. We can quickly check for any size &lt;em&gt;Na&lt;/em&gt; whether that is even possible by looking at &lt;em&gt;S&lt;/em&gt;×&lt;em&gt;Na&lt;/em&gt;%&lt;em&gt;N&lt;/em&gt;, and we can quickly calculate &lt;em&gt;Sa&lt;/em&gt; without iterating over the array by evaluating &lt;em&gt;S&lt;/em&gt;×&lt;em&gt;Na&lt;/em&gt;/&lt;em&gt;N&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; we can start thinking about &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-211/bob-lied/perl/ch-2.pl"&gt;code.&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;[*] The title comes from the 1972 album "Thick as a Brick", by Jethro Tull.  The album came with a fake newspaper attached, containing humorous fake articles that the music referenced. One of the articles was about education reform that would be "geared toward the average rather than the exceptional" so that it would "relieve the crushing burden of individual aspiration.” &lt;/p&gt;

</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-211-2-geared-to-the-average-rather-than-the-exceptional-2hcg</id>
    <published>2023-04-09T22:49:42Z</published>
    <updated>2023-04-09T22:49:42Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="pwc"/>
  </entry>
  <entry>
    <title>LibreSprite</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/09/libresprite/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p><a href="https://libresprite.github.io/">LibreSprite</a> is useful for drawing pixel art, like icons/avatars/etc.</p>
</blockquote>

<p>From the website:</p>

<blockquote>
  <p>LibreSprite is a free and open source program for creating and animating
your sprites.</p>
</blockquote>

<p>So well, it’s a bit <em>more</em> than just drawing pixel art, because it supports
animation easily as well, but we still have to start drawing the first
screen, right?</p>

<p>As a total novice in the field, and an easily distracted one, I found out
about <a href="https://libresprite.github.io/">LibreSprite</a> by means of this video: <a href="https://www.youtube.com/watch?v=SBmeEQOh20A">The Best FREE Software for
Game Development! (In my Opinion)</a>.</p>

<p>I installed it in Windows in a pretty big resolution screen, and I
immediately stumbled upon a bump because the program looked <em>tiny</em>.</p>

<p>I thought it had to do with some scaling in high-DPI screens and tried to
move a couple of knobs in the windows preferences for the executable, but to
no avail. Then I tried to search the internet - guess what? To no avail.</p>

<p>Then I tried to see if it has something <em>inside</em> the program to help us, and
<em>presto!</em> It has a useful <code class="language-plaintext highlighter-rouge">Edit</code>/<code class="language-plaintext highlighter-rouge">Preferences...</code>/<code class="language-plaintext highlighter-rouge">General</code> section with
<strong>two</strong> ways to tweak the appearance like this:</p>

<p><img src="/ETOOBUSY/assets/images/libresprite-scaling.png" alt="Scaling in LibreSprite has two separate magnification options"/></p>

<p>My next hurdle was figuring out how to <em>zoom out</em>. It turned out to be quite
embarassing, to be honest: when the magnifier tool is selected (with <code class="language-plaintext highlighter-rouge">Z</code>),
the left button zooms in, while the right button zooms out. To be honest,
I’d much more prefer to have keyboard shortcuts for these two operations,
like we have e.g. in <a href="https://www.gimp.org/">GIMP</a>. Maybe it’s just something I still have to
find anyway.</p>

<p>I suffered a bit the checked background, so I wanted to disable it. It seems
that there’s no option to <em>directly</em> do this; I resorted to setting the same
color for both square positions and call it a day.</p>

<p>The animation world is new to me so I might suffer from inexperience, but
I would have liked to see the possibility to move frames around in a few
more places (e.g. in the contextual menus). I was about to abandon the
moving of a frame, when my mouse went <em>exactly</em> over the few pixels that
allow to do this movement with drag and drop. You first have to select the
frame, then place the mouse in the line between the frame number and
whatever it has under it, like in the screenshot below:</p>

<p><img src="/ETOOBUSY/assets/images/libresprite-move-frame.png" alt="The spot for moving a frame"/></p>

<p>There are a couple of glitches here and there, but nothing that prevented me
from doing an awful yet satisfying little animated GIF <img src="/ETOOBUSY/assets/images/libresprite-test.gif" alt="Terrible animation, yet it's mine!"/></p>

<p>I was a bit dubious (/curious) about the lack for support of animated PNG
(APNG) format though, nor I seem to find out anything about it around. It
seems that the latest version of <a href="https://imagemagick.org/index.php">ImageMagick</a> can do the conversion,
although the resulting image <img src="/ETOOBUSY/assets/images/libresprite-test.apng" alt="Terrible animation as an APNG file"/> is a
whopping 10x+ with respect to the starting GIF file, which does not seem to
be an improvement.</p>

<p>I’m expecially confused by the fact that <a href="https://imagemagick.org/index.php">ImageMagick</a> actually required
me to install <a href="https://ffmpeg.org/">ffmpeg</a> to do the conversion. I figured that I could
just use it directly:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg -i input.gif -f apng -plays 0 output.apng
</code></pre></div></div>

<p>It turns out that <em>it works</em> <img src="/ETOOBUSY/assets/images/lstest.apng" alt="Terrible animation as an APNG file, from ffmpeg"/> and the
image size is <em>smaller</em> than the GIF.</p>

<p>Well, this was my adventure in doing some pixel art… or at least
getting ready to do it. Stay safe!</p>

<p><span title="This is the 1024th consecutive day of posting, which is 2^10. Now it's really time to move on, write less obsessively and start exercising again!"><img src="/ETOOBUSY/assets/images/note.apng" alt="Note"/></span></p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/09/libresprite/</id>
    <published>2023-04-09T06:00:00+02:00</published>
    <updated>2023-04-09T06:00:00+02:00</updated>
    <category term="graphics"/>
    <category term="pixel"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6565167916220036160</id>
    <published>2023-04-08T21:36:00.000+02:00</published>
    <updated>2023-04-08T21:36:15.881+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxix) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/RSAVAGE/Config-Tiny-2.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write .ini style files with as little code as possible
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.29&lt;/strong&gt; on 2023-04-05, with 33 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.28 was 1 year, 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RSAVAGE'&gt;RSAVAGE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.015&lt;/strong&gt; on 2023-04-04, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.013 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.3' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.16.3&lt;/strong&gt; on 2023-04-04, with 92 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.16.1 was 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TURNSTEP'&gt;TURNSTEP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.70&lt;/strong&gt; on 2023-04-02, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.68 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002002&lt;/strong&gt; on 2023-04-01, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002001 was  before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;12.60&lt;/strong&gt; on 2023-04-05, with 38 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 12.50 was 4 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXIFTOOL'&gt;EXIFTOOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/Log-Dispatch-2.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Dispatch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Dispatches messages to one or more outputs
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.71&lt;/strong&gt; on 2023-04-06, with 45 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.70 was 2 years, 8 months, 17 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.49&lt;/strong&gt; on 2023-04-06, with 47 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.48 was 3 months, 4 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TEODESIAN'&gt;TEODESIAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9703' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9703&lt;/strong&gt; on 2023-04-07, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9699 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.760' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.760&lt;/strong&gt; on 2023-04-06, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.759 was 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.004000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.004000&lt;/strong&gt; on 2023-04-05, with 134 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002001 was 2 months, 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6565167916220036160/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxix-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6565167916220036160"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6565167916220036160"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxix-11-great-cpan-modules-released.html" title="(cdxxxix) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7432531001375038847</id>
    <published>2023-04-08T21:33:00.001+02:00</published>
    <updated>2023-04-08T21:33:04.657+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dli) metacpan weekly report - Expect</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 62&lt;/p&gt;
&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Expect"&gt;Expect&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/08 19:31:58 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ApClient" target="_blank"&gt;App::ApClient&lt;/a&gt; - &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CveClient" target="_blank"&gt;App::CveClient&lt;/a&gt; - CLI-based client / toolbox for CVE.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/BitTorrent" target="_blank"&gt;BitTorrent&lt;/a&gt; - Perl extension for extracting, publishing and maintaining BitTorrent related things&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mac::Finder::DSStore" target="_blank"&gt;Mac::Finder::DSStore&lt;/a&gt; - Manipulates the Macintosh Finder's .DS_Store files.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MobileDetect" target="_blank"&gt;MobileDetect&lt;/a&gt; - The great new MobileDetect Library for Perl is finally available!	Perl Module for the PHP Toolchain Mobile Detect from https://github.com/serbanghita/Mobile-Detect .	More Information and development Tools can be found here https://www.buzzerstar.com/development/ and https://devop.tools/&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Passphrase" target="_blank"&gt;Mojolicious::Plugin::Passphrase&lt;/a&gt; - Securely hash and validate your passwords.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::OpenCV" target="_blank"&gt;PDL::OpenCV&lt;/a&gt; - PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&amp;gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&amp;lt;&lt;eof around="" bug="" c="" class2func2suffix="" classes="" doc="" doxy2pdlpod="" doxyparse="" else="" eof="" for="" fullclass="PDL::OpenCV::$c" genpp="" if="" li="" maybe_suffix="" module="${main::PDLMOD}" my="" n="cut\n\n" nnone.="" package="${main::PDLOBJ}" pod="" pp="" pp_addpm="" pp_addxs="" pp_bless="" topfuncs="" work=""&gt;
&lt;/eof&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Expand" target="_blank"&gt;String::Expand&lt;/a&gt; - string utility functions for expanding variables in
self-referential sets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::SenseClusters::LabelEvaluation" target="_blank"&gt;Text::SenseClusters::LabelEvaluation&lt;/a&gt; - Module for evaluation of labels of the clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone" target="_blank"&gt;Clone&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/constant::our" target="_blank"&gt;constant::our&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=282)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Template::XLSX" target="_blank"&gt;Excel::Template::XLSX&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Expect" target="_blank"&gt;Expect&lt;/a&gt; (+3=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Almighty" target="_blank"&gt;Exporter::Almighty&lt;/a&gt; (+2=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Tiny" target="_blank"&gt;Exporter::Tiny&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Interface" target="_blank"&gt;Function::Interface&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Parameters" target="_blank"&gt;Function::Parameters&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Repository" target="_blank"&gt;Git::Repository&lt;/a&gt; (+1=25)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL::Plugin::Convert::DBIC" target="_blank"&gt;GraphQL::Plugin::Convert::DBIC&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tee" target="_blank"&gt;IO::Tee&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=100)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema" target="_blank"&gt;JSON::Schema&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=116)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::xi" target="_blank"&gt;lib::xi&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=161)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=90)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=100)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IRC" target="_blank"&gt;Mojo::IRC&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=481)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DirectoryServer" target="_blank"&gt;Mojolicious::Plugin::DirectoryServer&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=295)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+2=176)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=406)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=36)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pinto" target="_blank"&gt;Pinto&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble" target="_blank"&gt;Regexp::Assemble&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Schedule::Cron" target="_blank"&gt;Schedule::Cron&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SDL" target="_blank"&gt;SDL&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable" target="_blank"&gt;Storable&lt;/a&gt; (+1=51)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Exporter" target="_blank"&gt;Sub::Exporter&lt;/a&gt; (+1=34)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LWP::UserAgent" target="_blank"&gt;Test::LWP::UserAgent&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Output" target="_blank"&gt;Test::Output&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Gitignore" target="_blank"&gt;Text::Gitignore&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/UI::Dialog" target="_blank"&gt;UI::Dialog&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Variable::Declaration" target="_blank"&gt;Variable::Declaration&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=47)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7432531001375038847/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dli-metacpan-weekly-report-expect.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7432531001375038847"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7432531001375038847"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dli-metacpan-weekly-report-expect.html" title="(dli) metacpan weekly report - Expect"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7170877230212265320</id>
    <published>2023-04-08T21:31:00.000+02:00</published>
    <updated>2023-04-08T21:31:16.077+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;
Build date: 2023-04-08 19:30:39 GMT&lt;/p&gt;
&lt;hr/&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75953264" target="_blank"&gt;Perl Mojolicious: handling proxy timeouts&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75950313" target="_blank"&gt;How to convert hash to array without the use of intermediate variable?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75962399" target="_blank"&gt;Is it possible to turn on the -d flag to perl within a perl application and have it apply to itself?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75916916" target="_blank"&gt;Perl Mojolicious: chaining Promises&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75921069" target="_blank"&gt;Is the comma in Perl associative in all contexts?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7170877230212265320/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7170877230212265320"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7170877230212265320"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxviii-stackoverflow-perl-report.html" title="(dlxxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Reinvent the REST</title>
    <link rel="alternate" href="https://blogs.perl.org/users/j1/2023/04/reinvent-the-rest.html"/>
    <id>tag:blogs.perl.org,2023:/users/j1//4270.11069</id>
    <published>2023-04-08T14:47:39Z</published>
    <updated>2023-04-08T15:48:04Z</updated>
    <author>
        <name>J</name>
        <uri>http://complexsimplicity.com.tw/</uri>
    </author>
    <category term="Catalyst" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="catalystapirestjson" label="catalyst API REST JSON" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/j1/">
        <![CDATA[<p>The other day I was working on yet another side project. Almost immediately I got side tracked. Does that make the new project a side side project? </p>

<p>What shiny bobble or cool new tech got my attention you ask? It wasn't $buzzword, or $fancy_tech. Nawe, nothing that resumé worthy. Instead, I decided to see what a MVP for a REST API would look like in using Catalyst. Look ma, no extra modules! <sub>Except a JSON one, but I don't count it since Catalyst also uses a JSON module.</sub></p>

<blockquote>
  <p><strong>NOTE: If you are trying to be productive, you probably want to just use <a href="https://metacpan.org/pod/Catalyst::Action::REST">Catalyst::Action::REST</a> instead of rolling your own. That's what I've used at work with great success.</strong></p>
</blockquote>

<p>Other than generating the scripts I went ahead and hand wrote out everything else and was pleasantly surprised. There was so little code that I went ahead and retyped the only <em>three modules</em> needed here. Apologies if there's a typo.</p>

<h1>Onward to the MVP!</h1>

<p>Right off the bat, I was worried about what all would be needed to parse the incoming data. Instead I <em>happily</em> found out that Catalyst <strong>out of the box</strong> can parse JSON posts. I've been writing Catalyst code for like, I dunno 12 years. Even now, I'll sometimes come across some nice feature, or well thought out bit that just shows you how much effort, and smarts the Catalyst people put into designing a good framework. This time it was data handlers. The example <a href="https://metacpan.org/pod/Catalyst#DATA-HANDLERS">the documentation</a> gave is a great starting point. I think it'd be pretty simple to add in data handlers for XML, or YAML if needed.</p>

<p>The main library is all standard boilerplate. </p>

<ul>
<li><p>rest_mvp/lib/api.pm  </p>

<pre><code>package api;  
use Moose;  
use namespace::autoclean;  
use Catalyst::Runtime 5.90;


extends 'Catalyst';


our $VERSION = '0.01';


__PACKAGE__-&gt;setup;  
__PACKAGE__-&gt;meta-&gt;make_immutable;


1;
</code></pre></li>
</ul>

<p>The only thing that I really had to decide on was how to pass the data to the View.  Since this is a quick prototype project, I just followed a convention I'd seen before and used rest as the stash key. </p>

<p>As a proof of concept I created 2 subs. One that accepts get requests at /api/server_time. As the name suggests it returns the server time. The other accepts post requests at /api/cap. It regurgitates whatever was sent in, or a crash if nothing. :) </p>

<ul>
<li><p>api/lib/api/Controller/api.pm</p>

<pre><code>package rest_mvp::Controller::api;  
use Moose;  
use namespace::autoclean;  


BEGIN { extends 'Catalyst::Controller' };


sub cap :Local :POST  {  
    my ( $self, $c )  = @_;  
    $c-&gt;stash-&gt;{rest} = $c-&gt;req-&gt;body_data;  
}


sub server_time :Local :GET {  
    my ( $self, $c )  = @_;  
    $c-&gt;stash-&gt;{rest}  = { now =&gt; '' . localtime };  
}


sub end : ActionClass('RenderView') { }


__PACKAGE__-&gt;meta-&gt;make_immutable;


1;
</code></pre></li>
</ul>

<p>Catalyst has sensible defaults. As long as I also do something sensible, the view sensibly works.</p>

<ul>
<li><p>rest_mvp/lib/api/View/json.pm</p>

<pre><code>package api::View::json;  
use Moose;  
use namespace::autoclean;  
use Cpanel::JSON::XS;  


BEGIN { extends 'Catalyst::View' };


sub process {  
    my ($self, $c) = @_;  
    $c-&gt;res-&gt;output( encode_json( $c-&gt;stash-&gt;{rest} ) );  
}


__PACKAGE__-&gt;meta-&gt;make_immutable;


1;
</code></pre></li>
</ul>

<h2>Wrap Up</h2>

<p>Anywho, the above code works great as a quick proof of concept. Don't expect error handling tho. Feel free to play around with it. The <a href="https://github.com/peelle/rest_mvp">github repo</a> has an explanation on how to run it. </p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 211</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-211-1np1" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-211/sgreen"&gt;My solution&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1: Toeplitz Matrix
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given a matrix m x n.&lt;/p&gt;

&lt;p&gt;Write a script to find out if the given matrix is Toeplitz Matrix.&lt;/p&gt;

&lt;p&gt;A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;The first observation I make is if the matrix is not square (has the same number of row and columns), then there are two 'paths' that need to be compared. If you look at the below two examples, one diagonal is represented by the &lt;code&gt;a&lt;/code&gt; and a second by the letter &lt;code&gt;b&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a b x x    a x
x a b x    x a
x x a b    b x
           x b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the input, I take a JSON string, and make an assumption is that it will be a multi dimensional array of integers.&lt;/p&gt;

&lt;p&gt;The first step is to calculate the top left of each path. We know that one will always be the first value in the first row, i.e. &lt;code&gt;matrix[0][0]&lt;/code&gt;, and the &lt;code&gt;offset&lt;/code&gt; list to this position.&lt;/p&gt;

&lt;p&gt;If the matrix is not square, we know the second top left will either be in the first row (as per the example on the left), or the first column (as per the other example). I add this position to the &lt;code&gt;offset&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;For each pair in the offset list, I work diagonal downwards comparing the value with the value at the original position. If at any time they don't match, I print 'false' and exit the function. If all the checks have passed, I print 'true'.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py &lt;span class="s1"&gt;'[ [4, 3, 2, 1], [5, 4, 3, 2], [6, 5, 4, 3]]'&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py &lt;span class="s1"&gt;'[ [1, 2, 3], [3, 2, 1]]'&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Task 2: Split Same Average
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given an array of integers. Write a script to find out if the given can be split into two separate arrays whose average are the same.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;This is one of those tasks where some cleverer Team PWC members are going to have a more efficient solution than my one. I'm just going to brute force it.&lt;/p&gt;

&lt;p&gt;For this task I have two loops. The outer loop is the number of values I want to compare. It starts at 1 and end at half the length of the array (rounding down there are an odd number of values). The inner array produces all combinations of that many items. If the average of that combination is same as the total average, print 'true' and exit.&lt;/p&gt;

&lt;p&gt;Like with previous combination challenges, I've used the combination function from &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.combinations"&gt;itertools&lt;/a&gt; (Python) and &lt;a href="https://metacpan.org/pod/Algorithm::Combinatorics#combinations(%5C@data,-%24k)"&gt;Algorithm::Combinatorics&lt;/a&gt; (Perl).&lt;/p&gt;

&lt;p&gt;I also have an edge case of a single value always returning 'true'. As half of the length of the array is less than 1, the loop doesn't have a chance to run.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 1 2 3 4 5 6 7 8
&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 1 3
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-211-1np1</id>
    <published>2023-04-08T10:08:18Z</published>
    <updated>2023-04-08T10:08:18Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Romeo time</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/08/romeo-time/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Some notes about the <code class="language-plaintext highlighter-rouge">time</code> sub-command in <a href="/ETOOBUSY/2023/03/07/fun-with-romeo/">Romeo</a>.</p>
</blockquote>

<p>As a small note to future me, and to excercise my muscle memory a bit, some
usage examples on using the <code class="language-plaintext highlighter-rouge">time</code> sub-command.</p>

<p>The main goal is to transform… time across different representations:
epoch, ISO-8601(ish) strings, Active Directory monstrous integers.</p>

<p>It aims at being useful while not taking itself too seriously, so beware:
anything before the start of the Unix epoch (<code class="language-plaintext highlighter-rouge">1970-01-01T00:00:00</code>) or
sufficiently ahead in the future is officially unsupported.</p>

<p>I played a bit with the interface, eventually settling on a <em>dwim</em> default
where it’s possible to specify the input format directly (defaulting to
epochs if it’s just a bunch of digits). So…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time iso:2023-04-01 1680300000 ad:133247736000000000
2023-04-01T00:00:00+0200
2023-04-01T00:00:00+0200
2023-04-01T00:00:00+0200
</code></pre></div></div>

<p>As it’s clear, the output defaults to my favourite flavor of ISO-8601
format. This is in the spirit that most of the time <em>I</em> want to figure out
what an epoch or an AD time <em>mean</em> in my local time.</p>

<p>It’s possible that some different conversion is needed, though. Especially
when we’re <em>starting</em> from an ISO-8601 date/datetime, right? It’s of course
possible to set a differnet target format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time iso:2023-04-01 -t epoch
1680300000

$ romeo time iso:2023-04-01 -output-format ad
133247736000000000

# Look! No offset!
$ romeo time iso:2023-04-01 -t gm
2023-03-31T22:00:00+0000
</code></pre></div></div>

<p>There’s also some rudimentary arithmetic capability, where it’s possible to
add offsets either directly when providing an input:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time iso:2023-04-01+2w-1d
2023-04-14T00:00:00+0200
</code></pre></div></div>

<p>or using the specific offset option <code class="language-plaintext highlighter-rouge">-D</code>/<code class="language-plaintext highlighter-rouge">--offset</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time iso:2023-04-01 -D +2w-1d
2023-04-14T00:00:00+0200
</code></pre></div></div>

<p>What’s the difference? Well, the option is applied to all inputs, so it’s
useful if we want to apply a specific offset to a bunch of input dates:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time iso:2023-04-01 1680300000 ad:133247736000000000 -D +2w-1d
2023-04-14T00:00:00+0200
2023-04-14T00:00:00+0200
2023-04-14T00:00:00+0200
</code></pre></div></div>

<p>The other alternative is more a shorthand to set a specific point in time,
so to say. This is because there’s more to the <em>do what I mean</em> interface,
like using words like <code class="language-plaintext highlighter-rouge">now</code>, <code class="language-plaintext highlighter-rouge">today</code>, <code class="language-plaintext highlighter-rouge">yesterday</code>, and <code class="language-plaintext highlighter-rouge">tomorrow</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time now today yesterday tomorrow
2023-04-07T17:51:36+0200
2023-04-07T00:00:00+0200
2023-04-06T00:00:00+0200
2023-04-08T00:00:00+0200
</code></pre></div></div>

<p>This makes it easy to express <em>the day before yesterday</em> (<a href="https://en.wiktionary.org/wiki/ereyesterday">ereyesterday</a>
seemed a bit too archaic) or <em>the day after tomorrow</em>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ romeo time yesterday-1d today-2d today+2d tomorrow+1d
2023-04-05T00:00:00+0200
2023-04-05T00:00:00+0200
2023-04-09T00:00:00+0200
2023-04-09T00:00:00+0200
</code></pre></div></div>

<p>OK, I hope this will be a useful refresher… bye bye, future me!</p>

<p>Everyone else stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/08/romeo-time/</id>
    <published>2023-04-08T06:00:00+02:00</published>
    <updated>2023-04-08T06:00:00+02:00</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>PWC211 - Split Same Average</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/07/pwc211-split-same-average/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-211/">#211</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of integers.</p>

  <p>Write a script to find out if the given can be split into two separate
arrays whose average are the same.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @nums = (1, 2, 3, 4, 5, 6, 7, 8)
Output: true

We can split the given array into (1, 4, 5, 8) and (2, 3, 6, 7).
The average of the two arrays are the same i.e. 4.5.
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (1, 3)
Output: false
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>One first question is probably <em>how big the input array will be</em>? Depending
on the answer, as we will see, we might just go with a <em>brute force</em>
exponential approach, or try to find out something more <em>sophisticated</em>.</p>

<p>Another interesting question would be a confirmation on the domain, and in
particular a confirmation that those integers might be <em>negative</em> as well. I
hope my fellow challengers will not be tripped by this fact (I was about to
be).</p>

<p>Last, I’d ask whether the inputs have a bound or not. This would not be a
problem <em>per-se</em> in <a href="https://raku.org/">Raku</a>, but in <a href="https://www.perl.org/">Perl</a> I’m still relying on what the
language gives me out of the box, so it would be wise to figure out if big
integers would be needed (expecially for my case, because I’m going to
translate inputs to only deal with non-negative values).</p>

<h1 id="the-solution">The solution</h1>

<p>When I address these challenges, I usually start with coding the solutions
(strictly as <a href="https://raku.org/">Raku</a> then <a href="https://www.perl.org/">Perl</a> for the first task, <a href="https://www.perl.org/">Perl</a> then
<a href="https://raku.org/">Raku</a> for the second one, because they’re both lovely), then move on to
the blog post, first copying the challenge, then writing out some questions
I gathered on the way, then describing the solution in this very section.</p>

<p>This time… I start here.</p>

<p>The most basic and obvious algorithm is a brute force attempt with a
disastrous $O(2^n)$ complexity. What’s that, and why this complexity? Well,
we can consider any possible subset out of the $n$ input integers, then
calculate the average on those elements and on what’s left over, compare and
declare success or move on to the next subset. As any element can, or can
not, be in this subset, it’s like having a yes/no flag behind each element,
i.e. a string of $n$ bits that we can play with.</p>

<p>OK, we have a base line, at least.</p>

<h2 id="lets-meet-in-the-middle">Let’s meet in the middle</h2>

<p>One observation that can be immediately done is that if we go through all
subsets with $k$ elements inside, at the very same time we’re covering
all subsets with $n - k$ elements too. This means that it’s sufficient to go
up to $\lfloor n / 2 \rfloor$, i.e. that the real complexity is
$O(2^{\lfloor n/2 \rfloor})$.</p>

<p>It’s still exponential, but at least we have doubled our inputs!</p>

<h2 id="calculating-averages">Calculating averages</h2>

<p>We can <em>observe</em> that if the average over the two subsets are the same,
<em>surely</em> this can tell us something about the average over the whole lot,
right? It turns out that <em>it actually does</em>.</p>

<p>Let’s assume that we have such a partition, where the first subset holds $u$
elements ${a_1, a_2, …, a_u}$ and the second subset holds $v$ elements
${b_1, b_2, …, b_v}$. Then we have:</p>

\[\frac{1}{u}\sum_{i=1}^u a_i = \frac{1}{v}\sum_{j=1}^v b_j\]

<p>For sake of simplicity, let’s set names:</p>

\[A = \sum_{i=1}^u a_i \\
B = \sum_{j=1}^v b_j\]

<p>so that our initial relation is written simply as:</p>

\[\frac{A}{u} = \frac{B}{v}\]

<p>Solving for $B$ we get:</p>

\[B = \frac{v}{u} A\]

<p>The average over <em>all</em> elements is expressed like this:</p>

\[\frac{1}{u + v} (\sum_{i=1}^u a_i + \sum_{j=1}^v b_j) = \frac{A + B}{u + v}\]

<p>Substituting $B$ we get:</p>

\[\begin{align}
\frac{A + B}{u + v} &amp; = \frac{1}{u + v} (A + \frac{v}{u} A) \\
  &amp; = \frac{1}{u + v}(1 + \frac{v}{u}) A \\
  &amp; = \frac{1}{u + v}\frac{u + v}{u} A \\
  &amp; = \frac{A}{u} \\
  &amp; = \frac{B}{v}
\end{align}\]

<p>that is, the three averages are the same as one another.</p>

<p>This means that instead of calculating the averages over the two subsets for
each candidate, we can calculate the reference average over all elements
once at the beginning, and then the average over one single subset only.
Assuming that the “big thing” is calculating the average (still a linear
operation at the basic level), we have halved our search effort.</p>

<h2 id="integer-constraint">Integer constraint</h2>

<p>There’s still something to extract from the challenge constraints, i.e. the
fact that the inputs are all integers.</p>

<p>Let’s take the first example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @nums = (1, 2, 3, 4, 5, 6, 7, 8)
</code></pre></div></div>

<p>The average over all elements is $4.5$.</p>

<p>If we consider any subset of $k$ elements, the subset is a <em>good</em> one if
their sum is $4.5 k$. This implies that $k$ can only be even, otherwise
the sum would not be integer.</p>

<p>This can be generalized: if the average has a reduced form:</p>

\[M = \frac{p}{q}\]

<p>with $p$ and $q$ co-primes, then a good candidate subset can only have a
number $k$ of elements that is also divisible by $q$, so that:</p>

\[S_k = k \frac{p}{q}\]

<p>is integer.</p>

<p>Alas, this does not help in the worst case where the average itself is an
integer number (i.e. $q = 1$), but still gives a big improvement in the
general case, as we can focus on subsets whose cardinality is a multiple of
$q$.</p>

<blockquote>
  <p>It would be interesting to calculate the probability of having an integer
average out of a random draw of integers.</p>
</blockquote>

<p>The integer constraint and our observation also helps moving the focus from
finding the right average $M$ to finding the right sum $S_k$. This is
actually solving a variant of the knapsack problem (with a specific target
and a constraint on the number of elements), for which we can <em>hope</em> to find
something that can help.</p>

<p>I’ll call this a day, though, and not look further into it.</p>

<h2 id="solution-really">Solution (really!)</h2>

<p>Let’s go <a href="https://www.perl.org/">Perl</a> first. Checking for a feasible set leverages some caching
to keep track of past failures and not go through all the calculations over
and over (hopefully).</p>

<p>Another twist in the implementation is that the test is performed on a
transformed array, shifted so that all elements are non-negative. This is an
invariant, but then helps better pruning the search because it allows making
some assumptions in <code class="language-plaintext highlighter-rouge">$has_subset</code> (in particular, failing if <code class="language-plaintext highlighter-rouge">$sum</code> turned
negative).</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">@args</span> <span class="o">=</span> <span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">8</span><span class="p">;</span>
<span class="nv">say</span> <span class="nv">split_same_average</span><span class="p">(</span><span class="nv">@args</span><span class="p">)</span> <span class="p">?</span> <span class="p">'</span><span class="s1">true</span><span class="p">'</span> <span class="p">:</span> <span class="p">'</span><span class="s1">false</span><span class="p">';</span>

<span class="k">sub </span><span class="nf">split_same_average</span> <span class="p">(@list) {</span>

   <span class="c1"># pre-massage the list to only cope with non-negative integers</span>
   <span class="p">(</span><span class="k">my</span> <span class="nv">$min</span><span class="p">,</span> <span class="nv">@list</span><span class="p">)</span> <span class="o">=</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nv">@list</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@partial_sums</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
   <span class="nb">push</span> <span class="nv">@partial_sums</span><span class="p">,</span> <span class="nv">$partial_sums</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="vg">$_</span><span class="p">]</span> <span class="o">-=</span> <span class="nv">$min</span><span class="p">)</span>
      <span class="k">for</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$#list</span><span class="p">;</span>
   <span class="nb">unshift</span> <span class="nv">@list</span><span class="p">,</span> <span class="mi">0</span><span class="p">;</span> <span class="c1"># put "min" back</span>

   <span class="k">my</span> <span class="nv">%cache</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$has_subset</span> <span class="o">=</span> <span class="k">sub </span><span class="p">($sum, $k, $i = $#list) {</span>
      <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$sum</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>  <span class="c1"># found!</span>
      <span class="k">return</span> <span class="mi">0</span>
         <span class="k">if</span> <span class="p">(</span><span class="nv">$sum</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>                 <span class="c1"># removed more than needed</span>
         <span class="o">||</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>                   <span class="c1"># nothing more to look at</span>
         <span class="o">||</span> <span class="p">(</span><span class="nv">$sum</span> <span class="o">&gt;</span> <span class="nv">$partial_sums</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="c1"># cannot remove as much as needed</span>
         <span class="p">;</span>

      <span class="c1"># caching on subset size $k and end cursor position $i only, the $sum</span>
      <span class="c1"># is a consequence of $k</span>
      <span class="k">return</span> <span class="nv">$cache</span><span class="p">{</span><span class="nv">$k</span><span class="p">}{</span><span class="nv">$i</span><span class="p">}</span> <span class="sr">//</span><span class="o">=</span>
            <span class="nv">__SUB__</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sum</span> <span class="o">-</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># try greedy first</span>
         <span class="o">||</span> <span class="nv">__SUB__</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$sum</span><span class="p">,</span> <span class="nv">$k</span><span class="p">,</span> <span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>                <span class="c1"># fallback</span>
   <span class="p">};</span>

   <span class="c1"># calculate p and q (average for modified list is p/q)</span>
   <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nv">@list</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="nv">$partial_sums</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
   <span class="k">my</span> <span class="nv">$gcd</span> <span class="o">=</span> <span class="nv">gcd</span><span class="p">(</span><span class="nv">$sum</span><span class="p">,</span> <span class="nv">$n</span><span class="p">);</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$p</span><span class="p">,</span> <span class="nv">$q</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$sum</span> <span class="sr">/ $gcd, $n /</span> <span class="nv">$gcd</span><span class="p">);</span>

   <span class="c1"># iterate finding subsets of multiples of q, starting at q itself</span>
   <span class="k">my</span> <span class="nv">$k</span> <span class="o">=</span> <span class="nv">$q</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">&lt;=</span> <span class="nv">$n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$S</span> <span class="o">=</span> <span class="nv">$p</span> <span class="o">*</span> <span class="nv">$k</span> <span class="o">/</span> <span class="nv">$q</span><span class="p">;</span> <span class="c1"># target sum</span>
      <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="nv">$has_subset</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$S</span><span class="p">,</span> <span class="nv">$k</span><span class="p">);</span>
      <span class="nv">$k</span> <span class="o">+=</span> <span class="nv">$q</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="c1"># nothing found, fail</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">gcd</span> <span class="p">($A, $B) {</span> <span class="p">(</span><span class="nv">$A</span><span class="p">,</span> <span class="nv">$B</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$B</span> <span class="o">%</span> <span class="nv">$A</span><span class="p">,</span> <span class="nv">$A</span><span class="p">)</span> <span class="k">while</span> <span class="nv">$A</span><span class="p">;</span> <span class="k">return</span> <span class="nv">$B</span> <span class="p">}</span>
</code></pre></div></div>

<p>The <a href="https://raku.org/">Raku</a> alternative is a pretty straight translation. I hope lazyness
is still one of the three virtues of a programmer these days.</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) {
   @args = 1 .. 8 unless @args;
   put split-same-average(@args);
}

sub split-same-average (@list) {
   (my $min, @list) = @list.sort.Slip;
   my @partial-sums = 0;
   @partial-sums.push: @partial-sums[*-1] + (@list[$_] -= $min) for ^@list;
   @list.unshift: 0; # put "min" back

   my %cache;
   sub has_subset ($sum, $k, $i = @list.end) {
      return True if ($sum == 0) &amp;&amp; ($k == 0);
      return False
         if ($sum &lt; 0)                 # removed more than needed
         || ($i &lt; 0)                   # nothing more to look at
         || ($sum &gt; @partial-sums[$i]) # cannot remove as much as needed
         ;

      # caching on subset size $k and end cursor position $i only, the $sum
      # is a consequence of $k
      return %cache{$k}{$i} //=
            samewith($sum - @list[$i], $k - 1, $i - 1)
         || samewith($sum, $k, $i - 1);
   }

   # calculate p and q (average for modified list is p/q)
   my $n = @list.elems;
   my $sum = @partial-sums[*-1];
   my $gcd = gcd($sum, $n);
   my ($p, $q) = $sum div $gcd, $n div $gcd;

   # iterate finding subsets of multiples of q, starting at q itself
   my $k = $q;
   while $k &lt;= $n div 2 {
      my $S = $p * $k / $q; # target sum
      return True if has_subset($S, $k);
      $k += $q;
   }

   # nothing found, fail
   return False;
}

sub gcd ($A is copy, $B is copy) { ($A, $B) = ($B % $A, $A) while $A; $B }
</code></pre>

<p>Have fun and stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/07/pwc211-split-same-average/</id>
    <published>2023-04-07T06:00:00+02:00</published>
    <updated>2023-04-07T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6858914200457045543</id>
    <published>2023-04-01T17:27:00.000+02:00</published>
    <updated>2023-04-01T17:27:17.901+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxviii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.061000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.061000&lt;/strong&gt; on 2023-03-29, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.060010 was 19 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/OLIVER'&gt;OLIVER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.013&lt;/strong&gt; on 2023-03-29, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.012 was 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.60&lt;/strong&gt; on 2023-03-29, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.59 was 5 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.006002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.006002&lt;/strong&gt; on 2023-03-31, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.006001 was 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002001&lt;/strong&gt; on 2023-04-01, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.001005 was 2 months, 5 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/XAOC/Glib-Object-Introspection-0.050' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Glib::Object::Introspection&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Dynamically create Perl language bindings
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.050&lt;/strong&gt; on 2023-03-27, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.049 was 2 years, 5 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/XAOC'&gt;XAOC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.8' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;4.8&lt;/strong&gt; on 2023-04-01, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 4.79 was 6 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MLEHMANN'&gt;MLEHMANN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PJACKLAM/Math-BigInt-1.999838' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Math::BigInt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pure Perl module to test Math::BigInt with scalars
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.999838&lt;/strong&gt; on 2023-03-31, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.999837 was 8 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PJACKLAM'&gt;PJACKLAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2023-04-01, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.82 was 10 months, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETJ'&gt;ETJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9698' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9698&lt;/strong&gt; on 2023-03-31, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9696 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.70&lt;/strong&gt; on 2023-03-30, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.68 was 1 year, 7 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6858914200457045543/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxviii-11-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6858914200457045543"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6858914200457045543"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxxxviii-11-great-cpan-modules.html" title="(cdxxxviii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8の文字列を1行ずつ読み取り、各文字をU+(16進数)の形式などに変換して、1行ずつ出力する。</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>コマンドの出力結果を、Gitのレポジトリの中のファイルに保管する。</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を行列状に示す。</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>指定ディレクトリのファイル全て(直下のみでない)に対して、最後に変更された順で網羅的に表示する。</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>– new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for … <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Regex in python vs in perl</title>
    <link rel="alternate" href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/2600/0*vZMKz-sHEUjwbgNS" width="3024"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Regular expressions (regex) are a powerful tool for manipulating and searching text data. A regular expression is a sequence of characters&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@maxwell.langford/regex-in-python-vs-in-perl-693f5a98ba90?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Maxwell Langford</name>
    </author>
    <id>https://medium.com/p/693f5a98ba90</id>
    <published>2023-03-29T17:06:53Z</published>
    <updated>2023-03-29T17:06:53.762000Z</updated>
    <category term="perl"/>
    <category term="regex-in-python"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Perl Coding Interview Question and Answers</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;As a Perl developer, you need to have a solid understanding of the language&amp;#x2019;s syntax, semantics, and best practices. This blog provides a&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/a7c5b8e823e1</id>
    <published>2023-03-19T05:07:58Z</published>
    <updated>2023-03-28T04:02:48.155000Z</updated>
    <category term="interview-preparation"/>
    <category term="programming"/>
    <category term="coding-interviews"/>
    <category term="perl-interview-questions"/>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7194881803530293683</id>
    <published>2023-03-26T19:54:00.000+02:00</published>
    <updated>2023-03-26T19:54:26.242+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxvii) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.322' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.322&lt;/strong&gt; on 2023-03-23, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.320 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-3.00' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.00&lt;/strong&gt; on 2023-03-25, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.40 was 1 year, 7 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.012&lt;/strong&gt; on 2023-03-22, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.010 was 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.59&lt;/strong&gt; on 2023-03-24, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.57 was 3 months, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DROLSKY'&gt;DROLSKY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2023-03-23, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.50 was 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.11&lt;/strong&gt; on 2023-03-19, with 58 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.10 was 2 months, 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/JMCNAMARA'&gt;JMCNAMARA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.006001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.006001&lt;/strong&gt; on 2023-03-24, with 21 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.006000 was 4 months, 3 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/TOBYINK'&gt;TOBYINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;7.70&lt;/strong&gt; on 2023-03-26, with 52 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 7.68 was 12 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/File-Map-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Map&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Memory mapping made simple and safe.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2023-03-25, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.67 was 2 years, 9 months before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/SHAY/libnet-3.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Collection of network protocol modules
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;3.15&lt;/strong&gt; on 2023-03-20, with 30 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 3.14 was 9 months, 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/SHAY'&gt;SHAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.714' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.714&lt;/strong&gt; on 2023-03-20, with 61 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.713 was 3 months, 8 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PREACTION'&gt;PREACTION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230320&lt;/strong&gt; on 2023-03-21, with 41 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230220 was 1 month, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETJ/PDL-2.082' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.082&lt;/strong&gt; on 2023-03-22, with 47 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.081 was 4 months, 28 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETJ'&gt;ETJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/VPIT/Scope-Upper-0.34' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Scope::Upper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Act on upper scopes.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.34&lt;/strong&gt; on 2023-03-26, with 13 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.33 was 1 year, 3 months, 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/VPIT'&gt;VPIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9696' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.9696&lt;/strong&gt; on 2023-03-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9695 was 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.759' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.759&lt;/strong&gt; on 2023-03-26, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.758 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000150' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.000150&lt;/strong&gt; on 2023-03-21, with 40 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.000148 was 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/ETHER/YAML-Tiny-1.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write YAML files with as little code as possible
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.74&lt;/strong&gt; on 2023-03-23, with 31 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.73 was 5 years, 1 month, 2 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/ETHER'&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7194881803530293683/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvii-18-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7194881803530293683"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7194881803530293683"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvii-18-great-cpan-modules-released.html" title="(cdxxxvii) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Hack The Box Nunchucks Writeup</title>
    <link rel="alternate" href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1942/0*PEFYPGl9fZPn2zZb.png" width="1942"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Nunchucks is an easy Linux box created by TheCyberGeek on Hack The Box and I intend to hack it. Hello world, welcome to Haxez in this post&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@joemcfarland/hack-the-box-nunchucks-writeup-f6eef36a8363?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Haxez - Hacking Made Easy</name>
    </author>
    <id>https://medium.com/p/f6eef36a8363</id>
    <published>2023-03-26T13:01:25Z</published>
    <updated>2023-03-26T15:49:30.057000Z</updated>
    <category term="nunchuck"/>
    <category term="perl"/>
    <category term="ssti"/>
    <category term="hacking"/>
    <category term="hack-the-box-writeup"/>
  </entry>
  <entry>
  <title>Now Accepting: TPRC Proposals for 2024</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcproposals2024"/>
  <id>tag:news.perlfoundation.org,2023-03-22:/post/tprcproposals2024</id>
  <published>2023-03-22T15:23:23</published>
  <updated>2023-03-22T15:23:23</updated>
  <summary>
  <![CDATA[
      It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. Please view the information, along with a sample RFP you can send to possible vendors here. When ready to submit your proposal, please use the same form. If you have any questions, please contact us at hello@perlfoundation.org 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/combo logo.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. <p>Please view the information, along with a sample RFP you can send to possible vendors <a href="https://forms.gle/tYHSK5XDw2p55qgx5">here</a>. When ready to submit your proposal, please <a href="https://forms.gle/tYHSK5XDw2p55qgx5">use the same form.</a><p> If you have any questions, please contact us at hello@perlfoundation.org .</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Report on Volunteerism in the Perl Community</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/reportonperlvolunteerism"/>
  <id>tag:news.perlfoundation.org,2023-03-21:/post/reportonperlvolunteerism</id>
  <published>2023-03-21T13:14:44</published>
  <updated>2023-03-21T13:14:44</updated>
  <summary>
  <![CDATA[
     This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering scenario within these communities and create techniques that will help in better management of volunteers. The Perl community is ideal for this research project as there is no single large corporate entity behind the communities. Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/11d7bbec952d46a9332b896177e91328c59d9a35/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. <p>
The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering
scenario within these communities and create techniques that will help in better management of volunteers. The Perl
community is ideal for this research project as there is no single large corporate entity behind the communities. <p><p> 
Please <a href="https://drive.google.com/file/d/1xlSSbqJnfpBMBZaxnjgC9JwbQwTMJ60c/view?usp=share_link">click here</a> to view the report in it's entirety. <p>
We will be discussing the report at the next Community and Reps meeting, which will be held on April 21st at 17:30 UTC. <p> 
To join the meeting virtually, please follow <a href="https://us02web.zoom.us/j/89049224605?pwd=cU5sTVdDR0x4bnRFQU4zR2dRQ0o2dz09">this Zoom link. </a> <p>
Meeting ID: 890 4922 4605<p>
Passcode: 8675309<p>
We hope to see you at the meeting and look forward to your input. <p> </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Input Requested - Future of TPRF website(s)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/websiteproposalcall"/>
  <id>tag:news.perlfoundation.org,2023-03-20:/post/websiteproposalcall</id>
  <published>2023-03-20T19:06:24</published>
  <updated>2023-03-20T19:06:24</updated>
  <summary>
  <![CDATA[
     TPRF is looking for community input on the future of the TPRF website We are asking for community members to submit proposals for the Perl/Raku website The proposals would ideally address the following: Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPRF is looking for community input on the future of the TPRF website(s). <p>
We are asking for community members to submit proposals for the Perl/Raku website(s). The proposals would ideally address the following: <p><p>
* Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language specific donations?<p>
* An approach to the professional graphic designing of the website (Please provide links to any examples/existing websites that show what a website along these lines would look like)<p>
* Cost to deploy<p>
* Ongoing costs for technical aspects and maintenance<p></p>

<p>Suggestions should also be:<p>
1. Template-based, for custom branding<p>
2. easy to add, update, move and delete content<p>
3. customizable menus<p>
4. mobile friendly<p>
5. multi-domain support<p>
6. access to logs etc for analysis and SEO purposes<p><p><p>
You can submit your ideas using our form template at https://forms.gle/s9uKWorzQ3GSHe8JA OR you can submit a free form proposal to board@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Deadline for TPRC </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprctalks"/>
  <id>tag:news.perlfoundation.org,2023-03-17:/post/tprctalks</id>
  <published>2023-03-17T13:58:45</published>
  <updated>2023-03-17T13:58:45</updated>
  <summary>
  <![CDATA[
     The Perl Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers. The Perl Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023. The deadline to submit your talks is coming up quickly! Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers.</p>

<p>The Perl &amp; Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023.</p>

<p>The deadline to submit your talks is coming up quickly! Please visit https://www.papercall.io/tprctor23 to submit your talk before March 31st. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>One-liner: Remove first two characters of every line</title>
  <summary type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></summary>
  <updated>2023-03-14T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/remove-first-two-characters-of-every-line"/>  <id>https://perlmaven.com/remove-first-two-characters-of-every-line</id>
  <content type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
