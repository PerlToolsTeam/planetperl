<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-05-24T09:50:10Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>All Aboard to Your Next Adventure! Perl Role in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/rv5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl programmers rejoice — our client has an office in Malta, and they’re looking for you. As a financial company seeing incredible growth over the last two decades, business is booming and they’re looking to expand their team. If you’ve got an interest in dollars and cents and share their belief that online trading should be available to all, we’ve got the role for you.</div>
    </content>
    <id>https://job.perl.careers/rv5</id>
    <published>2021-05-24T10:00:45Z</published>
    <updated>2021-05-24T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Not All Heroes Wear Capes. Perl in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/50r" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client takes the legwork out of the hunt for the best bargain, offering one of the largest product and price comparison platforms in German-speaking countries. They’re looking for a heroic Perl programmer to develop and deliver quality content and all the info users need to find their gadgets for the right price.</div>
    </content>
    <id>https://job.perl.careers/50r</id>
    <published>2021-05-24T10:00:44Z</published>
    <updated>2021-05-24T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Cooking Up Something Good. Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/tja" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With a knack for tailoring content to a variety of site aesthetics, our client sets a banquet of advertising delights for over 349 million consumers around the world. If your mouth is watering at the thought of joining this dynamic team and you’re a senior Perl programmer with a solid understanding of Go programming languages, they just might set a place for you at the table.</div>
    </content>
    <id>https://job.perl.careers/tja</id>
    <published>2021-05-24T10:00:43Z</published>
    <updated>2021-05-24T10:00:43Z</updated>
  </entry>
  <entry>
    <title>A New Adventure is only a Click Away. Perl Developer role, remote within UK</title>
    <link rel="alternate" href="https://job.perl.careers/blm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/blm</id>
    <published>2021-05-24T10:00:42Z</published>
    <updated>2021-05-24T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Doers Wanted. Perl Developer role in Pittsburgh, PA</title>
    <link rel="alternate" href="https://job.perl.careers/k5m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This client is looking for someone who will design and build the tools their customers need. You’ll coordinate implementation, testing, deployment, and maintenance across multiple systems.  If you’re a Perl software engineer who enjoys distilling broadly defined objectives into actionable tasks, this might just be your next career move.</div>
    </content>
    <id>https://job.perl.careers/k5m</id>
    <published>2021-05-24T10:00:41Z</published>
    <updated>2021-05-24T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, June 9, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-05-24T10:00:40Z</published>
    <updated>2021-05-24T10:00:40Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-05-24T10:00:39Z</published>
    <updated>2021-05-24T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, June 3, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-05-24T10:00:38Z</published>
    <updated>2021-05-24T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Washington, DC Perl (DCPM)</title>
    <link rel="alternate" href="http://dc.pm.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Tuesday, 1st June, 2021; 07:00 PM Eastern Time (US and Canada)</div>
    </content>
    <id>http://dc.pm.org/</id>
    <published>2021-05-24T10:00:37Z</published>
    <updated>2021-05-24T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 27, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-05-24T10:00:36Z</published>
    <updated>2021-05-24T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 26, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-05-24T10:00:35Z</published>
    <updated>2021-05-24T10:00:35Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/05/cccxlii-15-great-cpan-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdlxviii-metacpan-weekly-report-perl.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdxci-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-05-24T10:00:34Z</published>
    <updated>2021-05-24T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Developing an application for organising online self knowledge workshops</title>
    <link rel="alternate" href="https://code-maven.com/online-self-knowledge-workshop" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This is an application written in ReactJS</div>
    </content>
    <id>https://code-maven.com/online-self-knowledge-workshop</id>
    <published>2021-05-24T10:00:33Z</published>
    <updated>2021-05-24T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Part 6 video of pair programming a Perl web app</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/05/23/part-6-video-of-pair-programming-a-perl-web-app/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The original plan and the list of all the previous episodes are <a href="https://perlmaven.com/course-management-app-in-mojolicious">here</a>.</div>
    </content>
    <id>https://phoenixtrap.com/2021/05/23/part-6-video-of-pair-programming-a-perl-web-app/</id>
    <published>2021-05-24T10:00:32Z</published>
    <updated>2021-05-24T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 113</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-113-4g2d" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon's choice of data format for representing a binary tree is very smart. I liked the story behind it too.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-113-4g2d</id>
    <published>2021-05-24T10:00:31Z</published>
    <updated>2021-05-24T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 113: Represent-Recreate</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_113__Represent_Recreate.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's optimisation of the Represent Integer the is the highlight of this blog post for me. Thanks for sharing.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_113__Represent_Recreate.html</id>
    <published>2021-05-24T10:00:30Z</published>
    <updated>2021-05-24T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 113: sums and trees</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/05/18/PerlWeeklyChallenge113.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca shared the real power of Raku. I loved his solution to the Recreate Binary Tree task specially.</div>
    </content>
    <id>https://fluca1978.github.io/2021/05/18/PerlWeeklyChallenge113.html</id>
    <published>2021-05-24T10:00:29Z</published>
    <updated>2021-05-24T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 113</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/05/22/PWC113/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis' attempt to improve the performance of the Represent Integer task is commendable. Keep it up.</div>
    </content>
    <id>https://wlmb.github.io/2021/05/22/PWC113/</id>
    <published>2021-05-24T10:00:28Z</published>
    <updated>2021-05-24T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #113</title>
    <link rel="alternate" href="https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-113/james-smith" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James's code presentation is always the best. It makes reading the code so simple. Also with the detailed task analysis is very handy as well.</div>
    </content>
    <id>https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-113/james-smith</id>
    <published>2021-05-24T10:00:27Z</published>
    <updated>2021-05-24T10:00:27Z</updated>
  </entry>
  <entry>
    <title>PWC113 - Recreate Binary Tree</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/20/pwc113-recreate-binary-tree/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I have a high regard for those who present the tree like structure. Although it is not part of the task, some did it on their own. Thank you.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/20/pwc113-recreate-binary-tree/</id>
    <published>2021-05-24T10:00:26Z</published>
    <updated>2021-05-24T10:00:26Z</updated>
  </entry>
  <entry>
    <title>PWC113 - Represent Integer</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/19/pwc113-represent-integer/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shared the mathematical expression for the task. Lot to learn from his work. Keep up the great work.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/19/pwc113-represent-integer/</id>
    <published>2021-05-24T10:00:25Z</published>
    <updated>2021-05-24T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Represent the Differences, Yo!</title>
    <link rel="alternate" href="https://colincrain.com/2021/05/21/represent-the-differences-yo/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved his analysis of the Represent Integer task. I wonder sometimes, how did I miss it myself.</div>
    </content>
    <id>https://colincrain.com/2021/05/21/represent-the-differences-yo/</id>
    <published>2021-05-24T10:00:24Z</published>
    <updated>2021-05-24T10:00:24Z</updated>
  </entry>
  <entry>
    <title>The Perl Weekly Challenges, #113</title>
    <link rel="alternate" href="http://functional-perl.org/docs/blog/perl-weekly-challenges-113.xhtml" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome Christian and thanks for introducing FunctionalPerl.</div>
    </content>
    <id>http://functional-perl.org/docs/blog/perl-weekly-challenges-113.xhtml</id>
    <published>2021-05-24T10:00:23Z</published>
    <updated>2021-05-24T10:00:23Z</updated>
  </entry>
  <entry>
    <title>CY's Take on The Weekly Challenge #113</title>
    <link rel="alternate" href="https://e7-87-83.github.io/coding/challenge_113.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok always surprises me with something new and this week also we got two very clever solutions. Keep it up.</div>
    </content>
    <id>https://e7-87-83.github.io/coding/challenge_113.html</id>
    <published>2021-05-24T10:00:22Z</published>
    <updated>2021-05-24T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Re Re Raku (and Perl)</title>
    <link rel="alternate" href="https://raku-musings.com/re-re.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I am big fan of Arne for his creative blog titles. He is simply the best. This week, we got bonus Perl solutions as well. Thanks for sharing.</div>
    </content>
    <id>https://raku-musings.com/re-re.html</id>
    <published>2021-05-24T10:00:21Z</published>
    <updated>2021-05-24T10:00:21Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 113</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/23" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam's use of pack()/unpack() is really interesting. There is always something new to learn. Thanks for sharing.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/23</id>
    <published>2021-05-24T10:00:20Z</published>
    <updated>2021-05-24T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 113: Recreate Binary Tree</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-113-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail is once again at his best. Please check it out.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-113-2.html</id>
    <published>2021-05-24T10:00:19Z</published>
    <updated>2021-05-24T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Represent Integer</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-113-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's style of expanding the task is much appreciated. There is plenty to learn from his task analysis. Thanks for sharing.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-113-1.html</id>
    <published>2021-05-24T10:00:18Z</published>
    <updated>2021-05-24T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 112</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-113/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron took pains to display the tree like structure. Loved it. Keep it up the great work.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-113/</id>
    <published>2021-05-24T10:00:17Z</published>
    <updated>2021-05-24T10:00:17Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 113</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-113" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Represent Integer" and "Recreate Binary Tree" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-113</id>
    <published>2021-05-24T10:00:16Z</published>
    <updated>2021-05-24T10:00:16Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 114</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-114" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome the new week with couple of fun tasks "Next Palindrome Number" and "Higher Integer Set Bits". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-114</id>
    <published>2021-05-24T10:00:15Z</published>
    <updated>2021-05-24T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for March and April 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/dave-report-2021-mar-apr" type="text/html"/>
    <id>https://news.perlfoundation.org/post/dave-report-2021-mar-apr</id>
    <published>2021-05-24T10:00:14Z</published>
    <updated>2021-05-24T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal: Raku Dispatch and Compiler Improvements</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements</id>
    <published>2021-05-24T10:00:13Z</published>
    <updated>2021-05-24T10:00:13Z</updated>
  </entry>
  <entry>
    <title>April report of the Raku Development Grant of Jonathan Worthington </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/jonathan-2021-04" type="text/html"/>
    <id>https://news.perlfoundation.org/post/jonathan-2021-04</id>
    <published>2021-05-24T10:00:12Z</published>
    <updated>2021-05-24T10:00:12Z</updated>
  </entry>
  <entry>
    <title>RakuAST Grant Report 2021-04</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/rakuast-grant-report-2021-04" type="text/html"/>
    <id>https://news.perlfoundation.org/post/rakuast-grant-report-2021-04</id>
    <published>2021-05-24T10:00:11Z</published>
    <updated>2021-05-24T10:00:11Z</updated>
  </entry>
  <entry>
    <title>The Witch and the Witch-hunt</title>
    <link rel="alternate" href="http://blogs.perl.org/users/leon_timmermans/2021/05/the-witch-and-the-witch-hunt.html" type="text/html"/>
    <id>http://blogs.perl.org/users/leon_timmermans/2021/05/the-witch-and-the-witch-hunt.html</id>
    <published>2021-05-24T10:00:10Z</published>
    <updated>2021-05-24T10:00:10Z</updated>
  </entry>
  <entry>
    <title>CAT: Addressing the issues, planning ahead</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/cat-addressing-the-issues-planning-ahead" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This whols story is really tiring. But if you are interested try reading the comments on <a href="https://www.reddit.com/r/perl/comments/ngco3i/cat_addressing_the_issues_planning_ahead/">Reddit</a>.</div>
    </content>
    <id>https://news.perlfoundation.org/post/cat-addressing-the-issues-planning-ahead</id>
    <published>2021-05-24T10:00:09Z</published>
    <updated>2021-05-24T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Solving simple problems</title>
    <link rel="alternate" href="https://dev.to/davorg/solving-simple-problems-4p2f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave is scrobbling using Last.FM. For those who don't know, 'scrobbling' is the act of logging what you're listening to using an external service so that, over time, you build up an accurate picture of who you listen to.</div>
    </content>
    <id>https://dev.to/davorg/solving-simple-problems-4p2f</id>
    <published>2021-05-24T10:00:08Z</published>
    <updated>2021-05-24T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Grab a distribution tarball from CPAN</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/grab-a-distribution-tarball-from-cpan-f25" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I admit, just a few weeks ago I wrote a partially functioning tool for myself to download and unzip a CPAN distribution. It was fun, but I should have looked for an already existing solution.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/grab-a-distribution-tarball-from-cpan-f25</id>
    <published>2021-05-24T10:00:07Z</published>
    <updated>2021-05-24T10:00:07Z</updated>
  </entry>
  <entry>
    <title>A list of Perl list processing modules</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Is that all? Do you know other things Mark should list on his blog? Comment on his blog post.</div>
    </content>
    <id>https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/</id>
    <published>2021-05-24T10:00:06Z</published>
    <updated>2021-05-24T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Developing a script in small steps</title>
    <link rel="alternate" href="https://dev.to/vkroll/common-misconception-of-beginners-51jb" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A detailed example of taking a big commit and breaking it up into small steps that make the whole process easier to follow.</div>
    </content>
    <id>https://dev.to/vkroll/common-misconception-of-beginners-51jb</id>
    <published>2021-05-24T10:00:05Z</published>
    <updated>2021-05-24T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Killing spiders - a fresh look on Chowla Numbers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/17/killing-spiders/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/17/killing-spiders/</id>
    <published>2021-05-24T10:00:04Z</published>
    <updated>2021-05-24T10:00:04Z</updated>
  </entry>
  <entry>
    <title>CPANdeps - correction</title>
    <link rel="alternate" href="http://deps.cpantesters.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Apparently two weeks ago I confused CPANdeps with another of David's ex-projects. cpXXXan was the one that provided older versions of modules for older perls.  CPANdeps shows a tree of a module's dependencies, along with test results for your chosen version of perl. The dependency analysis part of that is available on the command line via the `cpandeps` script (distributed with CPAN::FindDependencies) and MetaCPAN shows the first level of dependencies. Since then David found someone to take over maintenance of CPANdeps anyway.</div>
    </content>
    <id>http://deps.cpantesters.org/</id>
    <published>2021-05-24T10:00:03Z</published>
    <updated>2021-05-24T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Improving p5p: Perl is going to stay Perl</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260068.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Is this just a clickbait subject line, or is this saying that 'Some people wanted to change Perl to be something not-Perl, but now the language is saved from those people.'?</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260068.html</id>
    <published>2021-05-24T10:00:02Z</published>
    <updated>2021-05-24T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Perl 5.34.0 is now available!</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html" type="text/html"/>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html</id>
    <published>2021-05-24T10:00:01Z</published>
    <updated>2021-05-24T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#513 - Perl 5.34.0 is now available!</title>
    <link rel="alternate" href="http://perlweekly.com/archive/513.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I am disappointed. Mohammad does not like round numbers. He was editing both the 500th edition and the 512th edition and nothing. He did not even blink an eye. I hope he will not forget to celebrate the 1024 edition.</p>
<p>On another note, perl 5.34.0 was released.</p>
<p>I am not saying it is easy, but I really enjoy the <a href="https://code-maven.com/live">live pair programming sessions</a> with Mark Gardner, Upasana Shukla, Juan J. Merelo, Erik Hulsmann, Ferenc Erki, Thomas Klausner, Ynon Perek people whom I know from the Perl community and also Shai Berger, Ivett Ördög, Rachel Normand, Tally Barak, and Laia Asensio López, people I know from other places. One day you might also want to find a partner and try it. It is nice to work with other people who think differently from you.</p>
<p>Enjoy your week</p></div>
    </content>
    <id>http://perlweekly.com/archive/513.html</id>
    <published>2021-05-24T10:00:00Z</published>
    <updated>2021-05-24T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The Witch and the Witch-hunt</title>
    <link rel="alternate" href="http://blogs.perl.org/users/leon_timmermans/2021/05/the-witch-and-the-witch-hunt.html"/>
    <id>tag:blogs.perl.org,2021:/users/leon_timmermans//150.10236</id>
    <published>2021-05-23T20:51:52Z</published>
    <updated>2021-05-23T21:21:37Z</updated>
    <author>
        <name>Leon Timmermans</name>
        <uri>http://codespeaks.blogspot.com/</uri>
    </author>
    <category term="cattpf" label="cat tpf" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/leon_timmermans/">
        <![CDATA[<p>A lot has been said about the recent CAT report and updates. It feels to me like we're not getting anywhere because the critical matters aren't being addressed.</p>
]]>
        <![CDATA[<h1>Division</h1>

<p>Right now there are two groups of people with opinions on this matter.</p>

<p>One group is appalled by the original report, because they have a number of serious concerns with the report. There was</p>

<ul>
<li>A truth-seeking process that was haphazard at best, in ways that are obvious to anyone with the slightest bit of knowledge of what happened</li>
<li>An expeditionary power-grab despite explicit requests not to do so</li>
<li>A punishment that was clearly not proportional to the incidents described</li>
<li>A willingness to cherry pick people from one side of a conflict where both sides have misbehaved.</li>
<li>An apparent willingness to punish people who associate with Subject</li>
</ul>

<p>Combined this means that people fear the CAT because this is exactly the sort of behavior that can easily result in innocent people being banned.</p>

<p>The other group was relieved that someone they have known to be toxic is finally being removed from the community. Most have had so many negative experiences with him that they'll readily believe any further accusations in his general direction without need for further evidence. Others genuinely don't care anymore how the sausage is made as long as he's eliminated from the community.</p>

<p><strong>These different worldviews make it almost impossible for people to talk about the issue at hand, because they're talking past each other</strong>. Almost any discussion on the subject quickly devolves to bickering between people saying "How can you defend this toxic person" versus people saying "how can you defend this miscarriage of justice". For a lot of people it becomes a "you're either with us or against us" type of issue. Without splitting these conversations, we can't actually meet each other eye-to-eye. <strong>One can admit that what happened here was a cockup without denying that it tries to deal with an actual issue</strong>.</p>

<h1>Accountability</h1>

<p>Simply put, it rather appears like the CAT is firmly in the second camp. Everything that happens makes sense if they already believed him to be toxic and this incident was an opportunity to kick him out for once and for all. I'm not saying this was a conspiracy or some such; I'm suggesting that they were sufficiently biased that they got sloppy in dealing with this incident, they were entirely caught off guard by opposition to what they had done. The thing is, <strong>the CAT should not be doing a witch hunt, even if we know the target to actually be a witch</strong>.</p>

<p>The CAT's (draft) charter says <em>"the CAT must be trusted and viewed as consistent and impartial"</em> and <em>"to maintain the trust of the community, the CAT must make its processes and actions transparent while not sacrificing privacy"</em> but right now a large segment of the community doesn't trust them anymore because they have failed to do exactly those things. Despite all their good intentions, the CAT's actions actively worked against those intentions by focusing on the "easy win" and made the situation more difficult the next time action needs to be taken.</p>

<p><strong>The CAT is supposed to enforce accountability in our community, but it can not credibly and effectively do that if it is not accountable itself</strong>. What TPF should have done IMHO is pull the report and let someone else redo the entire thing, but it's probably too late for that now. What they can still do to put our community on a path out of this conflict is for them to:</p>

<ol>
<li>acknowledge what they did wrong</li>
<li>answer the question "how could this have happened?"</li>
<li>apologize for it</li>
</ol>

<p>but from my conversations with them over the past five weeks it rather looks like they intend to just move on without doing any of those things.</p>

<h1>Closure</h1>

<p>We've been infighting for a full year now, for a brief moment between the PSC's <code>use v7</code> announcement and the CAT's report it seemed we might finally get some peace. The CAT clearly underestimated just how divisive this action would be, and more division is the very last thing our community needs right now. This is the thing that upsets me the most of all; I remember a few weeks ago telling myself "finally we can put all this drama behind ourselves", I even wrote a blog post with that perspective and quite the opposite has happened.</p>

<p>I am tired of conflict and very disappointed.</p>
]]>
    </content>
</entry>
  <entry>
  <title>Grant Proposal: Raku Dispatch and Compiler Improvements</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements"/>
  <id>tag:news.perlfoundation.org,2021-05-23:/post/grant_proposal_raku_dispatch_compiler_improvements</id>
  <published>2021-05-23T20:32:28</published>
  <updated>2021-05-23T20:32:28</updated>
  <summary>
  <![CDATA[
     Name Jonathan Worthington Synopsis I currently have two ongoing grants: A Raku performance and reliability grant, under which almost all the time is  currently dedicated to implementing a new generalized dispatch mechanism. Progress  so far indicate it will offer both performance improvements and simplify future  development. A RakuAST grant, which involves implementing a user-facing document object model  for the Raku programming language. This will provide a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>Name</h1>

<p>Jonathan Worthington</p>

<h1>Synopsis</h1>

<p>I currently have two ongoing grants:</p>

<ul>
<li>A Raku performance and reliability grant, under which almost all the time is
currently dedicated to implementing a new generalized dispatch mechanism. Progress
so far indicate it will offer both performance improvements and simplify future
development.</li>
<li>A RakuAST grant, which involves implementing a user-facing document object model
for the Raku programming language. This will provide a foundation for macros and
a number of other meta-programming features. A new compiler frontend is being
developed in parallel with the new AST.</li>
</ul>

<p>The first of these two grants is near the end of its funded hours. Therefore, this
grant application is most immediately for funds to continue with, and bring to
completion, the new dispatch mechanism, such that it can be delivered in MoarVM and
Rakudo releases. That grant operates on the basis of hours worked, and I'm requesting
this grant on the same basis.</p>

<p>The second of the two has some way to run, but its goal is to reach 80% coverage
of the specification test suite using the new RakuAST-based compiler frontend.
Further work will be needed beyond that, to exploit the new opportunities for
better quality code generation by the compiler as well as to make it robust
enough to become the default compiler frontend for Rakudo. Therefore, the hours
left over on this grant beyond the delivery of the new dispatch mechanism would
be allocated to furthering that effort.</p>

<h1>Benefits to Raku Development</h1>

<p>Early benchmarking of the new dispatch mechanism suggests it will bring significant
performance improvements to a number of Raku language features, and potentially
improve even on areas that are quite well optimized today. It will also simplify
the overall architecture of the Rakudo/MoarVM stack, eliminating a number of special
cases and easing further improvements. With performance still being one of the key
weak areas, improvements in this area are important. We've come a long way, but it is
not yet enough for some applications. Performance aside, the new dispatch mechanism
also stands to simplify the development of some future Raku features, and to create
new optimization opportunities.</p>

<p>RakuAST brings about the first major overhaul of the Rakudo compiler frontend in a
decade. That's a lot of time to have learned better ways to do things. On top of
that, macros remain one of the main undelivered promises of the Raku language.
RakuAST provides the foundation for delivering useful macros that can solve real
problems, as well as providing an API to the Raku language that could have many
further applications, such as implementing linters and even a Language Server
Protocol implementation to improve editor support.</p>

<h1>Project Details</h1>

<p>I have written a <a href="https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/">blog post about the new dispatch mechanism</a>,
which provides an overview of what it is about. The key remaining tasks at this
point are:</p>

<ol>
<li>Finish implementing all of the Rakudo dispatch semantics atop of the new dispatch
mechanism. This work is currently around 80% complete.</li>
<li>Switch all dispatch in Rakudo to use the new general dispatch mechanism.</li>
<li>Fix everything needed to get the specification test suite passing and the module
ecosystem looking in good shape.</li>
<li>Make the MoarVM specializer able to work more completely with the new dispatch
mechanism, so we get all of the inlining and other benefits back.</li>
<li>Switch NQP to use the new dispatch mechanism too.</li>
<li>Eliminate lots of now-unused code in MoarVM, along with the current method
caches, which shall no longer be needed.</li>
</ol>

<p>In theory, we can "ship it" before doing steps 5 and 6. In practice, we'll see
if that makes sense. I expect all of these to be completed within the hours
requested on this grant.</p>

<p>Similarly, I've given a <a href="https://jnthn.net/papers/2020-cic-rakuast.pdf">talk that lays out the rationale for RakuAST</a>.
I won't work on it under this grant until the goals of the previous one have
been reached. However, at that point the remaining work shall be:</p>

<ul>
<li>Get the new RakuAST-based compiler frontend fully passing the specification test
suite</li>
<li>Ensure that the optimizations performed by the current compiler frontend are
also achieved by the RakuAST-based one, so we can say it produces equivalent or
better bytecode than is achieved today</li>
<li>Resolve any other blockers to switching over to using RakuAST as the new compiler
frontend</li>
</ul>

<p>The hours requested under this grant may not be sufficient to complete all of these
steps, however there should at that point be a more detailed picture of what work
remains to be done.</p>

<h1>Project Schedule</h1>

<p>I expect to have exhausted the hours allocated to the current Raku Performance and
Reliability grant by the end of April 2021, and so would be ready to begin working
under this grant right away.</p>

<p>I aim for the July or August releases of Rakudo and MoarVM to use the new dispatch
mechanism, which means merging it shortly after either the June or the July release
to maximize testing time.</p>

<h1>Bio</h1>

<p>I am the founder and architect of MoarVM, the most popular runtime for Raku users,
and the architect of the Rakudo compiler. I have contributed to the implementation
of numerous Raku language features, and played a key role in the design of the
concurrent and parallel aspects of the language. I hold a degree in Computer
Science from the University of Cambridge, and actively work in the field of
developer tooling and compilation.</p>

<h1>Amount requested</h1>

<p>200 hours * $60 USD / hour = $12,000 USD</p>

<h1>Endorsed By</h1>

<p>The full Raku Steering Council (see comments on https://gist.github.com/jnthn/e8d62a0452e9fc24f7eb445139b1ff76)</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 6</title>
  <summary type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-23T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-6"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-6</id>
  <content type="html"><![CDATA[<p>
The 6th part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Weekly Challenge 113</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/23#pwc113" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a positive integer $N and a digit $D. Write a script to check if $N can be 
represented as a sum of positive integers having $D at least once. If check passes print 
1 otherwise 0.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
sub is_represented{
    my($n, $d) = @_;
    my @contains = grep { grep { $_ == $d } split(//) } (1 .. $n);
    return $n == unpack("%32C*", pack("C*",  @contains));
}

MAIN:{
    print is_represented(25, 7) + 0 . "\n";
    print is_represented(24, 7) + 0 . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0
1
</code></pre>

<h3>Notes</h3>

<p>I've been trying to avoid using regexes in these challenges recently, to help promote
some increased creativity. Here I use a nested grep to determine which numbers contain the
digit <code>$d</code>.</p>

<p>I also use one of my favorite ways to sum a list of numbers using <code>unpack</code> and <code>pack</code>!</p>

<p>By default the false value in the first example will print as an empty string. The <code>+ 0</code>
forces a numification to 0 (or 1 too) which then stringifies to what we expect.</p>

<h2>Part 2</h2>

<p><em>You are given a Binary Tree. Write a script to replace each node of the tree with the sum
of all the remaining nodes.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use Graph;
use Graph::Easy::Parser;

sub dfs_update{
    my($graph, $vertex, $graph_updated, $previous) = @_;
    my @successors = $graph-&gt;successors($vertex);
    for my $successor (@successors){
        my $sum_remaining = sum_remaining($graph, $vertex);
        $graph_updated-&gt;add_edge($previous, $sum_remaining) if $previous;
        dfs_update($graph, $successor, $graph_updated, $sum_remaining);
    }
    $graph_updated-&gt;add_edge($previous, sum_remaining($graph, $vertex)) if !@successors;
}

sub sum_remaining{
    my($graph, $visited) = @_;
    my $sum = 0;
    for my $vertex ($graph-&gt;vertices()){
        $sum += $vertex if $vertex != $visited;
    }
    return $sum;
}

sub display_graph{
    my($graph) = @_;
    my $s = $graph-&gt;stringify();
    my @s = split(/,/, $s);
    my @lines;
    for my $n (@s){
        my @a = split(/-/, $n);
        push @lines, "[ $a[0] ] =&gt; [ $a[1] ]";
    }
    my $parser = new Graph::Easy::Parser();
    my $graph_viz = $parser-&gt;from_text(join("", @lines));
    print $graph_viz-&gt;as_ascii();
}

MAIN:{
    my $graph = new Graph();
    my $graph_updated = new Graph();
    my $root = 1;
    $graph-&gt;add_edge($root, 2);
    $graph-&gt;add_edge($root, 3);
    $graph-&gt;add_edge(2, 4);
    $graph-&gt;add_edge(4, 7);
    $graph-&gt;add_edge(3, 5);
    $graph-&gt;add_edge(3, 6);
    dfs_update($graph, $root, $graph_updated);
    display_graph($graph);
    display_graph($graph_updated);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
+---+     +---+     +---+     +---+
| 1 | ==&gt; | 2 | ==&gt; | 4 | ==&gt; | 7 |
+---+     +---+     +---+     +---+
  H
  H
  v
+---+     +---+
| 3 | ==&gt; | 5 |
+---+     +---+
  H
  H
  v
+---+
| 6 |
+---+
+----+     +----+     +----+     +----+
| 27 | ==&gt; | 26 | ==&gt; | 24 | ==&gt; | 21 |
+----+     +----+     +----+     +----+
  H
  H
  v
+----+     +----+
| 25 | ==&gt; | 22 |
+----+     +----+
  H
  H
  v
+----+
| 23 |
+----+
</code></pre>

<h3>Notes</h3>

<p>Whenever I work these sort of problems with Trees and Graphs I use the 
<a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod">Graph</a> module. My main 
motivation is to maintain a consistent interface so the code I write is more re-usable for
the many problems that can be solved using a graph based approach. The problem at hand
is a clear candidate as it is explicitly stated as such. Sometimes, however, graph
problems are somewhat in disguise although the use of a graph representation will yield the
best solution.</p>

<p>The core of the solution is done via a Depth First traversal of the tree. Each vertex, as
it is visited is used to generate a new edge on a tree constructed with the conditions of
the problem statement.</p>

<p>The original and updated trees are visualized with 
<a href="https://metacpan.org/pod/Graph::Easy">Graph::Easy</a>.</p>

<h2>References</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113/">Challenge 113</a></p>

<p><a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth First Traversal</a></p>

<p><a href="https://www.oreilly.com/library/view/mastering-algorithms-with/1565923987/">Mastering Algorithms with Perl</a>
is an excellent book with a very in depth chapter on Graphs.</p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc113</id>
    <published>2021-05-23T15:33:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for March and April 2021 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2021-mar-apr"/>
  <id>tag:news.perlfoundation.org,2021-05-23:/post/dave-report-2021-mar-apr</id>
  <published>2021-05-23T14:53:15</published>
  <updated>2021-05-23T14:53:15</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund.  2: We would like to thank the TPF sponsors to make this grant possible.  3:  Did very little work in March and April  2:17 fix compiler warnings  0:38 fixup misc issues  3:46 process p5p mailbox   6:41 TOTAL 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
 2:  We would like to thank the TPF sponsors to make this grant possible.
 3: <pre>
 Did very little work in March and April</p>

<pre><code>  2:17 fix compiler warnings
  0:38 fixup misc issues
  3:46 process p5p mailbox
------
  6:41 TOTAL (HH::MM)
</code></pre>

<p></pre></p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6253412890709334243</id>
    <published>2021-05-22T21:34:00.000+02:00</published>
    <updated>2021-05-22T21:34:01.588+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxlii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RAZ/Cache-Memcached-Fast-0.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::Memcached::Fast&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl client for memcached, in C language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.26 was 1 year, 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Data-Dumper-2.180' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Dumper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - stringified perl data structures, suitable for both printing and eval &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.180&lt;/strong&gt; on 2021-05-17&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 2.173 was 2 years, 6 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMIKEW/DateTime-Format-MySQL-0.0701' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::MySQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse and format MySQL dates and times &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0701&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.06 was 5 years, 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.15.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15.0&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 85&lt;/li&gt;  &lt;li&gt;Previous version: 3.14.2 was 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.86' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a script to package Devel::AssertOS modules with your code. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.86&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.85 was 7 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.10&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.09 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-CheckLib-0.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::CheckLib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Check that a library is available for FFI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.28&lt;/strong&gt; on 2021-05-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.27 was 1 year, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.32&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.31 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.26&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.16 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.25&lt;/strong&gt; on 2021-05-22&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.24 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210521' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210521&lt;/strong&gt; on 2021-05-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210420 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XSAWYERX/perl-5.34.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;less&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Perl 5 language interpreter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.034000&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 376&lt;/li&gt;  &lt;li&gt;Previous version: 5.32.1 was 3 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9002&lt;/strong&gt; on 2021-05-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9001 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Test-Differences-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Differences&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Test strings and data structures and show differences if not ok &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-05-18&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 2 years, 2 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302185' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302185&lt;/strong&gt; on 2021-05-19&lt;/li&gt;  &lt;li&gt;Votes: 169&lt;/li&gt;  &lt;li&gt;Previous version: 1.302183 was 6 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6253412890709334243/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxlii-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6253412890709334243"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6253412890709334243"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxlii-15-great-cpan-modules-released.html" title="(cccxlii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3637119549140611582</id>
    <published>2021-05-22T21:28:00.000+02:00</published>
    <updated>2021-05-22T21:28:28.293+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxviii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 50&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl (+4)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/22 19:27:20 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::libsdl2" target="_blank"&gt;Alien::libsdl2&lt;/a&gt; - Find or download and install libsdl2&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPAN::Get" target="_blank"&gt;App::CPAN::Get&lt;/a&gt; - Base class and script for getting of dist from CPAN.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Asm::C" target="_blank"&gt;Asm::C&lt;/a&gt; - Extract macro values and structure details from C programs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::BuildMethods" target="_blank"&gt;Class::BuildMethods&lt;/a&gt; - Lightweight implementation-agnostic generic methods.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Default" target="_blank"&gt;Class::Default&lt;/a&gt; - Static calls apply to a default instantiation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Exporter" target="_blank"&gt;Class::Exporter&lt;/a&gt; - Basic utilities for writing tests.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Ref" target="_blank"&gt;Class::Ref&lt;/a&gt; - Automatic OO wrapping of container references&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone::Choose" target="_blank"&gt;Clone::Choose&lt;/a&gt; - Choose appropriate clone utility&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Package" target="_blank"&gt;Data::Package&lt;/a&gt; - Base class for packages that are purely data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP4Import::Declare" target="_blank"&gt;MOP4Import::Declare&lt;/a&gt; - Thin Meta-Object Protocol to build extensible exporters&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Soo" target="_blank"&gt;Soo&lt;/a&gt; - Simple object oriented system for Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Minify::XS" target="_blank"&gt;Text::Minify::XS&lt;/a&gt; - Simple text minification&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zapp" target="_blank"&gt;Zapp&lt;/a&gt; - Plan building, job creating web app&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::LookOfDisapproval" target="_blank"&gt;Acme::LookOfDisapproval&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PAUSE::cleanup" target="_blank"&gt;App::PAUSE::cleanup&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sourcepan" target="_blank"&gt;App::sourcepan&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Beam::Wire" target="_blank"&gt;Beam::Wire&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+2=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Repository" target="_blank"&gt;Dist::Zilla::Plugin::Repository&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter" target="_blank"&gt;Exporter&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::XSpp" target="_blank"&gt;ExtUtils::XSpp&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Tiny" target="_blank"&gt;Form::Tiny&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3" target="_blank"&gt;Gtk3&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::HTML5::Parser" target="_blank"&gt;HTML::HTML5::Parser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINE::Bot::API" target="_blank"&gt;LINE::Bot::API&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Romana::Perligata" target="_blank"&gt;Lingua::Romana::Perligata&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::AllUtils" target="_blank"&gt;List::AllUtils&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Box" target="_blank"&gt;Mail::Box&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MetaCPAN::Client" target="_blank"&gt;MetaCPAN::Client&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build" target="_blank"&gt;Module::Build&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=452)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH2::Cisco" target="_blank"&gt;Net::SSH2::Cisco&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Stats" target="_blank"&gt;PDL::Stats&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+4=376)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=121)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Alloy" target="_blank"&gt;Template::Alloy&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::VimColor" target="_blank"&gt;Text::VimColor&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TheSchwartz" target="_blank"&gt;TheSchwartz&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3637119549140611582/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxviii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637119549140611582"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637119549140611582"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxviii-metacpan-weekly-report-perl.html" title="(cdlxviii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7082185613169751502</id>
    <published>2021-05-22T21:19:00.001+02:00</published>
    <updated>2021-05-22T21:19:40.566+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxci) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-05-22 19:19:08 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67558863" target="_blank"&gt;Perl, unknown result of the `map` function&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67602931" target="_blank"&gt;How to slice only defined values?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67584968" target="_blank"&gt;How to get the number of the corresponding characters at the start of a string&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67582669" target="_blank"&gt;Managing a process with a non-returning script on a remote host&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67597682" target="_blank"&gt;Perl one liner to add text at last but one line of a large file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67644504" target="_blank"&gt;Why does repeatedly opening, appending and closing a text file cause the lines to be written in reverse order?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67640684" target="_blank"&gt;Ideas to complete a script to search in two files and extract a section of data&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67570447" target="_blank"&gt;Store perl regex capture groups in bash variables&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67570939" target="_blank"&gt;Pass html file as a route in perl dancer2 MVC framework&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67590739" target="_blank"&gt;Mojolicious source IP and user agent&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7082185613169751502/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxci-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7082185613169751502"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7082185613169751502"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxci-stackoverflow-perl-report.html" title="(cdxci) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Solving simple problems</title>
    <link rel="alternate" href="https://dev.to/davorg/solving-simple-problems-4p2f" type="text/html"/>
    <content type="html">&lt;p&gt;I write a lot of Perl. Currently, I'm spending two days a week working for a client - maintaining an old Perl codebase that drives a successful financial business. On the other days of the week, I'm writing a large Dancer application that I hope to turn into a business in the future. But sometimes, it's fun to use Perl to solve simpler problems too. Here's how I spent fifteen minutes or so this morning.&lt;/p&gt;

&lt;p&gt;I listen to music while I work. One of the joys of working from home is that I can fill the room with music and don't have to wear headphones. I tend to listen to a single artist for a couple of hours at a time. I'll just say "Hey Google, play music by [someone]" and listen until I fancy something different.&lt;/p&gt;

&lt;p&gt;But it's easy to get into a bit of a rut. I've noticed that I've spent a lot of time listening to four or five artists and, therefore, ignoring all of the other artists I enjoy listening to. This morning I had an idea of how I could work round that.&lt;/p&gt;

&lt;p&gt;I've been scrobbling most of my listening for about fifteen years. For those who don't know, "scrobbling" is the act of logging what you're listening to using an external service so that, over time, you build up an accurate picture of who you listen to. I use &lt;a href="https://last.fm"&gt;Last.FM&lt;/a&gt; and you can see &lt;a href="https://www.last.fm/user/davorg/library"&gt;what I've been listening to&lt;/a&gt; on their site.&lt;/p&gt;

&lt;p&gt;Another page on the site shows &lt;a href="https://www.last.fm/user/davorg/library/artists"&gt;my scrobbles by artist for all time&lt;/a&gt;. From there, it's easy to spot the artists who have been receiving too much attention from me recently.&lt;/p&gt;

&lt;p&gt;So I decided, I'd write a Perl program to solve this problem. This was the basic design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scrape my "artists scrobbled" page to get a list of artists and the number of scrobbles&lt;/li&gt;
&lt;li&gt;Ignore anything with over a thousand scrobbles (as that's the artists I listen to too much)&lt;/li&gt;
&lt;li&gt;Ignore anything with fewer than five hundred scrobbles (as I'm not sure how much I like those artists)&lt;/li&gt;
&lt;li&gt;Pick an artist at random from the remaining list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It didn't take long to write. The &lt;a href="https://github.com/davorg/pickanartist"&gt;code is on GitHub&lt;/a&gt; and I've reproduced it below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTML::&lt;/span&gt;&lt;span class="nv"&gt;TreeBuilder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;davorg&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.last.fm/user/&lt;/span&gt;&lt;span class="si"&gt;$username&lt;/span&gt;&lt;span class="s2"&gt;/library/artists&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;HTML::&lt;/span&gt;&lt;span class="nv"&gt;TreeBuilder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;new_from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nv"&gt;$tree&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;look_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;qr/\bchartlist\b/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;look_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;_tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;qr/chartlist-row/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;look_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;_tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;td&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;qr/chartlist-name/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;look_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;_tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;qw/chartlist-count-bar-value/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/,//gr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;look_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;_tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$artists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used &lt;a href="https://metacpan.org/pod/HTML::TreeBuilder"&gt;HTML::TreeBuilder&lt;/a&gt; because I had been reminded of its existence earlier in the week but, honestly, I'm not convinced it was the best choice. I might have a go at rewriting it using something like &lt;a href="https://metacpan.org/pod/Web::Scraper"&gt;Web::Scraper&lt;/a&gt; at some point.&lt;/p&gt;

&lt;p&gt;And as I'm writing this, I'm thinking "Doesn't Last.FM have an API? Shouldn't I have used that?" (Answer: &lt;a href="https://www.last.fm/api"&gt;yes it does&lt;/a&gt; and yes you should - so that's another fix I should make in the future.)&lt;/p&gt;

&lt;p&gt;But anyway, that's what I threw together in fifteen minutes this morning. It works, so I don't really have much incentive to do much to it (Oh, who am I trying to kid? Of course, I'm desperate to spend the next two weeks "improving" it!)&lt;/p&gt;

&lt;p&gt;I didn't expect it to be useful to anyone else, so I didn't even bother tweeting about it. But before long I got &lt;a href="https://twitter.com/wantarray/status/1395692432948355075"&gt;a tweet from @wantarray&lt;/a&gt; saying he'd taken the basic logic and used it as the basic of a program which uses &lt;a href="https://metacpan.org/pod/Audio::MPD"&gt;Audio::MPD&lt;/a&gt; to actually play the music.&lt;/p&gt;

&lt;p&gt;So I thought I'd blog about it because a) it turns out to be more useful than I thought and b) I wanted to share the joy of using a powerful programming language to solve a trivial problem in my life.&lt;/p&gt;

&lt;p&gt;How do you use Perl to make your life better?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I couldn't resist rewriting it to use the Last.FM API. It looks much nicer now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Net::&lt;/span&gt;&lt;span class="nv"&gt;LastFM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;davorg&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user.getTopArtists&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$lastfm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Net::&lt;/span&gt;&lt;span class="nv"&gt;LastFM&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;api_key&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;LASTFM_API_KEY&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s"&gt;api_secret&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;LASTFM_SECRET&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lastfm&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;request_signed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;user&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;topartists&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="nv"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;playcount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;playcount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$artists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt; &lt;span class="nv"&gt;@artists&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you now need to register for a &lt;a href="https://www.last.fm/api/account/create"&gt;Last.FM API key&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/solving-simple-problems-4p2f</id>
    <published>2021-05-21T13:02:25Z</published>
    <updated>2021-05-21T13:02:25Z</updated>
    <category term="perl"/>
    <category term="music"/>
    <category term="scrobbling"/>
    <category term="lastfm"/>
  </entry>
  <entry>
  <title>CAT: Addressing the issues, planning ahead</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-addressing-the-issues-planning-ahead"/>
  <id>tag:news.perlfoundation.org,2021-05-19:/post/cat-addressing-the-issues-planning-ahead</id>
  <published>2021-05-19T13:57:25</published>
  <updated>2021-05-19T13:57:25</updated>
  <summary>
  <![CDATA[
     This is a statement from the TPF Board of Directors. We screwed up. The TPF Board failed to make sure that the first significant test of the new CAT team and process went well. For that, **we deeply apologize**. This post will go into detail on exactly what we think went wrong, clarify a number of points, and explain how we plan to do better in the future. Our first 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a statement from the TPF Board of Directors.</p>

<p>We screwed up. The TPF Board failed to make sure that the first significant test of the new CAT team and process went well. For that, <strong>we deeply apologize</strong>.</p>

<p>This post will go into detail on exactly what we think went wrong, clarify a number of points, and explain how we plan to do better in the future.</p>

<p>Our first mistake was a focus on responding quickly to the incident reported to the CAT. Because of that, the <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">first transparency report</a> that was published was based on a draft that had not been reviewed or approved by the board. This is because the board failed to clarify the process for publishing this report.</p>

<p>Then, having moved too quickly, we were too slow to provide a correction. It took two weeks to publish <a href="https://news.perlfoundation.org/post/cat-transparency-report-updates0">the update</a>. In addition, that update did not do a good enough job of acknowledging that the first report should not have been published as is.</p>

<p>Finally, it's taken us another three weeks to publish this apology.</p>

<p>During this drawn out time, people in the Perl and Raku communities have been free to assume the worst, and a lot of misinformation has been going around uncorrected. This is entirely our fault.</p>

<p><strong>All of this has harmed our communities, harmed TPF, and harmed Perl and Raku.</strong></p>

<p>Why did this all drag out so long? Simply put, TPF is not an organization designed to move quickly. This is no one's fault. In the past, we haven't generally needed to do so. We are an entirely volunteer organization, including the board, which is made up of people spread around the world. Even finding a time where a quorum can meet is not straightforward.</p>

<p>The board has not delegated significant authority to any one individual who could have handled this incident by themselves. We have no Executive Director or any similar role. This means decision making is always done through discussion and voting.</p>

<p>Realistically, this aspect of TPF is unlikely to change. What we can do is work much harder to prevent situations that need quick responses from occurring in the first place.</p>

<h2>Transparency Report Mistakes</h2>

<p>The initial response asserted authority over aspects of the communities which are not TPF's responsibility, such as IRC, mailing lists, etc. <strong>That was simply wrong, because we do not have any authority over those services or spaces.</strong></p>

<p><strong>The initial consequence was both too harsh and poorly worded.</strong> The lifetime ban was not intended to be a "permaban", but was supposed to be an <em>indefinite</em> ban that would be lifted when the person in question demonstrated that they would not repeat their unacceptable behavior. <strong>But as was noted in the update, a lifetime ban was too harsh.</strong> And the part about this ban being reversible was simply missing from the initial report.</p>

<p>In the update, this was changed to a minimum 1 year ban. However, there were concerns in the community around this particular statement:</p>

<p>&gt; Unacceptable behavior within that 1 year period could lead to an extension or modification of the length or the terms of the ban. This includes interactions between the Subject and others in the Perl and Raku communities, even outside of TPF events and online platforms.</p>

<p>Some people interpreted "includes interactions between the Subject and others in the Perl and Raku communities" as saying that any interaction between the Subject and others in the Perl and Raku communities was grounds for extending the ban.</p>

<p>That was not the intended reading. <strong>Instead, the intended reading is that further unacceptable behavior would be grounds for extending the ban.</strong> Unacceptable behavior includes treating others in a disrespectful manner, harassment, or not respecting another person's desire to end a conversation.</p>

<h2>Other Concerns</h2>

<p><strong>A number of people in the community have stated that the Subject received no communication from the CAT before the post on the TPF blog went live. This is not true.</strong> The Subject was invited to a meeting with the CAT before the post went live, agreed to meet at a specified time, and then did not show up at that time. However, the Subject has met with the CAT since the initial report was posted.</p>

<p>Other people have expressed concern that the Subject was not allowed to present a case for their defense. The exact process of how Standards of Conduct violations should be handled is a larger topic than we can cover here. However, we do want to note that this is not a legal process, and cannot be modeled on such processes. We do not have the time, resources, or expertise to treat each case like a legal case, with a prosecution, defense, judge, and jury.</p>

<p><strong>However, we can and do commit to developing a process for handling complaints with input from the community.</strong> See later in this post for more details.</p>

<h2>Moving Forward</h2>

<p>Even though we made many mistakes, there are some parts of this affair that we do stand by.</p>

<p>Among our responsibilities, TPF runs the annual Perl and Raku Conference in North America. We cannot allow the conference to be an unsafe space. The conference is not the only space for which we are responsible, but it is our flagship. Because of that, we have an obligation to respond to Standards of Conduct complaints in order to make sure that all conference attendees feel welcome.</p>

<p>A credible complaint was made to us that ongoing problem behavior was driving one or more people from the community. The CAT investigated and felt that this complaint was correct. Because of our commitment to creating a welcoming and inclusive environment, the CAT and the board agreed that there needed to be consequences for the Subject of the investigation. We still believe that to be the case, and we are not going to reverse the final decision to issue a minimum one year ban on conference participation or participation in other TPF activities and spaces, including the TPF Slack.</p>

<p>Moreover, we are not going to dissolve the CAT or stop enforcing the Standards of Conduct, especially given that this year's conference is happening again in just four weeks.</p>

<p>Our initial postings made it sound like we think TPF gets to make decisions about every place that people gather to talk about Perl. We don't think that. We would like to help establish common expectations of what kind of behavior creates a healthy environment for interaction. We know that our missteps here have created obstacles for us to overcome, but we think the mission is worth pursuing, and that we have a responsibility to pursue it.</p>

<p>As it stands now, the CAT is in a holding pattern while the board reviews its charter and we work to define a process for handling these complaints. It won't be taking action until that's done, unless the board explicitly approves that action. We do plan to produce those documents, and we take that process seriously, both because we acknowledge the mistakes made so far and because we believe in the goal of making TPF spaces as welcoming as possible.</p>

<p>We will form an SoC team solely for the conference. They will handle incident reports during the conference. Their powers will include:</p>

<ul>
<li>Issuing warnings to conference participants.</li>
<li>Removing people from conference chat.</li>
<li>Stop a presentation if it contains unacceptable content.</li>
<li>Placing a temporary hold on publishing a presentation to YouTube.</li>
<li>Temporarily removing an already published presentation.</li>
</ul>

<p>Any further consequences, including permanently removing a presentation from YouTube, will be reviewed by the board.</p>

<p>If you would like to provide input on the charter or the process, please <a href="https://join.slack.com/t/perlfoundation/shared_invite/zt-phfb4e13-uAqqK956F0u8bTStSY8RTQ">join the #tpf-cat Slack channel</a>. (Note that this link expires on May 26. Email <a href="mailto:board@perlfoundation.org">board@perlfoundation.org</a> if you'd like to join after that time and we will invite you.)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Grab a distribution tarball from CPAN</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/grab-a-distribution-tarball-from-cpan-f25" type="text/html"/>
    <content type="html">&lt;p&gt;This is another "CPAN utils" post (sort of) but this time around resolving and fetching tarballs 😃&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#cpan"&gt;cpan -g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sourcepan"&gt;sourcepan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpan-get"&gt;cpan-get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mcpan-httpsimple"&gt;MetaCPAN::Client + HTTP::Simple&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#cpan-g"&gt;
  &lt;/a&gt;
  cpan -g &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First let's start by using the &lt;em&gt;venerable&lt;/em&gt; &lt;a href="https://metacpan.org/pod/CPAN"&gt;CPAN&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cpan -g Parser::MGC 
Checking Parser::MGC
Reading '/home/tduponchelle/.local/share/.cpan/Metadata'
  Database was generated on Sat, 15 May 2021 16:41:03 GMT
CPAN: LWP::UserAgent loaded ok (v6.53)
Fetching with LWP:
http://www.cpan.org/authors/01mailrc.txt.gz
CPAN: YAML loaded ok (v1.30)
Reading '/home/tduponchelle/.local/share/.cpan/sources/authors/01mailrc.txt.gz'
CPAN: Compress::Zlib loaded ok (v2.102)
............................................................................DONE
Fetching with LWP:
http://www.cpan.org/modules/02packages.details.txt.gz
Reading '/home/tduponchelle/.local/share/.cpan/sources/modules/02packages.details.txt.gz'
  Database was generated on Tue, 18 May 2021 12:29:03 GMT
............................................................................DONE
Debug(CPAN,CPAN.pm,703,[Index,Index.pm,483,all_objects]): mgr[CPAN=HASH(0x563dc712a9e8)] class[CPAN::Module]
Debug(CPAN,CPAN.pm,703,[Index,Index.pm,483,all_objects]): mgr[CPAN=HASH(0x563dc712a9e8)] class[CPAN::Bundle]
Debug(CPAN,CPAN.pm,703,[Index,Index.pm,483,all_objects]): mgr[CPAN=HASH(0x563dc712a9e8)] class[CPAN::Distribution]
Fetching with LWP:
http://www.cpan.org/modules/03modlist.data.gz
Reading '/home/tduponchelle/.local/share/.cpan/sources/modules/03modlist.data.gz'
DONE
Writing /home/tduponchelle/.local/share/.cpan/Metadata
Use of uninitialized value in concatenation (.) or string at /usr/share/perl/5.26/App/Cpan.pm line 1186.
Downloaded [Parser::MGC] to []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sourcepan"&gt;
  &lt;/a&gt;
  sourcepan &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Then look at the more &lt;em&gt;developer oriented&lt;/em&gt; &lt;a href="https://metacpan.org/pod/sourcepan"&gt;sourcepan&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sourcepan Acme::LSD
Reading '/home/tduponchelle/.local/share/.cpan/Metadata'
  Database was generated on Tue, 18 May 2021 12:29:03 GMT
CONTRA/Acme-LSD-0.04.tar.gz =&amp;gt; Acme-LSD-0.04.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;sourcepan --git&lt;/code&gt; could even init for you a repository...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cpanget"&gt;
  &lt;/a&gt;
  cpan-get &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Continue with the &lt;em&gt;newborn&lt;/em&gt; &lt;a href="https://metacpan.org/release/App-CPAN-Get"&gt;cpan-get&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cpan-get Test::More
'http://cpan.metacpan.org/authors/id/E/EX/EXODIST/Test-Simple-1.302183.tar.gz' was downloaded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#metacpanclient-httpsimple"&gt;
  &lt;/a&gt;
  MetaCPAN::Client + HTTP::Simple &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;And finish by a mixed &lt;a href="https://metacpan.org/pod/MetaCPAN::Client"&gt;MetaCPAN API client&lt;/a&gt; + an &lt;a href="https://metacpan.org/pod/HTTP::Simple"&gt;HTTP client&lt;/a&gt; (with no error handling at all 💀):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Init MetaCPAN client&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MetaCPAN::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$mcpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;MetaCPAN::&lt;/span&gt;&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# Resolve url&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$download_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$mcpan&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;download_url&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# Download&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTTP::&lt;/span&gt;&lt;span class="nv"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;getstore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$download_url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;download_url&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EUMM.tgz&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Should be possible fetch with MetaCPAN::Client, if you know how, please comment)&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/grab-a-distribution-tarball-from-cpan-f25</id>
    <published>2021-05-18T14:40:45Z</published>
    <updated>2021-05-18T14:40:45Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>A list of Perl list processing modules</title>
    <link rel="alternate" href="https://dev.to/mjgardner/a-list-of-perl-list-processing-modules-51jj" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://phoenixtrap.com/2021/03/16/perl_map_grep/">As previously written</a>, I like list processing. Many computing problems can be broken down into transforming and filtering lists, and <strong>Perl has got the fundamentals <a href="https://perldoc.pl/perlfunc#Functions-for-list-data">covered</a></strong> with functions like <a href="https://perldoc.pl/functions/map"><code>map</code></a>, <a href="https://perldoc.pl/functions/grep"><code>grep</code></a>, and <a href="https://perldoc.pl/functions/sort"><code>sort</code></a>. There is so much more you might want to do, though, and <a href="https://www.cpan.org/">CPAN</a> has a plethora of list and array processing modules.</p>

<p>However, due to the vicissitudes of Perl module maintenance, we have a situation where it’s not clear at a glance where to turn when you’ve got a list that needs processing. So here’s another list: <strong>the list modules of CPAN</strong>. Click through to discover what functions they provide.</p>

<ul>
<li>We’ve got <a href="https://metacpan.org/pod/List::Util"><strong>List::Util</strong></a> which has been released as part of Perl since version 5.7.3.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::MoreUtils"><strong>List::MoreUtils</strong></a> which has some functions which are named the same as Util but behave differently.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::SomeUtils"><strong>List::SomeUtils</strong></a> which duplicates MoreUtils but with fewer dependencies.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::UtilsBy"><strong>List::UtilsBy</strong></a> which MoreUtils has also cribbed some functions from.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::AllUtils"><strong>List::AllUtils</strong></a> which attempts to consolidate Util, SomeUtils, and ListBy but has some exceptions to called modules because of the aforementioned duplication between Util and SomeUtils.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::Util::MaybeXS"><strong>List::Util::MaybeXS</strong></a> which helps with pure Perl fallbacks in case your version of Util is too old to have a certain function.</li>
<li>We’ve got <a href="https://metacpan.org/pod/List::MoreUtils::XS"><strong>List::MoreUtils::XS</strong></a> which provides (some?) faster versions of MoreUtils’ functions (but you still have to <code>use</code> MoreUtils).</li>
<li>And lastly, we have <a href="https://metacpan.org/pod/Util::Any"><strong>Util::Any</strong></a> which lets you import functions from Util, MoreUtils, and just for good measure <a href="https://metacpan.org/pod/Scalar::Util">Scalar::Util</a>, <a href="https://metacpan.org/pod/Hash::Util">Hash::Util</a>, <a href="https://metacpan.org/pod/String::Util">String::Util</a>, <a href="https://metacpan.org/pod/String::CamelCase">String::CamelCase</a>, <a href="https://metacpan.org/pod/List::Pairwise">List::Pairwise</a>, and <a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a>. But it hasn’t been updated since 2016, so it doesn’t necessarily export the functions added to those modules since then.</li>
</ul>

<p><strong>Am I missing anything? Probably!</strong> But these are the ones most associated with being upstream on the <a href="http://neilb.org/tag/cpan-river/">CPAN River</a>, so they (or the modules they consolidate) have more projects depending on them.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/a-list-of-perl-list-processing-modules-51jj</id>
    <published>2021-05-18T14:00:00Z</published>
    <updated>2021-05-18T14:00:00Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="lists"/>
    <category term="map"/>
  </entry>
  <entry>
  <title>April report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-04"/>
  <id>tag:news.perlfoundation.org,2021-05-18:/post/jonathan-2021-04</id>
  <published>2021-05-18T01:27:38</published>
  <updated>2021-05-18T01:27:38</updated>
  <summary>
  <![CDATA[
     In April I focused on resumption of multiple dispatch using the new dispatch mechanism that is, using `callsame` to move to the next candidate. I observed that moving between candidates with `where` clauses is largely the same process, and was able to factor things in such a way as to exploit these commonalities. The mechanism I implemented to achieve this turns failure to bind a signature into a dispatch resumption, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>In April I focused on resumption of multiple dispatch using the new dispatch mechanism - that is, using <code>callsame</code> to move to the next candidate. I observed that moving between candidates with <code>where</code> clauses is largely the same process, and was able to factor things in such a way as to exploit these commonalities.</p>

<p>The mechanism I implemented to achieve this turns failure to bind a signature into a dispatch resumption, but with the frame that we couldn't bind removed from the call stack. While doing this work, I realized that a very similar mechanism - run some code, and resume with its return value - could come in highly useful for handling fallbacks for megamorphic callsites, where we want to run some more complex lookup code rather than building an enormous pile of inline cache entries.</p>

<p>I also hunted down a couple of implementation bugs in the dispatch mechanism shown up by testing: a thinko leading to an infinite loop in a GC mark routine, and a data race involving the allocation of storage for dispatch caches that could afflict some multi-threaded programs.</p>

<p>Finally, I started preparing the way for gradually moving towards using the new dispatcher for all dispatch in Rakudo. With the current grant hours almost being exhausted, I also submitted a grant application for the next round of TPF grants.</p>

<p><code>
Total time worked: 15 hours 19 minutes
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Developing a script in small steps</title>
    <link rel="alternate" href="https://dev.to/vkroll/common-misconception-of-beginners-51jb" type="text/html"/>
    <content type="html">&lt;p&gt;It all started with a git commit I found: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;commit 340d908fe537d3163e220c84945bbfc5b49fe8dc&lt;br&gt;
Author: A.&lt;br&gt;
Date:   Wed Apr 14 17:28:50 2021 +0200&lt;br&gt;
Deleted redundant INFO messages. Replaced date strings with dt-&amp;gt;ymd() calls. Replaced some if nots with unless. Simplified sub _unpack. Set timezone in DateTime objects. Results are returned as tail calls now. Maybe more minor changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A. is a fresh developer in my department and as many future devs she did not learn so far - neither in university nor in books - how to organize her work. How to avoid commits ending with &lt;strong&gt;Maybe more minor changes.&lt;/strong&gt; Honestly I know a lot senior devs who still use a version control system like any other backup. So what I wanted to show her, was: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to organize my programming in small steps&lt;/li&gt;
&lt;li&gt;How slowly developing &lt;/li&gt;
&lt;li&gt;How to make errors without desaster&lt;/li&gt;
&lt;li&gt;How to use your version control&lt;/li&gt;
&lt;li&gt;How to write a helpful commit-message&lt;/li&gt;
&lt;li&gt;How will I later find something I did&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I started a programming-session on my own, and gave her later the repository and we discussed each step. (Honestly: She found immediately an error in my code, that I did not left there intentionally).&lt;/p&gt;

&lt;p&gt;The development was in perl, but I hope other devs find the steps valueable too, so I write it down here. (My first longer article in english)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-one-all-started-with-a-readme"&gt;
  &lt;/a&gt;
  Step one: all started with a README
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Script with parameters
    -d Date
        -&amp;gt; has to be in the past
        -&amp;gt; must be no older then 7 days

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course that was the first commit: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;commit &lt;br&gt;
Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 16:49:17 2021 +0200&lt;/p&gt;

&lt;p&gt;README&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we will have the requirements here&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#now-the-fun-started-the-initial-script"&gt;
  &lt;/a&gt;
  Now the fun started, the initial script
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;

use Getopt::Long;

my $date ; ## the startingdate

GetOptions(
        "date=s"         =&amp;gt; \$date,
        );

print "submitted Date is: $date\n";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The perl people know, that script does not much more then storing a submitted string as parameter --date or -d in the scalar variable $date.&lt;br&gt;
And of course it uses strict as every good perl script does. &lt;/p&gt;

&lt;p&gt;I committed this change: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll&lt;br&gt;
Date:   Wed May 5 16:52:01 2021 +0200&lt;/p&gt;

&lt;p&gt;initial&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameter d for the date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#as-promised-a-validation"&gt;
  &lt;/a&gt;
  As promised a validation
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## starts as before
sub is_date {
    my $date = shift;

    return 1 if $date =~ /^\d\d\d\d-\d\d-\d\d$/;
    return 0;

}
if(is_date($date)) {
    print "submitted Date is: $date\n";
}
else {
    print "submitted value $date is no date\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I checked if the submitted date matches the regex &lt;code&gt;^\d\d\d\d-\d\d-\d\d$&lt;/code&gt; - you are aware, that we perl-devs solve our problems with regexes right?&lt;/p&gt;

&lt;p&gt;But enough for the next commit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 16:54:49 2021 +0200&lt;/p&gt;

&lt;p&gt;first check for date&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date is valid if regex \d\d\d\d-\d\d-\d\d is valid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;better check&lt;/li&gt;
&lt;li&gt;exclude non valid month and day&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#more-checks"&gt;
  &lt;/a&gt;
  More checks
&lt;/h1&gt;

&lt;p&gt;As announced the next step was to better check for the validity of the date  - and stay tuned these steps will be changed later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub is_date {
    my $date = shift;

    my $days = ["", 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    my($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    if ($m &amp;gt; 0 &amp;amp;&amp;amp; $m &amp;lt; 13) {
        print "$m has max $days-&amp;gt;[$m] days\n";
        return 1 if $d &amp;lt;= $days-&amp;gt;[$m];
    }

    return 0;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the next commit even though theses checks are far from perfect&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:00:23 2021 +0200&lt;/p&gt;

&lt;p&gt;more checking of date via regex&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added length per month value&lt;/li&gt;
&lt;li&gt;check if day is possible in the month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;that is a bad choice for february&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-correct-the-february"&gt;
  &lt;/a&gt;
  Let's correct the february
&lt;/h1&gt;

&lt;p&gt;As we saw, my checks did not really work in february - only in leap-years, so I had to handle that with a check wether it is a leap year or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub is_date {
    my $date = shift;

    my $days = ["", 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    my($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    if (is_leap_year($y)) {
        $days-&amp;gt;[2] = 29;
    }

    if ($m &amp;gt; 0 &amp;amp;&amp;amp; $m &amp;lt; 13) {
        print "$m has max $days-&amp;gt;[$m] days\n";
        return 1 if $d &amp;lt;= $days-&amp;gt;[$m];
    }
    return 0;
}

sub is_leap_year {
    my $y = shift;

    if ($y % 4 == 0) {
        return 1 if $y % 400 == 0;
        return 0 if $y % 100 == 0;
        return 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now february is handled correctly in every year. So, up the next commit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:07:06 2021 +0200&lt;/p&gt;

&lt;p&gt;check works even for february&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new function is_leap_year
TODO&lt;/li&gt;
&lt;li&gt;Refactoring - Removing of all own written calendar functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#refactoring-use-of-date-modules"&gt;
  &lt;/a&gt;
  Refactoring - Use of Date Modules
&lt;/h1&gt;

&lt;p&gt;I had to remove my not so elegant and error-prone date-functions. To get you back on track, here is the whole script after removing that and adding a suitable date module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;

use Getopt::Long;
use DateTime;

my $date ; ## the startingdate

GetOptions(
        "date=s"         =&amp;gt; \$date,
        );

sub is_date {
    my $date = shift;

    my $days = ["", 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    my($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    my $dt;
    eval {
        $dt = DateTime-&amp;gt;new(year =&amp;gt; $y, month =&amp;gt; $m, day =&amp;gt; $d);
    }; 
    if ($@) {
        print STDERR "Error while generating DateTime: $@\n";
        return 0;
    }
    else {
        return $dt;
    }
}


if(is_date($date)) {
    print "submitted Date is: $date\n";
}
else {
    print "submitted value $date is no date\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using now &lt;a href="https://metacpan.org/pod/DateTime"&gt;DateTime&lt;/a&gt; for every date operation. If no DateTime object can be created we assume, that the submitted value is not correct and return 0, else we return a DateTime Object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:24:41 2021 +0200&lt;/p&gt;

&lt;p&gt;removed own calendar functions and added DateTime&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;validation via Exception of DateTime-&amp;gt;new()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring: rename function is_date (returns a dt if true)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe you saw, that I forgot to remove the arry with the days per month... I saw it now, while I write this article&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clean-it-up-12"&gt;
  &lt;/a&gt;
  Clean it up 1/2
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;

use Getopt::Long;
use DateTime;

my $date;   ## the starting date argument
my $dt;     ## DateTime Object of starting date


GetOptions(
        "date=s"         =&amp;gt; \$date,
        );

sub get_dt {
    my $date = shift;

    my $days = ["", 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    my($y, $m, $d) = $date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    my $dt;
    eval {
        $dt = DateTime-&amp;gt;new(year =&amp;gt; $y, month =&amp;gt; $m, day =&amp;gt; $d);
    }; 
    if ($@) {
        print STDERR "Error while generating DateTime: $@\n";
        return 0;
    }
    else {
        return $dt;
    }
}

$dt = get_dt($date);

if($dt) {
    print "submitted Date is: $date\n";
}
else {
    print "submitted value $date is no date\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything I did is mentioned in the commit-message (and there is still that array of days...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:28:04 2021 +0200&lt;/p&gt;

&lt;p&gt;moved function is_date to get_dt&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check is now if return of get_dt is a true value
 a DateTime Object is a true value
 0 is not
 =&amp;gt; so the check still works
 =&amp;gt; so we have already a working DateTime Object to work with later&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#clean-it-up-22"&gt;
  &lt;/a&gt;
  Clean it up 2/2
&lt;/h1&gt;

&lt;p&gt;Now I moved around the code a bit to make it more readable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;

use Getopt::Long;
use DateTime;

my $date;   ## the starting date argument
my $dt;     ## DateTime Object of starting date


GetOptions(
        "date=s"         =&amp;gt; \$date,
        );

$dt = get_dt($date);

if($dt) {
    print "submitted Date is: $date\n";
}
else {
    print "submitted value $date is no date\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The sub get_dt remained the same (and there is still that array)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll&lt;br&gt;
Date:   Wed May 5 17:31:00 2021 +0200&lt;/p&gt;

&lt;p&gt;moved main code up in the file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#now-for-more-functionality"&gt;
  &lt;/a&gt;
  Now for more functionality
&lt;/h1&gt;

&lt;p&gt;As we remember the day has to be in the past. So we need to check that. DateTime Objects can easily be compared and DateTime has a function called today(). So my first step was:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$dt = get_dt($date);
my $today = DateTime-&amp;gt;today();



if(!$dt) {
    print "submitted value $date is no date\n";
}
if($dt &amp;lt; $today) {
    print "submitted date is in the past\n";
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was easy and it worked out of the box.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:33:56 2021 +0200&lt;/p&gt;

&lt;p&gt;check if submitted date is in the past&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added new DateTime Object $today&lt;/li&gt;
&lt;li&gt;compare $today and DateTime Object of submitted date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;next check: not older then 7 days (see README)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#but-first-lets-remove-this-array"&gt;
  &lt;/a&gt;
  But first let's remove this array....
&lt;/h1&gt;

&lt;p&gt;I think you know how a not existing line looks nevertheless that was worth a commit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:37:45 2021 +0200&lt;/p&gt;

&lt;p&gt;removed old arrayref for days in the month&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#check-if-it-was-in-the-last-week"&gt;
  &lt;/a&gt;
  Check if it was in the last week
&lt;/h1&gt;

&lt;p&gt;In our requirements was that the date has to be in the last seven days. (Whatever that means in detail)&lt;/p&gt;

&lt;p&gt;Time for another Date Module &lt;a href="https://metacpan.org/pod/DateTime::Duration"&gt;DateTime::Duration&lt;/a&gt; to calculate that difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(is_last_week($dt)) {
    print "submitted date was in the last week\n";
}

sub is_last_week {
    my $dt = shift;
    return unless ref $dt eq "DateTime";

    my $dur = DateTime::Duration-&amp;gt;new(days =&amp;gt; 7);
    $dt-&amp;gt;add_duration($dur);
    return 1 if $today &amp;lt; $dt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think that code is easily to understand even for not perl-devs. I add 7 days to the submitted date and compare it with today. (Here is the error that my colleague found immediatly - but more about the bug later).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;br&gt;
Date:   Wed May 5 17:45:57 2021 +0200&lt;/p&gt;

&lt;p&gt;check for is_last_week&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added DateTime::Duration&lt;/li&gt;
&lt;li&gt;checked if submitted date was in the last 7 days&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring: Add the check for in the past in is_last_week&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h1&gt;

&lt;p&gt;As mentioned in the TODO we removed the "is in the past" check from the main and added it to the is_last_week&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub is_last_week {
    my $dt = shift;
    return unless ref $dt eq "DateTime";
    return if($dt &amp;gt; $today) ;

    my $dur = DateTime::Duration-&amp;gt;new(days =&amp;gt; 7);
    $dt-&amp;gt;add_duration($dur);
    return 1 if $today &amp;lt; $dt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally all this would end with the this commit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: Volker Kroll &lt;a href="mailto:kroll@strato.de"&gt;kroll@strato.de&lt;/a&gt;&lt;br&gt;
Date:   Wed May 5 17:48:31 2021 +0200&lt;/p&gt;

&lt;p&gt;is_last_week now a valid check for date concerning to specification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-bug"&gt;
  &lt;/a&gt;
  The bug
&lt;/h1&gt;

&lt;p&gt;As I wrote before, my colleague spotted a bug in my code. I got this question via chat:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A:     The line $dt-&amp;gt;add_duration($dur); made me wonder. Is the dt object not changed then? Is this call by value or call by reference?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And she was right. So the next commit was from her, modifying my code and correcting it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;diff --git a/skript.pl b/skript.pl
index 2f5594b..426c4af 100644
--- a/skript.pl
+++ b/skript.pl
@@ -30,7 +30,8 @@ sub is_last_week {
     return if($dt &amp;gt; $today) ;

     my $dur = DateTime::Duration-&amp;gt;new(days =&amp;gt; 7);
-    $dt-&amp;gt;add_duration($dur);
+    #$dt-&amp;gt;add_duration($dur);
+    $today-&amp;gt;subtract_duration($dur);
     return 1 if $today &amp;lt; $dt;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;She changed the direction of the math and modified the no longer used $today&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author: A.&lt;br&gt;
Date:   Fri May 7 12:38:15 2021 +0200&lt;/p&gt;

&lt;p&gt;is_last_week subtracts from today instead of adding to dt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the script was correct concerning the requirements. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Of course this is a little bit artificial - and most devs will need to confess that they usually commit much bigger chunks of code. Nevertheless, I think it is valuable to develop in these small chunks.&lt;/p&gt;

&lt;p&gt;Next steps were making it a bit more modular and added automated tests for further development. But for today this shall be enough.&lt;/p&gt;

</content>
    <author>
      <name>Volker Kroll</name>
    </author>
    <id>https://dev.to/vkroll/common-misconception-of-beginners-51jb</id>
    <published>2021-05-17T17:51:25Z</published>
    <updated>2021-05-17T17:51:25Z</updated>
    <category term="beginners"/>
    <category term="perl"/>
    <category term="learning"/>
  </entry>
  <entry>
  <title>RakuAST Grant Report 2021-04</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuast-grant-report-2021-04"/>
  <id>tag:news.perlfoundation.org,2021-05-17:/post/rakuast-grant-report-2021-04</id>
  <published>2021-05-17T14:14:03</published>
  <updated>2021-05-17T14:14:03</updated>
  <summary>
  <![CDATA[
     Jonathan wrote an update to his RakuAST grant RakuAST continues to grow to cover more of the Raku language, and the new RakuAST-based compiler frontend advances along with it. This month saw 30 further spectest files start passing in full using the new compiler frontend. New AST nodes were created and compilation implemented for the following language constructs: Placeholder parameters, both positional and named Sigilless variable declarations Loop labels The 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan wrote an update to his RakuAST grant (already a week ago, publishing delay is my fault):</p>

<hr />

<p>RakuAST continues to grow to cover more of the Raku language, and the new RakuAST-based compiler frontend advances along with it. This month saw 30 further spectest files start passing in full using the new compiler frontend.</p>

<p>New AST nodes were created and compilation implemented for the following language constructs:</p>

<ul>
<li>Placeholder parameters, both positional and named</li>
<li>Sigilless variable declarations</li>
<li>Loop labels</li>
<li>The <code>!</code> infix prefix meta-operator</li>
<li>Code blocks in regexes</li>
<li>The <code>**</code> regex quantifier with literal and calculated values</li>
</ul>

<p>Furthermore, some existing AST nodes were made more complete and some other shortcomings were addressed:</p>

<ul>
<li>Correctly compile the smartmatch operator (the RHS should be evaluated with the LHS as the topic)</li>
<li>Compile the <code>:=</code> bind operator, except signature-based destructuring</li>
<li>Fix a bug in the compilation of <code>loop</code> without a condition</li>
<li>Parse and attach parameter traits</li>
<li>Implement compilation of signature binding for the <code>is rw</code> and <code>is raw</code> traits</li>
<li>Parse <code>my sub ...</code></li>
<li>Fix a compilation bug with <code>if /foo/ {}</code></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weekly Challenge 113</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-113-4g2d" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-113/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-113/sgreen">My solutions</a></p>

<h1>
  <a href="#task-1-represent-integer">
  </a>
  TASK #1 › Represent Integer
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a positive integer <code>$N</code> and a digit <code>$D</code>.</p>

<p>Write a script to check if <code>$N</code> can be represented as a sum of positive integers having <code>$D</code> at least once. If check passes print <code>1</code> otherwise <code>0</code>.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>On my commute home, I thought this was really straight forward. If I can multiply <code>$D</code> by a certain number of times and have a remainder that is a multiple of ten, then we have an answer. It works for the two examples provided.</p>

<p>However that won't always work. Take '103' and '5' as an example. A solution of 58 + 45 is valid, but doesn't meet the above criteria. Bugger.</p>

<p>First off I short circuit two possible solutions and exit if either is true. The first is if <code>$N</code> contains the digit <code>$D</code>. The second is if <code>$N</code> is divisible by <code>$D</code> with no remainder. Simples.</p>

<p>Now it's time to determine if any combination of two or more eligible numbers can be used to find a solution. For this part I create an array <code>@numbers</code> which contain all numbers from 1 to one less than the target that contain the digit <code>$D</code>, ordered from highest to lowest. Ideally this will give us the shortest solution, but not always. For example using an input of 37 and 2 will show up as 29 + 2 + 2 + 2 + 2 rather than 25 + 12.</p>

<p>I then use a recursive function <code>_find_numbers</code> to see if there is a working solution. The parameters are the remaining target, the list of numbers used in this calculation, and the array of all possible numbers (the list in the above paragraph).</p>

<p>Finally I display the solution, including the calculation (or <code>0</code> if there is none).</p>

<p>I'm really not sure if the recursive function is the best solution. I tend to use it when it's not always needed. If I wasn't going to use a recursive function my alternate was to started with <code>@numbers</code> and then use a map to create a two dimensional array of all possible combinations while removing any sums exceeding the target. And keep adding combinations until we have exhausted all possible solutions.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl 25 7
Output: 0

» ./ch-1.pl 24 7
Output: 1 (17 + 7)

» ./ch-1.pl 103 5
Output: 1 (58 + 45)
</code></pre>

</div>



<h1>
  <a href="#task-2-recreate-binary-tree">
  </a>
  TASK #2 › Recreate Binary Tree
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given a Binary Tree.</p>

<p>Write a script to replace each node of the tree with the sum of all the remaining nodes.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>After being criticised in both challenge 093 and 094 for parsing the input as a file, I'm taking a different tact for this task, and probably being a bit too liberal in doing so.</p>

<p>The idea is to provide the list in a JSON or YAML format and it will output the solution the same format. As readers of my blogs will know, I generally don't use non core modules. The beauty of my solution is that it doesn't actually care what the format is.</p>

<p>With that in mind, I do two simple steps. The first is to get a sum of all numbers in the string. The second is to replace all numbers with the sum minus that number.</p>

<p>If JSON is used, this can be prettified by using a tool like <a href="https://stedolan.github.io/jq/">jq</a> or <a href="http://mikefarah.github.io/yq/">yq</a></p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl '{  1: { 2: { 4: [7]}, 3: [5, 6]}}'|yq eval -P
27:
  26:
    24:
      - 21
  25:
    - 23
    - 22
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-113-4g2d</id>
    <published>2021-05-17T13:07:07Z</published>
    <updated>2021-05-17T13:07:07Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 112</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/16#pwc112" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to convert the given absolute path to the simplified canonical path.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to convert the given absolute path to the simplified canonical path.
# The canonical path format:
#     - The path starts with a single slash '/'.
#     - Any two directories are separated by a single slash '/'.
#     - The path does not end with a trailing '/'.
#     - The path only contains the directories on the path from the root directory to the target file or directory
##
sub leading_slash{
    my($path) = @_;
    $path = "/" . $path if substr($path, 0, 1) ne "/";
    return $path;  
}

sub single_seperator{
    my($path) = @_;
    $path =~ s#\/\/#\/#;
    return $path;  
}

sub trailing_slash{
    my($path) = @_;
    chop($path) if substr($path, length($path) - 1, 1) eq "/";
    return $path; 
}

sub up_stay{
    my($path) = @_;
    my @directories = split(/\//, substr($path, 1)); 
    my @temp_path; 
    for my $d (@directories){
        push @temp_path, $d if $d ne "." &amp;&amp; $d ne ".."; 
        pop @temp_path if $d eq ".."; 
        next if $d eq ".";      
    }  
    return "/" . join("/", @temp_path);   
}

sub canonical_path{
    my($path) = @_; 
    return up_stay(trailing_slash(single_seperator(leading_slash($path))));  
} 

MAIN:{
    while(&lt;DATA&gt;){
        chomp;
        print canonical_path($_) . "\n"; 
    }  
}

__DATA__
/a/
/a/b//c/
/a/b/c/../..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
/a
/a/b/c
/a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The challenge I set for myself here was to completely avoid any use of regular 
expressions! I think I pulled it off, more or less. I am not quite sure I covered every
possible corner case, but it works for the examples given.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given $n steps to climb. Write a script to find out the distinct ways to climb 
to the top. You are allowed to climb either 1 or 2 steps at a time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given $n steps to climb
# Write a script to find out the distinct ways to climb to the top.
# You are allowed to climb either 1 or 2 steps at a time.
##
use Array::Compare;
use Algorithm::Combinatorics q/variations_with_repetition/;

sub steps{
    my($k) = @_;
    my @data = (0, 1, 2);
    my @steps;
    my $comparison = new Array::Compare();
    my $iterator = variations_with_repetition(\@data, $k);
    while(my $combination = $iterator-&gt;next()){
        if(unpack("%32C*", pack("C*", @{$combination})) == $k){
            my $step = [grep {$_ != 0} @{$combination}];
            push @steps, $step if(!grep {$comparison-&gt;compare($_, $step)} @steps);
        }
    }
    return @steps;
}

MAIN:{
    my @steps;
    @steps = steps(3);
    print "k = 3\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(4);
    print "\nk = 4\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
    @steps = steps(5);
    print "\nk = 5\n";
    for my $steps (@steps){
        my $option;
        for my $step (@{$steps}){
            $option .=  "$step step + "  if $step == 1;
            $option .=  "$step steps + " if $step == 2;
        }
        chop($option);
        chop($option);
        print "$option\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
k = 3
1 step + 2 steps
2 steps + 1 step
1 step + 1 step + 1 step

k = 4
2 steps + 2 steps
1 step + 1 step + 2 steps
1 step + 2 steps + 1 step
2 steps + 1 step + 1 step
1 step + 1 step + 1 step + 1 step

k = 5
1 step + 2 steps + 2 steps
2 steps + 1 step + 2 steps
2 steps + 2 steps + 1 step
1 step + 1 step + 1 step + 2 steps
1 step + 1 step + 2 steps + 1 step
1 step + 2 steps + 1 step + 1 step
2 steps + 1 step + 1 step + 1 step
1 step + 1 step + 1 step + 1 step + 1 step
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Rather than pursue some sort of algorithmic elegance and optimization I decided to 
try what is effectively a brute force approach. For small values of &lt;code&gt;$k&lt;/code&gt; this works quite
nicely with the above example output generated in about a second on very modest hardware
(an approximately 20 year old 450Mhz G4 Power Macintosh). Naturally we face a 
&lt;em&gt;combinatorial explosion&lt;/em&gt; for larger values of &lt;code&gt;$k&lt;/code&gt;. For larger input values consider
a graph search with memoization!&lt;/p&gt;

&lt;p&gt;Overview of this brute force approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate all arrays of numbers of length &lt;code&gt;$k&lt;/code&gt; using digits 0, 1, and 2.
&lt;/li&gt;
&lt;li&gt;Keep all those arrays that sum to &lt;code&gt;$k&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove zeroes from these matching arrays
&lt;/li&gt;
&lt;li&gt;Remove duplicate arrays 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combinations are generated using 
&lt;a href="https://metacpan.org/pod/Algorithm::Combinatorics"&gt;Algorithm::Combinatorics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Duplicate array removal is facilitated by 
&lt;a href="https://metacpan.org/pod/Array::Compare"&gt;Array::Compare&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112/"&gt;Challenge 112&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc112</id>
    <published>2021-05-16T18:10:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Disk space usage of CPAN authors (May 16, 2021 edition)</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" type="text/html"/>
    <content type="html">&lt;p&gt;Prompted by &lt;a href="http://neilb.org/2021/05/10/delete-your-old-releases.html"&gt;this post&lt;/a&gt; on PAUSE running out of disk space, I thought I&amp;#039;d refresh my own post &amp;quot;&lt;a href="https://perlancar.wordpress.com/2019/12/26/top-50-authors-by-disk-space-on-backpan/"&gt;Top 50 authors by disk space on BackPAN&amp;quot;&lt;/a&gt; (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. &lt;/p&gt;
&lt;p&gt;&lt;h2&gt;On CPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="https://www.cpan.org/indices/find-ls.gz" rel="nofollow"&gt;https://www.cpan.org/indices/find-ls.gz&lt;/a&gt; (~14MB as of this writing), but more readily used: &lt;a href="https://www.cpan.org/indices/du-k.gz" rel="nofollow"&gt;https://www.cpan.org/indices/du-k.gz&lt;/a&gt; (~80KB as of this writing). &lt;/p&gt;
&lt;p&gt;Total size of CPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;.&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;29.0GB
&lt;/pre&gt;
&lt;p&gt; So, CPAN is not that big by today&amp;#039;s standards and I would guess that it&amp;#039;s growing at a relatively regular pace. Also the first post does not give details on the spec of PAUSE&amp;#039;s server nor the exact thing that caused the disk to be full, but anyway. &lt;/p&gt;
&lt;p&gt;Total size of &lt;tt&gt;authors/id/&lt;/tt&gt; directory: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and printf &amp;quot;%.1fGB\n&amp;quot;, $F[0]/1024/1024 and last&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;28.0GB
&lt;/pre&gt;
&lt;p&gt; Not much surprise here. The &lt;tt&gt;authors/id/&lt;/tt&gt; directory is where CPAN authors upload to. Outside of this directory, it&amp;#039;s mostly just indices (&lt;tt&gt;modules/&lt;/tt&gt;, &lt;tt&gt;indices/&lt;/tt&gt;) or stuffs like old scripts (&lt;tt&gt;scripts/&lt;/tt&gt;) and ancient Perl sources/binaries (&lt;tt&gt;src/&lt;/tt&gt;, &lt;tt&gt;ports/&lt;/tt&gt;). &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat du-k.gz | perl -lne&amp;#039;@F=split /\s+/, $_, 2; $F[1] eq &amp;quot;./authors/id&amp;quot; and $total = $F[0]; $F[1] =~ m!authors/id/./../(\w+)! or next; $sizes{$1}=$F[0]; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $sizes{$_}/1024, $sizes{$_}/$total*100 for sort { $sizes{$b}&amp;lt;=&amp;gt;$sizes{$a} } keys %sizes }&amp;#039; | head -n50
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;     SHAY 2397.8MB ( 8.4%)
   LSKATZ 1144.4MB ( 4.0%)
     RJBS  938.6MB ( 3.3%)
 XSAWYERX  778.9MB ( 2.7%)
TIEDEMANN  612.7MB ( 2.1%)
      LDS  535.6MB ( 1.9%)
    GIBUS  460.2MB ( 1.6%)
  TMILLER  362.7MB ( 1.3%)
   BINGOS  322.3MB ( 1.1%)
  ABIGAIL  321.8MB ( 1.1%)
   OLIVER  311.3MB ( 1.1%)
PERLANCAR  296.2MB ( 1.0%)
 WOLFSAGE  268.9MB ( 0.9%)
    JESSE  259.6MB ( 0.9%)
    FLORA  239.3MB ( 0.8%)
  VANSTYN  208.2MB ( 0.7%)
SUNDQUIST  192.7MB ( 0.7%)
   STEVEB  191.4MB ( 0.7%)
   DGINEV  189.7MB ( 0.7%)
 CJFIELDS  183.1MB ( 0.6%)
 PAWAPAWA  179.3MB ( 0.6%)
  NWCLARK  177.0MB ( 0.6%)
      SRI  176.7MB ( 0.6%)
      ARC  169.4MB ( 0.6%)
    ETHER  158.5MB ( 0.6%)
 JDDPAUSE  146.0MB ( 0.5%)
 DAGOLDEN  137.3MB ( 0.5%)
      KAL  133.3MB ( 0.5%)
   RENEEB  132.1MB ( 0.5%)
   ABRETT  131.8MB ( 0.5%)
     TVDW  129.2MB ( 0.5%)
   ZEFRAM  127.1MB ( 0.4%)
 GRIBUSER  124.4MB ( 0.4%)
    MOTIF  122.9MB ( 0.4%)
   STEVAN  116.0MB ( 0.4%)
 MIYAGAWA  109.7MB ( 0.4%)
  DROLSKY  109.1MB ( 0.4%)
     DAPM  109.0MB ( 0.4%)
  ATOOMIC  105.9MB ( 0.4%)
   CORION   94.1MB ( 0.3%)
 LBROCARD   93.3MB ( 0.3%)
      MGV   92.4MB ( 0.3%)
    ADAMK   88.5MB ( 0.3%)
  RGARCIA   88.1MB ( 0.3%)
     LETO   86.6MB ( 0.3%)
 BRMILLER   79.6MB ( 0.3%)
  ASLEWIS   78.7MB ( 0.3%)
      JWB   77.1MB ( 0.3%)
 GENEHACK   77.0MB ( 0.3%)
 AUTRIJUS   76.8MB ( 0.3%)
&lt;/pre&gt;
&lt;h2&gt;On BackPAN&lt;/h2&gt;
&lt;p&gt; Source: &lt;a href="http://backpan.cpantesters.org/backpan-full-index.txt.gz" rel="nofollow"&gt;http://backpan.cpantesters.org/backpan-full-index.txt.gz&lt;/a&gt; (~14MB as of this writing) &lt;/p&gt;
&lt;p&gt;Total size of files on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;/.+ \d+ (\d+)$/ or next; $size+=$1; END { printf &amp;quot;%.1fGB\n&amp;quot;, $size/1024/1024/1024 }&amp;#039;
&lt;/pre&gt;
&lt;pre class="fixed_width_section"&gt;78.5GB
&lt;/pre&gt;
&lt;p&gt; This is a 9.50% increase from Dec 26, 2019. &lt;/p&gt;
&lt;p&gt;Top 50 authors by disk space usage on BackPAN: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% zcat backpan-full-index.txt.gz | perl -lnE&amp;#039;m!authors/id/./../(\w+)/.+ (\d+) (\d+)$! or next; $size{$1}+=$3; END { printf &amp;quot;%9s %6.1fMB (%4.1f%%)\n&amp;quot;, $_, $size{$_}/1024/1024, $size{$_}/1024/1024/73445.3*100 for sort { $size{$b}&amp;lt;=&amp;gt;$size{$a} } keys %size }&amp;#039; | head -n50
 REEDFISH 9607.0MB (13.1%)
     SHAY 2423.3MB ( 3.3%)
   LSKATZ 1771.1MB ( 2.4%)
     RJBS 1761.0MB ( 2.4%)
      ZDM 1724.6MB ( 2.3%)
PERLANCAR 1322.5MB ( 1.8%)
   AJPAGE 1218.4MB ( 1.7%)
 XSAWYERX 1185.4MB ( 1.6%)
TIEDEMANN 1090.9MB ( 1.5%)
      KAL  957.1MB ( 1.3%)
DCANTRELL  873.4MB ( 1.2%)
      LDS  767.1MB ( 1.0%)
   BINGOS  747.7MB ( 1.0%)
    JKEGL  692.0MB ( 0.9%)
      INA  639.6MB ( 0.9%)
    JESSE  625.7MB ( 0.9%)
BTMCINNES  615.8MB ( 0.8%)
   DGINEV  575.2MB ( 0.8%)
  DROLSKY  546.8MB ( 0.7%)
      SRI  539.1MB ( 0.7%)
 JDDPAUSE  520.5MB ( 0.7%)
      CHM  495.5MB ( 0.7%)
 PAWAPAWA  474.2MB ( 0.6%)
 AREIBENS  470.2MB ( 0.6%)
    GIBUS  459.7MB ( 0.6%)
  RKELSCH  452.3MB ( 0.6%)
  NWCLARK  435.6MB ( 0.6%)
  TMILLER  433.5MB ( 0.6%)
   OLIVER  428.6MB ( 0.6%)
 CJFIELDS  427.6MB ( 0.6%)
   STEVEB  426.6MB ( 0.6%)
     AMBS  397.5MB ( 0.5%)
    ADAMK  374.4MB ( 0.5%)
EARONESTY  370.6MB ( 0.5%)
 MLEHMANN  355.6MB ( 0.5%)
     JGNI  353.6MB ( 0.5%)
 DANKOGAI  349.0MB ( 0.5%)
    ETHER  339.8MB ( 0.5%)
   NHORNE  334.9MB ( 0.5%)
  ABIGAIL  327.2MB ( 0.4%)
  ASLEWIS  315.2MB ( 0.4%)
  GRAHAMC  295.0MB ( 0.4%)
  MARTIMM  293.3MB ( 0.4%)
 MIYAGAWA  290.8MB ( 0.4%)
    HISSO  276.6MB ( 0.4%)
   CORION  271.8MB ( 0.4%)
  VANSTYN  271.1MB ( 0.4%)
 WOLFSAGE  269.2MB ( 0.4%)
      ETJ  268.6MB ( 0.4%)
 DBAURAIN  267.5MB ( 0.4%)
&lt;/pre&gt;
&lt;p&gt; Some authors have mentioned that they would like to have their old releases purged from BackPAN as well, but from what I see so far this does not seem to have happened yet. &lt;/p&gt;
&lt;p&gt;Also if you see, some authors have not done much purging. I remember someone produced percentage number of an individual author&amp;#039;s CPAN/BackPAN usage as a measure of &amp;quot;cleanup&amp;quot;, but can&amp;#039;t remember who and where.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Prompted by this post on PAUSE running out of disk space, I thought I'd refresh my own post "Top 50 authors by disk space on BackPAN" (Dec 26, 2019) and add a stat for CPAN too. Hopefully this will be a regular post, ish. On CPAN Source: https://www.cpan.org/indices/find-ls.gz (~14MB as of this writing), but more … <a href="https://perlancar.wordpress.com/2021/05/16/disk-space-usage-of-cpan-authors-may-16-2021-edition/" class="more-link">Continue reading <span class="screen-reader-text">Disk space usage of CPAN authors (May 16, 2021 edition)</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1943</id>
    <published>2021-05-16T08:48:50Z</published>
    <updated>2021-05-16T08:48:50Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="backpan"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7204722919735501600</id>
    <published>2021-05-15T21:13:00.000+02:00</published>
    <updated>2021-05-15T21:13:40.612+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxli) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.38 was 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.25&lt;/strong&gt; on 2021-05-11&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.24 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.10&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 6.07 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.09&lt;/strong&gt; on 2021-05-14&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.08 was 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.09&lt;/strong&gt; on 2021-05-14&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.08 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYOHEX/Furl-3.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Furl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightning-fast URL fetcher &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.14&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 3.13 was 3 years, 7 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.31&lt;/strong&gt; on 2021-05-11&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.29 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 4 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.047' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.047&lt;/strong&gt; on 2021-05-08&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.046 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9001&lt;/strong&gt; on 2021-05-12&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0951 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.24&lt;/strong&gt; on 2021-05-10&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.23 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000140&lt;/strong&gt; on 2021-05-12&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000139 was 4 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012003&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 127&lt;/li&gt;  &lt;li&gt;Previous version: 1.012002 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TINITA/YAML-LibYAML-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::LibYAML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl YAML Serialization using XS and libyaml &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2021-05-08&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 1 year, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.070&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.070 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7204722919735501600/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxli-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7204722919735501600"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7204722919735501600"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxli-15-great-cpan-modules-released.html" title="(cccxli) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1988343130481877663</id>
    <published>2021-05-15T20:56:00.002+02:00</published>
    <updated>2021-05-15T20:56:59.383+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxvii) metacpan weekly report - Type::Tiny</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/15 18:56:34 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Runner" target="_blank"&gt;Function::Runner&lt;/a&gt; - Define functions at a higher level and run them&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::Chord::Progression" target="_blank"&gt;Music::Chord::Progression&lt;/a&gt; - Create network transition chord progressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::Refactor" target="_blank"&gt;PPIx::Refactor&lt;/a&gt; - Hooks for refactoring perl via PPI&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::Text" target="_blank"&gt;Twitter::Text&lt;/a&gt; - Perl implementation of the twitter-text parsing library&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BEGIN::Lift" target="_blank"&gt;BEGIN::Lift&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/C::Blocks" target="_blank"&gt;C::Blocks&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/C::TinyCompiler" target="_blank"&gt;C::TinyCompiler&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Method::Modifiers" target="_blank"&gt;Class::Method::Modifiers&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny::Antlers" target="_blank"&gt;Class::Tiny::Antlers&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::OptList" target="_blank"&gt;Data::OptList&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::CheckConflicts" target="_blank"&gt;Dist::CheckConflicts&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exception::Class" target="_blank"&gt;Exception::Class&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/forkprove" target="_blank"&gt;forkprove&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Furl" target="_blank"&gt;Furl&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Wrapper" target="_blank"&gt;Git::Wrapper&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::JPEG::Size" target="_blank"&gt;Image::JPEG::Size&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::ASM" target="_blank"&gt;Inline::ASM&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP" target="_blank"&gt;MOP&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Promiser" target="_blank"&gt;Net::Curl::Promiser&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/only" target="_blank"&gt;only&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OOB" target="_blank"&gt;OOB&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=374)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pg::Explain" target="_blank"&gt;Pg::Explain&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+2=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Want" target="_blank"&gt;Want&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1988343130481877663/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvii-metacpan-weekly-report-typetiny.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1988343130481877663"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1988343130481877663"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvii-metacpan-weekly-report-typetiny.html" title="(cdlxvii) metacpan weekly report - Type::Tiny"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>A Perl Community Dashboard</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/05/a-perl-community-dashboard.html"/>
    <id>tag:blogs.perl.org,2021:/users/dean//558.10220</id>
    <published>2021-05-13T16:09:07Z</published>
    <updated>2021-05-13T21:39:13Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>In this weeks <a href="https://www.perlfoundation.org/marketing-committee.html">TPF Marketing Committee</a> meeting I made an elevator pitch for a "Perl Community Dashboard". It was well received so I have taken the action item to expound upon the idea here to gather more input. Understand this then as the minimum viable product to go from 0 to 1, something achievable that we can build upon.</p>

<p><strong>The Goal:</strong> </p>

<p>Create a central web based "Dashboard" (think Grafana-ish) the brings together metrics from key Perl related websites (hereafter, mastheads) and potentially other channels such as social media or irc. </p>

<p><strong>What is the "Business Outcome"?</strong></p>

<p>The marketing committee can use those metrics to set goals and measure the effectiveness of marketing activities. By including many mastheads we can get a picture of activity levels over time, how people move between the content, and which content is the most important. </p>

<p>Being able to dive & explore this data will also be valuable to the marketing committee and to other TPF committees. This could guide everything from blog posts, to conference talks, to book ideas, to training classes.</p>

<p><strong>What would be included:</strong></p>

<p>Acknowledging many of these are not "owned" by TPF, the mastheads I want to be included initially would include:</p>

<ul>
	<li>perlfoundation.org</li>
	<li>news.perlfoundation.org</li>
       <li>perl.com</li>
	<li>perl.org</li>
	<li>blogs.perl.org</li>
	<li>jobs.perl.org</li>
        <li>perldoc.perl.org</li>
	<li>metacpan.org</li>
	<li>cpan.org</li>
        <li>rt.cpan.org</li>
       <li>perlconference.us</li>
</ul>

<p><strong>What is needed from each website?</strong></p>

<p>Initially this would just be a javascript snippet to instruct web browsers to send the various metric data. </p>

<p>More detailed analytics could later be added, for example I am very interested to learn more about what people are searching for and downloading from (meta)cpan.</p>

<p>This is far less complicated and gives richer data than shipping http access logs.</p>

<p><strong>What analytics platform would we use?</strong></p>

<p>We should use something off the shelf, ideally something SaaS so we don't have the overheads of running the infrastructure. The downside of someone else's cloud analytics platform is there may be resistance to it, compared to self hosting the data.</p>

<p>Without getting lost entirely in selecting a solution, a brief taxonomy of key products:</p>

<ul>
	<li>Adobe Marketing Cloud (once Omniture) is the market leader and is consumed as a cloud SaaS product. Adobe offers discounts for 501c3's like TPF (YAS) although pricing isn't public</li>
<li>Matomo (was Piwik) is a very capable FOSS alternative with a Freemium business model that offers both cloud and self hosting. Paid add-on features add up quickly compared to the nominal fee for their cloud offering.</li>
<li>Others that community members suggest in the comments</li>
</ul>

<p>Adobe as the market leader would allow us to most easily engage someone to assist, I can't find modules in CPAN for it and having used it in past $work we just used our own client API.</p>

<p>Matomo has modules on CPAN and some of them look recent.</p>

<p>No matter what we select, hopefully we can help create, publish, and enhance the client API modules for the various Perl frameworks.</p>

<p><strong>Prior Art?</strong></p>

<p>I have not seen any other FOSS project or foundation do something similar, though no doubt they use Google Analytics.</p>

<p><br />
<strong>Pre-emptively addressing concerns</strong></p>

<ul>
	<li><em>I don't like tracking people.</em> You should use browser features or plugins to block it, as you would on other websites.</li>
        <li><em>You should just use access logs.</em> Shipping access logs is far more complicated and gives very few details, referrers especially are removed by search engines.</li>
        <li><em>Privacy Concerns.</em> Using an existing platform with GDPR already sorted is a good start. We absolutely must respect peoples privacy</li>
        <li><em>This is pointless.</em> Hopefully people can see that having metrics to measure the outcomes of marketing activities is of benefit. A reward of all work (paid or volunteer) is being able to see clearly that we (you) did something and people responded positively - let's provide that.</li>
<li><em>Platform X is stupid, use platform Y.</em> Please note your preferred products in the comments, it would be great to learn more</li>
<li><em>This is great! I want to get involved!</em> Let us know in the comments or contact the <a href="mailto:hello@perlfoundation.org">marketing committee</a></li>
</ul>

<p><strong>Whats next?</strong></p>

<p>For me is sharing this pitch with more people in the community and fleshing it out in to a proposal - So please share your thoughts in the comments.</p>

<p>I am very interested in your experiences with different platforms and successes you have had using them with the various Perl frameworks.</p>

<p>It is my hope that many people will be able to build on this work in many directions.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 112: Canonical Path and Climb Stairs</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-112-canonical-path-and-climb-stairs.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10219</id>
    <published>2021-05-13T14:10:29Z</published>
    <updated>2021-05-13T14:13:54Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 112 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 16, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Canonical Path</h2>

<p><em>You are given a string path, starting with a slash ‘/&#8217;.</em></p>

<p><em>Write a script to convert the given absolute path to the simplified canonical path.</em></p>

<p><em>In a Unix-style file system:</em></p>

<p><em>- A period &#8216;.&#8217; refers to the current directory</em></p>

<p><em>- A double period &#8216;..&#8217; refers to the directory up a level</em></p>

<p><em>- Multiple consecutive slashes (&#8216;//&#8217;) are treated as a single slash &#8216;/&#8217;</em></p>

<p><em>The canonical path format:</em></p>

<p><em>- The path starts with a single slash &#8216;/&#8217;.</em></p>

<p><em>- Any two directories are separated by a single slash &#8216;/&#8217;.</em></p>

<p><em>- The path does not end with a trailing &#8216;/&#8217;.</em></p>

<p><em>- The path only contains the directories on the path from the root directory to the target file or directory</em></p>

<p><em>Example:</em></p>

<pre><code>Input: "/a/"
Output: "/a"

Input: "/a/b//c/"
Output: "/a/b/c"

Input: "/a/b/c/../.."
Output: "/a"
</code></pre>

<p>Although it can surely be done differently, this is obviously a job for regular expressions or regexes.</p>

<h3>Canonical Path in Raku</h3>

<p>It would certainly make sense to write a grammar for performing the necessary transformations, but this is simple enough for a few regexes to do the job. It is in fact probably possible to do everything with a single regex, but I usually find it more legible to transform the input string step by step. </p>

<p>Note that I&#8217;m not trying to validate the input paths, with just one exception: if there are too many <code>/../</code> compared to the previous path items, the script dies, rather than printing something incorrect.</p>

<pre><code>use v6

my @tests = &lt;/a/ /a/b//c/ /a/b/c/../.. /a/../../b/&gt;;
for @tests &lt;-&gt; $path {
    my $p = $path;
    $path ~~ s:g|'//'+|/|;
    $path ~~ s:g!^'/' | '/'$!!;
    my @path-items;
    for split /'/'+/, $path -&gt; $item {
        next if $item eq '.';
        if $item eq '..' {
            die "Invalid path $p" unless @path-items;
            pop @path-items;
        } else {
            push @path-items, $item;
        }
    };
    say "$p =&gt; /", @path-items.join('/');
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ raku ./paths.raku
/a/ =&gt; /a
/a/b//c/ =&gt; /a/b/c
/a/b/c/../.. =&gt; /a
Invalid path /a/../../b/
  in block  at ./main.raku line 12
  in block &lt;unit&gt; at ./main.raku line 4
</code></pre>

<h3>Canonical Path in Perl</h3>

<p>This a port to Perl of the Raku program above, except that when there are too many <code>/../</code> compared to the previous path items, the script issues a warning instead of dying, does not print any canonical path and proceeds with the next items.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ('/a/', '/a/b//c/', '/a/b/c/../..', '/a/../../b/', '/a/././b/');
TEST: for my $path (@tests) {
    my $p = $path;
    $path =~ s|\/\/+|/|g;
    $path =~ s!^\/|\/$!!g;
    my @path_items;
    for my $item (split /\/+/, $path) {
        next if $item eq '.';
        if ($item eq '..') {
            warn "Invalid path $p" and next TEST unless @path_items;
            pop @path_items;
        } else {
            push @path_items, $item;
        }
    };
    say "$p =&gt; /", join '/', @path_items;
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ perl paths.pl
/a/ =&gt; /a
/a/b//c/ =&gt; /a/b/c
/a/b/c/../.. =&gt; /a
Invalid path /a/../../b/ at paths.pl line 14.
/a/././b/ =&gt; /a/b
</code></pre>

<h2>Task 2: Climb Stairs</h2>

<p><em>You are given <code>$n</code> steps to climb.</em></p>

<p><em>Write a script to find out the distinct ways to climb to the top. You are allowed to climb either 1 or 2 steps at a time.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $n = 3
Output: 3

    Option 1: 1 step + 1 step + 1 step
    Option 2: 1 step + 2 steps
    Option 3: 2 steps + 1 step

Input: $n = 4
Output: 5

    Option 1: 1 step + 1 step + 1 step + 1 step
    Option 2: 1 step + 1 step + 2 steps
    Option 3: 2 steps + 1 step + 1 step
    Option 4: 1 step + 2 steps + 1 step
    Option 5: 2 steps + 2 steps
</code></pre>

<p>It is not clear to me whether the output should contain all the information above, or just the number of possibilities, but since the assignment asks us &#8220;to find out the distinct ways to climb to the top&#8221;, I have decided to output the result in the format given above, although this leads to quite a bit of uninteresting boiler plate code.</p>

<h3>Climb Stairs in Raku</h3>

<p>I&#8217;ve decided to use a <code>try-steps</code> recursive subroutine to explore all possibilities. The script uses a <code>@*result</code> dynamic variable to store the various winning combinations of steps and to print them at the end. </p>

<pre><code>use v6;

sub print-result {
    my $count = 0;  
    for  @*result -&gt; @solution {
        print "\tOption ", ++$count, ": ";
        my @step_list;
        push @step_list, "$_ " ~ ($_ ~~ /1/ ?? "step " !! "steps") for @solution;
        say join " + ", @step_list;
    }
    say "";
}

sub try-steps ($nb-steps, @curr) {
    for 1, 2 -&gt; $new-step {
        my @new-cur = (|@curr, $new-step);
        my $sum = [+] @new-cur;
        next if $sum &gt; $nb-steps;
        if $sum == $nb-steps {
            push @*result, @new-cur;
            last;
        } else {
            try-steps $nb-steps, @new-cur;
        }
    }
}

for 3, 4, 5 -&gt; $target {
    my @*result;
    try-steps $target, [];
    say 'Input: $n = ', $target;
    say "Output: ", @*result.elems;
    # say @*result;
    print-result;
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ raku ./steps.raku
Input: $n = 3
Output: 3
    Option 1: 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 2 steps
    Option 3: 2 steps + 1 step 

Input: $n = 4
Output: 5
    Option 1: 1 step  + 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 1 step  + 2 steps
    Option 3: 1 step  + 2 steps + 1 step 
    Option 4: 2 steps + 1 step  + 1 step 
    Option 5: 2 steps + 2 steps

Input: $n = 5
Output: 8
    Option 1: 1 step  + 1 step  + 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 1 step  + 1 step  + 2 steps
    Option 3: 1 step  + 1 step  + 2 steps + 1 step 
    Option 4: 1 step  + 2 steps + 1 step  + 1 step 
    Option 5: 1 step  + 2 steps + 2 steps
    Option 6: 2 steps + 1 step  + 1 step  + 1 step 
    Option 7: 2 steps + 1 step  + 2 steps
    Option 8: 2 steps + 2 steps + 1 step
</code></pre>

<p>Note that, if you don&#8217;t want this verbose output, you can just remove the <code>print-result</code> subroutine definition, comment out the last line (with the <code>print-result</code> subroutine call), and uncomment the previous code line:</p>

<pre><code>    say @*result;
    # print-result;
</code></pre>

<p>and obtain the following output:</p>

<pre><code>$ raku ./steps.raku
Input: $n = 3
Output: 3
[[1 1 1] [1 2] [2 1]]
Input: $n = 4
Output: 5
[[1 1 1 1] [1 1 2] [1 2 1] [2 1 1] [2 2]]
Input: $n = 5
Output: 8
[[1 1 1 1 1] [1 1 1 2] [1 1 2 1] [1 2 1 1] [1 2 2] [2 1 1 1] [2 1 2] [2 2 1]]
</code></pre>

<h3>Climb Stairs in Perl</h3>

<p>This is a port to Perl of the above Raku program, with a <code>try_steps</code> recursive subroutine:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @result;

sub print_result {
    my $count = 0;
    for  my $solution (@result) {
        print "\tOption ", ++$count, ": ";
        my @step_list;
        push @step_list, "$_ " . ($_ =~ /1/ ? "step " : "steps") for @$solution;
        say join " + ", @step_list;
    }
    say "";
}

sub try_steps  {
    my ($nb_steps, $sum, @curr) = @_;
    for my $new_step (1, 2) {
        my $new_sum =  $sum + $new_step;
        next if $new_sum &gt; $nb_steps;
        my @new_cur = (@curr, $new_step);
        if ($new_sum == $nb_steps) {
            push @result, \@new_cur;
            last;
        } else {
            try_steps($nb_steps, $new_sum, @new_cur);
        }
    }
}

for my $target (3, 4, 5) {
    @result = ();
    try_steps $target, 0, ();
    say 'Input: $n = ', $target;
    say "Output: ", scalar @result;
    print_result;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./steps.pl
Input: $n = 3
Output: 3
        Option 1: 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 2 steps
        Option 3: 2 steps + 1 step

Input: $n = 4
Output: 5
        Option 1: 1 step  + 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 1 step  + 2 steps
        Option 3: 1 step  + 2 steps + 1 step
        Option 4: 2 steps + 1 step  + 1 step
        Option 5: 2 steps + 2 steps

Input: $n = 5
Output: 8
        Option 1: 1 step  + 1 step  + 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 1 step  + 1 step  + 2 steps
        Option 3: 1 step  + 1 step  + 2 steps + 1 step
        Option 4: 1 step  + 2 steps + 1 step  + 1 step
        Option 5: 1 step  + 2 steps + 2 steps
        Option 6: 2 steps + 1 step  + 1 step  + 1 step
        Option 7: 2 steps + 1 step  + 2 steps
        Option 8: 2 steps + 2 steps + 1 step
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 23, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl / Unix One-liner Cage Match, Part 1</title>
    <link rel="alternate" href="https://perl.com/article/perl-one-liners-part-1/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A shell (like Bash) provides built-in commands and scripting features to easily solve and automate various tasks. External commands like grep, sed, Awk, sort, find, or parallel can be combined to work with each other. Sometimes you can use Perl either as a single replacement or a complement to them for specific use cases.&lt;/p&gt;

&lt;p&gt;Perl is the most robust portable option for text processing needs. Perl has a feature rich regular expression engine, built-in functions, an extensive ecosystem, and is quite portable. However, Perl may have slower performance compared to specialized tools and can be more verbose.&lt;/p&gt;

&lt;h2 id="one-liners-or-scripts"&gt;One-liners or scripts?&lt;/h2&gt;

&lt;p&gt;For assembly-level testing of a digital signal processing (DSP) chip, I had to replicate the same scenario for multiple address ranges. My working knowledge of Linux command line was limited at that time and I didn&amp;rsquo;t know how to use sed or Awk. I used Vim and Perl for all sorts of text processing needs.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t know about Perl&amp;rsquo;s options for one-liners, so I used to modify a script whenever I had to do substitutions for multiple files. Once, I even opened the files as Vim buffers and applied a &lt;code&gt;bufdo&lt;/code&gt; command to see if that would make my workflow simpler. If I had known about Perl one-liners, I could have easily utilized find and Bash globs to make my life easier, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -i -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/0xABCD;/0x1234;/; s/0xDEAD;/0xBEEF;/&amp;#39;&lt;/span&gt; *.tests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; option will write back the changes to the source files. If needed, I can pass an argument to create a backup of the original files. For example, &lt;code&gt;-i.bkp&lt;/code&gt; will create &lt;em&gt;ip.txt.bkp&lt;/em&gt; as the backup for &lt;em&gt;ip.txt&lt;/em&gt; passed as the input file. I can also put the backups in another existing directory. The &lt;code&gt;*&lt;/code&gt; gets expanded to original filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ mkdir backups
$ perl -i&lt;span style="color:#e6db74"&gt;&amp;#39;backups/*&amp;#39;&lt;/span&gt; -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/SEARCH/REPLACE/g&amp;#39;&lt;/span&gt; *.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="powerful-regexp-features"&gt;Powerful regexp features&lt;/h2&gt;

&lt;p&gt;Perl regexps are much more powerful than either basic or extended regular expressions used by utilities. The common features I often use are non-greedy and possessive quantifiers, lookarounds, the &lt;code&gt;/e&lt;/code&gt; flag, subexpression calls, and &lt;code&gt;(*SKIP)(*FAIL)&lt;/code&gt;. Here are some examples from StackOverflow threads that I have answered over the years.&lt;/p&gt;

&lt;h3 id="skip-some-matches"&gt;Skip some matches&lt;/h3&gt;

&lt;p&gt;This question needed &lt;a href="https://stackoverflow.com/q/64368280/4082052"&gt;to convert avr-asm to arm-gnu comments&lt;/a&gt;. The starting file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; ; comment
  ;;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need to change &lt;code&gt;;&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt;, but &lt;code&gt;;&lt;/code&gt; within single or double quotes shouldn&amp;rsquo;t be affected. I can match quoted &lt;code&gt;;&lt;/code&gt; in the first branch of the alternation and use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; to not replace those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(?:\x27;\x27|&amp;#34;;&amp;#34;)(*SKIP)(*F)|;/@/&amp;#39;&lt;/span&gt; ip.txt
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; @ comment
  @;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; so often that I wish it had a shorter syntax, &lt;code&gt;(*SF)&lt;/code&gt; for example.&lt;/p&gt;

&lt;h3 id="replace-a-string-with-an-incrementing-value"&gt;Replace a string with an incrementing value&lt;/h3&gt;

&lt;p&gt;I can &lt;a href="https://stackoverflow.com/q/42554684/4082052"&gt;replace strings with incrementing value&lt;/a&gt;. The &lt;code&gt;/e&lt;/code&gt; on a substitution allows me to treat the replacement side as Perl code. Whatever that code evaluates to is the replacement. That can be a variable that I increment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;a | a | a | a | a | a | a | a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/ *\| */$i++/ge&amp;#39;&lt;/span&gt;
a0a1a2a3a4a5a6a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reverse-a-substring"&gt;Reverse a substring&lt;/h3&gt;

&lt;p&gt;I also used the &lt;code&gt;/e&lt;/code&gt; trick &lt;a href="https://stackoverflow.com/q/63681983/4082052"&gt;to reverse the text matched by a pattern&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;romarana789:qwerty12543&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+$/reverse $&amp;amp;/e&amp;#39;&lt;/span&gt;
romarana789:qwerty34521&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="do-some-arithmetic"&gt;Do some arithmetic&lt;/h3&gt;

&lt;p&gt;Adding another &lt;code&gt;/e&lt;/code&gt; to get &lt;code&gt;/ee&lt;/code&gt; means there are two rounds of Perl code. I evaluate the replacement side to get the string that I&amp;rsquo;ll evaluate as Perl code. In &lt;a href="https://stackoverflow.com/q/62241101/4082052"&gt;Arithmetic replacement in a text file&lt;/a&gt;, I need to find simple arithmetic, like &lt;code&gt;25100+10&lt;/code&gt;, and replace that with its arithmetic result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25100&lt;/span&gt;+10
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25100+1,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can do that with one &lt;code&gt;/e&lt;/code&gt; by matching the numbers and doing some Perl on the replacement side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(\d+)\+(\d+)/$1+$2/ge&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But instead of matching the numbers separately, I can match the whole expression. The match is in &lt;code&gt;$&amp;amp;&lt;/code&gt;, so the first &lt;code&gt;/e&lt;/code&gt; interpolates that to &lt;code&gt;25100+10&lt;/code&gt;. The second round runs that as Perl, which is addition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+\+\d+/$&amp;amp;/gee&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That would also make it easier to handle a set of operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;2+3 10-3 8*8 11/5&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s|\d+[+/*-]\d+|$&amp;amp;|gee&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="handling-the-newline"&gt;Handling the newline&lt;/h2&gt;

&lt;p&gt;I want to un-hypenate this text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;Hello there.
It will rain to-
day. Have a safe
and pleasant jou-
rney.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike sed and Awk, you can choose to preserve the record separator in Perl. That makes it easier to solve this problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/-\n//&amp;#39;&lt;/span&gt; msg.txt
Hello there.
It will rain today. Have a safe
and pleasant journey.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://unix.stackexchange.com/q/647648/109046"&gt;remove dashes and replace newlines with spaces&lt;/a&gt; for a similar problem and to compare the Perl solution with sed/Awk.&lt;/p&gt;

&lt;h2 id="multiline-fixed-string-substitution"&gt;Multiline fixed-string substitution&lt;/h2&gt;

&lt;p&gt;Escaping regexp metacharacters is simpler with built-in features in Perl. Combined with slurping entire input file as a single string, I can easily perform multiline fixed-string substitutions. Consider this sample input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;This is a multiline
sample input with lots
of special characters
like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say you have a file containing the lines you wish to match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a file containing the replacement string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s one way to do it with Perl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -0777 -ne &lt;span style="color:#e6db74"&gt;&amp;#39;$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                  print s/\Q$s/$r/gr&amp;#39;&lt;/span&gt; search.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in the above solution, contents of &lt;code&gt;search.txt&lt;/code&gt; and &lt;code&gt;replace.txt&lt;/code&gt; are also processed by the Perl command. Avoid using shell variables to save their contents, since trailing newlines and ASCII NUL characters will require special attention.&lt;/p&gt;

&lt;p&gt;Awk and sed do not have an equivalent option to slurp the entire input file content. Sed is Turing complete and Awk is a programming language, so you can write code for it if you wish, in addition to the code you&amp;rsquo;d need for escaping the metacharacters.&lt;/p&gt;

&lt;h2 id="better-regexp-support"&gt;Better regexp support&lt;/h2&gt;

&lt;p&gt;Some other regexp libraries have problems tied to whatever they use to implement them. GNU versions, for example, may have some bugs that other implementations may not have. Which version you use can give different results. Perl, however, has the same bugs everywhere.&lt;/p&gt;

&lt;h3 id="back-references"&gt;Back references&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=25322"&gt;problem with backreferences in glibc&lt;/a&gt; that I found and &lt;a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=26864"&gt;reported for grep&lt;/a&gt;. This bug is seen in at least GNU implementations of grep and sed. As far as I know, no implementation of Awk supports backreferences within regexp definition.&lt;/p&gt;

&lt;p&gt;I wanted to get words having two occurrences of consecutive repeated characters. This example takes some time and results in no output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does work when the nesting is unrolled or PCRE is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;[a-z]*([a-z])\1[a-z]*([a-z])\2[a-z]*&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...

$ grep -xiP &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the Perl, which is the original regexp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /^([a-z]*([a-z])\2[a-z]*){2}$/i&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="word-boundaries"&gt;Word boundaries&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/579889/109046"&gt;Why doesn&amp;rsquo;t this sed command replace the 3rd-to-last &amp;ldquo;and&amp;rdquo;?&lt;/a&gt; shows another interesting bug when word boundaries and group repetition are involved. This bug is seen in anything using the regexp stuff from glibc (as you would on Linux):&lt;/p&gt;

&lt;p&gt;This incorrectly matches because there is no word boundary in the middle of &amp;ldquo;cocoa&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ sed --version
sed &lt;span style="color:#f92672"&gt;(&lt;/span&gt;GNU sed&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.8
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/(\bco){2}/p&amp;#39;&lt;/span&gt;
cocoa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the quantifier, there&amp;rsquo;s no problem and no matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/\bco\bco/p&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /(\bco){2}/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s another example from GNU sed. This modifies the line because it thinks it finds &amp;ldquo;it&amp;rdquo; as a separate word two times after &amp;ldquo;with&amp;rdquo;, but the second is really in the middle of &amp;ldquo;sit&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ too&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the pattern to get rid of the quantifier and it works correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a

&lt;span style="color:#75715e"&gt;# Perl doesn&amp;#39;t need such workarounds&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="stay-tuned"&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll have more in Part 2, where I&amp;rsquo;ll delve into XML, JSON, and CSV.&lt;/p&gt;

&lt;h2 id="other-things-to-read"&gt;Other things to read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/303044/109046"&gt;When to use grep, sed, Awk, Perl, etc&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dave Cross&amp;rsquo;s &lt;a href="https://www.perl.com/pub/2004/08/09/commandline.html/"&gt;Perl Command-Line Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/7427262/4082052"&gt;Pitfalls of reading file into shell variable&lt;/a&gt; and my blog post on &lt;a href="https://learnbyexample.github.io/multiline-search-and-replace/"&gt;multiline fixed-string search and replace with cli tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Known bugs section in the &lt;a href="https://www.gnu.org/software/grep/manual/grep.html#Known-Bugs"&gt;GNU grep manual&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/24275070/4082052"&gt;BSD/macOS sed vs GNU sed vs the POSIX sed specification&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/13711/109046"&gt;Differences between sed on Mac OSX and other standard sed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;[image from &lt;a href="https://www.flickr.com/photos/ppetrovic72/3981925030/in/photolist-74SpzQ-bU41RP-2kNaLcQ-nxdaVA-bKtznV-bwyLmq-beJniM-58jr5R-2kNakh3-6fxhGR-nxtfo6-xDEB2-2hdZdFv-XPjLeQ-6nGeoM-29v1fwo-puR1K-2kNaM6P-nxtgeK-a2nLuc-qvDmkw-nfYDTu-6R6FQB-2i1Psj2-74Nwsu-2kNam6c-c2EsqS-2i1PsgB-nvqjK1-2i1RTpS-2i1T2RR-2i1S2Wr-2i1Psik-2gcee9c-2i1PHci-23p4pKV-2i4eukR-urRBFS-nzf35k-6R6Fmp-nvqicm-pvqAaK-6RaKuU-2i1S8S9-2i1Tbr1-2i1Psd5-2i1S9WP-2i1T2LL-nfYwEo-2i1RTnx"&gt;Dim Sum!&lt;/a&gt; on Flickr, (CC BY-NC-ND 2.0)]&lt;/em&gt;&lt;/p&gt;
</content>
    <id>https://perl.com/article/perl-one-liners-part-1/</id>
    <published>2021-05-12T02:54:23Z</published>
    <updated>2021-05-12T02:54:23Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-941270258783630818</id>
    <published>2021-05-09T21:29:00.006-07:00</published>
    <updated>2021-05-09T21:29:59.578-07:00</updated>
    <title type="text">Weekend Outage</title>
    <content type="html">&lt;p&gt;You may have noticed that some perl.org services were unavailable this weekend.&amp;nbsp; Email continued to flow, and no data was lost.&lt;/p&gt;&lt;p&gt;The short version of the story is that we were bitten by&amp;nbsp;&lt;a href="https://github.com/containerd/containerd/issues/5280#issuecomment-813707613" target="_blank"&gt;this bug.&lt;/a&gt;&amp;nbsp;and&amp;nbsp;learned a &lt;b&gt;lot&lt;/b&gt; about how Kubernetes works while we figured out what the issue was.&lt;/p&gt;&lt;p&gt;Sorry for any inconvenience!&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/941270258783630818/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html#comment-form" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html" title="Weekend Outage"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Efficient Matrix Search: The Weekly Challenge 111</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/09#pwc111" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row. Write a script to find a given integer in the matrix using an efficient search algorithm.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;      
use constant MATRIX_SIZE =&gt; 5;   

sub matrix_search{
    my($matrix, $search) = @_;
    unless(@{$matrix} == 1){  
        my $half = int(@{$matrix} / 2);      
        if($matrix-&gt;[$half]-&gt;[0] &gt; $search){
            my @matrix_reduced = @{$matrix}[0 .. $half - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] &lt; $search){
            my @matrix_reduced = @{$matrix}[$half .. @{$matrix} - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] == $search){
            return true;  
        } 
    }
    else{
        return row_search($matrix-&gt;[0], $search);  
    }    
}

sub row_search{
    my ($row, $search) = @_; 
    unless(@{$row} == 1){
        my $half = int(@{$row} / 2);  
        if($row-&gt;[$half] &gt; $search){
            my @row_reduced = @{$row}[0 .. $half - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] &lt; $search){
            my @row_reduced = @{$row}[$half .. @{$row} - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] == $search){
            return true;
        }  
    } 
    else{
        return false;
    }   
} 

MAIN:{
    my $N = [[  1,  2,  3,  5,  7 ],  
             [  9, 11, 15, 19, 20 ],   
             [ 23, 24, 25, 29, 31 ],    
             [ 32, 33, 39, 40, 42 ],   
             [ 45, 47, 48, 49, 50 ]];
    my $search = 35;
    print matrix_search($N, $search) . "\n";
    $search = 39;
    print matrix_search($N, $search) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The most efficient way to search through this sorted matrix is with a binary search. Here the binary search is implemented recursively and split into two subroutines. The first search for the right row, the second performs a binary search within the row.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to find the longest English words that don’t change when their letters are sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub max_sorted{
    my($words) = @_;
    my $max = -1;
    my @length_words; 
    for my $word (@{$words}){
        my $sorted_word = join("", sort { $a cmp $b } split(//, $word));   
        if($word eq $sorted_word &amp;&amp; length($word) &gt;= $max){
            $length_words[length($word)] = [] if(!$length_words[length($word)]); 
            push @{$length_words[length($word)]}, $word;  
            $max = length($word);   
        }   
    }
    return $length_words[$max];  
}

MAIN:{
    my @words;
    while(&lt;&gt;){
        chomp;
        push @words, lc($_);  
    }  
    print join("\n", @{max_sorted(\@words)}) . "\n";    
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl &lt; /usr/share/dict/words
adelops
alloquy
beefily
begorry
billowy
egilops
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code expects input on STDIN. Here the system dictionary is used. For this file the maximum length of words meeting the criteria is seven. There are six such words, as shown in the output.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/"&gt;Challenge 111&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;Binary Search&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc111</id>
    <published>2021-05-09T23:58:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Matrix and Ordered Letters</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-111-search-matrix-and-ordered-letters.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10205</id>
    <published>2021-05-05T22:48:19Z</published>
    <updated>2021-05-10T02:51:16Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 111 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 9, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Search Matrix</h2>

<p><em>You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row.</em></p>

<p><em>Write a script to find a given integer in the matrix using an efficient search algorithm.</em></p>

<p><em>Example:</em></p>

<pre><code>Matrix: [  1,  2,  3,  5,  7 ]
        [  9, 11, 15, 19, 20 ]
        [ 23, 24, 25, 29, 31 ]
        [ 32, 33, 39, 40, 42 ]
        [ 45, 47, 48, 49, 50 ]

Input: 35
Output: 0 since it is missing in the matrix

Input: 39
Output: 1 as it exists in the matrix
</code></pre>

<p>We&#8217;re only trying to know whether an integer exists in the matrix. What I would normally do in such case is transform the data structure, i.e. store all the matrix items into a hash and then simply look whether an item exists in the hash. And I&#8217;ll also present such a solution.</p>

<p>However, looking carefully at the working of the task, we can see that the task insists on the fact that the integers are in ascending order from left to right and from top to bottom. The task further tells us that we should use an efficient algorithm. Although this is not explicitly specified, it is quite clear that we&#8217;re expected to implement a binary search algorithm, which is an efficient algorithm with sorted data.</p>

<p>The first idea might be to flatten the matrix into a one-dimension array, making the dataset much easier to use with a canonical binary search algorithm. But, obviously, that&#8217;s also not really what we&#8217;re expected to do. The task author wants us to implement a binary search algorithm on a 2-D matrix. We could come up with an &#8220;approximate&#8221; binary search, i.e. an heuristic looking for the approximate mid-point between two values. For example, we could start by testing any item on the third row and then goto the 2nd or 4th row depending on the result of the test. But that&#8217;s not satisfactory: that would not scale easily to other dimensions.</p>

<p>So I decided to perform the binary search on a list of consecutive integers between 0 and 24, and to provide a subroutine to convert these integers into 2-D indices. For example, the sixth item in that range corresponds to indices <code>[1][0]</code>.</p>

<h3>Search Matrix in Raku</h3>

<h4>Using Binary Search</h4>

<p>The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

sub A2AoA ($index) {
    my ($i, $j) = $index.polymod(5).reverse;
}
sub binary ($in) {
    my ($min, $max) = 0, 24;
    while $max &gt; $min {
        my $pivot = (($max + $min) /2).Int;
        my ($i, $j) = A2AoA $pivot;
        my $val = @matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if $in &gt; $val {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", binary $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./search_item.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
10 =&gt; 0
11 =&gt; 1
12 =&gt; 0
13 =&gt; 0
14 =&gt; 0
15 =&gt; 1
16 =&gt; 0
17 =&gt; 0
18 =&gt; 0
19 =&gt; 1
20 =&gt; 1
21 =&gt; 0
22 =&gt; 0
23 =&gt; 1
24 =&gt; 1
25 =&gt; 1
26 =&gt; 0
27 =&gt; 0
28 =&gt; 0
29 =&gt; 1
30 =&gt; 0
31 =&gt; 1
32 =&gt; 1
33 =&gt; 1
34 =&gt; 0
35 =&gt; 0
36 =&gt; 0
37 =&gt; 0
38 =&gt; 0
39 =&gt; 1
40 =&gt; 1
41 =&gt; 0
42 =&gt; 1
43 =&gt; 0
44 =&gt; 0
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<p>Note that I&#8217;m happy that I used such exhaustive test cases, since my original implementation had a relatively rare bug that I had not seen with the six or seven values I initially tested.</p>

<h4>Using a Hash</h4>

<p>As I said in the introduction, in the real life, I would transform the input data into a hash and simply perform hash lookup.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

my %hash;
for @matrix -&gt; @row {
    %hash{$_} = 1 for @row;
}
say "$_ =&gt; ", %hash{$_} ?? 1 !! 0 for 0..54;
</code></pre>

<p>As it can be seen, the code is much shorter, much simpler and much less prone to errors. It produces the same output:</p>

<pre><code>$ raku ./search_item2.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
... Lines omitted for brevity...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h3>Search Matrix in Perl</h3>

<h4>Using Binary Search</h4>

<p>This is a port to Perl of the binary search algorithm explained in the introduction above. The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

sub A2AoA {
    my $index = shift;
    my ($i, $j) = (int $index / 5, $index % 5);
}
sub bin_search {
    my $in = shift;
    my ($min, $max) = (0, 24);
    while ($max &gt; $min) {
        my $pivot =  int (($max + $min) /2);
        my ($i, $j) = A2AoA $pivot;
        my $val = $matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if ($in &gt; $val) {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", bin_search $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>perl  ./search_item.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
... lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h4>Using a Hash</h4>

<p>As mentioned above, in the real life, I would transform the input data into a hash and simply perform hash lookup. In Raku, I had to use nested <code>for</code> loops to populate the hash because my attempts using chained <code>map</code>s did not work as expected. There is certainly a way to do it with chained <code>map</code>s, but it is not easy to find the right syntax. No such problem with Perl where my chained <code>map</code>s worked perfectly on my first attempt (see below). There has to be something for which Perl is better or (more convenient) than Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

my %hash = map { $_ =&gt; 1 } map { @$_ } @matrix;
say "$_ =&gt; ", exists $hash{$_} ? 1 : 0 for 0..54;
</code></pre>

<p>This displays the same output as before:</p>

<pre><code>$ perl search_item2.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
... Lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h3>Search Matrix in Other Languages</h3>

<p>In Scala and Python, I&#8217;ll implement only the hash lookup strategy.</p>

<h4>Search Matrix in Scala</h4>

<p>In Scala, hashes are called &#8220;maps&#8221; but they behave essentuially the same way.</p>

<pre><code>object SearchItem extends App {
  val matrix = Array(
    Array(1, 2, 3, 5, 7),
    Array(9, 11, 15, 19, 20),
    Array(23, 24, 25, 29, 31),
    Array(32, 33, 39, 40, 42),
    Array(45, 47, 48, 49, 50)
  )

  var hash = scala.collection.mutable.Map[Int, Int]()
  for (row &lt;- matrix) {
    for (item &lt;- row) {
      hash(item) = 1
    }
  }

  for (i &lt;- 0 to 54) {
    if (hash.contains(i)) {
      println(s"$i =&gt; 1")
    } else {
      println(s"$i =&gt; 0")
    }
  }
}
</code></pre>

<p>Output:</p>

<p>0 => 0
1 => 1
2 => 1
3 => 1
4 => 0
&#8230; Lines omitted for brevity &#8230;
46 => 0
47 => 1
48 => 1
49 => 1
50 => 1
51 => 0
52 => 0
53 => 0
54 => 0</p>

<h4>Search Matrix in Python</h4>

<p>In Python, hashes are called dictionaries, and can be used the same way.</p>

<pre><code>matrix = ( [  1,  2,  3,  5,  7 ],
           [  9, 11, 15, 19, 20 ],
           [ 23, 24, 25, 29, 31 ],
           [ 32, 33, 39, 40, 42 ],
           [ 45, 47, 48, 49, 50 ]
         );

hash = {}
for row in matrix:
    for item in row:
        hash[item] = 1

for i in range(55):
    if i in hash:
        print(i, " =&gt; 1")
    else:
        print(i, " =&gt; 0")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./search_item.py
0  =&gt; 0
1  =&gt; 1
2  =&gt; 1
3  =&gt; 1
4  =&gt; 0
5  =&gt; 1
... Lines omitted for brevity ...
45  =&gt; 1
46  =&gt; 0
47  =&gt; 1
48  =&gt; 1
49  =&gt; 1
50  =&gt; 1
51  =&gt; 0
52  =&gt; 0
53  =&gt; 0
54  =&gt; 0
</code></pre>

<h2>Task 2: Ordered Letters</h2>

<p><em>Given a word, you can sort its letters alphabetically (case insensitive). For example, “beekeeper” becomes “beeeeekpr” and “dictionary” becomes “acdiinorty”.</em></p>

<p><em>Write a script to find the longest English words that don’t change when their letters are sorted.</em></p>

<p>For this, I&#8217;ll use an English word list contributed to the public domain by Grady Ward as part of the <a href="https://en.wikipedia.org/wiki/Moby_Project">Moby Lexicon</a> project. It is a list of 113,809 crosswords, that is words that are considered valid in crossword puzzles and other word games. The list can be found on my <a href="https://github.com/LaurentRosenfeld/think_raku/blob/master/Supplementary/words.txt">github repository</a>.</p>

<h3>Ordered Letters in Raku</h3>

<p>We don&#8217;t really need to sort the letters: we only need to know whether they are already in the alphabetical order. In Raku, we can use the <code>[...]</code> reduce metaoperator together with the <code>le</code> less than or equal to operator on the letters of the word. Checking whether a list is sorted has a smaller computational complexity than sorting the list, so this should presumably be faster (although it is so fast with my 113-k word list that it doesn&#8217;t really matter).</p>

<pre><code>use v6;

my @long-words;
my $max-length = 0;

for './words.txt'.IO.lines -&gt; $word {
    next unless [le] $word.comb;
    my $length = $word.chars;
    if  $length &gt; $max-length {
        @long-words = $word,;
        $max-length = $length;
    } elsif $length == $max-length {
        push @long-words, $word;
    }
}
say @long-words.join(", ");
</code></pre>

<p>This program finds two 7-letter words satisfying the task&#8217;s criteria and displays the following output:</p>

<pre><code>$ raku ./ordered-letters.raku
beefily, billowy
</code></pre>

<p>I do not know what these two words mean, but they are in the input list and they satisfy the criteria.</p>

<h3>Ordered Letters in Perl</h3>

<p>It is slightly less convenient in Perl than in Raku to check that the letters are already in the proper order, so I&#8217;ll simply sort the letters and compare the output with the input word.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @long_words;
my $max_length = 0;

my $word_list = "./words.txt";
open my $IN, "&lt;", $word_list or die "Cannot open $word_list $!";
while (my $word = &lt;$IN&gt;) {
    chomp $word;
    next unless $word eq join '', sort split //, $word;
    my $length = length $word;
    if  ($length &gt; $max_length) {
        @long_words = ($word);
        $max_length = $length;
    } elsif ($length == $max_length) {
        push @long_words, $word;
    }
}
say "@long_words";
</code></pre>

<p>This program produces the same two words:</p>

<pre><code>$ perl ordered-letters.pl
beefily billowy
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 16, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Open Letter to the Perl Foundation Board</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/05/open-letter-to-the-perl-foundation-board.html"/>
    <id>tag:blogs.perl.org,2021:/users/neilb//846.10213</id>
    <published>2021-05-09T02:42:00Z</published>
    <updated>2021-05-10T01:31:32Z</updated>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>Dear TPF Board members,</p>

<p>We want to express our disappointment with the recent transparency reports and associated actions from the Community Affairs Team (CAT).</p>

<p>On Monday 19th March, a <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">first Transparency Report</a> was issued, which said that an individual had been investigated for (1) behaviour on IRC and Twitter, and (2) behaviour at a Perl event in 2019. The report also reported that they had "found many instances of communication which alone may not have constituted unacceptable behavior, but when taken together did constitute unacceptable behavior", but no further details were given on those. The report issued a ban from all TPF events "in perpetuity", and furthermore issued a ban on the individual’s participation on irc.perl.org and any perl.org mailing lists. A second individual was issued a warning.</p>

<p>Prior to the 19th, one of the Perl Steering Council (PSC) members explicitly asked you not to issue a ban, saying that the PSC were already starting work on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259909.html">improving discourse in and around p5p</a>. That person felt that a ban would be counterproductive when the PSC were trying to improve things in a more inclusive way. The second event was the Perl Toolchain Summit (PTS). The incident was investigated at the time, resulting in two of the organisers (Philippe Bruhat and Neil Bowers) asking the individual to leave. He left peacefully, expressing regret that he had upset and offended the other party. The PTS is <em>not</em> a TPF event.</p>

<p>Nearly two weeks after the initial report, TPF issued a <a href="https://news.perlfoundation.org/post/cat-transparency-report-updates0">Transparency Report Update</a>, which retracted parts of the first report, but left other parts hazy. For example, the first report mentions other "unacceptable behaviour", but gives no further details in either report. The warning for the second individual was retracted.</p>

<p>The use of "transparency" seems incongruous:</p>

<ul>
<li>No charter for the CAT had been published, nor a common set of guidelines as the basis of triggering investigations or taking corrective actions.</li>
<li>No definition for “unacceptable behavior” was provided.</li>
<li>The CAT did not talk to the relevant communities or their leaders before publishing the initial report.</li>
<li>The CAT had not spoken to either person investigated prior to publishing the first report.</li>
</ul>

<p>These behaviours don't demonstrate the values and behaviours that we could reasonably expect of a body investigating community affairs. As the most visible and official Perl organization, TPF should hold itself to a higher standard.</p>

<p>This felt like a clumsy attempt by TPF to establish control over all Perl communities, and only when you got push-back did you attempt to wind some of that back. You do not have jurisdiction over IRC, email lists, or most other parts of our communities. It is not TPF/CAT’s role  to request that people stop participating. We have not given you consent to unilaterally define policy across our communities, nor impose punishments on behalf of them.</p>

<p>We are all firm supporters of codes of conduct, where the goal is to set expectations for behaviour. Many of our individual communities have long defined and enforced their own guidelines and standards of conduct. That said, we believe that our communities could benefit from harmonising standards. This was an opportunity for TPF/CAT to demonstrate leadership, and start bringing our communities together towards a unified policy. Instead the TPF acted seemingly without consideration for the varied needs and devolved leadership of the communities it purports to represent.</p>

<p>This is not to say that we condone the individual's behaviour. Some signatories to this letter were part of the governing bodies that issued the initial corrective actions on the two incidents the CAT cited. We also do not want to diminish the upset and offence that the individual has caused to a number of people over the years.</p>

<p>We would like to see TPF acknowledge its failings in how this has been handled, and make changes to ensure these aren't repeated, but we're not looking for a blood-letting and further division. We would like to see this debacle as a catalyst for our communities coming together to move things forward. We need to clarify the organisation and governance structures of our communities, and start the process of defining common values and expectations around behaviour. This needs to be a community-led activity: given recent events, we don't feel that TPF/CAT is currently fit for a leadership role in this, but we would absolutely want your participation.</p>

<p>In volunteer communities such as ours, leadership is about doing the hard work of building consensus, not imposing your will on the rest of us. Leadership should be a service we provide to our communities.</p>

<p>Signed</p>

<p>Andreas König, Chief PAUSE Admin, White Camel award recipient<br>
Andrew Shitov, conference organiser, White Camel award recipient<br>
Ask Bjoern-Hansen, Perl NOC, runs perl.org, White Camel award recipient<br>
Chris Prather, Admin for irc.perl.org, White Camel award recipient<br>
Dave Cross, Perl trainer, regular speaker, author, Facebook group admin, White Camel award recipient<br>
Kenichi Ishigaki, CPANTS Admin, PAUSE Admin<br>
Neil Bowers, PAUSE Admin, event organiser, PSC member, White Camel award recipient<br>
Olaf Alders, MetaCPAN founder and project lead<br>
Philippe Bruhat, longtime event organiser, White Camel award recipient<br>
Robert Spier, Perl NOC, runs perl.org/pm.org , White Camel award recipient<br>
Thomas Klausner, event organiser, CPANTS Founder, White Camel award recipient<br>
Tim Bunce, founder of the Module List, PAUSE Admin Emeritus, author of DBI, White Camel award recipient</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Checking Phone Numbers and Transposing Tabular Data the Hard Way: The Weekly Challenge 110</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/02#pwc110" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to display all valid phone numbers in the given text file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use Capture::Tiny q/capture_stdout/;
use PhoneNumberParser;

MAIN:{
    my $parser = new PhoneNumberParser();
    while(my $line = &lt;DATA&gt;){
        $line =~ s/^\s+|\s+$//g;
        my $syntax_error = capture_stdout {
            $parser-&gt;parse($line); 
        };
        print("$line\n") if !$syntax_error;
    }
}   

__DATA__
0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
 00 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; grammar.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
%token SPACE DIGIT OPEN CLOSE PLUS
%%

phone_number: prefix SPACE area_exchange_subscriber
;

prefix: DIGIT DIGIT DIGIT DIGIT
    | OPEN DIGIT DIGIT CLOSE
    | PLUS DIGIT DIGIT
;   

area_exchange_subscriber: DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^(\s)// and return ("SPACE", $1);
        s/^(\d)// and return ("DIGIT", $1);
        s/^(\()// and return ("OPEN", $1);
        s/^(\))// and return ("CLOSE", $1);
        s/^(\+)// and return ("PLUS", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp perl/PhoneNumberParser.yp
$ perl -Iperl perl/ch-1.pl
0044 1148820341
+44 1148820341
(44) 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While a set of regular expression would have done the job quite nicely I figured I’d use this problem as a reason to shake the rust off my grammar writing skills. Not that I am a master parser writer or anything, but &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; makes it easy enough!&lt;/p&gt;
&lt;p&gt;Well, easy is a bit relative I suppose. This is definitely not the simplest way of performing this task.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to transpose the contents of the given file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
sub transpose{
    my @columns = @_;
    return transpose_r([], \@columns);  
}

sub transpose_r{
    my($transposed, $remaining) = @_;
    return $transposed if(@{$remaining} == 0);   
    $transposed = transpose_row_r($transposed, $remaining-&gt;[0]);  
    shift @{$remaining}; 
    transpose_r($transposed, $remaining);  
}

sub transpose_row_r{
    my($transposed, $row) = @_;
    return $transposed if(@{$row} == 0); 
    my $index = @{$row} - 1;
    push @{$transposed-&gt;[$index]}, pop @{$row};  
    transpose_row_r($transposed, $row);    
}

MAIN:{
    my @columns;
    while(my $line = &lt;DATA&gt;){
        chomp($line);
        my @fields = split(/,/, $line);   
        push @columns, \@fields; 
    }
    my $transposed = transpose(@columns);   
    for my $i (0 .. @{$transposed} - 1){
        print join(",", @{$transposed-&gt;[$i]}) . "\n";       
    }    
}

__DATA__
name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Similar to Part 1 this is also not the easiest way to perform this task. Here the same sort of recursion is used that is used in the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/05/02"&gt;Prolog version&lt;/a&gt; of the solution to this part. That is, we recurse over the table itself and then for each row perform a separate recursion to perform the transpostion.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/"&gt;Challenge 110&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc110</id>
    <published>2021-05-02T19:03:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 5</title>
  <summary type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-02T22:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-5"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-5</id>
  <content type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-05-01T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRAINBUZ/Acme-Brainbuz-markdown-0.001-TRIAL">Acme-Brainbuz-markdown</a></td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>0.001</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-BrowsingTableInteractively-0.001">Acme-CPANModules-BrowsingTableInteractively</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors-0.001">Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-0.01">Acme-Markdown-Embarrassing</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>Testing the MetaCPAN Markdown converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Alien-OpenMP-0.001">Alien-OpenMP</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>Encapsulate system info for OpenMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-ical-0.01">App-Greple-ical</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>Module to support Apple OS X Calendar data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/App-MigrateToTest2V0-0.01">App-MigrateToTest2V0</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Migrate your tests from Test::More to Test2::V0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/App-ProxyThat-0.001">App-ProxyThat</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.001</td>
<td>Proxy an URL from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-SQLiteUtils-0.001">App-SQLiteUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-dateseq-idn-0.003">App-dateseq-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Like dateseq, but with built-in support for Indonesian holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/App-perlimports-0.000001">App-perlimports</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Make implicit imports explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayData-0.1.0">ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Specification for ArrayData::*, modules that contains array data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayDataRoles-Standard-0.001">ArrayDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Standard set of roles for ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Constellations-0.01">Astro-Coord-Constellations</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Identify the constellation for position (RA, Dec)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Precession-0.01">Astro-Coord-Precession</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Precess coordinates between 2 epochs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMICO/Beekeeper-0.01">Beekeeper</a></td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>0.01</td>
<td>Framework for building applications with a microservices architecture</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GROUSSE/BigIP-REST-0.1">BigIP-REST</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.1</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Book-Bilingual-v0.001">Book-Bilingual</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.001</td>
<td>Data structure for a bilingual book</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BOD/Business-Stripe-WebCheckout-0.1_1">Business-Stripe-WebCheckout</a></td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>0.1_1</td>
<td>Simple way to implement payments using Stripe hosted checkout</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBOOK/CGI-Tiny-0.001">CGI-Tiny</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>0.001</td>
<td>Common Gateway Interface, with no frills</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DJERIUS/CXC-Number-0.03">CXC-Number</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.03</td>
<td>A namespace for modules which deal with numbers.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OVID/CodeGen-Protection-0.01">CodeGen-Protection</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.01</td>
<td>Safely rewrite parts of generated code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-API-0.01">Crypto-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-API-0.01">Crypto-Exchange-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-0.01">Crypto-Exchange-Binance</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-Spot-API-0.01">Crypto-Exchange-Binance-Spot-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance Spot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Data-Enum-v0.1.0">Data-Enum</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>fast, immutable enumeration classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Lookup-0.002">Data-TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Object-0.112">Data-TableData-Object</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.112</td>
<td>Manipulate data structure via table object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Devel-GlobalSub-0.01">Devel-GlobalSub</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.01</td>
<td>Automagically import a subroutine into all namespaces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CCM/File-Codeowners-0.50">File-Codeowners</a></td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>0.50</td>
<td>Read and write CODEOWNERS files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/File-Edit-0.0.1">File-Edit</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.0.1</td>
<td>A naive, probably buggy, file editor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/File-SortedSeek-PERLANCAR-0.015.0">File-SortedSeek-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015.0</td>
<td>A fork of File::SortedSeek with some more options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SANKO/Finance-Alpaca-0.9900">Finance-Alpaca</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.9900</td>
<td>Perl Wrapper for Alpaca's Commission-free Stock Trading API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CHROMATIC/Finance-Dogechain-1.20210418.2306">Finance-Dogechain</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210418.2306</td>
<td>use the dogecoin.info API from Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDN/Fork-Utils-0.01">Fork-Utils</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>set of usefull methods to work with processes and signals</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Function-Version-0.0001">Function-Version</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.0001</td>
<td>Define and use different function versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FAYLAND/Google-UULE-Generator-0.01">Google-UULE-Generator</a></td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>0.01</td>
<td>Generate Google UULE param</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-ExtendedKeys-0.01">Hash-ExtendedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>Hash Keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-RestrictedKeys-0.01">Hash-RestrictedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>restricted hash keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VRAG/JSON-Pointer-Extend-0.01">JSON-Pointer-Extend</a></td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>0.01</td>
<td>JSON::Pointer extension module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/LINQ-Database-0.000_001">LINQ-Database</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.000_001</td>
<td>LINQ extension for working with databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Lagrange-0.1.3">Lagrange</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>Perl extension for Lagrange Theory and Applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-CPUInfo-0.001">Lib-CPUInfo</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to PyTorch's libcpuinfo C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-PWQuality-0.001">Lib-PWQuality</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to the libpwquality C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NATARAJ/Lingua-StarDict-Writer-0.01">Lingua-StarDict-Writer</a></td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>0.01</td>
<td>A module that allows to create a StarDict dictionary</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/Linux-MCELog-0.01">Linux-MCELog</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to extract memory failure information from MCELog UNIX domain socket on Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/List-AllUtils-Null-0.001">List-AllUtils-Null</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>List subroutines that treat undef as contagious unknown, like null in SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/List-Keywords-0.01">List-Keywords</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a selection of list utility keywords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RVOSA/MIDI-SP404sx-v1.0.0">MIDI-SP404sx</a></td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>v1.0.0</td>
<td>Convert between MIDI files and SP404sx patterns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DFUG/Minion-Backend-Redis-0.002">Minion-Backend-Redis</a></td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>0.002</td>
<td>Redis backend for Minion job queue</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojo-OBS-Client-0.01">Mojo-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>Mojolicious client for the OBS WebSocket remote plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARASIK/Mojo-Reactor-Prima-1.00">Mojo-Reactor-Prima</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1.00</td>
<td>Prima event loop backend for Mojo::Reactor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DERIV/Myriad-0.001">Myriad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>async microservice framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Net-Protocol-OBSRemote-0.01">Net-Protocol-OBSRemote</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>event-loop agnostic protocol to control OBS via the WebSocket plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABIGAIL/OEIS-2021041201">OEIS</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2021041201</td>
<td>Fetch values from sequences of the OEIS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOOJONIO/OpenAPI-Generator-0.01">OpenAPI-Generator</a></td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>0.01</td>
<td>generate openapi definition</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/OpenMP-Environment-1.0.0">OpenMP-Environment</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1.0.0</td>
<td>Perl extension managing OpenMP variables in %ENV within a script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLICEASE/Package-Checkpoint-0.01">Package-Checkpoint</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>Checkpoint the scalar, array and hash values in a package for later restoration</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Perl-Oberon-0.1.3">Perl-Oberon</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>an Oberon compiler system written in Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASDAGO/Perl-PrereqScanner-Scanner-DistZilla-PluginBundle-0.001">Perl-PrereqScanner-Scanner-DistZilla-PluginBundle</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>scan for required plugins in Dist::Zilla plugin bundles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LTM/Plack-App-WWW-0.01">Plack-App-WWW</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>Serve cgi-bin and static files from root directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.001_001">Pod-Coverage-TrustMe</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001_001</td>
<td>Pod::Coverage but more powerful</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Collection-0.001">Role-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Iterator-0.001">Role-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>A basic iterator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KEEDI/SMS-Send-KR-Aligo-0.004">SMS-Send-KR-Aligo</a></td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>0.004</td>
<td>An SMS::Send driver for the smartsms.aligo.in SMS service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Finance-SE-IDX-0.001">Sah-Schemas-Finance-SE-IDX</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Schemas related to the Indonesian Stock Exchange</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/INA/See-0.01">See</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>Debug See</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Fermi-0.1.2">Stats-Fermi</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.2</td>
<td>Perl extension for Fermi, Boltzmann potentials</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Hawking-0.1.1">Stats-Hawking</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Perl extension for a Hawking Boltzmann Model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-0.05-TRIAL">Sub-Genius</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.05</td>
<td>manage concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-TRIAL-0.01">Sub-Genius-TRIAL</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.01</td>
<td>module for managing concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.01">Syntax-Keyword-Match</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a match/case syntax for perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/TOML-XS-0.01">TOML-XS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Parse TOML with XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-0.1.3">TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.3</td>
<td>Specification for TableData::*, modules that contains table data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableDataRoles-Standard-0.007">TableDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>Standard set of roles for TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-TickitWidget-0.001">Text-Table-TickitWidget</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>View table data on the terminal using Tickit::Widget::Table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Trek-20210424">Tree-Trek</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210424</td>
<td>Trek through a tree one character at a time.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Trim-20210401">Trim</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210401</td>
<td>Trim various things by removing leading and trailing whitespace.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/UniEvent-Socks-0.1.0">UniEvent-Socks</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>Socks support for UniEvent's tcp handles.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Unicode-Confuse-0.01">Unicode-Confuse</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Win32-Symlinks-0.03">Win32-Symlinks</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.03</td>
<td>A maintained, working implementation of Perl symlink built in features for Windows.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.01">XS-Parse-Keyword</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>XS functions to assist in parsing keyword syntax</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>50</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>16</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Brainbuz-markdown BRAINBUZ 0.001 turns baubles into trinkets Acme-CPANModules-BrowsingTableInteractively PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-Markdown-Embarrassing CONTRA 0.01 Testing the MetaCPAN Markdown converter Alien-OpenMP ETJ 0.001 Encapsulate system info for OpenMP App-Greple-ical UTASHIRO 0.01 Module to support Apple OS … <a href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1941</id>
    <published>2021-05-01T00:37:07Z</published>
    <updated>2021-05-01T00:37:07Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Live coding session with Gabor Szabo</title>
    <link href="http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html"/>
    <id>http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html</id>
    <updated>2021-04-29T20:06:52+00:00</updated>
    <category term="perl"/>
    <summary>Today I was invited to join Gabor Szabo for a live pair programming session, where we worked on adding Docker and CI to his course management application. You can view the video of our informal ...</summary>
    <content type="html">&lt;p&gt;Today I was invited to join &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt; for a &lt;a href="https://code-maven.com/setting-up-ci-and-docker-for-course-management-app"&gt;live pair programming session&lt;/a&gt;, where we worked on adding Docker and CI to his &lt;a href="https://github.com/szabgab/course-management"&gt;course management application&lt;/a&gt;. You can view the video of our informal competition who is the worst typist &lt;a href="https://www.youtube.com/watch?v=byugeGi1cNc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first I was bit skeptical about the concept of live coding (who wants to watch people google^w code for two hours?), but in the end it was a funny and informative (for me) session. Maybe I'm just totally deprived of live human interaction (thanks, Corona), but I think I'd enjoy similar sessions also under normal circumstances.&lt;/p&gt;

&lt;h4&gt;Things I learned&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I forgot a lot of docker command line options after mostly using docker-compose.&lt;/li&gt;
&lt;li&gt;There is no really smooth way to &lt;code&gt;COPY&lt;/code&gt; a lot of dirs into the container.&lt;/li&gt;
&lt;li&gt;Adding a &lt;code&gt;.dockerignore&lt;/code&gt; file (to ignore at least &lt;code&gt;~/.git/&lt;/code&gt;) saves some time and network, because docker will not send the ignored files to the docker daemon in the famous &lt;code&gt;sending build context to docker daemon&lt;/code&gt; step at the start of each build.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt; exposes the ports listed in &lt;code&gt;EXPOSE&lt;/code&gt;, but maps them to random ports on the host (which makes no sense during dev, but probably when deploying to clouds)&lt;/li&gt;
&lt;li&gt;Some people prefer &lt;code&gt;-ti&lt;/code&gt;, some prefer &lt;code&gt;-it&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I'm a bit rusty on using the github pull request workflow (esp. the part where you have to fetch upgrades from upstream), due to mostly working on repos where several devs have direct write access.&lt;/li&gt;
&lt;li&gt;Setting up github CI is really not a lot of work (at least to only run the basic tests). Only &lt;a href="https://github.com/szabgab/course-management/commit/2bfb424f8e1b14481def0886a198f4715cff5f8a"&gt;16 lines of &lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt;. I will try to add this to my &lt;span class="caps"&gt;CPAN &lt;/span&gt;github repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're interested in the Dockerfile aspect of this session, may I point you to my talk &lt;a href="/talks/writing_a_good_dockerfile_for_perl_app.html"&gt;Writing a good Dockerfile for a (Perl) app&lt;/a&gt; from the 2020 Perl Conference, where I elaborate on some of the finer points, and with better preparation than today :-)&lt;/p&gt;

&lt;p&gt;Oh, and this reminds me that I should submit a talk (maybe on docker-compose?) for &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;this years Perl &amp;amp; Raku conference&lt;/a&gt;. The CfP runs until tomorrow, so I better hurry.&lt;/p&gt;</content>
    <category term="docker"/>
    <category term="CI"/>
  </entry>
  <entry>
    <title>Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://perl.com/article/downloading-and-installing-perl-in-2021/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;[This article is part of our &lt;a href="https://github.com/tpf/perldotcom/projects/1"&gt;Popular articles&lt;/a&gt; project to update
Perl.com for contemporary practices]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re reading this article, you&amp;rsquo;re likely looking for a simple way
to download and install the Perl programming language. Or you already
have Perl installed as part of your operating system, but it&amp;rsquo;s older
than the currently-supported versions (5.32.1 or 5.30.3) and you&amp;rsquo;d
like to use the latest and greatest features. &lt;a href="https://www.perl.org/get.html"&gt;The download
options&lt;/a&gt; may seem daunting, especially
if you&amp;rsquo;re new to computers or programming. We&amp;rsquo;ll take things step by
step, and soon you&amp;rsquo;ll be on your way to writing your first Perl
program.&lt;/p&gt;

&lt;p&gt;A word of warning, though: Several of these steps (and usually Perl
itself) require using your computer&amp;rsquo;s command-line or terminal
interface.&lt;/p&gt;

&lt;h2 id="the-first-step-download-pre-built"&gt;The first step: Download pre-built&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re getting started in Perl development, you may only need a
pre-built binary distribution. Further on, though, you might want to
consider building your own, especially if you need to juggle different
versions to support different environments or want to use a later
version than is available pre-made.&lt;/p&gt;

&lt;p&gt;For now, though, let&amp;rsquo;s consider the pre-built options. You have
several, depending on what computer operating system you&amp;rsquo;re using.&lt;/p&gt;

&lt;h3 id="microsoft-windows"&gt;Microsoft Windows&lt;/h3&gt;

&lt;p&gt;The two main &amp;ldquo;flavors&amp;rdquo; of Perl for Windows are
&lt;a href="https://www.activestate.com/products/perl/"&gt;ActiveState Perl&lt;/a&gt; and
&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. Which one you choose depends
on what you plan to use it for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveState&lt;/strong&gt; provides a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition of ActivePerl&lt;/a&gt;
licensed only for development purposes. If you intend to do
commercial work or want technical support beyond community forums, you&amp;rsquo;ll
need to
&lt;a href="https://www.activestate.com/solutions/pricing/"&gt;subscribe to a team plan or higher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The free community edition is also 64-bit only, and as of this writing, only
the earlier versions 5.28 (2018) and 5.26 (2017) are available, with an
experimental 5.32 (2020) release licensed for any purpose. The latter is
also currently only installable via the Windows command line; earlier
versions use a standard Windows setup wizard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;&lt;/strong&gt; is a Perl environment for
Windows that strives to be as close as possible to Perl on Unix and Linux
systems, where the language got its start. Besides the Perl binaries, it
also includes a compiler, related tools, external libraries, and database
clients. This is important as many modules for extending Perl&amp;rsquo;s
functionality need a compiler. It&amp;rsquo;s also available in both 64-bit and
32-bit editions of the current 5.32 version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do I recommend?&lt;/strong&gt; There&amp;rsquo;s no escaping Perl&amp;rsquo;s Unix heritage, so you&amp;rsquo;ll
have an easier time with Strawberry Perl. That said, if you think you&amp;rsquo;ll be
taking advantage of ActiveState&amp;rsquo;s commercial offerings of support and their
&lt;a href="https://www.activestate.com/products/platform/"&gt;ActiveState Platform&lt;/a&gt; for
managing different language runtimes, you may want to give them a try.&lt;/p&gt;

&lt;p&gt;Windows also has two Linux-like environments in the form of
&lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/"&gt;Windows Subsystem for Linux&lt;/a&gt;.
Follow the Linux directions below to install Perl in one of these.&lt;/p&gt;

&lt;p&gt;There is also the &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager for
Windows, which provides an option for installing either ActiveState or
Strawberry Perl.&lt;/p&gt;

&lt;h3 id="apple-macos"&gt;Apple macOS&lt;/h3&gt;

&lt;p&gt;macOS comes with Perl pre-installed: version
5.18 (2013) on macOS Catalina 10.15 and 5.28 (2018) on Big Sur 11. But,
&lt;a href="https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes#Scripting-Language-Runtimes"&gt;Apple has said that scripting language runtimes are deprecated&lt;/a&gt;,
and are only &amp;ldquo;included &amp;hellip; for compatibility with legacy software.&amp;rdquo; You
should consider installing your own.&lt;/p&gt;

&lt;p&gt;Like Windows, ActiveState has a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition&lt;/a&gt;
for developers. The Windows caveats above apply, except for a current Perl
version 5.32—it&amp;rsquo;s &amp;ldquo;coming soon&amp;rdquo; as of this writing.&lt;/p&gt;

&lt;p&gt;Your best bet is to &lt;a href="https://brew.sh/"&gt;install the Homebrew package manager&lt;/a&gt;
in the macOS Terminal application (after
&lt;a href="https://docs.brew.sh/Installation#macos-requirements"&gt;installing its requirements&lt;/a&gt;),
and then issue the command &lt;code&gt;brew install perl&lt;/code&gt;. This will install the latest
version of Perl, as well as give you instructions for making sure that
installed Perl modules stay that way across updates by Homebrew.&lt;/p&gt;

&lt;h3 id="linux-or-another-unix-like-system"&gt;Linux or another Unix-like system&lt;/h3&gt;

&lt;p&gt;Like macOS, most Linux and Unix
systems come with Perl pre-installed, or installable using the operating
system&amp;rsquo;s software package manager. Also like macOS, these are usually older
versions provided for compatibility with other software provided by the
OS.&lt;/p&gt;

&lt;p&gt;To install your own on Linux, you can
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;go the ActiveState route&lt;/a&gt;
as above, or also use the
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux"&gt;Homebrew package manager&lt;/a&gt;. There are
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux#requirements"&gt;several requirements to install first&lt;/a&gt;,
and then you can
&lt;a href="https://brew.sh/"&gt;follow the directions for installing Homebrew&lt;/a&gt; and issue
the command &lt;code&gt;brew install perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For other Unix systems with an older version of Perl, I&amp;rsquo;m afraid you&amp;rsquo;re going
to have to build from source as detailed below.&lt;/p&gt;

&lt;h2 id="next-steps-building-your-own-with-perlbrew-or-plenv"&gt;Next steps: Building your own with perlbrew or plenv&lt;/h2&gt;

&lt;p&gt;Perl&amp;rsquo;s source code (the instructions that build a program) is freely
available and compiles on &lt;a href="https://perldoc.pl/perlport#PLATFORMS"&gt;over 100
platforms&lt;/a&gt;. You can &lt;a href="https://www.perl.org/get.html"&gt;download
it directly&lt;/a&gt; and build a version
yourself, after installing any prerequisite packages used to build
software on your operating system (see below). However, most Perl
developers choose to use a tool to automate that process and manage
different versions of Perl side-by-side. Enter
&lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perlbrew requires an already-installed system version of Perl, but it
can be as old as 5.8 (2002), which should cover most Linux and Unix
systems in use today. Once you&amp;rsquo;ve installed your operating system&amp;rsquo;s
build tools and followed the directions on &lt;a href="https://perlbrew.pl/"&gt;the perlbrew home
page&lt;/a&gt;, typing &lt;code&gt;perlbrew install 5.32.1&lt;/code&gt; followed
by &lt;code&gt;perlbrew switch 5.32.1&lt;/code&gt; will install and switch to the latest
version of Perl as of this writing. Installing older versions of Perl
and switching between them use the same steps, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perlbrew install &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.30.3 --as older-perl
perlbrew switch older-perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use an alternative, &lt;a href="https://github.com/tokuhirom/plenv"&gt;plenv&lt;/a&gt;,
which uses a different mechanism to manage versions of Perl using the &lt;code&gt;bash&lt;/code&gt;
command shell. It also enables you to use different versions of Perl depending
on which file system directory you&amp;rsquo;re working in. It&amp;rsquo;s
&lt;a href="https://github.com/tokuhirom/plenv/blob/master/README.md#installation"&gt;set up&lt;/a&gt;
using either Homebrew or &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows users have the option of
&lt;a href="https://github.com/stevieb9/berrybrew"&gt;berrybrew&lt;/a&gt;, which acts much like
perlbrew for Strawberry Perl with slightly different
&lt;a href="https://github.com/stevieb9/berrybrew#commands"&gt;options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="building-from-the-source-directly"&gt;Building from the source directly&lt;/h2&gt;

&lt;p&gt;If you feel you don&amp;rsquo;t need to manage multiple installations of Perl or you
want to do things old-school, you can always download and build directly from
the source code. Select &amp;ldquo;Download Latest Stable Source&amp;rdquo; from the
&lt;a href="https://www.perl.org/get.html"&gt;Perl Download&lt;/a&gt; web page, then
&lt;a href="https://opensource.com/article/17/7/how-unzip-targz-file"&gt;unarchive it&lt;/a&gt;
into a directory.&lt;/p&gt;

&lt;p&gt;You should always check the included &lt;code&gt;README&lt;/code&gt; files for information on how to
build on your system; there&amp;rsquo;s a generic one as well as specific &lt;code&gt;README&lt;/code&gt;s for
various platforms (&lt;code&gt;README.linux&lt;/code&gt;, &lt;code&gt;README.macosx&lt;/code&gt;, &lt;code&gt;README.win32&lt;/code&gt;, etc.).
Note that the &lt;code&gt;README.macosx&lt;/code&gt; document applies to current versions of macOS,
which was previously called Mac OS X; &lt;code&gt;README.macos&lt;/code&gt; is for the &amp;ldquo;Classic&amp;rdquo;
Macintosh operating system, unsupported since 2004.&lt;/p&gt;

&lt;p&gt;On most Unix-like systems (including macOS), you can then configure, build,
test, and install Perl by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;./Configure -des -Dprefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/
make
make test
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will build Perl with all default options for your system and install it
in the &lt;code&gt;/usr/local&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id="up-and-running"&gt;Up and running&lt;/h2&gt;

&lt;p&gt;Regardless of whether you&amp;rsquo;ve chosen to install a pre-built package or roll
your own, you should now be able to issue the following at your command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perl -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;and receive a reply that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is perl 5, version 32, subversion 1 (v5.32.1) built for darwin-2level
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2021, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;re now using the latest version of Perl on your computer!
Now head on over to &lt;a href="https://perl.org"&gt;Perl.org&lt;/a&gt; and start learning!&lt;/p&gt;
</content>
    <id>https://perl.com/article/downloading-and-installing-perl-in-2021/</id>
    <published>2021-04-27T04:05:40Z</published>
    <updated>2021-04-27T04:05:40Z</updated>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 4</title>
  <summary type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-26T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-4"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-4</id>
  <content type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Chowla Numbers and Numbers in Boxes: The Weekly Challenge 109</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/25#pwc109" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 20 Chowla Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant CHOWLA_COUNT =&gt; 20;
sub factor{
    my($n) = @_;
    my @factors = ();
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub chowla{
    my(@factors) = @_;
    my $sum = unpack("%32I*", pack("I*", @factors)); 
}

MAIN:{
    my @chowla_numbers;
    for my $n (1 .. CHOWLA_COUNT){
        push @chowla_numbers, chowla(factor($n));
    }
    print join(", ", @chowla_numbers) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code borrowed quite a bit a previous challenge involving &lt;a href="https://adamcrussell.livejournal.com/2607.html"&gt;Perfect Numbers&lt;/a&gt;. Indeed, the code is nearly identical! After we get the factors there is only the matter of summing them and displaying them.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Place the given unique numbers in the square box so that sum of numbers in each box is the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given four squares as below with numbers named a,b,c,d,e,f,g.
# to place the given unique numbers in the square box so that sum of 
# numbers in each box is the same. 
#               (1)                    (3)
#        +--------------+      +--------------+
#        ?              ?      ?              ?
#        ?      a       ?      ?      e       ?
#        ?              ? (2)  ?              ?  (4)
#        ?          +---+------+---+      +---+---------+
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ? b ?      ? d ?      ? f ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        +----------+---+      +---+------+---+         ?
#                   ?       c      ?      ?      g      ?
#                   ?              ?      ?             ?
#                   ?              ?      ?             ?
#                   +--------------+      +-------------+
##
use AI::Prolog;

my $prolog = do{
    local $/;
    &lt;DATA&gt;;
}; 
$prolog = new AI::Prolog($prolog); 
$prolog-&gt;query("sums_in_squares([1,2,3,4,5,6,7], Squares).");

my $result;
print join("\t", "a" .. "g") . "\n";  
while ($result = $prolog-&gt;results()){
    print join("\t", @{$result-&gt;[2]}) . "\n";
}

__DATA__
member(X,[X|T]).
member(X,[H|T]):- member(X,T).
sums_in_squares(Numbers, [A, B, C, D, E, F, G]):-  
    member(A, Numbers), 
    member(B, Numbers),
    member(C, Numbers),
    member(D, Numbers),
    member(E, Numbers),
    member(F, Numbers),
    member(G, Numbers),
    A \= B, A \= C, A \= D, A \= E, A \= F, A \= G,
    B \= A, B \= C, B \= D, B \= E, B \= F, B \= G,
    C \= A, C \= B, C \= D, C \= E, C \= F, C \= G,
    D \= A, D \= B, D \= C, D \= E, D \= F, D \= G,
    E \= A, E \= B, E \= C, E \= D, E \= F, E \= G,
    F \= A, F \= B, F \= C, F \= D, F \= E, F \= G,
    G \= A, G \= B, G \= C, G \= D, G \= E, G \= F,
    Box1 is A + B,
    Box2 is B + C + D,
    Box3 is D + E + F,
    Box4 is F + G,
    Box1 == Box2,
    Box2 == Box3,
    Box3 == Box4.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
a       b       c       d       e       f       g
3       7       2       1       5       4       6
4       5       3       1       6       2       7
4       7       1       3       2       6       5
5       6       2       3       1       7       4
6       4       1       5       2       3       7
6       4       5       1       2       7       3
7       2       6       1       3       5       4
7       3       2       5       1       4       6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This sort of problem practically screams out for a Prolog solution! In the interest of keeping with the name, if not the spirit of the weekly challenge, this first part is indeed Perl, albeit using AI::Prolog, a module which offers a pure Perl implementation of a basic Prolog.&lt;/p&gt;
&lt;p&gt;I have used AI::Prolog &lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;previously&lt;/a&gt; and it’s a neat way to take advantage of Prolog within a Perl based solution. The two main downsides are that (1) it is not a full ISO Prolog and (2) it is slow. So very very slow. I suspect, in fact, there is a serious bug in the implementation. Even accounting for the fact that a pure Perl Prolog would be much slower than one written in C, such as Gnu Prolog, the execution time differences are laughably dramatic. I didn’t bother with precise metrics but the code above takes about an hour to run on fairly current hardware (i.e. my 2018 Mac Mini). Essentially the same code run on the same hardware but with Gnu Prolog completes in mere seconds.&lt;/p&gt;
&lt;p&gt;Still, this is a nice way to incorporate a bit of Symbolic AI in a Perl code base if there is a small search space. Say, for some simple game logic or a small chat bot.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/25"&gt;pure Prolog solution&lt;/a&gt; I did for this uses the same approach, in part, although I also wrote this to take advantage of Gnu Prolog’s FD solver. The FD version of the code completes in about 10ms!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/"&gt;Challenge 109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sarvadaman_Chowla"&gt;Sarvadaman D. S. Chowla&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/AI::Prolog"&gt;AI::Prolog&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc109</id>
    <published>2021-04-25T16:00:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
