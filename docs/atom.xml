<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-11-13T08:43:33Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>I made a calculator</title>
    <link rel="alternate" href="http://blogs.perl.org/users/oodler_577/2021/11/i-made-a-calculator.html"/>
    <id>tag:blogs.perl.org,2021:/users/oodler_577//3888.10493</id>
    <published>2021-11-13T09:05:47Z</published>
    <updated>2021-11-13T10:17:50Z</updated>
    <author>
        <name>Oodler 577</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/oodler_577/">
        <![CDATA[<p>I created a very basic calculator using wxGlade and the Wx Perl module on CPAN.</p>

<p><a href="http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxCalc-4755.html" onclick="window.open('http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxCalc-4755.html','popup','width=869,height=684,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxCalc-thumb-400x314-4755.png" width="400" height="314" alt="wxCalc.png" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></a></p>

<p>This is a short one. I've been playing around with wxGlade because it generates Perl code. It is pretty easy to get started on Ubuntu using the base perl.</p>

<ul>
	<li><code>sudo apt-get install wxGlade</code></li>
	<li><code>sudo apt-get install libwx-perl</code></li>
</ul>

<p>It took me a while to get the feel of wxGlade, so hang in there. The pay off is when you figure out how to:</p>

<ol>
        <li>build a basic GUI using the builder tools</li>
	<li>generate Perl code to just show the GUI (with no actions)</li>
	<li>inspect the Perl code</li>
	<li>run Perl code</li>
	<li>start defining the event handlers</li>
</ol>

<p>It also takes some time to get an idea about how the Perl code via wxGlade gets injected into the Perl file. I recommend experimenting with the different places in wxGlade you can put in code.</p>

<p><strong>Creating the All Important Flow</strong></p>

<p>wxGlade has a nice feature that seems to work well, that allows it to be part of your development workflow - i.e., the code generation feature seems to do a pretty good job at respecting the code you've entered manually. This is key because it'd be super annoying to have to reapply changes each time you "generated" the boilerplate code. I am sure other GUI builders have this capability, which in my limited experience appears to be essential.</p>

<p>One important note that you will discover when you get into a productive workflow that consists of: tweaking the GUI in wxGlade, generating code, and then manually adding code is that this nice feature that is <strong>NOT</strong> on by default. Be sure to turn on this feature to preserves your manual changes in the generated Perl file, whenever updating the boilerplate GUI building code (the primary reason for GUI builders).</p>

<p>To do this, <u>you must make sure the "<i>Keep user code</i>" is checked</u>, as in the screenshot below. Obviously, you'll want to minimize the hacking done on the generated code; so it's appearing to be a good practice to encapsulate as much of the action handling code in a module as possible; thus minimizing the reliance on whatever method wxGlade uses to not overwrite or fudge your customizations in the source file.</p>

<p>The GUI builder (wxGlade) in this case seems essential for getting even a "minimally useful" Perl GUI applications built. It is work to get a hang of the tool and how it can be interleaved in your typical Perl workflow, but it's worth the effort.</p>

<p><a href="http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxGlade-4758.html" onclick="window.open('http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxGlade-4758.html','popup','width=810,height=830,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/oodler_577/assets_c/2021/11/wxGlade-thumb-400x409-4758.png" width="400" height="409" alt="wxGlade.png" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></a></p>

<p>I have not researched the "issue" of packaging and distributing anything because nobody wants to buy my dumb calculator. I have noted a couple of options out there, but have not tried any of them. Having a simple to set up (but not necessarily use) GUI builder that's Perl-friendly is one half of the Perl pushing into native GUI applications. The other, and more important half, is the packaging and distribution of such applications.</p>

<p>At some point this will be addressed. In the meantime, I encouarge you take a look at wxGlade and the Wx Perl module.</p>

<p>Note: I have not posted the calulator code because it's not helpful; the point of this post is to encourage readers to take a looke at wxGlade and get a feel for how it can integrate into your GUI application workflow.</p>

<p>You really need to go through the process of generating the GUI and playing with the generated code to see what's going on. Your Perl-fu will be vitally helpful, so don't worry about the workflow being mostly spent in the GUI builder - if you do it right, it won't be.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>The Ephemeral Miniconf</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tiib/2021/11/the-ephemeral-miniconf.html"/>
    <id>tag:blogs.perl.org,2021:/users/tiib//3930.10491</id>
    <published>2021-11-12T18:35:33Z</published>
    <updated>2021-11-12T20:18:49Z</updated>
    <author>
        <name>Tiib</name>
        
    </author>
    <category term="miniconf" label="miniconf" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tiib/">
        <![CDATA[<p>The Ephemeral Miniconf is planned on thursday 18th of november 2021!</p>

<p>Have you heard about <strong>The Ephemeral Miniconf</strong> ?</p>

<p><img alt="flyeren2small.png" src="http://blogs.perl.org/users/tiib/flyersmall.png/flyeren2small.png" width="654" height="925" class="mt-image-none" style="" /></p>

<p>It's a Perl/Raku free and online miniconf that will take place on Zoom! <br />
Think "TPRCiC" but smaller with only one track :)</p>

<p>I'm honored to have some experienced speakers about Perl, Github, Devops, LDAP etc... You will enjoy I promise!</p>

<p>More informations on my <a href="https://dev.to/thibaultduponchelle/series/14341">big blog serie about on devto</a> or <a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/">on the website</a>.</p>

<p>I can give you already the connections informations:</p>

<p><strong>Meeting ID: 818 6906 5466<br />
Pass: 42</strong></p>

<p>It's planned at 3pm UTC+1(Paris time) so check <a href="https://everytimezone.com/s/ec3d1b5c">the timezone planner</a> to know when it is for you.</p>

<p>It's in the morning if you're in US, in the afternoon if you're in Europe and very late if you're in Asia or Australia (sorry).</p>

<p>The planning will be something like this:<br />
<img alt="planningsmall.png" src="http://blogs.perl.org/users/tiib/planningsmall.png/planningsmall.png" width="614" height="347" class="mt-image-none" style="" /></p>

<p>(it could last longer or change a bit inside the range, like shifting talks, but at the moment here it is)</p>

<p>I'm also possibly preparing some surprises that I don't want to reveal for now.</p>

<p>So my message is basically, it's coming, book your calendar and I'm looking forward to see you at <strong>The Ephemeral Miniconf</strong>! </p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 138: Workdays and Split Number</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/11/perl-weekly-challenge-138-workdays-and-split-number.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10492</id>
    <published>2021-11-12T20:13:28Z</published>
    <updated>2021-11-12T20:17:21Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 138 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-138/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on November 14, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Workdays</h2>

<p>*You are given a year, <code>$year</code> in 4-digits form.</p>

<p><em>Write a script to calculate the total number of workdays in the given year.</em></p>

<blockquote>
  <p><em>For the task, we consider, Monday - Friday as workdays.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $year = 2021
Output: 261
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $year = 2020
Output: 262
</code></pre>

<p>A year has 52 weeks, plus one or two days (when the year is leap). So, we will have <code>5 * 52 = 260</code> work days, plus 0, 1, or 2 days. So we basically start with 260 work days and add one if Dec. 31 falls on a week day, plus another work day if the year is leap and if Dec. 30 falls on a week day.</p>

<h3>Workdays in Raku</h3>

<p>In Raku, we start with Jan. 1 of the input year and add 52 weeks to it. The <a href="https://docs.raku.org/type/Dateish#method_later">later</a> of the <a href="https://docs.raku.org/type/Dateish">Dateish</a> role will happily compute the date 52 weeks after Jan. 1 and accurately take care of leap years, so that it will return Dec. 30 on leap years and Dec. 31 on other years. It is then only a matter to find out is these dates fall on week days.</p>

<pre><code>sub work-days (UInt $y) {
    my $new-year-day = Date.new("$y-01-01");
    my $fifty-two-weeks-later = $new-year-day.later(:52weeks);
    my $count = 52 * 5;
    $count++ if 1 &lt;= $fifty-two-weeks-later.day-of-week &lt; 6;
    return $count if $fifty-two-weeks-later.day == 31;
    $count++ if 1 &lt;= $fifty-two-weeks-later.later(:1days).day-of-week &lt; 6;
    return $count;
}
say "$_ -&gt; ", work-days $_ for 2000..2021;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./working-days.raku
2000 -&gt; 260
2001 -&gt; 261
2002 -&gt; 261
2003 -&gt; 261
2004 -&gt; 262
2005 -&gt; 260
2006 -&gt; 260
2007 -&gt; 261
2008 -&gt; 262
2009 -&gt; 261
2010 -&gt; 261
2011 -&gt; 260
2012 -&gt; 261
2013 -&gt; 261
2014 -&gt; 261
2015 -&gt; 261
2016 -&gt; 261
2017 -&gt; 260
2018 -&gt; 261
2019 -&gt; 261
2020 -&gt; 262
2021 -&gt; 261
</code></pre>

<h3>Workdays in Perl</h3>

<p>In Perl, we&#8217;ll use the core <a href="https://perldoc.perl.org/Time::Piece">Time::Piece</a> module. We&#8217;ll use a slightly different strategy: we start with <code>5 * 52 = 260</code> work days, add one if Dec. 31 is a week day, and add one more if the year is leap and if Dec. 30 is a week day.</p>

<pre><code>use warnings;
use feature qw/say/;
use Time::Piece;

sub work_days {
    my $y = shift;
    my $count = 52 * 5;
    my $t = Time::Piece-&gt;strptime("$y Dec 31", '%Y %b %e');
    my $last_d = $t-&gt;day_of_week;
    $count++ if $last_d &gt; 0 and $last_d &lt; 6;
    if ($t-&gt;is_leap_year) {
        my $thirtieth = ($last_d - 1) % 7;
        $count++ if $thirtieth &gt; 0 and $thirtieth &lt; 6;
    }
    return $count;
}
say "$_ -&gt; ", work_days $_ for 2000..2021;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./working-days.pl
2000 -&gt; 260
2001 -&gt; 261
2002 -&gt; 261
2003 -&gt; 261
2004 -&gt; 262
2005 -&gt; 260
2006 -&gt; 260
2007 -&gt; 261
2008 -&gt; 262
2009 -&gt; 261
2010 -&gt; 261
2011 -&gt; 260
2012 -&gt; 261
2013 -&gt; 261
2014 -&gt; 261
2015 -&gt; 261
2016 -&gt; 261
2017 -&gt; 260
2018 -&gt; 261
2019 -&gt; 261
2020 -&gt; 262
2021 -&gt; 261
</code></pre>

<h2>Task 2: Split Number</h2>

<p><em>You are given a perfect square.</em></p>

<p><em>Write a script to figure out if the square root the given number is same as sum of 2 or more splits of the given number.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 81
Output: 1

Since, sqrt(81) = 8 + 1
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 9801
Output: 1

Since, sqrt(9801) = 98 + 0 + 1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 36
Output: 0

Since, sqrt(36) != 3 + 6
</code></pre>

<h3>Split Number in Raku</h3>

<p>I first thought I could use some combination of the <code>combinations</code> and <code>permutations</code> methods to solve the problem, but this turned out to be more complicated than expected. So I decided to write a recursive <code>partition</code> subroutine to build the various partitions of the input square number and add the various parts. The <code>split-square</code> subroutine checks that the input number is a perfect square and calls the <code>partition</code> subroutine, passing to it a list of the input number digits. Note that we are using dynamic variables (<code>$*found</code> and <code>$*root</code>) to avoid passing them back and forth in the recursive subroutine calls.</p>

<pre><code>use v6;

sub partition (Int $sum is copy, @in) {
    if @in.elems == 0 {
        $*found = 1 if $sum == $*root;
        return;
    }
    for 1..@in.elems -&gt; $i {
        my $new-sum = $sum + join "", @in[0..($i-1)];
        last if $new-sum &gt; $*root;
        partition $new-sum, @in[$i..@in.end];
    }
}

sub split-square (UInt $sq) {
    my $*root = sqrt($sq).Int;
    say "$sq is not a perfect square\n" and return 0 if $*root² != $sq;
    my $*found = 0;
    partition(0, $sq.comb);
    return $*found;
}
for &lt;1 27 81 100 225 1296 6561 9801&gt; -&gt; $test {
    say $test.fmt("%5d\t") , split-square $test;
}
</code></pre>

<p>This program displays the following output:</p>

<p>raku ./split-squares.raku
        1   1
    27 is not a perfect square</p>

<pre><code>   27   0
   81   1
  100   1
  225   0
 1296   1
 6561   0
 9801   1
</code></pre>

<h3>Split Number in Perl</h3>

<p>This is essentially a Perl port of the Raku solution above. We also implement a recursive <code>partition</code> subroutine to build the various partitions of the input square number and add the various parts. The <code>split_square</code> subroutine checks that the input number is a perfect square and calls the <code>partition</code> subroutine, passing to it a list of the input number digits.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my ($found, $root);

sub partition {
    my ($sum, @in) = @_;    
    if (scalar @in == 0) {
        $found = 1 if $sum == $root;
        return;
    }
    for my $i (1..(scalar @in)) {
        my $new_sum = $sum + join "", @in[0..($i-1)];
        last if $new_sum &gt; $root;
        partition ($new_sum, @in[$i..$#in]);
    }
}

sub split_square {
    my $sq = shift;
    $root = int sqrt($sq);
    say "$sq is not a perfect square\n" and return 0 if $root ** 2 != $sq;
    $found = 0;
    partition(0, split //, $sq);
    return $found;
}
for my $test (qw&lt;1 27 81 100 225 1296 6561 9801&gt;) {
    printf "%5d\t%d\n", $test , split_square $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./split-squares.pl
    1   1
27 is not a perfect square

   27   0
   81   1
  100   1
  225   0
 1296   1
 6561   0
 9801   1
</code></pre>

<p>## Wrapping up</p>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on November 21, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The ephemeral miniconf - Connection infos! </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-connection-infos-1dmb" type="text/html"/>
    <content type="html">&lt;h3&gt;
  &lt;a href="#the-ephemeral-miniconf-is-planned-on-thursday-18th-of-november-2021"&gt;
  &lt;/a&gt;
  The Ephemeral Miniconf is planned on thursday 18th of november 2021!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-wHmcBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3k2iwdnf5z1jp0l10al.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-wHmcBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3k2iwdnf5z1jp0l10al.png" alt="Flyer the ephemeral miniconf" width="880" height="1244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you heard about &lt;strong&gt;The Ephemeral Miniconf&lt;/strong&gt; ?&lt;/p&gt;

&lt;p&gt;It's a Perl/Raku free and online miniconf that will take place on Zoom! &lt;/p&gt;

&lt;p&gt;Think "TPRCiC" but way smaller/shorter and with only one track :) &lt;/p&gt;

&lt;p&gt;Single day, single track, Perl, Raku and fun.&lt;/p&gt;

&lt;p&gt;I'm honored to have some experienced speakers about Perl, GitHub, Devops, LDAP etc... You will enjoy I promise!&lt;/p&gt;

&lt;p&gt;More informations on &lt;a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/"&gt;the website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can give you already the connections informations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meeting ID: 818 6906 5466&lt;br&gt;
Pass: 42&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's planned at 3pm UTC+1(Paris time) so check &lt;a href="https://everytimezone.com/s/ec3d1b5c"&gt;the timezone planner&lt;/a&gt; to know when it is for you.&lt;/p&gt;

&lt;p&gt;It's in the morning if you're in US, in the afternoon if you're in Europe and very late if you're in Asia or Australia (sorry).&lt;/p&gt;

&lt;p&gt;The planning will be something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDl8uFVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blogs.perl.org/users/tiib/planningsmall.png/planningsmall.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDl8uFVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blogs.perl.org/users/tiib/planningsmall.png/planningsmall.png" alt="Planning" width="614" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(it could last longer or change a bit inside the range, like shifting talks, but at the moment here it is)&lt;/p&gt;

&lt;p&gt;I'm also possibly preparing some surprises that I don't want to reveal for now.&lt;/p&gt;

&lt;p&gt;So my message is basically, it's coming, book your calendar and I'm looking forward to see you at &lt;strong&gt;The Ephemeral Miniconf&lt;/strong&gt;! &lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-connection-infos-1dmb</id>
    <published>2021-11-12T15:36:28Z</published>
    <updated>2021-11-12T15:36:28Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="conf"/>
  </entry>
  <entry>
  <title>Volunteers needed for Perl dev room at FOSDEM (online)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem-volunteers-call-for-participation"/>
  <id>tag:news.perlfoundation.org,2021-11-11:/post/fosdem-volunteers-call-for-participation</id>
  <published>2021-11-11T16:20:01</published>
  <updated>2021-11-11T16:20:01</updated>
  <summary>
  <![CDATA[
     FOSDEM will run online on 5-6 February 2022 and is calling for participation. The Marketing Committee would like to run a Perl dev room but need volunteers and speakers to assist. Talks need to be prerecorded and uploaded prior to the conference, which are then streamed to participants with Q&A after each. Before we request the room from FOSDEM and call for speakers, we need volunteers to assist with both 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>FOSDEM will run online on 5-6 February 2022 and is <a href="https://fosdem.org/2022/news/2021-11-02-devroom-cfp/">calling for participation</a>. The Marketing Committee would like to run a Perl dev room (basically a talk track), but need volunteers and speakers to assist.</p>

<p>Talks need to be prerecorded and uploaded prior to the conference, which are then streamed to participants with Q&amp;A after each.</p>

<p>Before we request the room from FOSDEM and call for speakers, we need volunteers to assist with both organizing and supporting speakers.</p>

<p>We need 2-3 people who can meet regularly and spend time planning it, encouraging calls for papers, helping speakers record their talks as needed, supporting the management of our dev room on the day, including the collation of recordings etc.</p>

<p>If you can commit to support, we can submit a proposal for dev room (deadline is 23:59 UTC, Monday 15 November).</p>

<p>Please contact nic@perlfoundation.org by 12 noon UTC, Monday 15 November if you can help. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>My Favorite (?) Warnings - Ex-Warnings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10490</id>
    <published>2021-11-11T04:30:30Z</published>
    <updated>2021-11-11T04:32:57Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Warning categories have proliferated since the <a href="http://perldoc.perl.org/warnings.html"><code>warnings</code></a> pragma was first introduced in Perl 5.6: from <code>50</code> in Perl 5.6.2 to <code>79</code> in Perl 5.35.5 (the latest as of this writing). But warnings have been removed as well as added. This post documents these -- mostly for historical interest on my part.</p>

<dl>

<p>    <dt><code>chmod</code></dt><br />
    <dd>This warning flagged a <code>chmod</code> statement with a literal first argument (the mode) which did not begin with <code>0</code>, and therefore was not an octal constant. This was removed in Perl 5.8, but <a href="http://perldoc.perl.org/perl58delta.html">perl58delta</a> is silent about why.</dd></p>

<p>    <dt><code>experimental::autoderef</code></dt><br />
    <dd>This warning was added in Perl 5.20 to flag the experimental use of a scalar in lieu of an array or hash in built-ins such as <code>push</code> and <code>keys</code>. This warning was removed in Perl 5.24 when the feature itself was deemed an unsuccessful experiment and removed. The removal of both feature and warning is documented in <a href="https://perldoc.perl.org/perl5240delta#The-autoderef-feature-has-been-removed">perl5240delta</a>.</dd></p>

<p>    <dt><code>experimental::lexical_topic</code></dt><br />
    <dd>This warning was belatedly added in perl 5.18 to flag the experimental use of a lexical topic variable (that is, <code>my $_</code>). "Belatedly" because lexical topics themselves were introduced in Perl 5.10, but the <code>experimental</code> warnings were not introduced until 5.18. This warning was removed in Perl 5.24 when the feature itself was deemed an unsuccessful experiment and removed. The removal of the feature (but not the warning) is documented in <a href="https://perldoc.perl.org/perl5240delta#Lexical-$_-has-been-removed">perl5240delta</a>.</dd></p>

<p>    <dt><code>umask</code></dt><br />
    <dd>This warning flagged a <code>umask</code> statement with a literal argument (the mode) which did not begin with <code>0</code>, and therefore was not an octal constant. This was removed in Perl 5.8, but <a href="http://perldoc.perl.org/perl58delta.html">perl58delta</a> is silent about why.</dd></p>

<p>    <dt><code>y2k</code></dt><br />
    <dd>According to the relevant <code>perldiag</code> this warning flagged the concatenation of <code>'19'</code> with a number, representing a possible Y2K bug. The weasel words are because I have not been able to get Perl 5.6 or 5.8 to actually emit the associated diagnostic. At any rate it was removed in Perl 5.10, though <a href="http://perldoc.perl.org/perl5100delta.html">perl5100delta</a> is silent about why. I speculate that this warning was recognized as a case of closing the barn door after the horse was gone, since Perl 5.6 (the first with  <a href="http://perldoc.perl.org/warnings.html"><code>warnings</code></a>) was released in March of 2000, and the release of Perl 5.10 was December of 2007.</dd></p>

</dl>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Processing dates and times with Perl</title>
    <link rel="alternate" href="https://dev.to/davorg/processing-dates-and-times-with-perl-31gh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Twenty years ago, I wrote a book called <em>Data Munging with Perl</em>. People said nice things about it, but the publishers let it go out of print several years ago. That's probably fair - to be honest a lot of its advice is looking a bit dated.</p>

<p>One of the things I covered was manipulating dates and times with Perl. Back then we didn't have tools like <a href="https://metacpan.org/pod/Time::Piece">Time::Piece</a> or <a href="https://metacpan.org/pod/DateTime">DateTime</a> so my examples used Perl's built-in date and time functions and the "state of the art" CPAN modules Date::Calc and Date::Manip.</p>

<p>If there were one section of the book that I could go back and rewrite, it would be this one. Date and time handling in Perl has come on a long way in the last twenty years and it pains me to see people still using things like Date::Manip.</p>

<p>The book took three common examples:</p>

<ul>
<li>Finding the date in x days time</li>
<li>Finding the date of the previous Saturday</li>
<li>Finding the date of the first Monday in a given year</li>
</ul>

<p>Following a <a href="https://www.reddit.com/r/perl/comments/qq71g2/meditation_on_calendar_modelling/">discussion on Reddit</a>, I thought it would be interesting to reproduce my examples using more modern date and time handling tools.</p>

<p>So let's see how we'd do those things using modern Perl classes.</p>

<h2>
  <a href="#using-timepiece">
  </a>
  Using Time::Piece
</h2>

<h3>
  <a href="#finding-the-date-in-x-days-time">
  </a>
  Finding the date in x days time
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use Time::Piece;
use Time::Seconds;

my $days = shift // 10;

my $now = localtime;
say $now + ($days * ONE_DAY);
</code></pre>

</div>

<p>This is pretty simple stuff. Time::Piece overrides the standard <code>localtime()</code> function so that I get a Time::Piece object back. I can then add seconds to that object using one of the constants defined in <a href="https://metacpan.org/pod/Time::Piece">Time::Seconds</a> to get the time I want.</p>

<p>The output I get from running this program is:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Sat Nov 20 17:02:19 2021
</code></pre>

</div>

<p>Note that by just printing my Time::Piece object, I get a nicely-formatted date/time string. If the format isn't quite to my liking, I could use the <code>strftime()</code> method to get the format that I want.</p>

<h3>
  <a href="#finding-the-date-of-the-previous-saturday">
  </a>
  Finding the date of the previous Saturday
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use Time::Piece;
use Time::Seconds;

my $now = localtime;
my $days = $now-&gt;day_of_week + 1;
say $now - ($days * ONE_DAY);
</code></pre>

</div>

<p>This is very similar to the previous example. We get a Time::Piece object that contains the current date and time and then work out how many days to go back to get to the previous Saturday. The <code>day_of_week()</code> method returns a number between 0 and 6, with Sunday being 0. We need to add one to that number to get to Saturday.</p>

<h3>
  <a href="#finding-the-date-of-the-first-monday-in-a-given-year">
  </a>
  Finding the date of the first Monday in a given year
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use Time::Piece;
use Time::Seconds;

my $year = localtime-&gt;year;

my $first_mon = Time::Piece-&gt;strptime("$year Jan 1", '%Y %b %e');

$first_mon += (8 - $first_mon-&gt;day_of_week) % 7 * ONE_DAY;

say $first_mon;
</code></pre>

</div>

<p>This also works on a very similar principle. We get the current year and create a Time::Piece object that contains the 1st January from that year. We then just work out how many days (perhaps zero) we need to add to get to a Monday.</p>

<h2>
  <a href="#using-datetime">
  </a>
  Using DateTime
</h2>

<h3>
  <a href="#finding-the-date-in-x-days-time">
  </a>
  Finding the date in x days time
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use DateTime;

my $days = shift // 10;

my $now = DateTime-&gt;now;
say $now-&gt;add(days =&gt; $days);
</code></pre>

</div>

<p>The form of this is pretty similar to the Time::Piece example. We can use <code>DateTime-&gt;now</code> to get a DateTime object containing the current date and time and then use the <code>add()</code> method on that to add a number of days.</p>

<p>The output I get from running this program is:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>2021-11-20T18:51:57
</code></pre>

</div>

<p>Note that, like Time::Piece, we can just print a DateTime object and get a nicely-formatted string. I prefer DateTime's default format as it uses the ISO standard for dates and times. But, as with Time::Piece, there's a method called <code>strftime()</code> that you can use to produce strings in other formats.</p>

<h3>
  <a href="#finding-the-date-of-the-previous-saturday">
  </a>
  Finding the date of the previous Saturday
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use DateTime;

my $now = DateTime-&gt;now;;
my $days = $now-&gt;day_of_week + 1;
say $now-&gt;subtract(days =&gt; $days);
</code></pre>

</div>

<p>This is also very similar in shape to the Time::Piece version. We're just converting the same logic to the DateTime syntax.</p>

<h3>
  <a href="#finding-the-date-of-the-first-monday-in-a-given-year">
  </a>
  Finding the date of the first Monday in a given year
</h3>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use DateTime;

my $year = DateTime-&gt;now-&gt;year;

my $first_mon = DateTime-&gt;new(
  year  =&gt; $year,
  month =&gt; 1,
  day   =&gt; 1,
);

my $days = (8 - $first_mon-&gt;day_of_week) % 7;

say $first_mon-&gt;add(days =&gt; $days);
</code></pre>

</div>

<p>And this is another case where we're mostly just translating Time::Piece syntax to DateTime syntax. The only other real difference is that DateTime has a real constructor method, whereas to construct a Time::Piece object for an arbitrary date we needed to create a string a parse it using <code>strptime()</code>.</p>

<h2>
  <a href="#conclusions">
  </a>
  Conclusions
</h2>

<p>I hope you can see from these examples that using more modern date and time tools can make you code smaller and easier to understand than it would be if you used Perl's built-in functions for this kind of work.</p>

<p>Here are a few advantages that I think you get from using these libraries:</p>

<ul>
<li>Storing your date and time in a single, structured variable rather than separate scalars for the various parts of a date and time.</li>
<li>Easy parsing of date and time strings into an object.</li>
<li>Easy production of many different output formats.</li>
<li>Easy addition and subtraction of dates and times.</li>
<li>Objects are easy to compare (and, therefore, sort).</li>
<li>You no longer need to care that <code>localtime()</code> gives a month that's between 0 and 11 or a year that is the actual year minus 1900.</li>
</ul>

<p>I haven't shown it here, but these classes also understand timezones - so that's another area that will give you far fewer headaches if you switch to using these classes.</p>

<p>I've covered what are probably the two most popular modern date and time classes for Perl. I expect you're wondering how you would decide which one to use.</p>

<ul>
<li>Time::Piece has been included in the standard Perl distribution since version 5.10 was released in 2007. It's therefore good in situations where it's hard to install CPAN modules.</li>
<li>DateTime needs to be installed from CPAN, but it's an incredibly powerful module and sits at the centre of a massive ecosystem of other date and time classes. If, for example, you want to deal with calendars other than the Gregorian calendar, then there's probably a DateTime add-on that can help you.</li>
</ul>

<p>The rule of thumb that I use is this - if it's a simple project and Time::Piece can do the job, then I use that. Otherwise, I reach for DateTime or one of its friends.</p>

<p>But honestly, learning to use these date and time modules will make your programming life easier.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/processing-dates-and-times-with-perl-31gh</id>
    <published>2021-11-10T19:33:16Z</published>
    <updated>2021-11-10T19:33:16Z</updated>
    <category term="perl"/>
    <category term="dates"/>
    <category term="times"/>
  </entry>
  <entry>
    <title>Readability is paramount</title>
    <link rel="alternate" href="https://dev.to/tinydevops/readability-is-paramount-4e2d" type="text/html"/>
    <content type="html">&lt;p&gt;I grew up, as a software developer, in the world of Perl. Perl’s motto is &lt;a href="https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it"&gt;There’s more than one way to do it&lt;/a&gt;, (abbreviated to &lt;strong&gt;TIMTOWTDI&lt;/strong&gt; and pronounced: &lt;em&gt;Tim Toady&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;As the thinking goes, this flexibility allows the programmer to write more concise statements, as well as choose a style that fits the context, or their whims.&lt;/p&gt;

&lt;p&gt;But is this a good idea?&lt;/p&gt;

&lt;p&gt;I distinctly remember the day I was trying to explain some Perl code to a colleague. The beautiful one-liner ellegantly iterated a list through a map function, and utilized the a subtle side effect to trigger an update to a variable, which was later read for its state.&lt;/p&gt;

&lt;p&gt;After stepping him through everything it did, and him still shaking his head, I re-wrote it into a 3-line form that anyone could understand.&lt;/p&gt;

&lt;p&gt;I’ve come a long way since then.&lt;/p&gt;

&lt;p&gt;I once felt that writing short, clever code was the proof of my superior coding ability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBxEOjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jhall.io/images/picard-facepalm_huc7cb7d5266187c7cbea3ecc7bfaf6a34_40505_300x0_resize_q85_box.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBxEOjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jhall.io/images/picard-facepalm_huc7cb7d5266187c7cbea3ecc7bfaf6a34_40505_300x0_resize_q85_box.jpg" alt="" width="300" height="169"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what value is short, clever code that nobody understands?&lt;/p&gt;

&lt;p&gt;People are usually the most expensive part of any IT system, so we should &lt;a href="https://jhall.io/archive/2021/11/03/the-best-tools-money-can-buy/"&gt;optimize&lt;/a&gt; for people’s time.&lt;/p&gt;

&lt;p&gt;This means writing readable code, rather than clever code.&lt;/p&gt;

&lt;p&gt;This usually means writing readable code rather than efficient code.&lt;/p&gt;

&lt;p&gt;The same principle applies, of course, to non-code artifacts as well. Config files, diagrams, documentation. Optimize for readability.&lt;/p&gt;

&lt;p&gt;Readability should usually be the first priority in any technical artifact you write. Of course there &lt;em&gt;are&lt;/em&gt; exceptions, and I’ll talk about some of those in the coming days.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s harder to read code than to write it.&lt;br&gt;&lt;br&gt;
— Joel Spolsky&lt;/p&gt;

&lt;p&gt;Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …[Therefore,] making it easy to read makes it easier to write.&lt;br&gt;&lt;br&gt;
— Robert C. Martin&lt;/p&gt;

&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&lt;br&gt;&lt;br&gt;
— Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;If you enjoyed this message, &lt;a href="https://jhall.io/daily"&gt;subscribe&lt;/a&gt; to &lt;u&gt;The Daily Commit&lt;/u&gt; to get future messages to your inbox.&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Jonathan Hall</name>
    </author>
    <id>https://dev.to/tinydevops/readability-is-paramount-4e2d</id>
    <published>2021-11-10T00:00:00Z</published>
    <updated>2021-11-10T00:00:00Z</updated>
    <category term="perl"/>
    <category term="readability"/>
    <category term="codereadability"/>
  </entry>
  <entry>
    <title>The ephemeral miniconf - It is coming</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-it-is-coming-3b32" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3q3bwvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m0yy6hfkjsp0k45qht6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3q3bwvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m0yy6hfkjsp0k45qht6.jpg" alt="It is coming" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I stayed a bit quiet these past days about &lt;strong&gt;The ephemeral miniconf&lt;/strong&gt; but you can't imagine how much seriously I'm preparing the event. &lt;/p&gt;

&lt;p&gt;For those who are not aware, &lt;strong&gt;The ephemeral miniconf&lt;/strong&gt; is a Perl and Raku free and online miniconf!&lt;/p&gt;

&lt;p&gt;I'm taking it cool but I'm not this kind of guy to take it cool 😀&lt;/p&gt;

&lt;p&gt;I'm this kind of guy to &lt;em&gt;meticulously&lt;/em&gt; repeat and try so I get no surprise (at least I try to reduce the chances it happens to the maximum).&lt;/p&gt;

&lt;p&gt;I will not give too much details now, since I could do a nice "making of" blog post, maybe after the event (?!) who knows 😀&lt;/p&gt;

&lt;p&gt;Everything is going well, you should really book your calendar for Thursday 18th of November (next week).&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://everytimezone.com/s/ec3d1b5c"&gt;the timezone planner&lt;/a&gt; or see this picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjjKODO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k7g36n46sheyj0crlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjjKODO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k7g36n46sheyj0crlw.png" alt="Timezone planner The ephemeral miniconf" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's in the morning if you're in US, in the afternoon if you're in Europe and very late if you're in Asia (sorry).&lt;/p&gt;

&lt;p&gt;The planning is still the same except that some talks have changed their title:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ct3rAACw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4k0wk1swcgobuq27uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ct3rAACw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4k0wk1swcgobuq27uj.png" alt="The ephemeral miniconf" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(it could change a bit inside the range, like shifting talks, but at the moment here it is)&lt;/p&gt;

&lt;p&gt;I'm also preparing some surprises that I don't want to reveal for now.&lt;/p&gt;

&lt;p&gt;So my message is basically, it's coming, book your calendar and I'm looking forward to see you at &lt;strong&gt;The ephemeral miniconf&lt;/strong&gt;! 👍&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-it-is-coming-3b32</id>
    <published>2021-11-09T18:14:56Z</published>
    <updated>2021-11-09T18:14:56Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="miniconf"/>
  </entry>
  <entry>
    <title>Weekly Challenge 138</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-138-dh1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-138/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-138/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-workdays">
  </a>
  TASK #1 › Workdays
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a year, <code>$year</code> in 4-digits form. Write a script to calculate the total number of workdays in the given year. For the task, we consider Monday - Friday as workdays.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This expands on last weeks task. Unlike last week, I'm taking a short cut by using the excellent <a href="https://metacpan.org/pod/Date::Calc">Date::Calc</a> module to calculate the day of week of January 1st, and whether it is a leap year.</p>

<p>With those two pieces of information, we can deduce the following facts (for all years <a href="https://familyhistorydaily.com/genealogy-help-and-how-to/1752-calendar-change/">after 1752</a>):</p>

<ul>
<li>January 1st to December 30th (or 29th in a leap year) will always be exactly 260 work days (52 weeks × 5 days).</li>
<li>December 31st (or 30th in a leap year) will be the same day of week as January 1st. Therefore is January 1st is a work day, we add one more work day for the 31st (or 30th in a leap year).</li>
<li>In a leap year, December 31st will be the day of week after January 1st. If January 1st is not a Friday or Saturday (meaning December 31st is not a Saturday or Sunday), we add an additional work day for December 31st.</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code> ./ch-1.pl 2020
262

$ ./ch-1.pl 2021
261
</code></pre>

</div>



<h2>
  <a href="#task-2-split-number">
  </a>
  TASK #2 › Split Number
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a perfect square.</p>

<p>Write a script to figure out if the square root the given number is same as sum of 2 or more splits of the given number.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>I had two cracks at this as my first method worked in my head, but was harder to implement. It involved using a binary operator to decide whether to join two digits or put a plus sign in between them (thus resulting in 2<sup>length($n)</sup>-1 permutations).</p>

<p>In the end I went to use a recursive function, as I often do with these tasks. Like usual, I'll be interested to see how other Team PWC members tackled this challenge.</p>

<p>My recursive function is called <code>_can_split</code> and takes three values:</p>

<ol>
<li>The target we are trying to reach (the square root of the input)</li>
<li>The numbers we have used so far (an array)</li>
<li>The pool of digits remaining (starts with the provided number)</li>
</ol>

<p>For each iteration, we take from 1 to the length of the pool digits from the pool and place them in an array, and call the subroutine again with the new remaining value. The exception is the first value, where we won't check the possibility of not splitting the numbers. This is because the task states that the number must be split two or more times.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 81
1

$ ./ch-2.pl 9801
1

$ ./ch-2.pl 36
0

$ ./ch-2.pl 1
0

</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-138-dh1</id>
    <published>2021-11-09T17:12:08Z</published>
    <updated>2021-11-09T17:12:08Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Grant update: Persistent Data Structures for Raku, Daniel Sockwell</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/sockwell-raku-persisent-data-structures"/>
  <id>tag:news.perlfoundation.org,2021-11-09:/post/sockwell-raku-persisent-data-structures</id>
  <published>2021-11-09T13:05:05</published>
  <updated>2021-11-09T13:05:05</updated>
  <summary>
  <![CDATA[
     Daniel Sockwell has provided two updates to his Grant: Persistent Data Structures for Raku. The first update was already submitted in October, and not posted due to my own error. Enjoy the thorough description! Raku Persistent Data Structures Grant Report for September 2021 In September, I spent 28 hours on implementing Raku persistent data structures. That's a bit under the 10 hour/week I'd estimated that I'd spend, but I was 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Daniel Sockwell has provided two updates to his <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Grant: Persistent Data Structures for Raku</a>.</p>

<p>The first update was already submitted in October, and not posted due to my own error. Enjoy the thorough description!</p>

<hr />

<h2>Raku Persistent Data Structures Grant Report for September 2021</h2>

<p>In September, I spent 28 hours on implementing Raku persistent data structures.  That's a bit under
the 10 hour/week I'd estimated that I'd spend, but I was still able to make a good start on the
implementation.</p>

<p>The main reason I didn't spend the full 40 hours on the grant – as well as the explanation for why
you're getting this update now instead of closer to the beginning of the month – is that I decided
to devote a large chunk of my Raku time to two other issues – both of which are directly related to
implementing persistent data structures.  (Though not <em>so</em> related that I'm counting time spent on
them towards the grant.  Which is good, because doing so would mean that I <em>well</em> exceeded my
~40/month budget!)</p>

<p>I'm going to tell you a bit about these two projects and how each relates to Raku persistent data
structures, and then I'll describe the progress I made during the 28 hours I'm actually counting.</p>

<h3>What even is immutability?</h3>

<p>The biggest selling point of persistent data structures is, of course, that they are immutable while
also being fairly cheap to copy.  But to deliver on that promise, it's important to have a very
clear idea of what we mean by "immutability".</p>

<p>I don't mean in some sort of fancy <a href="https://en.wikipedia.org/wiki/Heraclitus">philosophical sense</a>;
I'm asking the very practical question "When we describe the <code>List</code> in <code>my $list = (1, 2, 3)</code> as
immutable, what does that mean?  What different <em>behavior</em> should I expect when I know that the
<code>List</code> is immutable?" (You could say "semantic difference" instead of "different behavior" if you
want to sound a bit more technical.)</p>

<p>Raku has some very clear answers to parts of this question but is also slightly confused (to say
nothing of confusing) on some others.  And, as it turns out, some of the less-clear areas of the
question end up being pretty significant for the sort of immutability that give persistent data
structures so much of their power. </p>

<p>Let's start with an area where Raku is clear: the distinction between immutable <strong>values</strong> and
immutable <strong>bindings</strong>.  This is <a href="https://docs.raku.org/language/containers">well documented</a> (and
isn't what I spent time on; this is still background), but here's a recap:</p>

<h4>Values</h4>

<p>When we describe the list <code>(1, 2, 3)</code>, the string <code>codesections</code>, or the number <code>42</code> as
immutable, we are saying that they are immutable <em>values</em>.  That is, there's no way to take <code>(1, 2,
3)</code> and change the <code>2</code> into a <code>0</code> while still having the same list we started with – we can create a
new list with those values, but that's not at all the same thing.  Contrast that with the <code>Array</code> of
<code>my @a = [1, 2, 3]</code>: here, the code <code>@a[1] = 0</code> literally changes the existing <code>Array</code>.</p>

<p>Strings and numbers in Raku are immutable values in exactly the way <code>List</code>s are (and <code>Array</code>s
aren't).  That is, there's no way to transform a string or a number; all you can do is to return a
modified version of the string or number.  In contrast, C, C++, Rust, and many other languages allow
you to mutate strings in-place; they essentially treat strings as arrays of characters or codepoints
and let you modify that array in exactly the same way Rakoons modify an <code>Array</code>.  (For C's <code>char*</code>
strings, you're literally dealing with character arrays; for other languages that's more of an
(over) simplification).  I'm pretty sure that no programming language is crazy enough <a href="http://rigaux.org/language-study/various/mutability-and-sharing/">to have
mutable numbers</a> (math would get
<em>weird</em>) but I'd love to learn that I'm wrong about that.</p>

<p>Note that I'm discussing the semantics of immutable values that Raku (the language) provides, not
implementation details of how any particular compiler stores those values.  So, while <code>List</code>s and
<code>Str</code>s provide immutable semantics, there's nothing preventing an implementation from storing
different values in a more complex way.  Put differently, when you say <code>my $a = 'foo' x 500; my $b =
$a ~ ' and bar'</code>, you <em>conceptually</em> have two separate and immutable strings, but implementations
are free to let those strings share (or even mutate) some of their backing data.  And, indeed, MoarVM
uses a really amazing system for <a href="https://github.com/MoarVM/MoarVM/blob/master/docs/sts.asciidoc">storing
strings</a> that shares memory in a way
that's not that different from the way the data structures I'm building do.</p>

<h4>Bindings</h4>

<p>Entirely separate from the question of mutable versus immutable values, programming languages can
also constrain the mutability of variable bindings.  That is: once the programmer has defined a
variable as pointing at a particular value, can they later change it to point at a <em>different</em>
value?</p>

<p>One non-Raku example that many programmers may be familiar with is JavaScript's <code>let</code> and <code>const</code>,
especially when used with arrays or objects.  In JavaScript, <code>const</code> enforces immutable bindings –
you can't say <code>const a = [1, 2, 3]; a = [4, 5, 6]</code>.  But it does nothing to make the <em>values</em>
immutable – and, in js, arrays are always mutable.  This means that you can validly write <code>const a =
[1, 2, 3]; a[1] = 99</code> to mutate the value that <code>a</code> points to.  (This distinction, and the lack of
immutable arrays in JavaScript, leads to <a href="https://overreacted.io/on-let-vs-const/">perennial
debates</a> about the advisability of using <code>const</code> in js.)</p>

<p>Raku gives us accesses to the semantics of both mutable and immutable bindings, and lets us combine
either with mutable or immutable values.  Thus, we can write <code>my @a = [1, 2, 3]</code> - mutable binding
to a mutable value.  Or <code>my $l = (1, 2, 3)</code> – an mutable binding to an immutable value (we can't
change the value of the <code>List</code>, but we <em>can</em> make <code>$l</code> point to a different value altogether).  Or
we can write <code>constant @a = [1, 2, 3]</code> – an immutable binding to a mutable value (<code>@a</code> will always
point to that exact <code>Array</code>, but we can freely mutate that <code>Array</code> with code like <code>@a[1] = 99</code>).
Or, finally, we can write <code>constant $l = (1, 2, 3)</code> – an immutable binding to an immutable value
(<code>$l</code> will always point to the same <code>List</code>, and that <code>List</code> will always contain exactly the values
<code>1</code>, <code>2</code>, and <code>3</code>).</p>

<p>This last category – an immutable binding to an immutable value – best fits many peoples intuitions
about what the terms "immutable" or "constant" mean – that variable always gives me the same value,
no matter what.  In addition to being more intuitive, this last category is notable for how much it
can simplify reasoning about code.  There's something very clarifying about knowing the value of a
variable without needing to track whether that value has changed; just like the related idea of
using <a href="https://en.wikipedia.org/wiki/Referential_transparency">referentially transparent</a> functions,
programming with variables that are immutably bound to immutable values can greatly simplify complex
codebases.</p>

<h4>How immutable values and binding fit with persistent data structures</h4>

<p>The distinction between the mutability of values and bindings matters for the data structures I'm
implementing in two ways.</p>

<p>First, because the data structures I'm creating are immutable values, we'll be able to use them to
be in that wonderful forth category – immutable binding to immutable values – if and only if Raku
lets us bind to them immutably.  So it's really important to be clear on what options Raku provides
for immutable bindings.</p>

<p>I've already shown one way that Raku supports immutable bindings: <code>constant $l = (1, 2, 3)</code>.  But
constants are evaluated at compile time and (even though Raku's definition of "compile time" is
pretty expansive) the options for using constants are inherently limited.  So what other options
does Raku provide?</p>

<p>Well, before the beginning of September, I thought that Raku provided three other options for
immutable bindings: so-called <a href="https://docs.raku.org/language/variables#index-entry-_(sigilless_variables)">sigilless
variables</a> (like <code>my
\l = (1, 2, 3)</code>); function parameters that aren't declared as <a href="https://docs.raku.org/type/Signature#index-entry-trait_is_rw"><code>rw</code> or
<code>copy</code></a> (like <code>sub fn($l) {…}</code>); and
lists of variables that are destructured with the <code>:=</code> operator (which share the same semantics as
parameters).  Now, in mid-October, I <strong>still</strong> think that's the case, but I admit that the situation
is more complex than I first thought and, at a minimum, existing compilers don't fully implement
those semantics.</p>

<p>(Note: some people don't like the term "sigilless variable", since the semantics I just described
mean that they don't really vary.  But it's the term the docs use, so I'm going to stick with it for
this post.)</p>

<p>I first realized something odd was going on when comment in this <a href="https://github.com/Raku/doc/issues/3950">docs.raku.org
issue</a> pointed out that, while you can't reassign a
sigilless variable, you can sometimes re-<a href="https://docs.raku.org/language/containers#Binding">bind</a>
it: <code>my Int \x = 2; x := 4</code> changes the value bound to <code>x</code>.  At first I thought that this issue only
applied when certain type constraints were applied, but I soon realized that it applied whenever
any type is mentioned, including <code>Any</code> or <code>Mu</code>.  Moreover, it's not just sigilless variables that
can be rebound – parameters can too: <code>sub f(Any $a) { $a := 42; $a}; f 0</code> returns 42.  In the last
step to make this pervasive, the <code>@</code> and <code>%</code> sigils add implicit type constraints, which means that
any parameter with either of those sigils can be rebound.  (As mentioned, destructuring with <code>:=</code>
shares the semantics of parameter binding, all of that applies there as well.)</p>

<p>Given that sigilless variables and parameters both allowed rebinding, all of the above lead me to
wonder whether Raku is trying to provide immutable bindings at all.  It turns out that there isn't a
<a href="https://github.com/Raku/roast">Roast</a> specification test that's 100% on point.  And, when I <a href="https://stackoverflow.com/questions/69231506/what-are-the-rules-for-re-binding">asked
on StackOverflow</a> I
mixed opinions about whether the current behavior (allowing rebinding) was intentional or a bug.</p>

<p>If Raku does pervasively allow rebinding, that would be pretty bad news for the usefulness of the
data structures I'm implementing.  They'd still have some value – more than enough to be
worthwhile.  But it'd mean that we pretty much can never get to the
immutable-bindings-to-immutable-values promised land that can have such a simplifying effect on
code.</p>

<p>Given that impact, I decided to research the issue pretty thoroughly.  After doing so, I've
concluded that Raku is designed to provide immutable bindings after all, and I produced a <a href="https://github.com/rakudo/rakudo/pull/4536">pull
request</a> that both explains my logic and provides a
patch that gives Raku those semantics.  That PR hasn't been merged yet (I still need to respond to
at least one change request about what error to throw, and I'd like to see if anyone else weighs
in).  But I'm optimistic that it will be and that fixing that bug will make immutable bindings to
immutable values much more practical in Raku.</p>

<h4>What's on the inside</h4>

<p>I mentioned earlier that the values-versus-binding distinction is important for the work I'm doing
in two ways.  The second way it matters is because it gives us the right framework to talk about
"shallow" immutability (also sometimes called <a href="https://stackoverflow.com/questions/69231506/what-are-the-rules-for-re-binding">interior
mutability</a>).</p>

<p>Lets look at a slightly different constant: <code>constant $l = (1, 2, $)</code>.  What can we say about <code>$l</code>?
Well, the variable <code>$l</code> is immutably bound to a <code>List</code>, and the <code>List</code> is comprised of three values,
<code>1</code>, <code>2</code>, and … a <a href="https://docs.raku.org/language/containers#Scalar_containers">scalar</a>.  But a
scalar a container – specifically, a <em>mutable</em> container.  Thus, despite the immutability of <code>$l</code>'s
binding and the immutability of <code>List</code>s, we can still make changes: <code>$l[2] = 99</code> is valid code.</p>

<p>That change is allowed because <code>List</code>s are only <em>shallowly</em> immutable.  Or, to say the same thing in
different words, <code>List</code>s are an immutable type that allows for interior mutability.</p>

<p>One of the goals I mentioned in the <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">initial grant proposal for the persistent data
structures</a>
is to provide deeply immutable data types.  I hope that the discussion so far gives some context to what I
meant by that.  But it's a point I'll return to in a just a minute.</p>

<h3>Meanwhile, in another thread altogether…</h3>

<p>The second related-but-distinct task has occupied a good deal of my time recently has involved
concurrency and parallelism (which are famously <a href="https://go.dev/blog/waza-talk">not the same
thing</a>).  One of the key selling points of immutable data –
especially deeply immutable data – is that it can be more easily shared across threads.  A lot of
the headache of dealing with parallel code (locks, mutexes, atomics, cache misses, deadlocks,
livelocks, etc) come from ways to prevent different threads from modifying data at the same time.
But different threads will never modify (deeply) immutable data at the same time – because <em>nothing</em>
will ever mutate that data at any time.  I'm very optimistic that the data structures I'm working on
will have significant application for anyone writing multithreaded Raku. </p>

<p>So I've been slightly concerned that I hadn't yet written any non-trivial parallel and concurrent
code in Raku.  Not <em>that</em> concerned – I've written quite a bit of concurrent and parallel Rust code
and concurrent JavaScript (JS is single-threaded, so it's inherently non-parallel).  And I'd gotten
to know Raku's concurrency model by watching some excellent
<a href="https://www.youtube.com/watch?v=hGyzsviI48M&amp;t=43s">conference</a>
<a href="https://www.youtube.com/watch?v=l2fSbOPeSQs&amp;t=1184s">talks</a> and by reading the
<a href="https://docs.raku.org/language/concurrency">docs</a>/<a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/">other</a>
<a href="https://stackoverflow.com/questions/65473206/what-concurrency-mechanisms-are-provided-by-raku-and-how-can-they-be-evaluated">resources</a>.
Still, though, I was keeping my eye out for a medium-scale project that would let me confirm my
understanding of Raku's approach to concurrency.</p>

<p>In late September, I found the perfect project.  Someone on the r/rakulang subreddit asked if there
was a good way to <a href="https://www.reddit.com/r/rakulang/comments/pvdpd2/recreate_javascript_bouncing_balls_in_raku/">recreate a JavaScript exercise in
Raku</a>.
That exercise involved rendering balls to an HTML5 canvas in a browser – a task that's pretty
challenging with a version of Raku running on MoarVM.  (It would obviously be much easier using the
JavaScript backend, but that wouldn't currently be my first choice for someone new to Raku.)  So, I
decided to write a simple <a href="https://cro.services/">Cro</a> server that would let someone write Raku code
to display balls on an HTML canvas.</p>

<p>Specifically, I decided on the following architecture: A Cro server that would listen for commands
from the user's Raku code, generate a set of balls to display, and then send a JSON representation
of those balls to any connected clients via WebSockets.  Oh, and then do that again with updated
ball positions 16 milliseconds later – with the goal of maintaining a frame rate of 60 fps.  It's
this last bit would normally be a bit of an odd choice: WebSockets are typically used to communicate
with a remote server, and thus it'd typically be a questionable choice to stream updates 60 times
per second.  But the program I had in mind would run locally, which removes network latency from
consideration.  And, besides, I figured that this design would provide good trial by fire for my
understanding of Raku's concurrency model: if my program can stream balls to dozens of
simultaneously connected clients at 60 fps, I must have a pretty decent understanding of how Raku
handles parallelism and concurrency.</p>

<p>You can see the <a href="https://github.com/codesections/LearnRakuWith">program I ended up with</a> on GitHub.
I'm pretty happy with how it turned out: in not much more than 100 lines of Raku, the program sets
up exactly the architecture described above plus an
<a href="https://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a>-style error recovery strategy
for resetting to a known-good state when user input that doesn't produce valid output.</p>

<p>But getting there took longer than I expected it to and, in the middle, had me seriously questioning
whether I actually understood Raku's concurrency model well enough to be implementing new data
structures that'd fit with it.  One of the first things anyone learns about programming is that "<a href="https://blog.plover.com/2017/11/12/">it
is not a compiler error. It is never a compiler error.</a>"  In
other words, even if some issue <em>seems</em> to be caused by a bug in the compiler/runtime/etc, it's far
more likely to be caused by a bug in your own code.</p>

<p>And when writing that module, I kept running into some crashes that made me think that I'd either
run into the mythical compiler bug or – more likely – was seriously misunderstanding how to write
concurrent code.  After spending quite a bit of time double-checking my code, I determined that, as
expected, I had <em>not</em> run into a compiler bug.  No, I'd run into
<a href="https://github.com/croservices/cro-websocket/issues/36">two</a> of
<a href="https://github.com/MoarVM/MoarVM/issues/1565">them</a>.</p>

<p>In fairness, neither was a <em>compiler</em> bug; they were both issues with the MoarVM runtime.  Moreover,
both were fixed extremely quickly, and the second never even made it into production – I only ran
into it because I was using a pre-release build to try out Rakudo's <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">new dispatch
mechanism</a>.  The
whole point of running pre-release builds is to help catch edge-case bugs like these, and I'm
certainly not complaining – but it turns out that streaming 60 fps to dozens of clients was a good
stress test for the new dispatch system and not just for my understanding of Raku's concurrency
model.</p>

<h3>Lessons for persistent data structures</h3>

<p>Once I realized that I wasn't fundamentally misunderstanding concurrency in Raku, implementing
Learn::Raku::With taught me a couple of lessons with important (though subtle) implication for the
persistent data structures I'm building.</p>

<h4>"Concurrency control" ≠ "concurrency"</h4>

<p>The first lesson I learned is that I'd slightly misunderstood what's going on in code like this
(adapted from <a href="https://docs.raku.org/routine/migrate">an example</a> in the docs):</p>

<p>```raku</p>

<h1>A simple stock ticker for Apple and Google stock</h1>

<p>react {
    whenever $stock-info-for-APPL { say "Apple's stock price is now:  $_ " }
    whenever $stock-info-for-GOOG { say "Google's stock price is now: $_ " }
}
```</p>

<p>My previous (<strong>incorrect</strong>) reading of that example was pretty much just an English version of the
code:</p>

<p>&gt; Whenever we get an update about either Apple or Google's stock, print that update.  We don't know
&gt; when these updates could come, but we want to react to them the instant they do, whether that
&gt; means reacting to the Apple one first, reacting to the Google one first, or reacting to both at
&gt; the same time.</p>

<p>That's <em>so close</em> to correct, but it goes wrong in the very last 7 words: we are guaranteed <strong>not</strong>
to react to both updates at the same time.  This is a consequence of Raku's
<a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/#user-content-supplies-and-concurrency">run-to-completion</a>
semantics: the code inside a <code>whenever</code> block is guaranteed to finish executing (that is, to "run to
completion") before the code in any other <code>whenever</code> block can start.  This wouldn't matter much for
the simple example above, but here are two modified versions in which it would:</p>

<p>```raku</p>

<h1>Lets store our results in a Map instead of printing them</h1>

<p>react {
    my %prices is Map;
    react {
        my Map $prices = Map.new;
        whenever $stock-info-for-APPL { $prices = %(|$prices, :APPL($<em>)) }
        whenever $stock-info-for-GOOG { $prices = %(|$prices, :GOOG($</em>)) }
    }
}
```</p>

<p>Under the incorrect understanding, we could've be in both <code>whenever</code> blocks at the same time and
this would create a race condition – we might lose a price update if two came in at the same time.
However, because the concurrency control Raku provides <em>prevents</em> concurrent access here, this is
actually 100% fine: we'll be in exactly one <code>whenever</code> block at a time.  Raku's semantics protect us
from any race condition.</p>

<p>Here's an example where Raku's semantics would have a less ideal impact on naive code:</p>

<p>```raku</p>

<h1>Now with buy/sell recomendations!</h1>

<p>react {
    whenever $stock-info-for-APPL { 
        say "Apple's stock price is now:  $_ ";
        say "Rating: " ~slow-fn-to-calculte-recomendation('APPL', $<em>);
    }
    whenever $stock-info-for-GOOG { 
        say "Google's stock price is now: $</em> ";
        say "Rating: " ~slow-fn-to-calculte-recomendation('GOOG', $_);
    }
}
```</p>

<p>This code would <em>not</em> behave as the author might hope, due to those same run-to-completion
semantics.  Specifically, while <code>slow-fn-to-calculate-recomendation</code> is running, other updates would
be blocked.  If you don't want this behavior, Raku offers several ways to schedule work outside of
the run-to-completion guarantee of the <code>whenever</code> block; Raku's semantics aren't going to <em>stop</em> you
from doing anything here, but it's important to understand the behavior they provide by default. </p>

<p>(It may be helpful to compare Raku's semantics to JavaScript, which guarantees that <em>every</em> function
will run to completion before any other work begins – a model I've <a href="https://stackoverflow.com/questions/67679309/raku-equivalent-to-javascripts-settimeoutfn-0">contrasted with Raku's
before</a>.)</p>

<p>So, how does all of this impact persistent data structures?  Well, some of the performance
optimizations for persistent data structures involve temporarily suspending the immutability
guarantee when there's provably only one copy of the data (or part of the data).  And whether that's
provably the case or not depends crucially on whether other sections of the program can have
concurrent access to the data.  So being clear on all of the above is pretty essential for safe
implementations of the data structures I'm working on.</p>

<h4>Under pressure</h4>

<p>I mentioned that implementing Learn::Raku::With helped me learn two lessons, but the second was
really a reminder of a Raku concurrency feature that I already knew about/a good example of how
important that feature can be.  The feature I'm talking about is the way Raku manages backpressure.</p>

<p>Raku's high level concurrency tools are carefully designed with backpressure in mind.  Quoting
directly from the <a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/">6guts blog
post</a> that
I've already linked to:</p>

<p>&gt; Another interesting problem for any system processing asynchronous messages is that of
&gt; backpressure. In short, how do we make a source of messages emit them at a rate no greater than
&gt; that of the processing logic? The general principle with Supply is that the sender of a message
&gt; pays the cost of its processing. So, if I have <code>$source.map(&amp;foo).tap(&amp;bar)</code>, then whatever emits at
&gt; the source pays the cost of the map of that message along with the processing done by the tap callback.</p>

<p>Backpreasure is extremely helpful because it can allow a program to handle arbitrary amounts of
input without requiring a proportionally arbitrary (i.e., infinite) amount of memory.  Of course,
given Raku's commitment to flexibility and programmer control, it shouldn't come as any surprise
that Raku also makes it easy to opt out of this automatic backpreasure when doing so makes sense.</p>

<p>Learn::Raku::With presents a good example of a situation where it makes sense to opt out of Raku's
default backpressure semantics.  As I mentioned above, Learn::Raku::With generates a stream of
frames and transmits those frames to all connected clients.  If we applied backpressure to this
system in the normal way, then transmitting the frames to the clients would exert backpressure on
generating the frames – that is, we'd be guaranteed not to generate frames any faster than we can
transmit them.</p>

<p>This would have some benefits – most notably, we'd never need to buffer generated frames and our
memory use would never grow.  But, in the Learn::Raku::With context, it'd have one very notable flaw
as well: the normal backpreasure system would mean that any time we can't transmit frames to clients
at 60 fps, the actual <em>speed</em> of Learn::Raku::With's balls would get reduced.  This obviously isn't
ideal – while 60 fps is a nice goal to shoot for, 45 fps is an absolutely fine frame rate and it'd
be much better to drop 1 out of 4 frames and to display the balls at normal speed in 45 fps than to
keep every frame but to display the balls in slow motion.</p>

<p>Thus, Learn::Raku::With <a href="https://github.com/codesections/LearnRakuWith/blob/main/lib/HtmlBalls.rakumod#L70-L78">pairs a Supply with a
Channel</a> to
allow it to drop frames instead of generating frames more slowly – but that, of course, means that
it needs to store at least a few frames at least temporarily.</p>

<p>But storing extra frames, in turn, means both that the program will take up more memory and,
crucially, that there will be more work for the garbage collector to do.  And that work will take
some time – time that necessarily cannot be spent transmitting those frames to the client.  But
since the whole reason we need to store those extra frames was that we're generating them faster
than we can ship them off to the client, it's possible for the GC-pause-induced extra delay to
result in <em>more</em> extra frames.  Which can then result in more garbage to collect, and thus more
delay, and thus more frames.</p>

<p>I'm sure you can see where that sort of infinite loop heads and it's certainly not to anywhere
good.  In fact, a previous version of Learn::Raku::With could get itself into exactly that sort of
situation pretty easily, consuming ever-more RAM and operating ever more slowly (I think I measured
it as hitting at least 50 GB).  The current version is much more resilient, but the risk remains.</p>

<p>All of this is relevant to persistent data structures because one of the main benefits of these data
structures is that the power of structural sharing makes copies vastly less expensive – verging on
free, in fact.  This benefit would go a long way towards avoiding the sort of issues I outlined
above.  I'd always known that these inexpensive copies are a key benefit of the persistent data
structures I'm building, but I'd previously focused on this as a way to reduce the memory footprint
of Raku programs.  After building Learn::Raku::With, however, I recognize that structural sharing
also reduces GC pressure and thus improves the speed at which Raku programs can execute – which can
avoid the sort of death spirals described above.  This means that having persistent data structures
will not only make many Raku programs more memory efficient but will also certain of Raku programs
much more feasible to write without spiraling into a need for ever-increasing amounts of RAM.</p>

<h2>Implementation progress</h2>

<p>So, having spent a few thousand words explaining things related to but not directly covered by the
grant, let me say at least a bit about the implementation work itself.  In the nature of
implementation work, it's not nearly as interesting as more exploratory work and I don't have very
much to say – I've very much stuck to the plan in my <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">grant
proposal</a>.</p>

<p>Specifically, I started by implementing the persistent version of the <code>List</code> (still open to
bikeshedding on the name!).  I have made good progress on implementing a persistent <code>List</code> that with
the structural sharing features described in my proposal but <em>without</em> the bit-shifting indexing
(I'm instead currently using the simplified indexing scheme that involves converting the key to a
different base and calculating the relevant indices manually).  This simplified indexing scheme will
allow me to test the soundness of the list before switching to the bit-shifting index (which will be
key to the performance of the persistent list).</p>

<p>Additionally, I've written a set of tests to confirm the correctness of my implementation so far and
a (much smaller and still preliminary) set of tests that measure the performance of deep copies of
built in <code>List</code>s and <code>Array</code>s, which should provide a nice baseline to compare the persistent
versions against.</p>

<h1>Conclusion</h1>

<p>Over the course of September, I made a good start on implementing persistent data structures for
Raku.  This included significant, though limited, progress on actually implementing the persistent
List and much more time-consuming work on auxiliary projects (not counted as part of my grant hours)
that have given me a much better foundation for the remaining work.  The downside of this auxiliary
work is that it took up considerable time that I might have devoted to the actual implementation,
both in September and in October.  In fact, given the amount of time I've already spent on these
research/side projects in October, it's possible that I won't have much or any grant progress to
report at the end of this month.  Nevertheless, I'm glad I invested the effort into those projects
since I believe both left me significantly better equipped to carry out the remainder of the grant.
I look forward to putting these lessons into practice as I continue to implement persistent data
structures for Raku.</p>

<hr />

<h2>Raku Persistent Data Structures Grant Report for October 2021</h2>

<p>The expectation I mentioned in my September grant report came true in October: I had significantly
less time to devote to work on this grant in October.  This was due in large part to the conceptual
work I previously reported on, which stretched well into October.</p>

<p>Accordingly, I was only able to spend 5 hours on the grant in October; I used that time to continue
work on the persistent List.  Specifically, I nearly completed the basic API (without the
bit-shifting optimizations).  I was also able to add some initial test coverage. Given that
progress, I am now nearing point where I'll be able to share the WIP code publicly.</p>

<p>On the conceptual front (i.e., work that's relevant to the persistent data structures but not
relevant enough that I'm counting it towards the hours funded by this grant), I've also made a fair
bit of progress.  Most significantly, I was able to complete the work to add fully immutable binding
to Rakudo.  Thanks to some helpful feedback from Vadim Belman, I also added significantly more
detailed error messages, which should help explain the nature of these binding to Rakoons who aren't
as used to programming with in an immutable style.  As discussed in my last grant report, being able
to immutably bind values to their names will mean that the persistent data structures implemented
for this grant will be truly immutable – and thereby significantly easier to reason about.  This
work was merged in <a href="https://github.com/rakudo/rakudo/pull/4536">rakudo#4536</a> and should be part of
the 2021.11 Rakudo release.</p>

<p>Additionally, I've been putting some thought into how Raku's notion of <a href="https://docs.raku.org/language/glossary#Value_type">value
types</a> fits with the persistent data structures
I'm implementing.  As I mentioned last month, one of the core motivations behind this grant proposal
is to provide deeply immutable types, so it's clear that the types I'm implementing will be value
types and thus will return a <a href="https://docs.raku.org/type/ValueObjAt">ValueObjAt</a> from their <code>WHICH</code>
method.  But what should the persistent types do when the user adds a non-value type?  I can see
three options:</p>

<ol>
<li>Throw an error/require the user to create a value type to pass in.  This is basically the approach taken by Elizabeth Mattijsen's  <a href="https://modules.raku.org/dist/ValueType:zef:zef:lizmat/">ValueType</a> module.</li>
<li>Recursively copy each non-value type into an equivalent value type when it's added to the persistent type ("copy-on-read").  This is straightforward for some types (an <code>Array</code> becomes a <code>List</code>) but might involve more metaprogramming trickery for others (especially user classes).
<ol>
<li>Store the non-value type if we can prove that no other part of the code has access to it, and only make a copy if we need to hand it out to someone (basically copy-on-write, with some slight tweaks).</li>
</ol></li>
</ol>

<p>Each of these has different pros and cons.  In particular, the first is the easiest to implement, the most verbose, and gives the user the most control over/awareness of the performance costs.  Conversely, the last is the most "magical" and the only one that risks introducing correctness bugs.  Additionally, there could be ways to combine different aspects of these three approaches – for example, one combination of 1. and 2. would be to copy simple/built in types but to throw an error when passed a user type with a mutable field.  I'm currently leaning towards the copy-on-read option #2 as a reasonable middle ground, but it's definitely something I'd be interested in hearing other thoughts on.</p>

<p>November is already off to a good start, and I'm optimistic that I'll be able to make significant
progress on this grant before the end-of-year business (and exciting things like the <a href="https://github.com/Raku/advent/blob/master/raku-advent-2021/authors.md">Raku Advent
Calendar</a>!) start to eat
into my coding time.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#537 - How do you spend your free time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/537.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>The Perl Weekly newsletter is more than 10 years old and over those years we have witnessed a huge decline in the number and diversity of posts. There are still a few people who write about Perl regularly, The Weekly Challenge of Mohammad generates many posts, but in general we see fewer and fewer posts.</p>
<p>I wonder, do those people who used to write about Perl write about other technologies or have they just stopped? How come that so few people write about Perl? Are there no new things in Perl? Are there no new problems that one solves in Perl?</p>
<p>I know that writing about stuff is not the same thing as writing the stuff, but as many other people who write or teach will attest, the best way to improve your knowledge is to explain it. to explain it to live audience (at a Meetup) or to write about it in a blog post.</p>
<p>So how do you spend your free time? Do you write more code? Do you try to explain what you wrote, how you wrote and why? Or do you spend your time on some other activities? I, for examples started to read a lot more than I did in the recent years. And sure, I'll even share my recommendations with you. (See below.)</p>
<p>In any case enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/537.html</id>
    <published>2021-11-08T10:00:00Z</published>
    <updated>2021-11-08T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Perl Tk: The label, button, and entry widgets</title>
  <summary type="html"><![CDATA[]]></summary>
  <updated>2021-11-07T23:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-tk-label-button-entry-widgets"/>  <id>https://perlmaven.com/perl-tk-label-button-entry-widgets</id>
  <content type="html"><![CDATA[]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 137: Long Year and Lychrel Number</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/11/perl-weekly-challenge-137-long-year-and-lychrel-number.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10486</id>
    <published>2021-11-01T23:36:47Z</published>
    <updated>2021-11-07T18:40:08Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 137 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-137/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on November 7, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Long Year</h2>

<p><em>Write a script to find all the years between 1900 and 2100 which is a Long Year.</em></p>

<blockquote>
  <p><em>A year is Long if it has 53 weeks.</em></p>
</blockquote>

<p><em>Expected Output:</em></p>

<pre><code>1903, 1908, 1914, 1920, 1925,
1931, 1936, 1942, 1948, 1953,
1959, 1964, 1970, 1976, 1981,
1987, 1992, 1998, 2004, 2009,
2015, 2020, 2026, 2032, 2037,
2043, 2048, 2054, 2060, 2065,
2071, 2076, 2082, 2088, 2093,
2099
</code></pre>

<p>All years have 52 weeks, plus 1 day, or 2 days for leap years. How can you have years with 53 weeks? Well, it depends on how you define weeks. The most common convention is the following: all weeks start with Monday and each week belongs in the year in which the Thursday falls. This means that if the year starts on a Thursday or is a leap year and starts on a Wednesday, that particular year will have 53 numbered weeks.</p>

<h3>Long Year in Raku</h3>

<p>For this task, we use the built-in <code>DateTime</code> module, and the <code>day-of-week</code> and <code>is-leap-year</code> methods provided by the <a href="https://docs.raku.org/type/Dateish">dateish</a> role. We simply loop over the <code>1900-2100</code> range and print out the year if it starts on a Thursday, or if it starts on a Wednesday and is a leap year.</p>

<pre><code>use v6;

for 1900..2100 -&gt; $y {
    my $year = DateTime.new(:year($y));
    my $new-year-day = Date.new("$y-01-01").day-of-week;
    print "$y, " if $new-year-day == 4; # DoW 4 = Thursday
    print "$y, " if $year.is-leap-year and $new-year-day == 3;
}
say "";
</code></pre>

<p>This program displays the following output (slightly reformatted for the purpose of this blog post):</p>

<pre><code>$ raku ./53-week-year.raku
1903, 1908, 1914, 1920, 1925, 1931, 1936, 
1942, 1948, 1953, 1959, 1964, 1970, 1976, 
1981, 1987, 1992, 1998, 2004, 2009, 2015, 
2020, 2026, 2032, 2037, 2043, 2048, 2054, 
2060, 2065, 2071, 2076, 2082, 2088, 2093, 
2099,
</code></pre>

<p><em>Update (Nov. 2, 2021):</em> This can be made significantly simpler. Andrew Shitov sent me a message suggesting to use the <code>week-number</code> method (which is provided by the <a href="https://docs.raku.org/type/Dateish">dateish</a> role). All we need to do is to check whether the week number of the last day of the year is 53 (no need to check whether the year is leap). This can be done in just one code line, for example:</p>

<pre><code>.say if Date.new($_, 12, 31).week-number == 53 for 1900..2100;
</code></pre>

<h3>Long Year in Perl</h3>

<p>In Perl, we use the <code>Time::Local</code> core module to figure out whether a year starts on a Thursday (or on a Wednesday in the case of leap years). Since Perl doesn&#8217;t have a built-in function for finding out whether a year is leap, we roll out our own <code>is_leap_year</code> subroutine. A year is leap if it is evenly divisible by 4 and not by 100 (unless it is also divisible by 400), so that 1900 and 2100 are not leap, but 2000 is leap.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Time::Local;

sub is_leap_year {
    my $year = shift;
    return 0 if $year % 4;   # not divisible by 4
    return 1 if $year % 100; # divisible by 4, not by 100
    return 0 if $year % 400; # divisible by 100, not by 400
    return 1;                # divisible by 400
}

for my $year (1900..2100) {
    my $date = timegm(0, 0, 0, 1, 0, $year);
    my $day_in_week = (gmtime $date)[6];
    print $year, ", " if $day_in_week == 4; # 4 = Thursday
    print $year, ", " if $day_in_week == 3 and is_leap_year $year;
}
say "";
</code></pre>

<p>This program displays the following output (sligthly reformatted for the purpose of this blog post):</p>

<pre><code>$ perl ./53-week-year.pl
1903, 1908, 1914, 1920, 1925, 1931, 1936, 
1942, 1948, 1953, 1959, 1964, 1970, 1976, 
1981, 1987, 1992, 1998, 2004, 2009, 2015, 
2020, 2026, 2032, 2037, 2043, 2048, 2054, 
2060, 2065, 2071, 2076, 2082, 2088, 2093, 
2099,
</code></pre>

<h2>Task 2: Lychrel Number</h2>

<p><em>You are given a number, 10 &lt;= $n &lt;= 1000.</em></p>

<p><em>Write a script to find out if the given number is Lychrel number. To keep the task simple, we impose the following rules:</em></p>

<blockquote>
  <p><em>a. Stop if the number of iterations reached 500.</em>
<em>b. Stop if you end up with number >= 10_000_000.</em></p>
</blockquote>

<p><em>According to <a href="https://en.wikipedia.org/wiki/Lychrel_number">wikipedia</a>:</em></p>

<blockquote>
  <p><em>A Lychrel number is a natural number that cannot form a palindrome through the iterative process of repeatedly reversing its digits and adding the resulting numbers.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 56
Output: 0

After 1 iteration, we found palindrome number.
56 + 65 = 121
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 57
Output: 0

After 2 iterations, we found palindrome number.
 57 +  75 = 132
132 + 231 = 363
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 59
Output: 0

After 3 iterations, we found a palindrome number.
 59 +  95 =  154
154 + 451 =  605
605 + 506 = 1111
</code></pre>

<p>It is now known whether there exists any Lychrel number in base ten, but some integers, such as 196, 295, and 394, are conjectured to be Lychrel numbers. They are sometimes called Lichrel candidates.</p>

<p>Note that the <em>(a)</em> stopping condition on the number of iterations is somewhat useless here, as we will reach the condition on the maximum size of the integer much faster. Starting with 1, the smallest positive integer, and applying the reverse and add algorithm will lead to a number larger than 10,000,000 is less than 20 iterations, as shown in the following Perl one-liner:</p>

<pre><code>$ perl -E '$n = 1; for $i (1..500) { $n += reverse $n; say $i and last if $n &gt;= 10_000_000;}'
19
</code></pre>

<h3>Lychrel Numbers in Raku</h3>

<p>We start with a <code>1..500</code> loop and break out of it if we&#8217;ve found a palindrome or if we&#8217;ve reached the 10,000,000 limit. In Raku, the built-in to reverse a word (or a number) is the <code>flip</code> method, which we use both for reversing the number and for finding out whether a result is a palindrome.</p>

<pre><code>use v6;

sub is-lychrel (UInt $m) {
    my $n = $m;
    for 1..500 -&gt; $i {
        return "$m is a Lychrel candidate. Reached the 1e7 limit"
            if $n &gt; 10_000_000;
        $n += $n.flip;
        #`[say $n and] return 0 if $n == $n.flip;
    }
    return "$m is a lychrel candidate (made 500 iterations)";
}
for 10...20, 30, 50, 100, 196 -&gt; $test {
    say "$test -&gt; ", is-lychrel $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./lychrel.raku

10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
13 -&gt; 0
14 -&gt; 0
15 -&gt; 0
16 -&gt; 0
17 -&gt; 0
18 -&gt; 0
19 -&gt; 0
20 -&gt; 0
30 -&gt; 0
50 -&gt; 0
100 -&gt; 0
196 -&gt; 196 is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h3>Lychrel Numbers in Perl</h3>

<p>We&#8217;re using essentially the same algorithm as in Raku. In Perl, we use the <code>reverse</code> built-in function.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

sub is_lychrel {
    my $m = shift;
    my $n = $m;
    for my $i (1..500) {
        return "$m is a Lychrel candidate. Reached the 1e7 limit" 
            if $n &gt; 10_000_000;
        $n += reverse $n;
        return 0 if $n == reverse $n;
    }
    return "$m is a lychrel candidate (made 500 iterations)";
}
for my $test (10..20, 30, 50, 100, 196) {
    say "$test -&gt; ", is_lychrel $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./lychrel.pl
10 -&gt; 0
11 -&gt; 0
12 -&gt; 0
13 -&gt; 0
14 -&gt; 0
15 -&gt; 0
16 -&gt; 0
17 -&gt; 0
18 -&gt; 0
19 -&gt; 0
20 -&gt; 0
30 -&gt; 0
50 -&gt; 0
100 -&gt; 0
196 -&gt; 196 is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h3>Lychrel Numbers in Some Other Languages</h3>

<h4>In Julia</h4>

<p>Contrary to Raku and Perl, and as in most other languages we will use below, in Julia, we need to perform some explicit integer to string and string to integer conversions to be able to perform a reverse operation on the digits of an integer. This is quite simple, though:</p>

<pre><code>rev = parse(Int64, reverse(string(n)))
</code></pre>

<p>Besides that, the program is quite simple:</p>

<pre><code>function is_lychrel(n) 
    m = n
    for k = 1:500
        if (n &gt; 10_000_000) 
            return "$m is a Lychrel candidate. Reached the 1e7 limit"
        end
        rev = parse(Int64, reverse(string(n)))
        if (n == rev) return 0 end
        n += rev
    end
    return "$m is a lychrel candidate (made 500 iterations)";
end

for test in [10, 20, 30, 50, 100, 196]
    println("$test -&gt;  $(is_lychrel(test))")
end
</code></pre>

<p>Note the use of the <code>$</code> sign in Julia for value interpolations within strings, even (with parentheses) for values returned by code fragments such as function calls</p>

<p>Output:</p>

<pre><code>$ julia ./lychrel.jl
10 -&gt; 0
20 -&gt; 0
30 -&gt; 0
50 -&gt; 0
100 -&gt; 0
196 -&gt; 196 is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h4>In Python</h4>

<p>Contrary to Raku and Perl, and as in most other languages we will use, in Python, we need to perform some integer to string and string to integer conversions to be able to perform a reverse operation on the digits of an interger.</p>

<pre><code>#!/usr/bin/python3

def is_lychrel(m):
    n = m
    for i in range(500):
        j = int(str(n)[::-1])
        if j == n:
            return 0
        n += j
        if n &gt; 10000000:
            return "n is a lychrel candidate. Reached the 1e7 limit."
    return "n is a lychrel candidate. Made 500 iterations."

for test in range(10, 20):
    print(test, " -&gt; ", is_lychrel(test))

for test in 10, 20, 30, 50, 100, 196:
    print(test, " -&gt; ", is_lychrel(test))
</code></pre>

<p>Note that I wasn&#8217;t able to find the right syntax to include in the same test suite a range and a list of integers, so that I needed to use two separate <code>for</code> loops for the tests.</p>

<p>Output:</p>

<pre><code>$ python3 lychrel.py
10  -&gt;  0
11  -&gt;  0
12  -&gt;  0
13  -&gt;  0
14  -&gt;  0
15  -&gt;  0
16  -&gt;  0
17  -&gt;  0
18  -&gt;  0
19  -&gt;  0
10  -&gt;  0
20  -&gt;  0
30  -&gt;  0
50  -&gt;  0
100  -&gt;  0
196  -&gt;  n is a lychrel candidate. Reached the 1e7 limit.
</code></pre>

<h4>In Ruby</h4>

<pre><code>#! /usr/bin/ruby

def is_lychrel(m)
    n = m
    for k in 1..500
        j = n.to_s.reverse.to_i
        if j == n then
            return 0
        end
        n += j
        if n &gt; 10000000 then
            return "#{m} is  a Lychrel candidate (reached the 1e7 limit)"
        end
    end
    return "#{m} is a lychrel candidate (made 500 iterations)"
end

for test in [10, 20, 30, 50, 100, 196]
    print  "#{test} -&gt; ", is_lychrel(test), "\n"
end
</code></pre>

<p>Output:</p>

<pre><code>10 -&gt; 0
20 -&gt; 0
30 -&gt; 0
50 -&gt; 0
100 -&gt; 0
196 -&gt; 196 is  a Lychrel candidate (reached the 1e7 limit)
</code></pre>

<h4>In C</h4>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;  
#define MAX_ITER 500
#define MAX_VAL 10000000
#define NB_TESTS 6

void reverse_str(char* str) {  
    int len, tmp;  
    len = strlen(str); 
    for (int i = 0; i &lt; len/2; i++) {  
        tmp = str[i];  
        str[i] = str[len - i - 1];  
        str[len - i - 1] = tmp;  
    }  
}  

const char* lychrel (int n) {
    char out[20];
    for (int k = 1; k &lt;= MAX_ITER; k++) {
        if (n &gt; MAX_VAL) {
            return "is a Lychrel candidate. Reached the 1e7 limit";
        }
        char to_str[20];
        char rev[20];
        sprintf(to_str, "%d", n);
        strcpy(rev, to_str);
        reverse_str(rev);
        if (strcmp(to_str, rev) == 0) {
            return "0";
        }
        n += atoi(rev);
    }
    return "is a Lychrel candidate. Reached 500 iterations";
}

int main() {
    int tests[NB_TESTS] = { 10, 20, 30, 50, 100, 196};
    for (int i = 0; i &lt; NB_TESTS; i++) {
        printf("%d -&gt; %s\n", tests[i], lychrel(tests[i]));
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ lychrel
10 -&gt; 0
20 -&gt; 0
30 -&gt; 0
50 -&gt; 0
100 -&gt; 0
196 -&gt; is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h4>In Lua</h4>

<pre><code>function is_lychrel(n) 
    m = n
    for k =1, 500 do
        if n &gt; 10000000 then
            return string.format("%s is a Lychrel candidate. Reached the 1e7 limit", m)
        end
        rev = tonumber(string.reverse(tostring(n)))
        if n == rev then return 0 end
        n = n + rev
    end
    return string.format("%s is a lychrel candidate (made 500 iterations)", m);
end

for key, test in ipairs({10, 20, 30, 50, 100, 196}) do
    print(test, " -&gt; ", is_lychrel(test)) 
end
</code></pre>

<p>Output:</p>

<pre><code>$ lua ./lychrel.lua
10   -&gt;     0
20   -&gt;     0
30   -&gt;     0
50   -&gt;     0
100  -&gt;     0
196  -&gt;     196 is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h4>In Rust</h4>

<p>In Rust, I wasn&#8217;t able to perform the integer to string conversion, reverse operation, and conversion back from string to integer. (Well, to tell the truth, I found a way to do it on the Internet, but I don&#8217;t really understand how it works and will therefore not use it.) So, for Rust, I decided to implement a function (<code>reverse_num</code>) performing the reverse operation directly on integers, using integer division, modulo, addition and multiplication opetators. </p>

<pre><code>fn reverse_num (m: i32) -&gt; i32 {
    let mut n = m;
    let mut rev = 0;
    while n &gt; 0 {
        rev *= 10;
        rev += n % 10;
        n /= 10;
    }
    return rev;
}

fn is_lychrel(m: i32) -&gt; String {
    let mut n = m;
    for _k in 1..500 {
        let j = reverse_num(n);
        if j == n {
            return 0.to_string();
        }
        n += j;
        if n &gt; 10000000 {
            return "Lychrel candidate (reached the 1e7 limit)".to_string();
        }
    }
    return "Lychrel candidate (500 iterations)".to_string(); 
}
fn main() {
    for test in [10, 20, 30, 100, 196] {
        println!("{} -&gt; {}", test, is_lychrel(test));
    }
}
</code></pre>

<p>Output:</p>

<pre><code>10 -&gt; 0
20 -&gt; 0
30 -&gt; 0
100 -&gt; 0
196 -&gt; Lychrel candidate (reached the 1e7 limit)
</code></pre>

<h4>In awk</h4>

<pre><code>#!/usr/bin/awk

function reverse (num) {
    rev = ""
    len = length(num)
    for (i = len; i &gt; 0; i--) {
        rev = rev substr(num, i, 1);
    }
    return rev
}
function is_lychrel(n) {
    for (i = 1; i &lt;= 5; i++) {
        if (n &gt; 10000000) {
            return "is a Lychrel candidate. Reached the 1e7 limit"
        }
        rev = reverse(n)
        # print n, rev
        if (n == rev) { return 0 }
        n += rev
    }
    return "is a lychrel candidate (made 500 iterations)"
}
/[0-9]+/ { print $0, " -&gt; ", is_lychrel($0) }
</code></pre>

<p>To run this awk program we need either to supply a file with the test values, or to pipe such data to the awk program standard input:</p>

<pre><code>$ echo '20
30
40
50
100
196' |  awk -f lychrel.awk
20  -&gt;  0
30  -&gt;  0
40  -&gt;  0
50  -&gt;  0
100  -&gt;  0
196  -&gt;  is a Lychrel candidate. Reached the 1e7 limit
</code></pre>

<h4>In bc</h4>

<pre><code>define reverse (n) {
    rev = 0
    while (n &gt; 0) {
        rev *= 10
        rev += n % 10
        n /= 10
    }
    return (rev)
}


define is_lychrel(n) {
    for (i = 1; i &lt; 500; i++) {
        if (n &gt;= 10000000) { return -1}
        rev = reverse(n)
        /* print n, " ", rev, "\n" */
        if (n == rev) {return 0;}
        n += rev
    }
    return -1
}

while (1) {
    n = read ()
    if (is_lychrel (n) == -1) {
        print n, " Lychrel candidate", "\n"
    } else { 
        print n, " ", 0, "\n" 
        }
}
quit
</code></pre>

<p>We need to run this script in a way similar to awk:</p>

<pre><code>$ echo ' 10
15
20
196' | bc lychrel.bc
10 0
15 0
20 0
196 Lychrel candidate
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on November 14, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7350793557764499969</id>
    <published>2021-11-06T18:19:00.000+01:00</published>
    <updated>2021-11-06T18:19:45.530+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxvi) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/CPAN-Uploader-0.103016' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CPAN::Uploader&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - upload things to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.103016&lt;/strong&gt; on 2021-10-31&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.103015 was 1 year, 2 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.074&lt;/strong&gt; on 2021-11-06&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 0.073 was 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Getopt-Long-Descriptive-0.110' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Descriptive&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Getopt::Long, but simpler and more powerful &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.110&lt;/strong&gt; on 2021-10-31&lt;/li&gt;  &lt;li&gt;Votes: 48&lt;/li&gt;  &lt;li&gt;Previous version: 0.109 was 7 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.080' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A small, simple, correct HTTP/1.1 client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.080&lt;/strong&gt; on 2021-11-05&lt;/li&gt;  &lt;li&gt;Votes: 101&lt;/li&gt;  &lt;li&gt;Previous version: 0.078 was 3 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2200' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2200&lt;/strong&gt; on 2021-10-31&lt;/li&gt;  &lt;li&gt;Votes: 319&lt;/li&gt;  &lt;li&gt;Previous version: 2.2015 was 7 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ASB/Spreadsheet-XLSX-0.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Spreadsheet::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for reading MS Excel 2007 files; &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.17&lt;/strong&gt; on 2021-11-03&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.16 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.9.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.9.0&lt;/strong&gt; on 2021-11-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.8.0 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Text-Xslate-v3.5.9' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Xslate&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Scalable template engine for Perl5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.5.9&lt;/strong&gt; on 2021-10-31&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: v3.5.8 was 1 year, 4 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.084' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.084&lt;/strong&gt; on 2021-11-03&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.082 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7350793557764499969/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/11/ccclxvi-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7350793557764499969"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7350793557764499969"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/11/ccclxvi-9-great-cpan-modules-released.html" title="(ccclxvi) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-429212153425393092</id>
    <published>2021-11-06T17:38:00.004+01:00</published>
    <updated>2021-11-06T17:38:29.079+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxix) metacpan weekly report - MojoX::DirectoryListing</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 55&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/MojoX::DirectoryListing"&gt;MojoX::DirectoryListing&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/11/06 16:34:25 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ccdiff" target="_blank"&gt;App::ccdiff&lt;/a&gt; - Colored Character Diff&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::chalk" target="_blank"&gt;App::chalk&lt;/a&gt; - Colorize text for terminal output&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dex" target="_blank"&gt;App::Dex&lt;/a&gt; - Directory Execute&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::errno" target="_blank"&gt;App::errno&lt;/a&gt; - List/show errno&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Utils" target="_blank"&gt;App::Utils&lt;/a&gt; - some useful command-line utilities&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KubeBuilder" target="_blank"&gt;KubeBuilder&lt;/a&gt; - Module to help build the Perl Kubernetes client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kubectl::CLIWrapper" target="_blank"&gt;Kubectl::CLIWrapper&lt;/a&gt; - Module to use the Kubernetes API via the kubectl CLI&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; - Community-inspired Perl::Critic policies&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Signer::AWSv4" target="_blank"&gt;Signer::AWSv4&lt;/a&gt; - Implements the AWS v4 signature algorithm&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::ForkManager" target="_blank"&gt;AnyEvent::ForkManager&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Worker" target="_blank"&gt;AnyEvent::Worker&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=260)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=167)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::plx" target="_blank"&gt;App::plx&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pmdir" target="_blank"&gt;App::pmdir&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::stopw" target="_blank"&gt;App::stopw&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ARGV::Struct" target="_blank"&gt;ARGV::Struct&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ask" target="_blank"&gt;Ask&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::RPC::Client" target="_blank"&gt;Bitcoin::RPC::Client&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Locale" target="_blank"&gt;DateTime::Locale&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover" target="_blank"&gt;Devel::Cover&lt;/a&gt; (+1=100)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+2=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Docker::Registry" target="_blank"&gt;Docker::Registry&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Game::Entities" target="_blank"&gt;Game::Entities&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::ProtocolBuffers::Dynamic" target="_blank"&gt;Google::ProtocolBuffers::Dynamic&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HiPi" target="_blank"&gt;HiPi&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::K8s" target="_blank"&gt;IO::K8s&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::MaybeXS" target="_blank"&gt;JSON::MaybeXS&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kubernetes::REST" target="_blank"&gt;Kubernetes::REST&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::SomeUtils" target="_blank"&gt;List::SomeUtils&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any::Adapter::Log4perl" target="_blank"&gt;Log::Any::Adapter::Log4perl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MediaWiki::API" target="_blank"&gt;MediaWiki::API&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::DirectoryListing" target="_blank"&gt;MojoX::DirectoryListing&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=384)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Build" target="_blank"&gt;Perl::Build&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=116)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Bangs" target="_blank"&gt;Perl::Critic::Bangs&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::MinimumVersion" target="_blank"&gt;Perl::MinimumVersion&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=122)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=108)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Exception" target="_blank"&gt;Test::Exception&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Yancy" target="_blank"&gt;Yancy&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/429212153425393092/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/11/cdlxxxix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/429212153425393092"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/429212153425393092"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/11/cdlxxxix-metacpan-weekly-report.html" title="(cdlxxxix) metacpan weekly report - MojoX::DirectoryListing"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#536 - Auf Wiedersehen Hacktoberfest</title>
    <link rel="alternate" href="https://perlweekly.com/archive/536.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The headline of this week's newsletter is dedicated to all my German friends. However, the message is global "Good bye Hacktoberfest". I don't know the language, so I asked Google to help me. I am sure you all celebrated the month-long festival with loads of contributions to many opensource codebases. I can completely understand the feeling at the end of the month. Those who have participated and completed the challenge successfully i.e. submitted at least 4 eligible Pull Requests, should just relax and wait for their FREE gift. Please take November as a break as December will bring in another fun challenge i.e. <a href="https://24pullrequests.com">24 Pull Requests</a> for you.</p>
<p>Anything else to look forward to?</p>
<p>For me, there is another fun bit is the "Advent Calendar". There will be plenty of Advent Calendars available during the month. It is really hard to follow all of them. I came across something called, <a href="http://www.lenjaffe.com/AdventPlanet">Advent Planet</a>, which collects almost all popular Advent Calendars for us. Please do check it out, if you want a early peek. I really miss those days when I used to have time for such things. I have contributed to the Perl/Raku advent calendars in the past. If you have spare time and interest then please do get in touch with the person behind the project now and book your slot. There is one <a href="https://theweeklychallenge.org/blog/advent-calendar-2020">Advent Calendar</a> dedicated to the members of <a href="https://theweeklychallenge.org">The Weekly Challenge</a> only. I make sure the tradition continues every year. I hope everything goes as per the plan and we have another fun Advent Calendar by the dedicated members this year.</p>
<p>Start your week with yet another informative newsletter. You take care of yourself and your family. Keep a safe distance and stay safe,</p></div>
    </content>
    <id>https://perlweekly.com/archive/536.html</id>
    <published>2021-11-01T10:00:00Z</published>
    <updated>2021-11-01T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Bitbucket Pipelines testing Perl projects</title>
  <summary type="html"><![CDATA[<p>
We saw how to <a href="/bitbucket-pipelines-for-perl-projects">get started with Bitbucket Pipelines for Perl</a>.
The same can be used to run any perl code on Bitbucket, but in our next step we'll see how to run the tests
of a <a href="/distribution-directory-layout">Perl module with standard layout</a>.
<p>
]]></summary>
  <updated>2021-11-01T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/bitbucket-pipelines-testing-perl-projects"/>  <id>https://perlmaven.com/bitbucket-pipelines-testing-perl-projects</id>
  <content type="html"><![CDATA[<p>
We saw how to <a href="/bitbucket-pipelines-for-perl-projects">get started with Bitbucket Pipelines for Perl</a>.
The same can be used to run any perl code on Bitbucket, but in our next step we'll see how to run the tests
of a <a href="/distribution-directory-layout">Perl module with standard layout</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Oct 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/11/01/list-of-new-cpan-distributions-oct-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Parse-UnixShellCommandLine">Acme-CPANModules-Parse-UnixShellCommandLine</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that parse command-line like Unix shells</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-FishFarm">Acme-FishFarm</a></td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>1.00</td>
<td>1.00</td>
<td>A Fish Farm with Automated Systems</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-ICan-tBelieveItCanSort">Acme-ICan-tBelieveItCanSort</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wait… It Actually Works?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-PLplot">Alien-PLplot</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alien package for the PLplot plotting library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GeoCancerPrognosticDatasetsRetriever">App-GeoCancerPrognosticDatasetsRetriever</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
<td>1</td>
<td>GEO Cancer Prognostic Datasets Retriever is a bioinformatics tool for cancer prognostic dataset retrieval from the GEO website.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Kramerius-To-Images">App-Kramerius-To-Images</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Base class and script for creating Kramerius downloader.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Kramerius-URI">App-Kramerius-URI</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Base class and script for creating of Kramerius URI.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Kramerius-V4">App-Kramerius-V4</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for fetching document from Kramerius system, version 4.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-geoCancerPrognosticDatasetsRetriever">App-geoCancerPrognosticDatasetsRetriever</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1.01</td>
<td>1.01</td>
<td>GEO Cancer Prognostic Datasets Retriever is a bioinformatics tool for cancer prognostic dataset retrieval from the GEO website.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-printenv-perl">App-printenv-perl</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Print environment variables as seen by a Perl script</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Astro-VEX">Astro-VEX</a></td>
<td><a href="https://metacpan.org/author/GSB">GSB</a></td>
<td>0.001</td>
<td>0.001</td>
<td>VEX (VLBI Experiment Definition) file handling module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-App-Sorted">Bencher-Scenario-App-Sorted</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Benchmark sorted vs is-sorted</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Array-Sample-Partition">Bencher-Scenario-Array-Sample-Partition</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Benchmark Array::Sample::Partition hash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Color-RGB-Util">Bencher-Scenario-Color-RGB-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Benchmark Color::RGB::Util</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Array-Set">Bencher-Scenarios-Array-Set</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Scenarios to benchmark Array::Set</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-TraitFor-Request-StrongParameters">Catalyst-TraitFor-Request-StrongParameters</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.003</td>
<td>methods for your request object to assist in content negotiation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-TraitFor-Request-StructuredParameters">Catalyst-TraitFor-Request-StructuredParameters</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.003</td>
<td>0.006</td>
<td>methods for your request object to assist in content negotiation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-TagExpressions">Cucumber-TagExpressions</a></td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>4.1.0</td>
<td>4.1.0</td>
<td>A library for parsing and evaluating cucumber tag expressions (filters)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-BcryptColumn">DBIx-Class-BcryptColumn</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>0.001001</td>
<td>Set a column to securely hash on insert/update using bcrypt</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-FormValidator-Multi">Data-FormValidator-Multi</a></td>
<td><a href="https://metacpan.org/author/TRWWW">TRWWW</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Check multidimensional data structures with Data::FormValidator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Kramerius">Data-Kramerius</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Information about all Kramerius systems.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-Coerce-perl-To_array-From_str-tsv_row">Data-Sah-Coerce-perl-To_array-From_str-tsv_row</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Coerce a single TSV row to array of scalars</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-Patch-AddDowNameToYmd">DateTime-Patch-AddDowNameToYmd</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Make DateTime's ymd() output YYYY-MM-DDXX instead of YYYY-MM-DD, where XX is 2-letter day-of-week name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Deplide-RFID-EPCISSubmitter">Deplide-RFID-EPCISSubmitter</a></td>
<td><a href="https://metacpan.org/author/AVAJADI">AVAJADI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-MintingProfile-FFI">Dist-Zilla-MintingProfile-FFI</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>A minimal Dist::Zilla minting profile for FFI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Perinci-CmdLine">Dist-Zilla-Plugin-Perinci-CmdLine</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building Perinci::CmdLine::* distributions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-Patch-VarOptions">File-Temp-Patch-VarOptions</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Allow File::Temp's tempfile() and tempdir() to receive options via package variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-Coder-Mapbox">Geo-Coder-Mapbox</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Provides a Geo-Coding functionality using <a href="https://mapbox.com" rel="nofollow">https://mapbox.com</a></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-GoogleEarth-Pluggable-Plugin-AsGeoJSON">Geo-GoogleEarth-Pluggable-Plugin-AsGeoJSON</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.05</td>
<td>0.05</td>
<td>PostgreSQL ST_AsGeoJSON plugin for Geo::GoogleEarth::Pluggable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IO-AsyncX-Notifier">IO-AsyncX-Notifier</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Combining IO::Async::Notifier with Object::Pad</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iterator-Flex">Iterator-Flex</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.12</td>
<td>0.14</td>
<td>Iterators with flexible behaviors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-Any-Adapter-DERIV">Log-Any-Adapter-DERIV</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>0.001</td>
<td>0.001</td>
<td>one company's example of a standardised logging setup</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Znuny-CoreList">Module-Znuny-CoreList</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.00</td>
<td>1.00</td>
<td>what modules shipped with versions of Znuny (&gt;= 2.3.x)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-WebSocket-PubSub">Mojo-WebSocket-PubSub</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A Mojolicious publish/subscribe channels based on websocket.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Libwebsockets">Net-Libwebsockets</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>libwebsockets in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-Yapphp">Parse-Yapphp</a></td>
<td><a href="https://metacpan.org/author/SCHIECHEO">SCHIECHEO</a></td>
<td>1.22</td>
<td>1.23</td>
<td>A perl frontend to the Parse::Yapphp module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Plugin-Perinci-CmdLine">Pod-Weaver-Plugin-Perinci-CmdLine</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building Perinci::CmdLine::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RTIR-Extension-MISP">RTIR-Extension-MISP</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>RTIR-Extension-MISP Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rex-CMDB-TOML">Rex-CMDB-TOML</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>TOML-based CMDB provider for Rex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rex-Virtualization-CBSD">Rex-Virtualization-CBSD</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v1.0.0</td>
<td>CBSD virtualization module for bhyve</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Collection">RoleBundle-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.009</td>
<td>0.009</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Keyword-MultiSub">Syntax-Keyword-MultiSub</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>multiple dispatch on subroutines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Perl-CPAN-Release-Static-2021">TableData-Perl-CPAN-Release-Static-2021</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210928.2</td>
<td>20210928.2</td>
<td>CPAN releases for the year 2021</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Perl-CPAN-Release">TableDataBundle-Perl-CPAN-Release</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Collection of TableData:: modules that contain CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Perl-CPAN-Release-Static-Older">TableDataBundle-Perl-CPAN-Release-Static-Older</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210927.1</td>
<td>20210927.1</td>
<td>Collection of TableData:: modules that contain older CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Perl-Release">TableDataBundle-Perl-Release</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000</td>
<td>0.000</td>
<td>Collection of TableData:: modules that contain Perl releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML">Tags-HTML</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper abstract class.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-FFIDev">Task-FFIDev</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Task bundle for FFI development</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebSocket">WebSocket</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.5</td>
<td>WebSocket Client &amp; Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordLists-EN-Adverb">WordLists-EN-Adverb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of English adverbs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Yancy-Plugin-OpenAPI">Yancy-Plugin-OpenAPI</a></td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Generate an OpenAPI spec and API for a Yancy schema</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>51</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>26</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/AVAJADI">AVAJADI</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/PREACTION">PREACTION</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/TRWWW">TRWWW</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/SCHIECHEO">SCHIECHEO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GSB">GSB</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/ELLEDNERA">ELLEDNERA</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Parse-UnixShellCommandLine PERLANCAR 0.001 0.001 Modules that parse command-line like Unix shells Acme-FishFarm ELLEDNERA 1.00 1.00 A Fish Farm with Automated Systems Acme-ICan-tBelieveItCanSort SANKO 0.01 0.01 Wait… It Actually Works? Alien-PLplot ZMUGHAL 0.001 0.001 Alien package for the PLplot plotting library App-GeoCancerPrognosticDatasetsRetriever AALAMEER 1 1 GEO Cancer Prognostic Datasets Retriever is … <a href="https://perlancar.wordpress.com/2021/11/01/list-of-new-cpan-distributions-oct-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Oct 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1955</id>
    <published>2021-11-01T00:39:20Z</published>
    <updated>2021-11-01T00:39:20Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Friendly Fibonacci Summands</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/31#pwc136" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 2 positive numbers, $m and $n. Write a script to find out if the given two 
numbers are Two Friendly.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
use boolean;

sub euclid {
    my($a, $b) = @_;
    return ($b) ? euclid($b, $a % $b) : $a;
}

sub two_friendly{
    my($m, $n) = @_;
    my $gcd = euclid($m, $n);
    my $p = log($gcd) / log(2);
    return boolean(ceil($p) == floor($p));
}

MAIN:{
    print two_friendly(8, 24). "\n";
    print two_friendly(26, 39). "\n";
    print two_friendly(4, 10). "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've used this code for Euclid's GCD method before in 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/12/06#pwc089"&gt;Challenge 089&lt;/a&gt;. To determine
if &lt;code&gt;$p&lt;/code&gt; is an integer we check to see if the &lt;code&gt;floor()&lt;/code&gt; and &lt;code&gt;ceiling()&lt;/code&gt; are equal.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number $n. Write a script to find how many different sequences 
you can create using Fibonacci numbers where the sum of unique numbers in each sequence 
are the same as the given number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Data::PowerSet q/powerset/;

sub fibonacci_below_n{
    my($n, $fibonaccis) = @_;
    $fibonaccis = [1, 1] if !$fibonaccis;
    my $f = $fibonaccis-&gt;[@{$fibonaccis} - 2] + $fibonaccis-&gt;[@{$fibonaccis} - 1];
    if($f &lt; $n){
        push @{$fibonaccis}, $f;
        fibonacci_below_n($n, $fibonaccis);
    }
    else{
        shift @{$fibonaccis};
        return $fibonaccis;
    }
}

sub fibonacci_sum{
    my($n) = @_;
    my $powerset = powerset(fibonacci_below_n($n));
    my @summands = grep {
        my $fibonaccis = $_;
        my $sum = 0;
        map{
            $sum += $_;
        } @{$fibonaccis};
        $sum == $n;
    } @{$powerset};
    return @summands;
}

MAIN:{
    for my $summands (fibonacci_sum($ARGV[0])){
        print "(" . join(" + ", @{$summands}) . ") = " . $ARGV[0] . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 16
(3 + 13) = 16
(1 + 2 + 13) = 16
(3 + 5 + 8) = 16
(1 + 2 + 5 + 8) = 16
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Instead of using a pre-computed list of Fibonacci numbers we generate them as needed. No
particular reason other than it's a little more fun, and also it allows us to flexibly 
allow for virtually any value for &lt;code&gt;$n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The sequences are determined by examining the Power Set of all possible sequences and
checking the sums.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-136/"&gt;Challenge 136&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PowerSet.html"&gt;Power Set&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc136</id>
    <published>2021-10-31T20:09:00-04:00</published>
    <updated>2021-10-31T20:09:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1012543495466695315</id>
    <published>2021-10-30T15:52:00.000+02:00</published>
    <updated>2021-10-30T15:52:18.856+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxv) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.45&lt;/strong&gt; on 2021-10-28&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.44 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.56&lt;/strong&gt; on 2021-10-28&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.55 was 2 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.54&lt;/strong&gt; on 2021-10-26&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.53 was 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.58' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.58&lt;/strong&gt; on 2021-10-25&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.57 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-2.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OAuth2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Auth against OAuth2 APIs including OpenID Connect &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.01&lt;/strong&gt; on 2021-10-28&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.59 was 8 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTEMLE/Net-AMQP-RabbitMQ-2.40009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::AMQP::RabbitMQ&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - interact with RabbitMQ over AMQP using librabbitmq &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40009&lt;/strong&gt; on 2021-10-23&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 2.40008 was 1 year, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.120&lt;/strong&gt; on 2021-10-24&lt;/li&gt;  &lt;li&gt;Votes: 165&lt;/li&gt;  &lt;li&gt;Previous version: 0.118 was 8 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20211029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20211029&lt;/strong&gt; on 2021-10-29&lt;/li&gt;  &lt;li&gt;Votes: 121&lt;/li&gt;  &lt;li&gt;Previous version: 20210717 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ASB/Spreadsheet-XLSX-0.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Spreadsheet::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for reading MS Excel 2007 files; &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.16&lt;/strong&gt; on 2021-10-25&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.15 was 5 years, 11 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.10&lt;/strong&gt; on 2021-10-25&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 5.09 was 7 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-Mechanize-2.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.06&lt;/strong&gt; on 2021-10-25&lt;/li&gt;  &lt;li&gt;Votes: 88&lt;/li&gt;  &lt;li&gt;Previous version: 2.05 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.082' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.082&lt;/strong&gt; on 2021-10-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.078 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1012543495466695315/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxv-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1012543495466695315"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1012543495466695315"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxv-12-great-cpan-modules-released.html" title="(ccclxv) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7696742378201695011</id>
    <published>2021-10-30T15:49:00.002+02:00</published>
    <updated>2021-10-30T15:49:45.082+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxviii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/10/30 13:49:27 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Color::Rgb" target="_blank"&gt;Color::Rgb&lt;/a&gt; - Simple rgb.txt parsing class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Color::Spectrum" target="_blank"&gt;Color::Spectrum&lt;/a&gt; - Just another HTML color generator.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::Mojo" target="_blank"&gt;Future::Mojo&lt;/a&gt; - use Future with Mojo::IOLoop&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::MultiSub" target="_blank"&gt;Syntax::Keyword::MultiSub&lt;/a&gt; - multiple dispatch on subroutines&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Layout" target="_blank"&gt;Text::Layout&lt;/a&gt; - Pango style markup formatting&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Cron" target="_blank"&gt;Algorithm::Cron&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Future" target="_blank"&gt;AnyEvent::Future&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CBOR::XS" target="_blank"&gt;CBOR::XS&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::ISO8601" target="_blank"&gt;DateTime::Format::ISO8601&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::RFC3339" target="_blank"&gt;DateTime::Format::RFC3339&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Font::FreeType" target="_blank"&gt;Font::FreeType&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Tiny" target="_blank"&gt;Form::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::HTTP" target="_blank"&gt;Future::HTTP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::C" target="_blank"&gt;Inline::C&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern" target="_blank"&gt;JSON::Schema::Modern&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::relative" target="_blank"&gt;lib::relative&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::AsyncAwait" target="_blank"&gt;Mojo::AsyncAwait&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=464)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH::Perl" target="_blank"&gt;Net::SSH::Perl&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Open::This" target="_blank"&gt;Open::This&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Generator" target="_blank"&gt;OpenAPI::Generator&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Package::Alias" target="_blank"&gt;Package::Alias&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::XS" target="_blank"&gt;Promise::XS&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::Object" target="_blank"&gt;Set::Object&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract::Pg" target="_blank"&gt;SQL::Abstract::Pg&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ShellQuote" target="_blank"&gt;String::ShellQuote&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Struct::Dumb" target="_blank"&gt;Struct::Dumb&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::UTF8" target="_blank"&gt;Unicode::UTF8&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X11::XCB" target="_blank"&gt;X11::XCB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7696742378201695011/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7696742378201695011"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7696742378201695011"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxviii-metacpan-weekly-report.html" title="(cdlxxxviii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6120026398664160248</id>
    <published>2021-10-30T15:48:00.005+02:00</published>
    <updated>2021-10-30T15:48:57.015+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-10-30 13:42:01 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69753335" target="_blank"&gt;How do you delete a file that does not have a file extension?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69739860" target="_blank"&gt;Limiting a for loop in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69729489" target="_blank"&gt;Best practice for writing exception classes in modern Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69733263" target="_blank"&gt;Can't use "Git add -i"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69750699" target="_blank"&gt;PerlXS: Possible crash trying to free()&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69701112" target="_blank"&gt;How to unpack bytes in "pairwise reversed" order BA DC?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69742797" target="_blank"&gt;Perl Net::Server Log Buffer cuts off at 4096 characters&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69712283" target="_blank"&gt;Perl script fails from crontab but not command line&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69743169" target="_blank"&gt;How to sort output from Data::Printer?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69758827" target="_blank"&gt;How do I do a search in Perl?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6120026398664160248/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/dix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6120026398664160248"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6120026398664160248"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/dix-stackoverflow-perl-report.html" title="(dix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Final Report: Raku Dispatch and Compiler Improvements Grant Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/final_report_raku_dispatch_compiler_improvements"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/final_report_raku_dispatch_compiler_improvements</id>
  <published>2021-10-25T21:12:38</published>
  <updated>2021-10-25T21:12:38</updated>
  <summary>
  <![CDATA[
     During September, I completed the remaining hours on my current grant. The key aim of the grant to bring my work on a new generalized dispatch mechanism to the point where it could be merged and delivered to Raku users has been achieved, the merge taking place on 29th September. I wrote a blog post that provides some data on the improvements, as well as identifying future work that can 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>(from Jonathan Worthington)</p>

<p>During September, I completed the remaining hours on <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">my current grant</a>.
The key aim of the grant - to bring my work on a new generalized dispatch mechanism to the point where it
could be merged and delivered to Raku users - has been achieved, the merge taking place on 29th September.
I wrote a <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">blog post</a>
that provides some data on the improvements, as well as identifying future work that can build upon what
has been achieved thus far.</p>

<p>During September, working under the grant, I:</p>

<ul>
<li>Implemented specialization and inlining of dispatches that store resume initialization state, to allow
the dispatches to be resumed (for example, if <code>callsame</code> is used). This was a critical part of getting
back the level of inlining for method calls and multi dispatches that existed prior to this work, which
is a critical factor in Raku performance.</li>
<li>Implemented caller-side removal of <code>Scalar</code> containers, which in turn avoids various duplicate guards,
leading to much tighter code being produced after specialization and JIT compilation in many common
situations.</li>
<li>Fixed <code>Junction</code> multi-dispatch failover for the case where the <code>Junction</code> was in a named argument,
along the way tweaking the semantics to be more consistent with those of positional arguments (there
were some unintended discrepancies in the previous implementation).</li>
<li>Changed dispatch program compilation to not emit type guards when the types were already proven during
optimization, rather than adding them and relying on them to be optimized out later.</li>
<li>Reinstated all known missing optimizations from prior to the new dispatch work, and added JIT support
for various new operations introduced during the work.</li>
<li>Did various modifications to improve startup time, which has regressed. The new dispatch model has
many advantages, however does carry a higher warmup cost.</li>
<li>Fixed the profiler to work again in programs that use continuations, after changes to the continuation
representation as part of callstack changes.</li>
<li>Did numerous smaller fixes for bugs identified by <code>blin</code> (which runs the tests of all modules in the
ecosystem). In some cases where the modules relied on internals or unspecified behavior, I sent a PR
to the module instead.</li>
</ul>

<p>The time worked during September was 55 hours and 18 minutes, which was the remaining grant time
available.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal: Optimizations building upon the new Raku dispatch mechanism</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_optimizations"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/grant_proposal_raku_dispatch_optimizations</id>
  <published>2021-10-25T21:02:20</published>
  <updated>2021-10-25T21:02:20</updated>
  <summary>
  <![CDATA[
     Project title Optimizations building upon the new Raku dispatch mechanism Author Jonathan Worthington Synopsis Recently a new dispatch mechanism was merged into MoarVM, along with changes to Rakudo to make use of it. This led to a number of performance improvements in the immediate, and incidentally fixed various long-standing bugs. This is, however, just the start of what can be achieved with the new dispatch architecture and the changes made 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h2>Project title</h2>

<p>Optimizations building upon the new Raku dispatch mechanism</p>

<h2>Author</h2>

<p>Jonathan Worthington</p>

<h2>Synopsis</h2>

<p>Recently a new dispatch mechanism was merged into MoarVM, along with changes to
Rakudo to make use of it. This led to a number of <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">performance improvements</a>
in the immediate, and incidentally fixed various long-standing bugs. This
is, however, just the start of what can be achieved with the new dispatch
architecture and the changes made to the runtime as part of implementing it.
This grant application requests funding to help deliver further improvements
unlocked by that work.</p>

<h2>How will your work specifically benefit the development of Raku?</h2>

<p>Raku performance has improved significantly since the initial release of the
language. This is thanks to a multi-faceted effort by many Raku contributors,
including putting more powerful optimizations in the runtime, the careful
optimization of the standard library, and developing better tooling for
analyzing performance. However, there is most certainly more to be done in
order that performance becomes a limiting factor for an ever smaller number
of developers considering using Raku.</p>

<p>This work will deliver further performance improvements for many Raku scripts
and applications. It is quite varied in nature, although primarily focuses on
improvements at the level of the language runtime (MoarVM), especially given
the fact that the current compiler frontend will ultimately be replaced thanks
to the ongoing RakuAST effort. Given I am also working on that, I'm well-placed
to avoid doing throwaway work.</p>

<h2>Project Details</h2>

<p>As with previous grants, I request an hourly rate, and propose a set of key
areas that I intend to work on, on the understanding that there may not be
time to complete all of them, or that studying profiler and compilation output
might reveal some more profitable improvements to work on (bigger performance
gains for less effort).</p>

<p>One key area of work is to reduce the cost of calls, which is relatively high.
A lot of this cost is hidden by MoarVM being able to inline (including multiple
levels deep) and, in the case a speculative optimization proves invalid, to
uninline. However, in anything except the tightest microbenchmark, we can't
just inline everything, and the calling cost thus needs to be reduced also. Of
note, I propose to:</p>

<ul>
<li>Reduce the cost of callframe setup by allocating space for registers and,
where possible, the lexical environment directly on the callstack rather
than as separate allocations. This should make every non-inlined call
faster.</li>
<li>Reorganize callframe entry to avoid repeated checks (for example, around
specialized/unspecialized, JIT compiled or not, etc.), perhaps getting rid
of many of the checks entirely in specialized code by compiling the steps
needed for callframe setup.</li>
<li>Find a different, and cheaper, way to handle <code>LEAVE</code> and similar phasers.
These are often required for reliable release of locks, but suffer from
relatively poor performance. Their potential presence also imposes a small
cost even on frames that do not rely upon them, which would be good to
eliminate.</li>
<li>Further rework callframe exit in order to make it cheaper. Of note, MoarVM
has a "special return" mechanism that is used internally to avoid nested
runloops in favor of a Continuation Passing Style approach, which currently
also imposes a small cost on every frame exit (checking if it is needed).
The callstack layout after the new dispatch mechanism work will allow
us to avoid this.</li>
</ul>

<p>Prior to working on the new dispatch mechanism, I started some work on partial
escape analysis, an analysis that allows for eliminating or delaying object
allocations. Raku makes heavy use of objects, which not only imposes the
direct cost of their allocation and later garbage collection, but also the
indirect cost of having further optimizations frustrated by not being able to
look "inside" the object. Some basic escape analysis has already been merged,
while further work was not completed, and in part blocked by things that have
now been resolved. I would like to return to this work, bringing it piecemeal
into the main branch. Of note, this will deliver:</p>

<ul>
<li>Support for transitive escape analysis, so we can avoid the allocation of
entire object graphs (for example, a Scalar container holding a Complex
could potentially elide both allocations).</li>
<li>Restructuring object creation. Today we often lazily allocate containers
for attributes, in part because we depend on it to know whether to apply
attribute default values. This creates complications for escape analysis,
as well as forcing initialization checks in quite a number of places.</li>
<li>Delayed materialization of allocations. For example, if an object is read
and written many times before it escapes (that is, returned or stored
somewhere we can't reason about), we can delay the allocation of the object,
treating its attributes as local variables up to that point. In some cases
the allocation may only happen in one branch (for example, in an exceptional
path), and so be possible to eliminate entirely in the common case.</li>
<li>Handling of <code>Int</code>s in scalar replacement (the process by which non-escaping
object's attributes are stored in VM registers). <code>Int</code> is important given how
common integer math is, but also challenging because of the potential big
integer upgrade. Special care will be needed to never leak memory that is
allocated for a big integer, even in the situations an enclosing object's
allocation is elided.</li>
</ul>

<p>Another area of work is to further improve or make further use of the new
dispatch mechanism. Of note:</p>

<ul>
<li>Apply the same caller-side decontainerization of <code>Scalar</code> containers approach
to also handle native references, so we can optimize their creation away in
many more cases. This should lead to performance improvements in code that
makes use of native types.</li>
<li>Provide a way to attach dispatch programs a level down the callstack, which
may turn a megamorphic program point into a monomorphic one. For example, at
the moment, when we have a <code>proto</code> with a complex body and a <code>{*}</code>, the cache
at the <code>{*}</code> will end up with entries for all argument types that are seen.
However, if we were to locate the cache in the caller of the <code>proto</code>, we'd
often end up with only a single entry. The same applies in a number of other
situations (for example, the dispatch resumption is currently inside of the
<code>callsame</code> sub, so we scale poorly in large applications that use <code>callsame</code>
in many different places).</li>
<li>Use the dispatch mechanism to better optimize use of the FALLBACK method</li>
<li>Use the dispatch mechanism to better optimize various forms of Raku type
check</li>
<li>In the case we have specializations available, fold the selection of a
specialization into the dispatch program, avoiding repeated guard checks</li>
</ul>

<h2>Project Schedule</h2>

<p>I would start immediately upon grant approval, and expect to give a minimum of
40 hours a month to the grant, however more should be possible most months.</p>

<h2>Bio</h2>

<p>I am the founder and architect of MoarVM, the most popular runtime for Raku users,
and the architect of the Rakudo compiler. I have contributed to the implementation
of numerous Raku language features, and played a key role in the design of the
concurrent and parallel aspects of the language. I hold a degree in Computer Science
from the University of Cambridge, and actively work in the field of developer
tooling and compilation.</p>

<h2>Amount requested</h2>

<p>200 hours * $60 USD / hour = $12,000 USD</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: November 2021 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_november_2021"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/call_for_grants_november_2021</id>
  <published>2021-10-25T20:56:26</published>
  <updated>2021-10-25T20:56:26</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 5, 2021, UTC. We will publish the received applications, get community feedback through November 12th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 5, 2021, UTC. We will publish the received applications, get community feedback through November 12th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than November 6th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Bitbucket Pipelines (the CI system) for Perl projects</title>
  <summary type="html"><![CDATA[<p>
Bitbucket Pipelines (the CI system) for Perl projects
<p>
]]></summary>
  <updated>2021-10-25T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/bitbucket-pipelines-for-perl-projects"/>  <id>https://perlmaven.com/bitbucket-pipelines-for-perl-projects</id>
  <content type="html"><![CDATA[<p>
Bitbucket Pipelines (the CI system) for Perl projects
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#535 - Exercism and Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/535.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>A long, long time ago I contributed a few Perl-related exercises to <a href="https://exercism.org/">Exercism</a>, but then for another long time I only recommended it, but didn't use it myself. Recently I returned to it with the hope to use it as a platform to allow my students to practice. I noticed that the Perl track has 62 exercises while many of the other tracks have more. Some of them twice as many.</p>
<p>Have you tried doing the Perl track recently? Are you a mentor on the Perl track? Have you contributed an exercises?</p>
<p>I wonder if it would be a good idea for Mohammad, to post his Weekly challenges as exercises on Exercism.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/535.html</id>
    <published>2021-10-25T10:00:00Z</published>
    <updated>2021-10-25T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Caught in the Middle With SEDOL</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/24#pwc135" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer. Write a script find out the middle 3-digits of the given 
integer, if possible, otherwise show a sensible error message.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
sub middle_3{
    my($i) = @_;
    $i = abs($i);
    my $length = length($i);
    return "even number of digits" if $length % 2 == 0;
    return "too short" if $length &lt; 3;
    my $middle = ceil($length / 2);
    return substr($i, $middle - 2, 3);
}

MAIN:{
    print middle_3(1234567) . "\n";
    print middle_3(-123) . "\n";
    print middle_3(1) . "\n";
    print middle_3(10) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
345
123
too short
even number of digits
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Maybe on of the more interesting things about this is just what we consider the middle 3.
Truly it only makes sense for an integer with an odd number of digits. But could we 
have stretched the idea to allow for an even number of digits, perhaps with some left 
padding? Perhaps, but here we don't. So all integers with only 1 or 2 digits are discarded
as are those with an even number of digits. Negative numbers are allowed, but we do not
consider the minus sign in determining the middle.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 7-characters alphanumeric SEDOL. Write a script to validate the given 
SEDOL. Print 1 if it is a valid SEDOL otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_sedol{
    my($sedol) = @_;
    my $base = substr($sedol, 0, 6);
    my $check_digit = substr($sedol, 6, 1); 
    ##
    # check length
    ##
    return false if length($sedol) != 7;
    ##
    # check for alphanumerics only
    ##
    my $test_base = $base;
    $test_base =~ tr/[0-9][B-Z]//d;
    return false if $test_base;
    ##
    # confirm the check_digit
    ##
    return false if $check_digit != compute_check_digit($base);
    ##
    # all tests passed!
    ##
    return true;
}

sub compute_check_digit{
    my($base) = @_;
    my @chars = split(//, $base);
    my @weights = (1, 3, 1, 7, 3, 9),
    my $sum = 0;
    do{
        my $c = ord(shift @chars);
        if($c &gt;= 66 &amp;&amp; $c &lt;= 90){
            $sum += (($c - 64 + 9) * shift @weights);
        }
        if($c &gt;= 48 &amp;&amp; $c &lt;= 57){
            $sum += (($c - 48) * shift @weights);
        }
    }while(@chars);
    return (10 - ($sum % 10)) % 10
}

MAIN:{
    print is_sedol(2936921) . "\n";
    print is_sedol(1234567) . "\n";
    print is_sedol("B0YBKL9") . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules around SEDOLs are a bit more complex than this problem lets on. I won't recount
them all here, but suffice to say we are dealing with a quite idealized set of validations
here. For example, prior to 2004 only numerals were allowed, but since then letters are 
allowed. But only a numeral can follow a letter. Again, though, those are only rules that
apply for a certain time range.&lt;/p&gt;

&lt;p&gt;Here we are just checking on length, whether or not the SEDOl contains all numerals and/or
(uppercase) letter, and the checksum validation.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 135&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.investopedia.com/terms/s/sedol.asp"&gt;Stock Exchange Daily Official List (SEDOL)&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc135</id>
    <published>2021-10-24T15:17:00-04:00</published>
    <updated>2021-10-24T15:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#534 - Are you CPAN contributor?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/534.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How much have you contributed during the Hacktoberfest event yet?</p>
<p>CPAN needs a helping hand, not just during Hacktoberfest. I am raising the subject as Dave Cross recently blogged about his experience with one of the distributions hosted on CPAN in this <a href="https://dev.to/davorg/failing-to-get-product-information-from-amazon-with-perl-5a3g">blog post</a>. It also reminds me of my early days when I created Perl a library around some of Google's public APIs. Two of them, <a href="https://metacpan.org/dist/WWW-Google-CustomSearch">WWW::Google::CustomSearch</a> and <a href="https://metacpan.org/dist/WWW-Google-Places">WWW::Google::Places</a> were used by many people, as I have had many queries related to them in the past. It is very common for an API provider to discontinue the service or move in a new direction any time without notice. It becomes an even bigger issue if the author of the CPAN distribution disappears from the scene. So the question is, how best to deal with such cases? Thanks to the PAUSE admins, there is a documented process to adopt a distribution and take it forward. You should get in touch with one of the PAUSE admins if you want to adopt a distribution and contribute.</p>
<p>For many years, <a href="https://metacpan.org/recent">MetaCPAN</a> has been my playground. I used to spend 2-4 hours every day looking for low-hanging issues in the recently uploaded distributions. I even wrote a two-part blog post talking about how to become a CPAN contributor. <a href="https://www.perl.com/article/how-to-become-cpan-contributor">Part 1</a> and <a href="https://www.perl.com/article/how-to-become-cpan-contributor-part-2">Part 2</a>. I also gave a talk at The Perl Conference in Glasgow 2018 on the same topic. You can watch the talk on <a href="https://www.youtube.com/watch?v=QYN1nijo9VY">YouTube</a>, if you fancy.</p>
<p>I remember at one point, I was keen to contribute to MetaCPAN and be part of the Toolchain Gang. I couldn't get the local dev setup of MetaCPAN and was looking for help. I was told that someone from the gang is working on dockerisation of MetaCPAN to make it easier for anyone to contribute. I missed the opportunity to meet the gang when it was held in Marlow, not far from where I live (London) in 2019. I don't know if anyone is still working on that front.</p>
<p>I hardly contribute to CPAN these days but I still like to call myself CPAN contributor. However I do release a patch every now and then to some of my personal and adopted distributions. Being a member of the <a href="https://pullrequest.club/hello">Pull Request Club</a>, I do contribute to at least one distribution every month. I have never missed a month since I joined the club in Jan 2019.</p>
<p>If anyone is keen to become a CPAN contributor then please get in touch with me. We need fresh energy to make CPAN the central place to look for the best solutions.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/534.html</id>
    <published>2021-10-18T10:00:00Z</published>
    <updated>2021-10-18T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Couple of Brute Force Computations</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17#pwc134" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 5 Pandigital Numbers in base 10.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to generate first 5 Pandigital Numbers in base 10.
##
use boolean;

sub first_n_pandigitals {
    my ($n)         = @_;
    my $found       = false;
    my $pandigitals = [];
    my $x           = 1_000_000_000;
    do {
        my $test = $x;
        push @{$pandigitals}, $x
          if ( $test =~ tr/0//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/1//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/2//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/3//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/4//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/5//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/6//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/7//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/8//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/9//d ) &gt; 0;
        $found = ( @{$pandigitals} == $n );
        $x++;
    } while ( !$found );
    return $pandigitals;
}

sub first_5_pandigitals {
    return first_n_pandigitals(5);
}
MAIN: {
    my $pandigitals = first_5_pandigitals;
    for my $x ( @{$pandigitals} ) {
        print "$x\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1023456789
1023456798
1023456879
1023456897
1023456978
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;From the definition we know that we will need at least 10 digits and, intuitively, the
first five pandigital numbers will start with &lt;code&gt;1&lt;/code&gt;. So then, we start with &lt;code&gt;1_000_000_000&lt;/code&gt;
and iterate upwards testing each candidate until we find the first five. The test used
here is to determine if &lt;code&gt;tr&lt;/code&gt; finds all the required digits.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 2 positive numbers, $m and $n. Write a script to generate multiplication 
table and display count of distinct terms.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given 2 positive numbers, $m and $n.
# Write a script to generate multiplcation table and display count of distinct terms.
##
sub compute_print {
    my ( $m, $n ) = @_;
    my $distinct = {};
    print " x | " . join( " ", ( 1 .. $n ) ) . "\n";
    print "---+-" . "-" x ( $n * 2 - 1 ) . "\n";
    for my $i ( 1 .. $m ) {
        print " $i | " . join( " ", map { $i * $_ } ( 1 .. $n ) ) . "\n";
        for my $j ( 1 .. $n ) {
            $distinct-&gt;{ $i * $j } = undef;
        }
    }
    return $distinct;
}
MAIN: {
    my $distinct = compute_print( 3, 3 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
    print "\n\n";
    $distinct = compute_print( 3, 5 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 x | 1 2 3
---+------
 1 | 1 2 3
 2 | 2 4 6
 3 | 3 6 9
Distinct Terms: 1, 2, 3, 4, 6, 9
Count: 6


 x | 1 2 3 4 5
---+----------
 1 | 1 2 3 4 5
 2 | 2 4 6 8 10
 3 | 3 6 9 12 15
Distinct Terms: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15
Count: 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is a perfectly Perl shaped problem. The computations can be handled in a 
straightforward way, especially with &lt;code&gt;map&lt;/code&gt;. Getting rid of duplicates is done using
the idiomatic method with hash keys. Finally, formatting the output cleanly is done 
without much undo stress. Compare what we do here to format the table with what was
necessary to represent the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17/prolog"&gt;same table in Prolog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 134&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PandigitalNumber.html"&gt;Pandigital Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc134</id>
    <published>2021-10-17T13:03:00-04:00</published>
    <updated>2021-10-17T13:03:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
