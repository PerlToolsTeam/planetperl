<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-10-25T04:46:20Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Caught in the Middle With SEDOL</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/24#pwc135" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer. Write a script find out the middle 3-digits of the given 
integer, if possible, otherwise show a sensible error message.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
sub middle_3{
    my($i) = @_;
    $i = abs($i);
    my $length = length($i);
    return "even number of digits" if $length % 2 == 0;
    return "too short" if $length &lt; 3;
    my $middle = ceil($length / 2);
    return substr($i, $middle - 2, 3);
}

MAIN:{
    print middle_3(1234567) . "\n";
    print middle_3(-123) . "\n";
    print middle_3(1) . "\n";
    print middle_3(10) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
345
123
too short
even number of digits
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Maybe on of the more interesting things about this is just what we consider the middle 3.
Truly it only makes sense for an integer with an odd number of digits. But could we 
have stretched the idea to allow for an even number of digits, perhaps with some left 
padding? Perhaps, but here we don't. So all integers with only 1 or 2 digits are discarded
as are those with an even number of digits. Negative numbers are allowed, but we do not
consider the minus sign in determining the middle.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 7-characters alphanumeric SEDOL. Write a script to validate the given 
SEDOL. Print 1 if it is a valid SEDOL otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_sedol{
    my($sedol) = @_;
    my $base = substr($sedol, 0, 6);
    my $check_digit = substr($sedol, 6, 1); 
    ##
    # check length
    ##
    return false if length($sedol) != 7;
    ##
    # check for alphanumerics only
    ##
    my $test_base = $base;
    $test_base =~ tr/[0-9][B-Z]//d;
    return false if $test_base;
    ##
    # confirm the check_digit
    ##
    return false if $check_digit != compute_check_digit($base);
    ##
    # all tests passed!
    ##
    return true;
}

sub compute_check_digit{
    my($base) = @_;
    my @chars = split(//, $base);
    my @weights = (1, 3, 1, 7, 3, 9),
    my $sum = 0;
    do{
        my $c = ord(shift @chars);
        if($c &gt;= 66 &amp;&amp; $c &lt;= 90){
            $sum += (($c - 64 + 9) * shift @weights);
        }
        if($c &gt;= 48 &amp;&amp; $c &lt;= 57){
            $sum += (($c - 48) * shift @weights);
        }
    }while(@chars);
    return (10 - ($sum % 10)) % 10
}

MAIN:{
    print is_sedol(2936921) . "\n";
    print is_sedol(1234567) . "\n";
    print is_sedol("B0YBKL9") . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules around SEDOLs are a bit more complex than this problem lets on. I won't recount
them all here, but suffice to say we are dealing with a quite idealized set of validations
here. For example, prior to 2004 only numerals were allowed, but since then letters are 
allowed. But only a numeral can follow a letter. Again, though, those are only rules that
apply for a certain time range.&lt;/p&gt;

&lt;p&gt;Here we are just checking on length, whether or not the SEDOl contains all numerals and/or
(uppercase) letter, and the checksum validation.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 135&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.investopedia.com/terms/s/sedol.asp"&gt;Stock Exchange Daily Official List (SEDOL)&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc135</id>
    <published>2021-10-24T15:17:00-04:00</published>
    <updated>2021-10-24T15:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Some Perl Code In Memory of a Great Scientist</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin/2021/10/some-perl-code-in-memory-of-a-great-scientist.html"/>
    <id>tag:blogs.perl.org,2021:/users/martin//2725.10473</id>
    <published>2021-10-24T17:10:00Z</published>
    <updated>2021-10-24T18:14:37Z</updated>
    <author>
        <name>martin</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/martin/">
        <![CDATA[<p>On August 21, 2021, famous Polish mathematician Andrzej Schinzel passed away at the age of 84. He was one of the great minds behind modern number theory. May he rest in peace.
I have extended one of my CPAN modules relating to his work and dedicated the release to his memory.</p>
]]>
        <![CDATA[<p>I'll outline one of the insights credited to Beeger (1884-1965) and Schinzel. Suppose we want to factor an integer number of the form <em>k<sup>n</sup> ± 1</em>. We can use classical Algebra to factor rational polynomials <em>x<sup>n</sup> ± 1</em>. For example, <em>x<sup>21</sup> + 1 = (x + 1)(x<sup>2</sup> - x + 1)(x<sup>6</sup> - x<sup>5</sup> + x<sup>4</sup> - x<sup>3</sup> + x<sup>2</sup> - x + 1)(x<sup>12</sup> + x<sup>11</sup> - x<sup>9</sup> - x<sup>8</sup> + x<sup>6</sup> - x<sup>4</sup> - x<sup>3</sup> + x +1)</em>. These factors always have integer coefficients, are called cyclotomic polynomials, and are "easy" to obtain. Evaluating these polynomials at <em>x = k</em> yields us a first partial factorization of our number.</p>

<p>To continue our example, we see that <em>2<sup>21</sup> + 1 = 3·3·43·5419</em>, <em>3<sup>21</sup> + 1 = 4·7·547·682969</em>, etc.  Can we do better? Enter Aurifeuillean factorization. Aurifeuille, Le Lasseur and Lucas observed that some cyclotomic polynomials can be written in the form <em>C<sup>2</sup> - n·x·D<sup>2</sup> = (C - √(n·x)D)(C + √(n·x)D)</em> where <em>n</em> is a positive integer and <em>C</em> and <em>D</em> are again polynomials with integer coefficients. In algebraic terms, while irreducible over the field of Rationals ℚ, cyclotomic polynomials may be reducible over some extension field ℚ[√n]. Now if the square root of <em>n·x</em> happens to be an integer, that is when <em>x</em> is <em>n</em> times a square number, the formula above gets all integer, splitting a cyclotomic factor into two smaller integer factors.  In short, Aurifeuille &amp; Co. improve our factorization for some, but not all combinations of <em>n</em> and <em>k</em>.</p>

<p>For square-free <em>n &gt; 1</em>, meaning <em>n</em> without square divisors, <em>Lucas C,D</em> polynomials can split one cyclotomic factor of <em>n<sup>n</sup> - 1</em> if <em>n ≡ 1 (mod 4)</em>, or of <em>n<sup>n</sup> + 1</em> otherwise, into two smaller factors. Note that the base and the exponent are equal.</p>

<p>It turns out that these are special cases of something more profound. Beeger and Schinzel found the best currently known generalization. Essentially, they give us <em>C,D</em> polynomials covering more cases. To illustrate their range, let's compare some factorizations of 21st powers plus one. We leave out perfect powers, as <em>k<sup>n<sup>21</sup></sup></em> can be better treated as an <em>n</em><sup>21</sup>st power of <em>k</em> than as a 21st power of <em>k<sup>n</sup></em>.</p>

<pre>
+-----+------------+-----------------------------------------+
|  n  |  kind      |  factors of n^21+1                      |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  2  | cyclotomic |  3  3  43  5419                         |
|     +------------+-----------------------------------------+
|     | complete   |  3  3  43  5419                         |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  3  | cyclotomic |  4        7  547  682969                |
|     +------------+-----------------------------------------+
|     | Lucas      |  4     1  7  547  682969                |
|     +------------+-----------------------------------------+
|     | Schinzel   |  4     1  7  547  301    2269           |
|     +------------+-----------------------------------------+
|     | complete   |  2  2     7  547  7  43  2269           |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  5  | cyclotomic |  6     21    13021    290639881         |
|     +------------+-----------------------------------------+
|     | complete   |  2  3  3  7  29  449  7  43  127  7603  |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  6  | cyclotomic |  6     21    13021    290639881         |
|     +------------+-----------------------------------------+
|     | complete   |  2  3  3  7  29  449  7  43  127  7603  |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  7  | cyclotomic |  8        43  102943    15772610449     |
|     +------------+-----------------------------------------+
|     | Lucas      |  8        43  113  911  15772610449     |
|     +------------+-----------------------------------------+
|     | Schinzel   |  8        43  113  911  51031  309079   |
|     +------------+-----------------------------------------+
|     | complete   |  2  2  2  43  113  911  51031  309079   |
+-----+------------+-----------------------------------------+
</pre>
<p>As we can see, "Schinzel" polynomials, as I like to call them, help us with many large cyclotomic factors Lucas polynomials leave aside.</p>
<p>As I wanted to include Aurifeuillean factorization in my CPAN module Math::Polynomial::Cyclotomic for quite some time, I finally took the opportunity to do that. I implemented Lucas and "Schinzel" polynomials there as well as methods applying these to find algebraic factors of integer numbers of the form <em>k<sup>n</sup> ± 1</em>.
Factoring large numbers can be hard—crypto-algorithms like RSA rely on that—, and a partial factorization can be the crucial step to reduce the problem to a feasible magnitude.  Curiously, <em>Lucas C,D</em> polynomials seem to be rare in computer algebra libraries and Schinzel's results even rarer.  At least CPAN now has some of these.  I intend to add a Raku version later.  A treasure trove of other number-theoretic functions can be found in Dana Jacobsen's Math::Prime::Util, including some that are used in M::P::Cyclotomic.</p>
<p>Andrzej Schinzel published more than 200 research papers and was <strong>the</strong> expert for number-theoretic aspects of polynomials. I dedicate the latest release of Math::Polynomial::Cyclotomic to his memory.</p>
<h2>References</h2>
<ul><li><a href="https://metacpan.org/dist/Math-Polynomial-Cyclotomic">Math::Polynomial::Cyclotomic</a> on CPAN</li>
<li><a href="https://metacpan.org/dist/Math-Prime-Util">Math::Prime::Util</a> on CPAN</li>
<li><a href="https://homes.cerias.purdue.edu/~ssw/cun/">The Cunningham Project</a>, a project dedicated to collect integer factors of high powers of small integers ± 1</li>
<li><a href="https://en.wikipedia.org/wiki/Cyclotomic_polynomial">Cyclotomic polynomial</a> in Wikipedia</li>
<li><a href="https://maths-people.anu.edu.au/~brent/pub/pub135.html">The paper by Richard Brent</a> my implementation of Aurifeuillean factorization of cyclotomic polynomials is based on</li>
<li><a href="https://en.wikipedia.org/wiki/Andrzej_Schinzel">Andrzej Schinzel</a> in Wikipedia</li>
</ul>]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6850168098691124927</id>
    <published>2021-10-23T15:53:00.000+02:00</published>
    <updated>2021-10-23T15:53:16.267+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxiv) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.44&lt;/strong&gt; on 2021-10-20&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.42 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.050003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.050003&lt;/strong&gt; on 2021-10-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.050001 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.51&lt;/strong&gt; on 2021-10-22&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.50 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.35' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.35&lt;/strong&gt; on 2021-10-19&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.34 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/local-lib-2.000028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;local::lib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - create and use a local lib/ for perl modules with PERL5LIB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000028&lt;/strong&gt; on 2021-10-17&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 2.000027 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20211020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20211020&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210920 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.22&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 462&lt;/li&gt;  &lt;li&gt;Previous version: 9.21 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2021-10-22&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.715' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.715&lt;/strong&gt; on 2021-10-20&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 7.714 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 6 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.078&lt;/strong&gt; on 2021-10-17&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.077 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6850168098691124927/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiv-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6850168098691124927"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6850168098691124927"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiv-11-great-cpan-modules-released.html" title="(ccclxiv) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Weekly Challenge 135</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-135-g0o" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-135/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-135/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-middle-3digits">
  </a>
  TASK #1 › Middle 3-digits
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given an integer.</p>

<p>Write a script find out the middle 3-digits of the given integer, if possible otherwise throw sensible error.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This task was pretty straight forward.</p>

<ul>
<li>Check the an integer was provided.</li>
<li>If it is negative, make it positive with the <code>abs</code> function.</li>
<li>Display an error if it contains an even number of digits, or one digit</li>
<li>The first character we want to show can be calculated by <code>(length - 3) ÷ 2</code>. Use this value with <code>substr</code> to display the middle three digit</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 1234567
345

$ ./ch-1.pl -123
123

$ ./ch-1.pl 1
too short

$ ./ch-1.pl 10
even numbers of digits
</code></pre>

</div>



<h2>
  <a href="#task-2-validate-sedol">
  </a>
  TASK #2 › Validate SEDOL
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given 7-characters alphanumeric <a href="https://en.wikipedia.org/wiki/SEDOL">SEDOL</a>.</p>

<p>Write a script to validate the given SEDOL. Print 1 if it is a valid SEDOL otherwise 0.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>The first thing that I need to do is check if the input is valid. I use the regular expression <code>^[B-DF-HJ-NP-TV-Z0-9]{6}[0-9]$</code> to perform this. According to the specification, vowels are not valid. Did anyone else sing the <a href="https://en.wikipedia.org/wiki/Alphabet_song">alphabet song</a> when generating the regular expression? :)</p>

<p>I set the value of <code>$sum</code> to the last digit. I then go through the other digits. I work out the value of the digit in the position (0-9 if it is is a number, 10-35 if it is a letter) and multiple the weight.</p>

<p>If the resulting sum is divisible by 10, I return 1 (a valid SEDOL value), otherwise I return 0.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 2936921
1

$ ./ch-2.pl 1234567
0

$ ./ch-2.pl B0YBKL9
1
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-135-g0o</id>
    <published>2021-10-23T12:39:48Z</published>
    <updated>2021-10-23T12:39:48Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>13 reasons why you should not use Perl</title>
    <link rel="alternate" href="https://dev.to/parvezmrobin/13-reasons-why-you-should-not-use-perl-20d5" type="text/html"/>
    <content type="html">&lt;p&gt;Currently, I am conducting a natural language processing course. As part of the curriculum, I need to learn and code in Perl. I was exited! I was enthusiastic! However, the verb is "WAS". I am neither exited nor enthusiastic any more. I already have experience in C, CPP, C#, Java, Golang, Python, JavaScript, TypeScript and Bash. Among this versatile experience, Perl is now my second most hated language after Bash. &lt;em&gt;Let me tell you why&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Weird variable access&lt;/strong&gt;: I have worked with typed language where I need to tell the type. I have worked with weakly typed language where the language knows which is which. Then comes Perl. It is weakly typed. But, I need to prefix a variable by either &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; to tell Perl about the type of variable. And I need to do it every time I access the variable. Even more - the prefix changes time to time based on the usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Too much implicit code&lt;/strong&gt;: Remember, explicit is always better than implicit. But, Perl works the opposite way. Consider the following snippet.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What this does is reads from the input stream in &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; this command, stores it in a variable named &lt;code&gt;$_&lt;/code&gt;, then prints that variable. Of course you can assign and use your own variable but Perl developers seem to prefer this. Well, I don't.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lacking readability&lt;/strong&gt;: Continuing from the previous example, when someone sees that snippet, it is literally hard to get what it is doing. At least, it was hard for me. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No clear parameter list&lt;/strong&gt;: While declaring a function (called subroutine in Perl), it does not specify the parameter list. You will always pass a list of arguments and the function need to extract them from an array. The end product is too much boiler-plating with too less readability.&lt;br&gt;
This is what you will do, if you need to retrieve 3 parameters.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;something&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;variables&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weirdly passing arrays to function&lt;/strong&gt;: When you pass an array to a perl function, it flattens everything. Consider the following code.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;@a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;@b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;scalar&lt;/code&gt; function returns the length of an array and the &lt;code&gt;@_&lt;/code&gt; variable holds the arguments as an array. So, &lt;code&gt;scalar(@_)&lt;/code&gt; will give us the number of arguments. What do you think the output is? &lt;code&gt;2&lt;/code&gt;? It should be. But, it's perl and the output is &lt;code&gt;6&lt;/code&gt;.&lt;br&gt;
If you want to pass an array as an array, you need to make a reference of the array, pass the reference and de-reference it inside the function. Hell of a job for such a simple task!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weirder passing hash/map to function&lt;/strong&gt;: Okay. When we pass something to a perl function, it flattens everything and makes a single array. What happens to hashes/maps? Well! It makes that an array too. And that array contains all the keys and values; in a single place. Consider the following code.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;%f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;%f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What do you think the former code prints? My guess was it will print the keys of the map. At the worst case, it will print the values instead. Alas! The actual worst case worse than what I anticipated. It prints both keys and values. So, the output is &lt;code&gt;one, 1, two, 2&lt;/code&gt;. And it becomes a mess when you want to reconstruct the map.&lt;br&gt;
The mess gets messier if you call the function like &lt;code&gt;func1 %f, three, 3&lt;/code&gt;. How will you know what came from where?&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cryptic RegEx handling&lt;/strong&gt;: When you do a regular expression match, it automatically assigns some variables like &lt;code&gt;$&amp;amp;&lt;/code&gt;, &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$'&lt;/code&gt; etc. They are useful when you know them to be honest. But, when you just read the code, specially when you are from another background, it looks like a mess.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less Searchability&lt;/strong&gt;: Consider the previous point. You are reading a perl program. You suddenly found use of undeclared variables like &lt;code&gt;$&amp;amp;&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt;. So, you googled about it - &lt;em&gt;"what does $' means in perl"&lt;/em&gt;. Alas! while you search something on the search engines, they generally stripes out spaces and punctuation. You will still have relevant results. But, they won't be as great as if you search - &lt;em&gt;"what does dir mean in python"&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pathetic debugging support&lt;/strong&gt;: The debugging support for perl is in a word pathetic. It only supports some basic commands and the error messages are cryptic. Once you are stuck in somewhere, you are DONE!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Too much implicit error handling&lt;/strong&gt;: While the shown error messages are cryptic, there are a lot of errors that are not shown at all. Say, we have an array &lt;code&gt;@a&lt;/code&gt; and we want to print it. Now, mistakenly we have typed &lt;code&gt;print $a&lt;/code&gt;. It will just print nothing just like if the array was empty. In my opinion it either should through an error or print the memory address of &lt;code&gt;@a&lt;/code&gt;. It does nothing. And you will never know that you have an error there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Inconsistent behavior&lt;/strong&gt;: Say, we have a function like this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;one&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we define two maps like the following&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;%m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;%m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;one&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;%m1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;%m2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It will print &lt;code&gt;one1&lt;/code&gt; and &lt;code&gt;1two&lt;/code&gt;. Can you make any sense of it? Well, I could not for a while. Turns out if your map's value coincides with one of the functions, it will call that function and use the function's return value as the map's value. But, it will not do such if your map's key coincides with a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poor IDE support&lt;/strong&gt;: So far I have not seen any perl IDE that satisfies me. You can add plugin to VS Code or JetBrains IDEs to support perl. But, they are buggy and are not feature-rich.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I just hate it&lt;/strong&gt;: This is the full and final reason. And, I guess, this is sufficient reason to hate a language that I just hate it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;John Lennon dreamed of a world without religion. I dream of a world without perl.&lt;/p&gt;
&lt;/blockquote&gt;

</content>
    <author>
      <name>Parvez M Robin</name>
    </author>
    <id>https://dev.to/parvezmrobin/13-reasons-why-you-should-not-use-perl-20d5</id>
    <published>2021-10-21T20:15:33Z</published>
    <updated>2021-10-21T20:15:33Z</updated>
    <category term="perl"/>
    <category term="nlp"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Making Single-binary Release with pp</title>
    <link rel="alternate" href="https://dev.to/gugod/making-single-binary-release-with-pp-5171" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;code&gt;pp&lt;/code&gt; comes with &lt;code&gt;PAR::Packer&lt;/code&gt;, which is a tool for "compiling" a bunch of modules and codes and makes a single binary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc pp&lt;/code&gt; already contains a good amount of documentation one can refer to.&lt;/p&gt;

&lt;p&gt;While it works with system perl, I found it even easier to first prepare a directory of &lt;code&gt;local::lib&lt;/code&gt;, then just package that entire directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pp&lt;/code&gt; tries its best to determine the list of dependencies of the given program in various ways but none of those are guaranteed to be 100% accurate. As matter of fact that guarantee is impossible to make. This is partially due to the fact that a running program can load modules in ways that cannot be easily determined by reading the program source code, or in a relative hidden code path that cannot be easily captured.&lt;/p&gt;

&lt;p&gt;That is a good amount of flexibility, but definitely a pricey one. Although, arguably it is also an issue brought by the tool (&lt;code&gt;pp&lt;/code&gt;, &lt;code&gt;perlcc&lt;/code&gt;, &lt;code&gt;perl2exe&lt;/code&gt;, etc.). I guess that is because the dynamic nature is so convenient as long as all the installation are done right. Having a tool that is able to automically complie all dependencies together was not needed that much. It has definidently needed, that is why we have those tools now, but in the last mile of their completion, lies an undecidable problem.&lt;/p&gt;

&lt;p&gt;So we will need to manually add those missing depedencies to &lt;code&gt;pp&lt;/code&gt; command, which is fine only when the list is small. Since we wish to just pack all the declared dependencies together, we don't care that much even if that's going to make the result a little bigger than it has to be. If we can have the same build script that works everywhere, it is as happy as in Christmas. (An pure metaphoric experssion. Pesonally I feel nothing spceial in Dec 25.)&lt;/p&gt;

&lt;p&gt;Anyway...... it turns out to be much easier to decide the dependency at installation time, since that's all well-declared and tools like &lt;code&gt;cpm&lt;/code&gt;, or &lt;code&gt;cpanm&lt;/code&gt; already does this perfectly. If we install dependencies in a self-contained directory, we could just archive the entire directory together with the program we are packing, and that should be good to go.&lt;/p&gt;

&lt;p&gt;Let's say we cd into the source code of &lt;code&gt;foo&lt;/code&gt; and we are trying to compile the program &lt;code&gt;foo&lt;/code&gt; as a binary. The executable is at &lt;code&gt;bin/foo&lt;/code&gt;, while its own moulders such as &lt;code&gt;Foo.pm&lt;/code&gt;, &lt;code&gt;Foo/Bar.pm&lt;/code&gt; are put under the conventional directory &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Given that, this script should produce &lt;code&gt;foo&lt;/code&gt; as a single binary that as if all dependencies are "statically-linked" inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Prepare local/ 
cpanm -L local -q --installdeps .
# or: cpm install

perlversion=$(perl -MConfig -e 'print $Config{version}')
pp -B \
    -I ./local/lib/perl5 \
    -a "./local/lib/perl5/;$perlversion/" \
    -a lib \
    -o foo \
    bin/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alas, this is almost perfect -- except modules in corelist might still be missing. They won't be inside &lt;code&gt;local/&lt;/code&gt; and if they are somehow not discovered by &lt;code&gt;pp&lt;/code&gt; then they'll be missing in the end result. We won't know this until we manually test the result &lt;code&gt;foo&lt;/code&gt; thoroughly. Basically we should always add a bunch of &lt;code&gt;-M&lt;/code&gt; flags in the build script instead of assuming &lt;code&gt;pp&lt;/code&gt; would do the right thing.&lt;/p&gt;

&lt;p&gt;For example, like so, when all of &lt;code&gt;Getopt::Long&lt;/code&gt;, &lt;code&gt;JSON::PP&lt;/code&gt;, and &lt;code&gt;Sys::Hostname&lt;/code&gt; are required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pp -B \
    -M Getopt::Long:: \
    -M JSON::PP:: \
    -M Sys::Hostname:: \
    -I local/lib/perl5 \
    -a "./local/lib/perl5/;$perlversion/" \
    -a lib \
    -o foo \
    bin/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A rather tedious modification as the list of dependent modules my exist in two places in the repo. Surely there is some way to refactor this.&lt;/p&gt;

&lt;p&gt;I've verified the following script &lt;code&gt;build-minicpan.sh&lt;/code&gt; that can download the tarball of &lt;code&gt;CPAN::Mini&lt;/code&gt; and build a working &lt;code&gt;minicpan&lt;/code&gt; out of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
set -e

curl --silent -O https://cpan.metacpan.org/authors/id/R/RJ/RJBS/CPAN-Mini-1.111016.tar.gz

tar -xzf CPAN-Mini-1.111016.tar.gz

cd CPAN-Mini-1.111016

cpanm -n -q -L local --installdeps .

perlversion=$(perl -MConfig -e 'print $Config{version}')

pp -B \
   -M Getopt::Long:: \
   -I ./local/lib/perl5 \
   -a "./local/lib/perl5/;$perlversion/" \
   -a lib \
   -o ../minicpan \
   bin/minicpan

echo "DONE: minicpan"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me this seems to be an area worth exploring... I've been experimenting the automation of this in a side-project: &lt;a href="https://github.com/gugod/pau"&gt;pau&lt;/a&gt;, which is a collection of shell functions that can install app to their own self-contained directory and expose just the program it self. Very similar to what &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; does. &lt;code&gt;pp&lt;/code&gt; support was added not long ago but still there is no good way to figure out all the missing modules and automatically add them as &lt;code&gt;-M&lt;/code&gt; arguments.&lt;/p&gt;

&lt;p&gt;Maybe as a lazy solution, we should just &lt;em&gt;always&lt;/em&gt; produce a heavy-pack that includes the whole core lib directory (usually &lt;code&gt;$INC[-1]&lt;/code&gt;) regardless whether any of them are used.&lt;/p&gt;

&lt;p&gt;Maybe.&lt;/p&gt;




&lt;p&gt;Originally posted at: &lt;a href="https://gugod.org/2021/10/perl-making-single-binary-release-with-pp/"&gt;gugod's blog -- Making single binary release with pp&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/making-single-binary-release-with-pp-5171</id>
    <published>2021-10-21T15:01:08Z</published>
    <updated>2021-10-21T15:01:08Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="compiling"/>
  </entry>
  <entry>
    <title>My Favorite Modules: diagnostics</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10471</id>
    <published>2021-10-21T03:46:34Z</published>
    <updated>2021-10-21T03:49:26Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>One of the things the Perl 5 Porters work hard on is issuing diagnostics that are actually diagnostic. I think they do a pretty good job at this, but sometimes I need a bit more explanation than the typical one-line message.<p>

<p>Now, there is documentation on all of these in <a href="http://perldoc.perl.org/perldiag.html"><code>perldiag</code></a>, but paging through that looking for my message is a pain.</p>

<p>Fortunately, there is a module for that: <a href="http://perldoc.perl.org/diagnostics.html"><code>diagnostics</code></a>. This module causes diagnostics to be expanded into their full explanation as it appears in <code>perldiag</code>.</p>

<p>Typically you would not put a <code>use diagnostics;</code> in your Perl code, though of course you could. Instead, you would load it via a command-line option to <code>perl</code>, or maybe via environment variable <code>PERL5OPT</code>. That is, either</p>

<pre>
$ perl -Mdiagnostics my-flaky-perl.PL
</pre>

<p>or</p>

<pre>
$ env PERL5OPT=-Mdiagnostics perl my-flaky-perl.PL
</pre>

<p>The environment-variable example is a bit contrived, and <code>U**x</code> specific. It is more useful if you do not run Perl directly, and so can not change the command (if any) used to invoke Perl. In this case you would define the environment variable however it is done in your OS, before starting Perl. If your environment already defines this you will need to add <code>'-Mdiagnostics'</code> to the existing value, space delimited, using the quoting rules of your command shell. Note that this only affects Perls run in the same process that defined <code>PERL5OPT</code>, or in a subprocess of that process.</p>

<p>If for some reason you are unable to inject this module into your Perl, but you can capture your messages from <code>stderr</code>, the <code>splain</code> script will expand them after the fact. See the <a href="http://perldoc.perl.org/diagnostics.html"><code>diagnostics</code></a> POD for details.</p>

<p>A couple notes on this module:</p>

<ul>
    <li>This module was introduced in Perl 5.002.</li>
    <li>The documentation describes this module as a pragma, which to me means lexical scope. But playing with it seems to say its scope is global.</li>
    <li>Only the first instance of each diagnostic is expanded.</li>
    <li>To tie this back to the <a href="http://perldoc.perl.org/warnings.html">warnings</a> series, I wrote some Perl to report on what diagnostics are enabled by each warning category. This may involve too much ad-hocery to actually release to CPAN, but the curious can find the code <a href="https://github.com/trwyant/perl-App-Warning-Diagnostics">on GitHub</a>.</li>
</ul>

<p>Previous entries in this series:</p>
<ul>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
</ul>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 135: Middle 3-Digits and Validate SEDOL</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/10/perl-weekly-challenge-135-middle-3-digits-and-validate-sedol.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10470</id>
    <published>2021-10-20T22:40:54Z</published>
    <updated>2021-10-20T22:42:15Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 135 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-135/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on October 24, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Middle 3-digits</h2>

<p><em>You are given an integer.</em></p>

<p><em>Write a script find out the middle 3-digits of the given integer, if possible otherwise throw sensible error.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 1234567
Output: 345
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = -123
Output: 123
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 1
Output: too short
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: $n = 10
Output: even number of digits
</code></pre>

<h3>Middle 3-Digits in Raku</h3>

<p>This is pretty simple. We write a <code>mid-three</code> subroutine that returns an error message if the input number has an even number of digits or if it is too small (less than 3 digits). Once this is done, the subroutine finds the mid-point of the sting and returns the substring starting one digit earlier and ending one digit later.</p>

<pre><code>sub mid-three (Int $in is copy) {
    $in = abs($in);
    my $length = $in.chars;
    return "Even number of digits" if $length %% 2;
    return "Too short" if $length &lt; 3;
    my $mid-point = ($length - 1) /2;
    return substr($in, $mid-point - 1, 3);
}
for &lt;1234567 -123 1 10 -54321&gt; -&gt; $n {
    say "$n -&gt; ", mid-three $n;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./mid-three.raku
1234567 -&gt; 345
-123 -&gt; 123
1 -&gt; Too short
10 -&gt; Even number of digits
-54321 -&gt; 432
</code></pre>

<h3>Middle 3-Digits in Perl</h3>

<p>Again, we have a <code>mid_three</code> subroutine that returns an error message if the input number has an even number of digits or if it is too small (less than 3 digits). Once this is done, the subroutine finds the mid-point of the sting and returns the substring starting one digit earlier and ending one digit later.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub mid_three {
    my $in = abs $_[0];
    my $length = length $in;
    return "Even number of digits" unless $length % 2;
    return "Too short" if $length &lt; 3;
    my $mid_point = ($length - 1) /2;
    return substr($in, $mid_point - 1, 3);
}
for my $n (qw&lt;1234567 -123 1 10 -54321&gt;) {
    say "$n -&gt; ", mid_three $n;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl mid-three.pl
1234567 -&gt; 345
-123 -&gt; 123
1 -&gt; Too short
10 -&gt; Even number of digits
-54321 -&gt; 432
</code></pre>

<h2>Task 2: Validate SEDOL</h2>

<p><em>You are given 7-characters alphanumeric SEDOL.</em></p>

<p><em>Write a script to validate the given SEDOL. Print 1 if it is a valid SEDOL otherwise 0.</em></p>

<p><em>For more information about SEDOL, please checkout the <a href="https://en.wikipedia.org/wiki/SEDOL">Wikipedia</a> page.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $SEDOL = '2936921'
Output: 1
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $SEDOL = '1234567'
Output: 0
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $SEDOL = 'B0YBKL9'
Output: 1
</code></pre>

<h3>Validate SEDOL in Raku</h3>

<p>The <code>sedol</code> subroutine returns 0 if the input string contains a vowel or if it not made of 6 alphanumerical characters followed by 1 digit. After these checks, it splits the input string into a sequence of 6 characters and 1 digit (presumably the check digit). It then populates a <code>%values</code> hash with the numeric values for the 10 digits and 26 letters. It then computes the weighted sum of the input sequence of 6 characters and then computes the checksum. If the checksum thus calculated is equal to the checksum found in the input string (the last digit), then we have a valid Sedol and the subroutine can return 1. Otherwise the subroutine return 0.</p>

<pre><code>sub sedol( Str $in ) {
    return 0 if $in  ~~ /&lt;[AEIOU]&gt;/;  # Vowels not allowed
    return 0 unless $in ~~ /^ &lt;[0..9B..Z]&gt;**6 &lt;[0..9]&gt; $/; # 6 alphanumericals + 1 digit
    my ($sedol, $check) = substr($in, 0, 6), substr($in, 6, 1);
    my %values; 
    my $count = 0;
    for ( 0..9, 'A'..'Z').flat -&gt; $val {
        %values{$val} = $count++;
    }
    my @weights = 1, 3, 1, 7, 3, 9;
    my $sum = [+] @weights Z* map {%values{$_}}, $sedol.comb;
    my $check_digit = (10 - $sum % 10) % 10;
    return 1 if $check_digit == $check;
    0
}
for &lt;456765 65AR345 2936921 1234567 B0YBKL9&gt; -&gt; $s {
    say "$s: ", sedol($s);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./sedol.raku
456765: 0
65AR345: 0
2936921: 1
1234567: 0
B0YBKL9: 1
</code></pre>

<h3>Validate SEDOL in Perl</h3>

<p>This is essentially the same algorithm as in the Raku solution above: the <code>sedol</code> subroutine returns 0 if the input string contains a vowel or if it not made of 6 alphanumerical characters followed by 1 digit. After these checks, it splits the input string into a sequence of 6 characters and 1 digit (presumably the check digit). It then populates a <code>%values</code> hash with the numeric values for the 10 digits and 26 letters. It then computes the weighted sum of the input sequence of 6 characters and then computes the checksum. If the checksum thus calculated is equal to the checksum found in the input string (the last digit), then we have a valid Sedol and the subroutine can return 1. Otherwise the subroutine return 0.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub sedol {
    my $in = shift;
    return 0 if $in  =~ /[AEIOU]/i;  # Vowels not allowed
    return 0 unless $in =~ /^[A-Z0-9]{6}[0-9]$/; # 6 alphanumericals + 1 digit
    my ($sedol, $check) = (substr($in, 0, 6), substr($in, 6, 1));
    my %values; 
    my $count = 0;
    for my $val ( 0..9, 'A'..'Z') {
        $values{$val} = $count++;
    }
    my @weights = (1, 3, 1, 7, 3, 9);
    my $sum = 0;
    my @chars = split //, $sedol;
    for my $i (0..5) {
        $sum += $values{$chars[$i]} * $weights[$i];
    }
    my $check_digit = (10 - $sum % 10) % 10;
    return 1 if $check_digit == $check;
    0
}
for my $s (qw&lt;456765 65AR345 2936921 1234567 B0YBKL9&gt;) {
    say "$s: ", sedol($s);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./sedol.pl
456765: 0
65AR345: 0
2936921: 1
1234567: 0
B0YBKL9: 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on October 31, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The reports of Perl’s death have been greatly exaggerated</title>
    <link rel="alternate" href="https://dev.to/mjgardner/the-reports-of-perls-death-have-been-greatly-exaggerated-2p61" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Look, I get it. You don’t like the Perl programming language or have otherwise disregarded it as “dead.” (Or perhaps you haven’t, in which case please check out my <a href="https://phoenixtrap.com/tag/perl/">other blog posts</a>!) It has <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/">weird noisy syntax</a>, mixing <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#regexps">regular expressions</a>, <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#sigils">sigils</a> on variable names, various braces and brackets for <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#datastructures">data structures</a>, and a menagerie of cryptic <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#vars">special variables</a>. It’s old: <a href="https://perldoc.perl.org/perlhist#THE-RECORDS">34 years in December</a>, with a history of (sometimes amateur) developers that have used and abused that syntax to ship code of questionable quality. Maybe you grudgingly accept its utility but think it should <a href="https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/">die gracefully</a>, maintained only to run legacy applications.</p>

<p>But you know what? Perl’s still going. It’s had a <a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/">steady cadence of yearly releases</a> for the past decade, introducing new <a href="https://perldoc.perl.org/feature">features</a> and <a href="https://phoenixtrap.com/2021/09/21/everyones-a-perl-critic/">fencing in bad behavior</a> while maintaining an <a href="https://perldoc.perl.org/perlpolicy#BACKWARD-COMPATIBILITY-AND-DEPRECATION">admirable level of backward compatibility</a>. Yes, there was a too-long adventure developing what started as Perl 6, but that language now has <a href="https://raku.org/">its own identity as Raku</a> and even has facilities for <a href="https://phoenixtrap.com/2021/08/17/perl-raku-best-frenemies/">mixing Perl with its native code</a> or vice versa.</p>

<p>And then there’s <a href="https://www.cpan.org/">CPAN</a>, the Comprehensive Perl Archive Network: a <a href="https://metacpan.org/recent">continually-updated</a> collection of over 200,000 open-source modules written by over 14,000 authors, the <a href="https://metacpan.org/pod/Task::Kensho">best of which</a> are <a href="https://qa.perl.org/cpan-testers/">well-tested</a> and ‑documented (applying <a href="https://cpants.cpanauthors.org/">peer pressure</a> to those that fall short), presented through a <a href="https://metacpan.org/">search engine and front-end</a> built by <a href="https://metacpan.org/about/contributors">scores of contributors</a>. Through CPAN you can find distributions for things like:</p>

<ul>
<li>web frameworks (e.g., <a href="http://www.catalystframework.org/">Catalyst</a>, <a href="https://www.perldancer.org/">Dancer</a>, <a href="https://mojolicious.org/">Mojolicious</a>)</li>
<li>object-relational mappers (e.g., <a href="https://metacpan.org/pod/DBIx::Class">DBIx::Class</a>, <a href="https://metacpan.org/pod/Rose::DB::Object">Rose::DB::Object</a>)</li>
<li>advanced object systems (e.g., <a href="https://metacpan.org/pod/Moose">Moose</a>, <a href="https://metacpan.org/pod/Moo">Moo</a>)</li>
<li>asynchronous libraries (e.g., <a href="https://metacpan.org/pod/IO::Async">IO::Async</a> and the aforementioned Mojolicious’ <a href="https://docs.mojolicious.org/Mojo/IOLoop">Mojo::IOLoop</a>)</li>
</ul>

<p>All of this is available through a mature installation toolchain that doesn’t break from month to month.</p>

<p>Finally and most importantly, there’s the global Perl community. The COVID-19 pandemic has put a damper on the hundreds of global <a href="https://www.pm.org/">Perl Mongers</a> groups’ meetups, but that hasn’t stopped the yearly <a href="https://perlconference.us/">Perl and Raku Conference</a> from meeting virtually. (In the past there have also been yearly <a href="http://www.yapceurope.org/events/conferences.html">European</a> and <a href="http://yapcasia.org/">Asian</a> conferences, occasional forays into South America and <a href="https://yapcrussia.org/">Russia</a>, as well as hackathons and workshops worldwide.) There are <a href="http://www.irchelp.org/">IRC</a> <a href="http://www.irc.perl.org/">servers</a> and <a href="https://web.libera.chat/#perl">channels</a> for chat, <a href="https://lists.perl.org/">mailing lists</a> galore, <a href="https://perl.theplanetarium.org/">blogs</a> (yes, apart from this one), and a quirky <a href="https://www.perlmonks.com/">social network</a> that predates Facebook and Twitter.</p>

<p>So no, Perl isn’t dead or even dying, but if you don’t like it and favor something newer, that’s OK! Technologies can coexist on their own merits and advocates of one don’t have to beat down their contemporaries to be successful. Perl happens to be battle-tested (to borrow a term from my friend <a href="https://ovid.github.io/">Curtis “Ovid” Poe</a>), it runs large parts of the Web (speaking from direct and ongoing experience in the hosting business here), and it’s still evolving to meet the needs of its users.</p>




<p><em>Cover image by <a href="https://cogdogblog.com/">Alan Levine</a>, licensed <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></em></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/the-reports-of-perls-death-have-been-greatly-exaggerated-2p61</id>
    <published>2021-10-19T14:00:00Z</published>
    <updated>2021-10-19T14:00:00Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="webdev"/>
  </entry>
  <entry>
    <title>I try match syntax using Syntax::Keyword::Match</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/10/i-try-match-syntax-using-syntaxkeywordmatch.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10460</id>
    <published>2021-10-19T06:59:55Z</published>
    <updated>2021-10-19T07:00:11Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p><br />
<a href="https://metacpan.org/pod/Syntax::Keyword::Match">Syntax::Keyword::Match</a> is a module to enable match syntax in the current Perl by <a href="http://leonerds-code.blogspot.com/">Paul Evans</a> who is one of the current Perl Steering Councils. See <a href="https://perldoc.perl.org/perlgov">perlgov</a> about the Perl Steering Council.</p>

<h3>Syntax::Keyword::Match Examples</h3>

<p>Syntax::Keyword::Match Examples</p>

<h4>Number matching</h4>

<p>Number matching. Match syntax is similar as a switch syntax of C language.</p>

<pre>
use v5.14;
use warnings;

<p>use Syntax::Keyword::Match;<br />
 <br />
my $n = 4;<br />
 <br />
match($n : ==) {<br />
   case(1) { say "It's one" }<br />
   case(2) { say "It's two" }<br />
   case(3) { say "It's three" }<br />
   case(4),<br />
   case(5) {<br />
    say "It's four or five"<br />
   }<br />
   default { say "It's something else" }<br />
}<br />
</pre></p>

<p>Output:</p>

<pre>
It's four or five
</pre>

<p>Compared to current Perl, it is shorter and can be written without duplication.</p>

<pre>
use v5.14;
use warnings;

<p>my $n = 4;</p>

<p>if ($n == 1) {<br />
  say "It's one";<br />
}<br />
elsif ($n == 2) {<br />
  say "It's two";<br />
}<br />
elsif ($n == 3) {<br />
  say "It's three";<br />
}<br />
elsif ($n == 4 || $n == 5) {<br />
  say "It's four or five";<br />
}<br />
else {<br />
  say "It's something else";<br />
}<br />
</pre></p>

<p>For integers, performance optimization may also be possible using a jump table or a binary tree.</p>

<h4>String matching</h4>

<p>String matching. Match syntax has also string matching.</p>

<pre>
use v5.14;
use warnings;

<p>use Syntax::Keyword::Match;<br />
 <br />
my $n = 'a4';<br />
 <br />
match($n : eq) {<br />
   case('a1') { say "It's one" }<br />
   case('a2') { say "It's two" }<br />
   case('a3') { say "It's three" }<br />
   case('a4'),<br />
   case('a5') {<br />
    say "It's four or five"<br />
   }<br />
   default { say "It's something else" }<br />
}<br />
</pre></p>

<p>Output:</p>

<pre>
It's four or five
</pre>

<h4>Regex matching</h4>

<p>Regex matching. Match syntax has also regex matching.</p>

<pre>
use v5.14;
use warnings;

<p>use Syntax::Keyword::Match;<br />
 <br />
my $n = 'a4bbbb';<br />
 <br />
match($n : =~) {<br />
   case(/a1/) { say "It's one" }<br />
   case(/a2/) { say "It's two" }<br />
   case(/a3/) { say "It's three" }<br />
   case(/a4/),<br />
   case(/a5/) {<br />
    say "It's four or five"<br />
   }<br />
   default { say "It's something else" }<br />
}<br />
</pre></p>

<p>Output:</p>

<pre>
It's four or five
</pre>

<h3>What I feel using Syntax::Keyword::Match</h3>

<p>Personally, I feel number, string, regex matching is enough completed at production level(although Paul said it isn't enough yet).</p>

<p>I'm looking forward to match syntax.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>#534 - Are you CPAN contributor?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/534.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How much have you contributed during the Hacktoberfest event yet?</p>
<p>CPAN needs a helping hand, not just during Hacktoberfest. I am raising the subject as Dave Cross recently blogged about his experience with one of the distributions hosted on CPAN in this <a href="https://dev.to/davorg/failing-to-get-product-information-from-amazon-with-perl-5a3g">blog post</a>. It also reminds me of my early days when I created Perl a library around some of Google's public APIs. Two of them, <a href="https://metacpan.org/dist/WWW-Google-CustomSearch">WWW::Google::CustomSearch</a> and <a href="https://metacpan.org/dist/WWW-Google-Places">WWW::Google::Places</a> were used by many people, as I have had many queries related to them in the past. It is very common for an API provider to discontinue the service or move in a new direction any time without notice. It becomes an even bigger issue if the author of the CPAN distribution disappears from the scene. So the question is, how best to deal with such cases? Thanks to the PAUSE admins, there is a documented process to adopt a distribution and take it forward. You should get in touch with one of the PAUSE admins if you want to adopt a distribution and contribute.</p>
<p>For many years, <a href="https://metacpan.org/recent">MetaCPAN</a> has been my playground. I used to spend 2-4 hours every day looking for low-hanging issues in the recently uploaded distributions. I even wrote a two-part blog post talking about how to become a CPAN contributor. <a href="https://www.perl.com/article/how-to-become-cpan-contributor">Part 1</a> and <a href="https://www.perl.com/article/how-to-become-cpan-contributor-part-2">Part 2</a>. I also gave a talk at The Perl Conference in Glasgow 2018 on the same topic. You can watch the talk on <a href="https://www.youtube.com/watch?v=QYN1nijo9VY">YouTube</a>, if you fancy.</p>
<p>I remember at one point, I was keen to contribute to MetaCPAN and be part of the Toolchain Gang. I couldn't get the local dev setup of MetaCPAN and was looking for help. I was told that someone from the gang is working on dockerisation of MetaCPAN to make it easier for anyone to contribute. I missed the opportunity to meet the gang when it was held in Marlow, not far from where I live (London) in 2019. I don't know if anyone is still working on that front.</p>
<p>I hardly contribute to CPAN these days but I still like to call myself CPAN contributor. However I do release a patch every now and then to some of my personal and adopted distributions. Being a member of the <a href="https://pullrequest.club/hello">Pull Request Club</a>, I do contribute to at least one distribution every month. I have never missed a month since I joined the club in Jan 2019.</p>
<p>If anyone is keen to become a CPAN contributor then please get in touch with me. We need fresh energy to make CPAN the central place to look for the best solutions.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/534.html</id>
    <published>2021-10-18T10:00:00Z</published>
    <updated>2021-10-18T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Couple of Brute Force Computations</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17#pwc134" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 5 Pandigital Numbers in base 10.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to generate first 5 Pandigital Numbers in base 10.
##
use boolean;

sub first_n_pandigitals {
    my ($n)         = @_;
    my $found       = false;
    my $pandigitals = [];
    my $x           = 1_000_000_000;
    do {
        my $test = $x;
        push @{$pandigitals}, $x
          if ( $test =~ tr/0//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/1//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/2//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/3//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/4//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/5//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/6//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/7//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/8//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/9//d ) &gt; 0;
        $found = ( @{$pandigitals} == $n );
        $x++;
    } while ( !$found );
    return $pandigitals;
}

sub first_5_pandigitals {
    return first_n_pandigitals(5);
}
MAIN: {
    my $pandigitals = first_5_pandigitals;
    for my $x ( @{$pandigitals} ) {
        print "$x\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1023456789
1023456798
1023456879
1023456897
1023456978
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;From the definition we know that we will need at least 10 digits and, intuitively, the
first five pandigital numbers will start with &lt;code&gt;1&lt;/code&gt;. So then, we start with &lt;code&gt;1_000_000_000&lt;/code&gt;
and iterate upwards testing each candidate until we find the first five. The test used
here is to determine if &lt;code&gt;tr&lt;/code&gt; finds all the required digits.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 2 positive numbers, $m and $n. Write a script to generate multiplication 
table and display count of distinct terms.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given 2 positive numbers, $m and $n.
# Write a script to generate multiplcation table and display count of distinct terms.
##
sub compute_print {
    my ( $m, $n ) = @_;
    my $distinct = {};
    print " x | " . join( " ", ( 1 .. $n ) ) . "\n";
    print "---+-" . "-" x ( $n * 2 - 1 ) . "\n";
    for my $i ( 1 .. $m ) {
        print " $i | " . join( " ", map { $i * $_ } ( 1 .. $n ) ) . "\n";
        for my $j ( 1 .. $n ) {
            $distinct-&gt;{ $i * $j } = undef;
        }
    }
    return $distinct;
}
MAIN: {
    my $distinct = compute_print( 3, 3 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
    print "\n\n";
    $distinct = compute_print( 3, 5 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 x | 1 2 3
---+------
 1 | 1 2 3
 2 | 2 4 6
 3 | 3 6 9
Distinct Terms: 1, 2, 3, 4, 6, 9
Count: 6


 x | 1 2 3 4 5
---+----------
 1 | 1 2 3 4 5
 2 | 2 4 6 8 10
 3 | 3 6 9 12 15
Distinct Terms: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15
Count: 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is a perfectly Perl shaped problem. The computations can be handled in a 
straightforward way, especially with &lt;code&gt;map&lt;/code&gt;. Getting rid of duplicates is done using
the idiomatic method with hash keys. Finally, formatting the output cleanly is done 
without much undo stress. Compare what we do here to format the table with what was
necessary to represent the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17/prolog"&gt;same table in Prolog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 134&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PandigitalNumber.html"&gt;Pandigital Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc134</id>
    <published>2021-10-17T13:03:00-04:00</published>
    <updated>2021-10-17T13:03:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Release 1.57 of perl-workflow, a bug fix release</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-157-of-perl-workflow-a-bug-fix-release-4d7m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Due to extreme workload at my job, we have not made as much progress as we would like. </p>

<p>My tireless collaborator Erik Huelsmann have fixed a few bugs and they have made into release 1.57 released today.</p>

<p>We hope to pick up on the forthcoming 2.0 release as soon as things settle at a somewhat normal level again.</p>

<ul>
<li>The <a href="https://github.com/jonasbn/perl-workflow/milestone/14">2.0 milestone is documented here</a>, as in a list of PRs and issues</li>
<li>And the <a href="https://github.com/jonasbn/perl-workflow/projects/1">2.0 projected road map is documented here</a> as a set of notes and issues.</li>
</ul>

<p>Here follows the change log of release 1.57.</p>

<h2>
  <a href="#change-log">
  </a>
  Change Log
</h2>

<p>The original is <a href="https://github.com/jonasbn/perl-workflow/releases/tag/1.57">available on GitHub</a></p>

<h2>
  <a href="#157-20211017-bug-fix-release-update-recommended">
  </a>
  1.57 2021-10-17 Bug fix release, update recommended
</h2>

<ul>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/170">#170</a> by <a class="mentioned-user" href="https://dev.to/ehuelsmann">@ehuelsmann</a>
 addresses an issue where Workflow tries to log during the execution of <code>use</code> statements, at which time it's highly unlikely that the logger has already been initialized, resulting in warnings being printed on the console</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/171">#171</a> by <a class="mentioned-user" href="https://dev.to/ehuelsmann">@ehuelsmann</a>
 adds initialization of context parameters passed at instantiation; currently, parameters need to be added explicitly and individually after instantiation</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/173">#173</a> by <a class="mentioned-user" href="https://dev.to/ehuelsmann">@ehuelsmann</a>
 addresses issue <a href="https://github.com/jonasbn/perl-workflow/pull/172">#172</a>, fixing failure to automatically run actions from the <code>INITIAL</code> state</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-157-of-perl-workflow-a-bug-fix-release-4d7m</id>
    <published>2021-10-17T14:11:38Z</published>
    <updated>2021-10-17T14:11:38Z</updated>
    <category term="perl"/>
    <category term="opensource"/>
    <category term="release"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-754312460882398230</id>
    <published>2021-10-17T09:56:00.000+02:00</published>
    <updated>2021-10-17T09:56:17.813+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxiii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.050001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.050001&lt;/strong&gt; on 2021-10-12&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049009 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ASB/CHI-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CHI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Unified cache handling interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2021-10-13&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 6 years, 4 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.27&lt;/strong&gt; on 2021-10-14&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.26 was 6 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.50&lt;/strong&gt; on 2021-10-15&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.49 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16&lt;/strong&gt; on 2021-10-13&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.15 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9725' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9725&lt;/strong&gt; on 2021-10-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9724 was 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/local-lib-2.000027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;local::lib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - create and use a local lib/ for perl modules with PERL5LIB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000027&lt;/strong&gt; on 2021-10-14&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 2.000024 was 4 years, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.55&lt;/strong&gt; on 2021-10-11&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.54 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.027&lt;/strong&gt; on 2021-10-11&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.025 was 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.26&lt;/strong&gt; on 2021-10-12&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 0.25 was 4 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/754312460882398230/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/754312460882398230"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/754312460882398230"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiii-10-great-cpan-modules-released.html" title="(ccclxiii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-227326272157609067</id>
    <published>2021-10-17T09:52:00.002+02:00</published>
    <updated>2021-10-17T09:52:56.167+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxvii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 27&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/10/17 07:52:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Subprocess" target="_blank"&gt;AnyEvent::Subprocess&lt;/a&gt; - flexible, OO, asynchronous process spawning and management&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::DSP::Fir" target="_blank"&gt;PDL::DSP::Fir&lt;/a&gt; - Finite impulse response filter kernels.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Server::Inet" target="_blank"&gt;POE::Component::Server::Inet&lt;/a&gt; - a super-server daemon implementation in POE&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::WWW::WebKit2" target="_blank"&gt;Test::WWW::WebKit2&lt;/a&gt; - Perl extension for using an embedding WebKit2 engine for tests&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork" target="_blank"&gt;AnyEvent::Fork&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork::Pool" target="_blank"&gt;AnyEvent::Fork::Pool&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork::RPC" target="_blank"&gt;AnyEvent::Fork::RPC&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::MP" target="_blank"&gt;AnyEvent::MP&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=259)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie::variables" target="_blank"&gt;autodie::variables&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CBOR::XS" target="_blank"&gt;CBOR::XS&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::IniFiles" target="_blank"&gt;Config::IniFiles&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::MintingProfile::FFI" target="_blank"&gt;Dist::Zilla::MintingProfile::FFI&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::WebKit2" target="_blank"&gt;Gtk3::WebKit2&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Redis" target="_blank"&gt;Mojo::Redis&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Model" target="_blank"&gt;Mojolicious::Plugin::Model&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::LogErrors" target="_blank"&gt;Plack::Middleware::LogErrors&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::WebKit2" target="_blank"&gt;WWW::WebKit2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/227326272157609067/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/227326272157609067"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/227326272157609067"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxvii-metacpan-weekly-report.html" title="(cdlxxxvii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6617058933828502709</id>
    <published>2021-10-17T09:51:00.000+02:00</published>
    <updated>2021-10-17T09:51:48.412+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-10-17 06:44:32 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69542971" target="_blank"&gt;Perl optional capture groups not working?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69516720" target="_blank"&gt;How do I format qw lists using perltidy?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69569478" target="_blank"&gt;Perl one-liner regex doesn't substitute correctly - returns error&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69517170" target="_blank"&gt;Automate values from text files to each sheet of excel file&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69550315" target="_blank"&gt;Perl LWP::UserAgent parse response JSON&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69559891" target="_blank"&gt;perl regex to remove initial all-whitespace lines from a string: why does it work?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69532488" target="_blank"&gt;Why doesn't my XPath expression find a newly added node in an XML document?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69559859" target="_blank"&gt;Perl eval scope&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69542093" target="_blank"&gt;In Mojolicious how do I have a route override a static path?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69540721" target="_blank"&gt;Is the use of "||" in a substring search prohibited?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6617058933828502709/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/dviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6617058933828502709"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6617058933828502709"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/dviii-stackoverflow-perl-report.html" title="(dviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 134: Pandigital Numbers and Distinct Term Count</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/10/perl-weekly-challenge-134-pandigital-numbers-and-distinct-term-count.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10459</id>
    <published>2021-10-15T23:56:32Z</published>
    <updated>2021-10-15T23:58:41Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers for Week 134 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-134/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on October 17, 2021 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Pandigital Numbers</h2>

<ul>
<li>Write a script to generate first 5 Pandigital Numbers in base 10.*</li>
</ul>

<p><em>As per the <a href="Wikipedia">https://en.wikipedia.org/wiki/Pandigital_number</a>, it says:</em></p>

<pre><code>A pandigital number is an integer that in a given base has among 
its significant digits each digit used in the base at least once.
</code></pre>

<p>In base 10, a pandigital number ought to have 10 digits. The first (smallest) pandigital numbers will start with the smallest digits upfront, except that the zero cannot be the first first digit, as it would disappear as non significant. So, to get the first pandigital number we need to start with 1, continue with 0 and then proceed the other digits in increasing order, which leads to 1023456789. The next pandigital number will have its two last digits swapped:  1023456798.</p>

<p>Since we need to find the first five pandigital numbers, they will all start with the sequence 1023456, with the three last digits being the permutations of 7, 8, and 9 in the proper increasing order. There are 6 permutations of three distinct digits, so that will be enough to find the first 5 pandigital numbers.</p>

<h3>Pandigital Numbers in Raku</h3>

<p>Based on the explanations above, we can hard-code the first seven digits as <code>"1023456"</code> and compute the permutations of the last 3 digits:</p>

<pre><code>use v6;

my $start = "1023456";
my @ends = &lt;7 8 9&gt;.permutations[0..4]&gt;&gt;.join("");
say $start ~ $_ for @ends;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>raku ./pandigital.raku
1023456789
1023456798
1023456879
1023456897
1023456978
</code></pre>

<p>This script is so simple that we can easily turn it to a Raku one-liner:</p>

<pre><code>$ raku -e 'say "1023456" ~ $_ for (7..9).permutations[0..4]&gt;&gt;.join'
1023456789
1023456798
1023456879
1023456897
1023456978
</code></pre>

<h3>Pandigital Numbers in Perl</h3>

<p>Based on the explanations in the task description section above, we can hard code the first seven digits as <code>"1023456"</code> and compute the permutations of the last 3 digits. For this, since we don&#8217;t like using external packages for coding challenges, we implement our own recursive <code>permute</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @permutations;

sub permute {
    my ($str, @vals) = @_;
    if (scalar @vals == 0) {
        push @permutations, $str;
        return;
    }
    permute("$str" . $vals[$_], @vals[0..$_-1], @vals[$_+1..$#vals]) for 0..$#vals;
}
permute "", 7, 8, 9;
say "1023456" . $_ for @permutations[0..4];
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./pandigital.pl
1023456789
1023456798
1023456879
1023456897
1023456978
</code></pre>

<h2>Task 2: Distinct Terms Count</h2>

<p><em>You are given 2 positive numbers, <code>$m</code> and <code>$n</code>.</em></p>

<p><em>Write a script to generate multiplication table and display count of distinct terms.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $m = 3, $n = 3
Output:

   x | 1 2 3
   --+------
   1 | 1 2 3
   2 | 2 4 6
   3 | 3 6 9

Distinct Terms: 1, 2, 3, 4, 6, 9
Count: 6
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $m = 3, $n = 5
Output:

   x | 1  2  3  4  5
   --+--------------
   1 | 1  2  3  4  5
   2 | 2  4  6  8 10
   3 | 3  6  9 12 15

Distinct Terms: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15
Count: 11
</code></pre>

<h3>Distinct Terms Count in Raku</h3>

<p>There is nothing complex about this task. We need to loop over all values between 1 and <code>$m</code> and all values between 1 and <code>$n</code>, perform the multiplications and properly format the output. In addition, we use a <a href="https://docs.raku.org/type/SetHash">SetHash</a> to store the distinct computed terms, display them and count them.</p>

<pre><code>use v6;

sub multiplication-table (Int $m, Int $n) {
    my SetHash $distinct;
    say "x |", join " ", map {.fmt("%3d")}, 1..$n;
    for 1..$m -&gt; $i {
        my @res = map { $i * $_ }, 1..$n;
        $distinct{$_} = True for @res;
        say "$i |", join " ", map {.fmt("%3d")}, @res;
    }
    say "Distinct terms: ", $distinct.keys.sort.join(" ");
    say "Count: ", $distinct.keys.elems;
}
multiplication-table(7, 5);
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./distinct-terms.raku
x |  1   2   3   4   5
1 |  1   2   3   4   5
2 |  2   4   6   8  10
3 |  3   6   9  12  15
4 |  4   8  12  16  20
5 |  5  10  15  20  25
6 |  6  12  18  24  30
7 |  7  14  21  28  35
Distinct terms: 1 2 3 4 5 6 7 8 9 10 12 14 15 16 18 20 21 24 25 28 30 35
Count: 22
</code></pre>

<h3>Distinct Terms Count in Perl</h3>

<p>This is a port to Perl of the Raku program above. In Perl, we use a hash to store the distinct terms.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

sub multiplication_table {
    my ($m, $n) = @_;
    my %distinct;
    say "x |", join " ", map {sprintf "%3d", $_} 1..$n;
    for my $i (1..$m) {
        my @res = map $i * $_, 1..$n;
        $distinct{$_} = 1 for @res;
        say "$i |", join " ", map {sprintf "%3d", $_} @res;
    }
    say "Distinct terms: ", join " ", sort keys %distinct;
    say "Count: ", scalar keys %distinct;
}
multiplication_table(7, 5);
</code></pre>

<p>Output:</p>

<pre><code>$ perl ./distinct-terms.pl
x |  1   2   3   4   5
1 |  1   2   3   4   5
2 |  2   4   6   8  10
3 |  3   6   9  12  15
4 |  4   8  12  16  20
5 |  5  10  15  20  25
6 |  6  12  18  24  30
7 |  7  14  21  28  35
Distinct terms: 1 10 12 14 15 16 18 2 20 21 24 25 28 3 30 35 4 5 6 7 8 9
Count: 22
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on October 24, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#533 - Consulting work</title>
    <link rel="alternate" href="https://perlweekly.com/archive/533.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>I just had a meeting with a company in the UK that were looking for some consulting in Perl. After our conversation I felt that what they are interested in is not really where my expertise is, so I referred them to two other people who have a lot more experience in those areas. However I realized I don't know who is providing consulting or development service these days. So let me know. Who knows next time I might be able to refer the clients to you.</p>
<p>On the other hand I just found out that my client, where I do some refactoring on a web-application with some machine-learning backend (written in Python). is likely to move the project to their parent company. This probably means I'll be free for other projects to introduce test automation, CI, and refactoring code.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/533.html</id>
    <published>2021-10-11T10:00:00Z</published>
    <updated>2021-10-11T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Raku CI Bot Grant Report for September 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2021-09-raku-ci-bot-grant-report"/>
  <id>tag:news.perlfoundation.org,2021-10-11:/post/2021-09-raku-ci-bot-grant-report</id>
  <published>2021-10-11T03:36:20</published>
  <updated>2021-10-11T03:36:20</updated>
  <summary>
  <![CDATA[
     Regarding his Raku CI bot grant, Patrick Böker writes: In September I: got the OBS interfacing component working, and got the GitHub interfacing component working. I hoped to manage to put a working system together this weekend. That didn't quite work out, but there is not much missing. So I'm hopeful to do so in the coming days. 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding his Raku CI bot grant, Patrick Böker writes:</p>

<hr />

<p>In September I:</p>

<ul>
<li>got the OBS interfacing component working, and</li>
<li>got the GitHub interfacing component working.</li>
</ul>

<p>I hoped to manage to put a working system together this weekend. (Currently 
only integrating GitHub and OBS, so no separate Website and no interactive 
features yet.) That didn't quite work out, but there is not much missing. So 
I'm hopeful to do so in the coming days.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-18902481429639061</id>
    <published>2021-10-10T00:41:00.000+02:00</published>
    <updated>2021-10-10T00:41:26.106+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxii) 7 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049009&lt;/strong&gt; on 2021-10-06&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049005 was 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.49&lt;/strong&gt; on 2021-10-02&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.49 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15&lt;/strong&gt; on 2021-10-08&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.12 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.02&lt;/strong&gt; on 2021-10-06&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 5.00 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.24&lt;/strong&gt; on 2021-10-05&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.54&lt;/strong&gt; on 2021-10-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.53 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2021-10-08&lt;/li&gt;  &lt;li&gt;Votes: 157&lt;/li&gt;  &lt;li&gt;Previous version: 1.59 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/18902481429639061/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxii-7-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18902481429639061"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18902481429639061"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxii-7-great-cpan-modules-released.html" title="(ccclxii) 7 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Raku Dispatch and Compiler Improvements: Final Grant Report Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-raku-dispatch-and-compiler-improvements-2"/>
  <id>tag:news.perlfoundation.org,2021-10-07:/post/jonathan-raku-dispatch-and-compiler-improvements-2</id>
  <published>2021-10-07T01:47:29</published>
  <updated>2021-10-07T01:47:29</updated>
  <summary>
  <![CDATA[
     Jonathan completed the work on his grant. The changes were merged into Raku and will be productive in the next Raku release.
We tank the sponsors for supporting this grant, Jonathan for his work; and also the other volunteers who helped with various tasks so this big change could be merged.
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan completed the work on his grant. The changes were merged into Raku and will be productive in the next Raku release.
We thank the sponsors for supporting this grant, Jonathan for his work; and also the other volunteers who helped with various tasks so this big change could be merged.</p>

<hr />

<h1>Raku Dispatch and Compiler Improvements Grant Update</h1>

<p>During September, I completed the remaining hours on <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">my current grant</a>.
The key aim of the grant - to bring my work on a new generalized dispatch mechanism to the point where it
could be merged and delivered to Raku users - has been achieved, the merge taking place on 29th September.
I wrote a <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">blog post</a>
that provides some data on the improvements, as well as identifying future work that can build upon what
has been achieved thus far.</p>

<p>During September, working under the grant, I:</p>

<ul>
<li>Implemented specialization and inlining of dispatches that store resume initialization state, to allow
the dispatches to be resumed (for example, if <code>callsame</code> is used). This was a critical part of getting
back the level of inlining for method calls and multi dispatches that existed prior to this work, which
is a critical factor in Raku performance.</li>
<li>Implemented caller-side removal of <code>Scalar</code> containers, which in turn avoids various duplicate guards,
leading to much tighter code being produced after specialization and JIT compilation in many common
situations.</li>
<li>Fixed <code>Junction</code> multi-dispatch failover for the case where the <code>Junction</code> was in a named argument,
along the way tweaking the semantics to be more consistent with those of positional arguments (there
were some unintended discrepancies in the previous implementation).</li>
<li>Changed dispatch program compilation to not emit type guards when the types were already proven during
optimization, rather than adding them and relying on them to be optimized out later.</li>
<li>Reinstated all known missing optimizations from prior to the new dispatch work, and added JIT support
for various new operations introduced during the work.</li>
<li>Did various modifications to improve startup time, which has regressed. The new dispatch model has
many advantages, however does carry a higher warmup cost.</li>
<li>Fixed the profiler to work again in programs that use continuations, after changes to the continuation
representation as part of callstack changes.</li>
<li>Did numerous smaller fixes for bugs identified by <code>blin</code> (which runs the tests of all modules in the
ecosystem). In some cases where the modules relied on internals or unspecified behavior, I sent a PR
to the module instead.</li>
</ul>

<p>The time worked during September was 55 hours and 18 minutes, which was the remaining grant time
available.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Immediate writing to file - flushing in Perl without buffering</title>
  <summary type="html"><![CDATA[<p>
When we say we read from a file or write to a file in Perl (or any other language for that matter), we don't actually access the file directly and immediately. Instead of that we what we really do is that we ask the operating system to read from the file or write to the file using a "system call". The Operating system (Linux, OSX, Windows, etc.) will do the work on our behalf, but it will try to optimize.
<p>
So it won't go and write to the disk immediately when we ask it to write a few characters. Instead of that it will keep the request in memory in a "buffer" and will write it to the disk later, when the buffer is full or when the file is closed.
<p>
]]></summary>
  <updated>2021-10-04T12:11:11Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/immediate-writing-to-files-flushing"/>  <id>https://perlmaven.com/immediate-writing-to-files-flushing</id>
  <content type="html"><![CDATA[<p>
When we say we read from a file or write to a file in Perl (or any other language for that matter), we don't actually access the file directly and immediately. Instead of that we what we really do is that we ask the operating system to read from the file or write to the file using a "system call". The Operating system (Linux, OSX, Windows, etc.) will do the work on our behalf, but it will try to optimize.
<p>
So it won't go and write to the disk immediately when we ask it to write a few characters. Instead of that it will keep the request in memory in a "buffer" and will write it to the disk later, when the buffer is full or when the file is closed.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#532 - Hacktoberfest 2021</title>
    <link rel="alternate" href="https://perlweekly.com/archive/532.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Have you joined the annual <a href="https://hacktoberfest.digitalocean.com">Hacktoberfest 2021</a> run by Digital Ocean?</p>
<p>If not then please join without any further delay. Hacktoberfest encourages participation in the open source community. You can earn a limited edition T-shirt by completing the challenge.</p>
<p>Not sure if you noticed, but this time they have made an interesting change by allowing open source maintainers to also take part in the contest. Ever since I started <a href="https://theweeklychallenge.org">The Weekly Challenge</a>, I have hardly found time to dedicate to Hacktoberfest. Last year I could only submit 6 PRs, enough to win the contest, since you only need to submit 4 PRs. This year, I am only taking part as the maintainer of an open source project - "The Weekly Challenge". The best year for me as contributor was 2019 when I submitted 160 PRs.</p>
<p>If you are looking for an open source project to contribute to then you can join "The Weekly Challenge" and win the competition by submitting 4 PRs in just one week.</p>
<p>How?</p>
<p>Well, you could submit 2 Perl and 2 Raku solutions to the weekly task. Just submit one solution per PR. I know it is cheating but a fair one in my humble opinion. Again, please don't limit yourself to just Perl and Raku. You are free to choose your favourite programming language. One more bit, please don't tie yourself to the current weekly challenge. You are free pick any past week challenges. Plenty of choices available. If you have any questions with regard to submitting a PR then please follow the <a href="https://theweeklychallenge.org/blog/how-to-contribute">blog post</a> that explains every detail. If you still have any questions then please get in touch with me. You can find my details on the page. I am also accepting PRs to another open source project - <a href="https://github.com/manwar/theweeklychallenge">The Weekly Challenge</a> website which is also open source code.</p>
<p>If you are a CPAN contributor then you could pick and choose your favourite distribution and contribute. However there is a catch, the distribution may or may not be part of the contest. Having said that, you can contribute to my <a href="https://metacpan.org/author/MANWAR">CPAN distributions</a> if you fancy. I promise, I will make the distribution to be part of the contest so that your PR will count towards the target. Just yesterday, I received a <a href="https://github.com/manwar/BankAccount-Validator-UK/pull/2">Pull Request</a> on one of my CPAN distributions, <a href="https://metacpan.org/dist/BankAccount-Validator-UK">BankAccount::Validator::UK</a>.</p>
<p>Happy Hacking !!!</p></div>
    </content>
    <id>https://perlweekly.com/archive/532.html</id>
    <published>2021-10-04T10:00:00Z</published>
    <updated>2021-10-04T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Tony Cook): September 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl5_tony_cook_sept_2021"/>
  <id>tag:news.perlfoundation.org,2021-10-03:/post/maintaining_perl5_tony_cook_sept_2021</id>
  <published>2021-10-03T21:02:17</published>
  <updated>2021-10-03T21:02:17</updated>
  <summary>
  <![CDATA[
     Approximately 40 tickets were reviewed, and 7 patches were applied  7.45 #18606 produce another case where the implementation  fails, comment, try to work on a fix  #18606 research, code on making a new stub cv  #18606 more try to make stub cv  #18606 get it seemingly working, needs more tests  0.31 #18746 reply to comment  #18746 review and apply to blead  4.26 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>```
Approximately 40 tickets were reviewed, and 7 patches were
applied</p>

<p>[Hours]         [Activity]
  7.45          #18606 produce another case where the implementation
                fails, comment, try to work on a fix
                #18606 research, code on making a new stub cv
                #18606 more try to make stub cv
                #18606 get it seemingly working, needs more tests
  0.31          #18746 reply to comment
                #18746 review and apply to blead
  4.26          #18820 reply to comment
                #18820 review new changes, look over related code
                #18820 try benchmarking
                #18820 more try benchmarking, can’t come to any conclusion
                either way
  0.55          #18827 review and review discussion, research and comment
  2.77          #18837 look into some alternative approaches, implement
                one and replace the PR
                #18837 fix some of my stupidity detected by CI
  0.98          #18925 review and comments
  0.05          #18936 review discussion and apply to blead
  1.77          #18953 review response and work on a fix
  0.12          #18968 re-check and apply to blead
  0.65          #18972 review and close
  2.04          #19005 rebase, testing and update PR
                #19005 rebase
  0.97          #19014 review and comment
  0.17          #19015 re-check and apply to blead
  0.40          #19018 review, research and apply to blead
  1.12          #19019 review, testing
  1.15          #19020 research and comment
  0.17          #19021 review
  0.10          #19023 review
  4.28          #19040 review and comment
                #19040 review, try and find any flaws, comment
                #19040 review the “now ready for review” PR
                #19040 comment
                #19040 review new changes
  0.82          #19041 review and apply to blead
  4.32          #19054 research, debugging
                #19054 debugging, research
                #19054 more testing, review EU::PXS code
  0.35          #19059 comment
  0.48          #19074 review
  0.12          #19078 review and apply to blead
  3.75          :utf8 - documentation
                :utf8 - documentation
  0.33          :utf8 more testing, push for CI
  1.00          :utf8 rebase, testing
  0.22          check github notifications
  0.22          find the correct code to fix for khw, and reproduce,
                sending preprocessed code as requested
  1.30          list catch up
                list catch up
  0.50          list catch up, comment on bool thread
  0.22          more perldelta
  0.65          perldelta
  2.05          PR 19091 for one Coverity issue, other two appear to be
                false positives and marked so
  2.67          reduce gcc warning noise, including setting up a newer gcc
                to check against
  0.23          review a number of PRs, which generally have unresponded
                to comments
  0.65          review Coverity reported defects
  0.62          review github notifications
  0.72          RFCs PR 3 review and comment
  0.62          try to build khw’s test code with MSVC, update MSVC (with</p>

<h1>                a reboot) and try again</h1>

<p>51.15 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Sep 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/10/03/list-of-new-cpan-distributions-sep-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-PAUSE">Acme-CPANModules-PAUSE</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that interact with PAUSE, the Perl Authors Upload Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PodOnly">Acme-PodOnly</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001001</td>
<td>0.001003</td>
<td>A distribution that only contains Pod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-PGPLOT">Alien-PGPLOT</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install the PGPLOT library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-PortMidi">Alien-PortMidi</a></td>
<td><a href="https://metacpan.org/author/JBARRETT">JBARRETT</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Install the Mixxx fork of PortMidi</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bitcoin-PaperWallet">App-Bitcoin-PaperWallet</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Generate printable cold storage of bitcoins</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GhostWork">App-GhostWork</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Barcode Logger(When,Where,Who,What,toWhich,Why)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ShellCompleter-YtDlp">App-ShellCompleter-YtDlp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Shell completion for yt-dlp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TimeZoneUtils">App-TimeZoneUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>An assortment of time-zone-related CLI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dumpbin">App-dumpbin</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>It's a PE Parser!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-nioscli">App-nioscli</a></td>
<td><a href="https://metacpan.org/author/SSMN">SSMN</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI for NIOS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Lingua-Word-ID-KBBI">ArrayData-Lingua-Word-ID-KBBI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>0.003</td>
<td>Indonesian words from Kamus Besar Bahasa Indonesia</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Meta-YtDlp">CLI-Meta-YtDlp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Metadata for yt-dlp CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chess-Plisco">Chess-Plisco</a></td>
<td><a href="https://metacpan.org/author/GUIDO">GUIDO</a></td>
<td>0.1</td>
<td>0.3</td>
<td>Representation of a chess position with move generator, legality checker etc.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Text">Data-Text</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Class to handle text in an OO way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-MintingProfile-AlienBuild">Dist-Zilla-MintingProfile-AlienBuild</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.03</td>
<td>A minimal Dist::Zilla minting profile for Aliens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-TableData">Dist-Zilla-Plugin-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building TableData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-QUIP">Evo-QUIP</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.1</td>
<td>Perl extension for QUIP (Quadratic Unconstrained Integer Program)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-FaceGenerator">Game-FaceGenerator</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.02</td>
<td>a web app to combina random images into faces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-HexDescribe">Game-HexDescribe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1</td>
<td>a web app to add random table driven data to map data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TextMapper">Game-TextMapper</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.03</td>
<td>a web app to generate maps based on text files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Games-TabNoun">Games-TabNoun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Select nouns from list of words, as fast as possible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geonode-Free-ProxyList">Geonode-Free-ProxyList</a></td>
<td><a href="https://metacpan.org/author/JULIODCS">JULIODCS</a></td>
<td>v0.0.1</td>
<td>v0.0.5</td>
<td>Get Free Geonode Proxies by using some filters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IO-Term-Status">IO-Term-Status</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>print log lines to a terminal with a running status bar</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-DJARE-Writer">JSON-DJARE-Writer</a></td>
<td><a href="https://metacpan.org/author/SARGIE">SARGIE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Write DJARE files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Media-Convert">Media-Convert</a></td>
<td><a href="https://metacpan.org/author/WOUTER">WOUTER</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>a Moose-based library to work with media assets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-TagHelpers-ContentBlock">Mojolicious-Plugin-TagHelpers-ContentBlock</a></td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>0.11</td>
<td>0.11</td>
<td>Mojolicious Plugin for Content Blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Text-Minify">Mojolicious-Plugin-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.2.2</td>
<td>remove HTML intendation on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-ClamAV-Client">Net-ClamAV-Client</a></td>
<td><a href="https://metacpan.org/author/BYTERAZOR">BYTERAZOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>A client class for the ClamAV clamd virus scanner daemon</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Netstack">Netstack</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Util-Stringify">Object-Util-Stringify</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to object stringification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Passwd-Keyring-Secret">Passwd-Keyring-Secret</a></td>
<td><a href="https://metacpan.org/author/UHLE">UHLE</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Password storage implementation using the GObject-based Secret library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Plugin-TableData">Pod-Weaver-Plugin-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Plugin to use when building TableData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Role-RequireFromBuild">Pod-Weaver-Role-RequireFromBuild</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Role to require() from Dist::Zilla build files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-FilterRules">RT-Extension-FilterRules</a></td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Filter incoming tickets through rule sets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-TemplateTickets">RT-Extension-TemplateTickets</a></td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Designate tickets as templates for new tickets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-JSON">Sah-Schemas-JSON</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Various schemas related to JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Statistics-Descriptive-PDL">Statistics-Descriptive-PDL</a></td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>0.02</td>
<td>0.12</td>
<td>A close to drop-in replacement for Statistics::Descriptive using PDL as the back-end</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Operator-Zip">Syntax-Operator-Zip</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>infix operator to compose two lists together</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-CPAN-Release-Static-2021">TableData-CPAN-Release-Static-2021</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210928.0</td>
<td>20210928.1</td>
<td>CPAN releases for the year 2021</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-CPAN-Release">TableDataBundle-CPAN-Release</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Collection of TableData:: modules that contain CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-CPAN-Release-Static-Older">TableDataBundle-CPAN-Release-Static-Older</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210927.0</td>
<td>20210927.0</td>
<td>Collection of TableData:: modules that contain older CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-AlienDev">Task-AlienDev</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Task bundle for Alien development</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-LWP-Distilled">Test-Mock-LWP-Distilled</a></td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>0.001_01</td>
<td>1.000</td>
<td>make and use LWP mocks, distilled to their essence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-LWP-Distilled-JSON">Test-Mock-LWP-Distilled-JSON</a></td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>0.001_01</td>
<td>1.000</td>
<td>JSON support for Test::Mock::LWP::Distilled</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Module-Features">Test-Module-Features</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Test feature set specifications and features declarations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-ANSI-Tabs">Text-ANSI-Tabs</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.06</td>
<td>0.07</td>
<td>Tab expand and unexpand with ANSI sequence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordLists-EN-Adjective">WordLists-EN-Adjective</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of English adjectives</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordLists-EN-Noun">WordLists-EN-Noun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Collection of English nouns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/autocroak">autocroak</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Replace functions with ones that succeed or die with lexical scope</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/fka9sxOL">fka9sxOL</a></td>
<td><a href="https://metacpan.org/author/SEGOMOS">SEGOMOS</a></td>
<td>0</td>
<td>0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mb-JSON">mb-JSON</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a simple JSON parser for multibyte string</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>51</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>28</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/GUIDO">GUIDO</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SSMN">SSMN</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JBARRETT">JBARRETT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BYTERAZOR">BYTERAZOR</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SEGOMOS">SEGOMOS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/SARGIE">SARGIE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/WOUTER">WOUTER</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/UHLE">UHLE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/JULIODCS">JULIODCS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-PAUSE PERLANCAR 0.001 0.001 Modules that interact with PAUSE, the Perl Authors Upload Server Acme-PodOnly HAARG 0.001001 0.001003 A distribution that only contains Pod Alien-PGPLOT DJERIUS 0.01 0.01 Build and Install the PGPLOT library Alien-PortMidi JBARRETT 0.01 0.03 Install the Mixxx fork of PortMidi App-Bitcoin-PaperWallet BRTASTIC 1.00 1.01 Generate printable … <a href="https://perlancar.wordpress.com/2021/10/03/list-of-new-cpan-distributions-sep-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Sep 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1953</id>
    <published>2021-10-03T01:38:26Z</published>
    <updated>2021-10-03T01:38:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>delete an element from a hash</title>
  <summary type="html"><![CDATA[<p>
The <a href="https://metacpan.org/pod/perlfunc#delete-EXPR">delete</a> function will remove the given key from a hash.
<p>
]]></summary>
  <updated>2021-09-30T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/delete"/>  <id>https://perlmaven.com/delete</id>
  <content type="html"><![CDATA[<p>
The <a href="https://metacpan.org/pod/perlfunc#delete-EXPR">delete</a> function will remove the given key from a hash.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Season of Docs project supporting newcomers and perl docs team</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/season-of-docs-progress"/>
  <id>tag:news.perlfoundation.org,2021-09-30:/post/season-of-docs-progress</id>
  <published>2021-09-30T05:20:41</published>
  <updated>2021-09-30T05:20:41</updated>
  <summary>
  <![CDATA[
     Work continues at pace on the comprehensive audit of Perl's core documentation collection, which is funded through Google’s Season of Docs. The project was announced and began in May. As planned, it is expected to complete before the end of November. Technical writer and communications specialist, Khawar Latif Khan is working in stages and has completed a full content audit alongside members of the community who have helped to test 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Projects" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Work continues at pace on the <a href="https://github.com/Perl/perl5/wiki/Google-Season-of-Docs-2021-project-proposals">comprehensive audit of Perl's core documentation collection</a>, which is funded through Google’s Season of Docs. The project was <a href="https://news.perlfoundation.org/post/perl-gsod-2021">announced</a> and began in May. As planned, it is expected to complete before the end of November.</p>

<p>Technical writer and communications specialist, <a href="https://www.linkedin.com/in/khawarlatifkhan/">Khawar Latif Khan</a> is working in stages and has completed a full content audit alongside members of the community who have helped to test and review the documents, followed by a gap analysis, reviewing what is missing and where documents should be held.</p>

<p>Khawar began work on the project in mid-May. He says: “I was intrigued by the project. I spent some time getting familiar with perl and saw a lot of good content that needed organisation. Jason McIntosh, Dan Book and I sat together and looked at the problems users were facing and this helped me understand the limitations of perl.doc. There are more than 240 documents on perl.doc. The major aim is to create a roadmap for the future. Divide what is required into projects and sub projects, assigning tasks so we have a user-friendly picture of the documentation of perl.”</p>

<p>Jason McIntosh, Project Manager for Google Season of Docs, says: “I think the project will work really well and I see it leading to a lot of projects for the docs team which will have its work cut out for it in the best way.”</p>

<p>Not only that, it is hoped that the project will be beneficial for newcomers to perl. There may be some new users who would look at the data as it is now and be put off trying out more in perl. This project will hopefully encourage them to stick with it and see just how great perl is.</p>

<p>Jason says: “A large part of this project is about reorganising the data set, making it easier for everyone to look for documents and information, in particular this will be a great benefit for newcomers who might find the existing data set quite daunting.”</p>

<p>Khawar experienced this himself saying: “Initially, I was confused where to begin but now I have started it is interesting. I love the project. I enjoy the feedback I am getting, especially from Jason. He has been really helpful and supportive throughout the process.” </p>

<p>Jason says: “Khawar is a delight to work with. At the end of this project, he will be one of the most familiar people in the world with perl documentation. It has been of real value to go outside of the perl community, to get someone who has an objective viewpoint. We’re fortunate he was available.”</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#531 - Legacy code</title>
    <link rel="alternate" href="https://perlweekly.com/archive/531.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I like working on legacy code whether it is Perl, Python or some other language, because it is code that is already very valuable to the organization that uses it. It is great to help the maintainers understand the code better and to give them confidence in making changes to the code.</p>
<p>There are a number of language specific tools that can help you while dealing with legacy code. For example Perl Critic which is mentioned in at least two posts this edition. There are more generic things, like setting up a good CI system which is mentioned by Gugod.</p>
<p>The ideal situation is when both management and the engineers really want the change. They still probably need some external help from someone who has experience in similar situations and who has already seen systems where the engineers have no fear in making changes. It is a totally different world than what many people experience in organizations.</p>
<p>Enjoy your fearless week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/531.html</id>
    <published>2021-09-27T10:00:00Z</published>
    <updated>2021-09-27T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>CAT open session – your thoughts and ideas</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-open-session-oct-21"/>
  <id>tag:news.perlfoundation.org,2021-09-27:/post/cat-open-session-oct-21</id>
  <published>2021-09-27T04:56:46</published>
  <updated>2021-09-27T04:56:46</updated>
  <summary>
  <![CDATA[
     DATE CONFIRMED 20 October 2021, 1730 UTC https://meetings.opusvl.com/CATOpenSession TPF is hosting this community open session to discuss the Community Affairs Team and next steps. We want your thoughts and your ideas. It would be great to see a broad section of the community, including people who don't normally engage in these discussions. If you have something to say, this is your opportunity. 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>DATE CONFIRMED</h1>

<p>20 October 2021, 1730 UTC
https://meetings.opusvl.com/CATOpenSession</p>

<p>TPF is hosting this community open session to discuss the <a href="https://news.perlfoundation.org/post/introducing-tpf-community-affairs-team">Community Affairs Team (CAT</a>) and next steps. We want your thoughts and your ideas.</p>

<p>It would be great to see a broad section of the community, including people who don't normally engage in these discussions. If you have something to say, this is your opportunity.</p>

    ]]>
  </content>
</entry>
</feed>
