<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-12-21T00:58:11Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Create foo.a using Pure Perl and Archive::Ar</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/create-fooa-using-pure-perl-and-archivear-5266" type="text/html"/>
    <content type="html">&lt;p&gt;I'm searching for the way to create static library such as "foo.a".&lt;/p&gt;

&lt;p&gt;I found &lt;a href="https://metacpan.org/pod/Archive::Ar"&gt;Archive::Ar&lt;/a&gt; on CPAN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Archive::Ar;

my $ar = Archive::Ar-&amp;gt;new;

$ar-&amp;gt;read('./foo.ar');
$ar-&amp;gt;extract;

$ar-&amp;gt;add_files('./bar.tar.gz', 'bat.pl')
$ar-&amp;gt;add_data('newfile.txt','Some contents');

$ar-&amp;gt;chmod('file1', 0644);
$ar-&amp;gt;chown('file1', $uid, $gid);

$ar-&amp;gt;remove('file1', 'file2');

my $filehash = $ar-&amp;gt;get_content('bar.tar.gz');
my $data = $ar-&amp;gt;get_data('bar.tar.gz');
my $handle = $ar-&amp;gt;get_handle('bar.tar.gz');

my @files = $ar-&amp;gt;list_files();

my $archive = $ar-&amp;gt;write;
my $size = $ar-&amp;gt;write('outbound.ar');

$ar-&amp;gt;error();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm working to create &lt;a href="https://github.com/yuki-kimoto/SPVM"&gt;SPVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SPVM has C/C++ binding tools.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/create-fooa-using-pure-perl-and-archivear-5266</id>
    <published>2021-12-20T23:31:00Z</published>
    <updated>2021-12-20T23:31:00Z</updated>
    <category term="perl"/>
    <category term="c"/>
    <category term="cpp"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>#543 - Happy Birthday!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/543.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Thomas Klausner sent me a bunch of links and suggestion, let me share them first:</p>
<p>Abigail has a series of Advent posts starting from <a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-01.html">day 01</a>. I did not find a page listing all the entries but you can get to them by changing the URL. Smylers is doing crazy stuff with <a href="https://twitter.com/smylers2/status/1334150980552757250">vim (and perl)</a>. One can find a lot of inspiring code (Perl, Raku and of course other languages) in the various <a href="https://www.reddit.com/r/adventofcode">'Solution Megathreads'</a> on Reddit.  Finally domm himself has a few <a href="https://domm.plix.at/tags/AdventOfCode.html">Advent related posts</a>.</p>
<p>Today we are celebrating the 80th birthday of my mother. Due to the pandemic we cannot celebrate in the same space, but we have collected some videos from the family members and her friends and we are going to have a Zoom session. Much better than not being able to celebrate at all. Happy birthday mom!</p>
<p>In a few days a large part of the world is going to celebrate the birthday of another Jew.</p>
<p>Merry Christmas!</p></div>
    </content>
    <id>https://perlweekly.com/archive/543.html</id>
    <published>2021-12-20T10:00:00Z</published>
    <updated>2021-12-20T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Variable "..." will not stay shared ...</title>
  <summary type="html"><![CDATA[<p>
When using <b>fork</b> to create child processes it is a good idea to encapsulate the behavior of both the child process
and the parent process in (separate) functions.
<p>
]]></summary>
  <updated>2021-12-20T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/variable-will-not-stay-shared"/>  <id>https://perlmaven.com/variable-will-not-stay-shared</id>
  <content type="html"><![CDATA[<p>
When using <b>fork</b> to create child processes it is a good idea to encapsulate the behavior of both the child process
and the parent process in (separate) functions.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Stealthy Calculations</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/19#pwc143" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a string, $s, containing mathematical expression. Write a script to print 
the result of the mathematical expression. To keep it simple, please only accept 
+ - * ().&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;Main driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to implement a four function infix calculator.     
##
use TWCCalculator;
use constant ADD =&gt; "10 + 8";
use constant SUBTRACT =&gt; "18 - 66";
use constant ADD_SUBTRACT =&gt; "10 + 20 - 5";  
use constant MULTIPLY =&gt; "10 * 8";
use constant DIVIDE =&gt; "52 / 2";
use constant CALCULATE =&gt; "(10 + 20 - 5) * 2"; 

MAIN:{
    my $parser = new TWCCalculator();
    $parser-&gt;parse(ADD); 
    $parser-&gt;parse(SUBTRACT); 
    $parser-&gt;parse(ADD_SUBTRACT); 
    $parser-&gt;parse(MULTIPLY); 
    $parser-&gt;parse(DIVIDE);
    $parser-&gt;parse(CALCULATE);
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TWCCalculator.yp (the Parse::Yapp code). This file is used to generate a parser module,
TWCCalculator.pm, which is used in the code above. This is where the actual parsing of
the input and implementation of the calculator is.&lt;/p&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
%token NUMBER    
%left '+' '-' '*' '/'

%%

line: 
    | expression  {print $_[1] . "\n"} 
;

expression: NUMBER
    | expression '+' expression {$_[1] + $_[3]}
    | expression '-' expression {$_[1] - $_[3]}
    | expression '*' expression {$_[1] * $_[3]}
    | expression '/' expression {$_[1] / $_[3]}
    | '(' expression ')' {$_[2]}
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    $parser-&gt;YYData-&gt;{INPUT} =~ s/^[ \t]//;
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^([0-9]+)// and return ("NUMBER", $1);
        s/^(\+)// and return ("+", $1);
        s/^(-)// and return ("-", $1);
        s/^(\*)// and return ("*", $1);
        s/^(\/)// and return ("/", $1);
        s/^(\()// and return ("(", $1);
        s/^(\))// and return (")", $1);
        s/^(\n)// and return ("\n", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp TWCCalculator.yp
$ perl ch-1.pl
18
-48
25
80
26
50
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In a long ago (almost exactly two years!) Challenge we were asked to implement a Reverse
Polish Notation (RPN) Calculator. For that challenge I wrote a short introduction to the 
parser module, Parse::Yapp, that I used. See the references below, I think it still holds
up.&lt;/p&gt;

&lt;p&gt;For this challenge I was able to rely pretty heavily on that older code. I simply changed
the expected position of the operators and that was about it!&lt;/p&gt;

&lt;p&gt;I really like any excuse to use a parser generator, they're a powerful tool one can have
at the disposal for a fairly small investment of learning time. Well, practical usage
may be quick to learn. Depending on how deep one wants to go there is the possibility also
of a lifetime of study of computational linguistics.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to find out if the given number is a
Stealthy Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean; 

sub factor{
    my($n) = @_;
    my @factors = ();
    for  my $j (2 .. sqrt($n)){
        push @factors, [$j, $n / $j] if $n % $j == 0;
    }
    return @factors;  
}

sub stealthy{
    my($n) = @_;
    my @factors = factor($n);
    for(my $i = 0; $i &lt; @factors; $i++){
        for(my $j = 0; $j &lt; @factors; $j++){
            unless($i == $j){
                my($s, $t) = @{$factors[$i]}; 
                my($u, $v) = @{$factors[$j]}; 
                return true if $s + $t == $u + $v + 1; 
            }  
        }  
    }  
    return false; 
}

MAIN:{
    print stealthy(12) . "\n";
    print stealthy(36) . "\n";
    print stealthy(6)  . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;That &lt;code&gt;factor&lt;/code&gt; subroutine makes another appearance! Well, here there is a slight 
modification to get it to return the factors in pairs, each pair an array reference.
These are all checked in a loop for the desired property.&lt;/p&gt;

&lt;p&gt;This is a classic "generate and test" approach. For an idea of what it would look like
to instead constrain the variables to fit the property and then discover which values, if 
any, match these constraints then please do take a look at my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/19/prolog"&gt;Prolog solution for Challenge 143&lt;/a&gt;
which uses a Constraint Logic Programming over Finite Domains (clpfd) approach.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143/"&gt;Challenge 143&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/13321.html"&gt;RPN Calculator for Challenge 039&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc143</id>
    <published>2021-12-19T19:56:00-05:00</published>
    <updated>2021-12-19T19:56:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 143</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-143-36f6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-143/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-calculator">
  </a>
  TASK #1 › Calculator
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a string <code>$s</code> containing mathematical expression.</p>

<p>Write a script to print the result of the mathematical expression. To keep it simple, please only accept <code>+ - * ()</code>.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Hopefully I don't need to teach readers of this blog about the <a href="https://www.splashlearn.com/math-vocabulary/algebra/order-of-operations">order of operations</a>, known as BEDMAS in this part of the world.</p>

<p>I'm not entirely happy with my solution, as it will sometimes give unexpected results. For example "1 (2 - 3) * 4" will give -3 (2-3 is negative one, which results in  "1 -1 * 4" = 1 - 4 = -3)</p>

<p>The simplest way to solve this would be use a regular expression to make sure it matches the criteria (contains only digits, demical points, spaces and the characters mentioned in the task) and then use <code>eval</code> or <code>qx</code> to parse the string. Maybe that is what is expected. That's probably what I would have done in the real world™. I was very tempted to see other peoples results before submitting my own, but I never do that, and I'm not about to start now :)</p>

<p>So the tact I took is probably not correct. The first thing I do is evaluate any brackets (inner most first) and replace them with the result. At each point we will have a combination of a number, followed by any number of operator number pairs. I then use regular expressions to separate out the parts. I then reduce all multiplication pairs, and finally complete all additions and subtraction.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl "20 + 10 - 5"
25

$ ./ch-1.pl "(20 + 10 - 5) * 2"
50
</code></pre>

</div>



<h2>
  <a href="#task-2-stealthy-number">
  </a>
  TASK #2 › Stealthy Number
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive number <code>$n</code>.</p>

<p>Write a script to find out if the given number is Stealthy Number. A positive integer N is stealthy, if there exist positive integers a, b, c, d such that a * b = c * d = N and a + b = c + d + 1.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This is relatively straight forward compared to the first task, and like many other solutions I produce is simply uses a brute force method.</p>

<p>I have a loop <code>i</code> that counts from one to <code>√n</code>. If <code>n % i</code> is 0, we have a possible combination for a/b or c/d. I then compare this value to any previous values. If they have a absolute different of one, then I print 1. If we don't find any possible a/b/c/d combinations, then I print 0. </p>

<p>The Perl code is a transliteration of the Python code.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 24
1

$ ./ch-2.py 12
1

$ ./ch-2.py 6
0
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-143-36f6</id>
    <published>2021-12-19T00:49:17Z</published>
    <updated>2021-12-19T00:49:17Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4371492345422376751</id>
    <published>2021-12-18T15:59:00.000+01:00</published>
    <updated>2021-12-18T15:59:02.651+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/DBIx-Custom-0.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Custom&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI extension to execute insert, update, delete, and select easily &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.45&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 1 year, 4 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-MIME-1.952' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::MIME&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - easy MIME message handling &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.952&lt;/strong&gt; on 2021-12-14&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.949 was 1 year, 6 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.64' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.64&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 7.62 was 8 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.55&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.54 was 1 month, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.801' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.801&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 65&lt;/li&gt;  &lt;li&gt;Previous version: 0.800 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.04&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 95&lt;/li&gt;  &lt;li&gt;Previous version: 4.03 was 10 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.07&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.06 was 10 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.60&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.59 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 1.32 was 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.59&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.58 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AKHUETTEL/REST-Client-281' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;REST::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple client for interacting with RESTful http/https resources &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;281&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 273 was 6 years, 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9018&lt;/strong&gt; on 2021-12-13&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9017 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ATOOMIC/Template-Toolkit-3.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Template::Toolkit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comprehensive template processing system &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.010&lt;/strong&gt; on 2021-12-13&lt;/li&gt;  &lt;li&gt;Votes: 135&lt;/li&gt;  &lt;li&gt;Previous version: 3.009 was 1 year, 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.087' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.087&lt;/strong&gt; on 2021-12-14&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.085 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4371492345422376751/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxii-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4371492345422376751"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4371492345422376751"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxii-15-great-cpan-modules-released.html" title="(ccclxxii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>A (not so) simple matter of privacy</title>
    <link rel="alternate" href="http://blogs.perl.org/users/damian_conway/2021/12/a-not-so-simple-matter-of-privacy.html"/>
    <id>tag:blogs.perl.org,2021:/users/damian_conway//875.10580</id>
    <published>2021-12-11T22:03:25Z</published>
    <updated>2021-12-18T00:34:37Z</updated>
    <author>
        <name>Damian Conway</name>
        <uri>http://damian.conway.org</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/damian_conway/">
        <![CDATA[<p>You may have seen <a href="https://old.reddit.com/r/perl/comments/rdcziv/corinna_discussion_with_the_perl_steering/">Ovid's recent post</a>
on his discussions with the Perl Steering Committee
about moving forward with implementing an initial subset
of the <a href="https://github.com/Ovid/Cor">Corinna proposal</a> in the Perl core.</p>

<p>One of the issues that came up during those discussions was the best way to provide private
methods in Corinna. The current Corinna proposal is that this would be done <em>(like almost
everything else in Corinna)</em> via an attribute:</p>

<pre><code>method do_internal <strong>:private</strong> () {...}</code></pre>

<p>Thereafter, the <code>do_internal()</code> method can only be called from within
the current class, and is never overridden by derived-class methods when
it is called within its original class.</p>

<p>In other words, the <code>:private</code> method effectively prepends the following
code to the start of the method:</p>

<pre><code>croak "Can't call method 'do_internal'"
    if caller ne __CLASS__;</code></pre>

<p>...and, in addition, causes the compiler to treat any call to that particular method
from within the current class as a <a href="https://perldoc.perl.org/perlobj#Method-Names-with-a-Fully-Qualified-Name">fully qualified method call</a>.
That is, within any class <code>C</code> with a private <code>do_internal()</code> method, any call
to <code>$self-&gt;do_internal()</code> is treated as a call to <code>$self-&gt;<strong>C::do_internal</strong>()</code>.</p>

<p>All of which means that there is no way to call a private method from anywhere
except within the same class. Which, of course, is the whole point of <em>having</em> private methods
in the first place.</p>

<p>But the need to automagically convert any call to a private method into a fully qualified
method call is <em>(to put it mildly)</em> a complication for the compiler.
So the members of the <em><s>Perl Steering Committee</s></em> Cor design team suggested that rather than having private methods,
Perl should have lexical methods instead. Specifically, they suggested that instead of:</p>

<pre><code>method do_internal <strong>:private</strong> () {...}

method do_external () {
    $self-&gt;<strong>do_internal()</strong>;   # Call private method
    ...
}</code></pre>

<p>...Perl would provide anonymous methods, which you could place in lexical variables
and then call using the existing <a href="https://perldoc.perl.org/perlobj#Subroutine-References-as-Methods"><em>call-via-reference</em> method call syntax</a>:</p>

<pre><code>my $do_internal = <strong>method () {...}</strong>;

method do_external () {
    $self-&gt;<strong>$do_internal()</strong>;   # Call lexical method
    ...
}</code></pre>

<p>That neatly avoids of the challenge of rewriting private methods to check their caller,
or the much greater challenge of rewriting private method calls to be fully qualified.
Instead, it cleverly enforces the <em>“can be called only from the current class”</em> requirement
by making it impossible to refer to the method at all, except in the lexical scope of the
<code>$do_internal</code> variable.</p>

<p>You could even consider the slightly uglier <code>$self-&gt;$do_internal()</code> call syntax as a win:
because it means that private method calls are explicitly marked as such.</p>

<p>The only downsides are:</p>

<ul>
<li><p>The <em>call-via-reference</em> syntax is more obscure and perhaps
a little more challenging for less-experienced Perl developers.
That might discourage them from using this approach,
even for methods that really should be private,
thereby penalizing a good OO practice.</p></li>
<li><p>Using anonymous methods to implement private methods is <strong><em>structural</em></strong> rather that
<strong><em>declarative</em></strong>. That is: we can’t just say <strong><em>what</em></strong> we want to have happen,
we have to say <strong><em>how</em></strong> to actually implement it. In practical terms, this
means that private method definitions are no longer explicitly marked
as being private, and hence are far less searchable.</p></li>
</ul>

<p>And that second issue is the real problem here. Because they’re structural, not declarative,
lexical methods specified like this are also much easier to <a href="https://media.pragprog.com/articles/jan_03_enbug.pdf">“enbug”</a>.
For example, if the developer mistakenly wrote something like this:</p>

<pre><code>method other () {
    ...
    $do_internal++;
    ...
}</code></pre>

<p>Then any call to the <code>$do_external()</code> method will be fine so long as the
<code>other()</code> method is never called. But after <code>other()</code> has been
called, the next call to <code>$do_external()</code> will throw a weird exception:</p>

<p><tt>&nbsp;&nbsp;&nbsp;Can't locate object method "140362266577153" via class "C"</tt></p>

<p>Of course, we can get around that potential bug by making <code>$do_internal</code> immutable:</p>

<pre><code><strong>use Const::Fast;</strong>
<strong>const</strong> my $do_internal => method () {...};</code></pre>

<p>but that’s now an extra module load, and even more infrastructure to get right.</p>

<p><em>(BTW, wouldn’t it be cool if the existing <code>:const</code> subroutine attribute
could also be applied to scalar variables, in which case we’d just need:</p>

<pre><code>my $do_internal :const = method () {...};</code></pre>

<p>Maybe one day!)</em></p>

<p>Yet another issue with using anonymous methods as private methods is that
they make it easy to subvert the intended encapsulation:</p>

<pre><code>our $do_internal = method () {...};</code></pre>

<p>That’s no longer a private method, because you can now call it from literally anywhere in your code:</p>

<pre><code>$obj-&gt;<strong>$C::do_internal</strong>();</code></pre>

<p>And, even if it were still a <code>my</code> variable, there’s nothing to prevent a class
from explicitly exporting it:</p>

<pre><code>method circumvent_privacy () { return $do_internal }</code></pre>

<p>As an OO purist, I find that possibility worrying. And as someone who has reviewed a vast
amount of real-world Perl OO code over the past few decades, I think that kind of expedient
kludge is...inevitable.</p>

<p>So what do we do?</p>

<p>The good folks of the <em><s>Perl Steering Committee</s></em> Cor team suggested an approach that does address
some of these issues. They proposed that the syntax for private methods be:</p>

<pre><code>method <strong>$do_internal</strong> () {...}

method do_external () {
    $self-&gt;<strong>$do_internal()</strong>;   # Call private method
    ...
}</code></pre>

<p>That is: when you want to declare a private method, you put a <code>$</code> at the start of its name.
This form of the <code>method</code> keyword would then create a <em>(presumably immutable!)</em> lexical
<code>$do_internal</code> variable, initialized with a reference to an anonymous method.
You could then use the reference in that variable to call the private method.</p>

<p>While it doesn’t solve the problem of evil developers explicitly exporting that variable, it
does make the syntax declarative again, and it could solve the issue of accidentally changing
the variable <em>(assuming the variable were indeed to be created as immutable)</em>.</p>

<p>The only problem is that now we have the <code>method</code> keyword not just declaring methods,<br/>
but also declaring variables.</p>

<p>Which, from the perspective of a language designer, is...less than ideal.<br/>
And, from the perspective of someone who actually still teaches Perl,<br/>
is <strong><em>much</em></strong> less than ideal.</p>

<p>So, how do we solve that?</p>

<p>Well, Raku solves it by marking private methods not with a <code>$</code>, but with a <code>!</code><br/>
and then calling them with the <code>!</code> as well (rather than Raku’s usual <code>.</code> method call operator):</p>

<pre><code># In Raku...
method <strong>!do_internal</strong> () {...}  # Private method

method do_external () {
    self<strong>!do_internal</strong>();       # Private method call
    ...
}</code></pre>

<p>That’s a neat solution, but it probably wouldn’t work for Perl.</p>

<p>Nevertheless, the ideal of prefix-marking private methods and private method calls in some way
<em>might</em> work. For example, we could consider formalizing the <em>“private methods start with an
underscore”</em> convention inside the new <code>class</code> blocks:</p>

<pre><code>method <strong>_do_internal</strong> () {...}

method do_external () {
    $self-&gt;<strong>_do_internal</strong>();
    ...
}</code></pre>

<p>In other words, we could specify that any method definition that starts with an
underscore <strong><em>doesn’t</em></strong> get added to the method symbol table. Instead, it implicitly creates
an immutable and invisible lexical scalar within the class. Then, within any <code>class</code> block,
any call to a method whose name starts with an underscore actually calls the method through the
associated invisible lexical scalar instead.</p>

<p>Or, to put it more simply: it’s precisely the <em><s>Steering Committee</s></em> Cor team’s proposal, but: <code>s/\$/_/g</code><br/>
And with the added advantage that the lexical is not otherwise accessible within its scope,<br/>
and therefore not accidentally modifiable, or maliciously exportable.</p>

<p>That’s by far the safest alternative I can think of, but I concede that it might still be too magical.</p>

<p>In which case we’d instead need to address just the immediate problem: that we’re contemplating
using the <code>method</code> declarator to declare something that isn’t actually a method. Specifically,
we’re using <code>method</code> to declare variables.</p>

<p>And the easiest solution to that problem is simply to define another declarator:</p>

<pre><code><strong>private</strong> $do_internal () {...}   # Declare private method

method do_external () {
    $self-&gt;<strong>$do_internal()</strong>;      # Call private method
    ...
}</code></pre>

<p>Now <code>method</code> once again only declares named methods, and we can easily explain
that <code>private</code> declares a lexically scoped variable whose immutable value
is a reference to the anonymous method.</p>

<p>We get very clear declarative labelling of private methods
and equally clear labelling of calls to those private methods.</p>

<p>We <strong><em>don’t</em></strong> solve the <em>“naughty folk can export that variable to circumvent privacy”</em>
problem, but I suppose we could always just spin that as a feature, rather than a bug. <a href="https://www.urbandictionary.com/define.php?term=%2FS">/s</a></p>

<p>For the moment, however, unless the <em><s>Steering Committee</s></em> Cor team is happy with either
the <em>“underscore enforces private”</em> approach or the addition of a <code>private</code> keyword,
I expect what we’ll actually have to do is to remove private methods entirely
from the first stage of the implementation, and simply keep on pondering
how to get them exactly right.</p>

<p>In the meantime, don’t let <em>anyone</em> ever tell you that language (re-)design is easy. <tt>:-)</tt></p>
]]>
        

    </content>
</entry>
  <entry>
    <title>My Favorite Warnings: syntax</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-syntax.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10586</id>
    <published>2021-12-16T22:30:12Z</published>
    <updated>2021-12-16T22:58:57Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Warnings category <code>syntax</code> contains a number of sub-categories representing possibly-problematic syntax. These include <code>ambiguous</code> syntax, problematic <code>bareword</code> usage, invalid <code>printf</code> conversions, and more. But there are also <code>syntax</code> diagnostics that do not fall under any of the sub-categories. These tend to be a miscellaneous group, and a normal-sized blog post can do no more than to give a sample.</p>

<p>What brought this to my attention was a noisy test in <a href="https://metacpan.org/dist/Template-Toolkit">Template-Toolkit.</a> under Perl 5.35.2 and up. The noisy code was untainting a variable using code like</p>

<pre>
$foo = each %{ { $foo =&gt; undef } } if ${^TAINT};
</pre>

<p>This makes use of the fact that hash keys are (so far) never tainted. The new warning was <code>each on anonymous hash will always start from the beginning</code>.</p>

<p>The adopted fix was to put this in the scope of a <code>no warnings 'syntax';</code>, which I initially thought was overkill, knowing that <code>syntax</code> was a group category. But further investigation showed that this diagnostic was, in fact, not a member of any sub-category of <code>syntax</code>. I got curious about what other warning categories were in <code>syntax</code> but not in a sub-category.</p>

<p>Some of my findings are in fact old friends: <code>%s found where operator expected</code> was there, as were <code>(Missing operator before %s?)</code> and <code>(Missing semicolon on previous line?)</code>.</p>

<p>Others struck me as pointing out interesting or out-of-the way features of Perl that might need a diagnostic as an alternative to a hard-to-diagnose bug. The completely-random selection below is from the Perl 5.34.0 <a href="https://perldoc.perl.org/perldiag.html"><code>perldiag</code></a>. Comments by me are <i>in italics.</i></p>

<dl>

<p>    <dt>Array passed to stat will be coerced to a scalar%s</dt><br />
    <dd>(W syntax) You called stat() on an array, but the array will be<br />
	coerced to a scalar - the number of elements in the array.</dd></p>

<p>    <dt>elseif should be elsif</dt><br />
    <dd>(S syntax) There is no keyword "elseif" in Perl because Larry thinks<br />
        it's ugly. Your code will be interpreted as an attempt to call a<br />
        method named "elseif" for the class returned by the following block.<br />
	This is unlikely to be what you want.</dd></p>

<p>    <dt>"my %s" used in sort comparison</dt><br />
    <dd>(W syntax) The package variables $a and $b are used for sort<br />
        comparisons. You used $a or $b in as an operand to the "&lt;=&gt;" or<br />
        "cmp" operator inside a sort comparison block, and the variable had<br />
        earlier been declared as a lexical variable. Either qualify the sort<br />
	variable with the package name, or rename the lexical variable.<br><br />
	<i>And <strong>this</strong>, boys and girls,<br />
	    is why variables <code>$a</code> and <code>$b</code> should<br />
	    be avoided, even as lexicals.</i></dd></p>

<p>    <dt>Old package separator used in string</dt><br />
    <dd>(W syntax) You used the old package separator, "'", in a variable<br />
        named inside a double-quoted string; e.g., "In $name's house". This<br />
        is equivalent to "In $name::s house". If you meant the former, put a<br />
	backslash before the apostrophe ("In $name\'s house").<br><br />
	<i>The apostrophe as a package separator (i.e.<br />
	    <code>Foo'Bar</code> rather than <code>Foo::Bar</code>) is<br />
	    left over from Perl 4. In the given example,<br />
	</i><code>"In ${name}'s house"</code><i> also works.</i></dd></p>

<p>    <dt>!=~ should be !~</dt><br />
    <dd>(W syntax) The non-matching operator is !~, not !=~. !=~ will be<br />
        interpreted as the != (numeric not equal) and ~ (1's complement)<br />
	operators: probably not what you intended.<br><br />
	<i>This seems only to be emitted if the<br />
	    right-hand side is a match (i.e. <code>/foo/</code> or<br />
	    <code>m/foo/</code>). It appears not to be emitted if the<br />
	    right-hand side is <code>qr/foo/</code> or <code>'foo'</code></i>.</dd></p>

</dl>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html">Ex-Warnings</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-deprecated.html"><code>deprecated</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-experimental.html"><code>experimental</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-shadow.html"><code>shadow</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>100 Languages Speedrun: Episode 26: Raku (Perl 6)</title>
    <link rel="alternate" href="https://dev.to/taw/languages-speedrun-episode-26-raku-perl-6-4emf" type="text/html"/>
    <content type="html">&lt;p&gt;Raku, which started its life as Perl 6, was meant as successor to Perl language.&lt;/p&gt;

&lt;p&gt;The main problem with that is that Perl 6 was officially announced in 2000, and only properly appeared in 2015, and in that time frame Perl lost most of its popularity, with most people moving to Ruby, PHP, or Python.&lt;/p&gt;

&lt;p&gt;Raku isn't trying to achieve compatibility with Perl 5, but it follows very similar style. This probably seemed like a good idea back in 2000 when Perl was very popular, considerably less so nowadays.&lt;/p&gt;

&lt;p&gt;But in addition to just being cleaned up Perl 5, Raku also has some really cool new concepts that are definitely worth taking a look at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two things to notice here.&lt;/p&gt;

&lt;p&gt;The good thing - &lt;code&gt;say&lt;/code&gt; is a really nice name. Of all the words languages use for this concept, I think &lt;code&gt;say&lt;/code&gt; is much better than &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;puts&lt;/code&gt; or &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;println&lt;/code&gt; or &lt;code&gt;prn&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt; and so on. Raku uses a lot of new names for various functions, some quite good, some not so much.&lt;/p&gt;

&lt;p&gt;The bad thing - damn mandatory semicolons. Somehow Raku didn't drop this nonsense, even though they've been dropped by nearly every modern language by now, as well as by all good JavaScript coding styles (if you're coding JavaScript with semicolons, you're doing it wrong).&lt;/p&gt;

&lt;p&gt;Every useless token increases mental load, and every pointless "missed semicolon" error costs both programmer time and concentration - extremely limited resources. There's no excuse to force semicolons in any new language.&lt;/p&gt;

&lt;p&gt;Semicolons in Perl and Raku are statement separators not terminators, so unlike C/Java/etc. you can skip them for last statement of a block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;($n) {&lt;/span&gt;
  &lt;span class="nv"&gt;given&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's one way to do FizzBuzz. The loop is very nice, and &lt;code&gt;1..100&lt;/code&gt; for range from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt; makes much more sense than &lt;code&gt;range(1, 101)&lt;/code&gt; convention.&lt;/p&gt;

&lt;p&gt;Raku just like Perl uses &lt;code&gt;$_&lt;/code&gt; for default variable in a lot of contexts, such as &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;given&lt;/code&gt; blocks. Just to make clear - these two &lt;code&gt;$_&lt;/code&gt;s are not overwriting each other, each &lt;code&gt;$_&lt;/code&gt; is specific to its block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(1) {&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(2) {&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;($n) {&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Raku allows defining multiple functions with the same name, matched depending on number of parameters, their types, or values. This looks quite Haskell-like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#equality"&gt;
  &lt;/a&gt;
  Equality
&lt;/h3&gt;

&lt;p&gt;Time to get to the most shitty part of Perl design, that 100% got copied over to Raku. There are no "numbers" or "strings". It's just scalars, and they convert automatically.&lt;/p&gt;

&lt;p&gt;But it's not so simple. &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;2.0&lt;/code&gt; are the same thing (as numbers), but &lt;code&gt;"2"&lt;/code&gt; and &lt;code&gt;"2.0"&lt;/code&gt; are completely different (as strings). So Perl and Raku have full parallel sets of operators. For some like concatenation (&lt;code&gt;2 ~ 2&lt;/code&gt; is &lt;code&gt;22&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; is always numerical) that's fine, but the absolute worst is that there are two equalities: &lt;code&gt;==&lt;/code&gt; for numbers and &lt;code&gt;eq&lt;/code&gt; for strings.&lt;/p&gt;

&lt;p&gt;What's the problem with that? Well, in a normal language with normal &lt;code&gt;==&lt;/code&gt; operator, it can be used not just for numbers and strings, but also for arrays, hashes, sets, or whatever else we throw at it.&lt;/p&gt;

&lt;p&gt;In Raku we have this abomination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="c1"&gt;# Numerical&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# String equality&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# Looks like it works...&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;# Raku sorts the key order (unlike Ruby) so they match&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# WTF? How is any of these True?&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;one&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="p"&gt;"]&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one two&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;1 2&lt;/span&gt;&lt;span class="p"&gt;"];&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1 2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's &lt;code&gt;True&lt;/code&gt; for every one of them.&lt;/p&gt;

&lt;p&gt;Also notice completely insane default stringification rules (&lt;code&gt;Str()&lt;/code&gt;) - instead of &lt;code&gt;Str([1, 2])&lt;/code&gt; being something sensible like &lt;code&gt;[1, 2]&lt;/code&gt;, it's &lt;code&gt;"1 2"&lt;/code&gt;. And for hashes, what the hell with those tabs and newlines?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h3&gt;

&lt;p&gt;There's another popular language with broken inequality - JavaScript. And the traditional workaround would be to &lt;code&gt;JSON.stringify(a) === JSON.stringify(b)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see how this goes. First Rakudo comes without JSON in standard library, and without package manager.&lt;/p&gt;

&lt;p&gt;I needed to &lt;code&gt;brew uninstall rakudo moarvm nqp&lt;/code&gt; and &lt;code&gt;brew install rakudo-star&lt;/code&gt; instead to get its &lt;code&gt;zef&lt;/code&gt; package manager. That is really weird, but a lot of languages have packaging quirks, so let's roll with it. I didn't actually need to install any packages, as &lt;code&gt;rakudo-star&lt;/code&gt; package (but not &lt;code&gt;rakudo&lt;/code&gt; package) already included &lt;code&gt;JSON::Tiny&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But wait a minute, if Raku doesn't distinguish numbers from strings, how is it even doing JSON at all!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(["&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="p"&gt;"]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out this works just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./json.raku
[ 1, 2 ]
[ "1", "2" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Raku acts as if there was no distinction between numbers and strings, but it's there behind the scenes internally. Number &lt;code&gt;2&lt;/code&gt; and string &lt;code&gt;"2"&lt;/code&gt; are 99% same, except when they aren't.&lt;/p&gt;

&lt;p&gt;I still remember this bug from my Perl days, where printing a variable would change its type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl -l&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which led to this WTF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./json_bug.pl
2
2
"2"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you'd print something for debugging, and suddenly your program would work completely differently. That was a fun evening, I still remember it 15 years later, and that issue was buried much deeper than this.&lt;/p&gt;

&lt;p&gt;Anyway, I cannot reproduce it in Raku:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where it definitely works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./json_bug.raku
2
2
2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we'll probably still run into the issue where numbers and strings are 99% same except where they aren't. Maybe more experienced Raku programmers can tell me how to trigger this issue in Raku.&lt;/p&gt;

&lt;p&gt;Oh and notice kebab-case identifiers are supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-equality"&gt;
  &lt;/a&gt;
  JSON Equality
&lt;/h3&gt;

&lt;p&gt;Let's try our equality-by-JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;-equal($a, $b) {&lt;/span&gt;
  &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# True as expected&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;# False as expected&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[1, 2]&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

&lt;span class="c1"&gt;# Also True...&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# Also False...&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

&lt;span class="c1"&gt;# Totally random if True or False&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First three tests are fine. Then &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt; are same, as are &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt; - because these are actually big rationals not floats, let's not get into Raku number system just yet.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt; and &lt;code&gt;"1"&lt;/code&gt; being not JSON-equal is something we already knew about.&lt;/p&gt;

&lt;p&gt;But what about &lt;code&gt;{b=&amp;gt;2, a=&amp;gt;1}&lt;/code&gt; and &lt;code&gt;{a=&amp;gt;1, b=&amp;gt;2}&lt;/code&gt;? &lt;code&gt;Str()&lt;/code&gt; always sorted their keys so they were always &lt;code&gt;eq&lt;/code&gt;, but for JSON conversion their order is not guaranteed, so this program will print &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; at random.&lt;/p&gt;

&lt;p&gt;Overall, total disaster. This can be worked around, but from my Perl and JavaScript experience, not having working universal &lt;code&gt;==&lt;/code&gt; is massive pain that comes up all the time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eqv"&gt;
  &lt;/a&gt;
  EQV
&lt;/h3&gt;

&lt;p&gt;Oh wait, we're not done yet. There's &lt;code&gt;eqv&lt;/code&gt;! Let's see how it does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env raku

# True as expected
say [1, 2] eqv [1, 2];
say {b=&amp;gt;2, a=&amp;gt;1} eqv {a=&amp;gt;1, b=&amp;gt;2};

# This is still True
say 0 eqv -0;

# False as expected
say [1, 2] eqv "[1, 2]";
say "2" eqv "2.0";

# Now this is False too?
say 5 eqv 5.0;
say 1 eqv "1";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the closest to what we got so far. &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;"1"&lt;/code&gt; being different is what we already knew about. But now &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt; are treated by &lt;code&gt;eqv&lt;/code&gt; as different (as integer and rational), even though they were the everywhere else up to this point. It's still the best we got so far, but it's a total embarrassment to design a language without a working universal &lt;code&gt;==&lt;/code&gt; in this century.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h3&gt;

&lt;p&gt;At least Perl never had problems with Unicode, and neither does Raku:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Żółw&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;chars&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Żółw&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;chars&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍰&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which outputs completely correct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./unicode.raku
ŻÓŁW
4
1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#state-and-hashes"&gt;
  &lt;/a&gt;
  State and Hashes
&lt;/h3&gt;

&lt;p&gt;Let's do Fibonacci again, except with memoization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;($n) {&lt;/span&gt;
  &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;%cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;%cache&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Raku has a lot of scopes. &lt;code&gt;my&lt;/code&gt; are the usual local variables. &lt;code&gt;state&lt;/code&gt; are scoped to their function, but they're only initialized once.&lt;/p&gt;

&lt;p&gt;Variable types can be inferred by the sigil - &lt;code&gt;$&lt;/code&gt; are scalar (strings, integers, and so on). &lt;code&gt;@&lt;/code&gt; are arrays. &lt;code&gt;%&lt;/code&gt; are hashes (or dictionaries). Because Raku knows their type, it can initialize them to correct empty values - but i this case we initialize it ourselves.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A //= B&lt;/code&gt; sets A to B if it's missing (&lt;code&gt;||=&lt;/code&gt; checks truthiness of A, and that's not what we want, as 0, empty string etc. are false in Raku). It also returns the return value.&lt;/p&gt;

&lt;p&gt;So this is extremely concise way to do memoization for a language that doesn't have builtin support for memoization specifically.&lt;/p&gt;

&lt;p&gt;Oh and you can use &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and such as a suffix. That definitely improves readability for "guard clauses" (&lt;code&gt;return if ...&lt;/code&gt; or &lt;code&gt;return unless&lt;/code&gt; or &lt;code&gt;break if ...&lt;/code&gt;), not necessarily here with a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#junctions"&gt;
  &lt;/a&gt;
  Junctions
&lt;/h3&gt;

&lt;p&gt;Did you ever want to write &lt;code&gt;if x == 1 | 2 | 3&lt;/code&gt;, but your language wouldn't support it, so you needed to do &lt;code&gt;if x == 1 || x == 2 || x == 3&lt;/code&gt; instead?&lt;/p&gt;

&lt;p&gt;I've got some good news!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What's your name?&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't try to hack me&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's give it a go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./junctions.raku
What's your name?
Alice
Hello, Alice
$ ./junctions.raku
What's your name?
admin
Don't try to hack me
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;get&lt;/code&gt; reads one line, and &lt;code&gt;|&lt;/code&gt; creates a "junction". It's a collection of values in one of the modes (and, or, one, none) that performs all its operations on each element for as long as it can.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some of them match!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All of them match!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./junctions2.raku
Some of them match!
All of them match!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only when evaluated in boolean context junctions collapse to a single value. The code means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one of (&lt;code&gt;1 * 2&lt;/code&gt;, &lt;code&gt;2 * 2&lt;/code&gt;, &lt;code&gt;3 * 2&lt;/code&gt;) equals one of (&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;all of (&lt;code&gt;1 * 2&lt;/code&gt;, &lt;code&gt;2 * 2&lt;/code&gt;) equals one of (&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Junctions are pretty much unique to Raku, and I have no idea if they actually make coding easier, or they're just unnecessary complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regular-expressions"&gt;
  &lt;/a&gt;
  Regular expressions
&lt;/h3&gt;

&lt;p&gt;Perl introduced its own extended regular expressions, and now every single language uses Perl style regular expressions, so it was a huge success. The pre-Perl version is basically forgotten. Perl's regular expressions were at least largely compatible with pre-Perl kind, so they were limited to using small number of symbols in some twisted combinations to achieve extra functionality.&lt;/p&gt;

&lt;p&gt;Raku obviously introduced its own regular expression system, which tries to be more expressive and is intentionally not backwards compatible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What's your name?&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="sr"&gt;/^&amp;lt;[a..z]&amp;gt;+$/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="sr"&gt;/^&amp;lt;[A..Z]&amp;gt;+$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please use consistent case&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is going on here...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./regexp.raku
What's your name?
alice
Hello, alice
$ ./regexp.raku
What's your name?
BOB
Hello, BOB
$ ./regexp.raku
What's your name?
Charlie
Please use consistent case
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, the pattern matching with &lt;code&gt;~~&lt;/code&gt; (Perl and Ruby use &lt;code&gt;=~&lt;/code&gt;). Any junction for &lt;code&gt;|&lt;/code&gt;. Neither is specific to regular expressions.&lt;/p&gt;

&lt;p&gt;Interesting things start with &lt;code&gt;/^&amp;lt;[a..z]&amp;gt;+$/&lt;/code&gt;. Raku regular expressions has a lot of new features, and so they had to change some existing syntax to make space for all the new features. Character range &lt;code&gt;[a-z]&lt;/code&gt; became &lt;code&gt;&amp;lt;[a..z]&amp;gt;&lt;/code&gt;. The &lt;code&gt;[]&lt;/code&gt; got repurposed to be non-capturing group (&lt;code&gt;(?:)&lt;/code&gt; in Perl regexp), which is arguably much more important functionality.&lt;/p&gt;

&lt;p&gt;The subject of Raku Regular Expressions is big enough, that I'll need to dedicate a whole episode to it. It's basically a language within a language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unicode-operators"&gt;
  &lt;/a&gt;
  Unicode operators
&lt;/h3&gt;

&lt;p&gt;It really should come at no surprise that Raku has Unicode operators in its syntax. After Julia, this is the second language we're investigating which does it, and I expect this to become mainstream feature of new programming languages going forward.&lt;/p&gt;

&lt;p&gt;Porting Julia's example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;⊆&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="err"&gt;∈&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;π&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./unicode_operators.raku
True
True
1.4999999999999998
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like in Julia, set operations like &lt;code&gt;∈&lt;/code&gt; and &lt;code&gt;⊆&lt;/code&gt; work the same. &lt;code&gt;π&lt;/code&gt; is the usual constant. Unlike Julia, &lt;code&gt;.sin&lt;/code&gt; is a method not a standalone function, and &lt;code&gt;.sqrt&lt;/code&gt; is a method and there's no &lt;code&gt;√&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Neither Raku nor Julia go overboard with Unicode operators, but they can definitely make math code more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kitchen-sink-language-design"&gt;
  &lt;/a&gt;
  Kitchen Sink Language Design
&lt;/h3&gt;

&lt;p&gt;Raku is a kitchen-sink language like Perl or Scala. They tend to try out all the ideas, courageously break with pass assumptions, and some of these turns out to be amazing. But all the not-so-good ideas have high mental cost, so kitchen-sink languages tend to top the charts of the most disliked as well.&lt;/p&gt;

&lt;p&gt;Sometimes it works wonders. Perl might have fallen far from its peak popularity, but it will live forever as the ancestor of pretty much every modern programming language. Ruby, JavaScript, PHP (and to lesser degree Python) are all basically Perl's children, and these languages in turn influenced everything else. It revolutionized programming language design. Just compare the last major pre-Perl language Java, which is a total usability disaster, with any of the post-Perl designs.&lt;/p&gt;

&lt;p&gt;On a smaller scale CoffeeScript tried to throw a kitchen sink at making JavaScript bearable, and while it's largely dead now, ES6+ wouldn't exist without CoffeeScript paving the way.&lt;/p&gt;

&lt;p&gt;But just as often, it doesn't work at all. Kitchen sink languages like Raku or Scala didn't get far, and so far didn't have much impact on other languages either.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-raku"&gt;
  &lt;/a&gt;
  Should you use Raku?
&lt;/h3&gt;

&lt;p&gt;If you're interested in programming language design, or thinking about designing your own programming language, Raku is definitely worth checking out, even if you don't plan to write any real code in it. It tries out so many things, I barely scratched the surface here.&lt;/p&gt;

&lt;p&gt;If you're a Perl programmer who for some reason doesn't want to switch to Ruby or Python like most, Raku might be worth a try. For me it hold on to too many bad design ideas from Perl, but if you're already accepting the costs, maybe it's not a big deal.&lt;/p&gt;

&lt;p&gt;On the other hand, if you think Ruby is already Perl 6, or can't stand Perl style languages, then Raku will be highly unappealing.&lt;/p&gt;

&lt;p&gt;I haven't really explored how well Raku works in pragmatic terms, such as its ecosystem, performance, and so on. From a quick look it doesn't look too great.&lt;/p&gt;

&lt;p&gt;I'd definitely recommend Raku as language to give a go for a fun weekend, even if few would want to use it for anything more serious.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-26-raku"&gt;Code for the Raku episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/languages-speedrun-episode-26-raku-perl-6-4emf</id>
    <published>2021-12-16T21:11:07Z</published>
    <updated>2021-12-16T21:11:07Z</updated>
    <category term="raku"/>
    <category term="perl"/>
    <category term="perl6"/>
  </entry>
  <entry>
    <title>Larry Wall website???</title>
    <link rel="alternate" href="https://dev.to/nic3point0/larry-wall-website-195p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Just wondoring if Laryy Wall and other programmers from back-in-the-day will ever update their <a href="http://www.wall.org/~larry/">websites</a>...</p>

<p>Photo by <strong><a href="https://www.pexels.com/@lilzidesigns?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels">Laura Balbarde</a></strong> from <strong><a href="https://www.pexels.com/photo/pile-of-cassette-tapes-3642350/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels">Pexels</a></strong></p>

</div>
    </content>
    <author>
      <name>Nic</name>
    </author>
    <id>https://dev.to/nic3point0/larry-wall-website-195p</id>
    <published>2021-12-16T18:07:24Z</published>
    <updated>2021-12-16T18:07:24Z</updated>
    <category term="perl"/>
    <category term="design"/>
  </entry>
  <entry>
    <title>Perl "libpth" is different from  GCC library searching path.</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/perl-libpth-is-different-from-gcc-library-searching-path-50j0" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;Perl "libpth".&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -V
Summary of my perl5 (revision 5 version 32 subversion 1) configuration:

  Platform:
    osname=linux
    osvers=4.15.0-55-generic
    archname=x86_64-linux
    uname='linux tk2-259-39003 4.15.0-55-generic #60-ubuntu smp tue jul 2 18:22:20 utc 2019 x86_64 x86_64 x86_64 gnulinux '
    config_args='-de -Dprefix=/home/kimoto/perl5/perlbrew/perls/perl-5.32.1 -Aeval:scriptdir=/home/kimoto/perl5/perlbrew/perls/perl-5.32.1/bin'
    hint=recommended
    useposix=true
    d_sigaction=define
    useithreads=undef
    usemultiplicity=undef
    use64bitint=define
    use64bitall=define
    uselongdouble=undef
    usemymalloc=n
    default_inc_excludes_dot=define
    bincompat5005=undef
  Compiler:
    cc='cc'
    ccflags ='-fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64'
    optimize='-O2'
    cppflags='-fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'
    ccversion=''
    gccversion='7.5.0'
    gccosandvers=''
    intsize=4
    longsize=8
    ptrsize=8
    doublesize=8
    byteorder=12345678
    doublekind=3
    d_longlong=define
    longlongsize=8
    d_longdbl=define
    longdblsize=16
    longdblkind=3
    ivtype='long'
    ivsize=8
    nvtype='double'
    nvsize=8
    Off_t='off_t'
    lseeksize=8
    alignbytes=8
    prototype=define
  Linker and Libraries:
    ld='cc'
    ldflags =' -fstack-protector-strong -L/usr/local/lib'
    libpth=/usr/local/lib /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed /usr/include/x86_64-linux-gnu /usr/lib /lib/x86_64-linux-gnu /lib/../lib /usr/lib/x86_64-linux-gnu /usr/lib/../lib /lib
    libs=-lpthread -lnsl -ldl -lm -lcrypt -lutil -lc
    perllibs=-lpthread -lnsl -ldl -lm -lcrypt -lutil -lc
    libc=libc-2.27.so
    so=so
    useshrplib=false
    libperl=libperl.a
    gnulibc_version='2.27'
  Dynamic Linking:
    dlsrc=dl_dlopen.xs
    dlext=so
    d_dlsymun=undef
    ccdlflags='-Wl,-E'
    cccdlflags='-fPIC'
    lddlflags='-shared -O2 -L/usr/local/lib -fstack-protector-strong'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GCC library searching path&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gcc -print-search-dirs | perl -pi -e 's/:/\n/g'
-i used with no filenames on the command line, reading from STDIN.
install
 /usr/lib/gcc/x86_64-linux-gnu/7/
programs
 =/usr/lib/gcc/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/
/usr/lib/gcc/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/bin/
libraries
 =/usr/lib/gcc/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/lib/x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/lib/x86_64-linux-gnu/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/lib/../lib/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/7/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/
/lib/x86_64-linux-gnu/7/
/lib/x86_64-linux-gnu/
/lib/../lib/
/usr/lib/x86_64-linux-gnu/7/
/usr/lib/x86_64-linux-gnu/
/usr/lib/../lib/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/lib/
/usr/lib/gcc/x86_64-linux-gnu/7/../../../
/lib/
/usr/lib/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find this problem when Perl can't find -lgomp although gcc find -lgomp on Ubuntu 18.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/perl-libpth-is-different-from-gcc-library-searching-path-50j0</id>
    <published>2021-12-16T06:37:09Z</published>
    <updated>2021-12-16T06:37:09Z</updated>
    <category term="perl"/>
    <category term="gcc"/>
    <category term="c"/>
    <category term="ubuntu"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 143: Calculator and Stealthy Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/12/post.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10585</id>
    <published>2021-12-15T15:05:33Z</published>
    <updated>2021-12-15T15:06:45Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 143 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-143/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 19, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Calculator</h2>

<p><em>You are given a string, <code>$s</code>, containing mathematical expression.</em></p>

<p><em>Write a script to print the result of the mathematical expression. To keep it simple, please only accept</em> <code>+ - * ()</code>.</p>

<p><em>Example 1:</em></p>

<pre><code>Input: $s = "10 + 20 - 5"
Output: 25
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $s = "(10 + 20 - 5) * 2"
Output: 50
</code></pre>

<h3>Calculator in Raku</h3>

<p>This is a perfect case where we could showcase the use of grammars in Raku. However, we have a much simpler solution: the <a href="https://docs.raku.org/routine/EVAL">EVAL</a> routine will evaluate (i.e. compile and execute) an input string as a piece of Raku code and return the result. So we will use here this simpler solution (but will provide below an example of implementation with a grammar). There is, however, a big caveat: the <code>EVAL</code> routine <em>is dangerous</em> because its input string may contain malicious code. For that reason, you need to use the <a href="https://docs.raku.org/language/pragmas#index-entry-MONKEY-SEE-NO-EVAL__pragma">MONKEY-SEE-NO-EVAL</a> pragma. If we try to use <code>EVAL</code> without turning on first the <code>MONKEY-SEE-NO-EVAL</code> (or <code>MONKEY</code>) pragma, we get the following error message:</p>

<blockquote>
  <p>EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma
to override this error but only if you&#8217;re VERY sure your data contains
no injection attacks).</p>
</blockquote>

<p>The <code>EVAL</code> routine is particularly dangerous if its input string comes from outside the program (for example as an input parameter, user input, or input file). A typical example would be a malicious user entering a string calling the operating system to execute a shell command such as <code>rm -rf /*</code> (don&#8217;t try this command), which may wipe out the entire file system (at least if you have root privileges). In our case, the strings to be <code>EVAL</code>ed come from within our program, so, assuming we know what we&#8217;re doing, we can be reasonably confident that nothing bad should happen. However, to make our <code>calc</code> subroutine completely innocuous, we use a regular expression to detect and reject any input string which doesn&#8217;t consist only of digits, spaces, arithmetic operators <code>+ - *</code>, and parentheses.</p>

<pre><code>use v6;
use MONKEY-SEE-NO-EVAL;

sub calc (Str $expr) {
    return "Not a valid arithmetic expression" unless 
        $expr ~~ /^&lt;[-\d \s +*()]&gt;+$/;
    return EVAL $expr;
}
for "10 + 20 - 5", "(10 + 20 - 5) * 2", "7 + a", "6 * 7" -&gt; $test {
    say calc $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./calculator.raku
25
50
Not a valid arithmetic expression
42
</code></pre>

<h3>Calculator in Perl</h3>

<p>In Perl, we will use the <code>eval</code> built-in subroutine, in a way that is similar to the use of <code>EVAL</code> in the Raku solution above. The Perl <code>eval</code> has similar risks: it is dangerous because its input string may contain malicious code. This is particularly risky if the input string comes from outside the program (input parameter, user input, input file, etc.). In our case, the string to be <code>eval</code>ed are hard-coded in our program so that the risk is reasonably small if we know what we&#8217;re doing. However, to make our <code>calc</code> subroutine completely innocuous, we use a regular expression to detect and reject any input string which doesn&#8217;t consist only of digits, spaces, arithmetic operators (<code>+ - *</code>), and parentheses.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub calc {
    my $expr = shift;
    return "Not a valid arithmetic expression" unless 
        $expr =~ /^[-\d\s+*()]+$/;
    return eval $expr;
}
for my $test ("10 + 20 - 5", "(10 + 20 - 5) * 2", "7 + a", "6 * 7") {
    say calc $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./calculator.pl
25
50
Not a valid arithmetic expression
42
</code></pre>

<h2>Task 2: Stealthy Number</h2>

<p><em>You are given a positive number, <code>$n</code>.</em></p>

<p><em>Write a script to find out if the given number is Stealthy Number.</em></p>

<blockquote>
  <p>A positive integer N is stealthy, if there exist positive integers a, b, c, d such that <code>a * b = c * d = N</code> and <code>a + b = c + d + 1</code>.</p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 36
Output: 1

Since 36 = 4 (a) * 9 (b) = 6 (c) * 6 (d) and 4 (a) + 9 (b) = 6 (c) + 6 (d) + 1.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 12
Output: 1

Since 2 * 6 = 3 * 4 and 2 + 6 = 3 + 4 + 1
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $n = 6
Output: 0

Since 2 * 3 = 1 * 6 but 2 + 3 != 1 + 6 + 1
</code></pre>

<p>I had never heard before about stealthy numbers, but the description provided is pretty clear.</p>

<h3>Stealthy Number in Raku</h3>

<p>We basically need to find all divisors of the input number and look at every combination of them to see if it matches the specified criteria.</p>

<p>After having generated all divisors of the input number (in the <code>@divisors</code> array), I thought about using the <code>combinations</code> method to generate all pairs of divisors. But that doesn&#8217;t work properly for perfect squares because the square root of the input number appears only once in the divisors list, and therefore cannot be used twice in the same pair of divisor. For example, if the input integer is 36, we would need to have <code>(6, 6)</code> in the list of divisor pairs. The <code>combinations</code> method cannot do that (unless we manually add a second instance of 6 in the divisor list. Rather than adding code for handling such edge case, I found it easier to use the <code>X</code> <a href="https://docs.raku.org/language/operators#index-entry-cross_product_operator">cross product operator</a> between the <code>@divisors</code> array and itself and to filter out all those pairs of divisors whose product is not equal to the input integer. The result of this operation goes into the <code>@div-pairs</code> array. </p>

<p>Then, we can use the <code>combinations</code> method to generate pairs of pairs and check wheter they satisfy the second condition (<code>a + b = c + d + 1</code>). Since (a, b) and (c, d) are interchangeable, we actually check whether <code>a + b - c - d</code> is equal to either 1 or -1 (we do it here with a junction because it&#8217;s fun, but we could also compare the absolute value of that expression with 1, as we do below in our Perl implementation).</p>

<pre><code>use v6;

sub stealthy-nums (UInt $n) {
    my @divisors = grep {$n %% $_}, 1..$n;
    my @div-pairs = grep { $_[0] * $_[1] == $n }, (@divisors X @divisors);
    # say @div-pairs;
    for @div-pairs.combinations: 2 -&gt; $c {
        return $c if $c[0][0] + $c[0][1] - $c[1][0] - $c[1][1] == any(1, -1)
    }
    return False
}

for &lt;36 12 6&gt; -&gt; $test {
    my $result = stealthy-nums $test;
    say "$test \t", 
    $result ?? "1 -&gt; $result" !! 0;
}
</code></pre>

<p>This script display the following output:</p>

<pre><code>$ raku ./stealthy-numbers.raku
36  1 -&gt; 4 9 6 6
12  1 -&gt; 2 6 3 4
6   0
</code></pre>

<p>I thought it would interesting to find more stealthy numbers. So I changed the final <code>for</code> block to this:</p>

<pre><code>for (1..100) -&gt; $test {
    my $result = stealthy-nums $test;
    say "$test \t $result" if $result;
}
</code></pre>

<p>and found 8 stealthy numbers below 100:</p>

<pre><code>raku ./main.raku
4    1 4 2 2
12   2 6 3 4
24   3 8 4 6
36   4 9 6 6
40   4 10 5 8
60   5 12 6 10
72   6 12 8 9
84   6 14 7 12
</code></pre>

<p>Increasing the range to 1..1000, we find that there are 39 stealthy numbers below 1000, and that they are all even. And, by the way, there are 2851 stealthy integers below 1,000,000.</p>

<h3>Stealthy Number in Perl</h3>

<p>The Perl solution is essentially a port of the Raku solution, except that I had to write my own simple <code>cross</code> subroutine, since the cross product operator doesn&#8217;t exist in Perl.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub cross {
    my @nums = @_;
    my @num_pairs;
    for my $i (@nums) {
        for my $j (@nums) {
            next if $j &gt; $i; # filter out duplicates such as [12, 3] and [3, 12]
            push @num_pairs, [$i, $j];
        }
    }
    return @num_pairs;
}

sub stealthy_nums  {
    my $n = shift;
    my @divisors = grep {$n % $_ == 0} 1..$n;
    my @div_pairs = grep { $_-&gt;[0] * $_-&gt;[1] == $n } cross @divisors;
    for my $c (@div_pairs) {
        for my $d (@div_pairs) {
            return "@$c and @$d" if abs($c-&gt;[0] + $c-&gt;[1] - $d-&gt;[0] - $d-&gt;[1]) == 1;
        }
    }
    return 0;
}

for my $test (qw &lt;36 12 6&gt;) {
    my $result = stealthy_nums $test;
    say "$test \t", 
    $result ? "1 -&gt; $result" : 0;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl stealthy-numbers.pl
36      1 -&gt; 6 6 and 9 4
12      1 -&gt; 4 3 and 6 2
6       0
</code></pre>

<h2>A Raku Grammar for a Calculator</h2>

<p>For implementing a calculator in Raku, we used the built-in <code>EVAL</code> routine, as this a a very simple solution. I can&#8217;t resist, however, to the desire and fun of presenting a full-fledged Raku grammar. This is derived in large part from a solution to the exercises that I provided in my Raku book.</p>

<h3>The Calculator Grammar</h3>

<p>Here&#8217;s one way to write the grammar itself:</p>

<pre><code>my grammar Calculator {
    rule TOP            { &lt;expr&gt; }
    rule expr           { &lt;term&gt; + % &lt;plus-minus-op&gt; }
    token plus-minus-op { [&lt; + - &gt;] }
    rule term           { &lt;atom&gt; + % &lt;mult-div-op&gt; }
    token mult-div-op   { [&lt; * / &gt;] }
    rule atom {
        | &lt;num&gt; { make +$&lt;num&gt; }
        | &lt;paren-expr&gt; { make $&lt;paren-expr&gt;.made}
    }
    rule num            { &lt;sign&gt; ? [\d+ | \d+\.\d+ | \.\d+ ] }
    rule paren-expr     { '(' &lt;expr&gt; ')' }
    token sign          { [&lt; + - &gt;] }
}
</code></pre>

<p>This solution is quite simple.</p>

<p>An expression (<code>expr</code>) is made of one or several terms separated by <code>+</code> or <code>-</code> operators. A <code>term</code> is made of one or several atoms separated by <code>*</code> or <code>/</code> operators. An <code>atom</code> may be a bare number or a parenthesized expression.</p>

<p>This guarantees that precedence rules are satisfied. Multiplications and divisions will be evaluated before additions and subtractions, since, when parsing an expression, you need to evaluate the individual terms before you can complete the expression evaluation. Similarly, since a parenthesized expression is an atom, it will have to be evaluated before the term in which it appears can be fully evaluated. Note that, in the case 
of a parenthesized expression, the <code>expr</code> rule is called recursively.</p>

<h3>The Actions Class</h3>

<p>Notice that we have included two actions in the grammar (in the <code>atom</code> rule). One reason was for convenience: since the <code>atom</code> rule covers two very different named sub-rules, it is a bit easier to include the action just in the context of the sub-rules. If an action had been attached to the <code>atom</code> rule, it would have required finding out which sub-rule had been matched to know which action to perform. Nothing difficult, but doing so would have made the code slightly more complex. The other reason was for pedagogical purposes: although it often makes sense to create an actions class, it is useful to know that actions may be inserted in the grammar part. For a very simple grammar, it might be over-engineering to create an actions class with just one or two actions.</p>

<p>The actions class might look like this:</p>

<pre><code>class CalcActions {
    method TOP ($/) {
        make $&lt;expr&gt;.made
    }
    method expr ($/) {
        $.calculate($/, $&lt;term&gt;, $&lt;plus-minus-op&gt;)
    }
    method term ($/) {
        $.calculate($/, $&lt;atom&gt;, $&lt;mult-div-op&gt;)
    }
    method paren-expr ($/) {
         make $&lt;expr&gt;.made;
    }
    method calculate ($/, $operands, $operators) {
        my $result = (shift $operands).made;
        while my $op = shift $operators {
            my $num = (shift $operands).made;
            given $op {
                when '+' { $result += $num; }
                when '-' { $result -= $num; }
                when '*' { $result *= $num; }
                when '/' { $result /= $num; }
                default  { die "unknown operator "}
            }
        }
        make $result;
    }
}
</code></pre>

<p>The <code>calculate</code> method computes expressions (terms separated by addition or subtraction operators) and terms atoms separated by multiplication or division operators) from left to right, since these operators are left associative.</p>

<h3>Testing the Grammar and Actions Class</h3>

<p>This grammar for a calculator and its associated actions class may be unit tested with the following code:</p>

<pre><code>for |&lt; 3*4 5/6 3+5 74-32 5+7/3 5*3*2 (4*5) (3*2)+5 4+3-1/5 4+(3-1)/4 &gt;,
    "12 + 6 * 5", " 7 + 12 + 23", " 2 + (10 * 4) ", "3 * (7 + 7)" { 
    my $result = Calculator.parse($_, :actions(CalcActions));
    # say $result;
    printf "%-15s %.3f\n", $/,  $result.made if $result;
}
</code></pre>

<p>which will display the following results:</p>

<pre><code>3*4             12.000
5/6             0.833
3+5             8.000
74-32           42.000
5+7/3           7.333
5*3*2           30.000
(4*5)           20.000
(3*2)+5         11.000
4+3-1/5         6.800
4+(3-1)/4       4.500
12 + 6 * 5      42.000
 7 + 12 + 23    42.000
 2 + (10 * 4)   42.000
3 * (7 + 7)     42.000
</code></pre>

<p>So, these limited tests yield the desired results.</p>

<p>You might wonder whether this code works correctly with nested parenthesized expressions. I originally thought, when I wrote this code, that it might malfunction and that I might have to change or add something to get nested parenthesized expressions right and properly balanced. It turns out that it works fine out of the box. For example, consider the following test code with relatively deeply nested parenthesized expressions:</p>

<pre><code>for "(((2+3)*(5-2))-1)*3", "2 * ((4-1)*((3*7) - (5+2)))"  { 
    my $result = Calculator.parse($_, :actions(CalcActions));
    printf "%-30s %.3f\n", $/,  $result.made if $result;
}
</code></pre>

<p>The result is correct:</p>

<pre><code>(((2+3)*(5-2))-1)*3            42.000
2 * ((4-1)*((3*7) - (5+2)))    84.000
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 26, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent of Code Day 9 to 14</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_09_to_14.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_09_to_14.html</id>
    <updated>2021-12-14T17:51:00+00:00</updated>
    <category term="perl"/>
    <summary type="html">Five more days of coding adventures!

Day 9 - Smoke Basin

We need to find "low points" in a two-dimensional map of integers ranging from 0 to 9.

For part 1 I used a hash to store the map (with keys </summary>
    <content type="html">&lt;p&gt;Five more days of coding adventures!&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/9"&gt;Day 9&lt;/a&gt; - Smoke Basin&lt;/h4&gt;

&lt;p&gt;We need to find "low points" in a two-dimensional map of integers ranging from 0 to 9.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_1.pl"&gt;part 1&lt;/a&gt; I used a hash to store the map (with keys like "3_2" for row 3/col 2), and looked in the 4 bordering fields to find lower values (adjusting for corners/borders), I use the classic method (learned in previous years) of looping through a list of offsets to look for the neighbouring values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $move ([-1,0],[1,0],[0,-1],[0,1]) {
     my $look = ($r + $move-&amp;gt;[0] ).':'.($c + $move-&amp;gt;[1]);
     my $val = $map{ $look };
     ...
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the value I'm looking at is lower than all the four neighbours, count it. I needed to implement some special cases for the rows at the edges of the map, which could have been avoided if I had remembered another class trick: Pad the map with some values (in this case, &lt;code&gt;9&lt;/code&gt; is perfect, because it's the highest values, thus ensuring that all other values are lower). See for example &lt;a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-09.html"&gt;Abigail's solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_2.pl"&gt;part 2&lt;/a&gt; I found the joining/splitting of row/cols too annoying so rewrote to a two-dim array. Used a recursive function to walk the map, starting from the low points. After visiting a location, I set it to -1, and stopped when hitting a 9 (or a previously visited -1).&lt;/p&gt;

&lt;p&gt;The solutions is quite long because it builds on the solution for part 1 to find the low points. I guess it could be shortened quite bit...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/10"&gt;Day 10&lt;/a&gt; - Syntax Scoring&lt;/h4&gt;

&lt;p&gt;I found this day quite easy (definitely easier than some earlier days), and it took me longer to get the points calculation right than to figure out the closing parens (using a simple stack onto which I push open chars, and then check if we have a matching closing one).&lt;/p&gt;

&lt;p&gt;While these solutions could be heavily golfed, I leave then at their current very readable state - if not only to fight certain prejudices against Perl :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/10_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/10_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/11"&gt;Day 11&lt;/a&gt; - Dumbo Octopus&lt;/h4&gt;

&lt;p&gt;Finally, a Game-of-Life-y task. And not too hard. But I wasted some time on the first part because I did the general increment of the octopus in the same step as the flashing, which worked for the first few rows and generations, but later broke down.&lt;/p&gt;

&lt;p&gt;This time we need to look at all the 8 neighbours in a grid, so the list of "movement" (in fact, look-instructions) was a bit longer than on day 9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, and also I find it &lt;b&gt;much easier&lt;/b&gt; to work with rows &lt;code&gt;$r&lt;/code&gt; and columns &lt;code&gt;$c&lt;/code&gt; instead of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On this day I started to think about creating something like Acme::AdventOfCode containing a grab-bag of helpful functions (parse a map, draw a map, etc). Maybe I'll prepare something later / next year...&lt;/p&gt;

&lt;p&gt;For part 2 I just needed to replace the &lt;code&gt;for&lt;/code&gt; loop with a &lt;code&gt;while (1)&lt;/code&gt; and stop when all octopus flash.&lt;/p&gt;

&lt;p&gt;Here's a very nice visualisation using an &lt;a href="https://www.reddit.com/r/adventofcode/comments/re000o/2021_day_11_part_2_c_trying_to_do_everything_on/"&gt;arduino&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/11_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/11_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/12"&gt;Day 12&lt;/a&gt; - Passage Pathing&lt;/h4&gt;

&lt;p&gt;I had a family event on Sunday, so only got to work on the tasks in the evening, and was not very motivated. Also, this was a rather standard path solving / graph traversal. So here is my boring code (which was cheated^winsipired by reading a few of the solutions on reddit)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/12_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/12_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/13"&gt;Day 13&lt;/a&gt; - Transparent Origami&lt;/h4&gt;

&lt;p&gt;Again a very nice task! We need to "fold" a very big piece of transparent paper that's marked with some dots. After a physically impossible number of folds a code will appear (that was part 2, part 1 just tested the basic folding algorithm).&lt;/p&gt;

&lt;p&gt;Here you can watch somebody &lt;a href="https://www.reddit.com/r/adventofcode/comments/rfp213/2021_day_13_folding_with_a_folding_phone/"&gt;solving it on a folding phone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_1.pl"&gt;first part&lt;/a&gt; (not cleaned up) I tried to be smart and only implement one folding dimension, and just rotate the map for the other dimension. But unfortunately I'm too stupid to come up with a working matrix rotation in 10 minutes, so I just copied the folding algorithm and adapted it for the other dimension.&lt;/p&gt;

&lt;p&gt;I also got a wrong result first, because when the instructions said we should "count the dots", I counted the actual dots &lt;code&gt;.&lt;/code&gt;, but those represent emptiness, and we need to count &lt;code&gt;#&lt;/code&gt; which represent the dots. I wonder if this was worded like that on purpose..&lt;/p&gt;

&lt;p&gt;For the &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_2.pl"&gt;second part&lt;/a&gt; (after submitting it..) I replaced the &lt;code&gt;#&lt;/code&gt; with &lt;code&gt;█&lt;/code&gt;, which makes for much easier to read output. Oh, and I had to adapt the folding algorithm a bit to align the folded parts on the fold, and not on the top row:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;splice( @map, $at, 1 );                       # remove the fold
 my @low = splice( @map, $at, @map - $at );    # fold it
 my $r   = @map - @low;                        # make sure the fold aligns
 for my $folded ( reverse @low ) {
     my $c = 0;
     for my $mark (@$folded) {
         $map[$r][$c] = $mark if $mark eq '█';    # rub through
         $c++;
     }
     $r++;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the line with the comment "make sure the fold aligns", where I adjust the starting row to the difference between the two parts of the fold. This was only needed for one fold (for my input), but I still added to both cases.&lt;/p&gt;

&lt;p&gt;Here's the output without the fold-alignment-fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   █  ████  ███ █ ██ █    ████ █ ██ █  █ 
   ██ ██ █ █  █ ████ █    █ ██ ████ ████ 
    █ ████  ███ ████ █    █ █  ███  ████ 
 █  █ ████ ███  ████ █    █ ██ █ █  ████ 
 █  █ ███  ████ █ ██ █ ██ █ ██ █ █  █  █ 
  ██  █ ██ ████ ███  ███  ████ █ ██ █  █ &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One could try to guess, but fixing it was easier and yields"&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ██ ███  ████ ███  █     ██  █  █ █  █ 
    █ █  █    █ █  █ █    █  █ █ █  █  █ 
    █ █  █   █  ███  █    █    ██   ████ 
    █ ███   █   █  █ █    █ ██ █ █  █  █ 
 █  █ █ █  █    █  █ █    █  █ █ █  █  █ 
  ██  █  █ ████ ███  ████  ███ █  █ █  █ &lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was the first time I got a 4-digit rank (8532 / 9122), but not because I was especially fast / smart, but because I woke up very early and couldn't get back to sleep, and thus started at ~6:30 (local time)&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/14"&gt;Day 14&lt;/a&gt; - Extended Polymerization&lt;/h4&gt;

&lt;p&gt;I had 20 minutes time until a meeting started, so I ignored the "This polymer grows quickly" warning for the first part, and implemented an array based solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $step (1 .. 10) {
    my @new;
    for (my $i=0; $i&amp;lt;@poly-1; $i++) {
        push( @new, $rules{$poly[$i].$poly[$i+1]}-&amp;gt;@* );
    }
    push( @new, $poly[-1] );
    @poly = @new;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks up the current pair (&lt;code&gt;$poly[$i].$poly[$i+1]&lt;/code&gt;) in the list of rules, where for example &lt;code&gt;'NH'&lt;/code&gt; will return &lt;code&gt;'NC','CH'&lt;/code&gt; and push the two new pairs onto the new version of the polymer.&lt;/p&gt;

&lt;p&gt;Worked like a charm for &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_1.pl"&gt;part 1&lt;/a&gt;. But died after ~22 steps (far from the 40 steps required for part 2) for lack of &lt;span class="caps"&gt;RAM &lt;/span&gt;(and I have loads!).&lt;/p&gt;

&lt;p&gt;During my meeting (ahem..) I fiddled a bit with the output to check if there is some regularity I could use to just forecast the result. There wasn't. Linked lists also did not seem reasonable, because we didn't need to insert stuff somewhere into an array. (Linked lists where used in previous years when plain arrays where to slow)&lt;/p&gt;

&lt;p&gt;So I couldn't resist to check &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;reddit&lt;/a&gt; (the meeting was still ongoing..) where I was greeted by a lot of &lt;a href="/perl/2021_aoc_day_06_to_08.html"&gt;Lanternfish&lt;/a&gt; memes. Then it made click.&lt;/p&gt;

&lt;p&gt;I was &lt;b&gt;again&lt;/b&gt; fooled by the array-heavy problem description, when in fact all we had to do was count the pairs (of which there where only a few), and increment the pairs based on the rules: So if I see &lt;code&gt;NH&lt;/code&gt; (and we already have 10 of them), I just need to increment the counter of &lt;code&gt;NC&lt;/code&gt; and &lt;code&gt;CH&lt;/code&gt; by 10:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $step (1 .. 40) {
     my %new;
     while (my ($pair,$count) = each %pairs) {
         $new{ $rules{$pair}[0] } += $count;
         $new{ $rules{$pair}[1] } += $count;
     }
     %pairs = %new;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest was a bit of fiddling with the resulting pair counts to count each letter, not forgetting that the last letter in the original input has to be added once by hand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %count = ($poly[-1] =&amp;gt; 1);
 while (my ($pair,$count) = each %pairs) {
     my ($f,$s)=split(//,$pair);
     $count{$f}+=$count;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sort and subtract, and done!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>#542 - Perl Advent Calendar</title>
    <link rel="alternate" href="https://perlweekly.com/archive/542.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How you all doing? Are you making the most of the festive season?</p>
<p>In the <a href="https://perlweekly.com/archive/540.html">540th edition</a> of the weekly newsletter, I mentioned <strong>Advent Calendars</strong>. I noticed some activity in the GitHub repository for the <strong>Perl Advent Calendar</strong> and was hoping to see another exciting edition full of Perl projects. A friend of mine on <strong>Facebook</strong> mentioned that this year the <a href="http://perladvent.org/2021/index.html">Perl Advent Calendar</a> is looking a bit sparse. At the time of writing this editorial, I have only seen <a href="http://perladvent.org/2021/2021-12-01.html">one post</a> i.e. Day 1 of Year 2021. Being one of many contributors in the past, I am sad to see the current state of the project. I have absolutely no idea what happened this year. I know I have too many things already on my plate but I would like to help to get the <strong>Perl Advent Calendar</strong> back to its original glory.</p>
<p>Talking about <strong>Advent Calendars</strong>, I would like to mention <a href="https://theweeklychallenge.org/blog/advent-calendar-2021">The Weekly Challenge Advent Calendar</a> which has mix of <strong>Perl</strong> and <strong>Raku</strong> like in the past. We have been running this since the beginning i.e. <strong>2019</strong>. You will find some of the fun tasks from the past year being discussed by members of <strong>Team PWC</strong>. I have made a slight change to the look and feel this year. I hope you like it.</p>
<p>How about the <a href="https://24pullrequests.com">24 Pull Requests</a> event?</p>
<p>I have not seen it being discussed either on any of the social platforms e.g. <strong>Facebook</strong>, <strong>Twitter</strong> or <strong>LinkedIn</strong>. I haven't had chance to take part this year. I couldn't take part last year either; what a shame. I still have 10 days and I have booked a few days off work. So there is a possibility I might take part and even complete the challenge. Please wish me luck.</p>
<p>Last but not least, <strong>Curtis</strong>, leader of the <strong>Corinna</strong> project, announced that he had a great meeting with the Perl Steering Council and they are extremely receptive to Corinna going into the core. I can't wait for <strong>Corinna</strong> to be part of core Perl. <strong>Damian</strong> shared the details on one of issues discussed in the same meeting in a <a href="http://blogs.perl.org/users/damian_conway/2021/12/a-not-so-simple-matter-of-privacy.html">blog post</a>. You definitely don't want to miss it.</p>
<p>Enjoy the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/542.html</id>
    <published>2021-12-13T10:00:00Z</published>
    <updated>2021-12-13T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Sleeping Divisors</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/12#pwc142" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given positive integers, $m and $n. Write a script to find total count of 
divisors of $m having last digit $n.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub factor{
    my($n) = @_;
    my @factors = (1);
    foreach  my $j (2 .. sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }
    return @factors;  
}

sub divisors_last_digit{
    my($m, $n) = @_;
    my @divisors;   
    my @factors = factor($m);
    {
        my $factor = pop @factors;
        push @divisors, $factor if $n == substr($factor, -1);    
        redo  if @factors;  
    }    
    return sort {$a &lt;=&gt; $b} @divisors;   
}

MAIN:{
    my($m, $n); 
    my @divisors;
    ($m, $n) = (24, 2); 
    @divisors = divisors_last_digit($m, $n);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
    ($m, $n) = (75, 5); 
    @divisors = divisors_last_digit($m, $n);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
    ($m, $n) = (30, 5); 
    @divisors = divisors_last_digit(30, 5);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
(24, 2): 2 --&gt; 2, 12
(75, 5): 3 --&gt; 5, 15, 25
(30, 5): 2 --&gt; 5, 15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Implement Sleep Sort.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread::Pool;

sub create_workers{
    my @numbers = @_; 
    my $count = @numbers; 
    my $workers = new Thread::Pool({
        optimize =&gt; "cpu", 
        do =&gt; \&amp;sleeper, 
        workers =&gt; $count,
        maxjobs =&gt; $count, 
        minjobs =&gt; $count 
    });
    return $workers;
}

sub sleeper{
    my($n) = @_; 
    sleep($n);
    return $n;   
}

sub sleep_sort{
    my($numbers, $workers) = @_; 
    my @jobs;
    my @sorted;   
    for my $n (@{$numbers}){
        my $job_id = $workers-&gt;job($n);
        push @jobs, $job_id;   
    } 
    {
        my $job = pop @jobs;     
        my @result = $workers-&gt;result_any(\$job);
        if(!@result){    
            push @jobs, $job;  
        }
        else{
            push @sorted, $result[0]; 
        }
        redo if @jobs; 
    }
    $workers-&gt;shutdown; 
    return @sorted;   
}

MAIN:{
    my @numbers;
    my @sorted; 
    @numbers = map{int(rand($_) + 1)} (0 .. 9);  
    print join(", ", @numbers) . "\n"; 
    @sorted = sleep_sort(\@numbers, create_workers(@numbers));  
    print join(", ", @sorted) . "\n"; 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 1, 1, 3, 2, 3, 4, 7, 8, 6
1, 1, 1, 2, 3, 3, 4, 6, 7, 8
$ perl perl/ch-2.pl
1, 1, 1, 2, 2, 5, 5, 2, 1, 9
1, 1, 1, 1, 2, 2, 2, 5, 5, 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I hope participants in The Weekly Challenge enjoyed this! After I saw Jort Sort in 
Challenge 139 I was reminded of other joke sorts and suggested this as a future challenge.
Happily the suggestion was accepted!&lt;/p&gt;

&lt;p&gt;Threading is easy in Perl, which uses an "Interpreter Threads" ("ithreads") model. 
Node.js programmers will find this model familiar as it is exactly what that language 
uses. Unfortunately Perl's documentation writers are not as familiar with concurrent and 
parallel programming topics and some of the official documentation needs updating. 
Unfortunately, this is a bizarrely 
&lt;a href="https://github.com/Perl/perl5/issues/14691"&gt;contentious issue&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;To ensure you are using a perl interpreter with proper ithreads support try this 
one-liner: &lt;code&gt;$ perl -Mthreads -e 0&lt;/code&gt;. If that runs without error you are good to go! If you
get an error you'll need to install a new perl. One convenient option is to use 
&lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;. After installing &lt;code&gt;perlbrew&lt;/code&gt; you'll need to invoke it
like this &lt;code&gt;perlbrew install perl-5.34.0 -Dusethreads&lt;/code&gt;. Please see the Perlbrew 
documentation for additional (straightforward) details if you decide to undertake this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here rather than &lt;code&gt;use threads&lt;/code&gt; directly &lt;code&gt;Thread::Pool&lt;/code&gt; is used. This is a convenient
pattern for using Perl's ithreads. Since each ithread is really a new perl interpreter 
process this allows for some fine tuning of the number of ithreads created to help 
conserve memory usage. In this case the memory conservation is actually somewhat minimal
since Sleep Sort requires us to start a new ithread for each element of the array to be 
sorted. Amusingly, because of the process based threading model, we can quickly crash the 
program by attempting to sort an array whose size causes the system to exceed the number
of allowed processes. Remember, this is a joke sort, right!?!?&lt;/p&gt;

&lt;p&gt;Typically you'd create a pool of workers whose number matched the number of CPU cores
available. That way each core could be tasked by the OS for whatever CPU intensive code
you'd care to run without the ithreads competing too badly with each other.&lt;/p&gt;

&lt;p&gt;Concurrent and parallel programming issues are somewhat advanced. Excellent documentation
exists that is both Perl specific and more general. Be sure to understand the difference 
between ithreads and so called "co-operative thread" models (as used in modules such as
Coro. The "advanced" nature of this topic is due to understanding the various trade-offs 
at play. Deep understanding usually comes from experience of implementing solutions this
way and study of the underlying Operating System concepts. Even the most modest modern
computer systems systems available have multiple cores at your disposal as a programmer
so this effort is certainly worthwhile! The bibliography of &lt;code&gt;perlthrtut&lt;/code&gt; is an excellent
starting point.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-142/"&gt;Challenge 142&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iq.opengenus.org/sleep-sort/"&gt;Sleep Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlthrtut"&gt;perlthrtut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Thread::Pool"&gt;Thread::Pool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodesource.com/blog/worker-threads-nodejs/"&gt;Node.js Workers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc142</id>
    <published>2021-12-12T13:16:00-05:00</published>
    <updated>2021-12-12T13:16:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6969056211502125629</id>
    <published>2021-12-11T23:42:00.001+01:00</published>
    <updated>2021-12-11T23:42:36.055+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxi) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-perlbrew-0.94" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.94&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 167&lt;/li&gt;  &lt;li&gt;Previous version: 0.94 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.2.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.2.1&lt;/strong&gt; on 2021-12-05&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: v1.2.0 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.04" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.04&lt;/strong&gt; on 2021-12-09&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 5.03 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.32&lt;/strong&gt; on 2021-12-11&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.30 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.8002" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8002&lt;/strong&gt; on 2021-12-06&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8001 was 2 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SSIMMS/PDF-API2-2.043" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create, modify, and examine PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.043&lt;/strong&gt; on 2021-12-08&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.042 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9017" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9017&lt;/strong&gt; on 2021-12-10&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9015 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BDFOY/Unicode-Tussle-1.115" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Unicode::Tussle&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Tom's Unicode Scripts So Life is Easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.115&lt;/strong&gt; on 2021-12-11&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.111 was 5 years, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6969056211502125629/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxi-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6969056211502125629"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6969056211502125629"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxi-8-great-cpan-modules-released.html" title="(ccclxxi) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4851525430142946524</id>
    <published>2021-12-11T23:34:00.005+01:00</published>
    <updated>2021-12-11T23:39:10.825+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-12-11 22:30:55 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70293610" target="_blank"&gt;How to convert between the unicode forms: string, name, number&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70297671" target="_blank"&gt;Perl: How is to be interpreted a negation of an array and scalar?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70307461" target="_blank"&gt;cpan says App::cpanminus is up to date but cpanm doesn't come up in /usr/bin&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70257809" target="_blank"&gt;Perl's rpm version differs from "perl -v"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70285870" target="_blank"&gt;Is there a way to remote to a different machine, and run multiple commands there in series (using perl)?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70296344" target="_blank"&gt;Perl issue when encoding mysql data from UTF-8 to UCS-2 for SMPP&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70302112" target="_blank"&gt;Wrapper generator SWIG (C++/Perl): How to access "blessed" objects in a 1d vector&amp;lt;double&amp;gt;in Perl?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70314803" target="_blank"&gt;Perl: Can't use string ("XXX") as a HASH ref while "strict refs" in use&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70247252" target="_blank"&gt;Perl: match regex from the file&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70262927" target="_blank"&gt;Perl Regex return named groups in capture Group one&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4851525430142946524/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4851525430142946524"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4851525430142946524"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxiii-stackoverflow-perl-report.html" title="(dxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>My Favorite Warnings: shadow</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-shadow.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10572</id>
    <published>2021-12-09T21:21:25Z</published>
    <updated>2021-12-09T21:23:21Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>Who knows what evil lurks in the hearts of men? <a href="https://en.wikipedia.org/wiki/The_Shadow">The Shadow</a> knows!</cite></p>

<p>OK, Perl does not literally have a warning about a 1930's pulp fiction and radio serial character. But Perl 5.28 introduced <a href="https://perldoc.perl.org/perldiag#s--variable--s-masks-earlier-declaration-in-same--s"><code>shadow</code></a> as a new warning category for cases where a variable is redeclared in the same scope. Previously, such warnings were under <code>misc</code>.</p>

<p>To tickle this it is sufficient to</p>

<pre>
$ perl -Mstrict -Mwarnings -Mdiagnostics -e 'my $x; my $x;'
</pre>

<p>If your Perl is at least 5.28.0, you get the diagnostic</p>

<pre>
"my" variable $x masks earlier declaration in same scope at -e line 1 (#1)
    (W shadow) A "my", "our" or "state" variable has been redeclared in the
    current scope or statement, effectively eliminating all access to the
    previous instance.  This is almost always a typographical error.  Note
    that the earlier variable will still exist until the end of the scope
    or until all closure references to it are destroyed.
</pre>

<p>Earlier Perls (back to 5.6 which is when <code>warnings</code> was introduced) give a similar warning, but the category is <code>misc</code>.</p>

<p>It is hard to come up with a reason why you would want to disable this warning. An extremely contrived example (do not try this at home!) would be something like</p>

<pre>
sub make_closures {
    my ( $x ) = @_;
    my $c1 = sub { $x * $_[0] };
    my $x = $x * 2;
    return ( $c1, sub { $x * $_[0] } );
}
</pre>

<p>But it would be far simpler and clearer just to call the second variable something else. If you absolutely, positively have to disable this under a range of versions of Perl, the changing category for this warning means you have to jump through some hoops. Something like this should do the trick:</p>

<pre>
my $x; # or whatever
no if "$]" &gt;= 5.028, qw{ warnings shadow };
no if "$]" &lt; 5.028, qw{ warnings misc };
my $x;
</pre>

<p>Note that this warning category only covers earlier declarations in the same scope. Using the same-named variable in nested scopes does not generate this diagnostic:</p>

<pre>
$ perl -Mstrict -Mwarnings -Mdiagnostics -e 'my $x; { my $x; }'
</pre>

<p>is silent.</p>

<p>This warning category also covers <code>our</code> and <code>state</code> variables, and lexical subroutines.</p>

<p><br />
<p><cite>The weed of crime bears bitter fruit! Crime does not pay...The Shadow knows!</cite></p></p>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html">Ex-Warnings</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-deprecated.html"><code>deprecated</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-experimental.html"><code>experimental</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Closures</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/12/closures.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10550</id>
    <published>2021-12-02T03:41:03Z</published>
    <updated>2021-12-09T18:32:43Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>A casual remark about closures which I made in <a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html">My Favorite Warnings: <code>redefine</code></a> touched off a long off-topic exchange with Aristotle that I thought ought to be promoted to a top-level blog entry. The big thing I learned was that <strong>any Perl subroutine can be a closure.</strong> The rest of this blog will try to make clear why I now believe this. The words are my own, as are any errors or misconceptions.</cite></p>

<p>The second sentence of <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">Wikipedia&apos;s definition of a closure</a> says "Operationally, a closure is a record storing a function together with an environment." This makes it sound a lot like an object, and therefore of little additional interest in an O-O environment.</p>

<p>But I came to closures pragmatically through Perl, and to me they were a magic way to make data available somewhere else. All I had to do was get a code reference where it needed to be, and any external lexical variables got the values <i>at the time the reference was taken</i>. So much I understood up to the fatal blog post, and it sufficed for my simple needs.</p>

<p>A fairly typical Perl example of closures in action is:</p>

<pre>
my $add_one = make_adder( 1 );
my $add_two = make_adder( 2 );
say $add_one-&gt;( 5 );  # 6
say $add_two-&gt;( 8 );  # 10

<p>sub make_adder {<br />
    my ( $addend ) = @_;<br />
    return sub { $addend + $_[0] };<br />
}<br />
</pre></p>

<p>A deeper understanding of this magic requires a look at how it works. In this case, the man behind the curtain is the lexical variable <code>$addend</code>.</p>

<p>The usual argument for using lexical variables is that they are only accessable in a given scope -- specifically from the point they come into existence with <code>my</code> to the end of the enclosing scope. Compared to global variables this is a big win in itself. But closures make use of another property of lexical variables: that each entry into the scope results in a new instance of the variable. The returned code reference incorporates not only the code itself but the current instance of any relevant lexicals, in this case <code>$addend</code>. In fact if you add to the above code example</p>

<pre>
say '$add_one is ', $add_one;
say '$add_two is ', $add_two;
</pre>

<p>you will see that though both variables nominally refer to the same subroutine, different values are printed.</p>

<p>To differentiate the behaviour of closures from a simple object, consider:</p>

<pre>
my ( $add_two, $mul_two, $chg_two ) = make_closures( 2 );
my ( $add_four, $mul_four, $chg_four ) = make_closures( 4 );

<p>say $add_two-&gt;( 3 );  # 5<br />
say $mul_two-&gt;( 3 );  # 6<br />
say $add_four-&gt;( 3 ); # 7<br />
say $mul_four-&gt;( 3 ); # 12</p>

<p>$chg_two-&gt;( 5 );      # What will happen now?</p>

<p>say $add_two-&gt;( 3 );  # 8 !!!<br />
say $mul_two-&gt;( 3 );  # 15 !!!<br />
say $add_four-&gt;( 3 ); # Still 7<br />
say $mul_four-&gt;( 3 ); # Still 12</p>

<p>sub make_closures {<br />
    my ( $operand ) = @_;<br />
    return(<br />
        sub { $operand + $_[0] },<br />
	sub { $operand * $_[0] },<br />
	sub { $operand = $_[0] },<br />
    );<br />
}<br />
</pre></p>

<p>The point of this example is that all three closures share not only the value of <code>$operand</code> but the actual instance. If the value of the instance is changed by one closure, the other closures over that instance of the variable see the new value; but closures over other instances of that same variable do not. This was new to me, but not really startling.</p>

<p>The big surprise to me was the realization that <i>any Perl subroutine can be a closure.</i> A normal named subroutine simply closes over the first instance of the variable -- the one that was current when it was compiled.</p>

<p>To see this, add to the end of <code>sub make_closures</code>, just before the right curly bracket,</p>

<pre>
    no warnings 'closure';
    sub add_first { $operand + $_[0] }
</pre>

<p>Subroutine <code>add_first()</code> will only see the first instance of <code>$operand</code>, which is the point of this example. But we need to silence a warning since nested named subroutines making use of the outer subroutine's arguments are so far from normal Perl that they may well represent an error on the part of the programmer. (Translation of the previous sentence: <i>Don't try this at home.</i>)</p>

<p>If we then insert calls to <code>add_first( 3 )</code> both before and after the call to <code>$chg_two-&gt;( 5 );</code> we see that <code>add_first()</code> returns the same value as <code>$add_two-&gt;()</code>, which shows that it accesses the same instance of <code>$operand</code> as <code>$add_two</code> and friends.</p>

<p>After all the above, it should come as no surprise that in the following, <code>sub increment{}</code> and <code>sub decremnt{}</code> close over <code>$number</code>.</p>

<pre>
{
    my $number = 0;
    sub increment {
        return $number++;
    }
    sub decrement {
        return --$number;
    }
}
</pre>

<p>No warning is generated because there is only ever one instance of <code>$number</code>. Of course, if there were only one subroutine above, it could also be written with a <code>state</code> variable. But the whole question of <code>my</code>, <code>our</code>, <code>state</code>, and <code>use vars</code> is a subject for another time.

<p>A demonstration of all the points discussed in this blog post is available on GitHub as <a href="https://gist.github.com/trwyant/d73e823d5ceb267101f1969569351395"><code>closures.t</code></a>.</p>
]]>
        
    </content>
</entry>
  <entry>
  <title>Do you want to partner with the Perl Marketing Committee to organize Hackathons in 2022?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/hackothon-events-planning-2022"/>
  <id>tag:news.perlfoundation.org,2021-12-09:/post/hackothon-events-planning-2022</id>
  <published>2021-12-09T07:04:11</published>
  <updated>2021-12-09T07:04:11</updated>
  <summary>
  <![CDATA[
     In 2022, the Perl Marketing Committee are looking to help organize two hackathon events based on data collected in the survey run by Andrew Solomon. The initial focus areas are Editor/IDE integration, and CPAN Recommendations. The vision of the committee is to help make these events happen by partnering with projects within the Perl community. The goal is to make these events fun, rewarding, and successful, by being as accessible 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Hackathons" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>In 2022, the Perl Marketing Committee are looking to help organize two (or more!) hackathon events based on data collected in <a href="https://news.perlfoundation.org/post/newcomer-survey-results-actions">the survey run by Andrew Solomon.</a> </p>

<p>The initial focus areas are Editor/IDE integration, and CPAN Recommendations.</p>

<p>The vision of the committee is to help make these events happen by partnering with projects within the Perl community.</p>

<p>The goal is to make these events fun, rewarding, and successful, by being as accessible as possible. We also want to increase first time/one off contributions.</p>

<p>The committee hopes to improve accessibility by running these events as a hybrid of in-person and virtual attendance, with a primary location for people to attend in-person, virtual attendance from any location, and perhaps semi-formal/adhoc satellite locations. Further, we are eager to see how language barriers, visual impairment, hearing impairment, etc. can be brought down with video chat software (many with live transcription), text chat with modern translation, etc.</p>

<p>By working with projects before the event, a range of tasks will be available to help people of differing experience levels make their first contribution to the project.</p>

<p>The committee will reach out to various projects in the near future to get the ball rolling.</p>

<p>Comments and feedback are welcome below, especially people keen to be involved with organizing.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Advent of Code Day 6, 7 and 8</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_06_to_08.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_06_to_08.html</id>
    <updated>2021-12-08T22:42:56+00:00</updated>
    <category term="perl"/>
    <summary type="html">Day 6 - Lanternfish

Did the first part via an Array, because I was expecting some GoL stuff in Part 2. There wasn't and the Array-based solution would take forever for part 2. So after a bit of ...</summary>
    <content type="html">&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/7"&gt;Day 6&lt;/a&gt; - Lanternfish&lt;/h4&gt;

&lt;p&gt;Did the first part via an Array, because I was expecting some GoL stuff in Part 2. There wasn't and the Array-based solution would take forever for part 2. So after a bit of thinking (and (for once) not looking at reddit for ideas) I realized that the position of each fish is irrelevant, and we just need to count the fish.&lt;/p&gt;

&lt;h5&gt;Counting fish is faster than fish-herding them in an array&lt;/h5&gt;

&lt;p&gt;So part 2 is converted to a hash (where the keys are the generation of the fish, and the value the number of fishes at that generation), and a very simple loop to move the fish around. I had a small problem while figuring out when to add fish vs just set them, but the &lt;a href="https://github.com/domm/advent_of_code/blob/6811e15ec44cb4f4702d00ca9254a6df044ef90f/2021/06_2.pl"&gt;finished code is quite clear to read&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;Cleanup&lt;/h5&gt;

&lt;p&gt;Sometimes I later like to come back to the code and clean it up a bit more (and maybe make it a bit smarter). While doing so I realized that I don't need a hash, I can use the fish generation as the index of an array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @fish = map { 0 } ( 0 .. 8 );
for ( split( ',', &amp;lt;&amp;gt; ) ) {
    $fish[ $_ ]++;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read in the list of fish and store them in an array indexed by the generation. The first line inits the array with 0s to prevent undefined warnings.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;for my $day ( 1 .. 256 ) {
    my $born = 0;
    for my $gen ( 0 .. 8 ) {
        if ( $gen  0 ) {
            $born = $fish[$gen];
        }
        else {
            $fish[ $gen - 1 ] = $fish[$gen];
        }
    }
    $fish[6] += $fish[8] = $born;
    say "$day: ".sum(@fish) if ( $day  80 || $day == 256 );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for each of the days we go through all the generations, and move them one generation down (&lt;code&gt;$fish[ $gen - 1 ] = $fish[$gen]&lt;/code&gt;). But the fish of generation 0 move to generation 6, and spawn the same number (&lt;code&gt;$born&lt;/code&gt;) in generation 8. To calculate the sum of the fish i use &lt;code&gt;List::Util&lt;/code&gt;'s &lt;code&gt;sum&lt;/code&gt;, but only for day 80 (part 1) and day 256 (part 2). My stupid array-based solution takes nearly a second for the first part, and probably forever for the second part; but the smarter solution takes only a few milliseconds for both parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/06_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/06_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/7"&gt;Day 7&lt;/a&gt; - The Treachery of Whales&lt;/h4&gt;

&lt;p&gt;For the first part I had a mathy gut feeling that the solution has to be related with the &lt;code&gt;median&lt;/code&gt; of the values, so I hacked up a solution (using &lt;span class="caps"&gt;CPAN &lt;/span&gt;module &lt;a href="https://metacpan.org/pod/Statistics::Basic"&gt;Statistics::Basic&lt;/a&gt; for the statistics stuff), which worked for the test data. Tried the proper input and got a star!&lt;/p&gt;

&lt;p&gt;So I assumed that part 2 will need &lt;code&gt;mean&lt;/code&gt;. Tried it on the test-data, didn't work because the mean was a float, which I truncated to int. So I tried rounding it up, now it worked with test, but not with live data. Instead of thinking a tiny bit more, I thought that a &lt;a href="https://github.com/domm/advent_of_code/commit/e687a0a93e97f4bc22c425b71162787bff03fe01"&gt;brute force approach&lt;/a&gt; will also work and just calculated the fuel for all possible positions, which worked fast enough.&lt;/p&gt;

&lt;p&gt;While brushing teeth (it's morning here..) I realized that I should also have tried the rounded down mean, so I did that, and got the proper result (much faster..). Of course I now knew that the result was in fact correct, but I don't have enough mathy gut feelings to prove that. Then I also used Gauss' sum formula for the fuel consumption. When I was coding the fuel sum I knew there was a smarter solution, but again the computer was fast enough for me to not use my brain (not sure I like this trend..)&lt;/p&gt;

&lt;p&gt;Here's the cleaned up solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Statistics::Basic qw(:all);

my @crabs = split( ',', &amp;lt;&amp;gt; );
my $mean  = mean(@crabs);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read in the data and calculate the &lt;code&gt;mean&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $res=0;
for my $cand ( int($mean), sprintf( '%.0f', $mean ) ) {
    my $fuel;
    for my $c (@crabs) {
        my $diff = abs( $c - $cand );
        $fuel += $diff * ( $diff + 1 ) / 2;
    }
    $res = !$res ? $fuel : $fuel &amp;lt; $res ? $fuel : $res;
}
say $res;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take the rounded down and rounded up mean, and for each go through all the crabs. Get the distance it has to travel, and use Gauss to calculate the fuel consumption. Then use the barley readable line &lt;code&gt;$res = !$res ? $fuel : $fuel &amp;lt; $res ? $fuel : $res;&lt;/code&gt; to figure out which of the two candidates uses less fuel.&lt;/p&gt;

&lt;p&gt;My favorite task this year so far :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/07_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/07_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/8"&gt;Day 8&lt;/a&gt; - Seven Segment Search&lt;/h4&gt;

&lt;p&gt;The first part was ridiculously easily especially considering the absurd long and complex explanation of the task. Just go through the second list of words and count those with the correct length:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $hit;
for (&amp;lt;&amp;gt;) {
    chomp;
    my ( $first, $second ) = split / \| /;
    for my $read ( split / /, $second ) {
        my $l = length($read);
        $hit++ if ( $l  2 || $l  3 || $l  4 || $l  7 );
    }
}
say $hit;&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;And now to something complex&lt;/h5&gt;

&lt;p&gt;It was clear that a few numbers are based on the length of the input (we did learn something in part 1!). To figure out the rest, I grabbed some of the best dev tools, pen &amp;amp; paper, and draw the missing numbers, and which lines are needed to get them. I soon realized that, from the numbers using 5 lines, only the 3 overlaps completely with the 1. This means that I need not figure out the exact position of each line, just which ones overlap. After a bit more drawing and thinking I found ways to identify the other numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $l    = length($read);
        my $cand = [ split( //, $read ) ];
        if ( my $num = $direct{$l} ) {
            $res[$num] = $cand;
        }
        elsif ( $l  5 ) {
            if ( List::Compare-&gt;new( $cand, $res[1] )-&gt;get_intersection  2 ) {
                $res[3] = $cand;
            }
            elsif ( List::Compare-&amp;gt;new( $cand, $res[4] )-&amp;gt;get_intersection  3 ) {
                $res[5] = $cand;
            }
            else {
                $res[2] = $cand;
            }
        }
        elsif ( $l  6 ) {
            if ( List::Compare-&amp;gt;new( $cand, $res[1] )-&amp;gt;get_intersection  1 ) {
                $res[6] = $cand;
            }
            elsif ( List::Compare-&gt;new( $cand, $res[4] )-&gt;get_intersection  4 ) {
                $res[9] = $cand;
            }
            else {
                $res[0] = $cand;
            }
        }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was to lazy to come up with my own way to find the intersection of two arrays (see &lt;a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-08.html"&gt;Abigale's post&lt;/a&gt; for a nice one), so I used &lt;a href="https://metacpan.org/pod/List::Compare"&gt;List::Compare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rest was simple: Map the letter combinations to their respective value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my %decode;
    for ( my $i = 0; $i &amp;lt; @res; $i++ ) {
        $decode{ join( '', sort $res[$i]-&amp;gt;@* ) } = $i;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally go through the second set of readings, and convert them to a 4-digit number, and sum them all up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my $output;
    for my $read ( split / /, $second ) {
        my $lookup = join( '', sort split( //, $read ) );
        $output .= $decode{$lookup};
    }
    $sum += $output;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also a very nice task!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/08_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/08_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>#541 - Hanukkah is over - Advent started</title>
    <link rel="alternate" href="https://perlweekly.com/archive/541.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Hanukkah, the 8-day celebration of the Jews returning to Jerusalem and the rededication of the Temple on the Temple-mount is now over. We ate way too much and the UN passed only one resolution trying to eliminate the historical ties of Jews to this hill. Very good timing.</p>
<p>Now onto Advent!</p>
<p>How often do you remember to thank Mark Gardner for his extraordinary posts about Perl? I think I have only thanked him once. Maybe I should set up a cron job to send him a thank-you note every month. Or maybe I should <a href="https://phoenixtrap.com/tip/">leave him a tip</a>. Finally he set up a system where we can give him a one-time tip or, IMHO better yet, a recurring tip. It is so nice to see month-by-month that people still value your work even if they are too busy or too embarrassed to say it themselves.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/541.html</id>
    <published>2021-12-06T10:00:00Z</published>
    <updated>2021-12-06T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Like, It’s Just the First Ten Numbers Man!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/05#pwc141" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find lowest 10 positive integers having exactly 8 divisors&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub factor{
    my($n) = @_;
    my @factors = (1, $n);
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub first_ten_with_eight{
    my $i = 0;
    my @first_ten;  
    do{
        my @factors = factor($i);
        push @first_ten, $i if @factors == 8;   
        $i++; 
    }while(@first_ten != 10); 
    return @first_ten;
}

MAIN:{
    print join(", ", first_ten_with_eight()) . "\n";   
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
24, 30, 40, 42, 54, 56, 66, 70, 78, 88
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have re-used that &lt;code&gt;factor()&lt;/code&gt; function quite a bit for these challenges, especially 
recently. My blog writing has been fairly terse recently and as much as I'd like to
be a bit more verbose I really am not sure if there all that much more to say about this
code that hasn't been said before!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given positive integers, $m and $n. Write a script to find total count of 
integers created using the digits of $m which is also divisible by $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given positive integers, $m and $n.
# Write a script to find total count of integers 
# created using the digits of $m which is also 
# divisible by $n.
##
use Data::PowerSet q/powerset/;

sub like_numbers{
    my($m, $n) = @_; 
    my @divisible; 
    for my $subset (@{powerset(split(//, $m))}){
        my $i = join("", @$subset);
        push @divisible, $i if $i &amp;&amp; $i != $m &amp;&amp; $i % $n == 0;
    }  
    return @divisible;
}

MAIN:{
    print like_numbers(1234, 2) . "\n";
    print like_numbers(768, 4) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
9
3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've been making more use of &lt;code&gt;Data::PowerSet&lt;/code&gt; recently that I would have expected! If 
anyone is interested in seeing an implementation of the Power Set calculations see my
C++ solution links below. While not Perl the code is quite readable and should be 
adaptable easy to other languages. There is also a Rosetta Code entry for Power Set
but, frankly, many of the submissions there, especially the C++ and Perl ones are overly
convoluted in my opinion. Or at least much more so than the way I implemented it, which
I would think would be the more common method but I guess not!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-141/"&gt;Challenge 141&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PowerSet.html"&gt;Power Set Defined&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Data::PowerSet"&gt;Data::PowerSet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rosettacode.org/wiki/Power_set"&gt;Rosetta Code Entry: Power Set&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/30630.html"&gt;C++ Solutions: Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/30842.html"&gt;C++ Solutions: Part 2&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc141</id>
    <published>2021-12-05T16:47:00-05:00</published>
    <updated>2021-12-05T16:47:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Advent of Code Day 1 to 5</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_01_to_05.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_01_to_05.html</id>
    <updated>2021-12-05T16:45:36+00:00</updated>
    <category term="perl"/>
    <summary type="html">As you have probably noted by the measurable reduction of programmer productivity worldwide, Advent of Code is running again. Here's a short recap of my experiences from day 1 to day 5.

I usually ...</summary>
    <content type="html">&lt;p&gt;As you have probably noted by the measurable reduction of programmer productivity worldwide, &lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; is running again. Here's a short recap of my experiences from day 1 to day 5.&lt;/p&gt;

&lt;p&gt;I usually approach the problems straight-forward (or brute-force), mostly because I'm not that kind of smart to know all the nice shortcuts and algorithms (which I later usually read up on the very recommended "Solution Megathreads" on &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;reddit&lt;/a&gt;. You can find me solutions &lt;a href="https://github.com/domm/advent_of_code/tree/main/2021"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/1"&gt;Day 1&lt;/a&gt; - Sonar Sweep&lt;/h4&gt;

&lt;p&gt;Starting of easy, just adding / comparing some values. I still learned something during the second task: When comparing a sliding window of data (at least in this simple case), you only need to compare the first and the last value, because the middle values are affecting both window-values the same way and thus can be ignored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12
24    24
53    53
      13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, you can sum up 12+24+53 and compare that with the sum of 24+53+13, but you can just as well ignore 24+53 and just compare 12 and 13.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/2"&gt;Day 2&lt;/a&gt; - Dive!&lt;/h4&gt;

&lt;p&gt;Still simple, a little bit of parsing and the rest was again just adding up numbers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/3"&gt;Day3&lt;/a&gt; - Binary Diagnostic&lt;/h4&gt;

&lt;p&gt;I had some troubles remembering how to convert a binary sting (&lt;code&gt;1001101&lt;/code&gt;) to an int. I first used the rather ugly &lt;code&gt;my $bits='110101'; my $int = eval '0b'.$bits&lt;/code&gt;, and only "remembered" about &lt;code&gt;oct()&lt;/code&gt; after reading it in some other solutions. But I used unicode var names &lt;code&gt;$γ, $ε&lt;/code&gt; :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 4&lt;/a&gt; - Giant Squid aka Bingo&lt;/h4&gt;

&lt;p&gt;I again forgot something I already learned in a previous Advent: If the input contains blocks separated by blank lines, it's much easier to just split the input on two newlines instead of remembering state and starting new blocks if there is an empty line...&lt;/p&gt;

&lt;p&gt;I convert the horizontal rows and vertical cols into lines, so each bingo card has 10 lines. Each line is a Hash where key and value are the number (i.e. 42 =&amp;gt; 42) because I thought that in part 2 we might need to do something with the checked values (with turned out to not be the case, ah, well..)&lt;/p&gt;

&lt;p&gt;When a number is drawn, go through all the boards and all the rows, mark the drawn number with a X, and check if a line has 5 Xs (&lt;code&gt;my @checked = grep {/X/} values $line-&amp;gt;%*;&lt;/code&gt;). If it has, we have a winner, so calc the value and report it.&lt;/p&gt;

&lt;p&gt;In theory part 2 only needed to remove the exit, but as I had to remove bingo cards that have already one I had to convert my loop to use an iterator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 5&lt;/a&gt; - Hydrothermal Venture&lt;/h4&gt;

&lt;p&gt;I had a solution for part 1 quite quickly, but it didn't work for the proper data. So I let the code rest for a bit, went for a run, cooked lunch, and later checked a few of the posts on reddit. And indeed I found the needed tip: I was using a plain &lt;code&gt;sort&lt;/code&gt;, which (in Perl) sorts alphanumerically, and not by int value. This was quickly fixed by the spaceship operator: &lt;code&gt;sort { $a &amp;lt;=&amp;gt; $b }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the diagonals in part 2 I wasted a lot of time on just mucking with the coordinates, without success. I knew what I had to do, but was too lazy to properly implement it. So late in the afternoon I took pen &amp;amp; paper, drawed some diagrams, and renamed my vars from &lt;code&gt;$x, $y&lt;/code&gt; to &lt;code&gt;$row, $col&lt;/code&gt;, because I constantly messed up which was which. Also figuring out which direction was which took me an embarrassingly long time...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Next week..&lt;/h4&gt;

&lt;p&gt;I plan to keep playing (and posting here and on reddit), but let's see what the combination of more complex tasks, work and family will allow :-)&lt;/p&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
  <title>Raku CI Bot Grant Report October and November 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2021-10-raku-ci-bot-grant-update"/>
  <id>tag:news.perlfoundation.org,2021-12-05:/post/2021-10-raku-ci-bot-grant-update</id>
  <published>2021-12-05T14:50:48</published>
  <updated>2021-12-05T14:50:48</updated>
  <summary>
  <![CDATA[
     Patrick Böker submitted his report for the Raku CI Bot grant, for the months of October and November: In October and November most of my time was spent on finding and fixing bugs. Several problems I encountered are bugs in third party systems. Some of those I tackled, some remain as bug reports. Reported and fixed bugs: Red: Boolean checking DateTime columns fails when using Pg #530 Red: Checking multiple 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Patrick Böker submitted his report for the Raku CI Bot grant, for the months of October and November:</p>

<hr />

<p>In October and November most of my time was spent on finding and fixing bugs.</p>

<p>Several problems I encountered are bugs in third party systems. Some of those I tackled, some remain as bug reports.</p>

<p>Reported and fixed bugs:</p>

<ul>
<li>Red: Boolean checking DateTime columns fails when using Pg <a href="https://github.com/FCO/Red/issues/530">#530</a> (Fix: FCO)</li>
<li>Red: Checking multiple existance checks results in empty WHEN clause [#531]
(https://github.com/FCO/Red/issues/531) (Fix: FCO)</li>
<li>Red: Type constraints in models are ignored on assignment [#513](https://
github.com/FCO/Red/issues/513) (Fix: FCO)</li>
<li>Red: Forbid .^create on non-type-objects <a href="https://github.com/FCO/Red/issues/488">#488</a> (Fix: FCO)</li>
<li>Red: Enums are not supported <a href="https://github.com/FCO/Red/issues/487">#487</a> (Fix: FCO)</li>
<li>Red: MVM_str_hash_lvalue_fetch_nocheck called concurrently on the same hash in Red::Model <a href="https://github.com/FCO/Red/issues/529">#529</a> (Fix: me)</li>
<li>Red: Remove duplicate operator <a href="https://github.com/FCO/Red/pull/535">#535</a> (Fix: me)</li>
<li>Cro::HTTP: Do not send the ENO_OF_STREAM flag twice [#160](https://
github.com/croservices/cro-http/pull/160) (Fix: me)</li>
</ul>

<p>Still unresolved bugs:</p>

<ul>
<li>MoarVM: NativeCall error <a href="https://github.com/MoarVM/MoarVM/issues/1614">#1614</a> (Severity: Medium)</li>
<li>Rakudo: Type check failed in binding to parameter for a named param that has not been passed <a href="https://github.com/rakudo/rakudo/issues/4647">#4647</a> (Severiy: Low, PR: Kaiepi)</li>
<li>Red: Unknown columns in query in concurrent setting <a href="https://github.com/FCO/Red/issues/537">#537</a> (Severity: High)</li>
<li>Red: Enum on Pg: invalid input syntax for type integer: \"a\" <a href="https://github.com/FCO/Red/issues/527">#527</a> (Severity: High)</li>
<li>Red: SELECTing enums generates broken WHERE in most cases <a href="https://github.com/FCO/Red/issues/495">#495</a> (Severity: Low, workaround available)</li>
<li>Red: LTA error with missing use Red:api&lt;2&gt; [#490](https://github.com/FCO/
Red/issues/490) (Severity: Low, only a feature request)</li>
<li>Cro::HTTP: Implement support for sslkeylogfile [#162](https://github.com/
croservices/cro-http/pull/162) (Severity: Low, feature request, PR: me (also 
[1](https://github.com/jnthn/p6-io-  +socket-async-ssl/pull/64))</li>
<li>Cro::HTTP: Implement remote window handling [#161](https://github.com/
croservices/cro-http/pull/161) (Severity: High, PR: me)</li>
<li>Test::Mock: List calls when with matching failed [#18](https://github.com/
jnthn/test-mock/pull/18) (Severity: Low, feature request, PR: me)</li>
</ul>

<p>The above list might lead to the impression that Red is bug ridden / unusable. 
It is important to understand, that Red is officially still alpha software, so 
bugs are expected. I also can't emphasize enough how quickly the Red
developers, especially FCO the lead dev, responded and tackled the problems I reported.</p>

<p>I do hope that instead of evading bugs in third party software by utilizing 
workarounds or switching the library, but instead golfing, reporting and fixing bugs, the quality of our software ecosystem will improve and future users will be able to enjoy a more reliable ecosystem.</p>

<p>In the CI bot I did the following:</p>

<ul>
<li>Added an integration test to test the entire lifecycle of a PR</li>
<li>Implement App Authorization in the GitHub API lib</li>
<li>Implement a minimal GraphQL API in the GitHub API lib</li>
<li>Implement a configuration system to allow easy setup of a development environment</li>
<li>Write a first draft of a guide on how to set up a development environment</li>
<li>Rename RakuCIBot to RakudoCIBot, as the functionality is tailored to the 
Rakudo stack and won't be of any use to other Raku implementations. The repository has moved respectively to https://github.com/Raku/RakudoCIBot. It might make sense to move it into the <code>rakudo</code> org, but that's a separate step.</li>
<li>Introduce a logging framework and add some logging</li>
</ul>

<p>As it stands now, when using the SQLite database driver and ignoring some 
instability caused by some of the still unresolved bugs listed above, RCB now successfully polls GitHub for new PRs, starts a test run on the OBS 
backend, reads out the test results and persists them. Reporting back to 
GitHub is not yet working reliably.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2438191565013524930</id>
    <published>2021-12-04T17:28:00.001+01:00</published>
    <updated>2021-12-04T17:28:16.407+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxx) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.46&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.45 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052000&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.051005 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.034&lt;/strong&gt; on 2021-11-28&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.033 was 6 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.59&lt;/strong&gt; on 2021-12-02&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.58 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.876' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.876&lt;/strong&gt; on 2021-12-02&lt;/li&gt;  &lt;li&gt;Votes: 89&lt;/li&gt;  &lt;li&gt;Previous version: 1.875 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.875' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.875&lt;/strong&gt; on 2021-12-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.873 was 1 year, 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.30&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.29 was 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.008&lt;/strong&gt; on 2021-11-28&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.007 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.10.0&lt;/strong&gt; on 2021-12-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.9.0 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000144&lt;/strong&gt; on 2021-12-03&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000142 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.085' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.085&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.084 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2438191565013524930/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxx-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2438191565013524930"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2438191565013524930"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxx-12-great-cpan-modules-released.html" title="(ccclxx) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7225888110025479431</id>
    <published>2021-12-04T17:26:00.002+01:00</published>
    <updated>2021-12-04T17:26:21.895+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxciii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 26&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/12/04 16:26:06 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern::Document::OpenAPI" target="_blank"&gt;JSON::Schema::Modern::Document::OpenAPI&lt;/a&gt; - One OpenAPI v3.1 document&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased" target="_blank"&gt;aliased&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Iptables2Dot" target="_blank"&gt;App::Iptables2Dot&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::shcompgen" target="_blank"&gt;App::shcompgen&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Faker" target="_blank"&gt;Data::Faker&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=251)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Enbugger" target="_blank"&gt;Enbugger&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Complete" target="_blank"&gt;Getopt::Long::Complete&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteProcess" target="_blank"&gt;Mojo::IOLoop::ReadWriteProcess&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IRC" target="_blank"&gt;Mojo::IRC&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=465)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::HTTP::Async" target="_blank"&gt;MojoX::HTTP::Async&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSL::ExpireDate" target="_blank"&gt;Net::SSL::ExpireDate&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::CognitiveComplexity" target="_blank"&gt;Perl::Critic::CognitiveComplexity&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::SigAction" target="_blank"&gt;Sys::SigAction&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Perl::Critic" target="_blank"&gt;Test::Perl::Critic&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::XPath" target="_blank"&gt;Test::XPath&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7225888110025479431/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7225888110025479431"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7225888110025479431"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciii-metacpan-weekly-report.html" title="(cdxciii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant report: Optimizations building upon the new Raku dispatch mechanism</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-raku-2021-11"/>
  <id>tag:news.perlfoundation.org,2021-12-04:/post/jonathan-raku-2021-11</id>
  <published>2021-12-04T05:27:10</published>
  <updated>2021-12-04T05:27:10</updated>
  <summary>
  <![CDATA[
     Jonathan writes: My latest grant proposal was recently approved. I had the possibility to dedicate quality time to Raku work at the start of November, but knew I would be tied up with some other work in the latter part of the month. Thus I optimistically forged ahead with some grant work while I could, crossing my fingers for approval. This report covers what got done. The main completed task 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr>
My latest <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_optimizations">grant proposal</a> 
was <a href="https://news.perlfoundation.org/post/grants_nov_2021_votes">recently approved</a>. 
I had the possibility to dedicate quality time to Raku work at the start of November, but knew I would be tied up with some other
work in the latter part of the month. Thus I optimistically forged ahead with some grant work while I could,
crossing my fingers for approval. This report covers what got done.</p>

<p>The main completed task was to reorganize and streamline return and stack unwind handling. My work on the
new dispatch mechanism introduced a new callstack layout. This created an opportunity to simplify the way
we handle stack unwinding - that is, removing frames either because we are returning or because of an
exception. Since this happens for every single non-inlined block or routine that we call, savings here
have an impact on all but the most micro of micro-benchmarks. For example, a recursive Fibonacci benchmark
(written recursively to frustrate inlining) showed a 5% improvement from this work. The work also elimiated
some <code>malloc</code> calls in favor of callstack allocation in a number of situations, and resulted in overall
simpler and smaller code in MoarVM. Faster and simpler is certainly welcome.</p>

<p>I also did some optimization on frame invocation, primarily by splitting the specialized and unspecialized
callframe setup paths, which allowed for eliminating a number of branches that the C compiler was not able
to. This new factoring also revealed an opportunity to fold two <code>memset</code> calls into one, which was also a
welcome saving. This was worth a further 3% off the recursive Fibonacci benchmark. (To give a picture of how
Raku compares with Perl in this benchmark, Raku runs it in around two thirds of the time, despite the fact
that it has to cope with the potential upgrade of <code>Int</code> to a big integer.)</p>

<p>A central goal for the grant as a whole is to make progress on escape analysis. When I worked on this previously,
a particular challenge was the reliance on attribute container to vivify (get allocated) upon first touch. This
was not so much an optimization as a means to determine if an attribute had been initialized, for the purpose of
running defaults. Unfortunately, however, it greatly complicates the escape analysis of object graphs at creation
time, and makes all attribute access a little more costly. (One could also get occasionally surprised by the fact
that reading an attribute during a constructor would count as initializing it too.) Thus, I started working on a
new appraoch, based upon container descriptors, which are also the mechanism used in array and hash element
auto-vivification. The work in progress is currently a pull request, which needs further work to analyze why
it causes regressions in a small number of modules; this new approach does, however, already passes the
specification test suite.</p>

<p>I also did some design work for a faster and simpler way to handle <code>LEAVE</code> blocks. Today they carry quite some
performance overhead, we are unable to ever inline them, and needing to support them imposes a small, but non-zero,
cost on the exit of every callframe, regardless of if they have a <code>LEAVE</code> block. The new design I have worked on
should fix all of these issuses, and I hope to implement it during December. Even if <code>LEAVE</code> is rarely directly
used, it plays an important part in ensuring locks are reliabily released, and so is used implicitly in many
programs.</p>

<p>Finally, I also tracked down and fixed a bug in the intersection of dispatch resumption and inlining. </p>

<p><code>
Time spent on the grant: 30 hours 52 minutes
Time remaining on the grant: 169 hours 8 minuates
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Merging multiple git repos with their commit history</title>
    <link href="http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html"/>
    <id>http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html</id>
    <updated>2021-12-01T12:14:41+00:00</updated>
    <category term="perl"/>
    <summary type="html">Advent of Code has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind ...</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind and want to have on repo containing a dir for each year.&lt;/p&gt;

&lt;p&gt;Now I could just copy all the files into the &lt;a href="https://github.com/domm/advent_of_code"&gt;new repo&lt;/a&gt;, but that would lose the commit history. Which is unacceptable!&lt;/p&gt;

&lt;h4&gt;The status quo ante&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
├── advent2019
│   ├── 01_1.pl
│   └── 01_2.pl
└── advent2020
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;What I want&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent_of_code
    ├── 2019
    │   ├── 01_1.pl
    │   └── 01_2.pl
    └── 2020
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know that git allows you to rewrite history and have once munged a repo using &lt;code&gt;git filter-branch&lt;/code&gt; (to completely delete some files and commits). I of course forgot the details, but after a little bit of searching and trial and error I got it working!&lt;/p&gt;

&lt;h4&gt;First, prepare the old repo&lt;/h4&gt;

&lt;p&gt;To prevent merge conflicts later, I first move the code in the old repo from the root dir into a new dir, eg &lt;code&gt;2019&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    └─── 2019
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found &lt;a href="https://gist.github.com/fabiomaggio/ce7ecd7dffd27b32a45325204288efce"&gt;this gist&lt;/a&gt; very helpful, and adapted it to my needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent2019
mkdir 2019
git filter-branch --tree-filter 'mkdir -p /tmp/ad; mv * /tmp/ad; mkdir 2019; mv /tmp/ad/* 2019/' --tag-name-filter cat --prune-empty -- --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses &lt;code&gt;git filter-branch&lt;/code&gt; to move the old code to a temp dir (&lt;code&gt;mv * /tmp/ad&lt;/code&gt;) and then move it back to the new location (&lt;code&gt;mv /tmp/ad/* 2019/&lt;/code&gt;), using some git magic to keep the history.&lt;/p&gt;

&lt;p&gt;While I was at it, I also removed some of the AdventOfCode input files which I had commited (but which we should not commit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch -f --tree-filter 'rm -f 2019/*.data' HEAD&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Second, import the repo&lt;/h4&gt;

&lt;p&gt;Now I can merge the old repo into my new unified repo. This time this &lt;a href="https://stackoverflow.com/a/6004865"&gt;StackOverflow comment&lt;/a&gt; pointed me in the right direction. The basic idea is to add the old repo as a new remote, fetch the commits, and then merge them using &lt;code&gt;--allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent_of_code
git remote add old19 ../advent2019/
git fetch old19
git merge --allow-unrelated-histories old19/master
git remote remove old19&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then push, and we're done and have a nice unified repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ tree
.
├── 2019
│   ├── 01_1.pl
│   ├── 01_2.pl
├── 2020
│   ├── 01_1.pl
│   ├── 01_2.pl
│   ├── 01_2_golf.pl
├── 2021
│   ├── 01_1.pl
│   ├── 01_1_golf.pl
│   └── 01_2.pl
└── README.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the history was preserved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ git log 2019/24_1.pl
commit dbaf0bc1df645bda61ec5cf7e623d478a179947e
Author: Thomas Klausner &amp;lt;domm@plix.at&amp;gt;
Date:   Fri Dec 27 10:10:10 2019 +0100

    no need to keep a map around, the rating is unique per map&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Win!&lt;/p&gt;

&lt;p&gt;Next steps: Fix all links pointing to the old repos to point to the new location, and maybe archive / delete the github repos (and/or have them redirect to the new unified repo)&lt;/p&gt;</content>
    <category term="git"/>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Mathpix">API-Mathpix</a></td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Use the API of Mathpix</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModulesBundle-Import-DAVECROSS">Acme-CPANModulesBundle-Import-DAVECROSS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acme::CPANModules::* created from DAVECROSS's posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MarkdownTest">Acme-MarkdownTest</a></td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>0.01</td>
<td>0.02</td>
<td>test module to see how markdown is handled</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Meson">Alien-Meson</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Find or build meson build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Ninja">Alien-Ninja</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Find or build Ninja build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SWIProlog">Alien-SWIProlog</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alien package for the SWI-Prolog Prolog interpreter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libgpiod">Alien-libgpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1</td>
<td>v0.1</td>
<td>Find or build libgpiod (Linux GPIO character device library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AltaPay_Try">AltaPay_Try</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPANChangesUtils">App-CPANChangesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.074</td>
<td>0.074</td>
<td>Parse CPAN Changes file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Images-To-DjVu">App-Images-To-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Base class and script for composing DjVu files from images.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-URIInfoUtils">App-URIInfoUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ansiexpand">App-ansiexpand</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9901</td>
<td>ANSI sequence aware tab expand/unexpand command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-geoCancerDiagnosticDatasetsRetriever">App-geoCancerDiagnosticDatasetsRetriever</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
<td>1</td>
<td>GEO Cancer Diagnostic Datasets Retriever is a bioinformatics tool for cancer diagnostic dataset retrieval from the GEO website.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-renlikewd">App-renlikewd</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>REName a file so it becomes LIKE the current (Working) Directory's name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-timeput">App-timeput</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.078</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tjoin">App-tjoin</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch">Bencher-Scenario-BinarySearch</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Benchmark binary searching</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch-File">Bencher-Scenario-BinarySearch-File</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark binary searching sorted lines from a file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-URI-Info">Bencher-Scenarios-URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Scenarios to benchmark URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Commons-Link">Commons-Link</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.05</td>
<td>TODO.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookie">Cookie</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Cookie Object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookies">Cookies</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Cookies API for Server &amp; Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow">DBIx-DBFlow</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Database development helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow-Runtime">DBIx-DBFlow-Runtime</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Runtime utilities for DBIx::DBFlow</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Spreadsheet">DBIx-Spreadsheet</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Query a spreadsheet with SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ControllerAutoload">Dancer2-Plugin-ControllerAutoload</a></td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Autoload controllers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-DefaultValue">Data-Sah-DefaultValue</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Default-value rules for Data::Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-TableData-Rank">Data-TableData-Rank</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Add a rank column to a table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-Adapter-Gpiod">Device-Chip-Adapter-Gpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Device::Chip::Adapter implementation for Linux GPIO character devices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dyn">Dyn</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>dyncall Backed FFI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-Rule-DjVu">File-Find-Rule-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Common rules for searching DjVu files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Syslogger">File-Syslogger</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Use POE to tail a file and read new lines into syslog.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-VarOptions">File-Temp-VarOptions</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like File::Temp, but allowing to set options with variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Workflow">Future-Workflow</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>asynchronous workflow management using futures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GitHubDDL">GitHubDDL</a></td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>GitDDL compatibility database migration utility when  hosted on GitHub</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hash-Util-Exists-Tiny">Hash-Util-Exists-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Some hash helper functions related to perl's exists function.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Diagnostic-RemoteHealth">HealthCheck-Diagnostic-RemoteHealth</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Get results from an HTTP HealthCheck</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IURL-XS">IURL-XS</a></td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>parsing URLs with zero-copy and no mallocs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iterator-Breathe">Iterator-Breathe</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0201</td>
<td>Iterate a counter up and back</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Schema-Modern-Document-OpenAPI">JSON-Schema-Modern-Document-OpenAPI</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.001</td>
<td>0.005</td>
<td>One JSON Schema document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Ryu">Math-Ryu</a></td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>perl interface to the ryu C library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Features-Set">Module-Features-Set</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Features of modules that generate text tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MojoX-HTTP-Async">MojoX-HTTP-Async</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.08</td>
<td>simple package to execute multiple parallel requests to the same host</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-YamlRoutes">Mojolicious-Plugin-YamlRoutes</a></td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Generates routes from a yaml file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-RFC3161-Timestamp">Net-RFC3161-Timestamp</a></td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Utility functions to request RFC3161 timestamps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSDK">PERLSDK</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>v1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PensioAPI">PensioAPI</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pensio">Pensio</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-ReplyWithMail">RT-Extension-ReplyWithMail</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>RT-Extension-ReplyWithMail Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Iterator">RoleBundle-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Iterator roles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Tree">RoleBundle-TinyCommons-Tree</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.129</td>
<td>0.129</td>
<td>Roles related to object tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SelectPdf">SelectPdf</a></td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>v1.2.0</td>
<td>v1.4.0</td>
<td>Get the result of an asynchronous call.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-Kramerius">Task-Kramerius</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Install modules for Kramerius system.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Expander">Test-Expander</a></td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>v1.0.0</td>
<td>v1.0.5</td>
<td>Expansion of test functionalities that appear to be frequently used while testing.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-Object">Test-Mock-Object</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Dead-simple mocking</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-RB-XS">Tree-RB-XS</a></td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>0.00_01</td>
<td>0.05</td>
<td>Red/Black Tree object withthe compatible API to Tree::RB</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Info">URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Extract various information from a URI (URL)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Router">URI-Router</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>highest performance powerful URI router (URI path to value lookup) for HTTP frameworks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-KeePassHttp">WWW-KeePassHttp</a></td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Interface with KeePass PasswordSafe through the KeePassHttp plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-WsScreenshot">WebService-WsScreenshot</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>API client For ws-screenshot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-YTSearch">WebService-YTSearch</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0302</td>
<td>Search YouTube</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/require-relative">require-relative</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>like require for relative paths</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>62</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>14</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Mathpix ERIAM 0.01 0.01 Use the API of Mathpix Acme-CPANModulesBundle-Import-DAVECROSS PERLANCAR 0.001 0.001 Acme::CPANModules::* created from DAVECROSS's posts Acme-MarkdownTest NEILB 0.01 0.02 test module to see how markdown is handled Alien-Meson ZMUGHAL 0.01 0.01 Find or build meson build tool Alien-Ninja ZMUGHAL 0.01 0.02 Find or build Ninja build tool … <a href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1957</id>
    <published>2021-12-01T00:31:10Z</published>
    <updated>2021-12-01T00:31:10Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#540 - 24 Pull Requests</title>
    <link rel="alternate" href="https://perlweekly.com/archive/540.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Did you participate in <strong>Hacktoberfest 2021</strong>?</p>
<p>If not then you have one more chance to participate in the global event <a href="https://24pullrequests.com">24 Pull Requests</a>. Participation is simple, you just have to submit one pull request each day between 1st Dec 2021 and 24th Dec 2021. It is one of my favourite events. I have participated in the event each year, without a break, since 2015. I was introduced to it by <a href="http://blogs.perl.org/users/neilb/2015/11/24-pull-requests.html">Neil Bowers</a>. Last year I was going through rough patch so, unfortunately, I had to skip it. My best performance was in the year 2018 when I contributed <strong>125 pull requests</strong> in the first 24 days of December. If I am not mistaken then the <strong>24 Pull Requests</strong> event is little more relaxed as compare to <strong>Hacktoberfest</strong>. You don't have to submit a pull request every day. Instead, you can submit in bulk one day and then take a break. However, make sure you have submitted at least 24 pull requests by the end of play on 24th December.</p>
<p>Happy Hacking !!!</p>
<p>Do you follow the much-discussed <strong>Perl</strong> project <strong>Corinna</strong>?</p>
<p>The project is run by <strong>Curtis</strong> and his dedicated team of experts. I came across a <a href="https://ovid.github.io/articles/why-is-perl-not-putting-moose-in-the-core.html">blog post</a> by <strong>Curtis</strong> talking about "<strong>Why is Perl not putting Moose in the core?</strong>" There is a bold statement in the post in response to the question "<strong>What’s an Object in Perl?</strong>" and it is "<strong>Perl knows nothing about OOP. It doesn’t know what objects are.</strong>"</p>
<p><strong>Curtis</strong> doesn't say things without a reason. Please read the full blog post for more informations. I am one of the biggest followers of <strong>Curtis</strong> and never miss his posts.</p>
<p>If you remember, I mentioned <strong>Advent Calendars</strong> in the editorial of the weekly newsletter edition <a href="https://www.perlweekly.com/archive/536.html">#536</a>. Ever since then, I have noticed lots of activities in the <strong>Perl</strong> and <strong>Raku</strong> communities about <strong>Advent Calendars</strong>. I am confident this year we are going to have another fun filled <strong>Advent Calendar</strong>.</p>
<p>Last but not least, <a href="https://theweeklychallenge.org">The Weekly Challenge</a> (also known as <strong>Perl Weekly Challenge</strong>) is going to complete <strong>1000 days</strong> on <strong>18th December 2021</strong>. To celebrate the day, the team is running a <strong>FREE T-shirt</strong> campaign. If you are interested in knowing about it then please check out the <a href="https://theweeklychallenge.org/blog/1000-days">blog post</a>.</p>
<p>Stay safe and avoid the new <strong>COVID-19</strong> variant <strong>Omicron</strong>.</p></div>
    </content>
    <id>https://perlweekly.com/archive/540.html</id>
    <published>2021-11-29T10:00:00Z</published>
    <updated>2021-11-29T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Install Perl, editor, Dancer2</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2021-11-29T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-install"/>  <id>https://perlmaven.com/dancer2-install</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>A Binary Addition Simulation / Nth from a Sorted Multiplication: Table The Weekly Challenge 140</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/11/28#pwc140" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two decimal-coded binary numbers, $a and $b. Write a script to simulate the
addition of the given binary numbers.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub add_binary{
    my($x, $y) = @_;
    my $sum = ""; 
    my @a = reverse(split(//, $x));            
    my @b = reverse(split(//, $y));            
    if(@b &gt; @a){
        my @c = @b;
        @b = @a;
        @a = @c;   
    } 
    my $carry = 0; 
    for(my $d = 0; $d &lt;= @a - 1; $d++){ 
        my $d0 = $a[$d]; 
        my $d1 = $b[$d];
        if($d1){
            $sum = "0$sum", $carry = 0 if $d0 == 1 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 1;  
            $sum = "1$sum", $carry = 0 if $d0 == 1 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 0; 
            $sum = "0$sum", $carry = 1 if $d0 == 1 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 0; 
            $sum = "0$sum", $carry = 1 if $d0 == 0 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 1; 
            $sum = "0$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 0; 
            $sum = "1$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 1; 
            $sum = "0$sum", $carry = 1 if $d0 == 1 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 1; 
            $sum = "1$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 0; 
        } 
        else{
            $sum = "0$sum", $carry = 1, next if $d0 == 1 &amp;&amp; $carry == 1;  
            $sum = "1$sum", $carry = 0, next if $d0 == 0 &amp;&amp; $carry == 1;  
            $sum = "0$sum", $carry = 0, next if $d0 == 0 &amp;&amp; $carry == 0;  
            $sum = "1$sum", $carry = 0, next if $d0 == 1 &amp;&amp; $carry == 0;  
        }  
    } 
    $sum = "$carry$sum" if $carry == 1;  
    return $sum; 
}

MAIN:{
    print add_binary(11, 1) . "\n"; 
    print add_binary(101, 1) . "\n"; 
    print add_binary(100, 11) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
100
110
111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have an unusual fondness for Perl's right hand conditional. But that is pretty obvious 
from the way I wrote this, right? &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 3 positive integers, $i, $j and $k. Write a script to print the $kth 
element in the sorted multiplication table of $i and $j.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub nth_from_table{
    my($i, $j, $k) = @_;
    my @table;
    for my $x (1 .. $i){
        for my $y (1 .. $j){
            push @table, $x * $y; 
        }  
    }  
    return (sort {$a &lt;=&gt; $b} @table)[$k - 1];   
} 

MAIN:{
    print nth_from_table(2, 3, 4) . "\n";  
    print nth_from_table(3, 3, 6) . "\n";  
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Full Disclosure: At first I wanted to do this in some convoluted way for fun. After
experimenting with, like, nested &lt;code&gt;map&lt;/code&gt;s for a few minutes I lost all interest in "fun" and
just went with a couple of &lt;code&gt;for&lt;/code&gt; loops!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-140/"&gt;Challenge 140&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc140</id>
    <published>2021-11-28T17:16:00-05:00</published>
    <updated>2021-11-28T17:16:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Tony Cook): October 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl5_tony_cook_oct_2021"/>
  <id>tag:news.perlfoundation.org,2021-11-28:/post/maintaining_perl5_tony_cook_oct_2021</id>
  <published>2021-11-28T17:01:27</published>
  <updated>2021-11-28T17:01:27</updated>
  <summary>
  <![CDATA[
     Approximately 25 tickets were reviewed, and 3 patches were applied.  0.83 #12957 review discussion review  sdbm source, comment  1.27 #18958 look over code  #18958 review code and comment  #18958 comment  1.59 #19020 research should the shell be trapping in this  case? haven’t found anything appropriate, also look at  dash source  #19020 more dash source, comment  2.74 #19121 research and comment 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Approximately 25 tickets were reviewed, and 3 patches were
applied.
```
[Hours]         [Activity]
  0.83          #12957 review discussion (mentioned in #19182), review
                sdbm source, comment
  1.27          #18958 look over code
                #18958 review code and comment
                #18958 comment
  1.59          #19020 research - should the shell be trapping in this
                case?  haven’t found anything appropriate, also look at
                dash source
                #19020 more dash source, comment
  2.74          #19121 research and comment
                #19121 re-work
                #19121 consider alternative for the delimiter, looking
                over code
                #19121 look at a :crlf issue - is it a problem elsewhere
                cpan #133233
  0.30          #19122 apply to blead, perldelta
  1.27          #19124 debugging
  0.30          #19166 review
  0.45          #19171 review and briefly comment
                #19171 review latest changes and apply to blead
  1.22          #19172 review and a couple of brief comments
  0.30          #19174 review discussion, testing, research and comment
  2.42          #19182 review, comments
                #19182 review changes, comment
                #19182 review, testing, brief comment
  0.43          #19184 review, consider if feature regen needs some re-
                work
                #19184 briefly review
  0.60          #19186 review, research and comment
  0.62          #19187 review and approve
  0.63          #19190 review, research, briefly comment
  0.91          #19191 review and apply, also supply patch upstream and
                update customizations
                #19191 comment
  0.43          #19194 review and approve
  2.18          #19197 review, research (who wrote that test? it was me)
                and comment
                #19197 review new commits
  9.56          #19198 debugging and comment
                #19198 debugging, work on a fix, simple testing, comment
                #19198 recheck, testing, try to find good place to add
                regression test, minor perl5db.t re-work
                #19198 minor cleanup and document DebugWrap in perl5db.t,
                write test, test the test with and without the fix,
                testing
                #19198 fix global destruction issue from fix, debug
                another threads only failure and work out a fix
                #19198 polish, documentation, more testing, update PR
  0.92          review coverity reported defects, create PR #19200
  1.42          :utf8 more on re-working fill/readdelim
  0.65          :utf8 more readdelim re-work
  1.58          :utf8 work on re-working fill
  0.17          github notifications</p>

<h1>  1.07          security list: research, testing, comment</h1>

<p>33.86 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#539 - Farewell to David H. Adler</title>
    <link rel="alternate" href="https://perlweekly.com/archive/539.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>Really sad news: that David H. Adler, known by many as DHA has passed away. I've included a number of links where people who can express themselves way better than I do say goodbye to him.</p>
<p>In other news the ephemeral miniconf took place this week. You can read about it below.</p>
<p>Lastly, The Weekly Challenge celebrates its first 1000 days. Congratulations to Mohammad Anwar, my co-editor of the Perl Weekly for keeping up with this project!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/539.html</id>
    <published>2021-11-22T10:00:00Z</published>
    <updated>2021-11-22T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Jort Sort the First Five Long Primes</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/11/21#pwc139" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of numbers. Write a script to implement JortSort. It should return 
true/false depending if the given list of numbers are already sorted.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub jort_sort{
    for(my $i=0; $i &lt; @_ - 1; $i++){
        return false if $_[$i + 1] &lt; $_[$i];  
    }  
    return true;
}

MAIN:{
    print jort_sort(1, 2, 3, 4, 5) . "\n";
    print jort_sort(1, 3, 2, 4, 5) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Apparently Jort Sort is a joke sort started by somebody in the JavaScript community. I 
didn't find it all that funny, but the code to implement it only took a quick minute.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 5 Long Primes.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use LWP::UserAgent;
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;  
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)]; 
        }  
    }
    return @primes; 
}

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub long_primes_five{
    my @long_primes;
    my @primes = get_primes();
    do{
        my $prime = shift @primes;    
        my $max_repetend = $prime - 1; 
        my $repeats = true if($prime != 2 &amp;&amp; $prime != 5); 
        if($repeats){
            my $x = divide(1, $prime, [], []); 
            $x =~ m/\((\d+)\)/;
            my $repetend = $1;
            push @long_primes, [$prime, $x] if length($repetend) == $prime - 1;   
        }
    }while(@long_primes &lt; 5);
    return @long_primes;
}

MAIN:{
    for my $p (long_primes_five()){
        print $p-&gt;[0] . "\t" . $p-&gt;[1] . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
7       0.(142857)
17      0.(0588235294117647)
19      0.(052631578947368421)
23      0.(0434782608695652173913)
29      0.(0344827586206896551724137931)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This second part of the challenge was much more fun! Maybe my favorite part was that it 
largely re-used code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106"&gt;challenge 106&lt;/a&gt;
and also &lt;a href="https://adamcrussell.livejournal.com/5175.html"&gt;Challenge 015&lt;/a&gt;. Here we grab a 
list of pre-computed primes and then check each one for the desired property. After we 
find five, as required, we're done.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://jort.technology/"&gt;Jort Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FullReptendPrime.html"&gt;Long Prime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-139/"&gt;Challenge 139&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc139</id>
    <published>2021-11-21T16:34:00-05:00</published>
    <updated>2021-11-21T16:34:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Perl Tk: Keyboard and Mouse events</title>
  <summary type="html"><![CDATA[<p>
Showing how to create to bind keyboard an mouse events to functions in a Perl Tk based application.
<p>
]]></summary>
  <updated>2021-11-21T09:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-tk-keyboard-and-mouse-events"/>  <id>https://perlmaven.com/perl-tk-keyboard-and-mouse-events</id>
  <content type="html"><![CDATA[<p>
Showing how to create to bind keyboard an mouse events to functions in a Perl Tk based application.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
