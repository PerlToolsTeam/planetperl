<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-12-13T20:56:32Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Twelve Days of Dancer, 2020 Edition</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/jason_a_crome/2020/12/the-twelve-days-of-dancer-2020-edition.html"/>
    <id>tag:blogs.perl.org,2020:/users/jason_a_crome//712.9989</id>

    <published>2020-12-13T21:48:22Z</published>
    <updated>2020-12-13T21:52:31Z</updated>

    <summary>Need some joy this holiday season? Head over to the Dancer Advent Calendar for this year's Twelve Days of Dancer. With a little help from our friends, we've put together a 12-day mini advent calendar featuring some great software built...</summary>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>Need some joy this holiday season? Head over to the <a href="http://advent.perldancer.org">Dancer Advent Calendar</a> for this year's Twelve Days of Dancer. With a little help from our friends, we've put together a 12-day mini advent calendar featuring some great software built in Dancer, some helpful tips and tricks, new features, and more. </p>

<p>Thanks for being such a great community, and for your continued support of Dancer! Wishing you the happiest of holiday seasons!</p>

<p>CromeDome (on behalf of the Dancer Core Developers)</p>]]>
        
    </content>
</entry>
  <entry>
  <title>do</title>
  <summary type="html"><![CDATA[<p>
<b>do $filename</b> will read the content of the file and the it will try to execute it insides the current process.
<p>
I use it sometimes when there is a command line program I'd like to test, but one that needs finer interaction
than one could do if it was executed as an external Perl program. For example if I need to set some variables, or
mock some part of the program.
<p>
Just as <b>eval</b> using <b>do</b> will also capture errors it encounters. It is important to understand how we can
see those errors.
<p>
Here is how <b>do</b> reports problems.
<p>
]]></summary>
  <updated>2020-12-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/do"/>  <id>https://perlmaven.com/do</id>
  <content type="html"><![CDATA[<p>
<b>do $filename</b> will read the content of the file and the it will try to execute it insides the current process.
<p>
I use it sometimes when there is a command line program I'd like to test, but one that needs finer interaction
than one could do if it was executed as an external Perl program. For example if I need to set some variables, or
mock some part of the program.
<p>
Just as <b>eval</b> using <b>do</b> will also capture errors it encounters. It is important to understand how we can
see those errors.
<p>
Here is how <b>do</b> reports problems.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 090</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-090-41" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-090/">Challenge 090</a></p>

<h1>
  <a href="#champion" class="anchor">
  </a>
  Champion
</h1>

<p>Mohammad awarded me Team PWC champion for last month. I was totally surprised when reading this weeks challenge to find this out. I feel honoured to have joined the other <a href="https://perlweeklychallenge.org/champions/">champions</a>.</p>

<p>And a big thanks to Randi Comrie and <a href="https://perl.careers/">Perl Careers</a> team for the reward.</p>

<h1>
  <a href="#task-1-dna-sequence" class="anchor">
  </a>
  Task #1 › DNA Sequence
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>Write a script to print nucleobase count in the given DNA sequence. Also print the complementary sequence where Thymine (T) on one strand is always facing an adenine (A) and vice versa; guanine (G) is always facing a cytosine (C) and vice versa.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>I'll admit I know nothing about DNA sequencing, so I took this challenge as a purely programmatic one. The task can be broken down to two parts.</p>

<ol>
<li>To display the count, I use a <code>foreach</code> loop to count each character, and another to display the count of each nucleobase.</li>
<li>To calculate the complementary sequence I use the <a href="https://perldoc.perl.org/functions/tr">tr function</a> to reverse the characters in the string, and display it.</li>
</ol>

<h2>
  <a href="#example" class="anchor">
  </a>
  Example
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG
Nucleobases count
T: 22
A: 14
G: 13
C: 18

Complementary sequence is 'CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC'
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-ethiopian-multiplication" class="anchor">
  </a>
  Task #2 › Ethiopian Multiplication
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given two positive numbers <code>$A</code> and <code>$B</code>.</p>

<p>Write a script to demonstrate <a href="https://threesixty360.wordpress.com/2009/06/09/ethiopian-multiplication/">Ethiopian Multiplication</a> using the given numbers.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>This was a really interesting challenge for two reasons. Firstly, I learnt a new way to multiple numbers and the way that it works. Secondly was the way to show the result without using fonts.</p>

<p>For this task I use a loop to build an array starting with the two numbers, and then divided the first number (dropping the remainder) and multiplying the second. We end that loop when the first number is 1.</p>

<p>I then display each row with the two numbers with <code>&gt;</code> symbol to indicate whether the first number is odd. Finally, I add up all the second numbers where the first number is odd, and display the result.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl 12 14
  12 ×  14
   6 ×  28
&gt;  3 ×  56
&gt;  1 × 112

Result is: 56 + 112 = 168

» ./ch-2.pl 25 31
&gt; 25 ×  31
  12 ×  62
   6 × 124
&gt;  3 × 248
&gt;  1 × 496

Result is: 31 + 248 + 496 = 775
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-090-41</id>
    <published>2020-12-13T07:58:40Z</published>
    <updated>2020-12-13T07:58:40Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6706364024855383118</id>
    <published>2020-12-04T17:40:00.001-08:00</published>
    <updated>2020-12-12T20:23:18.472-08:00</updated>
    <title type="text">rt.cpan.org will sunset on March 1st, 2021</title>
    <content type="html">&lt;p&gt;rt.cpan.org will be sunset on March 1st, 2021 due to low and declining use.&lt;/p&gt;&lt;p&gt;We're still finalizing the details, but the plan is to provide a static historical archive.&amp;nbsp;&lt;/p&gt;&lt;p&gt;This post will be updated as we figure things out.&lt;/p&gt;&lt;p&gt;Update 12/12/2020:&lt;/p&gt;&lt;p&gt;Module authors may find Dave Cross' &lt;a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/"&gt;Plan for CPAN Authors&lt;/a&gt;, which describes steps you may wish to take to transition to a new bug tracking system.&amp;nbsp; For those of you moving to GitHub, you may enjoy his&amp;nbsp;&lt;a href="https://metacpan.org/pod/RTx::ToGitHub"&gt;RTx::ToGitHub&lt;/a&gt;&amp;nbsp;module.&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/6706364024855383118/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html#comment-form" title="7 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html" title="rt.cpan.org will sunset on March 1st, 2021"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>7</thr:total>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: GCD Sums and Magic Squares</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9983</id>

    <published>2020-12-06T21:54:04Z</published>
    <updated>2020-12-13T01:23:56Z</updated>

    <summary>These are some answers to the Week 89 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Task 1: GCD Sums You are given a positive integer $N. Write a script to sum GCD of all possible unique pairs...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 89 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: GCD Sums</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to sum GCD of all possible unique pairs between 1 and <code>$N</code>.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 3
Output: 3

gcd(1,2) + gcd(1,3) + gcd(2,3)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 4
Output: 7

gcd(1,2) + gcd(1,3) + gcd(1,4) + gcd(2,3) + gcd(2,4) + gcd(3,4)
</code></pre>

<h3>GCD Sums in Raku</h3>

<p>Raku has the <a href="https://docs.raku.org/routine/gcd">infix gcd</a> operator which computes the GCD for us. Thus, chaining the <a href="https://docs.raku.org/routine/combinations">compinations</a>, <code>gcd</code>, <code>map</code>, and <a href="https://docs.raku.org/routine/sum">sum</a> built-in routines yields a solution fitting in just one code line:</p>

<pre><code>use v6;

say (1..$_).combinations(2).map({$_[0] gcd $_[1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>We could also use the <code>[]</code> reduction metaoparator with the <code>+</code> operator:</p>

<pre><code>say (1..$_).combinations(2).map({[gcd] $_[0,1]}).sum for 1..1..@*ARGS[0];
</code></pre>

<p>Both solutions lead to the following output</p>

<pre><code>$ raku gcd-sum.raku 10
0
1
3
7
11
20
26
38
50
67
</code></pre>

<h3>GCD Sums in Perl</h3>

<p>We first implement a <code>gcd</code> subroutine that uses the Euclidean algorithm to compute the GCD of two numbers. We then use a doubly nested <code>for</code> loop to generate all pairs of numbers between 1 and the input ceiling parameter:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub gcd {
        my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
        while ($j) {
                ($i, $j) = ($j, $i % $j);
        }
        return $i;
}
my $n = shift;
my $sum = 0;
for my $i (1..$n) {
    for my $j ($i+1..$n) {
        $sum += gcd $i, $j;
    }
}
say $sum;
</code></pre>

<h2>Task 2: Magical Matrix</h2>

<p><em>Write a script to display matrix as below with numbers 1 - 9. Please make sure numbers are used once.</em></p>

<pre><code>[ a b c ]
[ d e f ]
[ g h i ]
</code></pre>

<p><em>So that it satisfies the following:</em></p>

<pre><code>a + b + c = 15
d + e + f = 15
g + h + i = 15
a + d + g = 15
b + e + h = 15
c + f + i = 15
a + e + i = 15
c + e + g = 15
</code></pre>

<p>This is more commonly known as a <em>magic square</em>. A square array of numbers, usually positive integers, is called a <em>magic square</em> if the sums of the numbers in each row, each column, and both main diagonals are the same. Albrecht Dürer&#8217;s famous engraving <em>Melencolia I</em> (1514) includes an order 4 square with magic sum 34.</p>

<p><img alt="Albrecht_Dürer_Melencolia_I.jpg" src="http://blogs.perl.org/users/laurent_r/Albrecht_D%C3%BCrer_Melencolia_I.jpg" width="555" height="578" class="mt-image-none" style="" /></p>

<h3>Magic Square in Raku</h3>

<p>I originally started to write a recursive subroutine to populate the square with all possible combinations of integers between 1 and 9 (or 1 and 126 for order 4 squares. This turned out to be a bit clumsy. I changed my mind and decided to use the <a href="https://docs.raku.org/routine/permutations">permutations</a> built-in routine to generate all possible lists of 9 integers (between 1 and 9) and only after that to transform them into squares of numbers and check whether they form a magic square.</p>

<pre><code>use v6;
constant \SIZE = 3;
constant \MAX = SIZE - 1;
constant \SUM = (([+] 1..SIZE*SIZE)/SIZE).Int;

my ($count-perm, $count-mat) = 0, 0;

sub print-matrix (@matrix) {
    for @matrix -&gt; @row {
        say '[', @row.fmt("%2i").join(" "), ' ]';
    }
    say " ";
}
sub col-sum (@matrix, Int $j) {
    my $sum = 0;
    $sum += @matrix[$_][$j] if defined @matrix[$_][$j] for 0..MAX;
    return $sum;
}
sub cross_sum (@matrix) {
    my $nw2se = 0;
    $nw2se += @matrix[$_][$_] for 0..MAX;
    my $ne2sw = 0;
    $ne2sw += @matrix[$_][MAX-$_] for 0..MAX;
    return $nw2se, $ne2sw;
}
sub is-valid (@matrix) {
    for (0..MAX) -&gt; $k {
        return False if (col-sum @matrix, $k) != SUM;
    }
    return True if SUM == all cross_sum @matrix;
    return False;
}

sub find-matrices {
    my @int-list = 1..9;
    OUT: for @int-list.permutations -&gt; $perm {
        $count-perm++;
        my @matrix = gather {
            for $perm.Array -&gt; $i, $j, $k {
                next OUT unless $i + $j + $k == SUM;
                take [ $i, $j, $k ];
            }
        }
        $count-mat++;
        next unless is-valid @matrix; 
        print-matrix @matrix;
        # last;
    }
}

find-matrices;   
say "Counters: $count-perm $count-mat";
</code></pre>

<p>Note that, for performance improvement, the <code>find-matrices</code> routine skips early on any matrix in which any line sum if not equal to the target sum. This way, instead of having to check 362,880 (9!) matrices, we need to verify only 2,592 of them (less than 1% of the total).</p>

<p>This is the output displayed by this program:</p>

<pre><code>$ raku magic-square2.raku
[ 2  7  6 ]
[ 9  5  1 ]
[ 4  3  8 ]

[ 2  9  4 ]
[ 7  5  3 ]
[ 6  1  8 ]

[ 4  3  8 ]
[ 9  5  1 ]
[ 2  7  6 ]

[ 4  9  2 ]
[ 3  5  7 ]
[ 8  1  6 ]

[ 6  1  8 ]
[ 7  5  3 ]
[ 2  9  4 ]

[ 6  7  2 ]
[ 1  5  9 ]
[ 8  3  4 ]

[ 8  1  6 ]
[ 3  5  7 ]
[ 4  9  2 ]

[ 8  3  4 ]
[ 1  5  9 ]
[ 6  7  2 ]

Counters: 362880 2592
</code></pre>

<p>The implementation above is still way too complicated. It would be better to work all the way with one-dimension arrays, and to transform them into squares at the last moment. I don&#8217;t have time to refactor this program now, but the Perl implementation below uses this much simpler implementation (despite having no <code>permutations</code> built-in).</p>

<h3>Magic Square in Perl</h3>

<p>As noted above, this implementation does all the work on flat arrays of 9 integers, and transforms them into squares only when it is needed at the latest moment for the purpose of printing the squares that have been found to be magic.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant SUM =&gt; 15;

my @in = 1..9;
my @permutations;

sub print_matrix {
    my @matrix = ( [@{$_}[0..2]], [@{$_}[3..5]], [@{$_}[6..8]] );
    for my $row (@matrix)  {
        say "[", (map { sprintf "% 2i", $_ } @$row), " ]"; # for @$row;
    }
    say " ";
}

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}

sub permute {
    my ($in, $left) = @_;
    if (scalar @$left == 0) {
        return 
            # lines
            if sum( @{$in}[0..2]) != SUM
            or sum( @{$in}[3..5]) != SUM
            or sum( @{$in}[6..8]) != SUM
            # columns
            or sum( @{$in}[0, 3, 6]) != SUM
            or sum( @{$in}[1, 4, 7]) != SUM
            or sum( @{$in}[2, 5, 8]) != SUM 
            # diagonals
            or sum( @{$in}[0, 4, 8]) != SUM 
            or sum( @{$in}[2, 4, 6]) != SUM;
        push @permutations, $in;
        return;
    }
    for my $candidate (@$left) {
        my @vals = @$in;
        push @vals, $candidate;
        permute(\@vals, [grep $_ != $candidate, @$left]);
    }
}

permute [], \@in;
print_matrix \$_ for @permutations;
</code></pre>

<p>This displays the following:</p>

<pre><code>$ perl magic-square.pl
[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>

<h2>Perl Weekly Challenge # 89 in Scala</h2>

<p>As I mentioned elsewhere, what I like in Scala is the ability to combine the object-oriented and functional programming paradigms, like Raku and to a lesser degree Perl. Please note that I am a beginner in Scala, don&#8217;t look here for idionmatic Scala or for good practices.</p>

<h3>GCD Sum</h3>

<p>The Scala math <a href="https://www.scala-lang.org/api/2.12.5/scala/math/BigInt.html">BigInt library</a> has a <code>gcd</code> routine, but I decided to implement the <code>gcd</code> function (using the Euclidean algorithm) myself because I wasn&#8217;t keen on using big integers for this task. This is essentially a port to Scala of my GCD program in Perl.</p>

<pre><code>object Main {
  def main(args: Array[String]): Unit = {
    val in: Int = if (args.size == 1) args(0).toInt else 10
    var sum = 0
    for (m &lt;- 1 to in) {
      for (n &lt;- m + 1 to in) {
        sum += gcd(m, n)
      }
    }
    println(s"Sum of GCD to $in is $sum")
  }
  def gcd(a: Int, b: Int): Int = {
    var (i, j) = (a, b)
    while (j &gt; 0) {
      var t = i
      i = j
      j = t % j
    }
    return i
  }
}
</code></pre>

<p>This prints out the following output:</p>

<pre><code>Sum of GCD to 10 is 67
</code></pre>

<h3>Magic Square in Scala</h3>

<p>This is again essentially a port to Scala of my Perl program.</p>

<pre><code>import Array._
object Main {
  def main(args: Array[String]): Unit = {
    var mat = range(1, 10)
    var in = Array.empty[Int]
    permute(in, mat)
  }
  def print_matrix(a: Array[Int]): Unit = {
    println(s"[ ${a(0)} ${a(1)} ${a(2)} ]")
    println(s"[ ${a(3)} ${a(4)} ${a(5)} ]")
    println(s"[ ${a(6)} ${a(7)} ${a(8)} ]")
    println(" ")
  }
  def permute(in: Array[Int], left: Array[Int]): Unit = {
    val sum = 15
    if (left.size == 0) {
      if (
        in.slice(0, 3).sum != sum ||
        in.slice(3, 6).sum != sum ||
        in.slice(6, 9).sum != sum ||
        in(0) + in(3) + in(6) != sum ||
        in(1) + in(4) + in(7) != sum ||
        in(2) + in(5) + in(8) != sum ||
        in(0) + in(4) + in(8) != sum ||
        in(2) + in(4) + in(6) != sum 
      ) {
        return
      }
      print_matrix(in)
      return
    }
    for (candidate &lt;- left) {
      val values: Array[Int] = in.appended(candidate)
      val newleft: Array[Int] = left.filter(_ != candidate)
      permute(values, newleft)
    }
  }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>[ 2 7 6 ]
[ 9 5 1 ]
[ 4 3 8 ]

[ 2 9 4 ]
[ 7 5 3 ]
[ 6 1 8 ]

[ 4 3 8 ]
[ 9 5 1 ]
[ 2 7 6 ]

[ 4 9 2 ]
[ 3 5 7 ]
[ 8 1 6 ]

[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]

[ 6 7 2 ]
[ 1 5 9 ]
[ 8 3 4 ]

[ 8 1 6 ]
[ 3 5 7 ]
[ 4 9 2 ]

[ 8 3 4 ]
[ 1 5 9 ]
[ 6 7 2 ]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 13, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent of Code Day 12 - sailing to a pause</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_12.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_12.html</id>
    <updated>2020-12-12T22:28:05+00:00</updated>
    <category term="perl"/>
    <summary type="html">This was another fun one. It took me some time to get the logic right (or left?), but in the end I came up with a nice solution. BTW, this will be the last daily blog post, as I'll have to finish ...</summary>
    <content type="html">&lt;p&gt;This was another fun one. It took me some time to get the logic right (or left?), but in the end I came up with a nice solution. &lt;span class="caps"&gt;BTW, &lt;/span&gt;this will be the last daily blog post, as I'll have to finish some work projects, and start with some holiday projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/12"&gt;https://adventofcode.com/2020/day/12&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;my @in  = map { [/^(\w)(\d+)$/] } &amp;lt;&amp;gt;;
my @dir = qw(N E S W);
my $cur = 1;
my $r   = 0;
my $c   = 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We again parse the map into a list of ops and values. Then we set up some things we'll need, like the list of directions and the current heading (&lt;code&gt;$cur&lt;/code&gt;) which is an index into the &lt;code&gt;dir-array&lt;/code&gt;. &lt;code&gt;$r&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; are the row and col where the ship currently is location (I prefer row/col to x/y).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %ops;
%ops = (
    N =&amp;gt; sub { $r -= shift },
    S =&amp;gt; sub { $r += shift },
    E =&amp;gt; sub { $c += shift },
    W =&amp;gt; sub { $c -= shift },
    F =&amp;gt; sub { $ops{ $dir[$cur] }(shift) },
    L =&amp;gt; sub { $cur = ( $cur - $_[0] / 90 ) % 4 },
    R =&amp;gt; sub { $cur = ( $cur + $_[0] / 90 ) % 4 },
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we implement the ops. The first four simple move the ship around. &lt;code&gt;F&lt;/code&gt; (forward) gets the current direction ("E" in the example), and calls the corresponding function. L and R where hard to get right. We calculate the number of turns (1, 2 or 3, depending on the degree value), and add or subtract it from the current index, using &lt;code&gt;mod&lt;/code&gt; to stay inside the array of allowed directions (using negative modulus is always fun!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (@in) {
    my ( $op, $val ) = @$_;
    $ops{$op}($val);
}
say abs( 0 - $r ) + abs( 0 - $c );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we just need to go through the instruction set and call each op; and then calculate the Manhattan distance...&lt;/p&gt;

&lt;p&gt;In my first version I used plain functions instead of the dispatch table, which I liked a bit better, but required me to turn off 'refs' strictures.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Again it took me quite some time to understand the description, but after some scribbling and counting I figured it out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $wr = -1;
my $wc = 10;
my $sr = 0;
my $sc = 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the second part, we "just" need to add a second set of coordinates for the waypoint (&lt;code&gt;$wr, $wc&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %ops;
%ops = (
    N =&amp;gt; sub { $wr -= shift },
    S =&amp;gt; sub { $wr += shift },
    E =&amp;gt; sub { $wc += shift },
    W =&amp;gt; sub { $wc -= shift },
    F =&amp;gt; sub { my $val = shift; $sr += $val * $wr; $sc += $val * $wc },
    R =&amp;gt; sub { for ( 1 .. $_[0] / 90 ) { ( $wr, $wc ) = ( $wc, $wr ); $wc *= -1 } },
    L =&amp;gt; sub { for ( 1 .. $_[0] / 90 ) { ( $wr, $wc ) = ( $wc, $wr ); $wr *= -1 } },
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ops change a bit, mostly moving the waypoint around. &lt;code&gt;F&lt;/code&gt; will move the ship. I used pen &amp;amp; paper to discover that to rotate the waypoint I need to switch row and col and (depending on the direction) change the sign on the row or col (i.e. multiply by -1). To switch row and col, we use a nice Perl trick to switch two values around using fancy list context: ( $a, $b ) = ($b, $a).&lt;/p&gt;

&lt;p&gt;The rest of the code stays the same...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 43:37 / 43:08&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 20406 / 21148&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/12"&gt;https://adventofcode.com/2020/day/12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8070445469008687722</id>
    <published>2020-12-12T19:58:00.000+01:00</published>
    <updated>2020-12-12T19:58:40.612+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxix) 12 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.996' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.996&lt;/strong&gt; on 2020-12-06&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: 0.995 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ROBM/Cache-FastMmap-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::FastMmap&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uses an mmap'ed file to act as a shared memory interprocess cache &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-12&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.51 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9712&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9711 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/libnet-3.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Collection of network protocol modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.12&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 3.11 was 3 years, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Lingua-EN-Inflect-1.905' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Lingua::EN::Inflect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Convert singular to plural. Select "a" or "an". &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.905&lt;/strong&gt; on 2020-12-08&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.904 was 1 year, 7 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-AssetPack-2.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::AssetPack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Compress and convert css, less, sass, javascript and coffeescript files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.10&lt;/strong&gt; on 2020-12-11&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 2.09 was 3 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20201207' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20201207&lt;/strong&gt; on 2020-12-06&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 20201202 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/FERKI/Rex-1.13.2' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13.2&lt;/strong&gt; on 2020-12-05&lt;/li&gt;  &lt;li&gt;Votes: 73&lt;/li&gt;  &lt;li&gt;Previous version: 1.13.1 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0928' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0928&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0927 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Test-WWW-Mechanize-1.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Testing-specific WWW::Mechanize subclass &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.54&lt;/strong&gt; on 2020-12-09&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.52 was 2 years, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/Text-Balanced-2.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Balanced&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extract delimited text sequences from strings. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.04&lt;/strong&gt; on 2020-12-11&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.03 was 5 years, 9 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BKB/Text-Fuzzy-0.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Fuzzy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Partial string matching using edit distances &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.29&lt;/strong&gt; on 2020-12-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.28 was 2 years, 2 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8070445469008687722/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxix-12-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8070445469008687722"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8070445469008687722"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cccxix-12-cpan-great-modules-released.html" title="(cccxix) 12 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5526161168838765877</id>
    <published>2020-12-12T19:00:00.001+01:00</published>
    <updated>2020-12-12T19:00:08.867+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlvi) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/12/12 17:59:34 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Iptables2Dot" target="_blank"&gt;App::Iptables2Dot&lt;/a&gt; - Analyze iptables with GraphViz&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::MakeEPUB" target="_blank"&gt;App::MakeEPUB&lt;/a&gt; - Create an EPUB ebook&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::NDTools" target="_blank"&gt;App::NDTools&lt;/a&gt; - Command line tools for nested structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPANPLUS::Dist::Slackware" target="_blank"&gt;CPANPLUS::Dist::Slackware&lt;/a&gt; - Install Perl distributions on Slackware Linux&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Directory::Organize" target="_blank"&gt;Directory::Organize&lt;/a&gt; - create and find directories interactive&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::PCAP" target="_blank"&gt;File::PCAP&lt;/a&gt; - a pure Perl library to read and write PCAP files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin" target="_blank"&gt;FindBin&lt;/a&gt; - Locate directory of original perl script&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::Notify" target="_blank"&gt;Gtk3::Notify&lt;/a&gt; - Perl interface to libnotify&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; - Get a domain name's public suffix via the Mozilla Public Suffix List&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/pgtop" target="_blank"&gt;pgtop&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::NGrammer" target="_blank"&gt;Text::NGrammer&lt;/a&gt; - Pure Perl extraction of n-grams and skip-grams&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::XSAccessor" target="_blank"&gt;Class::XSAccessor&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=119)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dx" target="_blank"&gt;Data::Dx&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=198)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::PPPort" target="_blank"&gt;Dist::Zilla::Plugin::PPPort&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FCGI" target="_blank"&gt;FCGI&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Path" target="_blank"&gt;File::Path&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurper" target="_blank"&gt;File::Slurper&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HealthCheck" target="_blank"&gt;HealthCheck&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::GoogleMaps::V3" target="_blank"&gt;HTML::GoogleMaps::V3&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::ConcurrencyLimit" target="_blank"&gt;IPC::ConcurrencyLimit&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::PP" target="_blank"&gt;JSON::PP&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdown::Pod" target="_blank"&gt;Markdown::Pod&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markua::Parser" target="_blank"&gt;Markua::Parser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Base::Convert" target="_blank"&gt;Math::Base::Convert&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE::Shared" target="_blank"&gt;MCE::Shared&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=80)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=278)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP" target="_blank"&gt;MOP&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::RecordLocator" target="_blank"&gt;Number::RecordLocator&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=156)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rose::DB" target="_blank"&gt;Rose::DB&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Router::Boom" target="_blank"&gt;Router::Boom&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Router::XS" target="_blank"&gt;Router::XS&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::PPPort" target="_blank"&gt;Test::PPPort&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=123)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny::XS" target="_blank"&gt;Type::Tiny::XS&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Z" target="_blank"&gt;Z&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5526161168838765877/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5526161168838765877"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5526161168838765877"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/12/cdxlvi-metacpan-weekly-report.html" title="(cdxlvi) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): November 2020 Grant Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-report-20-11"/>
  <id>tag:news.perlfoundation.org,2020-12-12:/post/tony-report-20-11</id>
  <published>2020-12-12T13:55:42</published>
  <updated>2020-12-12T13:55:42</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his grant under [Perl 5 Core Maintenance Fund](http://www.perlfoundation.org/perl_5_core_maintenance_fund).
We thank the TPF sponsors to make this grant possible.

Approximately 46 tickets were reviewed, and 9 patches were
applied
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
[Hours]         [Activity]
  2.08          more win32 test noise, fix some, PR 377 for EU::MM,
                File::Path bug report cpan#133671
  1.32          #16825 research
  4.43          #17296 find another issue, work on a test and fix
                #17296 more fixes, make PR #18327
  1.18          go through PRs, checking #17724 (ask sawyerx for a
                comment), #17848 (comment), #17909 (some research), #17999
                review and some testing
  1.70          #17926 research
                #17926 rebase, re-test and apply to blead, perldelta
                updates
  1.54          review notifications mostly #17999
                #17999 comment
                #17999 comment
 10.58          #18005 more commit clean up, start a test run
                #18005 review results, add Test::Harness fix, testing,
                start a developer mode (symlinks enabled) test run
                #18005 diagnose build failure (possibly from rebase), fix
                and testing
                #18005 rebase on recent fixes and testing
                #18005 more testing, push for smoke-me
                #18005 more re-work commits, minor fixes, testing, push
                for smoke-me
                #18005 review smoke results
                #18005 more review smoke results, make PR 18306
                #18005 re-work based on xenu’s comments
                #18005 rebase win32-symlink code, make tests pass pre-
                vista, including fixing a test bug
  0.55          #18094 review and apply to blead
  0.32          #18133 check and apply to blead
  5.61          #18232 review some more, work up a erroneous case and
                comment
                #18232 review, work up a failing test case
                #18232 debugging, testing, comment
                #18232 testing, partly squash and apply to blead
  3.56          review notifications,mostly #18256
                #18256 code review, testing
  0.80          #18262 review and briefly comment
  0.47          #18272 rebase, squash and apply to blead
  0.65          #18279 research and briefly comment
  0.52          #18283 review and apply to blead
  0.67          #18285 review, research and comment
                #18285 comment
  1.63          #18293 debug, work on a fix, add a test, make PR 18307
  0.15          #18297 review and apply to blead
  0.10          #18298 review and comment
  1.35          #18308 review and comment
                #18308 fix an unrelated failure
  1.03          #18322 research and comment
                #18322 comment
  1.22          #18325 review, discussion with khw
  1.08          #18337 revise IO documentation PR based on comments
  0.45          #18339 review, test and apply to blead
  0.12          #18341 check fix was merged and close
  0.13          #18354 review, apply to blead
  0.17          #18359 review and briefly comment
  3.64          #18364 reproduce with gcc, try to figure out why MSVC
                isn’t failing the same way
                #18364 figure it out, discussion with khw
                #18364 testing
  1.93          look over OS X failures, reproduce and diagnose, work on
                an EU::MM PR to fix it #379
                my EU::MM #379: haarg made a better PR, close mine
  0.95          :utf8  rebase
  1.55          :utf8 more rebase
  2.20          check other sysv ipc ops for UTF-8 issues, find one in
                semop (test and fix), another in msgsnd/rcv (work on
                tests)
  2.23          document IO
  1.45          dragonfly changes: review smokes, reproduce freebsd issue
                (fixed in blead), rebase and apply to blead
  1.07          fix msgsnd, fix msgrcv, fix shmwrite
  2.30          fix read on close DATA, look at other test noise
  0.17          list catchup
  1.50          perldelta updates
  0.40          review coverity results
  0.43          review github notifications
  0.45          review notifications
  0.30          review trim discussion
  2.63          track down Fedora sanitize failures, both internal libs
                leaks
  0.82          trim discussion, comment
  0.60          win32-symlink: rebase, split out more pre-vista support
  1.37          work on testing, fixes to the (non-symlink) Win32 build
======
 69.40 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry>
    <title>Advent of Code Day 11 - slow SeatGoL</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_11.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_11.html</id>
    <updated>2020-12-11T19:50:37+00:00</updated>
    <category term="perl"/>
    <summary type="html">Finally, some Game of Life

https://adventofcode.com/2020/day/11

Part 1

Today I needed quite a bit of code, so let's split it up:

my @map = map { chomp; [ split // ] } &amp;lt;&amp;gt;;
my $h   = @map;
my </summary>
    <content type="html">&lt;p&gt;Finally, some &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Game of Life&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/11"&gt;https://adventofcode.com/2020/day/11&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;Today I needed quite a bit of code, so let's split it up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [ split // ] } &amp;lt;&amp;gt;;
my $h   = @map;
my $w   = $map[0]-&amp;gt;@*;
my $occ = 0;
my $max = 4;
my @around =
    ( [ -1, -1 ], [ -1, 0 ], [ -1, 1 ], [ 0, -1 ], [ 0, 1 ], [ 1, -1 ], [ 1, 0 ], [ 1, 1 ] );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After getting the input and storing it into a 2-dimensional list, I set up some other things we'll need: the **h**eight and **w**idth of the map, the number of occupied seats, the maximum number of neighbors and a list of "vectors" to look around (left/up, up, right/up, left, right, left/down, down, right/down) as array index offsets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (1) {
    my @next;
    my $thisocc = 0;
    for ( my $r = 0; $r &amp;lt; $h; $r++ ) {
        for ( my $c = 0; $c &amp;lt; $w; $c++ ) {
            my $new = $next[$r][$c] = gol( \@map, $r, $c );
            $thisocc++ if $new eq '#';
        }
    }
    last if $thisocc == $occ;
    @map = @next;
    $occ = $thisocc;
    say '.';
}
say $occ;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the main loop, which we run until the current number of occupied seats is the same is the previous number (&lt;code&gt;last if $thisocc == $occ;&lt;/code&gt;). Inside the loop, we walk through the rows and cols of the map, and call the &lt;code&gt;gol()&lt;/code&gt; function with the current map and position (see later). &lt;code&gt;gol()&lt;/code&gt; will return the new value for this position, which we store in the &lt;code&gt;new&lt;/code&gt; map (we cannot use the same map). If we get an occupied seat, we count it (&lt;code&gt;$thisocc++ if $new eq '#'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Outside the loop, we check for termination. If we're not done yet, we define the newly generated map as the map to be used in the next iteration, and remember the current occupied count. And we output a ., so we know we're still running (this is a &lt;strong&gt;very slow&lt;/strong&gt; solution, taking ~6 secs. I'm sure you can find faster algorithms on reddit...)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub gol {
    my ( $map, $r, $c ) = @_;

    my $count = look( $map, $r, $c );
    my $old   = $map[$r][$c];
    return '#' if $old eq 'L' &amp;amp;&amp;amp; $count == 0;
    return 'L' if $old eq '#' &amp;amp;&amp;amp; $count &amp;gt;= $max;
    return $old;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gol()&lt;/code&gt; first calls another function, &lt;code&gt;look()&lt;/code&gt;, to figure out how many seats around the current one are occupied. It the uses the old value and this count to figure out the next value and returns it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub look {
    my ( $map, $r, $c ) = @_;
    my $count = 0;
    foreach my $vec (@around) {
        my $m = $r + $vec-&amp;gt;[0];
        my $n = $c + $vec-&amp;gt;[1];
        next     if $m &amp;lt; 0 || $n &amp;lt; 0 || $m &amp;gt;= $h || $n &amp;gt;= $w;
        $count++ if $map[$m][$n] eq '#';
    }
    return $count;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;look()&lt;/code&gt; uses the list of vectors to look around the current position, by calculating &lt;code&gt;$m&lt;/code&gt; and &lt;code&gt;$n&lt;/code&gt;. We skip if &lt;code&gt;$m&lt;/code&gt; or &lt;code&gt;$n&lt;/code&gt; are outside the map. And finally we increment the count if the place we are looking at is occupied (&lt;code&gt;#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Rather simple, but of course it took me some time to get all the parts arranged the right way. I'm quite sure that I have some nearly identical code lying around in last years repo. Maybe it would make sense to prepare a AdventOfCode helper distribution? Or is that cheating?&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;The second part just changes the way consider which seats should be counted. I again implemented a simple brute-force solution (my trademark!). The original code was of course copy/pasted and manically adapted, but after my submission I cleaned up bot solutions and refactored them, so that we only need to change the &lt;code&gt;look()&lt;/code&gt; function for part 2 (and the value of &lt;code&gt;$max&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub look {
    my ( $map, $r, $c ) = @_;
    my $count = 0;
    foreach my $vec (@around) {
        my $tr = $r;
        my $tc = $c;
        while (1) {
            my $m = $tr + $vec-&amp;gt;[0];
            my $n = $tc + $vec-&amp;gt;[1];
            last if $m &amp;lt; 0 || $n &amp;lt; 0 || $m &amp;gt;= $h || $n &amp;gt;= $w;
            my $val = $map[$m][$n];
            $count++ if $val eq '#';
            last unless $val eq '.';
            $tr = $m;
            $tc = $n;
        }
    }
    return $count;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We "only" need to add another loop to look further along the vector. I think this could be refactored even more, because both &lt;code&gt;look()&lt;/code&gt; functions share a great deal of code. Patches welcome...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 29:44 / 10:02&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 17615 / 15517&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/11"&gt;https://adventofcode.com/2020/day/11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Major features from Perl 5.6 to 5.18</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/major-features-from-perl-5-6-to-5-18-1lb3" type="text/html"/>
    <content type="html">&lt;p&gt;I just wanted to drop a list of (mainly high-level) changes from 5.6 to 5.18, in bulk 😄&lt;/p&gt;

&lt;p&gt;I think I've got this list from taking note watching a rjbs presentation + reddit posts/comments.&lt;/p&gt;

&lt;p&gt;For non Perl people, these versions are already old.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#56" class="anchor"&gt;
  &lt;/a&gt;
  5.6
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;unicode !&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#58" class="anchor"&gt;
  &lt;/a&gt;
  5.8
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;new implementation of threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5100" class="anchor"&gt;
  &lt;/a&gt;
  5.10.0
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;use feature&lt;/li&gt;
&lt;li&gt;perl -E&lt;/li&gt;
&lt;li&gt;defined or //=&lt;/li&gt;
&lt;li&gt;named captures&lt;/li&gt;
&lt;li&gt;state vars&lt;/li&gt;
&lt;li&gt;$* and $# deprecated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5101" class="anchor"&gt;
  &lt;/a&gt;
  5.10.1
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;resolve issue 5.10.0 (yes deserve a major feature entry)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#512" class="anchor"&gt;
  &lt;/a&gt;
  5.12
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;change releasing flow&lt;/li&gt;
&lt;li&gt;pkg name version&lt;/li&gt;
&lt;li&gt;pluggable keywords&lt;/li&gt;
&lt;li&gt;version number format&lt;/li&gt;
&lt;li&gt;parent.pm in core&lt;/li&gt;
&lt;li&gt;links in POD L&amp;lt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#514" class="anchor"&gt;
  &lt;/a&gt;
  5.14
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;s//r/r&lt;/li&gt;
&lt;li&gt;block package syntax&lt;/li&gt;
&lt;li&gt;custom ops&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#516" class="anchor"&gt;
  &lt;/a&gt;
  5.16
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;big unicode improvement : e.g. unicode in symbol names&lt;/li&gt;
&lt;li&gt;fc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#518" class="anchor"&gt;
  &lt;/a&gt;
  5.18
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;experimental warnings&lt;/li&gt;
&lt;li&gt;hash randomization&lt;/li&gt;
&lt;li&gt;regex sets&lt;/li&gt;
&lt;li&gt;lexical subs&lt;/li&gt;
&lt;li&gt;qw() without parenthesis fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all folks !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdfsyyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnwvzitp9wf7kj8xh8ja.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdfsyyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnwvzitp9wf7kj8xh8ja.jpg" alt="In Perl We Trust"&gt;&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/major-features-from-perl-5-6-to-5-18-1lb3</id>
    <published>2020-12-11T13:38:55Z</published>
    <updated>2020-12-11T13:38:55Z</updated>
    <category term="perl"/>
    <category term="changelog"/>
  </entry>
  <entry>
    <title>Arbeiten mit Nuclino Teil 3</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-11-nuclino-backup-III" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In den vergangenen beiden Artikeln über unser Nuclino-Backup habe ich erst vorgestellt, wie wir die Backups erstellen und anschließend wie wir das Programm schneller gemacht haben. </div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-11-nuclino-backup-III</id>
    <published>2020-12-11T10:00:00Z</published>
    <updated>2020-12-11T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 90: DNA Sequence and Ethiopian Multiplication</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-90-dna-sequence-and-ethiopian-multiplication.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9984</id>

    <published>2020-12-08T23:21:11Z</published>
    <updated>2020-12-11T01:09:54Z</updated>

    <summary>These are some answers to the Week 90 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a few days (December 13, 2020). This blog post offers some solutions to...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 90 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-090/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (December 13, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: DNA Sequence</h2>

<p><em>DNA is a long, chainlike molecule which has two strands twisted into a double helix. The two strands are made up of simpler molecules called nucleotides. Each nucleotide is composed of one of the four nitrogen-containing nucleobases cytosine (C), guanine (G), adenine (A) and thymine (T).</em></p>

<p><em>You are given DNA sequence, <code>GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG</code>.</em></p>

<p><em>Write a script to print nucleobase count in the given DNA sequence. Also print the complementary sequence where Thymine (T) on one strand is always facing an adenine (A) and vice versa; guanine (G) is always facing a cytosine (C) and vice versa.</em></p>

<p><em>To get the complementary sequence use the following mapping:</em></p>

<pre><code>T =&gt; A
A =&gt; T
G =&gt; C
C =&gt; G
</code></pre>

<h3>DNA Sequence in Raku</h3>

<p>For the nucleotide histogram, we can <a href="https://docs.raku.org/routine/comb">comb</a> the string into individual letters, use a hash to store the letter count and print out the hash pairs. This is a quite typical way of building histograms (but there are simpler solutions in Raku, as we shall see).</p>

<p>For the complementary sequence, we could use a hash to store the nucleotide mapping and use a <code>map</code> to perform the necessary conversion.</p>

<pre><code>use v6;

my $dna = 'GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG';

# count
my %histo;
%histo{$_}++ for $dna.comb;
say "Histogram:";
.say for %histo.pairs;

# Complementary sequence
my %complement = T =&gt; 'A', A =&gt; 'T', G =&gt; 'C', C =&gt; 'G';
.say for "Complement:", $dna.comb.map({%complement{$_}}).join: '';
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ raku dna.raku
Histogram:
T =&gt; 22
A =&gt; 14
C =&gt; 18
G =&gt; 13
Complement:
CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC
</code></pre>

<p>This program is relatively concise, but we can do much shorter code without sacrificing legibility. Each of the subtasks can be done in just one line of code.</p>

<p>For the nucleotide histogram, we <a href="https://docs.raku.org/routine/comb">comb</a> the string into individual letters, feed them into an <em>anonymous</em> <a href="https://docs.raku.org/type/Bag">bag</a> and print out that bag&#8217;s pairs.</p>

<p>For the DNA complement, we can use the <a href="https://docs.raku.org/language/operators#TR///_non-destructive_transliteration">TR///</a> non-destructive transliteration operator:</p>

<pre><code>use v6;

my $dna = 'GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG';

# count
say "Histogram:"; .say for Bag.new($dna.comb).pairs;

# Complementary sequence
say  "Complement:\n", TR/TAGC/ATCG/ with $dna;
</code></pre>

<p>The output is almost the same as before:</p>

<pre><code>Histogram:
T =&gt; 22
A =&gt; 14
G =&gt; 13
C =&gt; 18
Complement:
CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC
</code></pre>

<h3>DNA Sequence in Perl</h3>

<p>This program is basically a port to Perl of a combination of the Raku programs above.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $dna = 'GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG';
# count
my %histogram;
$histogram{$_}++ for split '', $dna;
say "$_: $histogram{$_}" for keys %histogram;

# Complementary sequence
say for "Complement:", $dna =~ tr/TAGC/ATCG/r;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl dna.pl
C: 18
G: 13
A: 14
T: 22
Complement:
CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC
</code></pre>

<h2>Task 2: Ethiopian Multiplication</h2>

<p><em>You are given two positive numbers <code>$A</code> and <code>$B</code>.</em></p>

<p><em>Write a script to demonstrate <a href="https://threesixty360.wordpress.com/2009/06/09/ethiopian-multiplication/">Ethiopian Multiplication</a> using the given numbers.</em></p>

<p>Ethiopian multiplication (also known as ancient Egyptian multiplication, Russian multiplication, or peasant multiplication) is an ancient method for multiplying two integers that does not require the multiplication table, only the ability to multiply and divide by 2, and to add. The basic idea is to apply repeatedly integer (or Euclidean) division by 2 to the first number (discarding any remainder), and to multiply repeatedly the second number by 2, until the first number becomes 1. Then we add the values of the second number for which the corresponding first number is odd. In practical terms, to do this manually, we can set up two columns with the first number on the left and the second on the right. If we want to multiply 19 and 42, we have the following process:  </p>

<pre><code>1st    2nd    Action       Sum so far
19      42    kept          42
 9      84    kept         126
 4     168    discarded    126    
 2     336    discarded    126
 1     672    kept         798
</code></pre>

<p>On the first line, the first number (17) is odd, so we will use the second number (42) in the final summation. On the second line, the first number (9) is odd again, so we will use the second number (84) in the final summation. On the third and fourth lines, the first number (4 and 2) are even, so the second number is not used in the final sum. Finally, on the last line, the first number is 1, so the process stops there and, since 1 is odd, the second number (672) is used in the final sum. When we add the numbers of the right column where the number on the left column is odd, we have: 42 + 84 + 672 = 798, which is the product of 17 by 42.</p>

<h3>Ethiopian Multiplication in Raku</h3>

<p>We implement a <code>while</code> loop whose stopping condition is when the first number (<code>$a</code>) becomes equal to 1. At each iteration, we use the Raku built-in <a href="https://docs.raku.org/routine/div">div</a> integer division operator to halve (rounding down the result) <code>$a</code> et we multiply the second number (<code>$b</code>) by 2. We also have an accumulator, <code>$result</code>, which accumulate the values of <code>$b</code> for which the corresponding <code>$a</code> is an odd integer (i.e. when <code>$a % 2</code> is not 0).  </p>

<pre><code>use v6;

my ($a, $b) = map {$_.Int}, @*ARGS;
my $result = $a % 2 ?? $b !! 0;
while $a &gt; 1 {
    $a div= 2;
    $b *= 2;
    $result += $b if $a % 2;
}
say $result;
</code></pre>

<p>This are a couple of example runs:</p>

<pre><code>$ raku ethiopian-mult.raku 14 12
168

$ raku ethiopian-mult.raku 19 42
798

Laurent@LAPTOP-LHI8GLRC ~
$ raku ethiopian-mult.raku 42 19
798

$ raku ethiopian-mult.raku 300 600
180000
</code></pre>

<h3>Ethiopian Multiplication in Perl</h3>

<p>This is a port to Perl of the Raku program above. Since Perl doesn&#8217;t have a <code>div</code> integer operator, we could use the standard division operator and round down the result with the <code>int</code> operator, but since it is a division by two, it is slightly shorter to use the <code>&gt;&gt;</code> right bit shift operator by one bit, which does an integer division by 2.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my ($c, $d) = @ARGV;
my $result = $c % 2 ? $d : 0;
while ($c &gt; 1) {
    $c = $c &gt;&gt; 1; # right shift 1 bit = div by 2
    $d *= 2;
    $result += $d if $c % 2;
}
say $result;
</code></pre>

<p>These are a few example runs:</p>

<pre><code>$ perl ethiopian-mult.pl 19 42
798

$ perl ethiopian-mult.pl 14 22
308

$ perl ethiopian-mult.pl 45 59
2655
</code></pre>

<h2>Perl Weekly Challenge # 90 in Scala</h2>

<p>In 2017, I translated into French the book <em>Scala by Example</em>, written by Martin Odersky, the creator of the Scala programming language. At the time, I found the language to be very interesting and fairly similar in spirit to Perl and even more to Raku, since it smoothly combines the object-oriented programming and functional programming paradigms. Although I wrote a few tiny toy programs at the time (or, rather, copied example programs and tried various changes to see what happens), I thought at the time that I probably wanted to learn the language, but never really took the time to do so. Maybe the Perl Weekly Challenge is an opportunity to start learning it. So, I dived into two tutorial books on the Internet and I started to port some of my Raku solutions to Scala over the last few weeks. It is also interesting to see with real examples how Scala compares with Raku and Perl. Caveat: I am a pure beginner in Scala, so my Scala code is certainly neither expressive, nor efficient, and even less idiomatic. It is certainly quite clumsy. Please feel free to sugggest any corrections, improvements, comments, or better practices.</p>

<h3>DNA Sequence in Scala</h3>

<p>We use the <code>toCharArray</code> to split the DNA string into an array of characters. For each character, we convert the nycleotide into its complement using a <code>match</code> expression. At the same time, for each letter, we increment en <code>histo</code> map entry for that letter.</p>

<pre><code>object Dna extends App {
    import scala.collection.mutable.Map
    val dna = "GTAAACCCCTTTTCATTTAGACAGATCGACTCCTTATCCATTCTCAGAGATGTGTTGCTGGTCGCCG";
    var result = ""
    var histo:Map[Char,Int] = Map('A' -&gt; 0, 'T' -&gt; 0, 'C' -&gt; 0, 'G' -&gt; 0)
    for (char &lt;- dna.toCharArray()) {
        // println(char)
        val charout = char match {
            case 'T' =&gt; 'A'
            case 'A' =&gt; 'T'
            case 'C' =&gt; 'G'
            case 'G' =&gt; 'C'
            case _   =&gt; char
        }
        result += char
        histo(char) += 1
    }
    println(s"Complement: $result")
    for ((k,v) &lt;- histo) println(s"$k: $v") 
}
</code></pre>

<p>Output:</p>

<pre><code>Complement: CATTTGGGGAAAAGTAAATCTGTCTAGCTGAGGAATAGGTAAGAGTCTCTACACAACGACCAGCGGC
A: 14
C: 18
T: 22
G: 13
</code></pre>

<h3>Ethiopian Multiplication in Scala</h3>

<p>This is Scala port of the Raku and Perl programs above. </p>

<pre><code>object Ethiopian extends App {
  mult(15, 24)

  def mult(a: Int, b: Int): Unit = {
    var (i, j) = (a, b)
    var sum = if (i % 2 != 0) j else 0
    while (i &gt; 1) {
      i /= 2;
      j *= 2;
      if (i % 2 != 0) {
        sum += j
      }
    }
    println(s"product of $a and $b is: $sum")

  }
}
// Prints: product of 15 and 24 is: 360
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 20, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent of Code Day 10 - trillion jolts</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_10.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_10.html</id>
    <updated>2020-12-10T19:58:54+00:00</updated>
    <category term="perl"/>
    <summary type="html">While the first part was ridiculously easy (after stripping away the overly complex "explanation"), I was not in the mood for doing the second part (recursion, memoization, ..) in the morning.
 ...</summary>
    <content type="html">&lt;p&gt;While the first part was ridiculously easy (after stripping away the overly complex "explanation"), I was not in the mood for doing the second part (recursion, memoization, ..) in the morning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/10"&gt;https://adventofcode.com/2020/day/10&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;We first need to sort the adapters by int value (hence the spaceship op &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;). We start with a jolt of 0, and prefill the result hash with a jolt-count for 3 (because the last adapter has a 3 jolt higher rating).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @adapters = sort { $a &amp;lt;=&amp;gt; $b } map { chomp; $_ } &amp;lt;&amp;gt;;

my $jolt  = 0;
my %jolts = ( 3 =&amp;gt; 1 );
for my $a (@adapters) {
    $jolts{ $a - $jolt }++;
    $jolt = $a;
}

say $jolts{1} * $jolts{3};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we just need to go through the sorted adapters, get the joltage difference between the current and the previous adapter (&lt;code&gt;$a - $jolt&lt;/code&gt;) and count the result. When we're done, we multiply the counts.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Hm, "more than a trillion" you say. Seems like a brute force combinatoric attack will not work out. Using some memoization would obviously help. But as I said, I had no time (and no motivation (and no meeting...)), so I stopped thinking about the problem.&lt;/p&gt;

&lt;p&gt;In the evening (I was still to lazy to actually think) I found &lt;a href="https://old.reddit.com/r/adventofcode/comments/kacv5i/2020_day_10_p2_need_some_logic_help_not_specific/gf9nsaf/?context=3"&gt;this excellent hint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which lead me to this solution:&lt;/p&gt;

&lt;p&gt;The main point here is that the input is coming in sets separated by the value 3. So we can break the input down into a bunch of subsets (which will always be consecutive numbers, which the first part showed by only containing jolts of 1 and 3). We now only need to figure out how many combination are possible for each subset, and then multiply these numbers. A quick run through the input revealed a max set size of 5. This seems doable!&lt;/p&gt;

&lt;p&gt;I'm not very good at combinatoric, so I used pen &amp;amp; paper to figure out the number of combinations for various set sizes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;size  combinations
  1      1
  2      1
  3      2
  4      4
  5      7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hm, these numbers look a tiny bit familiar. But before I further investigated them, I implemented the solution (&lt;a href="https://github.com/domm/adventofcode2020/blob/27e1fea82ed98f90c7be00b641f5fb6bdae13ac5/10_2.pl"&gt;original code&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @lu     = ( undef, 1, 1, 2, 4, 7 );
my @adapters = sort { $a &amp;lt;=&amp;gt; $b } 0, map { chomp; $_ } &amp;lt;&amp;gt;;
push( @adapters, $adapters[-1] + 3 );
my @set = 0;
my $res = 1;
my $i   = 1;
for (@adapters) {
    push( @set, $_ );
    if ( ( $adapters[ $i++ ] - $set[-1] ) == 3 ) {
        $res *= $lu[ @set - 1 ];
        @set = $set[-1];
    }
}
say $res;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We again sort the input, adding 0 at the beginning and adding the last adapter (+3) to the end. We add the first adapter to the first set (@set = 0), and init a counter and the result.&lt;/p&gt;

&lt;p&gt;Then we walk the adapters and push the current one onto the current set. If the next adapter (&lt;code&gt;$adapters[$i++]&lt;/code&gt;) has a joltage that's 3 bigger then the current adapter (which is the last element of the current set, &lt;code&gt;$set[-1]&lt;/code&gt;), we get the number of combinations for the current set by looking it up in my handcrafted list (using set size minus 1, because we already pushed the current element onto the set) and multiply them with the result. Then we reset the current set to only contain the current adapter. (If this is a bit unclean, take a look at the original code linked above).&lt;/p&gt;

&lt;p&gt;After finishing the task, I googled the number and first found something called the &lt;a href="https://en.wikipedia.org/wiki/Lazy_caterer%27s_sequence"&gt;lazy caterer's sequence&lt;/a&gt;, but this is the wrong sequence. In fact we're looking at the tribonacci numbers, i.e. Tn = T(n-1) + T(n-2) + T(n-3)&lt;/p&gt;

&lt;p&gt;That was fun!&lt;/p&gt;

&lt;h4&gt;No Space&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;my@t=(0,1,1,2,4,7);my@a=sort{$a&amp;lt;=&amp;gt;$b}0,map{chomp;$_}&amp;lt;&amp;gt;;push(@a,$a[-1]+3);my@s=0;my$r
=1;my$i=1;for(@a){push(@s,$_);if(($a[$i++]-$s[-1])==3){$r*=$t[@s-1];@s=$s[-1]}}say$r&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 06:19 / ~42:00&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 18325 / 20384 (wow, there where 8 hours between me solving part 1 and 2, I've expected a way worse rank)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/10"&gt;https://adventofcode.com/2020/day/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Bill &amp; Ted's Bogus Journey</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/12/bill-teds-bogus-journey.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9987</id>

    <published>2020-12-10T12:21:06Z</published>
    <updated>2020-12-10T12:38:19Z</updated>

    <summary>Most operating systems have a version of libpng, the library for reading and writing the PNG (portable network graphics) image format on them. Unfortunately, though, the libpng is often fairly old. I wrote a CPAN module which links against libpng,...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="billted" label="Bill &amp; Ted" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="bogus" label="bogus" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="libpng" label="libpng" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="testing" label="testing" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>Most operating systems have a version of libpng, the library for reading and writing the PNG (portable network graphics) image format on them. Unfortunately, though, the libpng is often fairly old. </p>

<p>I wrote <a href="https://metacpan.org/release/Image-PNG-Libpng">a CPAN module which links against libpng</a>, but then trying to get the module tested with CPAN testers, a lot of bugs would happen. It was frustrating because I couldn't work out what was going wrong with the tests unless I could find out what version of libpng was installed on the testing machine. </p>

<p>The solution I came up with in the end was <a href="https://metacpan.org/source/BKB/Image-PNG-Libpng-0.49/t%2Fbogus.t">a bogus test file</a> which merely <a href="http://www.cpantesters.org/cpan/report/8dabd5b4-3a7e-11eb-9692-8e5a1f24ea8f">prints the libpng version as its skip_all message</a>. This turned out to be quite effective in working out what is going wrong as various improvements to my PNG module turn out to trip bugs in older versions of libpng.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl tips I wish I knew as a beginner</title>
    <link rel="alternate" href="https://dev.to/scotticles/perl-tips-i-wish-i-knew-as-a-beginner-26eh" type="text/html"/>
    <content type="html">&lt;p&gt;I think the hard part with Perl and other languages, is setting up your environment. As you do more Perl you realize there are better ways to do things that aren't straight forward when you first began the journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I use Linux and this will be on a Linux environment, BUT with WSL on windows and with homebrew on mac.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#system-perl-and-user-perl" class="anchor"&gt;
  &lt;/a&gt;
  System Perl and User Perl
&lt;/h1&gt;

&lt;p&gt;On Linux, we have a system Perl. It's great to have but we don't want to mess with it. Lets keep the system Perl for the system. We want a user environment and you really must do this, its way better. We have two tools we can pick from that make it easy to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tokuhirom/plenv"&gt;Plenv&lt;/a&gt; and &lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;. &lt;em&gt;I started on Perlbrew and moved over to Plenv.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Plenv allows you to make it so each project you work on has a .plenv file and you can specify the Perl version you want.&lt;/p&gt;

&lt;p&gt;Look at the two links, pick one and set it up, pick a perl version and install it. Verify it works with &lt;code&gt;perl -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You want to install cpanminus.&lt;br&gt;
&lt;code&gt;plenv install-cpanm&lt;/code&gt; &amp;lt;--plenv&lt;br&gt;
&lt;code&gt;cpan App-cpanminus&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You are now off system Perl and on your user Perl, its awesome. Cpanminus is installed and you can now install Perl modules for your project.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-cpanfile" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;a href="https://metacpan.org/pod/distribution/Module-CPANfile/lib/cpanfile.pod"&gt;cpanfile&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In your project you want to make a cpanfile. Cpanfiles contain a list of Perl modules.&lt;/p&gt;

&lt;p&gt;As your project grows, add in the modules to the cpanfile. When you need to distribute it, you can use the below command to install the dependencies. Makes life easier for everyone.&lt;br&gt;
&lt;code&gt;cpanm --installdeps .&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#carton" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Carton"&gt;Carton&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;"Perl module dependency manager (aka Bundler for Perl)"&lt;br&gt;
Carton is awesome, with plenv its even more awesome.&lt;/p&gt;

&lt;p&gt;This is stolen from metacpan pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# On your development environment&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Plack&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.9980&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starman&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.2000&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;snapshot&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sr"&gt;m "add Plack and Starman"&lt;/span&gt;

&lt;span class="c1"&gt;# Other developer's machine, or on a deployment box&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;starman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="nv"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;psgi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#vscode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Before vscode came out, I was living in PHPStorm with a Perl plugin, it worked but it was only okay. Code is awesome with all its plugins, once you get code up, browse the perl plugins. One you will want to have is perltidy and you'll need a &lt;code&gt;.perltidyrc&lt;/code&gt; in your project, you can find examples on the web, but here is Mojolicoius &lt;a href="https://github.com/mojolicious/mojo/blob/master/.perltidyrc"&gt;perltidyrc&lt;/a&gt;. I use that one.&lt;/p&gt;

&lt;p&gt;This should get you started with Perl.&lt;/p&gt;

</content>
    <author>
      <name>Scotticles</name>
    </author>
    <id>https://dev.to/scotticles/perl-tips-i-wish-i-knew-as-a-beginner-26eh</id>
    <published>2020-12-09T23:10:35Z</published>
    <updated>2020-12-09T23:10:35Z</updated>
    <category term="perl"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Strawberryperl.com - https any time soon?</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/martin_mcgrath/2020/12/strawberryperlcom---https-any-time-soon.html"/>
    <id>tag:blogs.perl.org,2020:/users/martin_mcgrath//2910.9986</id>

    <published>2020-12-09T23:04:34Z</published>
    <updated>2020-12-09T23:04:51Z</updated>

    <summary>Throwing this one out to the wider community, if anyone can assist in adding https support to strawberryperl.com that'd be great, with browsers and corporate firewalls moving towards a stricter mode of operation. An existing issue is here, with some...</summary>
    <author>
        <name>Martin McGrath</name>
        
    </author>
    
    <category term="win32httpsstrawberryperl" label="win32 https strawberryperl" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/martin_mcgrath/">
        <![CDATA[<p>Throwing this one out to the wider community, if anyone can assist in adding https support to strawberryperl.com that'd be great, with browsers and corporate firewalls moving towards a stricter mode of operation. An existing issue is <a href="https://github.com/StrawberryPerl/strawberryperl.com/issues/11">here</a>, with some history for those interested. Thanks in advance.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Advent of Code Day 9 - while learning</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_09.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_09.html</id>
    <updated>2020-12-09T20:58:36+00:00</updated>
    <category term="perl"/>
    <summary>The main takeaway of this day was that it makes a lot of sense to remember what we learned on previous days. Which I realized the hard way, after wasting 25 minutes on playing around with ...</summary>
    <content type="html">&lt;p&gt;The main takeaway of this day was that it makes a lot of sense to remember what we learned on previous days. Which I realized the hard way, after wasting 25 minutes on playing around with List::Permutor, when in fact this problem was a slightly extended version of &lt;a href="https://adventofcode.com/2020/day/1"&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/9"&gt;https://adventofcode.com/2020/day/9&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;This time the test and live data used different sizes for the "preamble", so I get that value from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl 09_1.pl 25 &amp;lt; 09.data&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I read in the input, removing newlines via chomp. The main loop runs &lt;code&gt;check()&lt;/code&gt; (see below). If the check fails we remove the first element of the input, if not we exit the loop and print the value in the input &lt;strong&gt;after&lt;/strong&gt; the "preamble".&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $size = shift;
my @in   = map { chomp; $_ } &amp;lt;&amp;gt;;

while (1) {
    check() ? shift @in : last;
}
say $in[$size];

sub check {
    my %lu = map { $_, 1 } @in[ 0 .. $size - 1 ];
    for my $a ( keys %lu ) {
        if ( $lu{ $in[$size] - $a } ) {
            return 1;
        }
    }
    return;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now about the check-function. We're again looking for two values in a list that sum up to a specific value, so we can reuse the trick we learned on day 1. I generate the list of "candidates" via an array slice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my %lu = map { $_, 1 } @in[ 0 .. $size - 1 ];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The target value is located after the "preamble", i.e. at &lt;code&gt;$in[$size]&lt;/code&gt;, so we loop through the candidates and see if the lookup hash contains a value at &lt;code&gt;target - current value&lt;/code&gt;. We return true, which will exit the main loop.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;As Part 2 reuses the result from Part 1, but I didn't want to hard-code it, I just added some more code (and I'll skip the old code here, you can view it on &lt;a href="https://github.com/domm/adventofcode2020/blob/main/09_2.pl"&gt;github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Instead of just printing the result, we store it in &lt;code&gt;$target&lt;/code&gt;. I also use a few functions from &lt;a href="https://metacpan.org/pod/List::Util"&gt;List::Util&lt;/a&gt;. And as my algorithm is destructive on the input, I copy the original data into @in2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use List::Util qw (min max sum);
my @in2  = @in;
my $target = $in[$size];

while (1) {
    my @try = @in2;
    my @cand;

    while (1) {
        push( @cand, shift @try );
        my $sum = sum(@cand);

        if ( $sum == $target ) {
            say min(@cand) + max(@cand);
            exit;
        }
        last if $sum &amp;gt; $target;
    }
    shift(@in2);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the outer loop we copy the input again, prepare an array to store the candidates, and (at the end, in the last row) remove the first element of the input.&lt;/p&gt;

&lt;p&gt;In the inner loop, we take the first element from the input, and push it onto the candidates array. The we calc the sum of the candidates, compare it with the target, and if it matches calculate the final result.&lt;/p&gt;

&lt;h4&gt;No Spaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;eval(qq{use$&amp;quot;List::Util&amp;quot;min&amp;quot;,&amp;quot;max&amp;quot;,&amp;quot;sum&amp;quot;});my$s=shift;my@x=map{chomp;$_}&amp;lt;&amp;gt;;my@y=@x
;$b=sub{my%l=map{$_,1}@x[0..$s-1];for(keys%l){if($l{$x[$s]-$_}){return&amp;quot;1&amp;quot;}}};while
(1){&amp;amp;$b?shift@x:last}my$t=$x[$s];while(1){my@t=@y;my@z;while(1){push(@z,shift@t);
my$r=sum(@z);if($r==$t){say(min(@z)+max(@z));exit}if($r&amp;gt;$t){last}}shift(@y)}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I cheated a little bit with using eval to load List::Util, but still nice enough.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 37:37 / 14:37&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 13413 / 13173&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/9"&gt;https://adventofcode.com/2020/day/9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>The story behind a new module</title>
    <link rel="alternate" href="https://dev.to/davorg/the-story-behind-a-new-module-2gkp" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I really like <a href="https://metacpan.org/pod/http_this"><code>http_this</code></a>. Whenever I'm working on a static site (or even <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">a semi-static site</a>) and I want to check how it looks, I can run a simple command-line program and have a local web server serving my site. And I don't have to worry about relative or absolute URLs - everything just works.</p>

<p>Well, almost everything. There's one bit of <code>http_this</code> that always annoys me. It doesn't support <code>index.html</code>. If I request a directory that includes an <code>index.html</code> file, then I'd expect to see that file served to me, but instead, I get a directory listing. If I choose <code>index.html</code> from that list, then everything works as expected. But it's an annoying extra step.</p>

<p>Recently, I'd had enough of this problem and I decided to do something about it.</p>

<p>Digging into the code of <code>http_this</code>, I soon discovered that it was really just a thin layer over the standard Plack application <a href="https://metacpan.org/pod/Plack::App::Directory">Plack::App::Directory</a>. And I like Plack applications. They have a nice modular architecture that makes them easy to hack on.</p>

<p>In my experience, the first thing to do when trying to find a solution to a Plack problem is to find a piece of middleware that addresses your problem. And, sure enough, there was <a href="https://metacpan.org/pod/Plack::Middleware::DirIndex">Plack::Middleware::DirIndex</a> which says that it does this:</p>

<blockquote>
<p>If <code>$env-&gt;{PATH_INFO}</code> ends with a '/' then we will append the dir_index value to it (defaults to index.html)</p>
</blockquote>

<p>And that sounds like exactly what we want. So I quickly hacked a solution using this into App::HTTPThis (the module that actually drives <code>http_this</code>). It took about five minutes.</p>

<p>But on testing it, I realised there was a problem. Look at its description again. For any request where the path ends with a <code>/</code>, the middleware will add the index filename to the request. And that's subtly different to what we want (actually, I think it's subtly different to what anyone wants). If you send a request to a web server to view a directory (i.e. one where the path ends with '/') there are two things that might happen:</p>

<ul>
<li>If there is an <code>index.html</code> file in the directory, then you want to see the contents of that file</li>
<li>If there is no <code>index.html</code> file,  then you want to see a directory listing</li>
</ul>

<p>The current behaviour of <code>http_this</code> is to always return a directory listing. Adding in Plack::Middleware::DirIndex means it will always look for <code>index.html</code>. And if there is no <code>index.html</code>, then you'll get a 404. I don't think that's very useful.</p>

<p>So I moved on. (I've just gone back and <a href="https://github.com/ranguard/plack-middleware-dirindex/pull/4">proposed a patch</a> that gives the behaviour I want.)</p>

<p>Next, I looked at Plack::App::Directory itself. That is the module which provides the directory listing that <code>http_this</code> uses. What if I could add support for a directory index file to that module?</p>

<p>That actually proved to be pretty simple. In half an hour or so, I had sent <a href="https://github.com/plack/Plack/pull/654">a pull request</a> that added support for an (optional) <code>dir_index</code> parameter. Without my new parameter, the module's behaviour is unchanged. But with it, the behaviour would be:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>IF we have a request for a directory
  AND we have a dir_index configured
  AND there is a dir_index file in the directory
  THEN serve the dir_index file
ELSE serve a directory listing
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>

<p>I think it's a reasonable patch, but it hasn't been addressed by the author yet. I got one comment from someone else, suggesting that I used Plack::Middleware::DirIndex - but I've already explained why I don't think that's a good solution.</p>

<p>I guess I should wait to see if my patch is accepted into Plack::App::Directory, but it has been three weeks and I confess to being rather impatient.</p>

<p>So I've ended up writing my own module. It's called <a href="https://metacpan.org/pod/Plack::App::DirectoryIndex">Plack::App::DirectoryIndex</a> and it's on CPAN now. It works exactly how I'd like it too, supporting both the situation where an <code>index.html</code> exists and the one where it doesn't. Perhaps you'll find it useful. Please let me know if you do (or if you find any bugs in it).</p>

<p>Now, I just need to <a href="https://github.com/melo/app-htttpthis/pull/4">persuade the author of <code>http_this</code></a> to use my module in place of Plack::App::Directory :-)</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/the-story-behind-a-new-module-2gkp</id>
    <published>2020-12-09T18:04:00Z</published>
    <updated>2020-12-09T18:04:00Z</updated>
    <category term="perl"/>
    <category term="plack"/>
    <category term="directory"/>
  </entry>
  <entry>
    <title>I Hate Floating Point!</title>
    <link rel="alternate" href="https://dev.to/drhyde/i-hate-floating-point-3am" type="text/html"/>
    <content type="html">&lt;p&gt;In one of my projects, I need to know what is the minimum number of bytes needed to store a given integer. The Obviously Correct answer, ignoring negatives and the special case of 0,  is something like ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'm lucky that my test suite included a value of &lt;code&gt;$data&lt;/code&gt; that is an exact multiple of 256 (which is likely to expose floating point errors in that calculation), and doubly lucky that the particular value in the test suite had a floating point error &lt;em&gt;in the right direction&lt;/em&gt; so that the test actually failed, because ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl-5.30.2/bin/perl -E 'say 1 + int(log(0x1000000) / log(256))'
4
$ perl-5.30.2-quadmath/bin/perl -E 'say 1 + int(log(0x1000000) / log(256))'
3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ouch! The first does the calculation using a 64 bit IEEE754 float, the second uses gcc's &lt;code&gt;libquadmath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My thanks to the CPAN-testers for making my tests fail!&lt;/p&gt;

</content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/i-hate-floating-point-3am</id>
    <published>2020-12-09T17:50:03Z</published>
    <updated>2020-12-09T17:50:03Z</updated>
    <category term="floatingpoint"/>
    <category term="types"/>
    <category term="testing"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Advent of Code Day 8 - running code</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_08.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_08.html</id>
    <updated>2020-12-08T19:59:42+00:00</updated>
    <category term="perl"/>
    <summary type="html">This was a fun day. The first part was rather simple, but when I read the second part I thought that this will get very hard. It wasn't that bad in the end..

https://adventofcode.com/2020/day/8
 ...</summary>
    <content type="html">&lt;p&gt;This was a fun day. The first part was rather simple, but when I read the second part I thought that this will get very hard. It wasn't that bad in the end..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adventofcode.com/2020/day/8"&gt;https://adventofcode.com/2020/day/8&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;First we parse the input into an array containing another array with each op and value. As we need to stop when we've seen a line, we use the index &lt;code&gt;$i&lt;/code&gt; of the code-array and exit the loop via &lt;code&gt;last&lt;/code&gt; if &lt;code&gt;$i&lt;/code&gt; was already seen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @code = map {[split(/ /)]} &amp;lt;&amp;gt;;
my %seen;
my $i   = 0;
my $acc = 0;
while (1) {
    last if $seen{$i}++;

    my ( $op, $val ) = $code[$i]-&amp;gt;@*;
    if ( $op eq 'jmp' ) { $i   += $val; next }
    if ( $op eq 'acc' ) { $acc += $val }
    $i++;
}
say $acc;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To actually "execute" the code, we fetch the op and val of the current line. We jump (via &lt;code&gt;next&lt;/code&gt;) if it's a &lt;code&gt;jmp&lt;/code&gt;, we accumulate if it's &lt;code&gt;acc&lt;/code&gt;; and we increment $i (which will not happen for &lt;code&gt;jmp&lt;/code&gt;, because we already skipped the rest of the block)&lt;/p&gt;

&lt;p&gt;Finally we just output the value of &lt;code&gt;$acc&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Now we need to figure out which of 638 command we need to change to avoid an endless loop and get the "correct" result. Uff...&lt;/p&gt;

&lt;p&gt;But in the end it's quite easy (and of course there are way more elegant solutions to be found on &lt;a href="https://old.reddit.com/r/adventofcode/comments/k8xw8h/2020_day_08_solutions/"&gt;reddit&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I decided to copy the original code into a temporary code array, and then walk through the code, remembering which lines I already changed, and always only changing the first unchanged line. After the one line in the code is changed, I &lt;code&gt;run()&lt;/code&gt; it, and if we get a result back, we exit and print.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @original = &amp;lt;&amp;gt;;
my %tried;
my $acc;
while (1) {
    my @try = @original;
    for ( my $i = 0; $i &amp;lt; @original; $i++ ) {
        my $line = $try[$i];
        next if $line =~ /acc/;
        if ( $tried{$i}++ ) {
            next;
        }
        else {
            $line =~ /nop/ ? $line =~ s/nop/jmp/ : $line =~ s/jmp/nop/;
            $try[$i] = $line;
            last;
        }
    }

    $acc = run(@try);
    last if $acc;
}
say $acc;

sub run {
    my @code = @_;
    my %seen;
    my $i   = 0;
    my $acc = 0;
    while (1) {
        return 0    if $seen{$i}++;
        return $acc if $i &amp;gt;= @code;
        my ( $op, $val ) = split( / /, $code[$i] );

        if ( $op eq 'jmp' ) { $i   += $val; next }
        if ( $op eq 'acc' ) { $acc += $val }
        $i++;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;run()&lt;/code&gt; function is basically the same as the solution for part 1, with the only change that we return 0 if the code looped, or the accumulators value if we reached the end of the code.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 08:12 / 23:06&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 12043 / 10371&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/8"&gt;https://adventofcode.com/2020/day/8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
  <title>Community Leaders and Board Meeting November 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/ommunityeadersandoardeetingovember2020"/>
  <id>tag:news.perlfoundation.org,2020-12-08:/post/ommunityeadersandoardeetingovember2020</id>
  <published>2020-12-08T06:05:13</published>
  <updated>2020-12-08T06:05:13</updated>
  <summary>
  <![CDATA[
     Perl and Raku updates, mentoring, grants, sponsorship progress, conferences, trademarks and more were discussed amongst community leaders at the meeting held in November. The meeting is becoming an invaluable tool for the Board and community to communicate with each other about developments in TPF and the wider Perl community. The Board looks forward to future successful community leader meetings with representatation from a wide cross section of our community. The 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Perl and Raku updates, mentoring, grants, sponsorship progress, conferences, trademarks and more were discussed amongst community leaders at the meeting held in November.  The  meeting is becoming an invaluable tool for the Board and community to communicate with each other about developments in TPF and the wider Perl community.</p>

<p>The Board looks forward to future successful community leader meetings with  representatation from a wide cross section of our community. The next meeting is on Friday 18th December at 1830UTC, via Zoom. We hope to see as many community leaders as possible. If you have anything specific to share, please do let the team know via the Community Leaders Slack Channel and we can add your update to the agenda.</p>

<p>The notes from the Community Leaders meeting, as well as from the Board meeting which followed are all shared below.</p>

<h1>Community Leaders Meeting 20 November</h1>

<h2>Invitees</h2>

<ul>
<li>TPF Board</li>
<li>Nic Evans</li>
<li>Jason C (Grants)</li>
<li>Alex (Sponsorship)</li>
<li>Samantha (CAT)</li>
<li>Perl steering committee member</li>
<li>Raku steering committee member</li>
<li>Nige (Legal &amp; commercial)</li>
<li>Andrew Solomon (New community members)</li>
</ul>

<h2>Attendees</h2>

<ul>
<li>Board: Stuart Mackintosh, Dave Rolsky, Pete Krawczyk, Dan Wright, Allison Randal</li>
<li>Leaders: Nige Hamilton, Alex Beamish, Daniel Sockwell, Samantha McVey, SawyerX, Andrew Solomon </li>
<li>Admin: Nic Evans</li>
<li>Confirmed absence: Mark Keating, Makoto Nozaki</li>
</ul>

<h2>Discussion</h2>

<h3>Perl &amp; Raku mentoring</h3>

<p>Andrew Solomon introduced proposal -</p>

<p>Newcomers think Perl is a sparsely populated community. I have been looking at Python and saw 20k people all signed up, questions being answered quickly. Occured to me we should have similar for Perl. I know we have presence on Facebook, but not very welcoming to discuss tech.
First thought would be good to use Slack but didn't want to just do it, wanted guidance from TPF - so put together proposal for thoughts.</p>

<p>Opinion expressed:
- Possibility to turn it into teaching materials
- Slack vs other services - let's focus on TPF hosted chat service</p>

<p>Action: Document requirement and goals collaboratively and evaluate options</p>

<h3>Legal</h3>

<ul>
<li>Raku trademark registration is done in UK and making progress in US and EU.</li>
<li>The onion logo was discussed, including whether we should continue using it</li>
<li>Stuart pointed out it's a three-way link of marketing, legal and technology</li>
<li>Action: Set up further discussion between Marketing, Legal and other interested parties</li>
</ul>

<h3>Grants</h3>

<ul>
<li>Documentation Standards for the Perl 7 Era grant was completed earlier this month and has been submitted for payment.</li>
<li>No new grants submitted during the November 2020 period. Next call is in January</li>
<li>There was discussion over what to do with the Perl 6 (Now: Raku) Course with Exercises Grant. We expect the first deliverable within the next 3 weeks.</li>
<li>Putting together a report of grants requested and approved over the last 3 years. Hope is to have them by early December.</li>
<li>Planning to start working with GC in 1Q 2021 to propose some revisions to clean up our charter. </li>
</ul>

<h3>Marketing</h3>

<ul>
<li>No update - no meeting in the past month. Marketing committee to meet next week (26 November). Will have update atfer that.</li>
</ul>

<h3>Sponsorship</h3>

<ul>
<li>Draft sponsorship letter and web page all written, awaiting sign off from Board</li>
<li>Discussion
<ul>
<li>How to recognize donors</li>
<li>What donors expect in return</li>
<li>Best way to have ongoing sponsorship - "membersip" or "supporter"</li>
</ul></li>
</ul>

<h3>TPC and Conferences</h3>

<h4>TPC (US - organized by TPF)</h4>

<p>We will decide if we hold the conference in person. Otherwise we need to look at how we do it virtually. We learned a lot in 2020. </p>

<h4>TPC (Europe - not organized by TPF)</h4>

<p>Questions remain over whether there will be a conference in Europe in 2021.</p>

<h4>FOSDEM</h4>

<p>We have applied for a virtual dev room. It will be an alternative to the BoF event we were thinking.</p>

<h4>Other events</h4>

<p>We need to encourage events where posible. If somebody needs help, let us know and we will try to support it.</p>

<h3>Raku</h3>

<ul>
<li>Having first meeting of Raku Steering Council in one week. Main agenda item is Code of Conduct. We have written a draft code of conduct as well as a Code of Conduct incident guide, with some reference to CAT documentation. Have circulated for discussion at first meeting. Will share draft shortly over a week.</li>
<li>We are looking at advent calendar posts for Raku.</li>
<li>Stuart: It's important to have Raku representation at this meeting. </li>
</ul>

<h3>CAT</h3>

<ul>
<li>Policy document needs to be reviewed - a single document which needs to be split into a policy and a charter document, as well as an incident handling document.</li>
<li>Discussion is held in Slack</li>
</ul>

<h3>Perl</h3>

<ul>
<li>Still working on governance and resolved to basic guidelines in operation. </li>
<li>We haven't created a core team but know how to create it. We are waiting to create it, set up a mailing list, then dissolve the governance list which was meant to set up the steering committee. </li>
<li>Stuart: We need to think about enabling Perl to thrive in 50-100 years time.</li>
</ul>

<h3>Infrastructure</h3>

<ul>
<li>We collected passwords we own. It's a good first step and we have a lot to do.</li>
</ul>

<p>&gt; Meeting closed: 19:41 UTC
&gt; Notes taken by: Nic Evans / Stuart Mackintosh</p>

<h1>Board Meeting Notes 20 November 2020</h1>

<h2>Attendees</h2>

<ul>
<li>Stuart, Pete, Dave, Dan, Allison, Nic (admin), Makoto</li>
</ul>

<h2>Meeting topics</h2>

<h3>Advisory board and the board members' retirement process</h3>

<ul>
<li>Advisory board's role was proposed by Stuart</li>
<li><a href="https://www.perlfoundation.org/advisory_board.html">Public doc</a></li>
<li>Separately, each board member will receive a letter at the end of their two-year term to see if they wish to remain. The latter will ask whether they stay on the board and what they want to achieve.</li>
<li>Action: Each board member will review for additional feedback</li>
</ul>

<h3>President's role and Selection</h3>

<ul>
<li>Stuart's two-year term will end in September 2021. </li>
<li>Items discussed:
<ul>
<li>Whether to recruit the next president externally or internally</li>
<li>What the new president's role is, if different from now</li>
<li>The president's role will change over time</li>
</ul></li>
<li>Discuss further at  the next meeting</li>
</ul>

<h2>Recognised resources</h2>

<ul>
<li>The idea of recognised resources was raised and reviewed</li>
<li>Would be good in hands of marketing</li>
<li>Review in January</li>
</ul>

<h2>Board introduction web page</h2>

<ul>
<li>Drafted and under review</li>
</ul>

<h2>Sponsorship letter and web page</h2>

<ul>
<li>The sponsorship letter was drafted and presented</li>
<li>Feedback was given</li>
<li>Idea was raised to link it with the marketing effort</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>This Company is No Shop of Horrors. Perl role in Canberra, Australia</title>
    <link rel="alternate" href="https://job.perl.careers/3e0" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">DNA-dynamos looking for someone whose modern Perl skills are complemented by an interest in genome technology and bioinformatics. They are searching for a candidate who is familiar with modern tooling and might have experience with Ansible, AWS, and Linux containers. Also interested in being on-site in Canberra? They would be eager to meet you.</div>
    </content>
    <id>https://job.perl.careers/3e0</id>
    <published>2020-12-07T10:00:53Z</published>
    <updated>2020-12-07T10:00:53Z</updated>
  </entry>
  <entry>
    <title>Just Another Day Working in Perl Paradise (Perl developer job in Malta)</title>
    <link rel="alternate" href="https://job.perl.careers/c6q" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is a financial company whose growth over the last twenty years has been nothing short of impressive. They started with the idea that online trading should be available to all, and from there, they’ve built a company with multiple locations worldwide. If you want to be part of a business that is thriving, this may be the perfect opportunity for you.</div>
    </content>
    <id>https://job.perl.careers/c6q</id>
    <published>2020-12-07T10:00:52Z</published>
    <updated>2020-12-07T10:00:52Z</updated>
  </entry>
  <entry>
    <title>Seeking Senior Perl Developers for Global Domination. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/u8x" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an international IT company managing over 4 million domains for retail and corporate customers in 200 countries. To help achieve global domination, they’re looking for a few top-notch senior Perl developers whose experience with implementing APIs and protocols is only matched by their drive to design and develop domain software solutions.</div>
    </content>
    <id>https://job.perl.careers/u8x</id>
    <published>2020-12-07T10:00:51Z</published>
    <updated>2020-12-07T10:00:51Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/78p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/78p</id>
    <published>2020-12-07T10:00:50Z</published>
    <updated>2020-12-07T10:00:50Z</updated>
  </entry>
  <entry>
    <title>How do you look in a fig leaf? Perl role in Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/ddn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This organization is one of the world’s leading developers of medical diagnostic technologies and clinical software. They believe in security, wellness, and the importance of driving innovation to deliver patient benefit. In short: do-gooders doing good! Isn’t it about time you felt positive about what you do?</div>
    </content>
    <id>https://job.perl.careers/ddn</id>
    <published>2020-12-07T10:00:49Z</published>
    <updated>2020-12-07T10:00:49Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-12-07T10:00:48Z</published>
    <updated>2020-12-07T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Raku: A New Language for a New Year</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 7, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/</id>
    <published>2020-12-07T10:00:47Z</published>
    <updated>2020-12-07T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-12-07T10:00:46Z</published>
    <updated>2020-12-07T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-12-07T10:00:45Z</published>
    <updated>2020-12-07T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Collective Voice: Web Application Development with Perl Dancer</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275011889/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275011889/</id>
    <published>2020-12-07T10:00:44Z</published>
    <updated>2020-12-07T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-12-07T10:00:43Z</published>
    <updated>2020-12-07T10:00:43Z</updated>
  </entry>
  <entry>
    <title>New Year's Resolution - every month</title>
    <link rel="alternate" href="https://szabgab.com/new-years-resolution-every-month.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I just realized I could use my monthly report to have a new month's resolution and then even if after 2-3 weeks I abandon the commitments, the following month they can start again. Possibly in a new direction.</div>
    </content>
    <id>https://szabgab.com/new-years-resolution-every-month.html</id>
    <published>2020-12-07T10:00:42Z</published>
    <updated>2020-12-07T10:00:42Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/12/cccxviii-14-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/12/cdxlv-metacpan-weekly-report-plack.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/12/cdlxx-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-12-07T10:00:41Z</published>
    <updated>2020-12-07T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89.</title>
    <link rel="alternate" href="https://wlmb.github.io/PWC89/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Although new to the team, you can already see the spark in his writings. Thank you for your contribution.</div>
    </content>
    <id>https://wlmb.github.io/PWC89/</id>
    <published>2020-12-07T10:00:40Z</published>
    <updated>2020-12-07T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-089/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt made the GCD sum task a one-liner - great skill. Even the difficult task is no trouble for him. Check it out yourself.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-089/walt-mankowski/README.md</id>
    <published>2020-12-07T10:00:39Z</published>
    <updated>2020-12-07T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 089</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-089-f3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon very elegantly used a brute-force technique to solve the Magic Matrix task. Just loved it.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-089-f3</id>
    <published>2020-12-07T10:00:38Z</published>
    <updated>2020-12-07T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: magic sum</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_89__magic_sum.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog has been an inspiration for me every time. Read his words carefully and you will understand what I mean.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_89__magic_sum.html</id>
    <published>2020-12-07T10:00:37Z</published>
    <updated>2020-12-07T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89: GCD Sums and Magic Squares</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is one of the few who have been associated with the weekly challenge from day one and you see he is still as refresh as he was on day one. Unmatched skill.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/12/perl-weekly-challenge-89-gcd-sums-and-magic-squares.html</id>
    <published>2020-12-07T10:00:36Z</published>
    <updated>2020-12-07T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 089 -- GCD Sum and the magic square.</title>
    <link rel="alternate" href="https://gugod.org/2020/12/pwc-089-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min made the magic square looks like a walk in the park. There is so much to learn from him.</div>
    </content>
    <id>https://gugod.org/2020/12/pwc-089-en/</id>
    <published>2020-12-07T10:00:35Z</published>
    <updated>2020-12-07T10:00:35Z</updated>
  </entry>
  <entry>
    <title>PWC089 - Magical Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/02/pwc089-magical-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's engaging writing skill is very addictive. Please check it out yourself.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/02/pwc089-magical-matrix/</id>
    <published>2020-12-07T10:00:34Z</published>
    <updated>2020-12-07T10:00:34Z</updated>
  </entry>
  <entry>
    <title>PWC089 - GCD Sum</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/01/pwc089-gcd-sum/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I love Flavio in the same spirit as he mentioned me in this blog post. He is simply incredible.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/01/pwc089-gcd-sum/</id>
    <published>2020-12-07T10:00:33Z</published>
    <updated>2020-12-07T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Perl Challenge 89 and the Return of the Son of Overkill</title>
    <link rel="alternate" href="https://jacoby.github.io/2020/11/30/perl-challenge-89-and-the-return-of-the-son-of-overkill.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Reading a blog post like Dave's can be a blessing. It gives you so many new ideas. You don't want to miss it.</div>
    </content>
    <id>https://jacoby.github.io/2020/11/30/perl-challenge-89-and-the-return-of-the-son-of-overkill.html</id>
    <published>2020-12-07T10:00:32Z</published>
    <updated>2020-12-07T10:00:32Z</updated>
  </entry>
  <entry>
    <title>The Greatest Common Magick Trick</title>
    <link rel="alternate" href="https://colincrain.com/2020/12/06/the-greatest-common-magick-trick/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Don't you love the blog post's title? The content is also magical as always.</div>
    </content>
    <id>https://colincrain.com/2020/12/06/the-greatest-common-magick-trick/</id>
    <published>2020-12-07T10:00:31Z</published>
    <updated>2020-12-07T10:00:31Z</updated>
  </entry>
  <entry>
    <title>CY's Brute-Force Take on Task 2 of PWC#089</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok-Yin is another gem of a blogger. She can take you to another world with her writings.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html</id>
    <published>2020-12-07T10:00:30Z</published>
    <updated>2020-12-07T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Magical Sum with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/magical-sum.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne shared his invention that generates a GCD in Raku. His smooth transition to Perl from Raku is so beautiful and evident in his blog post.</div>
    </content>
    <id>https://raku-musings.com/magical-sum.html</id>
    <published>2020-12-07T10:00:29Z</published>
    <updated>2020-12-07T10:00:29Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 89</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/advent-calendar-2020-12-04/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The weekly blog post has turned into Advent Calendar by the power of Andrew Shitov. Hats off to him.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/advent-calendar-2020-12-04/</id>
    <published>2020-12-07T10:00:28Z</published>
    <updated>2020-12-07T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 089</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/06" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam's blog is never short of resourceful contents. You are going to enjoy it as much as I did.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/12/06</id>
    <published>2020-12-07T10:00:27Z</published>
    <updated>2020-12-07T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/06/perl-weekly-challenge-89-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail opened the Pandora's box in this blog post and shared some of his coolest creations. Must Read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/06/perl-weekly-challenge-89-part-2/</id>
    <published>2020-12-07T10:00:26Z</published>
    <updated>2020-12-07T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/12/04/perl-weekly-challenge-89-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This week belongs to Abigail with his collection of gems. In his blog post, he only touched on the Perl side of it.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/12/04/perl-weekly-challenge-89-part-1/</id>
    <published>2020-12-07T10:00:25Z</published>
    <updated>2020-12-07T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 89</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-089/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron really impressed me with his blogging skill. You can easily read his thought processes.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-089/</id>
    <published>2020-12-07T10:00:24Z</published>
    <updated>2020-12-07T10:00:24Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 089</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC dealing with the "GCD Sum" and "Magical Matrix" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-089</id>
    <published>2020-12-07T10:00:23Z</published>
    <updated>2020-12-07T10:00:23Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 090</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-090" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome the new week with couple of fun tasks "DNA Sequence" and "Ethiopian Multiplication". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-090</id>
    <published>2020-12-07T10:00:22Z</published>
    <updated>2020-12-07T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Programming Bootcamp for Scientists</title>
    <link rel="alternate" href="https://leanpub.com/c/bootcamp/c/pw20201207" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This is an introduction to Python for people who have no programming background. It includes the basics and some tools that are needed for Data Science. I teach this course at the <a href="https://www.weizmann.ac.il/">Weizmann Institute of Science</a>. The link here is a coupon that will give a deep discount in the next couple of days. Leanpub offers a 45-day, money-back guarantee.</div>
    </content>
    <id>https://leanpub.com/c/bootcamp/c/pw20201207</id>
    <published>2020-12-07T10:00:21Z</published>
    <updated>2020-12-07T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Dancer course</title>
    <link rel="alternate" href="https://leanpub.com/c/dancer" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Learn how to develop a web application using Perl Dancer. This course is going to be recorded one video a day during the Advent of 2020. The price will also go up by $1 a day. So if you are interested in buying it, then the sooner the cheaper. Leanpub offers a 45-day, money-back guarantee.</div>
    </content>
    <id>https://leanpub.com/c/dancer</id>
    <published>2020-12-07T10:00:20Z</published>
    <updated>2020-12-07T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Gabor self-reporting for 2020.11 </title>
    <link rel="alternate" href="https://szabgab.com/report-2020-11.html" type="text/html"/>
    <id>https://szabgab.com/report-2020-11.html</id>
    <published>2020-12-07T10:00:19Z</published>
    <updated>2020-12-07T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Monthly Report - November</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html" type="text/html"/>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html</id>
    <published>2020-12-07T10:00:18Z</published>
    <updated>2020-12-07T10:00:18Z</updated>
  </entry>
  <entry>
    <title>A call to Perl bloggers to come on dev.to </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I'd add that even if you are not going to write a blog post, you could still register and up-vote the <a href="https://dev.to/t/perl">Perl-related</a> posts to encourage the authors.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee</id>
    <published>2020-12-07T10:00:17Z</published>
    <updated>2020-12-07T10:00:17Z</updated>
  </entry>
  <entry>
    <title>About Perl books review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6</id>
    <published>2020-12-07T10:00:16Z</published>
    <updated>2020-12-07T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Advent of Code Day 6 - simple counting</title>
    <link rel="alternate" href="https://domm.plix.at/perl/2020_12_aoc_day_06.html" type="text/html"/>
    <id>https://domm.plix.at/perl/2020_12_aoc_day_06.html</id>
    <published>2020-12-07T10:00:15Z</published>
    <updated>2020-12-07T10:00:15Z</updated>
  </entry>
  <entry>
    <title>A Perl love letter </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj</id>
    <published>2020-12-07T10:00:14Z</published>
    <updated>2020-12-07T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Twenty Years of Monthly CPAN Releases</title>
    <link rel="alternate" href="https://blog.urth.org/2020/12/05/twenty-years-of-cpan-releases/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I just love the personal anecdotes and I love Dave's writing.</div>
    </content>
    <id>https://blog.urth.org/2020/12/05/twenty-years-of-cpan-releases/</id>
    <published>2020-12-07T10:00:13Z</published>
    <updated>2020-12-07T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Advent of Code Day 1 - brute loops</title>
    <link rel="alternate" href="https://domm.plix.at/perl/2020_12_aoc_day_01.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Part of a series of articles. Check them all!</div>
    </content>
    <id>https://domm.plix.at/perl/2020_12_aoc_day_01.html</id>
    <published>2020-12-07T10:00:12Z</published>
    <updated>2020-12-07T10:00:12Z</updated>
  </entry>
  <entry>
    <title>The blessing of forgetting</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/03/the-blessing-of-forgetting/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Forgetting is good because you can enjoy the (re)discovery.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/03/the-blessing-of-forgetting/</id>
    <published>2020-12-07T10:00:11Z</published>
    <updated>2020-12-07T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Find the first element in an array in Perl that satisfies a condition</title>
    <link rel="alternate" href="https://perlmaven.com/first" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Use grep or use List::Util::first</div>
    </content>
    <id>https://perlmaven.com/first</id>
    <published>2020-12-07T10:00:10Z</published>
    <updated>2020-12-07T10:00:10Z</updated>
  </entry>
  <entry>
    <title>RT - Action Plan for CPAN Authors</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave went ahead and described what CPAN authors could do to deal with the situation of RT going away. He even added a cute bug to the <a href="https://cpandashboard.com/">CPAN Dashboard</a> to help CPAN Authors identify distributions that need work. More ideas on <a href="https://www.reddit.com/r/perl/comments/k7tcgp/rt_action_plan_for_cpan_authors_perl_hacks/">Reddit</a>.</div>
    </content>
    <id>https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/</id>
    <published>2020-12-07T10:00:09Z</published>
    <updated>2020-12-07T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Perl and Camels</title>
    <link rel="alternate" href="http://neilb.org/2020/12/04/perl-and-camels.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In a nutshell: We can use any camel anywhere except for two cases: we can't use the specific one O'Reilly has on its Camel book and we can't use a camel on a Perl-related book cover published by a publisher that isn't O'Reilly. <a href="https://www.reddit.com/r/perl/comments/k6q9na/perl_and_camels/">Reddit</a></div>
    </content>
    <id>http://neilb.org/2020/12/04/perl-and-camels.html</id>
    <published>2020-12-07T10:00:08Z</published>
    <updated>2020-12-07T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Rex-1.13.2 is now available</title>
    <link rel="alternate" href="https://www.rexify.org/blog/2020/12/05/rex-1.13.2.html" type="text/html"/>
    <id>https://www.rexify.org/blog/2020/12/05/rex-1.13.2.html</id>
    <published>2020-12-07T10:00:07Z</published>
    <updated>2020-12-07T10:00:07Z</updated>
  </entry>
  <entry>
    <title>FOSDEM 2021: Call for papers open</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/fosdem-2021-call-for-papers" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This time FOSDEM will be online</div>
    </content>
    <id>https://news.perlfoundation.org/post/fosdem-2021-call-for-papers</id>
    <published>2020-12-07T10:00:06Z</published>
    <updated>2020-12-07T10:00:06Z</updated>
  </entry>
  <entry>
    <title>rt.cpan.org will sunset on March 1st, 2021</title>
    <link rel="alternate" href="https://perlmaven.com/rt-cpan-org-is-closing" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">See the <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">original announcement</a>. If I understand correctly, every CPAN module needs to start using some other bug-tracking system. According to <a href="https://cpan.rocks/">CPAN Rocks</a> that is based on information from <a href="https://metacpan.org/">MetaCPAN</a> there are 4,921 distributions that explicitly set RT as their bug-tracking system and there are 24,884 distribution that have not set any, in which case MetaCPAN defaults to showing RT. See also the <a href="https://www.reddit.com/r/perl/comments/k73bxy/rtcpanorg_is_closing/">Reddit discussion.</a> It isn't pretty.</div>
    </content>
    <id>https://perlmaven.com/rt-cpan-org-is-closing</id>
    <published>2020-12-07T10:00:05Z</published>
    <updated>2020-12-07T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Advent Planet</title>
    <link rel="alternate" href="http://www.lenjaffe.com/AdventPlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Every year Len collects the Advent calendars from around the world and creates an Advent calendar of all of them.</div>
    </content>
    <id>http://www.lenjaffe.com/AdventPlanet/</id>
    <published>2020-12-07T10:00:04Z</published>
    <updated>2020-12-07T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 4; DevTo: 12; Perl.com: 0; PerlAcademy: 2; PerlHacks: 1; PerlMaven: 2; Reddit: 25; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-12-07T10:00:03Z</published>
    <updated>2020-12-07T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://perlweekly.com/metacpan.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 183 uploads to CPAN of 138 distinct distributions by 76 different authors. Number of distributions with link to VCS: 96. Number of distros with CI: 60. Number of distros with bugtracker: 68.</div>
    </content>
    <id>https://perlweekly.com/metacpan.html</id>
    <published>2020-12-07T10:00:02Z</published>
    <updated>2020-12-07T10:00:02Z</updated>
  </entry>
  <entry>
    <title>A Replacement for PPM - ActiveState's New Perl Ecosystem</title>
    <link rel="alternate" href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">While PPM is gone, the need to install dependencies without requiring a local build environment remains. ActivePerl allowed developers to get up and running quickly by delivering hundreds of popular modules with a single installation. Both use cases are now addressed in &lt;a href="https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition"&gt;ActiveState's new ecosystem&lt;/a&gt;.</content>
    <id>https://www.activestate.com/blog/activestates-new-perl-ecosystem/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-eco-system&amp;utm_campaign=user-acquisition</id>
    <published>2020-12-07T10:00:01Z</published>
    <updated>2020-12-07T10:00:01Z</updated>
  </entry>
</feed>
